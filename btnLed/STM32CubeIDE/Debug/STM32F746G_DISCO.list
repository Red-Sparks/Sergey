
STM32F746G_DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000286ec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000063dc  080288c0  080288c0  000388c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000018  0802ec9c  0802ec9c  0003ec9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0802ecb4  0802ecb4  001aec00  2**0
                  CONTENTS
  5 .ARM          00000008  0802ecb4  0802ecb4  0003ecb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0802ecbc  0802ecbc  001aec00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   0000001c  0802ecbc  0802ecbc  0003ecbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  0802ecd8  0802ecd8  0003ecd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000124  20000000  0802ece0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0001502c  20000124  0802ee04  00040124  2**2
                  ALLOC
 11 ._user_heap_stack 00001400  20015150  0802ee04  00045150  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  001aec00  2**0
                  CONTENTS, READONLY
 13 BufferSection 0013ec00  c0000000  c0000000  00070000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 ExtFlashSection 00013ec0  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 FontFlashSection 000001a8  90013ec0  90013ec0  00063ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 0000000c  90014068  90014068  00064068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .debug_info   000d299d  00000000  00000000  001aec30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00017d31  00000000  00000000  002815cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002f90  00000000  00000000  00299300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 000049c8  00000000  00000000  0029c290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0003941d  00000000  00000000  002a0c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0007b35a  00000000  00000000  002da075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    0012367c  00000000  00000000  003553cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      000000d2  00000000  00000000  00478a4b  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00009724  00000000  00000000  00478b20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_loc    0004d367  00000000  00000000  00482244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000124 	.word	0x20000124
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080288a4 	.word	0x080288a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000128 	.word	0x20000128
 800020c:	080288a4 	.word	0x080288a4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b96e 	b.w	8000de0 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	468c      	mov	ip, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	f040 8083 	bne.w	8000c32 <__udivmoddi4+0x116>
 8000b2c:	428a      	cmp	r2, r1
 8000b2e:	4617      	mov	r7, r2
 8000b30:	d947      	bls.n	8000bc2 <__udivmoddi4+0xa6>
 8000b32:	fab2 f282 	clz	r2, r2
 8000b36:	b142      	cbz	r2, 8000b4a <__udivmoddi4+0x2e>
 8000b38:	f1c2 0020 	rsb	r0, r2, #32
 8000b3c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b40:	4091      	lsls	r1, r2
 8000b42:	4097      	lsls	r7, r2
 8000b44:	ea40 0c01 	orr.w	ip, r0, r1
 8000b48:	4094      	lsls	r4, r2
 8000b4a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b4e:	0c23      	lsrs	r3, r4, #16
 8000b50:	fbbc f6f8 	udiv	r6, ip, r8
 8000b54:	fa1f fe87 	uxth.w	lr, r7
 8000b58:	fb08 c116 	mls	r1, r8, r6, ip
 8000b5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b60:	fb06 f10e 	mul.w	r1, r6, lr
 8000b64:	4299      	cmp	r1, r3
 8000b66:	d909      	bls.n	8000b7c <__udivmoddi4+0x60>
 8000b68:	18fb      	adds	r3, r7, r3
 8000b6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b6e:	f080 8119 	bcs.w	8000da4 <__udivmoddi4+0x288>
 8000b72:	4299      	cmp	r1, r3
 8000b74:	f240 8116 	bls.w	8000da4 <__udivmoddi4+0x288>
 8000b78:	3e02      	subs	r6, #2
 8000b7a:	443b      	add	r3, r7
 8000b7c:	1a5b      	subs	r3, r3, r1
 8000b7e:	b2a4      	uxth	r4, r4
 8000b80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b84:	fb08 3310 	mls	r3, r8, r0, r3
 8000b88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b90:	45a6      	cmp	lr, r4
 8000b92:	d909      	bls.n	8000ba8 <__udivmoddi4+0x8c>
 8000b94:	193c      	adds	r4, r7, r4
 8000b96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9a:	f080 8105 	bcs.w	8000da8 <__udivmoddi4+0x28c>
 8000b9e:	45a6      	cmp	lr, r4
 8000ba0:	f240 8102 	bls.w	8000da8 <__udivmoddi4+0x28c>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	443c      	add	r4, r7
 8000ba8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bac:	eba4 040e 	sub.w	r4, r4, lr
 8000bb0:	2600      	movs	r6, #0
 8000bb2:	b11d      	cbz	r5, 8000bbc <__udivmoddi4+0xa0>
 8000bb4:	40d4      	lsrs	r4, r2
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bbc:	4631      	mov	r1, r6
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	b902      	cbnz	r2, 8000bc6 <__udivmoddi4+0xaa>
 8000bc4:	deff      	udf	#255	; 0xff
 8000bc6:	fab2 f282 	clz	r2, r2
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	d150      	bne.n	8000c70 <__udivmoddi4+0x154>
 8000bce:	1bcb      	subs	r3, r1, r7
 8000bd0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bd4:	fa1f f887 	uxth.w	r8, r7
 8000bd8:	2601      	movs	r6, #1
 8000bda:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bde:	0c21      	lsrs	r1, r4, #16
 8000be0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000be4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bec:	428b      	cmp	r3, r1
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0xe4>
 8000bf0:	1879      	adds	r1, r7, r1
 8000bf2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0xe2>
 8000bf8:	428b      	cmp	r3, r1
 8000bfa:	f200 80e9 	bhi.w	8000dd0 <__udivmoddi4+0x2b4>
 8000bfe:	4684      	mov	ip, r0
 8000c00:	1ac9      	subs	r1, r1, r3
 8000c02:	b2a3      	uxth	r3, r4
 8000c04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c08:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c0c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c10:	fb08 f800 	mul.w	r8, r8, r0
 8000c14:	45a0      	cmp	r8, r4
 8000c16:	d907      	bls.n	8000c28 <__udivmoddi4+0x10c>
 8000c18:	193c      	adds	r4, r7, r4
 8000c1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x10a>
 8000c20:	45a0      	cmp	r8, r4
 8000c22:	f200 80d9 	bhi.w	8000dd8 <__udivmoddi4+0x2bc>
 8000c26:	4618      	mov	r0, r3
 8000c28:	eba4 0408 	sub.w	r4, r4, r8
 8000c2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c30:	e7bf      	b.n	8000bb2 <__udivmoddi4+0x96>
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x12e>
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	f000 80b1 	beq.w	8000d9e <__udivmoddi4+0x282>
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c42:	4630      	mov	r0, r6
 8000c44:	4631      	mov	r1, r6
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	fab3 f683 	clz	r6, r3
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	d14a      	bne.n	8000ce8 <__udivmoddi4+0x1cc>
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d302      	bcc.n	8000c5c <__udivmoddi4+0x140>
 8000c56:	4282      	cmp	r2, r0
 8000c58:	f200 80b8 	bhi.w	8000dcc <__udivmoddi4+0x2b0>
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	468c      	mov	ip, r1
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	d0a8      	beq.n	8000bbc <__udivmoddi4+0xa0>
 8000c6a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c6e:	e7a5      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000c70:	f1c2 0320 	rsb	r3, r2, #32
 8000c74:	fa20 f603 	lsr.w	r6, r0, r3
 8000c78:	4097      	lsls	r7, r2
 8000c7a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c7e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c82:	40d9      	lsrs	r1, r3
 8000c84:	4330      	orrs	r0, r6
 8000c86:	0c03      	lsrs	r3, r0, #16
 8000c88:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c8c:	fa1f f887 	uxth.w	r8, r7
 8000c90:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c98:	fb06 f108 	mul.w	r1, r6, r8
 8000c9c:	4299      	cmp	r1, r3
 8000c9e:	fa04 f402 	lsl.w	r4, r4, r2
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x19c>
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000caa:	f080 808d 	bcs.w	8000dc8 <__udivmoddi4+0x2ac>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 808a 	bls.w	8000dc8 <__udivmoddi4+0x2ac>
 8000cb4:	3e02      	subs	r6, #2
 8000cb6:	443b      	add	r3, r7
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	b281      	uxth	r1, r0
 8000cbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cc4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc8:	fb00 f308 	mul.w	r3, r0, r8
 8000ccc:	428b      	cmp	r3, r1
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x1c4>
 8000cd0:	1879      	adds	r1, r7, r1
 8000cd2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cd6:	d273      	bcs.n	8000dc0 <__udivmoddi4+0x2a4>
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	d971      	bls.n	8000dc0 <__udivmoddi4+0x2a4>
 8000cdc:	3802      	subs	r0, #2
 8000cde:	4439      	add	r1, r7
 8000ce0:	1acb      	subs	r3, r1, r3
 8000ce2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ce6:	e778      	b.n	8000bda <__udivmoddi4+0xbe>
 8000ce8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cec:	fa03 f406 	lsl.w	r4, r3, r6
 8000cf0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cf4:	431c      	orrs	r4, r3
 8000cf6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000cfe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d02:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d06:	431f      	orrs	r7, r3
 8000d08:	0c3b      	lsrs	r3, r7, #16
 8000d0a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d0e:	fa1f f884 	uxth.w	r8, r4
 8000d12:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d16:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d1a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d1e:	458a      	cmp	sl, r1
 8000d20:	fa02 f206 	lsl.w	r2, r2, r6
 8000d24:	fa00 f306 	lsl.w	r3, r0, r6
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x220>
 8000d2a:	1861      	adds	r1, r4, r1
 8000d2c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d30:	d248      	bcs.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d32:	458a      	cmp	sl, r1
 8000d34:	d946      	bls.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d36:	f1a9 0902 	sub.w	r9, r9, #2
 8000d3a:	4421      	add	r1, r4
 8000d3c:	eba1 010a 	sub.w	r1, r1, sl
 8000d40:	b2bf      	uxth	r7, r7
 8000d42:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d46:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d4a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d4e:	fb00 f808 	mul.w	r8, r0, r8
 8000d52:	45b8      	cmp	r8, r7
 8000d54:	d907      	bls.n	8000d66 <__udivmoddi4+0x24a>
 8000d56:	19e7      	adds	r7, r4, r7
 8000d58:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5c:	d22e      	bcs.n	8000dbc <__udivmoddi4+0x2a0>
 8000d5e:	45b8      	cmp	r8, r7
 8000d60:	d92c      	bls.n	8000dbc <__udivmoddi4+0x2a0>
 8000d62:	3802      	subs	r0, #2
 8000d64:	4427      	add	r7, r4
 8000d66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d6a:	eba7 0708 	sub.w	r7, r7, r8
 8000d6e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d72:	454f      	cmp	r7, r9
 8000d74:	46c6      	mov	lr, r8
 8000d76:	4649      	mov	r1, r9
 8000d78:	d31a      	bcc.n	8000db0 <__udivmoddi4+0x294>
 8000d7a:	d017      	beq.n	8000dac <__udivmoddi4+0x290>
 8000d7c:	b15d      	cbz	r5, 8000d96 <__udivmoddi4+0x27a>
 8000d7e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d82:	eb67 0701 	sbc.w	r7, r7, r1
 8000d86:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d8a:	40f2      	lsrs	r2, r6
 8000d8c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d90:	40f7      	lsrs	r7, r6
 8000d92:	e9c5 2700 	strd	r2, r7, [r5]
 8000d96:	2600      	movs	r6, #0
 8000d98:	4631      	mov	r1, r6
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	462e      	mov	r6, r5
 8000da0:	4628      	mov	r0, r5
 8000da2:	e70b      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000da4:	4606      	mov	r6, r0
 8000da6:	e6e9      	b.n	8000b7c <__udivmoddi4+0x60>
 8000da8:	4618      	mov	r0, r3
 8000daa:	e6fd      	b.n	8000ba8 <__udivmoddi4+0x8c>
 8000dac:	4543      	cmp	r3, r8
 8000dae:	d2e5      	bcs.n	8000d7c <__udivmoddi4+0x260>
 8000db0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000db4:	eb69 0104 	sbc.w	r1, r9, r4
 8000db8:	3801      	subs	r0, #1
 8000dba:	e7df      	b.n	8000d7c <__udivmoddi4+0x260>
 8000dbc:	4608      	mov	r0, r1
 8000dbe:	e7d2      	b.n	8000d66 <__udivmoddi4+0x24a>
 8000dc0:	4660      	mov	r0, ip
 8000dc2:	e78d      	b.n	8000ce0 <__udivmoddi4+0x1c4>
 8000dc4:	4681      	mov	r9, r0
 8000dc6:	e7b9      	b.n	8000d3c <__udivmoddi4+0x220>
 8000dc8:	4666      	mov	r6, ip
 8000dca:	e775      	b.n	8000cb8 <__udivmoddi4+0x19c>
 8000dcc:	4630      	mov	r0, r6
 8000dce:	e74a      	b.n	8000c66 <__udivmoddi4+0x14a>
 8000dd0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dd4:	4439      	add	r1, r7
 8000dd6:	e713      	b.n	8000c00 <__udivmoddi4+0xe4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	443c      	add	r4, r7
 8000ddc:	e724      	b.n	8000c28 <__udivmoddi4+0x10c>
 8000dde:	bf00      	nop

08000de0 <__aeabi_idiv0>:
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop

08000de4 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
   vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8000de4:	4901      	ldr	r1, [pc, #4]	; (8000dec <vApplicationIdleHook+0x8>)
 8000de6:	2000      	movs	r0, #0
 8000de8:	f007 bbca 	b.w	8008580 <vTaskSetApplicationTaskTag>
 8000dec:	08001ca5 	.word	0x08001ca5

08000df0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000df0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8000df2:	2064      	movs	r0, #100	; 0x64
 8000df4:	f005 fdc2 	bl	800697c <osDelay>
  for(;;)
 8000df8:	e7fb      	b.n	8000df2 <StartDefaultTask+0x2>
	...

08000dfc <SystemClock_Config>:
{
 8000dfc:	b510      	push	{r4, lr}
 8000dfe:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e00:	2210      	movs	r2, #16
 8000e02:	2100      	movs	r1, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e04:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e06:	a80a      	add	r0, sp, #40	; 0x28
 8000e08:	f026 fb8c 	bl	8027524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e0c:	2214      	movs	r2, #20
 8000e0e:	2100      	movs	r1, #0
 8000e10:	a803      	add	r0, sp, #12
 8000e12:	f026 fb87 	bl	8027524 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e16:	4b1d      	ldr	r3, [pc, #116]	; (8000e8c <SystemClock_Config+0x90>)
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000e18:	2119      	movs	r1, #25
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e1a:	a808      	add	r0, sp, #32
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e1e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e22:	641a      	str	r2, [r3, #64]	; 0x40
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2a:	9301      	str	r3, [sp, #4]
 8000e2c:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e2e:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <SystemClock_Config+0x94>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000e36:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e38:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e40:	9302      	str	r3, [sp, #8]
 8000e42:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e48:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e4c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e50:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000e54:	f44f 73c8 	mov.w	r3, #400	; 0x190
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e58:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000e5c:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e60:	f004 fd4a 	bl	80058f8 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e64:	f004 f9f0 	bl	8005248 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e68:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e6a:	2000      	movs	r0, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000e6c:	2106      	movs	r1, #6
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e6e:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e72:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e76:	e9cd 0305 	strd	r0, r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000e7e:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e80:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000e82:	f004 ff25 	bl	8005cd0 <HAL_RCC_ClockConfig>
}
 8000e86:	b014      	add	sp, #80	; 0x50
 8000e88:	bd10      	pop	{r4, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40007000 	.word	0x40007000

08000e94 <main>:
{
 8000e94:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000e98:	b09b      	sub	sp, #108	; 0x6c

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	2210      	movs	r2, #16

  /* Disables the MPU */
  HAL_MPU_Disable();
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e9e:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ea0:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.BaseAddress = 0x90000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000ea2:	2400      	movs	r4, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ea4:	f026 fb3e 	bl	8027524 <memset>
  HAL_MPU_Disable();
 8000ea8:	f003 f902 	bl	80040b0 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000eac:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
 8000eb0:	4bca      	ldr	r3, [pc, #808]	; (80011dc <main+0x348>)
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000eb2:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000eb4:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000eb8:	9410      	str	r4, [sp, #64]	; 0x40
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000eba:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ebe:	f003 f919 	bl	80040f4 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8000ec2:	2317      	movs	r3, #23
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ec4:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000ec6:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8000eca:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000ece:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ed2:	f003 f90f 	bl	80040f4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ed6:	2004      	movs	r0, #4
 8000ed8:	f003 f8fa 	bl	80040d0 <HAL_MPU_Enable>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000edc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000ee0:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000ee4:	4bbe      	ldr	r3, [pc, #760]	; (80011e0 <main+0x34c>)
 8000ee6:	f8c3 4250 	str.w	r4, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000eea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000eee:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ef2:	695a      	ldr	r2, [r3, #20]
 8000ef4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000ef8:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000efa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000efe:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000f02:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000f06:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000f0a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f0e:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f12:	f3c2 00c9 	ubfx	r0, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000f16:	f3c2 324e 	ubfx	r2, r2, #13, #15
 8000f1a:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f1c:	ea02 0604 	and.w	r6, r2, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f20:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f22:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000f26:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f28:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 8000f2c:	d2f9      	bcs.n	8000f22 <main+0x8e>
    } while(sets-- != 0U);
 8000f2e:	3a20      	subs	r2, #32
 8000f30:	f112 0f20 	cmn.w	r2, #32
 8000f34:	d1f2      	bne.n	8000f1c <main+0x88>
 8000f36:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000f3a:	695a      	ldr	r2, [r3, #20]
 8000f3c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000f40:	615a      	str	r2, [r3, #20]
 8000f42:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f46:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8000f4a:	f003 f815 	bl	8003f78 <HAL_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2400      	movs	r4, #0
  SystemClock_Config();
 8000f50:	f7ff ff54 	bl	8000dfc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	2214      	movs	r2, #20
 8000f56:	2100      	movs	r1, #0
 8000f58:	a80d      	add	r0, sp, #52	; 0x34
 8000f5a:	f026 fae3 	bl	8027524 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f5e:	4ba1      	ldr	r3, [pc, #644]	; (80011e4 <main+0x350>)
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8000f60:	2108      	movs	r1, #8
 8000f62:	48a1      	ldr	r0, [pc, #644]	; (80011e8 <main+0x354>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f66:	2701      	movs	r7, #1
 8000f68:	f04f 0b08 	mov.w	fp, #8
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8000f6c:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f70:	f042 0210 	orr.w	r2, r2, #16
  hdma2d.Instance = DMA2D;
 8000f74:	4d9d      	ldr	r5, [pc, #628]	; (80011ec <main+0x358>)
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f76:	4e9e      	ldr	r6, [pc, #632]	; (80011f0 <main+0x35c>)
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000f78:	f04f 0904 	mov.w	r9, #4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f7c:	631a      	str	r2, [r3, #48]	; 0x30
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000f7e:	f04f 0810 	mov.w	r8, #16
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f84:	f002 0210 	and.w	r2, r2, #16
 8000f88:	9202      	str	r2, [sp, #8]
 8000f8a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f8e:	f042 0201 	orr.w	r2, r2, #1
 8000f92:	631a      	str	r2, [r3, #48]	; 0x30
 8000f94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f96:	f002 0201 	and.w	r2, r2, #1
 8000f9a:	9203      	str	r2, [sp, #12]
 8000f9c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fa0:	f042 0202 	orr.w	r2, r2, #2
 8000fa4:	631a      	str	r2, [r3, #48]	; 0x30
 8000fa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fa8:	f002 0202 	and.w	r2, r2, #2
 8000fac:	9204      	str	r2, [sp, #16]
 8000fae:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fb6:	631a      	str	r2, [r3, #48]	; 0x30
 8000fb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fba:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000fbe:	9205      	str	r2, [sp, #20]
 8000fc0:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000fc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fc8:	631a      	str	r2, [r3, #48]	; 0x30
 8000fca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fcc:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000fd0:	9206      	str	r2, [sp, #24]
 8000fd2:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fd6:	f042 0208 	orr.w	r2, r2, #8
 8000fda:	631a      	str	r2, [r3, #48]	; 0x30
 8000fdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fde:	f002 0208 	and.w	r2, r2, #8
 8000fe2:	9207      	str	r2, [sp, #28]
 8000fe4:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000fe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fe8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000fec:	631a      	str	r2, [r3, #48]	; 0x30
 8000fee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ff0:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8000ff4:	9208      	str	r2, [sp, #32]
 8000ff6:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ff8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ffa:	f042 0220 	orr.w	r2, r2, #32
 8000ffe:	631a      	str	r2, [r3, #48]	; 0x30
 8001000:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001002:	f002 0220 	and.w	r2, r2, #32
 8001006:	9209      	str	r2, [sp, #36]	; 0x24
 8001008:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800100a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800100c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001010:	631a      	str	r2, [r3, #48]	; 0x30
 8001012:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001014:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001018:	920a      	str	r2, [sp, #40]	; 0x28
 800101a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800101c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800101e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001022:	631a      	str	r2, [r3, #48]	; 0x30
 8001024:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001026:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800102a:	920b      	str	r2, [sp, #44]	; 0x2c
 800102c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800102e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001030:	f042 0204 	orr.w	r2, r2, #4
 8001034:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001036:	2201      	movs	r2, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0304 	and.w	r3, r3, #4
 800103e:	930c      	str	r3, [sp, #48]	; 0x30
 8001040:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001042:	f003 fba5 	bl	8004790 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001046:	2201      	movs	r2, #1
 8001048:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800104c:	4869      	ldr	r0, [pc, #420]	; (80011f4 <main+0x360>)
 800104e:	f003 fb9f 	bl	8004790 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001052:	a90d      	add	r1, sp, #52	; 0x34
 8001054:	4864      	ldr	r0, [pc, #400]	; (80011e8 <main+0x354>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001056:	e9cd b70d 	strd	fp, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800105e:	f003 fa11 	bl	8004484 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8001062:	a90d      	add	r1, sp, #52	; 0x34
 8001064:	4863      	ldr	r0, [pc, #396]	; (80011f4 <main+0x360>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001066:	e9cd a70d 	strd	sl, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 800106e:	f003 fa09 	bl	8004484 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8001072:	4861      	ldr	r0, [pc, #388]	; (80011f8 <main+0x364>)
 8001074:	4b61      	ldr	r3, [pc, #388]	; (80011fc <main+0x368>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001076:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
 8001078:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800107a:	6207      	str	r7, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800107c:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001080:	f003 f860 	bl	8004144 <HAL_CRC_Init>
  hdma2d.Instance = DMA2D;
 8001084:	4b5e      	ldr	r3, [pc, #376]	; (8001200 <main+0x36c>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001086:	4628      	mov	r0, r5
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001088:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800108c:	e9c5 440c 	strd	r4, r4, [r5, #48]	; 0x30
  hdma2d.Init.Mode = DMA2D_M2M;
 8001090:	e9c5 3400 	strd	r3, r4, [r5]
  hdma2d.Init.OutputOffset = 0;
 8001094:	e9c5 4402 	strd	r4, r4, [r5, #8]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001098:	f003 f8f3 	bl	8004282 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800109c:	4639      	mov	r1, r7
 800109e:	4628      	mov	r0, r5
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80010a0:	4d58      	ldr	r5, [pc, #352]	; (8001204 <main+0x370>)
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80010a2:	f003 f9a7 	bl	80043f4 <HAL_DMA2D_ConfigLayer>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80010a6:	4b58      	ldr	r3, [pc, #352]	; (8001208 <main+0x374>)
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80010a8:	2240      	movs	r2, #64	; 0x40
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80010aa:	a90d      	add	r1, sp, #52	; 0x34
 80010ac:	4630      	mov	r0, r6
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80010ae:	60b4      	str	r4, [r6, #8]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80010b0:	61f4      	str	r4, [r6, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80010b2:	62b4      	str	r4, [r6, #40]	; 0x28
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80010b4:	e9c6 3400 	strd	r3, r4, [r6]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80010b8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80010bc:	e9c6 2305 	strd	r2, r3, [r6, #20]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80010c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80010c4:	e9c6 3a08 	strd	r3, sl, [r6, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80010c8:	f04f 0a02 	mov.w	sl, #2
 80010cc:	2307      	movs	r3, #7
 80010ce:	e9cd a30d 	strd	sl, r3, [sp, #52]	; 0x34
  SdramTiming.RowCycleDelay = 7;
 80010d2:	e9cd 930f 	strd	r9, r3, [sp, #60]	; 0x3c
  SdramTiming.WriteRecoveryTime = 3;
 80010d6:	2303      	movs	r3, #3
  SdramTiming.RCDDelay = 2;
 80010d8:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  SdramTiming.RPDelay = 2;
 80010dc:	e9cd 3a11 	strd	r3, sl, [sp, #68]	; 0x44
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80010e0:	e9c6 9803 	strd	r9, r8, [r6, #12]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80010e4:	f005 f94a 	bl	800637c <HAL_SDRAM_Init>
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80010e8:	4629      	mov	r1, r5
 80010ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010ee:	4630      	mov	r0, r6
  __IO uint32_t tmpmrd = 0;
 80010f0:	9401      	str	r4, [sp, #4]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 80010f2:	e9c5 7800 	strd	r7, r8, [r5]
    Command.ModeRegisterDefinition = 0;
 80010f6:	e9c5 7402 	strd	r7, r4, [r5, #8]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80010fa:	f005 f95f 	bl	80063bc <HAL_SDRAM_SendCommand>
    HAL_Delay(1);
 80010fe:	4638      	mov	r0, r7
 8001100:	f002 ff5e 	bl	8003fc0 <HAL_Delay>
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001104:	4629      	mov	r1, r5
 8001106:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800110a:	4630      	mov	r0, r6
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800110c:	e9c5 a800 	strd	sl, r8, [r5]
    Command.ModeRegisterDefinition = 0;
 8001110:	e9c5 7402 	strd	r7, r4, [r5, #8]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001114:	f005 f952 	bl	80063bc <HAL_SDRAM_SendCommand>
    Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001118:	2303      	movs	r3, #3
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800111a:	4629      	mov	r1, r5
 800111c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001120:	4630      	mov	r0, r6
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001122:	e9c5 3800 	strd	r3, r8, [r5]
    Command.ModeRegisterDefinition = 0;
 8001126:	e9c5 b402 	strd	fp, r4, [r5, #8]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800112a:	f005 f947 	bl	80063bc <HAL_SDRAM_SendCommand>
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 800112e:	f44f 730c 	mov.w	r3, #560	; 0x230
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001132:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001136:	4629      	mov	r1, r5
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 8001138:	9301      	str	r3, [sp, #4]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800113a:	4630      	mov	r0, r6
    Command.ModeRegisterDefinition = tmpmrd;
 800113c:	9b01      	ldr	r3, [sp, #4]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 800113e:	f04f 0b18 	mov.w	fp, #24
    Command.AutoRefreshNumber      = 1;
 8001142:	60af      	str	r7, [r5, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 8001144:	60eb      	str	r3, [r5, #12]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001146:	e9c5 9800 	strd	r9, r8, [r5]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800114a:	f005 f937 	bl	80063bc <HAL_SDRAM_SendCommand>
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 800114e:	f240 712b 	movw	r1, #1835	; 0x72b
 8001152:	4630      	mov	r0, r6
  hi2c3.Instance = I2C3;
 8001154:	4d2d      	ldr	r5, [pc, #180]	; (800120c <main+0x378>)
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 8001156:	f005 f950 	bl	80063fa <HAL_SDRAM_ProgramRefreshRate>
    FMC_Bank1->BTCR[0] = 0x000030D2;
 800115a:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800115e:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001162:	492b      	ldr	r1, [pc, #172]	; (8001210 <main+0x37c>)
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001164:	4628      	mov	r0, r5
  hltdc.Init.AccumulatedVBP = 11;
 8001166:	2635      	movs	r6, #53	; 0x35
    FMC_Bank1->BTCR[0] = 0x000030D2;
 8001168:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 800116a:	4b2a      	ldr	r3, [pc, #168]	; (8001214 <main+0x380>)
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800116c:	622c      	str	r4, [r5, #32]
  hi2c3.Init.Timing = 0x00C0EAFF;
 800116e:	e9c5 1300 	strd	r1, r3, [r5]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001172:	e9c5 4702 	strd	r4, r7, [r5, #8]
  hi2c3.Init.OwnAddress2 = 0;
 8001176:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800117a:	e9c5 4406 	strd	r4, r4, [r5, #24]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800117e:	f003 fc9f 	bl	8004ac0 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001182:	4621      	mov	r1, r4
 8001184:	4628      	mov	r0, r5
 8001186:	f003 fe77 	bl	8004e78 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800118a:	4621      	mov	r1, r4
 800118c:	4628      	mov	r0, r5
  hltdc.Instance = LTDC;
 800118e:	4d22      	ldr	r5, [pc, #136]	; (8001218 <main+0x384>)
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001190:	f003 fe98 	bl	8004ec4 <HAL_I2CEx_ConfigDigitalFilter>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001194:	2234      	movs	r2, #52	; 0x34
 8001196:	4621      	mov	r1, r4
 8001198:	eb0d 0002 	add.w	r0, sp, r2
 800119c:	f026 f9c2 	bl	8027524 <memset>
  hltdc.Instance = LTDC;
 80011a0:	4b1e      	ldr	r3, [pc, #120]	; (800121c <main+0x388>)
  hltdc.Init.VerticalSync = 9;
 80011a2:	2028      	movs	r0, #40	; 0x28
  hltdc.Init.AccumulatedActiveH = 283;
 80011a4:	f240 2c15 	movw	ip, #533	; 0x215
  hltdc.Init.TotalHeigh = 285;
 80011a8:	f240 2e35 	movw	lr, #565	; 0x235
  hltdc.Init.Backcolor.Blue = 0;
 80011ac:	86ac      	strh	r4, [r5, #52]	; 0x34
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80011ae:	612c      	str	r4, [r5, #16]
  hltdc.Init.Backcolor.Red = 0;
 80011b0:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80011b4:	e9c5 3400 	strd	r3, r4, [r5]
  hltdc.Init.VerticalSync = 9;
 80011b8:	2309      	movs	r3, #9
 80011ba:	e9c5 0305 	strd	r0, r3, [r5, #20]
  hltdc.Init.AccumulatedVBP = 11;
 80011be:	230b      	movs	r3, #11
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80011c0:	4628      	mov	r0, r5
  hltdc.Init.AccumulatedVBP = 11;
 80011c2:	e9c5 6307 	strd	r6, r3, [r5, #28]
  hltdc.Init.AccumulatedActiveH = 283;
 80011c6:	f240 131b 	movw	r3, #283	; 0x11b
 80011ca:	e9c5 c309 	strd	ip, r3, [r5, #36]	; 0x24
  hltdc.Init.TotalHeigh = 285;
 80011ce:	f240 131d 	movw	r3, #285	; 0x11d
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80011d2:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hltdc.Init.TotalHeigh = 285;
 80011d6:	e9c5 e30b 	strd	lr, r3, [r5, #44]	; 0x2c
 80011da:	e021      	b.n	8001220 <main+0x38c>
 80011dc:	0300001b 	.word	0x0300001b
 80011e0:	e000ed00 	.word	0xe000ed00
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40022800 	.word	0x40022800
 80011ec:	20014fa0 	.word	0x20014fa0
 80011f0:	20014fe4 	.word	0x20014fe4
 80011f4:	40022000 	.word	0x40022000
 80011f8:	20014ed0 	.word	0x20014ed0
 80011fc:	40023000 	.word	0x40023000
 8001200:	4002b000 	.word	0x4002b000
 8001204:	20000140 	.word	0x20000140
 8001208:	a0000140 	.word	0xa0000140
 800120c:	20014e84 	.word	0x20014e84
 8001210:	40005c00 	.word	0x40005c00
 8001214:	00c0eaff 	.word	0x00c0eaff
 8001218:	20014ef4 	.word	0x20014ef4
 800121c:	40016800 	.word	0x40016800
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001220:	f003 fefc 	bl	800501c <HAL_LTDC_Init>
  pLayerCfg.WindowY1 = 272;
 8001224:	f44f 7388 	mov.w	r3, #272	; 0x110
  pLayerCfg.Alpha = 255;
 8001228:	21ff      	movs	r1, #255	; 0xff
  pLayerCfg.WindowX1 = 480;
 800122a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800122e:	4628      	mov	r0, r5
  pLayerCfg.ImageHeight = 272;
 8001230:	9318      	str	r3, [sp, #96]	; 0x60
  pLayerCfg.WindowX0 = 0;
 8001232:	940d      	str	r4, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Blue = 0;
 8001234:	f8ad 4064 	strh.w	r4, [sp, #100]	; 0x64
  pLayerCfg.Backcolor.Red = 0;
 8001238:	f88d 4066 	strb.w	r4, [sp, #102]	; 0x66
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800123c:	e9cd 3a10 	strd	r3, sl, [sp, #64]	; 0x40
  pLayerCfg.Alpha0 = 0;
 8001240:	e9cd 1412 	strd	r1, r4, [sp, #72]	; 0x48
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001244:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8001248:	2105      	movs	r1, #5
 800124a:	e9cd a114 	strd	sl, r1, [sp, #80]	; 0x50
  pLayerCfg.FBStartAdress = 0xC0000000;
 800124e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
  pLayerCfg.WindowY0 = 0;
 8001252:	e9cd 240e 	strd	r2, r4, [sp, #56]	; 0x38
  pLayerCfg.ImageWidth = 480;
 8001256:	e9cd 1216 	strd	r1, r2, [sp, #88]	; 0x58
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800125a:	4622      	mov	r2, r4
 800125c:	a90d      	add	r1, sp, #52	; 0x34
 800125e:	f003 ffa8 	bl	80051b2 <HAL_LTDC_ConfigLayer>
  hqspi.Instance = QUADSPI;
 8001262:	481a      	ldr	r0, [pc, #104]	; (80012cc <main+0x438>)
 8001264:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <main+0x43c>)
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001266:	6204      	str	r4, [r0, #32]
  hqspi.Init.ClockPrescaler = 1;
 8001268:	e9c0 3700 	strd	r3, r7, [r0]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 800126c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001270:	e9c0 9802 	strd	r9, r8, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001274:	e9c0 b304 	strd	fp, r3, [r0, #16]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001278:	e9c0 4406 	strd	r4, r4, [r0, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800127c:	f004 f900 	bl	8005480 <HAL_QSPI_Init>
  BSP_QSPI_Init();
 8001280:	f002 fcf8 	bl	8003c74 <BSP_QSPI_Init>
  BSP_QSPI_MemoryMappedMode();
 8001284:	f002 fc3c 	bl	8003b00 <BSP_QSPI_EnableMemoryMappedMode>
  HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 8001288:	205c      	movs	r0, #92	; 0x5c
 800128a:	f002 fefd 	bl	8004088 <HAL_NVIC_DisableIRQ>
  MX_LIBJPEG_Init();
 800128e:	f000 fb49 	bl	8001924 <MX_LIBJPEG_Init>
  MX_TouchGFX_Init();
 8001292:	f000 fb72 	bl	800197a <MX_TouchGFX_Init>
  osKernelInitialize();
 8001296:	f005 fae1 	bl	800685c <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800129a:	4a0e      	ldr	r2, [pc, #56]	; (80012d4 <main+0x440>)
 800129c:	4621      	mov	r1, r4
 800129e:	480e      	ldr	r0, [pc, #56]	; (80012d8 <main+0x444>)
 80012a0:	f005 fb16 	bl	80068d0 <osThreadNew>
 80012a4:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <main+0x448>)
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 80012a6:	4a0e      	ldr	r2, [pc, #56]	; (80012e0 <main+0x44c>)
 80012a8:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80012aa:	6018      	str	r0, [r3, #0]
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 80012ac:	480d      	ldr	r0, [pc, #52]	; (80012e4 <main+0x450>)
 80012ae:	f005 fb0f 	bl	80068d0 <osThreadNew>
 80012b2:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <main+0x454>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 80012b4:	4a0d      	ldr	r2, [pc, #52]	; (80012ec <main+0x458>)
 80012b6:	4621      	mov	r1, r4
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 80012b8:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 80012ba:	480d      	ldr	r0, [pc, #52]	; (80012f0 <main+0x45c>)
 80012bc:	f005 fb08 	bl	80068d0 <osThreadNew>
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <main+0x460>)
 80012c2:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80012c4:	f005 fae4 	bl	8006890 <osKernelStart>
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <main+0x434>
 80012ca:	bf00      	nop
 80012cc:	20015018 	.word	0x20015018
 80012d0:	a0001000 	.word	0xa0001000
 80012d4:	08028948 	.word	0x08028948
 80012d8:	08000df1 	.word	0x08000df1
 80012dc:	20014e80 	.word	0x20014e80
 80012e0:	08028924 	.word	0x08028924
 80012e4:	0800197f 	.word	0x0800197f
 80012e8:	20014f9c 	.word	0x20014f9c
 80012ec:	0802896c 	.word	0x0802896c
 80012f0:	08002fdd 	.word	0x08002fdd
 80012f4:	20014fe0 	.word	0x20014fe0

080012f8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80012f8:	6802      	ldr	r2, [r0, #0]
 80012fa:	4b03      	ldr	r3, [pc, #12]	; (8001308 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d101      	bne.n	8001304 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001300:	f002 be4c 	b.w	8003f9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	40001000 	.word	0x40001000

0800130c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800130c:	4770      	bx	lr
	...

08001310 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001310:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <HAL_MspInit+0x38>)
{
 8001312:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001314:	210f      	movs	r1, #15
 8001316:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 800131a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800131c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001320:	641a      	str	r2, [r3, #64]	; 0x40
 8001322:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001324:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001328:	9200      	str	r2, [sp, #0]
 800132a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800132e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001332:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001334:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001338:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800133c:	9301      	str	r3, [sp, #4]
 800133e:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001340:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001342:	f002 be61 	b.w	8004008 <HAL_NVIC_SetPriority>
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800

0800134c <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 800134c:	6802      	ldr	r2, [r0, #0]
{
 800134e:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <HAL_CRC_MspInit+0x28>)
 8001352:	429a      	cmp	r2, r3
 8001354:	d10b      	bne.n	800136e <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001356:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 800135a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800135e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001362:	631a      	str	r2, [r3, #48]	; 0x30
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800136a:	9301      	str	r3, [sp, #4]
 800136c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800136e:	b002      	add	sp, #8
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40023000 	.word	0x40023000

08001378 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8001378:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <HAL_DMA2D_MspInit+0x3c>)
{
 800137a:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 800137c:	6802      	ldr	r2, [r0, #0]
 800137e:	429a      	cmp	r2, r3
 8001380:	d115      	bne.n	80013ae <HAL_DMA2D_MspInit+0x36>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001382:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001386:	2105      	movs	r1, #5
 8001388:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800138a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800138c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001390:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001392:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800139a:	9301      	str	r3, [sp, #4]
 800139c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800139e:	f002 fe33 	bl	8004008 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80013a2:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80013a4:	b003      	add	sp, #12
 80013a6:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80013aa:	f002 be5f 	b.w	800406c <HAL_NVIC_EnableIRQ>
}
 80013ae:	b003      	add	sp, #12
 80013b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80013b4:	4002b000 	.word	0x4002b000

080013b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013b8:	b510      	push	{r4, lr}
 80013ba:	b0a8      	sub	sp, #160	; 0xa0
 80013bc:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013be:	2214      	movs	r2, #20
 80013c0:	2100      	movs	r1, #0
 80013c2:	a802      	add	r0, sp, #8
 80013c4:	f026 f8ae 	bl	8027524 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013c8:	2284      	movs	r2, #132	; 0x84
 80013ca:	2100      	movs	r1, #0
 80013cc:	a807      	add	r0, sp, #28
 80013ce:	f026 f8a9 	bl	8027524 <memset>
  if(hi2c->Instance==I2C3)
 80013d2:	6822      	ldr	r2, [r4, #0]
 80013d4:	4b18      	ldr	r3, [pc, #96]	; (8001438 <HAL_I2C_MspInit+0x80>)
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d12c      	bne.n	8001434 <HAL_I2C_MspInit+0x7c>
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80013da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013de:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80013e0:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80013e2:	2300      	movs	r3, #0
 80013e4:	9322      	str	r3, [sp, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013e6:	f004 fd41 	bl	8005e6c <HAL_RCCEx_PeriphCLKConfig>
 80013ea:	b108      	cbz	r0, 80013f0 <HAL_I2C_MspInit+0x38>
    {
      Error_Handler();
 80013ec:	f7ff ff8e 	bl	800130c <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80013f0:	4c12      	ldr	r4, [pc, #72]	; (800143c <HAL_I2C_MspInit+0x84>)
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013f2:	f44f 72c0 	mov.w	r2, #384	; 0x180
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f6:	2101      	movs	r1, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013f8:	4811      	ldr	r0, [pc, #68]	; (8001440 <HAL_I2C_MspInit+0x88>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80013fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80013fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001400:	6323      	str	r3, [r4, #48]	; 0x30
 8001402:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800140c:	2312      	movs	r3, #18
 800140e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001412:	2303      	movs	r3, #3
 8001414:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001418:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800141a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800141c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800141e:	f003 f831 	bl	8004484 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001422:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001424:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001428:	6423      	str	r3, [r4, #64]	; 0x40
 800142a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800142c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001430:	9301      	str	r3, [sp, #4]
 8001432:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001434:	b028      	add	sp, #160	; 0xa0
 8001436:	bd10      	pop	{r4, pc}
 8001438:	40005c00 	.word	0x40005c00
 800143c:	40023800 	.word	0x40023800
 8001440:	40021c00 	.word	0x40021c00

08001444 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C3)
 8001444:	6802      	ldr	r2, [r0, #0]
{
 8001446:	b508      	push	{r3, lr}
  if(hi2c->Instance==I2C3)
 8001448:	4b09      	ldr	r3, [pc, #36]	; (8001470 <HAL_I2C_MspDeInit+0x2c>)
 800144a:	429a      	cmp	r2, r3
 800144c:	d10f      	bne.n	800146e <HAL_I2C_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 800144e:	4a09      	ldr	r2, [pc, #36]	; (8001474 <HAL_I2C_MspDeInit+0x30>)

    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 8001450:	2180      	movs	r1, #128	; 0x80
 8001452:	4809      	ldr	r0, [pc, #36]	; (8001478 <HAL_I2C_MspDeInit+0x34>)
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001454:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001456:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800145a:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 800145c:	f003 f8f6 	bl	800464c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_8);
 8001460:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001464:	4804      	ldr	r0, [pc, #16]	; (8001478 <HAL_I2C_MspDeInit+0x34>)
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8001466:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_8);
 800146a:	f003 b8ef 	b.w	800464c <HAL_GPIO_DeInit>
}
 800146e:	bd08      	pop	{r3, pc}
 8001470:	40005c00 	.word	0x40005c00
 8001474:	40023800 	.word	0x40023800
 8001478:	40021c00 	.word	0x40021c00

0800147c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800147c:	b570      	push	{r4, r5, r6, lr}
 800147e:	b0ac      	sub	sp, #176	; 0xb0
 8001480:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001482:	2214      	movs	r2, #20
 8001484:	2100      	movs	r1, #0
 8001486:	a806      	add	r0, sp, #24
 8001488:	f026 f84c 	bl	8027524 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800148c:	2284      	movs	r2, #132	; 0x84
 800148e:	2100      	movs	r1, #0
 8001490:	a80b      	add	r0, sp, #44	; 0x2c
 8001492:	f026 f847 	bl	8027524 <memset>
  if(hltdc->Instance==LTDC)
 8001496:	6822      	ldr	r2, [r4, #0]
 8001498:	4b49      	ldr	r3, [pc, #292]	; (80015c0 <HAL_LTDC_MspInit+0x144>)
 800149a:	429a      	cmp	r2, r3
 800149c:	f040 808e 	bne.w	80015bc <HAL_LTDC_MspInit+0x140>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80014a0:	2308      	movs	r3, #8
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80014a2:	2005      	movs	r0, #5
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
    PeriphClkInitStruct.PLLSAIDivQ = 1;
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80014a4:	2501      	movs	r5, #1
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80014a6:	930b      	str	r3, [sp, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80014a8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80014ac:	9310      	str	r3, [sp, #64]	; 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80014ae:	2302      	movs	r3, #2
 80014b0:	e9cd 3011 	strd	r3, r0, [sp, #68]	; 0x44
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80014b4:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014b6:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80014b8:	9313      	str	r3, [sp, #76]	; 0x4c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80014ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014be:	e9cd 5315 	strd	r5, r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014c2:	f004 fcd3 	bl	8005e6c <HAL_RCCEx_PeriphCLKConfig>
 80014c6:	b108      	cbz	r0, 80014cc <HAL_LTDC_MspInit+0x50>
    {
      Error_Handler();
 80014c8:	f7ff ff20 	bl	800130c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80014cc:	4b3d      	ldr	r3, [pc, #244]	; (80015c4 <HAL_LTDC_MspInit+0x148>)
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d0:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014d2:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
 80014d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014d6:	a906      	add	r1, sp, #24
 80014d8:	483b      	ldr	r0, [pc, #236]	; (80015c8 <HAL_LTDC_MspInit+0x14c>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 80014da:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80014de:	645a      	str	r2, [r3, #68]	; 0x44
 80014e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014e2:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80014e6:	9200      	str	r2, [sp, #0]
 80014e8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014ec:	f042 0210 	orr.w	r2, r2, #16
 80014f0:	631a      	str	r2, [r3, #48]	; 0x30
 80014f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014f4:	f002 0210 	and.w	r2, r2, #16
 80014f8:	9201      	str	r2, [sp, #4]
 80014fa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80014fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001502:	631a      	str	r2, [r3, #48]	; 0x30
 8001504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001506:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800150a:	9202      	str	r2, [sp, #8]
 800150c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800150e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001510:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001514:	631a      	str	r2, [r3, #48]	; 0x30
 8001516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001518:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800151c:	9203      	str	r2, [sp, #12]
 800151e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001522:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001526:	631a      	str	r2, [r3, #48]	; 0x30
 8001528:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800152a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800152e:	9204      	str	r2, [sp, #16]
 8001530:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001534:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001538:	631a      	str	r2, [r3, #48]	; 0x30
 800153a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001540:	9305      	str	r3, [sp, #20]
 8001542:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2310      	movs	r3, #16
 8001546:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154a:	e9cd 4408 	strd	r4, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800154e:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001550:	f002 ff98 	bl	8004484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
 8001554:	f64e 73ff 	movw	r3, #61439	; 0xefff
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001558:	a906      	add	r1, sp, #24
 800155a:	481c      	ldr	r0, [pc, #112]	; (80015cc <HAL_LTDC_MspInit+0x150>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800155c:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155e:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001566:	f002 ff8d 	bl	8004484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 800156a:	23f7      	movs	r3, #247	; 0xf7
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800156c:	a906      	add	r1, sp, #24
 800156e:	4818      	ldr	r0, [pc, #96]	; (80015d0 <HAL_LTDC_MspInit+0x154>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001570:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001576:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800157a:	f002 ff83 	bl	8004484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800157e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001582:	a906      	add	r1, sp, #24
 8001584:	4813      	ldr	r0, [pc, #76]	; (80015d4 <HAL_LTDC_MspInit+0x158>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800158a:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158c:	e9cd 4408 	strd	r4, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001590:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001592:	f002 ff77 	bl	8004484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 8001596:	f44f 4346 	mov.w	r3, #50688	; 0xc600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800159a:	a906      	add	r1, sp, #24
 800159c:	480e      	ldr	r0, [pc, #56]	; (80015d8 <HAL_LTDC_MspInit+0x15c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800159e:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80015a8:	f002 ff6c 	bl	8004484 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80015ac:	2058      	movs	r0, #88	; 0x58
 80015ae:	4622      	mov	r2, r4
 80015b0:	2105      	movs	r1, #5
 80015b2:	f002 fd29 	bl	8004008 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80015b6:	2058      	movs	r0, #88	; 0x58
 80015b8:	f002 fd58 	bl	800406c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80015bc:	b02c      	add	sp, #176	; 0xb0
 80015be:	bd70      	pop	{r4, r5, r6, pc}
 80015c0:	40016800 	.word	0x40016800
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40021000 	.word	0x40021000
 80015cc:	40022400 	.word	0x40022400
 80015d0:	40022800 	.word	0x40022800
 80015d4:	40021800 	.word	0x40021800
 80015d8:	40022000 	.word	0x40022000

080015dc <HAL_QSPI_MspInit>:
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	2214      	movs	r2, #20
 80015de:	2100      	movs	r1, #0
{
 80015e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015e4:	b08a      	sub	sp, #40	; 0x28
 80015e6:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	eb0d 0002 	add.w	r0, sp, r2
 80015ec:	f025 ff9a 	bl	8027524 <memset>
  if(hqspi->Instance==QUADSPI)
 80015f0:	6822      	ldr	r2, [r4, #0]
 80015f2:	4b2c      	ldr	r3, [pc, #176]	; (80016a4 <HAL_QSPI_MspInit+0xc8>)
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d152      	bne.n	800169e <HAL_QSPI_MspInit+0xc2>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80015f8:	4b2b      	ldr	r3, [pc, #172]	; (80016a8 <HAL_QSPI_MspInit+0xcc>)
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fc:	2500      	movs	r5, #0
 80015fe:	2403      	movs	r4, #3
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001600:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001602:	2709      	movs	r7, #9
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001604:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001608:	a905      	add	r1, sp, #20
    __HAL_RCC_QSPI_CLK_ENABLE();
 800160a:	f042 0202 	orr.w	r2, r2, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800160e:	4827      	ldr	r0, [pc, #156]	; (80016ac <HAL_QSPI_MspInit+0xd0>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001610:	639a      	str	r2, [r3, #56]	; 0x38
 8001612:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001614:	f002 0202 	and.w	r2, r2, #2
 8001618:	9201      	str	r2, [sp, #4]
 800161a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800161c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800161e:	f042 0210 	orr.w	r2, r2, #16
 8001622:	631a      	str	r2, [r3, #48]	; 0x30
 8001624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001626:	f002 0210 	and.w	r2, r2, #16
 800162a:	9202      	str	r2, [sp, #8]
 800162c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800162e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001630:	f042 0202 	orr.w	r2, r2, #2
 8001634:	631a      	str	r2, [r3, #48]	; 0x30
 8001636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001638:	f002 0202 	and.w	r2, r2, #2
 800163c:	9203      	str	r2, [sp, #12]
 800163e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001642:	f042 0208 	orr.w	r2, r2, #8
 8001646:	631a      	str	r2, [r3, #48]	; 0x30
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800164a:	9709      	str	r7, [sp, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800164c:	f003 0308 	and.w	r3, r3, #8
 8001650:	9304      	str	r3, [sp, #16]
 8001652:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001654:	e9cd 8605 	strd	r8, r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001658:	e9cd 5407 	strd	r5, r4, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800165c:	f002 ff12 	bl	8004484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001660:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001662:	a905      	add	r1, sp, #20
 8001664:	4812      	ldr	r0, [pc, #72]	; (80016b0 <HAL_QSPI_MspInit+0xd4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001666:	e9cd 3605 	strd	r3, r6, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800166a:	230a      	movs	r3, #10
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166c:	e9cd 5407 	strd	r5, r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001670:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001672:	f002 ff07 	bl	8004484 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001676:	a905      	add	r1, sp, #20
 8001678:	480d      	ldr	r0, [pc, #52]	; (80016b0 <HAL_QSPI_MspInit+0xd4>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800167a:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167c:	e9cd 8605 	strd	r8, r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001680:	e9cd 5407 	strd	r5, r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001684:	f002 fefe 	bl	8004484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
 8001688:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800168c:	a905      	add	r1, sp, #20
 800168e:	4809      	ldr	r0, [pc, #36]	; (80016b4 <HAL_QSPI_MspInit+0xd8>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001690:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001692:	e9cd 3605 	strd	r3, r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001696:	e9cd 5407 	strd	r5, r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800169a:	f002 fef3 	bl	8004484 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800169e:	b00a      	add	sp, #40	; 0x28
 80016a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016a4:	a0001000 	.word	0xa0001000
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40020400 	.word	0x40020400
 80016b4:	40020c00 	.word	0x40020c00

080016b8 <HAL_QSPI_MspDeInit>:
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
  if(hqspi->Instance==QUADSPI)
 80016b8:	6802      	ldr	r2, [r0, #0]
{
 80016ba:	b508      	push	{r3, lr}
  if(hqspi->Instance==QUADSPI)
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <HAL_QSPI_MspDeInit+0x34>)
 80016be:	429a      	cmp	r2, r3
 80016c0:	d113      	bne.n	80016ea <HAL_QSPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 80016c2:	4a0b      	ldr	r2, [pc, #44]	; (80016f0 <HAL_QSPI_MspDeInit+0x38>)
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 80016c4:	2104      	movs	r1, #4
 80016c6:	480b      	ldr	r0, [pc, #44]	; (80016f4 <HAL_QSPI_MspDeInit+0x3c>)
    __HAL_RCC_QSPI_CLK_DISABLE();
 80016c8:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80016ca:	f023 0302 	bic.w	r3, r3, #2
 80016ce:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 80016d0:	f002 ffbc 	bl	800464c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_2);
 80016d4:	2144      	movs	r1, #68	; 0x44
 80016d6:	4808      	ldr	r0, [pc, #32]	; (80016f8 <HAL_QSPI_MspDeInit+0x40>)
 80016d8:	f002 ffb8 	bl	800464c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11);
 80016dc:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80016e0:	4806      	ldr	r0, [pc, #24]	; (80016fc <HAL_QSPI_MspDeInit+0x44>)
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 80016e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11);
 80016e6:	f002 bfb1 	b.w	800464c <HAL_GPIO_DeInit>
}
 80016ea:	bd08      	pop	{r3, pc}
 80016ec:	a0001000 	.word	0xa0001000
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40020400 	.word	0x40020400
 80016fc:	40020c00 	.word	0x40020c00

08001700 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
  if (FMC_Initialized) {
 8001700:	4b2b      	ldr	r3, [pc, #172]	; (80017b0 <HAL_SDRAM_MspInit+0xb0>)
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001702:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (FMC_Initialized) {
 8001704:	681c      	ldr	r4, [r3, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001706:	b087      	sub	sp, #28
  if (FMC_Initialized) {
 8001708:	2c00      	cmp	r4, #0
 800170a:	d14e      	bne.n	80017aa <HAL_SDRAM_MspInit+0xaa>
  FMC_Initialized = 1;
 800170c:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170e:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001710:	2603      	movs	r6, #3
 8001712:	250c      	movs	r5, #12
  FMC_Initialized = 1;
 8001714:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001716:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 8001718:	4b26      	ldr	r3, [pc, #152]	; (80017b4 <HAL_SDRAM_MspInit+0xb4>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800171a:	4827      	ldr	r0, [pc, #156]	; (80017b8 <HAL_SDRAM_MspInit+0xb8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800171c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800171e:	f042 0201 	orr.w	r2, r2, #1
 8001722:	639a      	str	r2, [r3, #56]	; 0x38
 8001724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	9403      	str	r4, [sp, #12]
  __HAL_RCC_FMC_CLK_ENABLE();
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	f64f 7383 	movw	r3, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001734:	e9cd 6504 	strd	r6, r5, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001738:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800173c:	f002 fea2 	bl	8004484 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8001740:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001744:	a901      	add	r1, sp, #4
 8001746:	481d      	ldr	r0, [pc, #116]	; (80017bc <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001748:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174e:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001752:	f002 fe97 	bl	8004484 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8001756:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800175a:	a901      	add	r1, sp, #4
 800175c:	4818      	ldr	r0, [pc, #96]	; (80017c0 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800175e:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001760:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001764:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001768:	f002 fe8c 	bl	8004484 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800176c:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001770:	a901      	add	r1, sp, #4
 8001772:	4814      	ldr	r0, [pc, #80]	; (80017c4 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001774:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001776:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177a:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800177e:	f002 fe81 	bl	8004484 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8001782:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001784:	a901      	add	r1, sp, #4
 8001786:	4810      	ldr	r0, [pc, #64]	; (80017c8 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001788:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178e:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001792:	f002 fe77 	bl	8004484 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001796:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001798:	a901      	add	r1, sp, #4
 800179a:	480c      	ldr	r0, [pc, #48]	; (80017cc <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800179c:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a2:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a6:	f002 fe6d 	bl	8004484 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80017aa:	b007      	add	sp, #28
 80017ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000150 	.word	0x20000150
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40021000 	.word	0x40021000
 80017bc:	40021800 	.word	0x40021800
 80017c0:	40020c00 	.word	0x40020c00
 80017c4:	40021400 	.word	0x40021400
 80017c8:	40021c00 	.word	0x40021c00
 80017cc:	40020800 	.word	0x40020800

080017d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d0:	b510      	push	{r4, lr}
 80017d2:	4601      	mov	r1, r0
 80017d4:	b088      	sub	sp, #32
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2036      	movs	r0, #54	; 0x36
 80017da:	f002 fc15 	bl	8004008 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017de:	2036      	movs	r0, #54	; 0x36
 80017e0:	f002 fc44 	bl	800406c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017e4:	4b14      	ldr	r3, [pc, #80]	; (8001838 <HAL_InitTick+0x68>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017e6:	a901      	add	r1, sp, #4
 80017e8:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80017ec:	4c13      	ldr	r4, [pc, #76]	; (800183c <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017ee:	f042 0210 	orr.w	r2, r2, #16
 80017f2:	641a      	str	r2, [r3, #64]	; 0x40
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	f003 0310 	and.w	r3, r3, #16
 80017fa:	9302      	str	r3, [sp, #8]
 80017fc:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017fe:	f004 fb17 	bl	8005e30 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001802:	f004 fb05 	bl	8005e10 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8001806:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <HAL_InitTick+0x70>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001808:	0040      	lsls	r0, r0, #1
  htim6.Instance = TIM6;
 800180a:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800180c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001810:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001812:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <HAL_InitTick+0x74>)
 8001814:	fbb0 f0f3 	udiv	r0, r0, r3
 8001818:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 800181a:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 800181c:	6060      	str	r0, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800181e:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8001820:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001822:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001824:	f004 ff5a 	bl	80066dc <HAL_TIM_Base_Init>
 8001828:	b920      	cbnz	r0, 8001834 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800182a:	4620      	mov	r0, r4
 800182c:	f004 fdfe 	bl	800642c <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001830:	b008      	add	sp, #32
 8001832:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8001834:	2001      	movs	r0, #1
 8001836:	e7fb      	b.n	8001830 <HAL_InitTick+0x60>
 8001838:	40023800 	.word	0x40023800
 800183c:	20015064 	.word	0x20015064
 8001840:	40001000 	.word	0x40001000
 8001844:	000f4240 	.word	0x000f4240

08001848 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001848:	4770      	bx	lr

0800184a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800184a:	e7fe      	b.n	800184a <HardFault_Handler>

0800184c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800184c:	e7fe      	b.n	800184c <MemManage_Handler>

0800184e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800184e:	e7fe      	b.n	800184e <BusFault_Handler>

08001850 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <UsageFault_Handler>

08001852 <DebugMon_Handler>:
 8001852:	4770      	bx	lr

08001854 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001854:	4801      	ldr	r0, [pc, #4]	; (800185c <TIM6_DAC_IRQHandler+0x8>)
 8001856:	f004 be2b 	b.w	80064b0 <HAL_TIM_IRQHandler>
 800185a:	bf00      	nop
 800185c:	20015064 	.word	0x20015064

08001860 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001860:	4801      	ldr	r0, [pc, #4]	; (8001868 <LTDC_IRQHandler+0x8>)
 8001862:	f003 bc49 	b.w	80050f8 <HAL_LTDC_IRQHandler>
 8001866:	bf00      	nop
 8001868:	20014ef4 	.word	0x20014ef4

0800186c <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800186c:	4801      	ldr	r0, [pc, #4]	; (8001874 <DMA2D_IRQHandler+0x8>)
 800186e:	f002 bd36 	b.w	80042de <HAL_DMA2D_IRQHandler>
 8001872:	bf00      	nop
 8001874:	20014fa0 	.word	0x20014fa0

08001878 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001878:	2001      	movs	r0, #1
 800187a:	4770      	bx	lr

0800187c <_kill>:

int _kill(int pid, int sig)
{
 800187c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800187e:	f025 fdf3 	bl	8027468 <__errno>
 8001882:	2316      	movs	r3, #22
 8001884:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001886:	f04f 30ff 	mov.w	r0, #4294967295
 800188a:	bd08      	pop	{r3, pc}

0800188c <_exit>:

void _exit (int status)
{
 800188c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800188e:	f025 fdeb 	bl	8027468 <__errno>
 8001892:	2316      	movs	r3, #22
 8001894:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001896:	e7fe      	b.n	8001896 <_exit+0xa>

08001898 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001898:	b570      	push	{r4, r5, r6, lr}
 800189a:	460e      	mov	r6, r1
 800189c:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189e:	2500      	movs	r5, #0
 80018a0:	42a5      	cmp	r5, r4
 80018a2:	db01      	blt.n	80018a8 <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80018a4:	4620      	mov	r0, r4
 80018a6:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80018a8:	f3af 8000 	nop.w
 80018ac:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ae:	3501      	adds	r5, #1
 80018b0:	e7f6      	b.n	80018a0 <_read+0x8>

080018b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018b2:	b570      	push	{r4, r5, r6, lr}
 80018b4:	460e      	mov	r6, r1
 80018b6:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b8:	2500      	movs	r5, #0
 80018ba:	42a5      	cmp	r5, r4
 80018bc:	db01      	blt.n	80018c2 <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80018be:	4620      	mov	r0, r4
 80018c0:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80018c2:	5d70      	ldrb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c4:	3501      	adds	r5, #1
		__io_putchar(*ptr++);
 80018c6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ca:	e7f6      	b.n	80018ba <_write+0x8>

080018cc <_close>:

int _close(int file)
{
	return -1;
}
 80018cc:	f04f 30ff 	mov.w	r0, #4294967295
 80018d0:	4770      	bx	lr

080018d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80018d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80018d6:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80018d8:	604b      	str	r3, [r1, #4]
}
 80018da:	4770      	bx	lr

080018dc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80018dc:	2001      	movs	r0, #1
 80018de:	4770      	bx	lr

080018e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80018e0:	2000      	movs	r0, #0
 80018e2:	4770      	bx	lr

080018e4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e4:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <_sbrk+0x30>)
{
 80018e6:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 80018e8:	6819      	ldr	r1, [r3, #0]
{
 80018ea:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80018ec:	b909      	cbnz	r1, 80018f2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80018ee:	490a      	ldr	r1, [pc, #40]	; (8001918 <_sbrk+0x34>)
 80018f0:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018f2:	6818      	ldr	r0, [r3, #0]
 80018f4:	4909      	ldr	r1, [pc, #36]	; (800191c <_sbrk+0x38>)
 80018f6:	4c0a      	ldr	r4, [pc, #40]	; (8001920 <_sbrk+0x3c>)
 80018f8:	4402      	add	r2, r0
 80018fa:	1b09      	subs	r1, r1, r4
 80018fc:	428a      	cmp	r2, r1
 80018fe:	d906      	bls.n	800190e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001900:	f025 fdb2 	bl	8027468 <__errno>
 8001904:	230c      	movs	r3, #12
 8001906:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001908:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800190c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800190e:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 8001910:	e7fc      	b.n	800190c <_sbrk+0x28>
 8001912:	bf00      	nop
 8001914:	20000154 	.word	0x20000154
 8001918:	20015150 	.word	0x20015150
 800191c:	20050000 	.word	0x20050000
 8001920:	00000a00 	.word	0x00000a00

08001924 <MX_LIBJPEG_Init>:
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8001924:	4770      	bx	lr
	...

08001928 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001928:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001960 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800192c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800192e:	e003      	b.n	8001938 <LoopCopyDataInit>

08001930 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001932:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001934:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001936:	3104      	adds	r1, #4

08001938 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001938:	480b      	ldr	r0, [pc, #44]	; (8001968 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800193a:	4b0c      	ldr	r3, [pc, #48]	; (800196c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800193c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800193e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001940:	d3f6      	bcc.n	8001930 <CopyDataInit>
  ldr  r2, =_sbss
 8001942:	4a0b      	ldr	r2, [pc, #44]	; (8001970 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001944:	e002      	b.n	800194c <LoopFillZerobss>

08001946 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001946:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001948:	f842 3b04 	str.w	r3, [r2], #4

0800194c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800194c:	4b09      	ldr	r3, [pc, #36]	; (8001974 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800194e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001950:	d3f9      	bcc.n	8001946 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001952:	f002 fa27 	bl	8003da4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001956:	f025 fd9f 	bl	8027498 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800195a:	f7ff fa9b 	bl	8000e94 <main>
  bx  lr    
 800195e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001960:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001964:	0802ece0 	.word	0x0802ece0
  ldr  r0, =_sdata
 8001968:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800196c:	20000124 	.word	0x20000124
  ldr  r2, =_sbss
 8001970:	20000124 	.word	0x20000124
  ldr  r3, = _ebss
 8001974:	20015150 	.word	0x20015150

08001978 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001978:	e7fe      	b.n	8001978 <ADC_IRQHandler>

0800197a <MX_TouchGFX_Init>:
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 800197a:	f000 bfcb 	b.w	8002914 <touchgfx_init>

0800197e <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800197e:	f001 b839 	b.w	80029f4 <touchgfx_taskEntry>

08001982 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8001982:	6840      	ldr	r0, [r0, #4]
    }
 8001984:	4770      	bx	lr

08001986 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8001986:	6041      	str	r1, [r0, #4]
    }
 8001988:	4770      	bx	lr
	...

0800198c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 800198c:	4a09      	ldr	r2, [pc, #36]	; (80019b4 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 800198e:	6813      	ldr	r3, [r2, #0]
 8001990:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001994:	6013      	str	r3, [r2, #0]
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 8001996:	f5a2 424e 	sub.w	r2, r2, #52736	; 0xce00
 800199a:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 800199c:	f852 1c4c 	ldr.w	r1, [r2, #-76]
 80019a0:	3a4c      	subs	r2, #76	; 0x4c
 80019a2:	430b      	orrs	r3, r1
 80019a4:	6013      	str	r3, [r2, #0]
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 80019a6:	f5a2 627b 	sub.w	r2, r2, #4016	; 0xfb0
 80019aa:	6813      	ldr	r3, [r2, #0]
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	6013      	str	r3, [r2, #0]
}
 80019b2:	4770      	bx	lr
 80019b4:	e000edfc 	.word	0xe000edfc
 80019b8:	c5acce55 	.word	0xc5acce55

080019bc <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 80019bc:	1a51      	subs	r1, r2, r1
 80019be:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 80019c2:	fbb1 f0f3 	udiv	r0, r1, r3
 80019c6:	4770      	bx	lr

080019c8 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 80019c8:	4b01      	ldr	r3, [pc, #4]	; (80019d0 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 80019ca:	6818      	ldr	r0, [r3, #0]
}
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	e0001004 	.word	0xe0001004

080019d4 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 80019d4:	4770      	bx	lr

080019d6 <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 80019d6:	b510      	push	{r4, lr}
 80019d8:	4604      	mov	r4, r0
 80019da:	210c      	movs	r1, #12
 80019dc:	f025 fce4 	bl	80273a8 <_ZdlPvj>
 80019e0:	4620      	mov	r0, r4
 80019e2:	bd10      	pop	{r4, pc}

080019e4 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
 80019e4:	6803      	ldr	r3, [r0, #0]
{
 80019e6:	b510      	push	{r4, lr}
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	4604      	mov	r4, r0
    if (active) //idle task sched out
 80019ec:	b131      	cbz	r1, 80019fc <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 80019ee:	4798      	blx	r3
 80019f0:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 80019f2:	6863      	ldr	r3, [r4, #4]
 80019f4:	1a9b      	subs	r3, r3, r2
 80019f6:	4418      	add	r0, r3
 80019f8:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 80019fa:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 80019fc:	4798      	blx	r3
 80019fe:	60a0      	str	r0, [r4, #8]
}
 8001a00:	e7fb      	b.n	80019fa <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>
	...

08001a04 <_ZN20STM32TouchController4initEv>:
extern I2C_HandleTypeDef hi2c3;

void STM32TouchController::init()
{
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8001a04:	4b02      	ldr	r3, [pc, #8]	; (8001a10 <_ZN20STM32TouchController4initEv+0xc>)

    /* Initialize the TS driver */
    tsDriver->Start(TS_I2C_ADDRESS);
 8001a06:	2070      	movs	r0, #112	; 0x70
    tsDriver = &ft5336_ts_drv;
 8001a08:	4a02      	ldr	r2, [pc, #8]	; (8001a14 <_ZN20STM32TouchController4initEv+0x10>)
 8001a0a:	6013      	str	r3, [r2, #0]
    tsDriver->Start(TS_I2C_ADDRESS);
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	4718      	bx	r3
 8001a10:	20000010 	.word	0x20000010
 8001a14:	20000158 	.word	0x20000158

08001a18 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001a18:	4770      	bx	lr

08001a1a <_ZN20STM32TouchControllerD0Ev>:
 8001a1a:	b510      	push	{r4, lr}
 8001a1c:	4604      	mov	r4, r0
 8001a1e:	2104      	movs	r1, #4
 8001a20:	f025 fcc2 	bl	80273a8 <_ZdlPvj>
 8001a24:	4620      	mov	r0, r4
 8001a26:	bd10      	pop	{r4, pc}

08001a28 <_ZN20STM32TouchController11sampleTouchERlS0_>:
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001a28:	b537      	push	{r0, r1, r2, r4, r5, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (tsDriver)
 8001a2a:	4d0a      	ldr	r5, [pc, #40]	; (8001a54 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 8001a2c:	460c      	mov	r4, r1
    if (tsDriver)
 8001a2e:	682b      	ldr	r3, [r5, #0]
 8001a30:	b913      	cbnz	r3, 8001a38 <_ZN20STM32TouchController11sampleTouchERlS0_+0x10>
            /* Get each touch coordinates */
            tsDriver->GetXY(TS_I2C_ADDRESS, (uint16_t*)&y, (uint16_t*)&x);
            return true;
        }
    }
    return false;
 8001a32:	2000      	movs	r0, #0
}
 8001a34:	b003      	add	sp, #12
 8001a36:	bd30      	pop	{r4, r5, pc}
        if (tsDriver->DetectTouch(TS_I2C_ADDRESS))
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	2070      	movs	r0, #112	; 0x70
 8001a3c:	9201      	str	r2, [sp, #4]
 8001a3e:	4798      	blx	r3
 8001a40:	9901      	ldr	r1, [sp, #4]
 8001a42:	2800      	cmp	r0, #0
 8001a44:	d0f5      	beq.n	8001a32 <_ZN20STM32TouchController11sampleTouchERlS0_+0xa>
            tsDriver->GetXY(TS_I2C_ADDRESS, (uint16_t*)&y, (uint16_t*)&x);
 8001a46:	682b      	ldr	r3, [r5, #0]
 8001a48:	2070      	movs	r0, #112	; 0x70
 8001a4a:	4622      	mov	r2, r4
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	4798      	blx	r3
 8001a50:	2001      	movs	r0, #1
 8001a52:	e7ef      	b.n	8001a34 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
 8001a54:	20000158 	.word	0x20000158

08001a58 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001a58:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001a5a:	2301      	movs	r3, #1
{
 8001a5c:	f88d 2017 	strb.w	r2, [sp, #23]
    status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001a60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a64:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001a68:	f10d 0217 	add.w	r2, sp, #23
 8001a6c:	9200      	str	r2, [sp, #0]
 8001a6e:	460a      	mov	r2, r1
 8001a70:	4601      	mov	r1, r0
 8001a72:	4805      	ldr	r0, [pc, #20]	; (8001a88 <TS_IO_Write+0x30>)
 8001a74:	f003 f88e 	bl	8004b94 <HAL_I2C_Mem_Write>
    if (status != HAL_OK)
 8001a78:	b110      	cbz	r0, 8001a80 <TS_IO_Write+0x28>
    HAL_I2C_DeInit(i2c_handler);
 8001a7a:	4803      	ldr	r0, [pc, #12]	; (8001a88 <TS_IO_Write+0x30>)
 8001a7c:	f003 f871 	bl	8004b62 <HAL_I2C_DeInit>
    I2Cx_WriteMultiple(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&Value, 1);
}
 8001a80:	b007      	add	sp, #28
 8001a82:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a86:	bf00      	nop
 8001a88:	20014e84 	.word	0x20014e84

08001a8c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001a8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint8_t read_value = 0;
 8001a8e:	2300      	movs	r3, #0
{
 8001a90:	460a      	mov	r2, r1
    status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001a92:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    uint8_t read_value = 0;
 8001a96:	f88d 3017 	strb.w	r3, [sp, #23]
    status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8001aa0:	f10d 0117 	add.w	r1, sp, #23
 8001aa4:	9100      	str	r1, [sp, #0]
 8001aa6:	4601      	mov	r1, r0
 8001aa8:	4805      	ldr	r0, [pc, #20]	; (8001ac0 <TS_IO_Read+0x34>)
 8001aaa:	f003 f929 	bl	8004d00 <HAL_I2C_Mem_Read>
    if (status != HAL_OK)
 8001aae:	b110      	cbz	r0, 8001ab6 <TS_IO_Read+0x2a>
    HAL_I2C_DeInit(i2c_handler);
 8001ab0:	4803      	ldr	r0, [pc, #12]	; (8001ac0 <TS_IO_Read+0x34>)
 8001ab2:	f003 f856 	bl	8004b62 <HAL_I2C_DeInit>

    I2Cx_ReadMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

    return read_value;
}
 8001ab6:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001aba:	b007      	add	sp, #28
 8001abc:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ac0:	20014e84 	.word	0x20014e84

08001ac4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{

}
 8001ac4:	4770      	bx	lr

08001ac6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
 8001ac6:	4770      	bx	lr

08001ac8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
 8001ac8:	4770      	bx	lr

08001aca <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001aca:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001acc:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8001ad0:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 8001ad4:	4770      	bx	lr

08001ad6 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
    {
        return false;
    }
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	4770      	bx	lr

08001ada <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001ada:	2000      	movs	r0, #0
 8001adc:	4770      	bx	lr

08001ade <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001ade:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001ae0:	b10b      	cbz	r3, 8001ae6 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001ae2:	4608      	mov	r0, r1
 8001ae4:	4718      	bx	r3
        }
    }
 8001ae6:	4770      	bx	lr

08001ae8 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001ae8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001aec:	4770      	bx	lr

08001aee <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001aee:	6840      	ldr	r0, [r0, #4]
 8001af0:	6803      	ldr	r3, [r0, #0]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	4718      	bx	r3

08001af6 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001af6:	4770      	bx	lr

08001af8 <_ZN11TouchGFXHAL10initializeEv>:

LOCATION_PRAGMA("TouchGFX_Framebuffer")
uint32_t animationBuffer[(480 * 272 * 2 + 3) / 4] LOCATION_ATTRIBUTE("TouchGFX_Framebuffer");

void TouchGFXHAL::initialize()
{
 8001af8:	b538      	push	{r3, r4, r5, lr}
 8001afa:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001afc:	f001 f858 	bl	8002bb0 <_ZN20TouchGFXGeneratedHAL10initializeEv>
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationBuffer);  //enable the animation storage to allow slide animations
 8001b00:	6823      	ldr	r3, [r4, #0]
 8001b02:	4620      	mov	r0, r4
 8001b04:	f8d3 5084 	ldr.w	r5, [r3, #132]	; 0x84
 8001b08:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <_ZN11TouchGFXHAL10initializeEv+0x30>)
 8001b0a:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 8001b0e:	47a8      	blx	r5
        lockDMAToPorch = enableLock;
 8001b10:	2300      	movs	r3, #0
    lockDMAToFrontPorch(false);
    instrumentation.init();
 8001b12:	4d06      	ldr	r5, [pc, #24]	; (8001b2c <_ZN11TouchGFXHAL10initializeEv+0x34>)
 8001b14:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
 8001b18:	4628      	mov	r0, r5
 8001b1a:	f7ff ff37 	bl	800198c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 8001b1e:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001b20:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001b22:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    setMCUInstrumentation(&instrumentation);
    enableMCULoadCalculation(true);
}
 8001b26:	bd38      	pop	{r3, r4, r5, pc}
 8001b28:	c0000000 	.word	0xc0000000
 8001b2c:	2000015c 	.word	0x2000015c

08001b30 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8001b30:	b508      	push	{r3, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001b32:	b931      	cbnz	r1, 8001b42 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x12>
 8001b34:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 8001b36:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 8001b3a:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 8001b3c:	480a      	ldr	r0, [pc, #40]	; (8001b68 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 8001b3e:	f025 fc61 	bl	8027404 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001b42:	e9c0 120f 	strd	r1, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001b46:	3a00      	subs	r2, #0
 8001b48:	4908      	ldr	r1, [pc, #32]	; (8001b6c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001b4a:	6443      	str	r3, [r0, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001b4c:	bf18      	it	ne
 8001b4e:	2201      	movne	r2, #1
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001b50:	3b00      	subs	r3, #0
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001b52:	700a      	strb	r2, [r1, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001b54:	bf18      	it	ne
 8001b56:	2301      	movne	r3, #1
 8001b58:	4a05      	ldr	r2, [pc, #20]	; (8001b70 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x40>)
 8001b5a:	7013      	strb	r3, [r2, #0]
    }
 8001b5c:	bd08      	pop	{r3, pc}
 8001b5e:	bf00      	nop
 8001b60:	080289d0 	.word	0x080289d0
 8001b64:	08028a08 	.word	0x08028a08
 8001b68:	08028a56 	.word	0x08028a56
 8001b6c:	20014be2 	.word	0x20014be2
 8001b70:	20014be3 	.word	0x20014be3

08001b74 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001b74:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	428b      	cmp	r3, r1
 8001b7c:	d803      	bhi.n	8001b86 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001b7e:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d905      	bls.n	8001b92 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001b86:	4b07      	ldr	r3, [pc, #28]	; (8001ba4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001b88:	219e      	movs	r1, #158	; 0x9e
 8001b8a:	4a07      	ldr	r2, [pc, #28]	; (8001ba8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001b8c:	4807      	ldr	r0, [pc, #28]	; (8001bac <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001b8e:	f025 fc39 	bl	8027404 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001b92:	4b07      	ldr	r3, [pc, #28]	; (8001bb0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001b94:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001b96:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001b98:	801a      	strh	r2, [r3, #0]
    }
 8001b9a:	bd08      	pop	{r3, pc}
 8001b9c:	20014bd8 	.word	0x20014bd8
 8001ba0:	20014bda 	.word	0x20014bda
 8001ba4:	08028a9b 	.word	0x08028a9b
 8001ba8:	08028afe 	.word	0x08028afe
 8001bac:	08028a56 	.word	0x08028a56
 8001bb0:	20014bde 	.word	0x20014bde
 8001bb4:	20014be0 	.word	0x20014be0

08001bb8 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001bb8:	f000 bfd4 	b.w	8002b64 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

08001bbc <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001bbc:	f000 bfd8 	b.w	8002b70 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08001bc0 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8001bc0:	b570      	push	{r4, r5, r6, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001bc2:	f001 f869 	bl	8002c98 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001bc6:	4a10      	ldr	r2, [pc, #64]	; (8001c08 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x48>)
 8001bc8:	2300      	movs	r3, #0
 8001bca:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001bce:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001bd2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001bd6:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001bda:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001bde:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001be2:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001be4:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001be8:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001bea:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001bee:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001bf0:	f8c2 5274 	str.w	r5, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 8001bf4:	d2f9      	bcs.n	8001bea <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x2a>
    } while(sets-- != 0U);
 8001bf6:	3b20      	subs	r3, #32
 8001bf8:	f113 0f20 	cmn.w	r3, #32
 8001bfc:	d1f2      	bne.n	8001be4 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x24>
 8001bfe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001c02:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 8001c06:	bd70      	pop	{r4, r5, r6, pc}
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8001c0c:	f001 b852 	b.w	8002cb4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>

08001c10 <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8001c10:	f000 bf84 	b.w	8002b1c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001c14 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8001c14:	f001 b92a 	b.w	8002e6c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001c18 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8001c18:	f001 b956 	b.w	8002ec8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

08001c1c <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001c1c:	f000 bf88 	b.w	8002b30 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

08001c20 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001c20:	b510      	push	{r4, lr}
 8001c22:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001c24:	f015 fc5e 	bl	80174e4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001c28:	6823      	ldr	r3, [r4, #0]
 8001c2a:	4620      	mov	r0, r4
 8001c2c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    }
 8001c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001c34:	4718      	bx	r3

08001c36 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8001c36:	f014 bdff 	b.w	8016838 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001c3a <_ZN11TouchGFXHALD0Ev>:
 8001c3a:	b510      	push	{r4, lr}
 8001c3c:	4604      	mov	r4, r0
 8001c3e:	217c      	movs	r1, #124	; 0x7c
 8001c40:	f025 fbb2 	bl	80273a8 <_ZdlPvj>
 8001c44:	4620      	mov	r0, r4
 8001c46:	bd10      	pop	{r4, pc}

08001c48 <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 8001c48:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 8001c4c:	b11b      	cbz	r3, 8001c56 <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 8001c4e:	6840      	ldr	r0, [r0, #4]
 8001c50:	6803      	ldr	r3, [r0, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4718      	bx	r3
    }
 8001c56:	4618      	mov	r0, r3
 8001c58:	4770      	bx	lr
	...

08001c5c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001c5c:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
 8001c60:	4b0d      	ldr	r3, [pc, #52]	; (8001c98 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8001c62:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001c64:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
 8001c68:	781a      	ldrb	r2, [r3, #0]
 8001c6a:	428c      	cmp	r4, r1
 8001c6c:	d009      	beq.n	8001c82 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
        {
            if (DISPLAY_ROTATION == rotate0)
 8001c6e:	b93a      	cbnz	r2, 8001c80 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001c70:	490a      	ldr	r1, [pc, #40]	; (8001c9c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001c72:	4a0b      	ldr	r2, [pc, #44]	; (8001ca0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001c74:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001c76:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8001c78:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001c7a:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001c7c:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8001c7e:	701a      	strb	r2, [r3, #0]
        }
    }
 8001c80:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001c82:	2a00      	cmp	r2, #0
 8001c84:	d0fc      	beq.n	8001c80 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001c86:	4a06      	ldr	r2, [pc, #24]	; (8001ca0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001c88:	4904      	ldr	r1, [pc, #16]	; (8001c9c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001c8a:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001c8c:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001c8e:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001c90:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001c92:	2200      	movs	r2, #0
 8001c94:	e7f3      	b.n	8001c7e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001c96:	bf00      	nop
 8001c98:	20014bdc 	.word	0x20014bdc
 8001c9c:	20014bda 	.word	0x20014bda
 8001ca0:	20014bd8 	.word	0x20014bd8

08001ca4 <IdleTaskHook>:
}

extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
 8001ca4:	4601      	mov	r1, r0
 8001ca6:	b508      	push	{r3, lr}
 8001ca8:	4b03      	ldr	r3, [pc, #12]	; (8001cb8 <IdleTaskHook+0x14>)
 8001caa:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8001cac:	b101      	cbz	r1, 8001cb0 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8001cae:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8001cb0:	f015 fc32 	bl	8017518 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	bd08      	pop	{r3, pc}
 8001cb8:	20014be4 	.word	0x20014be4

08001cbc <_GLOBAL__sub_I_instrumentation>:
          cc_in(0)
 8001cbc:	4b03      	ldr	r3, [pc, #12]	; (8001ccc <_GLOBAL__sub_I_instrumentation+0x10>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	4a02      	ldr	r2, [pc, #8]	; (8001cd0 <_GLOBAL__sub_I_instrumentation+0x14>)
 8001cc6:	601a      	str	r2, [r3, #0]
}
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	2000015c 	.word	0x2000015c
 8001cd0:	08028998 	.word	0x08028998

08001cd4 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	2200      	movs	r2, #0
{
 8001cd8:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001cda:	4608      	mov	r0, r1
 8001cdc:	f004 ff04 	bl	8006ae8 <osSemaphoreNew>
 8001ce0:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8001ce2:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001ce4:	b928      	cbnz	r0, 8001cf2 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8001ce8:	2128      	movs	r1, #40	; 0x28
 8001cea:	4a0a      	ldr	r2, [pc, #40]	; (8001d14 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001cec:	480a      	ldr	r0, [pc, #40]	; (8001d18 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8001cee:	f025 fb89 	bl	8027404 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2104      	movs	r1, #4
 8001cf6:	2001      	movs	r0, #1
 8001cf8:	f004 ffbc 	bl	8006c74 <osMessageQueueNew>
 8001cfc:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8001cfe:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001d00:	b918      	cbnz	r0, 8001d0a <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8001d02:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8001d04:	212c      	movs	r1, #44	; 0x2c
 8001d06:	4a03      	ldr	r2, [pc, #12]	; (8001d14 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001d08:	e7f0      	b.n	8001cec <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8001d0a:	bd08      	pop	{r3, pc}
 8001d0c:	2000016c 	.word	0x2000016c
 8001d10:	08028c14 	.word	0x08028c14
 8001d14:	08028c5d 	.word	0x08028c5d
 8001d18:	08028c8c 	.word	0x08028c8c
 8001d1c:	20000168 	.word	0x20000168
 8001d20:	08028cd1 	.word	0x08028cd1

08001d24 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001d24:	4b02      	ldr	r3, [pc, #8]	; (8001d30 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8001d26:	f04f 31ff 	mov.w	r1, #4294967295
 8001d2a:	6818      	ldr	r0, [r3, #0]
 8001d2c:	f004 bf32 	b.w	8006b94 <osSemaphoreAcquire>
 8001d30:	2000016c 	.word	0x2000016c

08001d34 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8001d34:	4b01      	ldr	r3, [pc, #4]	; (8001d3c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8001d36:	6818      	ldr	r0, [r3, #0]
 8001d38:	f004 bf66 	b.w	8006c08 <osSemaphoreRelease>
 8001d3c:	2000016c 	.word	0x2000016c

08001d40 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001d40:	4b02      	ldr	r3, [pc, #8]	; (8001d4c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8001d42:	2100      	movs	r1, #0
 8001d44:	6818      	ldr	r0, [r3, #0]
 8001d46:	f004 bf25 	b.w	8006b94 <osSemaphoreAcquire>
 8001d4a:	bf00      	nop
 8001d4c:	2000016c 	.word	0x2000016c

08001d50 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 8001d50:	f7ff bff0 	b.w	8001d34 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08001d54 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001d54:	2300      	movs	r3, #0
 8001d56:	4803      	ldr	r0, [pc, #12]	; (8001d64 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8001d58:	4903      	ldr	r1, [pc, #12]	; (8001d68 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	6800      	ldr	r0, [r0, #0]
 8001d5e:	f004 bfcf 	b.w	8006d00 <osMessageQueuePut>
 8001d62:	bf00      	nop
 8001d64:	20000168 	.word	0x20000168
 8001d68:	20000004 	.word	0x20000004

08001d6c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001d6c:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001d6e:	2300      	movs	r3, #0
 8001d70:	4c07      	ldr	r4, [pc, #28]	; (8001d90 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8001d72:	a901      	add	r1, sp, #4
 8001d74:	461a      	mov	r2, r3
 8001d76:	6820      	ldr	r0, [r4, #0]
 8001d78:	f005 f804 	bl	8006d84 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d80:	2200      	movs	r2, #0
 8001d82:	a901      	add	r1, sp, #4
 8001d84:	6820      	ldr	r0, [r4, #0]
 8001d86:	f004 fffd 	bl	8006d84 <osMessageQueueGet>
}
 8001d8a:	b002      	add	sp, #8
 8001d8c:	bd10      	pop	{r4, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000168 	.word	0x20000168

08001d94 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8001d94:	6803      	ldr	r3, [r0, #0]
 8001d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d98:	4718      	bx	r3

08001d9a <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	4770      	bx	lr

08001d9e <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8001d9e:	6803      	ldr	r3, [r0, #0]
 8001da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da2:	4718      	bx	r3

08001da4 <_ZN8STM32DMA10initializeEv>:
}

void STM32DMA::initialize()
{
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001da4:	4b0d      	ldr	r3, [pc, #52]	; (8001ddc <_ZN8STM32DMA10initializeEv+0x38>)
{
 8001da6:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001da8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001daa:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001dae:	631a      	str	r2, [r3, #48]	; 0x30
 8001db0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001db2:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8001db6:	9201      	str	r2, [sp, #4]
 8001db8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8001dba:	691a      	ldr	r2, [r3, #16]
 8001dbc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001dc0:	611a      	str	r2, [r3, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8001dc2:	691a      	ldr	r2, [r3, #16]
 8001dc4:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001dc8:	611a      	str	r2, [r3, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8001dca:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <_ZN8STM32DMA10initializeEv+0x3c>)
 8001dcc:	4a05      	ldr	r2, [pc, #20]	; (8001de4 <_ZN8STM32DMA10initializeEv+0x40>)
 8001dce:	611a      	str	r2, [r3, #16]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dd0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001dd4:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <_ZN8STM32DMA10initializeEv+0x44>)
 8001dd6:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8001dd8:	b002      	add	sp, #8
 8001dda:	4770      	bx	lr
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	20014fa0 	.word	0x20014fa0
 8001de4:	08001df5 	.word	0x08001df5
 8001de8:	e000e100 	.word	0xe000e100

08001dec <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8001dec:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8001df0:	4770      	bx	lr
	...

08001df4 <DMA2D_XferCpltCallback>:
        HAL::getInstance()->signalDMAInterrupt();
 8001df4:	4b02      	ldr	r3, [pc, #8]	; (8001e00 <DMA2D_XferCpltCallback+0xc>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8001dfa:	6803      	ldr	r3, [r0, #0]
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	4718      	bx	r3
 8001e00:	20014be4 	.word	0x20014be4

08001e04 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8001e04:	b508      	push	{r3, lr}
 8001e06:	280b      	cmp	r0, #11
 8001e08:	d80b      	bhi.n	8001e22 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8001e0a:	e8df f000 	tbb	[pc, r0]
 8001e0e:	0612      	.short	0x0612
 8001e10:	0a0a0a10 	.word	0x0a0a0a10
 8001e14:	0808080a 	.word	0x0808080a
 8001e18:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8001e1a:	2001      	movs	r0, #1
}
 8001e1c:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8001e1e:	2005      	movs	r0, #5
        break;
 8001e20:	e7fc      	b.n	8001e1c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8001e22:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8001e24:	2166      	movs	r1, #102	; 0x66
 8001e26:	4a05      	ldr	r2, [pc, #20]	; (8001e3c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8001e28:	4805      	ldr	r0, [pc, #20]	; (8001e40 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8001e2a:	f025 faeb 	bl	8027404 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8001e2e:	2000      	movs	r0, #0
 8001e30:	e7f4      	b.n	8001e1c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8001e32:	2002      	movs	r0, #2
    return dma2dColorMode;
 8001e34:	e7f2      	b.n	8001e1c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8001e36:	bf00      	nop
 8001e38:	08028d13 	.word	0x08028d13
 8001e3c:	08028d2e 	.word	0x08028d2e
 8001e40:	08028d78 	.word	0x08028d78

08001e44 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8001e44:	b508      	push	{r3, lr}
 8001e46:	280a      	cmp	r0, #10
 8001e48:	d809      	bhi.n	8001e5e <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8001e4a:	e8df f000 	tbb	[pc, r0]
 8001e4e:	0610      	.short	0x0610
 8001e50:	0808080e 	.word	0x0808080e
 8001e54:	06060608 	.word	0x06060608
 8001e58:	06          	.byte	0x06
 8001e59:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8001e5a:	2001      	movs	r0, #1
}
 8001e5c:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8001e5e:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8001e60:	2187      	movs	r1, #135	; 0x87
 8001e62:	4a05      	ldr	r2, [pc, #20]	; (8001e78 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8001e64:	4805      	ldr	r0, [pc, #20]	; (8001e7c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8001e66:	f025 facd 	bl	8027404 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	e7f6      	b.n	8001e5c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8001e6e:	2002      	movs	r0, #2
    return dma2dColorMode;
 8001e70:	e7f4      	b.n	8001e5c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8001e72:	bf00      	nop
 8001e74:	08028d13 	.word	0x08028d13
 8001e78:	08028dbb 	.word	0x08028dbb
 8001e7c:	08028d78 	.word	0x08028d78

08001e80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8001e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001e84:	f891 801d 	ldrb.w	r8, [r1, #29]
{
 8001e88:	460c      	mov	r4, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001e8a:	4640      	mov	r0, r8
 8001e8c:	f7ff ffba 	bl	8001e04 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001e90:	7fa7      	ldrb	r7, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001e92:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001e94:	4638      	mov	r0, r7
 8001e96:	f7ff ffb5 	bl	8001e04 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8001e9a:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001e9c:	4638      	mov	r0, r7
 8001e9e:	f7ff ffd1 	bl	8001e44 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001ea2:	8aa1      	ldrh	r1, [r4, #20]
 8001ea4:	8b62      	ldrh	r2, [r4, #26]
 8001ea6:	4b4b      	ldr	r3, [pc, #300]	; (8001fd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
 8001ea8:	1a52      	subs	r2, r2, r1
 8001eaa:	469e      	mov	lr, r3
 8001eac:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001eae:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8001eb0:	8b22      	ldrh	r2, [r4, #24]
 8001eb2:	1a52      	subs	r2, r2, r1
 8001eb4:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001eb6:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001eb8:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001eba:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001ebe:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001ec0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8001ec2:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001ec4:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8001ec6:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8001ec8:	f8d4 c000 	ldr.w	ip, [r4]
 8001ecc:	f894 901c 	ldrb.w	r9, [r4, #28]
 8001ed0:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
 8001ed4:	ea4f 6209 	mov.w	r2, r9, lsl #24
 8001ed8:	d030      	beq.n	8001f3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 8001eda:	d814      	bhi.n	8001f06 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x86>
 8001edc:	f1bc 0f20 	cmp.w	ip, #32
 8001ee0:	ea45 0002 	orr.w	r0, r5, r2
 8001ee4:	d069      	beq.n	8001fba <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13a>
 8001ee6:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
 8001eea:	d066      	beq.n	8001fba <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13a>
 8001eec:	f1bc 0f04 	cmp.w	ip, #4
 8001ef0:	d020      	beq.n	8001f34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb4>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001ef2:	432a      	orrs	r2, r5
 8001ef4:	4b37      	ldr	r3, [pc, #220]	; (8001fd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8001ef6:	45b8      	cmp	r8, r7
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001ef8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001efc:	61da      	str	r2, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8001efe:	d148      	bne.n	8001f92 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x112>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8001f00:	f240 2201 	movw	r2, #513	; 0x201
 8001f04:	e014      	b.n	8001f30 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb0>
    switch (blitOp.operation)
 8001f06:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 8001f0a:	d007      	beq.n	8001f1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9c>
 8001f0c:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8001f10:	d1ef      	bne.n	8001ef2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x72>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001f12:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001f16:	f042 0209 	orr.w	r2, r2, #9
 8001f1a:	e003      	b.n	8001f24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa4>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001f1c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001f20:	f042 020a 	orr.w	r2, r2, #10
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001f24:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8001f26:	68e2      	ldr	r2, [r4, #12]
 8001f28:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001f2a:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001f2c:	6159      	str	r1, [r3, #20]
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8001f2e:	4a2a      	ldr	r2, [pc, #168]	; (8001fd8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8001f30:	601a      	str	r2, [r3, #0]
        }
        break;
    }
}
 8001f32:	e04d      	b.n	8001fd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001f34:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8001f38:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001f3a:	e7f6      	b.n	8001f2a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xaa>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8001f3c:	68a0      	ldr	r0, [r4, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001f3e:	432a      	orrs	r2, r5
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8001f40:	1d04      	adds	r4, r0, #4
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001f42:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8001f46:	62dc      	str	r4, [r3, #44]	; 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001f48:	61da      	str	r2, [r3, #28]
            switch ((Bitmap::ClutFormat)palette->format)
 8001f4a:	7802      	ldrb	r2, [r0, #0]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001f4c:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001f4e:	6159      	str	r1, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
 8001f50:	b142      	cbz	r2, 8001f64 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe4>
 8001f52:	2a01      	cmp	r2, #1
 8001f54:	d01f      	beq.n	8001f96 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x116>
                assert(0 && "Unsupported format");
 8001f56:	4b21      	ldr	r3, [pc, #132]	; (8001fdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>)
 8001f58:	f240 1111 	movw	r1, #273	; 0x111
 8001f5c:	4a20      	ldr	r2, [pc, #128]	; (8001fe0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>)
 8001f5e:	4821      	ldr	r0, [pc, #132]	; (8001fe4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x164>)
 8001f60:	f025 fa50 	bl	8027404 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001f64:	8842      	ldrh	r2, [r0, #2]
            bool blend = true;
 8001f66:	2401      	movs	r4, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001f68:	69d9      	ldr	r1, [r3, #28]
 8001f6a:	1e50      	subs	r0, r2, #1
 8001f6c:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 8001f70:	f022 0210 	bic.w	r2, r2, #16
 8001f74:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001f78:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8001f7a:	4b16      	ldr	r3, [pc, #88]	; (8001fd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
 8001f7c:	69da      	ldr	r2, [r3, #28]
 8001f7e:	f042 0220 	orr.w	r2, r2, #32
 8001f82:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8001f84:	69da      	ldr	r2, [r3, #28]
 8001f86:	0692      	lsls	r2, r2, #26
 8001f88:	d4fc      	bmi.n	8001f84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x104>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8001f8a:	2210      	movs	r2, #16
 8001f8c:	609a      	str	r2, [r3, #8]
            if (blend)
 8001f8e:	2c00      	cmp	r4, #0
 8001f90:	d1cd      	bne.n	8001f2e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xae>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8001f92:	4a15      	ldr	r2, [pc, #84]	; (8001fe8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>)
 8001f94:	e7cc      	b.n	8001f30 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb0>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001f96:	8842      	ldrh	r2, [r0, #2]
                if (blitOp.alpha == 255)
 8001f98:	f1b9 04ff 	subs.w	r4, r9, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001f9c:	69d9      	ldr	r1, [r3, #28]
 8001f9e:	f102 30ff 	add.w	r0, r2, #4294967295
                if (blitOp.alpha == 255)
 8001fa2:	bf18      	it	ne
 8001fa4:	2401      	movne	r4, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001fa6:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 8001faa:	f022 0210 	bic.w	r2, r2, #16
 8001fae:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001fb2:	f042 0210 	orr.w	r2, r2, #16
 8001fb6:	61da      	str	r2, [r3, #28]
                break;
 8001fb8:	e7df      	b.n	8001f7a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfa>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001fba:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8001fbe:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001fc0:	f8ce 001c 	str.w	r0, [lr, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001fc4:	f8ce 6024 	str.w	r6, [lr, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001fc8:	f8ce 1014 	str.w	r1, [lr, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8001fcc:	f8ce 3000 	str.w	r3, [lr]
}
 8001fd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001fd4:	4002b000 	.word	0x4002b000
 8001fd8:	00020201 	.word	0x00020201
 8001fdc:	08028e06 	.word	0x08028e06
 8001fe0:	08028e20 	.word	0x08028e20
 8001fe4:	08028d78 	.word	0x08028d78
 8001fe8:	00010201 	.word	0x00010201

08001fec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8001fec:	b538      	push	{r3, r4, r5, lr}
 8001fee:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001ff0:	7f88      	ldrb	r0, [r1, #30]
 8001ff2:	f7ff ff27 	bl	8001e44 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001ff6:	4b17      	ldr	r3, [pc, #92]	; (8002054 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x68>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001ff8:	8aa5      	ldrh	r5, [r4, #20]
 8001ffa:	8ae1      	ldrh	r1, [r4, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001ffc:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001ffe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002002:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002004:	1b52      	subs	r2, r2, r5
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002006:	6459      	str	r1, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002008:	6921      	ldr	r1, [r4, #16]
 800200a:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800200c:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 800200e:	6825      	ldr	r5, [r4, #0]
 8002010:	2d08      	cmp	r5, #8
 8002012:	d10e      	bne.n	8002032 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002014:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002016:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002018:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 800201a:	4a0f      	ldr	r2, [pc, #60]	; (8002058 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x6c>)
 800201c:	7f20      	ldrb	r0, [r4, #28]
 800201e:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002022:	61da      	str	r2, [r3, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002024:	68e2      	ldr	r2, [r4, #12]
 8002026:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002028:	4a0c      	ldr	r2, [pc, #48]	; (800205c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x70>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800202a:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800202c:	60d9      	str	r1, [r3, #12]

        // set color
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 800202e:	601a      	str	r2, [r3, #0]
    }
}
 8002030:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8002032:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002034:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002036:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8002038:	68e1      	ldr	r1, [r4, #12]
 800203a:	0a0a      	lsrs	r2, r1, #8
 800203c:	0948      	lsrs	r0, r1, #5
 800203e:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8002042:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8002046:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 800204a:	4302      	orrs	r2, r0
 800204c:	430a      	orrs	r2, r1
 800204e:	639a      	str	r2, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002050:	4a03      	ldr	r2, [pc, #12]	; (8002060 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x74>)
 8002052:	e7ec      	b.n	800202e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8002054:	4002b000 	.word	0x4002b000
 8002058:	00010009 	.word	0x00010009
 800205c:	00020201 	.word	0x00020201
 8002060:	00030201 	.word	0x00030201

08002064 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8002064:	4b05      	ldr	r3, [pc, #20]	; (800207c <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002066:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800206a:	6003      	str	r3, [r0, #0]
 800206c:	4b04      	ldr	r3, [pc, #16]	; (8002080 <_ZN8STM32DMAD1Ev+0x1c>)
 800206e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002072:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002076:	f3bf 8f6f 	isb	sy
}
 800207a:	4770      	bx	lr
 800207c:	08028e68 	.word	0x08028e68
 8002080:	e000e100 	.word	0xe000e100

08002084 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002084:	b510      	push	{r4, lr}
 8002086:	4604      	mov	r4, r0
}
 8002088:	f7ff ffec 	bl	8002064 <_ZN8STM32DMAD1Ev>
 800208c:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8002090:	4620      	mov	r0, r4
 8002092:	f025 f989 	bl	80273a8 <_ZdlPvj>
 8002096:	4620      	mov	r0, r4
 8002098:	bd10      	pop	{r4, pc}
	...

0800209c <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 800209c:	b570      	push	{r4, r5, r6, lr}
 800209e:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80020a0:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <_ZN8STM32DMAC1Ev+0x30>)
 80020a2:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80020a4:	2600      	movs	r6, #0
 80020a6:	4625      	mov	r5, r4
 80020a8:	2260      	movs	r2, #96	; 0x60
 80020aa:	6060      	str	r0, [r4, #4]
 80020ac:	7226      	strb	r6, [r4, #8]
 80020ae:	7266      	strb	r6, [r4, #9]
 80020b0:	f845 3b20 	str.w	r3, [r5], #32
 80020b4:	4629      	mov	r1, r5
 80020b6:	f015 fb97 	bl	80177e8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80020ba:	f504 6342 	add.w	r3, r4, #3104	; 0xc20
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
        : color(0)
 80020be:	60ee      	str	r6, [r5, #12]
 80020c0:	3520      	adds	r5, #32
 80020c2:	42ab      	cmp	r3, r5
 80020c4:	d1fb      	bne.n	80020be <_ZN8STM32DMAC1Ev+0x22>
}
 80020c6:	4620      	mov	r0, r4
 80020c8:	bd70      	pop	{r4, r5, r6, pc}
 80020ca:	bf00      	nop
 80020cc:	08028e68 	.word	0x08028e68

080020d0 <_ZNK20SoftwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual void gotoFrame(uint32_t frameno);

    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
 80020d0:	6940      	ldr	r0, [r0, #20]
 80020d2:	4770      	bx	lr

080020d4 <_ZN20SoftwareMJPEGDecoder12getLastErrorEv>:
    }

    AVIErrors getLastError()
    {
        return lastError;
    }
 80020d4:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
 80020d8:	4770      	bx	lr

080020da <_ZN20SoftwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool SoftwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 80020da:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80020dc:	b923      	cbnz	r3, 80020e8 <_ZN20SoftwareMJPEGDecoder8hasVideoEv+0xe>
 80020de:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80020e0:	3800      	subs	r0, #0
 80020e2:	bf18      	it	ne
 80020e4:	2001      	movne	r0, #1
 80020e6:	4770      	bx	lr
 80020e8:	2001      	movs	r0, #1
}
 80020ea:	4770      	bx	lr

080020ec <_ZN20SoftwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t SoftwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 80020ec:	6880      	ldr	r0, [r0, #8]
 80020ee:	4770      	bx	lr

080020f0 <_ZN20SoftwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void SoftwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 80020f0:	3004      	adds	r0, #4
{
 80020f2:	b510      	push	{r4, lr}
 80020f4:	460c      	mov	r4, r1
    *data = videoInfo;
 80020f6:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 80020f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if VIDEO_DECODE_FORMAT == RGB565 || VIDEO_DECODE_FORMAT == RGB888
#else
    data->frame_width = 0;
    data->frame_height = 0;
#endif
}
 80020fc:	bd10      	pop	{r4, pc}

080020fe <_ZN20SoftwareMJPEGDecoderD1Ev>:
class SoftwareMJPEGDecoder : public MJPEGDecoder
 80020fe:	4770      	bx	lr

08002100 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 8002100:	b508      	push	{r3, lr}
    assert(0);
 8002102:	4a03      	ldr	r2, [pc, #12]	; (8002110 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 8002104:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8002108:	4b02      	ldr	r3, [pc, #8]	; (8002114 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 800210a:	4803      	ldr	r0, [pc, #12]	; (8002118 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 800210c:	f025 f97a 	bl	8027404 <__assert_func>
 8002110:	08028eb0 	.word	0x08028eb0
 8002114:	0802e0ce 	.word	0x0802e0ce
 8002118:	08028f0b 	.word	0x08028f0b

0800211c <_ZN20SoftwareMJPEGDecoderD0Ev>:
 800211c:	b510      	push	{r4, lr}
 800211e:	4604      	mov	r4, r0
 8002120:	2148      	movs	r1, #72	; 0x48
 8002122:	f025 f941 	bl	80273a8 <_ZdlPvj>
 8002126:	4620      	mov	r0, r4
 8002128:	bd10      	pop	{r4, pc}
	...

0800212c <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>:
void SoftwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
 800212c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002130:	461c      	mov	r4, r3
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 8002132:	6b43      	ldr	r3, [r0, #52]	; 0x34
void SoftwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
 8002134:	f5ad 7d1f 	sub.w	sp, sp, #636	; 0x27c
 8002138:	4605      	mov	r5, r0
 800213a:	460e      	mov	r6, r1
 800213c:	4617      	mov	r7, r2
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 800213e:	2b00      	cmp	r3, #0
 8002140:	d052      	beq.n	80021e8 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xbc>
        JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 8002142:	2200      	movs	r2, #0
        cinfo.err = jpeg_std_error(&jerr);
 8002144:	a803      	add	r0, sp, #12
                const uint16_t pix = ((RGB_matrix->R & 0xF8) << 8) | ((RGB_matrix->G & 0xFC) << 3) | ((RGB_matrix->B & 0xF8) >> 3);
 8002146:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80021f0 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xc4>
        JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 800214a:	e9cd 3201 	strd	r3, r2, [sp, #4]
        cinfo.err = jpeg_std_error(&jerr);
 800214e:	f00c ffb3 	bl	800f0b8 <jpeg_std_error>
        jpeg_create_decompress(&cinfo);
 8002152:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8002156:	2150      	movs	r1, #80	; 0x50
        cinfo.err = jpeg_std_error(&jerr);
 8002158:	9024      	str	r0, [sp, #144]	; 0x90
        jpeg_create_decompress(&cinfo);
 800215a:	a824      	add	r0, sp, #144	; 0x90
 800215c:	f006 febd 	bl	8008eda <jpeg_CreateDecompress>
        jpeg_mem_src(&cinfo, const_cast<uint8_t*>(mjpgdata), length);
 8002160:	463a      	mov	r2, r7
 8002162:	4631      	mov	r1, r6
 8002164:	a824      	add	r0, sp, #144	; 0x90
 8002166:	f007 fe57 	bl	8009e18 <jpeg_mem_src>
        jpeg_read_header(&cinfo, TRUE);
 800216a:	2101      	movs	r1, #1
 800216c:	a824      	add	r0, sp, #144	; 0x90
 800216e:	f006 ffbd 	bl	80090ec <jpeg_read_header>
        cinfo.dct_method = JDCT_FLOAT;
 8002172:	2302      	movs	r3, #2
        jpeg_start_decompress(&cinfo);
 8002174:	a824      	add	r0, sp, #144	; 0x90
        cinfo.dct_method = JDCT_FLOAT;
 8002176:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
        jpeg_start_decompress(&cinfo);
 800217a:	f007 f85b 	bl	8009234 <jpeg_start_decompress>
        const uint32_t width = MIN(bufferWidth, cinfo.image_width);
 800217e:	f8bd 6298 	ldrh.w	r6, [sp, #664]	; 0x298
 8002182:	9b2b      	ldr	r3, [sp, #172]	; 0xac
        const uint32_t height = MIN(bufferHeight, cinfo.output_height);
 8002184:	f8bd 729c 	ldrh.w	r7, [sp, #668]	; 0x29c
        const uint32_t width = MIN(bufferWidth, cinfo.image_width);
 8002188:	429e      	cmp	r6, r3
 800218a:	bf28      	it	cs
 800218c:	461e      	movcs	r6, r3
        const uint32_t height = MIN(bufferHeight, cinfo.output_height);
 800218e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002190:	429f      	cmp	r7, r3
            JPEG_RGB* const RGB_end = RGB_matrix + width;
 8002192:	eb06 0846 	add.w	r8, r6, r6, lsl #1
        const uint32_t height = MIN(bufferHeight, cinfo.output_height);
 8002196:	bf28      	it	cs
 8002198:	461f      	movcs	r7, r3
            lineptr = (uint16_t*)((uint8_t*)lineptr + bufferStride - width * 2); //move to next line
 800219a:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
 800219c:	eba3 0646 	sub.w	r6, r3, r6, lsl #1
        while (cinfo.output_scanline < height)
 80021a0:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80021a2:	429f      	cmp	r7, r3
 80021a4:	d91a      	bls.n	80021dc <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xb0>
            (void)jpeg_read_scanlines(&cinfo, lines, 1);
 80021a6:	2201      	movs	r2, #1
 80021a8:	a901      	add	r1, sp, #4
 80021aa:	a824      	add	r0, sp, #144	; 0x90
 80021ac:	f007 f88b 	bl	80092c6 <jpeg_read_scanlines>
            JPEG_RGB* RGB_matrix = (JPEG_RGB*)lineBuffer;
 80021b0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
            JPEG_RGB* const RGB_end = RGB_matrix + width;
 80021b2:	eb03 0008 	add.w	r0, r3, r8
            while (RGB_matrix < RGB_end)
 80021b6:	4298      	cmp	r0, r3
 80021b8:	d90e      	bls.n	80021d8 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xac>
                const uint16_t pix = ((RGB_matrix->R & 0xF8) << 8) | ((RGB_matrix->G & 0xFC) << 3) | ((RGB_matrix->B & 0xF8) >> 3);
 80021ba:	7859      	ldrb	r1, [r3, #1]
 80021bc:	789a      	ldrb	r2, [r3, #2]
 80021be:	00c9      	lsls	r1, r1, #3
 80021c0:	ea09 2202 	and.w	r2, r9, r2, lsl #8
 80021c4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80021c8:	430a      	orrs	r2, r1
 80021ca:	f813 1b03 	ldrb.w	r1, [r3], #3
 80021ce:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                *lineptr++ = pix;
 80021d2:	f824 2b02 	strh.w	r2, [r4], #2
            while (RGB_matrix < RGB_end)
 80021d6:	e7ee      	b.n	80021b6 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x8a>
            lineptr = (uint16_t*)((uint8_t*)lineptr + bufferStride - width * 2); //move to next line
 80021d8:	4434      	add	r4, r6
        while (cinfo.output_scanline < height)
 80021da:	e7e1      	b.n	80021a0 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x74>
        jpeg_finish_decompress(&cinfo);
 80021dc:	a824      	add	r0, sp, #144	; 0x90
 80021de:	f006 ffa7 	bl	8009130 <jpeg_finish_decompress>
        jpeg_destroy_decompress(&cinfo);
 80021e2:	a824      	add	r0, sp, #144	; 0x90
 80021e4:	f006 fec6 	bl	8008f74 <jpeg_destroy_decompress>
}
 80021e8:	f50d 7d1f 	add.w	sp, sp, #636	; 0x27c
 80021ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80021f0:	fffff800 	.word	0xfffff800

080021f4 <_ZN20SoftwareMJPEGDecoderC1EPh>:
      reader(0), lineBuffer(buffer), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80021f4:	4a0a      	ldr	r2, [pc, #40]	; (8002220 <_ZN20SoftwareMJPEGDecoderC1EPh+0x2c>)
 80021f6:	6002      	str	r2, [r0, #0]
 80021f8:	2200      	movs	r2, #0
 80021fa:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80021fe:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8002202:	e9c0 2209 	strd	r2, r2, [r0, #36]	; 0x24
 8002206:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 800220a:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
 800220e:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 8002212:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    videoInfo.frame_width = 0;
 8002216:	e9c0 2203 	strd	r2, r2, [r0, #12]
    videoInfo.number_of_frames = 0;
 800221a:	e9c0 2201 	strd	r2, r2, [r0, #4]
}
 800221e:	4770      	bx	lr
 8002220:	080291e4 	.word	0x080291e4

08002224 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>:
{
 8002224:	b420      	push	{r5}
 8002226:	460d      	mov	r5, r1
 8002228:	4611      	mov	r1, r2
 800222a:	461a      	mov	r2, r3
    if (reader != 0)
 800222c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800222e:	b13b      	cbz	r3, 8002240 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 8002230:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002232:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002234:	1aed      	subs	r5, r5, r3
        src = (const char*)movieData + offset;
 8002236:	4428      	add	r0, r5
}
 8002238:	f85d 5b04 	ldr.w	r5, [sp], #4
    return strncmp(src, str, num);
 800223c:	f025 bd86 	b.w	8027d4c <strncmp>
        src = (const char*)movieData + offset;
 8002240:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8002242:	e7f8      	b.n	8002236 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm+0x12>

08002244 <_ZN20SoftwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 8002244:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
 8002246:	b510      	push	{r4, lr}
    if (reader != 0)
 8002248:	b173      	cbz	r3, 8002268 <_ZN20SoftwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 800224a:	6c03      	ldr	r3, [r0, #64]	; 0x40
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 800224c:	6b82      	ldr	r2, [r0, #56]	; 0x38
        const uint32_t index = offset - aviBufferStartOffset;
 800224e:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002250:	1853      	adds	r3, r2, r1
 8002252:	5c52      	ldrb	r2, [r2, r1]
 8002254:	7898      	ldrb	r0, [r3, #2]
 8002256:	785c      	ldrb	r4, [r3, #1]
 8002258:	0400      	lsls	r0, r0, #16
 800225a:	78db      	ldrb	r3, [r3, #3]
 800225c:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 8002260:	4310      	orrs	r0, r2
 8002262:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 8002266:	bd10      	pop	{r4, pc}
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
 8002268:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800226a:	5858      	ldr	r0, [r3, r1]
 800226c:	e7fb      	b.n	8002266 <_ZN20SoftwareMJPEGDecoder6getU32Em+0x22>

0800226e <_ZN20SoftwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 800226e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002270:	b143      	cbz	r3, 8002284 <_ZN20SoftwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 8002272:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002274:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 8002276:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002278:	185a      	adds	r2, r3, r1
 800227a:	5c58      	ldrb	r0, [r3, r1]
 800227c:	7852      	ldrb	r2, [r2, #1]
 800227e:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8002282:	4770      	bx	lr
        return d[0] | (d[1] << 8);
 8002284:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002286:	5a58      	ldrh	r0, [r3, r1]
}
 8002288:	4770      	bx	lr
	...

0800228c <_ZN20SoftwareMJPEGDecoder8readDataEmm>:
{
 800228c:	b570      	push	{r4, r5, r6, lr}
 800228e:	4604      	mov	r4, r0
    if (reader != 0)
 8002290:	6b00      	ldr	r0, [r0, #48]	; 0x30
{
 8002292:	460d      	mov	r5, r1
 8002294:	4616      	mov	r6, r2
    if (reader != 0)
 8002296:	b1d8      	cbz	r0, 80022d0 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 8002298:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800229a:	4293      	cmp	r3, r2
 800229c:	d208      	bcs.n	80022b0 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 800229e:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 80022a0:	4a0d      	ldr	r2, [pc, #52]	; (80022d8 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x4c>)
 80022a2:	2153      	movs	r1, #83	; 0x53
 80022a4:	480d      	ldr	r0, [pc, #52]	; (80022dc <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 80022a6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            assert(!"Buffer to small");
 80022aa:	4b0d      	ldr	r3, [pc, #52]	; (80022e0 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x54>)
 80022ac:	f025 f8aa 	bl	8027404 <__assert_func>
        reader->seek(offset);
 80022b0:	6803      	ldr	r3, [r0, #0]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 80022b6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80022b8:	4632      	mov	r2, r6
 80022ba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80022bc:	6803      	ldr	r3, [r0, #0]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	4798      	blx	r3
 80022c2:	b910      	cbnz	r0, 80022ca <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 80022c4:	230d      	movs	r3, #13
 80022c6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        return aviBuffer;
 80022ca:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        aviBufferStartOffset = offset;
 80022cc:	6425      	str	r5, [r4, #64]	; 0x40
}
 80022ce:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 80022d0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80022d2:	4408      	add	r0, r1
 80022d4:	e7fb      	b.n	80022ce <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x42>
 80022d6:	bf00      	nop
 80022d8:	08028f6d 	.word	0x08028f6d
 80022dc:	08028f0b 	.word	0x08028f0b
 80022e0:	08028f5a 	.word	0x08028f5a

080022e4 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv>:
{
 80022e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 80022e8:	6943      	ldr	r3, [r0, #20]
{
 80022ea:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 80022ec:	b92b      	cbnz	r3, 80022fa <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x16>
 80022ee:	4b23      	ldr	r3, [pc, #140]	; (800237c <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 80022f0:	2198      	movs	r1, #152	; 0x98
 80022f2:	4a23      	ldr	r2, [pc, #140]	; (8002380 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 80022f4:	4823      	ldr	r0, [pc, #140]	; (8002384 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0xa0>)
 80022f6:	f025 f885 	bl	8027404 <__assert_func>
    readData(currentMovieOffset, 8);
 80022fa:	2208      	movs	r2, #8
 80022fc:	6981      	ldr	r1, [r0, #24]
 80022fe:	f7ff ffc5 	bl	800228c <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002302:	69a1      	ldr	r1, [r4, #24]
 8002304:	4620      	mov	r0, r4
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002306:	f243 0630 	movw	r6, #12336	; 0x3030
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800230a:	3104      	adds	r1, #4
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 800230c:	f246 3764 	movw	r7, #25444	; 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002310:	f7ff ff98 	bl	8002244 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 8002314:	4605      	mov	r5, r0
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 8002316:	69a1      	ldr	r1, [r4, #24]
 8002318:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800231a:	440d      	add	r5, r1
 800231c:	f105 0208 	add.w	r2, r5, #8
 8002320:	429a      	cmp	r2, r3
 8002322:	d224      	bcs.n	800236e <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x8a>
        frameNumber++;
 8002324:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8002326:	3509      	adds	r5, #9
        readData(currentMovieOffset, 8);
 8002328:	2208      	movs	r2, #8
 800232a:	4620      	mov	r0, r4
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 800232c:	f025 0101 	bic.w	r1, r5, #1
        frameNumber++;
 8002330:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8002332:	61a1      	str	r1, [r4, #24]
        frameNumber++;
 8002334:	6163      	str	r3, [r4, #20]
        readData(currentMovieOffset, 8);
 8002336:	f7ff ffa9 	bl	800228c <_ZN20SoftwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo = getU16(currentMovieOffset);
 800233a:	f8d4 8018 	ldr.w	r8, [r4, #24]
 800233e:	4620      	mov	r0, r4
 8002340:	4641      	mov	r1, r8
 8002342:	f7ff ff94 	bl	800226e <_ZN20SoftwareMJPEGDecoder6getU16Em>
 8002346:	4681      	mov	r9, r0
        chunkSize = getU32(currentMovieOffset + 4);
 8002348:	f108 0104 	add.w	r1, r8, #4
 800234c:	4620      	mov	r0, r4
 800234e:	f7ff ff79 	bl	8002244 <_ZN20SoftwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002352:	45b1      	cmp	r9, r6
        chunkSize = getU32(currentMovieOffset + 4);
 8002354:	4605      	mov	r5, r0
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002356:	d1de      	bne.n	8002316 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x32>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002358:	f108 0102 	add.w	r1, r8, #2
 800235c:	4620      	mov	r0, r4
 800235e:	f7ff ff86 	bl	800226e <_ZN20SoftwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002362:	42b8      	cmp	r0, r7
 8002364:	d1d7      	bne.n	8002316 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x32>
 8002366:	2d00      	cmp	r5, #0
 8002368:	d0d5      	beq.n	8002316 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x32>
            return true;
 800236a:	2001      	movs	r0, #1
 800236c:	e004      	b.n	8002378 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x94>
    frameNumber = 1;
 800236e:	2301      	movs	r3, #1
    return false;
 8002370:	2000      	movs	r0, #0
    frameNumber = 1;
 8002372:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; //start over
 8002374:	6a23      	ldr	r3, [r4, #32]
 8002376:	61a3      	str	r3, [r4, #24]
}
 8002378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800237c:	08028faf 	.word	0x08028faf
 8002380:	08028ff8 	.word	0x08028ff8
 8002384:	08028f0b 	.word	0x08028f0b

08002388 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 8002388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800238c:	4604      	mov	r4, r0
 800238e:	f5ad 7d1f 	sub.w	sp, sp, #636	; 0x27c
 8002392:	468a      	mov	sl, r1
 8002394:	4617      	mov	r7, r2
    readData(currentMovieOffset, 8);
 8002396:	6981      	ldr	r1, [r0, #24]
 8002398:	2208      	movs	r2, #8
{
 800239a:	4698      	mov	r8, r3
    readData(currentMovieOffset, 8);
 800239c:	f7ff ff76 	bl	800228c <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 80023a0:	69a6      	ldr	r6, [r4, #24]
 80023a2:	4620      	mov	r0, r4
 80023a4:	1d31      	adds	r1, r6, #4
 80023a6:	f7ff ff4d 	bl	8002244 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 80023aa:	f106 0108 	add.w	r1, r6, #8
 80023ae:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 80023b0:	4605      	mov	r5, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 80023b2:	4620      	mov	r0, r4
 80023b4:	f7ff ff6a 	bl	800228c <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    assert(lineBuffer && "LineBuffer must be assigned prior to decoding directly to framebuffer");
 80023b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 80023ba:	4606      	mov	r6, r0
    assert(lineBuffer && "LineBuffer must be assigned prior to decoding directly to framebuffer");
 80023bc:	b933      	cbnz	r3, 80023cc <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x44>
 80023be:	4b3c      	ldr	r3, [pc, #240]	; (80024b0 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x128>)
 80023c0:	f240 118d 	movw	r1, #397	; 0x18d
 80023c4:	4a3b      	ldr	r2, [pc, #236]	; (80024b4 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x12c>)
 80023c6:	483c      	ldr	r0, [pc, #240]	; (80024b8 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x130>)
 80023c8:	f025 f81c 	bl	8027404 <__assert_func>
    JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 80023cc:	2200      	movs	r2, #0
    cinfo.err = jpeg_std_error(&jerr);
 80023ce:	a803      	add	r0, sp, #12
    JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 80023d0:	e9cd 3201 	strd	r3, r2, [sp, #4]
    cinfo.err = jpeg_std_error(&jerr);
 80023d4:	f00c fe70 	bl	800f0b8 <jpeg_std_error>
    jpeg_create_decompress(&cinfo);
 80023d8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80023dc:	2150      	movs	r1, #80	; 0x50
    cinfo.err = jpeg_std_error(&jerr);
 80023de:	9024      	str	r0, [sp, #144]	; 0x90
    jpeg_create_decompress(&cinfo);
 80023e0:	a824      	add	r0, sp, #144	; 0x90
 80023e2:	f006 fd7a 	bl	8008eda <jpeg_CreateDecompress>
    jpeg_mem_src(&cinfo, const_cast<uint8_t*>(mjpgdata), length);
 80023e6:	462a      	mov	r2, r5
 80023e8:	4631      	mov	r1, r6
 80023ea:	a824      	add	r0, sp, #144	; 0x90
 80023ec:	f007 fd14 	bl	8009e18 <jpeg_mem_src>
    jpeg_read_header(&cinfo, TRUE);
 80023f0:	2101      	movs	r1, #1
 80023f2:	a824      	add	r0, sp, #144	; 0x90
 80023f4:	f006 fe7a 	bl	80090ec <jpeg_read_header>
    cinfo.dct_method = JDCT_FLOAT;
 80023f8:	2302      	movs	r3, #2
    jpeg_start_decompress(&cinfo);
 80023fa:	a824      	add	r0, sp, #144	; 0x90
    cinfo.dct_method = JDCT_FLOAT;
 80023fc:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
    jpeg_start_decompress(&cinfo);
 8002400:	f006 ff18 	bl	8009234 <jpeg_start_decompress>
    const uint32_t startY = area.y;
 8002404:	f9ba 5002 	ldrsh.w	r5, [sl, #2]
    while (cinfo.output_scanline < startY)
 8002408:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800240a:	42ab      	cmp	r3, r5
 800240c:	d205      	bcs.n	800241a <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x92>
        (void)jpeg_read_scanlines(&cinfo, lines, 1);
 800240e:	2201      	movs	r2, #1
 8002410:	a901      	add	r1, sp, #4
 8002412:	a824      	add	r0, sp, #144	; 0x90
 8002414:	f006 ff57 	bl	80092c6 <jpeg_read_scanlines>
    while (cinfo.output_scanline < startY)
 8002418:	e7f6      	b.n	8002408 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>
    const uint32_t startX = area.x;
 800241a:	f9ba 9000 	ldrsh.w	r9, [sl]
     *
     * @return x coordinate of the right edge (calculated as "x + width").
     */
    FORCE_INLINE_FUNCTION int16_t right() const
    {
        return x + width;
 800241e:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8002422:	f8ba 6004 	ldrh.w	r6, [sl, #4]
 8002426:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    lineptr += framebuffer_width * startY;
 8002428:	fb08 7705 	mla	r7, r8, r5, r7
 800242c:	444e      	add	r6, r9
     *
     * @return y coordinate of the bottom edge (calculated as "y + height").
     */
    FORCE_INLINE_FUNCTION int16_t bottom() const
    {
        return y + height;
 800242e:	f8ba 5002 	ldrh.w	r5, [sl, #2]
            const uint16_t pix = ((RGB_matrix[counter].R & 0xF8) << 8) | ((RGB_matrix[counter].G & 0xFC) << 3) | ((RGB_matrix[counter].B & 0xF8) >> 3);
 8002432:	f8df b088 	ldr.w	fp, [pc, #136]	; 80024bc <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x134>
    const uint32_t endX = MIN((uint32_t)area.right(), cinfo.image_width);
 8002436:	b236      	sxth	r6, r6
 8002438:	429e      	cmp	r6, r3
 800243a:	bf28      	it	cs
 800243c:	461e      	movcs	r6, r3
 800243e:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 8002442:	eb09 0a49 	add.w	sl, r9, r9, lsl #1
 8002446:	441d      	add	r5, r3
 8002448:	9b41      	ldr	r3, [sp, #260]	; 0x104
    const uint32_t endY = MIN((uint32_t)area.bottom(), cinfo.output_height);
 800244a:	b22d      	sxth	r5, r5
 800244c:	429d      	cmp	r5, r3
 800244e:	bf28      	it	cs
 8002450:	461d      	movcs	r5, r3
    while (cinfo.output_scanline < endY)
 8002452:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8002454:	42ab      	cmp	r3, r5
 8002456:	d21f      	bcs.n	8002498 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x110>
        (void)jpeg_read_scanlines(&cinfo, lines, 1);
 8002458:	2201      	movs	r2, #1
 800245a:	a901      	add	r1, sp, #4
 800245c:	a824      	add	r0, sp, #144	; 0x90
 800245e:	f006 ff32 	bl	80092c6 <jpeg_read_scanlines>
        for (uint32_t counter = startX; counter < endX; counter++)
 8002462:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002464:	464a      	mov	r2, r9
 8002466:	4453      	add	r3, sl
 8002468:	42b2      	cmp	r2, r6
 800246a:	f103 0303 	add.w	r3, r3, #3
 800246e:	d211      	bcs.n	8002494 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x10c>
            const uint16_t pix = ((RGB_matrix[counter].R & 0xF8) << 8) | ((RGB_matrix[counter].G & 0xFC) << 3) | ((RGB_matrix[counter].B & 0xF8) >> 3);
 8002470:	f813 0c02 	ldrb.w	r0, [r3, #-2]
 8002474:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8002478:	00c0      	lsls	r0, r0, #3
 800247a:	ea0b 2101 	and.w	r1, fp, r1, lsl #8
 800247e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8002482:	4301      	orrs	r1, r0
 8002484:	f813 0c03 	ldrb.w	r0, [r3, #-3]
 8002488:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
            *(lineptr + counter) = pix;
 800248c:	f827 1012 	strh.w	r1, [r7, r2, lsl #1]
        for (uint32_t counter = startX; counter < endX; counter++)
 8002490:	3201      	adds	r2, #1
 8002492:	e7e9      	b.n	8002468 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xe0>
        lineptr += framebuffer_width; //move to next line
 8002494:	4447      	add	r7, r8
    while (cinfo.output_scanline < endY)
 8002496:	e7dc      	b.n	8002452 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xca>
    jpeg_finish_decompress(&cinfo);
 8002498:	a824      	add	r0, sp, #144	; 0x90
 800249a:	f006 fe49 	bl	8009130 <jpeg_finish_decompress>
    jpeg_destroy_decompress(&cinfo);
 800249e:	a824      	add	r0, sp, #144	; 0x90
 80024a0:	f006 fd68 	bl	8008f74 <jpeg_destroy_decompress>
}
 80024a4:	2001      	movs	r0, #1
 80024a6:	f50d 7d1f 	add.w	sp, sp, #636	; 0x27c
 80024aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024ae:	bf00      	nop
 80024b0:	0802902b 	.word	0x0802902b
 80024b4:	08029081 	.word	0x08029081
 80024b8:	08028f0b 	.word	0x08028f0b
 80024bc:	fffff800 	.word	0xfffff800

080024c0 <_ZN20SoftwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 80024c0:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 80024c2:	6803      	ldr	r3, [r0, #0]
 80024c4:	bf38      	it	cc
 80024c6:	2101      	movcc	r1, #1
 80024c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80024ca:	b570      	push	{r4, r5, r6, lr}
 80024cc:	460d      	mov	r5, r1
 80024ce:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 80024d0:	4798      	blx	r3
 80024d2:	42a8      	cmp	r0, r5
 80024d4:	d204      	bcs.n	80024e0 <_ZN20SoftwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 80024d6:	6823      	ldr	r3, [r4, #0]
 80024d8:	4620      	mov	r0, r4
 80024da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024dc:	4798      	blx	r3
 80024de:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 80024e0:	1e6b      	subs	r3, r5, #1
 80024e2:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 80024e4:	2210      	movs	r2, #16
 80024e6:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 80024e8:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 80024ec:	f106 0108 	add.w	r1, r6, #8
 80024f0:	f7ff fecc 	bl	800228c <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 80024f4:	f106 0110 	add.w	r1, r6, #16
 80024f8:	4620      	mov	r0, r4
 80024fa:	f7ff fea3 	bl	8002244 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 80024fe:	6a23      	ldr	r3, [r4, #32]
 8002500:	3b04      	subs	r3, #4
 8002502:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 8002504:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 8002508:	bd70      	pop	{r4, r5, r6, pc}
	...

0800250c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>:
{
 800250c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    currentMovieOffset = 0;
 8002510:	2100      	movs	r1, #0
{
 8002512:	4604      	mov	r4, r0
    readData(0, 72);
 8002514:	2248      	movs	r2, #72	; 0x48
    currentMovieOffset = 0;
 8002516:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 8002518:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
    readData(0, 72);
 800251c:	f7ff feb6 	bl	800228c <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 8002520:	69a7      	ldr	r7, [r4, #24]
 8002522:	2304      	movs	r3, #4
 8002524:	4a62      	ldr	r2, [pc, #392]	; (80026b0 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a4>)
 8002526:	4639      	mov	r1, r7
 8002528:	4620      	mov	r0, r4
 800252a:	f7ff fe7b 	bl	8002224 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 800252e:	b140      	cbz	r0, 8002542 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x36>
        lastError = AVI_ERROR_NOT_RIFF;
 8002530:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 8002532:	4a60      	ldr	r2, [pc, #384]	; (80026b4 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 8002534:	21e0      	movs	r1, #224	; 0xe0
        lastError = AVI_ERROR_NOT_RIFF;
 8002536:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        assert(!"RIFF header not found");
 800253a:	4b5f      	ldr	r3, [pc, #380]	; (80026b8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
        assert(!"AVI header not found");
 800253c:	485f      	ldr	r0, [pc, #380]	; (80026bc <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
 800253e:	f024 ff61 	bl	8027404 <__assert_func>
    currentMovieOffset += 8;
 8002542:	f107 0108 	add.w	r1, r7, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 8002546:	2304      	movs	r3, #4
 8002548:	4a5d      	ldr	r2, [pc, #372]	; (80026c0 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 800254a:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 800254c:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 800254e:	f7ff fe69 	bl	8002224 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 8002552:	b130      	cbz	r0, 8002562 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x56>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8002554:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 8002556:	4a57      	ldr	r2, [pc, #348]	; (80026b4 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 8002558:	21e8      	movs	r1, #232	; 0xe8
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 800255a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        assert(!"AVI header not found");
 800255e:	4b59      	ldr	r3, [pc, #356]	; (80026c4 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 8002560:	e7ec      	b.n	800253c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    currentMovieOffset += 4;
 8002562:	f107 010c 	add.w	r1, r7, #12
    if (compare(currentMovieOffset, "LIST", 4))
 8002566:	2304      	movs	r3, #4
 8002568:	4a57      	ldr	r2, [pc, #348]	; (80026c8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 800256a:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 800256c:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 800256e:	f7ff fe59 	bl	8002224 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 8002572:	4606      	mov	r6, r0
 8002574:	b130      	cbz	r0, 8002584 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x78>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8002576:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 8002578:	4a4e      	ldr	r2, [pc, #312]	; (80026b4 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 800257a:	21ef      	movs	r1, #239	; 0xef
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 800257c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        assert(!"AVI LIST not found");
 8002580:	4b52      	ldr	r3, [pc, #328]	; (80026cc <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 8002582:	e7db      	b.n	800253c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 8002584:	f107 0110 	add.w	r1, r7, #16
 8002588:	4620      	mov	r0, r4
 800258a:	f7ff fe5b 	bl	8002244 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 800258e:	4605      	mov	r5, r0
 8002590:	b918      	cbnz	r0, 800259a <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x8e>
 8002592:	4b4f      	ldr	r3, [pc, #316]	; (80026d0 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 8002594:	21f5      	movs	r1, #245	; 0xf5
 8002596:	4a47      	ldr	r2, [pc, #284]	; (80026b4 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 8002598:	e7d0      	b.n	800253c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    uint32_t offset = currentMovieOffset + 8;
 800259a:	f107 0814 	add.w	r8, r7, #20
    if (compare(offset, "hdrl", 4))
 800259e:	2304      	movs	r3, #4
 80025a0:	4a4c      	ldr	r2, [pc, #304]	; (80026d4 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 80025a2:	4620      	mov	r0, r4
 80025a4:	4641      	mov	r1, r8
 80025a6:	f7ff fe3d 	bl	8002224 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 80025aa:	2800      	cmp	r0, #0
 80025ac:	d04b      	beq.n	8002646 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x13a>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 80025ae:	2306      	movs	r3, #6
 80025b0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    if (compare(offset, "avih", 4))
 80025b4:	2304      	movs	r3, #4
 80025b6:	4a48      	ldr	r2, [pc, #288]	; (80026d8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 80025b8:	f107 0118 	add.w	r1, r7, #24
 80025bc:	4620      	mov	r0, r4
 80025be:	f7ff fe31 	bl	8002224 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 80025c2:	2800      	cmp	r0, #0
 80025c4:	d041      	beq.n	800264a <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 80025c6:	2307      	movs	r3, #7
 80025c8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 80025cc:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80025ce:	4f43      	ldr	r7, [pc, #268]	; (80026dc <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
    readData(listOffset, 12);
 80025d0:	220c      	movs	r2, #12
 80025d2:	4620      	mov	r0, r4
 80025d4:	4629      	mov	r1, r5
 80025d6:	f7ff fe59 	bl	800228c <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80025da:	f105 0608 	add.w	r6, r5, #8
 80025de:	2304      	movs	r3, #4
 80025e0:	463a      	mov	r2, r7
 80025e2:	4620      	mov	r0, r4
 80025e4:	4631      	mov	r1, r6
 80025e6:	f7ff fe1d 	bl	8002224 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 80025ea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80025ee:	2800      	cmp	r0, #0
 80025f0:	d04a      	beq.n	8002688 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x17c>
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d14a      	bne.n	800268c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x180>
 80025f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80025f8:	1d29      	adds	r1, r5, #4
 80025fa:	42ab      	cmp	r3, r5
 80025fc:	d84a      	bhi.n	8002694 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x188>
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 80025fe:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002602:	1d29      	adds	r1, r5, #4
 8002604:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 8002606:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002608:	9101      	str	r1, [sp, #4]
 800260a:	f7ff fe1b 	bl	8002244 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 800260e:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002610:	9901      	ldr	r1, [sp, #4]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002612:	6260      	str	r0, [r4, #36]	; 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002614:	4620      	mov	r0, r4
 8002616:	f7ff fe15 	bl	8002244 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 800261a:	4406      	add	r6, r0
    readData(listOffset, 4);
 800261c:	2204      	movs	r2, #4
 800261e:	4620      	mov	r0, r4
 8002620:	4631      	mov	r1, r6
 8002622:	f7ff fe33 	bl	800228c <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 8002626:	2304      	movs	r3, #4
 8002628:	4a2d      	ldr	r2, [pc, #180]	; (80026e0 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
 800262a:	4631      	mov	r1, r6
 800262c:	4620      	mov	r0, r4
 800262e:	f7ff fdf9 	bl	8002224 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 8002632:	2800      	cmp	r0, #0
 8002634:	d139      	bne.n	80026aa <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x19e>
    frameNumber = 1; //next frame number is 1
 8002636:	2301      	movs	r3, #1
        indexOffset = listOffset;
 8002638:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; //next frame number is 1
 800263a:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 800263c:	69a3      	ldr	r3, [r4, #24]
 800263e:	6223      	str	r3, [r4, #32]
}
 8002640:	b002      	add	sp, #8
 8002642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 8002646:	2601      	movs	r6, #1
 8002648:	e7b4      	b.n	80025b4 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xa8>
    if (foundFrame)
 800264a:	2e00      	cmp	r6, #0
 800264c:	d0be      	beq.n	80025cc <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xc0>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 800264e:	f107 0120 	add.w	r1, r7, #32
 8002652:	4620      	mov	r0, r4
 8002654:	f7ff fdf6 	bl	8002244 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 8002658:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 800265c:	f107 0130 	add.w	r1, r7, #48	; 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8002660:	fbb0 f0f3 	udiv	r0, r0, r3
 8002664:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 8002666:	4620      	mov	r0, r4
 8002668:	f7ff fdec 	bl	8002244 <_ZN20SoftwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 800266c:	f107 0140 	add.w	r1, r7, #64	; 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 8002670:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 8002672:	4620      	mov	r0, r4
 8002674:	f7ff fde6 	bl	8002244 <_ZN20SoftwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 8002678:	f107 0144 	add.w	r1, r7, #68	; 0x44
        videoInfo.frame_width = getU32(offset + 32);
 800267c:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 800267e:	4620      	mov	r0, r4
 8002680:	f7ff fde0 	bl	8002244 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 8002684:	6120      	str	r0, [r4, #16]
 8002686:	e7a1      	b.n	80025cc <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xc0>
    if (lastError != AVI_NO_ERROR)
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0b8      	beq.n	80025fe <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xf2>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 800268c:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 800268e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        return;
 8002692:	e7d5      	b.n	8002640 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x134>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002694:	4620      	mov	r0, r4
 8002696:	f7ff fdd5 	bl	8002244 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 800269a:	3008      	adds	r0, #8
        readData(listOffset, 12);
 800269c:	220c      	movs	r2, #12
        listOffset += listSize;
 800269e:	4405      	add	r5, r0
        readData(listOffset, 12);
 80026a0:	4620      	mov	r0, r4
 80026a2:	4629      	mov	r1, r5
 80026a4:	f7ff fdf2 	bl	800228c <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80026a8:	e797      	b.n	80025da <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xce>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 80026aa:	230b      	movs	r3, #11
 80026ac:	e7ef      	b.n	800268e <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x182>
 80026ae:	bf00      	nop
 80026b0:	080290db 	.word	0x080290db
 80026b4:	080290f9 	.word	0x080290f9
 80026b8:	080290e0 	.word	0x080290e0
 80026bc:	08028f0b 	.word	0x08028f0b
 80026c0:	08029126 	.word	0x08029126
 80026c4:	0802912b 	.word	0x0802912b
 80026c8:	08029143 	.word	0x08029143
 80026cc:	08029148 	.word	0x08029148
 80026d0:	0802915e 	.word	0x0802915e
 80026d4:	0802916a 	.word	0x0802916a
 80026d8:	0802916f 	.word	0x0802916f
 80026dc:	08029174 	.word	0x08029174
 80026e0:	08029179 	.word	0x08029179

080026e4 <_ZN20SoftwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 80026e4:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
    reader = 0; //not using reader
 80026e8:	2200      	movs	r2, #0
 80026ea:	6302      	str	r2, [r0, #48]	; 0x30
    readVideoHeader();
 80026ec:	f7ff bf0e 	b.w	800250c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>

080026f0 <_ZN20SoftwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 80026f0:	b510      	push	{r4, lr}
    movieData = 0;
 80026f2:	2300      	movs	r3, #0
{
 80026f4:	4604      	mov	r4, r0
 80026f6:	4608      	mov	r0, r1
    movieData = 0;
 80026f8:	62e3      	str	r3, [r4, #44]	; 0x2c
    movieLength = reader.getDataLength();
 80026fa:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 80026fc:	6321      	str	r1, [r4, #48]	; 0x30
    movieLength = reader.getDataLength();
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	4798      	blx	r3
 8002702:	62a0      	str	r0, [r4, #40]	; 0x28
    readVideoHeader();
 8002704:	4620      	mov	r0, r4
}
 8002706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 800270a:	f7ff beff 	b.w	800250c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>

0800270e <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 800270e:	b470      	push	{r4, r5, r6}
 8002710:	f8bd 500c 	ldrh.w	r5, [sp, #12]
 8002714:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    if (length == 0)
 8002718:	b12a      	cbz	r2, 8002726 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x18>
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 800271a:	b123      	cbz	r3, 8002726 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x18>
 800271c:	e9cd 5603 	strd	r5, r6, [sp, #12]
}
 8002720:	bc70      	pop	{r4, r5, r6}
 8002722:	f7ff bd03 	b.w	800212c <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>
 8002726:	bc70      	pop	{r4, r5, r6}
 8002728:	4770      	bx	lr
	...

0800272c <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 800272c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002730:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 8002732:	6943      	ldr	r3, [r0, #20]
{
 8002734:	4604      	mov	r4, r0
 8002736:	460f      	mov	r7, r1
 8002738:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 800273a:	b92b      	cbnz	r3, 8002748 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x1c>
 800273c:	4b2a      	ldr	r3, [pc, #168]	; (80027e8 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 800273e:	2165      	movs	r1, #101	; 0x65
 8002740:	4a2a      	ldr	r2, [pc, #168]	; (80027ec <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 8002742:	482b      	ldr	r0, [pc, #172]	; (80027f0 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xc4>)
 8002744:	f024 fe5e 	bl	8027404 <__assert_func>
    readData(currentMovieOffset, 8);
 8002748:	2208      	movs	r2, #8
 800274a:	6981      	ldr	r1, [r0, #24]
 800274c:	f7ff fd9e 	bl	800228c <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo = getU16(currentMovieOffset);
 8002750:	69a6      	ldr	r6, [r4, #24]
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002752:	4620      	mov	r0, r4
 8002754:	f106 0a08 	add.w	sl, r6, #8
 8002758:	1d31      	adds	r1, r6, #4
 800275a:	f7ff fd73 	bl	8002244 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 800275e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002760:	eb00 020a 	add.w	r2, r0, sl
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002764:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002766:	429a      	cmp	r2, r3
 8002768:	d231      	bcs.n	80027ce <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xa2>
    uint32_t streamNo = getU16(currentMovieOffset);
 800276a:	4631      	mov	r1, r6
 800276c:	4620      	mov	r0, r4
 800276e:	f7ff fd7e 	bl	800226e <_ZN20SoftwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002772:	f243 0330 	movw	r3, #12336	; 0x3030
 8002776:	4298      	cmp	r0, r3
 8002778:	d11d      	bne.n	80027b6 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 800277a:	1cb1      	adds	r1, r6, #2
 800277c:	4620      	mov	r0, r4
 800277e:	f7ff fd76 	bl	800226e <_ZN20SoftwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002782:	f246 3364 	movw	r3, #25444	; 0x6364
 8002786:	4298      	cmp	r0, r3
 8002788:	d115      	bne.n	80027b6 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 800278a:	b1a5      	cbz	r5, 80027b6 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 800278c:	462a      	mov	r2, r5
 800278e:	4651      	mov	r1, sl
 8002790:	4620      	mov	r0, r4
            currentMovieOffset += 8;
 8002792:	f8c4 a018 	str.w	sl, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002796:	f7ff fd79 	bl	800228c <_ZN20SoftwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 800279a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 800279c:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 800279e:	462a      	mov	r2, r5
 80027a0:	4620      	mov	r0, r4
 80027a2:	f8cd 8000 	str.w	r8, [sp]
 80027a6:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80027aa:	463b      	mov	r3, r7
 80027ac:	f7ff ffaf 	bl	800270e <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 80027b0:	6963      	ldr	r3, [r4, #20]
 80027b2:	3301      	adds	r3, #1
 80027b4:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 80027b6:	69a3      	ldr	r3, [r4, #24]
 80027b8:	442b      	add	r3, r5
        if (chunkSize == 0) // Empty frame - Skip
 80027ba:	b18d      	cbz	r5, 80027e0 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
            currentMovieOffset += 8;
 80027bc:	61a3      	str	r3, [r4, #24]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80027be:	69a3      	ldr	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 80027c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80027c2:	3301      	adds	r3, #1
 80027c4:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 80027c8:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80027ca:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 80027cc:	d10a      	bne.n	80027e4 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>
        frameNumber = 1;
 80027ce:	2001      	movs	r0, #1
        currentMovieOffset = firstFrameOffset; //start over
 80027d0:	6a23      	ldr	r3, [r4, #32]
        frameNumber = 1;
 80027d2:	6160      	str	r0, [r4, #20]
        currentMovieOffset = firstFrameOffset; //start over
 80027d4:	61a3      	str	r3, [r4, #24]
}
 80027d6:	f080 0001 	eor.w	r0, r0, #1
 80027da:	b004      	add	sp, #16
 80027dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            currentMovieOffset += 8;
 80027e0:	3308      	adds	r3, #8
 80027e2:	e7eb      	b.n	80027bc <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x90>
        isCurrentFrameLast = false;
 80027e4:	2000      	movs	r0, #0
 80027e6:	e7f6      	b.n	80027d6 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 80027e8:	08028faf 	.word	0x08028faf
 80027ec:	0802917e 	.word	0x0802917e
 80027f0:	08028f0b 	.word	0x08028f0b

080027f4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 80027f4:	2001      	movs	r0, #1
 80027f6:	4770      	bx	lr

080027f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 80027f8:	200c      	movs	r0, #12
 80027fa:	4770      	bx	lr

080027fc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 80027fc:	230c      	movs	r3, #12
 80027fe:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002802:	3008      	adds	r0, #8
 8002804:	4770      	bx	lr

08002806 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8002806:	230c      	movs	r3, #12
 8002808:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800280c:	3008      	adds	r0, #8
 800280e:	4770      	bx	lr

08002810 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8HomeViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002810:	2001      	movs	r0, #1
 8002812:	4770      	bx	lr

08002814 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8HomeViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002814:	20dc      	movs	r0, #220	; 0xdc
 8002816:	4770      	bx	lr

08002818 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8HomeViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002818:	23dc      	movs	r3, #220	; 0xdc
 800281a:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800281e:	3008      	adds	r0, #8
 8002820:	4770      	bx	lr

08002822 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8HomeViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002822:	23dc      	movs	r3, #220	; 0xdc
 8002824:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002828:	3008      	adds	r0, #8
 800282a:	4770      	bx	lr

0800282c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13HomePresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 800282c:	2001      	movs	r0, #1
 800282e:	4770      	bx	lr

08002830 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13HomePresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002830:	2010      	movs	r0, #16
 8002832:	4770      	bx	lr

08002834 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13HomePresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002834:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002838:	3008      	adds	r0, #8
 800283a:	4770      	bx	lr

0800283c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13HomePresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800283c:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002840:	3008      	adds	r0, #8
 8002842:	4770      	bx	lr

08002844 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoHomeScreenNoTransition();
 8002844:	4608      	mov	r0, r1
 8002846:	f000 bd0f 	b.w	8003268 <_ZN23FrontendApplicationBase26gotoHomeScreenNoTransitionEv>
	...

0800284c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 800284c:	4b03      	ldr	r3, [pc, #12]	; (800285c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800284e:	b510      	push	{r4, lr}
 8002850:	4604      	mov	r4, r0
 8002852:	6003      	str	r3, [r0, #0]
 8002854:	f013 fd22 	bl	801629c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002858:	4620      	mov	r0, r4
 800285a:	bd10      	pop	{r4, pc}
 800285c:	0802928c 	.word	0x0802928c

08002860 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002860:	b510      	push	{r4, lr}
 8002862:	4604      	mov	r4, r0
 8002864:	f7ff fff2 	bl	800284c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002868:	2114      	movs	r1, #20
 800286a:	4620      	mov	r0, r4
 800286c:	f024 fd9c 	bl	80273a8 <_ZdlPvj>
 8002870:	4620      	mov	r0, r4
 8002872:	bd10      	pop	{r4, pc}

08002874 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8HomeViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002874:	4b03      	ldr	r3, [pc, #12]	; (8002884 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8HomeViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002876:	b510      	push	{r4, lr}
 8002878:	4604      	mov	r4, r0
 800287a:	6003      	str	r3, [r0, #0]
 800287c:	f013 fd0e 	bl	801629c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002880:	4620      	mov	r0, r4
 8002882:	bd10      	pop	{r4, pc}
 8002884:	08029258 	.word	0x08029258

08002888 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8HomeViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002888:	b510      	push	{r4, lr}
 800288a:	4604      	mov	r4, r0
 800288c:	f7ff fff2 	bl	8002874 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8HomeViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002890:	21e4      	movs	r1, #228	; 0xe4
 8002892:	4620      	mov	r0, r4
 8002894:	f024 fd88 	bl	80273a8 <_ZdlPvj>
 8002898:	4620      	mov	r0, r4
 800289a:	bd10      	pop	{r4, pc}

0800289c <_ZN8touchgfx9PartitionINS_4meta8TypeListI13HomePresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800289c:	4b03      	ldr	r3, [pc, #12]	; (80028ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI13HomePresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800289e:	b510      	push	{r4, lr}
 80028a0:	4604      	mov	r4, r0
 80028a2:	6003      	str	r3, [r0, #0]
 80028a4:	f013 fcfa 	bl	801629c <_ZN8touchgfx17AbstractPartitionD1Ev>
 80028a8:	4620      	mov	r0, r4
 80028aa:	bd10      	pop	{r4, pc}
 80028ac:	08029224 	.word	0x08029224

080028b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13HomePresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80028b0:	b510      	push	{r4, lr}
 80028b2:	4604      	mov	r4, r0
 80028b4:	f7ff fff2 	bl	800289c <_ZN8touchgfx9PartitionINS_4meta8TypeListI13HomePresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80028b8:	2118      	movs	r1, #24
 80028ba:	4620      	mov	r0, r4
 80028bc:	f024 fd74 	bl	80273a8 <_ZdlPvj>
 80028c0:	4620      	mov	r0, r4
 80028c2:	bd10      	pop	{r4, pc}

080028c4 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 80028c4:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <_ZN12FrontendHeapD1Ev+0x24>)
 80028c6:	b510      	push	{r4, lr}
 80028c8:	4604      	mov	r4, r0
 80028ca:	6003      	str	r3, [r0, #0]
 80028cc:	f500 7088 	add.w	r0, r0, #272	; 0x110
 80028d0:	f7ff ffbc 	bl	800284c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80028d4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80028d8:	f7ff ffcc 	bl	8002874 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8HomeViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80028dc:	f104 0014 	add.w	r0, r4, #20
 80028e0:	f7ff ffdc 	bl	800289c <_ZN8touchgfx9PartitionINS_4meta8TypeListI13HomePresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80028e4:	4620      	mov	r0, r4
 80028e6:	bd10      	pop	{r4, pc}
 80028e8:	080292c0 	.word	0x080292c0

080028ec <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80028ec:	b508      	push	{r3, lr}
 80028ee:	4802      	ldr	r0, [pc, #8]	; (80028f8 <__tcf_0+0xc>)
 80028f0:	f7ff ffe8 	bl	80028c4 <_ZN12FrontendHeapD1Ev>
 80028f4:	bd08      	pop	{r3, pc}
 80028f6:	bf00      	nop
 80028f8:	20000174 	.word	0x20000174

080028fc <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 80028fc:	b510      	push	{r4, lr}
 80028fe:	4604      	mov	r4, r0
 8002900:	f7ff ffe0 	bl	80028c4 <_ZN12FrontendHeapD1Ev>
 8002904:	f44f 7120 	mov.w	r1, #640	; 0x280
 8002908:	4620      	mov	r0, r4
 800290a:	f024 fd4d 	bl	80273a8 <_ZdlPvj>
 800290e:	4620      	mov	r0, r4
 8002910:	bd10      	pop	{r4, pc}
	...

08002914 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8002914:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8002918:	f000 fbf4 	bl	8003104 <_ZN14BitmapDatabase11getInstanceEv>
 800291c:	2400      	movs	r4, #0
 800291e:	4605      	mov	r5, r0
 8002920:	f000 fbf4 	bl	800310c <_ZN14BitmapDatabase15getInstanceSizeEv>
 8002924:	4623      	mov	r3, r4
 8002926:	4601      	mov	r1, r0
 8002928:	4622      	mov	r2, r4
 800292a:	4628      	mov	r0, r5
 800292c:	9400      	str	r4, [sp, #0]
 800292e:	f018 fcbb 	bl	801b2a8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8002932:	4b25      	ldr	r3, [pc, #148]	; (80029c8 <touchgfx_init+0xb4>)
 8002934:	4a25      	ldr	r2, [pc, #148]	; (80029cc <touchgfx_init+0xb8>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8002936:	4620      	mov	r0, r4
        static FrontendHeap instance;
 8002938:	4d25      	ldr	r5, [pc, #148]	; (80029d0 <touchgfx_init+0xbc>)
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	f000 ffde 	bl	80038fc <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8002940:	4824      	ldr	r0, [pc, #144]	; (80029d4 <touchgfx_init+0xc0>)
 8002942:	f018 fbf3 	bl	801b12c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8002946:	782b      	ldrb	r3, [r5, #0]
 8002948:	f3bf 8f5b 	dmb	ish
 800294c:	07db      	lsls	r3, r3, #31
 800294e:	d435      	bmi.n	80029bc <touchgfx_init+0xa8>
 8002950:	4628      	mov	r0, r5
 8002952:	f024 fd2b 	bl	80273ac <__cxa_guard_acquire>
 8002956:	b388      	cbz	r0, 80029bc <touchgfx_init+0xa8>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8002958:	4c1f      	ldr	r4, [pc, #124]	; (80029d8 <touchgfx_init+0xc4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 800295a:	4b20      	ldr	r3, [pc, #128]	; (80029dc <touchgfx_init+0xc8>)
 800295c:	f504 7694 	add.w	r6, r4, #296	; 0x128
 8002960:	f104 0014 	add.w	r0, r4, #20
 8002964:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8002968:	f504 7788 	add.w	r7, r4, #272	; 0x110
 800296c:	6023      	str	r3, [r4, #0]
 800296e:	6060      	str	r0, [r4, #4]
 8002970:	f8c4 8008 	str.w	r8, [r4, #8]
 8002974:	60e7      	str	r7, [r4, #12]
 8002976:	6126      	str	r6, [r4, #16]
 8002978:	f013 fc92 	bl	80162a0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800297c:	4b18      	ldr	r3, [pc, #96]	; (80029e0 <touchgfx_init+0xcc>)
 800297e:	4640      	mov	r0, r8
 8002980:	6163      	str	r3, [r4, #20]
 8002982:	f013 fc8d 	bl	80162a0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002986:	4b17      	ldr	r3, [pc, #92]	; (80029e4 <touchgfx_init+0xd0>)
 8002988:	4638      	mov	r0, r7
 800298a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800298c:	f013 fc88 	bl	80162a0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002990:	4b15      	ldr	r3, [pc, #84]	; (80029e8 <touchgfx_init+0xd4>)
 8002992:	f504 7092 	add.w	r0, r4, #292	; 0x124
 8002996:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800299a:	f001 f84b 	bl	8003a34 <_ZN5ModelC1Ev>
 800299e:	4622      	mov	r2, r4
 80029a0:	f504 7192 	add.w	r1, r4, #292	; 0x124
 80029a4:	4630      	mov	r0, r6
 80029a6:	f001 f809 	bl	80039bc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 80029aa:	4630      	mov	r0, r6
 80029ac:	f000 fc5c 	bl	8003268 <_ZN23FrontendApplicationBase26gotoHomeScreenNoTransitionEv>
        static FrontendHeap instance;
 80029b0:	4628      	mov	r0, r5
 80029b2:	f024 fd07 	bl	80273c4 <__cxa_guard_release>
 80029b6:	480d      	ldr	r0, [pc, #52]	; (80029ec <touchgfx_init+0xd8>)
 80029b8:	f024 fd42 	bl	8027440 <atexit>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80029bc:	480c      	ldr	r0, [pc, #48]	; (80029f0 <touchgfx_init+0xdc>)
}
 80029be:	b002      	add	sp, #8
 80029c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 80029c4:	f7ff b898 	b.w	8001af8 <_ZN11TouchGFXHAL10initializeEv>
 80029c8:	20014c40 	.word	0x20014c40
 80029cc:	20001094 	.word	0x20001094
 80029d0:	20000170 	.word	0x20000170
 80029d4:	20000008 	.word	0x20000008
 80029d8:	20000174 	.word	0x20000174
 80029dc:	080292c0 	.word	0x080292c0
 80029e0:	08029224 	.word	0x08029224
 80029e4:	08029258 	.word	0x08029258
 80029e8:	0802928c 	.word	0x0802928c
 80029ec:	080028ed 	.word	0x080028ed
 80029f0:	20001018 	.word	0x20001018

080029f4 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80029f4:	4801      	ldr	r0, [pc, #4]	; (80029fc <touchgfx_taskEntry+0x8>)
 80029f6:	f013 bf86 	b.w	8016906 <_ZN8touchgfx3HAL9taskEntryEv>
 80029fa:	bf00      	nop
 80029fc:	20001018 	.word	0x20001018

08002a00 <_GLOBAL__sub_I_touchgfx_init>:
}
 8002a00:	b570      	push	{r4, r5, r6, lr}
static STM32DMA dma;
 8002a02:	4e24      	ldr	r6, [pc, #144]	; (8002a94 <_GLOBAL__sub_I_touchgfx_init+0x94>)
{
public:

    STM32TouchController() {}
 8002a04:	4b24      	ldr	r3, [pc, #144]	; (8002a98 <_GLOBAL__sub_I_touchgfx_init+0x98>)
 8002a06:	4c25      	ldr	r4, [pc, #148]	; (8002a9c <_GLOBAL__sub_I_touchgfx_init+0x9c>)
 8002a08:	4630      	mov	r0, r6
static LCD16bpp display;
 8002a0a:	4d25      	ldr	r5, [pc, #148]	; (8002aa0 <_GLOBAL__sub_I_touchgfx_init+0xa0>)
 8002a0c:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
 8002a0e:	f7ff fb45 	bl	800209c <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8002a12:	4628      	mov	r0, r5
 8002a14:	f01b fd1a 	bl	801e44c <_ZN8touchgfx8LCD16bppC1Ev>
          lastRenderMethod(HARDWARE)
 8002a18:	4b22      	ldr	r3, [pc, #136]	; (8002aa4 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f44f 7180 	mov.w	r1, #256	; 0x100
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002a20:	4821      	ldr	r0, [pc, #132]	; (8002aa8 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8002a22:	851a      	strh	r2, [r3, #40]	; 0x28
 8002a24:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8002a28:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a2a:	861a      	strh	r2, [r3, #48]	; 0x30
          lastRenderMethod(HARDWARE)
 8002a2c:	661a      	str	r2, [r3, #96]	; 0x60
 8002a2e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8002a32:	671a      	str	r2, [r3, #112]	; 0x70
 8002a34:	60dc      	str	r4, [r3, #12]
 8002a36:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48
 8002a3a:	491c      	ldr	r1, [pc, #112]	; (8002aac <_GLOBAL__sub_I_touchgfx_init+0xac>)
 8002a3c:	e9c3 1219 	strd	r1, r2, [r3, #100]	; 0x64
 8002a40:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8002a44:	6759      	str	r1, [r3, #116]	; 0x74
 8002a46:	2101      	movs	r1, #1
 8002a48:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
        instance = this;
 8002a4c:	4918      	ldr	r1, [pc, #96]	; (8002ab0 <_GLOBAL__sub_I_touchgfx_init+0xb0>)
 8002a4e:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002a50:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002a54:	8001      	strh	r1, [r0, #0]
 8002a56:	4817      	ldr	r0, [pc, #92]	; (8002ab4 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
          lastRenderMethod(HARDWARE)
 8002a58:	e9c3 2204 	strd	r2, r2, [r3, #16]
              inProgress(false)
 8002a5c:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8002a60:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8002a64:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
 8002a68:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
        : x(0), y(0), width(0), height(0)
 8002a6c:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
 8002a70:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
 8002a74:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002a78:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002a7a:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002a7e:	480e      	ldr	r0, [pc, #56]	; (8002ab8 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002a80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002a84:	8001      	strh	r1, [r0, #0]
 8002a86:	480d      	ldr	r0, [pc, #52]	; (8002abc <_GLOBAL__sub_I_touchgfx_init+0xbc>)
 8002a88:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 8002a8a:	490d      	ldr	r1, [pc, #52]	; (8002ac0 <_GLOBAL__sub_I_touchgfx_init+0xc0>)
 8002a8c:	700a      	strb	r2, [r1, #0]
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8002a8e:	4a0d      	ldr	r2, [pc, #52]	; (8002ac4 <_GLOBAL__sub_I_touchgfx_init+0xc4>)
 8002a90:	601a      	str	r2, [r3, #0]
}
 8002a92:	bd70      	pop	{r4, r5, r6, pc}
 8002a94:	200003f8 	.word	0x200003f8
 8002a98:	080289c0 	.word	0x080289c0
 8002a9c:	200003f4 	.word	0x200003f4
 8002aa0:	20001098 	.word	0x20001098
 8002aa4:	20001018 	.word	0x20001018
 8002aa8:	20014bd8 	.word	0x20014bd8
 8002aac:	01000001 	.word	0x01000001
 8002ab0:	20014be4 	.word	0x20014be4
 8002ab4:	20014bde 	.word	0x20014bde
 8002ab8:	20014bda 	.word	0x20014bda
 8002abc:	20014be0 	.word	0x20014be0
 8002ac0:	20014bdc 	.word	0x20014bdc
 8002ac4:	08028b4c 	.word	0x08028b4c

08002ac8 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8002ac8:	4801      	ldr	r0, [pc, #4]	; (8002ad0 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8002aca:	f7ff bacb 	b.w	8002064 <_ZN8STM32DMAD1Ev>
 8002ace:	bf00      	nop
 8002ad0:	200003f8 	.word	0x200003f8

08002ad4 <SCB_CleanInvalidateDCache>:
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002ad4:	4a10      	ldr	r2, [pc, #64]	; (8002b18 <SCB_CleanInvalidateDCache+0x44>)
 8002ad6:	2300      	movs	r3, #0
{
 8002ad8:	b570      	push	{r4, r5, r6, lr}
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002ada:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002ade:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002ae2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002ae6:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002aea:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002aee:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8002af2:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002af4:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002af8:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002afa:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8002afe:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002b00:	f8c2 5274 	str.w	r5, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 8002b04:	d2f9      	bcs.n	8002afa <SCB_CleanInvalidateDCache+0x26>
    } while(sets-- != 0U);
 8002b06:	3b20      	subs	r3, #32
 8002b08:	f113 0f20 	cmn.w	r3, #32
 8002b0c:	d1f2      	bne.n	8002af4 <SCB_CleanInvalidateDCache+0x20>
 8002b0e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002b12:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8002b16:	bd70      	pop	{r4, r5, r6, pc}
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b1c:	4b03      	ldr	r3, [pc, #12]	; (8002b2c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 8002b1e:	2290      	movs	r2, #144	; 0x90
 8002b20:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 8002b24:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	e000e100 	.word	0xe000e100

08002b30 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002b30:	4a09      	ldr	r2, [pc, #36]	; (8002b58 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 8002b32:	490a      	ldr	r1, [pc, #40]	; (8002b5c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 8002b34:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002b36:	480a      	ldr	r0, [pc, #40]	; (8002b60 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002b38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002b42:	6911      	ldr	r1, [r2, #16]
 8002b44:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8002b48:	3901      	subs	r1, #1
 8002b4a:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8002b4c:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8002b4e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002b50:	f043 0301 	orr.w	r3, r3, #1
 8002b54:	6353      	str	r3, [r2, #52]	; 0x34
}
 8002b56:	4770      	bx	lr
 8002b58:	40016800 	.word	0x40016800
 8002b5c:	20001112 	.word	0x20001112
 8002b60:	20001110 	.word	0x20001110

08002b64 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8002b64:	4b01      	ldr	r3, [pc, #4]	; (8002b6c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 8002b66:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40016884 	.word	0x40016884

08002b70 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002b70:	4b02      	ldr	r3, [pc, #8]	; (8002b7c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002b72:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002b74:	6299      	str	r1, [r3, #40]	; 0x28
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002b76:	f843 2c60 	str.w	r2, [r3, #-96]
}
 8002b7a:	4770      	bx	lr
 8002b7c:	40016884 	.word	0x40016884

08002b80 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002b80:	4b03      	ldr	r3, [pc, #12]	; (8002b90 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x10>)
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	03db      	lsls	r3, r3, #15
 8002b86:	d501      	bpl.n	8002b8c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xc>
    {
        SCB_CleanInvalidateDCache();
 8002b88:	f7ff bfa4 	b.w	8002ad4 <SCB_CleanInvalidateDCache>
    }
}
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	e000ed00 	.word	0xe000ed00

08002b94 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>:
#define SEM_TYPE osSemaphoreId_t
#define SEM_WAIT(s) osSemaphoreAcquire(s, osWaitForever)
#endif

template <uint32_t no_streams, uint32_t width, uint32_t height, uint32_t stride, touchgfx::Bitmap::BitmapFormat output_format>
class DoubleBufferedVideoController : public touchgfx::VideoController
 8002b94:	4770      	bx	lr

08002b96 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm>:
    void unregisterVideoWidget(const Handle handle)
    {
        // Running in UI thread

        // Reset active for this handle
        streams[handle].isActive = false;
 8002b96:	2334      	movs	r3, #52	; 0x34
 8002b98:	fb03 0101 	mla	r1, r3, r1, r0
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
        bool oneIsActive = false;
        for (uint32_t i = 0; i < no_streams; i++)
        {
            oneIsActive |= streams[i].isActive;
        }
        if (oneIsActive == false)
 8002ba2:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8002ba6:	b90b      	cbnz	r3, 8002bac <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x16>
        {
            // Reset memory usage
            topBufferRGB = bufferRGB;
 8002ba8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002baa:	6443      	str	r3, [r0, #68]	; 0x44
        }
    }
 8002bac:	4770      	bx	lr

08002bae <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
    void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
    {
        // Running in UI thread

        // Nothing in this decoder
    }
 8002bae:	4770      	bx	lr

08002bb0 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8002bb0:	b538      	push	{r3, r4, r5, lr}
 8002bb2:	4604      	mov	r4, r0
    HAL::initialize();
 8002bb4:	f013 fe95 	bl	80168e2 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8002bb8:	6823      	ldr	r3, [r4, #0]
 8002bba:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8002bbc:	f015 ff8e 	bl	8018adc <_ZN8touchgfx11Application11getInstanceEv>
 8002bc0:	4601      	mov	r1, r0
 8002bc2:	4620      	mov	r0, r4
 8002bc4:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8002bc6:	6823      	ldr	r3, [r4, #0]
 8002bc8:	4a08      	ldr	r2, [pc, #32]	; (8002bec <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 8002bca:	4620      	mov	r0, r4
 8002bcc:	f8d3 5084 	ldr.w	r5, [r3, #132]	; 0x84
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	f5a2 317f 	sub.w	r1, r2, #261120	; 0x3fc00
 8002bd6:	47a8      	blx	r5
    void addDecoder(MJPEGDecoder& decoder, uint32_t index)
    {
        // Running in UI thread / main

        assert(index < no_streams);
        mjpegDecoders[index] = &decoder;
 8002bd8:	4b05      	ldr	r3, [pc, #20]	; (8002bf0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8002bda:	4a06      	ldr	r2, [pc, #24]	; (8002bf4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8002bdc:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 8002bde:	4a06      	ldr	r2, [pc, #24]	; (8002bf8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 8002be0:	63da      	str	r2, [r3, #60]	; 0x3c
        topBufferRGB = bufferRGB;
 8002be2:	645a      	str	r2, [r3, #68]	; 0x44
        sizeBufferRGB = sizeOfBuffer;
 8002be4:	f44f 22ff 	mov.w	r2, #522240	; 0x7f800
 8002be8:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002bea:	bd38      	pop	{r3, r4, r5, pc}
 8002bec:	c007f800 	.word	0xc007f800
 8002bf0:	200018dc 	.word	0x200018dc
 8002bf4:	20001894 	.word	0x20001894
 8002bf8:	c00bf400 	.word	0xc00bf400

08002bfc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm>:
    {
        assert(handle < no_streams);
        mjpegDecoders[handle]->getVideoInfo(data);
    }

    bool getIsPlaying(const Handle handle)
 8002bfc:	b508      	push	{r3, lr}
    {
        assert(handle < no_streams);
 8002bfe:	b131      	cbz	r1, 8002c0e <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x12>
 8002c00:	4b04      	ldr	r3, [pc, #16]	; (8002c14 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x18>)
 8002c02:	f240 1173 	movw	r1, #371	; 0x173
 8002c06:	4a04      	ldr	r2, [pc, #16]	; (8002c18 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x1c>)
 8002c08:	4804      	ldr	r0, [pc, #16]	; (8002c1c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x20>)
 8002c0a:	f024 fbfb 	bl	8027404 <__assert_func>
        Stream& stream = streams[handle];
        return stream.isPlaying;
    }
 8002c0e:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
 8002c12:	bd08      	pop	{r3, pc}
 8002c14:	080292cc 	.word	0x080292cc
 8002c18:	080292e0 	.word	0x080292e0
 8002c1c:	0802946d 	.word	0x0802946d

08002c20 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE>:
    void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8002c20:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 8002c22:	b131      	cbz	r1, 8002c32 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 8002c24:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 8002c26:	f240 116d 	movw	r1, #365	; 0x16d
 8002c2a:	4a06      	ldr	r2, [pc, #24]	; (8002c44 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 8002c2c:	4806      	ldr	r0, [pc, #24]	; (8002c48 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 8002c2e:	f024 fbe9 	bl	8027404 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 8002c32:	6840      	ldr	r0, [r0, #4]
 8002c34:	4611      	mov	r1, r2
 8002c36:	6803      	ldr	r3, [r0, #0]
    }
 8002c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	4718      	bx	r3
 8002c40:	080292cc 	.word	0x080292cc
 8002c44:	080294af 	.word	0x080294af
 8002c48:	0802946d 	.word	0x0802946d

08002c4c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm>:
    uint32_t getCurrentFrameNumber(const Handle handle)
 8002c4c:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8002c4e:	b129      	cbz	r1, 8002c5c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x10>
 8002c50:	4b03      	ldr	r3, [pc, #12]	; (8002c60 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x14>)
 8002c52:	2168      	movs	r1, #104	; 0x68
 8002c54:	4a03      	ldr	r2, [pc, #12]	; (8002c64 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x18>)
 8002c56:	4804      	ldr	r0, [pc, #16]	; (8002c68 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x1c>)
 8002c58:	f024 fbd4 	bl	8027404 <__assert_func>
    }
 8002c5c:	6900      	ldr	r0, [r0, #16]
 8002c5e:	bd08      	pop	{r3, pc}
 8002c60:	080292cc 	.word	0x080292cc
 8002c64:	08029660 	.word	0x08029660
 8002c68:	0802946d 	.word	0x0802946d

08002c6c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm>:
    void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 8002c6c:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8002c6e:	b129      	cbz	r1, 8002c7c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x10>
 8002c70:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x1c>)
 8002c72:	2171      	movs	r1, #113	; 0x71
 8002c74:	4a05      	ldr	r2, [pc, #20]	; (8002c8c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x20>)
 8002c76:	4806      	ldr	r0, [pc, #24]	; (8002c90 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x24>)
 8002c78:	f024 fbc4 	bl	8027404 <__assert_func>
        stream.tickCount = 0;
 8002c7c:	6141      	str	r1, [r0, #20]
        stream.frameCount = 0;
 8002c7e:	6081      	str	r1, [r0, #8]
        stream.frame_rate_video = video_frames;
 8002c80:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 8002c84:	bd08      	pop	{r3, pc}
 8002c86:	bf00      	nop
 8002c88:	080292cc 	.word	0x080292cc
 8002c8c:	08029818 	.word	0x08029818
 8002c90:	0802946d 	.word	0x0802946d

08002c94 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
 8002c94:	f013 be0c 	b.w	80168b0 <_ZN8touchgfx3HAL10beginFrameEv>

08002c98 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
{
 8002c98:	b508      	push	{r3, lr}
    HAL::flushFrameBuffer(rect);
 8002c9a:	f013 fdd3 	bl	8016844 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002c9e:	4b04      	ldr	r3, [pc, #16]	; (8002cb0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x18>)
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	03db      	lsls	r3, r3, #15
 8002ca4:	d503      	bpl.n	8002cae <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x16>
}
 8002ca6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        SCB_CleanInvalidateDCache();
 8002caa:	f7ff bf13 	b.w	8002ad4 <SCB_CleanInvalidateDCache>
}
 8002cae:	bd08      	pop	{r3, pc}
 8002cb0:	e000ed00 	.word	0xe000ed00

08002cb4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
    return HAL::blockCopy(dest, src, numBytes);
 8002cb4:	f013 bf31 	b.w	8016b1a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

08002cb8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED0Ev>:
class DoubleBufferedVideoController : public touchgfx::VideoController
 8002cb8:	b510      	push	{r4, lr}
 8002cba:	4604      	mov	r4, r0
 8002cbc:	2150      	movs	r1, #80	; 0x50
 8002cbe:	f024 fb73 	bl	80273a8 <_ZdlPvj>
 8002cc2:	4620      	mov	r0, r4
 8002cc4:	bd10      	pop	{r4, pc}
	...

08002cc8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm>:
    void setCommand(const Handle handle, Command cmd, uint32_t param)
 8002cc8:	b510      	push	{r4, lr}
 8002cca:	4604      	mov	r4, r0
        assert(handle < no_streams);
 8002ccc:	b129      	cbz	r1, 8002cda <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 8002cce:	4b20      	ldr	r3, [pc, #128]	; (8002d50 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x88>)
 8002cd0:	2192      	movs	r1, #146	; 0x92
 8002cd2:	4a20      	ldr	r2, [pc, #128]	; (8002d54 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x8c>)
 8002cd4:	4820      	ldr	r0, [pc, #128]	; (8002d58 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x90>)
 8002cd6:	f024 fb95 	bl	8027404 <__assert_func>
 8002cda:	2a04      	cmp	r2, #4
 8002cdc:	d81e      	bhi.n	8002d1c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x54>
 8002cde:	e8df f002 	tbb	[pc, r2]
 8002ce2:	1a03      	.short	0x1a03
 8002ce4:	231e      	.short	0x231e
 8002ce6:	30          	.byte	0x30
 8002ce7:	00          	.byte	0x00
            if (mjpegDecoders[handle]->hasVideo())
 8002ce8:	6840      	ldr	r0, [r0, #4]
 8002cea:	6803      	ldr	r3, [r0, #0]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	4798      	blx	r3
 8002cf0:	b1a0      	cbz	r0, 8002d1c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x54>
                MUTEX_LOCK(mutexBuffers);
 8002cf2:	f04f 31ff 	mov.w	r1, #4294967295
 8002cf6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002cf8:	f003 fe9c 	bl	8006a34 <osMutexAcquire>
                stream.isPlaying = true;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
                stream.cancelDecoding = false;
 8002d02:	2300      	movs	r3, #0
 8002d04:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
                stream.frameCount = 0;
 8002d08:	60a3      	str	r3, [r4, #8]
                stream.tickCount = 0;
 8002d0a:	6163      	str	r3, [r4, #20]
            MUTEX_UNLOCK(mutexBuffers);
 8002d0c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    }
 8002d0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            MUTEX_UNLOCK(mutexBuffers);
 8002d12:	f003 bebf 	b.w	8006a94 <osMutexRelease>
            stream.isPlaying = false;
 8002d16:	2300      	movs	r3, #0
 8002d18:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    }
 8002d1c:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 8002d1e:	6203      	str	r3, [r0, #32]
            stream.frameCount = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	6083      	str	r3, [r0, #8]
            stream.tickCount = 0;
 8002d24:	6143      	str	r3, [r0, #20]
            break;
 8002d26:	e7f9      	b.n	8002d1c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x54>
            MUTEX_LOCK(mutexBuffers);
 8002d28:	f04f 31ff 	mov.w	r1, #4294967295
 8002d2c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8002d2e:	f003 fe81 	bl	8006a34 <osMutexAcquire>
            stream.isPlaying = false;
 8002d32:	2300      	movs	r3, #0
 8002d34:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
            stream.cancelDecoding = true;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
            stream.seek_to_frame = 1;
 8002d3e:	6223      	str	r3, [r4, #32]
 8002d40:	e7e4      	b.n	8002d0c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x44>
            stream.repeat = (param > 0);
 8002d42:	3b00      	subs	r3, #0
 8002d44:	bf18      	it	ne
 8002d46:	2301      	movne	r3, #1
 8002d48:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    }
 8002d4c:	e7e6      	b.n	8002d1c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x54>
 8002d4e:	bf00      	nop
 8002d50:	080292cc 	.word	0x080292cc
 8002d54:	080299d7 	.word	0x080299d7
 8002d58:	0802946d 	.word	0x0802946d

08002d5c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE>:
    bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8002d5c:	b570      	push	{r4, r5, r6, lr}
 8002d5e:	4604      	mov	r4, r0
 8002d60:	4615      	mov	r5, r2
        assert(handle < no_streams);
 8002d62:	b129      	cbz	r1, 8002d70 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 8002d64:	4b23      	ldr	r3, [pc, #140]	; (8002df4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x98>)
 8002d66:	21c3      	movs	r1, #195	; 0xc3
 8002d68:	4a23      	ldr	r2, [pc, #140]	; (8002df8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x9c>)
 8002d6a:	4824      	ldr	r0, [pc, #144]	; (8002dfc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xa0>)
 8002d6c:	f024 fb4a 	bl	8027404 <__assert_func>
        if (stream.isPlaying)
 8002d70:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002d74:	b113      	cbz	r3, 8002d7c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x20>
            stream.tickCount++;
 8002d76:	6943      	ldr	r3, [r0, #20]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	6143      	str	r3, [r0, #20]
        if (stream.nextBuffer)
 8002d7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d035      	beq.n	8002dee <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x92>
            MUTEX_LOCK(mutexBuffers);
 8002d82:	f04f 31ff 	mov.w	r1, #4294967295
 8002d86:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002d88:	f003 fe54 	bl	8006a34 <osMutexAcquire>
            stream.nextBuffer = 0;
 8002d8c:	2200      	movs	r2, #0
            stream.currentBuffer = stream.nextBuffer;
 8002d8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
            stream.nextBuffer = 0;
 8002d90:	62a2      	str	r2, [r4, #40]	; 0x28
            stream.frameNumberShown = stream.frameNumberNext;
 8002d92:	68e2      	ldr	r2, [r4, #12]
            hasMoreFrames = stream.hasMoreFramesAfterNext;
 8002d94:	f894 6038 	ldrb.w	r6, [r4, #56]	; 0x38
            stream.frameNumberShown = stream.frameNumberNext;
 8002d98:	6122      	str	r2, [r4, #16]
            stream.frameCount++;
 8002d9a:	68a2      	ldr	r2, [r4, #8]
            stream.currentBuffer = stream.nextBuffer;
 8002d9c:	6263      	str	r3, [r4, #36]	; 0x24
            stream.frameCount++;
 8002d9e:	3201      	adds	r2, #1
 8002da0:	60a2      	str	r2, [r4, #8]
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 8002da2:	632b      	str	r3, [r5, #48]	; 0x30
            if (!hasMoreFrames && !stream.repeat)
 8002da4:	b99e      	cbnz	r6, 8002dce <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x72>
 8002da6:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8002daa:	b983      	cbnz	r3, 8002dce <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x72>
                stream.isPlaying = false;
 8002dac:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
            if (stream.doDecodeNewFrame)
 8002db0:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8002db4:	b113      	cbz	r3, 8002dbc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x60>
                SEM_POST(semDecode);
 8002db6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002db8:	f003 ff26 	bl	8006c08 <osSemaphoreRelease>
            MUTEX_UNLOCK(mutexBuffers);
 8002dbc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002dbe:	f003 fe69 	bl	8006a94 <osMutexRelease>
            widget.invalidate();
 8002dc2:	682b      	ldr	r3, [r5, #0]
 8002dc4:	4628      	mov	r0, r5
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	4798      	blx	r3
    }
 8002dca:	4630      	mov	r0, r6
 8002dcc:	bd70      	pop	{r4, r5, r6, pc}
            if (stream.isPlaying)
 8002dce:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0ec      	beq.n	8002db0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x54>
    bool decodeForNextTick(const Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 8002dd6:	e9d4 1305 	ldrd	r1, r3, [r4, #20]
 8002dda:	434b      	muls	r3, r1
 8002ddc:	69e1      	ldr	r1, [r4, #28]
 8002dde:	434a      	muls	r2, r1
 8002de0:	4293      	cmp	r3, r2
 8002de2:	bf34      	ite	cc
 8002de4:	2300      	movcc	r3, #0
 8002de6:	2301      	movcs	r3, #1
 8002de8:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
 8002dec:	e7e0      	b.n	8002db0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x54>
        bool hasMoreFrames = true;
 8002dee:	2601      	movs	r6, #1
 8002df0:	e7eb      	b.n	8002dca <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x6e>
 8002df2:	bf00      	nop
 8002df4:	080292cc 	.word	0x080292cc
 8002df8:	08029bae 	.word	0x08029bae
 8002dfc:	0802946d 	.word	0x0802946d

08002e00 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8002e00:	b538      	push	{r3, r4, r5, lr}
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 8002e02:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8002e06:	b133      	cbz	r3, 8002e16 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x16>
            {
                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 8002e08:	4b13      	ldr	r3, [pc, #76]	; (8002e58 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x58>)
 8002e0a:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8002e0e:	4a13      	ldr	r2, [pc, #76]	; (8002e5c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x5c>)
            assert(0 && "registerVideoWidget: Unable to allocate two RGB buffers!");
 8002e10:	4813      	ldr	r0, [pc, #76]	; (8002e60 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x60>)
 8002e12:	f024 faf7 	bl	8027404 <__assert_func>
        streams[handle].isActive = true;
 8002e16:	2201      	movs	r2, #1
 8002e18:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, uint16_t width, uint16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 8002e1c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
        buffer = videoBuffer;
 8002e20:	630b      	str	r3, [r1, #48]	; 0x30
        bufferWidth = width;
 8002e22:	86ca      	strh	r2, [r1, #54]	; 0x36
        bufferHeight = height;
 8002e24:	f44f 7288 	mov.w	r2, #272	; 0x110
        format = bufferFormat;
 8002e28:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
        bufferHeight = height;
 8002e2c:	870a      	strh	r2, [r1, #56]	; 0x38
        if (topBufferRGB + 2 * sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8002e2e:	6c42      	ldr	r2, [r0, #68]	; 0x44
        streams[handle].frameNumberShown = 0;
 8002e30:	6103      	str	r3, [r0, #16]
        if (topBufferRGB + 2 * sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8002e32:	f502 24ff 	add.w	r4, r2, #522240	; 0x7f800
 8002e36:	e9d0 150f 	ldrd	r1, r5, [r0, #60]	; 0x3c
 8002e3a:	4429      	add	r1, r5
 8002e3c:	428c      	cmp	r4, r1
 8002e3e:	d903      	bls.n	8002e48 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x48>
            assert(0 && "registerVideoWidget: Unable to allocate two RGB buffers!");
 8002e40:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x64>)
 8002e42:	2146      	movs	r1, #70	; 0x46
 8002e44:	4a08      	ldr	r2, [pc, #32]	; (8002e68 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
 8002e46:	e7e3      	b.n	8002e10 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x10>
        streams[handle].bufferA = (uint8_t*)topBufferRGB;
 8002e48:	62c2      	str	r2, [r0, #44]	; 0x2c
        topBufferRGB += sizeOfOneDecodeBuffer;
 8002e4a:	f502 327f 	add.w	r2, r2, #261120	; 0x3fc00
        topBufferRGB += sizeOfOneDecodeBuffer;
 8002e4e:	6444      	str	r4, [r0, #68]	; 0x44
        streams[handle].bufferB = (uint8_t*)topBufferRGB;
 8002e50:	6302      	str	r2, [r0, #48]	; 0x30
    }
 8002e52:	4618      	mov	r0, r3
 8002e54:	bd38      	pop	{r3, r4, r5, pc}
 8002e56:	bf00      	nop
 8002e58:	08029d52 	.word	0x08029d52
 8002e5c:	08029d82 	.word	0x08029d82
 8002e60:	0802946d 	.word	0x0802946d
 8002e64:	08029f0c 	.word	0x08029f0c
 8002e68:	08029f4c 	.word	0x08029f4c

08002e6c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e6c:	4b03      	ldr	r3, [pc, #12]	; (8002e7c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 8002e6e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002e72:	609a      	str	r2, [r3, #8]
 8002e74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e78:	609a      	str	r2, [r3, #8]
}
 8002e7a:	4770      	bx	lr
 8002e7c:	e000e100 	.word	0xe000e100

08002e80 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 8002e80:	b538      	push	{r3, r4, r5, lr}
        MUTEX_LOCK(mutexBuffers);
 8002e82:	4c10      	ldr	r4, [pc, #64]	; (8002ec4 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x44>)
    HAL::endFrame();
 8002e84:	f013 fd20 	bl	80168c8 <_ZN8touchgfx3HAL8endFrameEv>
 8002e88:	f04f 31ff 	mov.w	r1, #4294967295
 8002e8c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002e8e:	f003 fdd1 	bl	8006a34 <osMutexAcquire>
            if (stream.isPlaying)
 8002e92:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
 8002e96:	b15d      	cbz	r5, 8002eb0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x30>
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 8002e98:	69e2      	ldr	r2, [r4, #28]
 8002e9a:	e9d4 3505 	ldrd	r3, r5, [r4, #20]
 8002e9e:	435d      	muls	r5, r3
 8002ea0:	68a3      	ldr	r3, [r4, #8]
 8002ea2:	4353      	muls	r3, r2
 8002ea4:	429d      	cmp	r5, r3
 8002ea6:	bf34      	ite	cc
 8002ea8:	2500      	movcc	r5, #0
 8002eaa:	2501      	movcs	r5, #1
                stream.doDecodeNewFrame = decodeForNextTick(stream);
 8002eac:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
        MUTEX_UNLOCK(mutexBuffers);
 8002eb0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002eb2:	f003 fdef 	bl	8006a94 <osMutexRelease>
        if (post)
 8002eb6:	b125      	cbz	r5, 8002ec2 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
            SEM_POST(semDecode);
 8002eb8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
 8002eba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ebe:	f003 bea3 	b.w	8006c08 <osSemaphoreRelease>
 8002ec2:	bd38      	pop	{r3, r4, r5, pc}
 8002ec4:	200018dc 	.word	0x200018dc

08002ec8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ec8:	4b08      	ldr	r3, [pc, #32]	; (8002eec <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 8002eca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002ece:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002ed2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002ed6:	f3bf 8f6f 	isb	sy
 8002eda:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ede:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002ee2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002ee6:	f3bf 8f6f 	isb	sy
}
 8002eea:	4770      	bx	lr
 8002eec:	e000e100 	.word	0xe000e100

08002ef0 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
        if (LTDC->LIPCR == lcd_int_active_line)
 8002ef0:	4b13      	ldr	r3, [pc, #76]	; (8002f40 <HAL_LTDC_LineEventCallback+0x50>)
 8002ef2:	4a14      	ldr	r2, [pc, #80]	; (8002f44 <HAL_LTDC_LineEventCallback+0x54>)
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	8811      	ldrh	r1, [r2, #0]
 8002ef8:	428b      	cmp	r3, r1
    {
 8002efa:	b510      	push	{r4, lr}
 8002efc:	4c12      	ldr	r4, [pc, #72]	; (8002f48 <HAL_LTDC_LineEventCallback+0x58>)
        if (LTDC->LIPCR == lcd_int_active_line)
 8002efe:	d113      	bne.n	8002f28 <HAL_LTDC_LineEventCallback+0x38>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8002f00:	4b12      	ldr	r3, [pc, #72]	; (8002f4c <HAL_LTDC_LineEventCallback+0x5c>)
 8002f02:	8819      	ldrh	r1, [r3, #0]
 8002f04:	f002 f982 	bl	800520c <HAL_LTDC_ProgramLineEvent>
        return instance;
 8002f08:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 8002f0a:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8002f0e:	3301      	adds	r3, #1
 8002f10:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 8002f14:	f7fe ff1e 	bl	8001d54 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8002f18:	6820      	ldr	r0, [r4, #0]
 8002f1a:	f014 fae3 	bl	80174e4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8002f1e:	2000      	movs	r0, #0
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8002f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 8002f24:	f7fe bdce 	b.w	8001ac4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8002f28:	f002 f970 	bl	800520c <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8002f2c:	2000      	movs	r0, #0
 8002f2e:	f7fe fdca 	bl	8001ac6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
        return instance;
 8002f32:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 8002f34:	6803      	ldr	r3, [r0, #0]
    }
 8002f36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	4718      	bx	r3
 8002f3e:	bf00      	nop
 8002f40:	40016800 	.word	0x40016800
 8002f44:	20001112 	.word	0x20001112
 8002f48:	20014be4 	.word	0x20014be4
 8002f4c:	20001110 	.word	0x20001110

08002f50 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 8002f50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002f54:	4604      	mov	r4, r0
            const bool hasMoreFrames = decoder->decodeNextFrame(decodeBuffer, width, height, stride);
 8002f56:	f44f 7870 	mov.w	r8, #960	; 0x3c0
    uint32_t getStreamIndexToDecode()
    {
        for (uint32_t i = 0; i < no_streams; i++)
        {
            Stream& stream = streams[i];
            if (stream.doDecodeNewFrame) // Marked by UI for decoding
 8002f5a:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
            MUTEX_LOCK(mutexBuffers);
 8002f5e:	f04f 31ff 	mov.w	r1, #4294967295
            if (stream.doDecodeNewFrame) // Marked by UI for decoding
 8002f62:	b91b      	cbnz	r3, 8002f6c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x1c>
                SEM_WAIT(semDecode);
 8002f64:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002f66:	f003 fe15 	bl	8006b94 <osSemaphoreAcquire>
                continue;
 8002f6a:	e7f6      	b.n	8002f5a <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xa>
            MUTEX_LOCK(mutexBuffers);
 8002f6c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002f6e:	f003 fd61 	bl	8006a34 <osMutexAcquire>
            uint8_t* decodeBuffer = (stream.currentBuffer == stream.bufferA) ? stream.bufferB : stream.bufferA;
 8002f72:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002f74:	6a63      	ldr	r3, [r4, #36]	; 0x24
            if (stream.seek_to_frame > 0)
 8002f76:	6a21      	ldr	r1, [r4, #32]
            uint8_t* decodeBuffer = (stream.currentBuffer == stream.bufferA) ? stream.bufferB : stream.bufferA;
 8002f78:	42bb      	cmp	r3, r7
            MJPEGDecoder* const decoder = mjpegDecoders[stream_index];
 8002f7a:	6865      	ldr	r5, [r4, #4]
            uint8_t* decodeBuffer = (stream.currentBuffer == stream.bufferA) ? stream.bufferB : stream.bufferA;
 8002f7c:	bf08      	it	eq
 8002f7e:	6b27      	ldreq	r7, [r4, #48]	; 0x30
            if (stream.seek_to_frame > 0)
 8002f80:	b129      	cbz	r1, 8002f8e <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x3e>
                decoder->gotoFrame(stream.seek_to_frame);
 8002f82:	682b      	ldr	r3, [r5, #0]
 8002f84:	4628      	mov	r0, r5
 8002f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f88:	4798      	blx	r3
                stream.seek_to_frame = 0;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	6223      	str	r3, [r4, #32]
            const bool hasMoreFrames = decoder->decodeNextFrame(decodeBuffer, width, height, stride);
 8002f8e:	682b      	ldr	r3, [r5, #0]
 8002f90:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002f94:	f8cd 8000 	str.w	r8, [sp]
 8002f98:	4639      	mov	r1, r7
 8002f9a:	695e      	ldr	r6, [r3, #20]
 8002f9c:	4628      	mov	r0, r5
 8002f9e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002fa2:	47b0      	blx	r6
            if (stream.cancelDecoding)
 8002fa4:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
            const bool hasMoreFrames = decoder->decodeNextFrame(decodeBuffer, width, height, stride);
 8002fa8:	4606      	mov	r6, r0
            if (stream.cancelDecoding)
 8002faa:	b133      	cbz	r3, 8002fba <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x6a>
                stream.cancelDecoding = false;
 8002fac:	2300      	movs	r3, #0
 8002fae:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
            MUTEX_UNLOCK(mutexBuffers);
 8002fb2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002fb4:	f003 fd6e 	bl	8006a94 <osMutexRelease>
 8002fb8:	e7cf      	b.n	8002f5a <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xa>
                stream.nextBuffer = decodeBuffer;
 8002fba:	62a7      	str	r7, [r4, #40]	; 0x28
                if (hasMoreFrames)
 8002fbc:	b158      	cbz	r0, 8002fd6 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x86>
                    stream.frameNumberNext = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8002fbe:	682b      	ldr	r3, [r5, #0]
 8002fc0:	4628      	mov	r0, r5
 8002fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc4:	4798      	blx	r3
 8002fc6:	3801      	subs	r0, #1
 8002fc8:	60e0      	str	r0, [r4, #12]
                stream.doDecodeNewFrame = false;
 8002fca:	2300      	movs	r3, #0
                stream.hasMoreFramesAfterNext = hasMoreFrames;
 8002fcc:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
                stream.doDecodeNewFrame = false;
 8002fd0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
 8002fd4:	e7ed      	b.n	8002fb2 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x62>
                    stream.frameNumberNext = 1;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	60e3      	str	r3, [r4, #12]
 8002fda:	e7f6      	b.n	8002fca <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x7a>

08002fdc <videoTaskFunc>:
    videoController.decoderTaskEntry();
 8002fdc:	4801      	ldr	r0, [pc, #4]	; (8002fe4 <videoTaskFunc+0x8>)
{
 8002fde:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 8002fe0:	f7ff ffb6 	bl	8002f50 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>
 8002fe4:	200018dc 	.word	0x200018dc

08002fe8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm>:
    }

    void clearState(const Handle handle)
    {
        // Stop playing, and clear next buffer if any, cancel ongoing decoding
        setCommand(handle, STOP, 0);
 8002fe8:	6803      	ldr	r3, [r0, #0]
 8002fea:	2203      	movs	r2, #3
    void clearState(const Handle handle)
 8002fec:	b570      	push	{r4, r5, r6, lr}
 8002fee:	4604      	mov	r4, r0
        setCommand(handle, STOP, 0);
 8002ff0:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8002ff2:	2300      	movs	r3, #0
    void clearState(const Handle handle)
 8002ff4:	460d      	mov	r5, r1
        setCommand(handle, STOP, 0);
 8002ff6:	47b0      	blx	r6

        MUTEX_LOCK(mutexBuffers);
 8002ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8002ffc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002ffe:	f003 fd19 	bl	8006a34 <osMutexAcquire>

        Stream& stream = streams[handle];
        if (stream.nextBuffer != 0)
 8003002:	2134      	movs	r1, #52	; 0x34
 8003004:	fb01 4305 	mla	r3, r1, r5, r4
 8003008:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800300a:	b10a      	cbz	r2, 8003010 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm+0x28>
        {
            // Ignore any decoded buffer
            stream.nextBuffer = 0;
 800300c:	2200      	movs	r2, #0
 800300e:	629a      	str	r2, [r3, #40]	; 0x28
        }
        stream.cancelDecoding = true;
 8003010:	fb01 4505 	mla	r5, r1, r5, r4
 8003014:	2301      	movs	r3, #1
 8003016:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
        stream.isPlaying = false;
 800301a:	2300      	movs	r3, #0
 800301c:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35

        MUTEX_UNLOCK(mutexBuffers);
 8003020:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    }
 8003022:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        MUTEX_UNLOCK(mutexBuffers);
 8003026:	f003 bd35 	b.w	8006a94 <osMutexRelease>

0800302a <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmRNS0_15VideoDataReaderE>:
    void setVideoData(const Handle handle, VideoDataReader& reader)
 800302a:	b538      	push	{r3, r4, r5, lr}
        mjpegDecoders[handle]->setVideoData(reader);
 800302c:	eb00 0381 	add.w	r3, r0, r1, lsl #2
    void setVideoData(const Handle handle, VideoDataReader& reader)
 8003030:	4604      	mov	r4, r0
 8003032:	460d      	mov	r5, r1
        mjpegDecoders[handle]->setVideoData(reader);
 8003034:	4611      	mov	r1, r2
 8003036:	6858      	ldr	r0, [r3, #4]
 8003038:	6803      	ldr	r3, [r0, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	4798      	blx	r3
        clearState(handle);
 800303e:	4629      	mov	r1, r5
 8003040:	4620      	mov	r0, r4
 8003042:	f7ff ffd1 	bl	8002fe8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm>
    }
 8003046:	bd38      	pop	{r3, r4, r5, pc}

08003048 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm>:
    void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8003048:	b570      	push	{r4, r5, r6, lr}
 800304a:	460d      	mov	r5, r1
 800304c:	4611      	mov	r1, r2
 800304e:	4604      	mov	r4, r0
        mjpegDecoders[handle]->setVideoData(movie, length);
 8003050:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003054:	6850      	ldr	r0, [r2, #4]
 8003056:	6802      	ldr	r2, [r0, #0]
 8003058:	6896      	ldr	r6, [r2, #8]
 800305a:	461a      	mov	r2, r3
 800305c:	47b0      	blx	r6
        clearState(handle);
 800305e:	4629      	mov	r1, r5
 8003060:	4620      	mov	r0, r4
 8003062:	f7ff ffc1 	bl	8002fe8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm>
    }
 8003066:	bd70      	pop	{r4, r5, r6, pc}

08003068 <_GLOBAL__sub_I_lineBuffer>:
}
 8003068:	b538      	push	{r3, r4, r5, lr}
SoftwareMJPEGDecoder mjpegdecoder1((uint8_t*)lineBuffer);
 800306a:	4914      	ldr	r1, [pc, #80]	; (80030bc <_GLOBAL__sub_I_lineBuffer+0x54>)
          semDecode(0), mutexBuffers(0)
 800306c:	2500      	movs	r5, #0
 800306e:	4814      	ldr	r0, [pc, #80]	; (80030c0 <_GLOBAL__sub_I_lineBuffer+0x58>)
 8003070:	f7ff f8c0 	bl	80021f4 <_ZN20SoftwareMJPEGDecoderC1EPh>
 8003074:	4c13      	ldr	r4, [pc, #76]	; (80030c4 <_GLOBAL__sub_I_lineBuffer+0x5c>)
 8003076:	4b14      	ldr	r3, [pc, #80]	; (80030c8 <_GLOBAL__sub_I_lineBuffer+0x60>)
        semDecode = SEM_CREATE(); // Binary semaphore
 8003078:	462a      	mov	r2, r5
 800307a:	4629      	mov	r1, r5
 800307c:	2001      	movs	r0, #1
          semDecode(0), mutexBuffers(0)
 800307e:	6023      	str	r3, [r4, #0]
            hasMoreFramesAfterNext(false), repeat(true)
 8003080:	f44f 7380 	mov.w	r3, #256	; 0x100
          semDecode(0), mutexBuffers(0)
 8003084:	64e5      	str	r5, [r4, #76]	; 0x4c
            hasMoreFramesAfterNext(false), repeat(true)
 8003086:	8723      	strh	r3, [r4, #56]	; 0x38
 8003088:	6365      	str	r5, [r4, #52]	; 0x34
          semDecode(0), mutexBuffers(0)
 800308a:	e9c4 550f 	strd	r5, r5, [r4, #60]	; 0x3c
 800308e:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
            hasMoreFramesAfterNext(false), repeat(true)
 8003092:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003096:	e9c4 5503 	strd	r5, r5, [r4, #12]
 800309a:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800309e:	e9c4 5507 	strd	r5, r5, [r4, #28]
 80030a2:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
 80030a6:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
        semDecode = SEM_CREATE(); // Binary semaphore
 80030aa:	f003 fd1d 	bl	8006ae8 <osSemaphoreNew>
 80030ae:	64a0      	str	r0, [r4, #72]	; 0x48
        mutexBuffers = MUTEX_CREATE();
 80030b0:	4628      	mov	r0, r5
 80030b2:	f003 fc7d 	bl	80069b0 <osMutexNew>
 80030b6:	64e0      	str	r0, [r4, #76]	; 0x4c
}
 80030b8:	bd38      	pop	{r3, r4, r5, pc}
 80030ba:	bf00      	nop
 80030bc:	20001114 	.word	0x20001114
 80030c0:	20001894 	.word	0x20001894
 80030c4:	200018dc 	.word	0x200018dc
 80030c8:	0802a0fc 	.word	0x0802a0fc

080030cc <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80030cc:	4770      	bx	lr

080030ce <_ZN23ApplicationFontProviderD0Ev>:
 80030ce:	b510      	push	{r4, lr}
 80030d0:	4604      	mov	r4, r0
 80030d2:	2104      	movs	r1, #4
 80030d4:	f024 f968 	bl	80273a8 <_ZdlPvj>
 80030d8:	4620      	mov	r0, r4
 80030da:	bd10      	pop	{r4, pc}

080030dc <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 80030dc:	2901      	cmp	r1, #1
{
 80030de:	b508      	push	{r3, lr}
    switch (typography)
 80030e0:	d006      	beq.n	80030f0 <_ZN23ApplicationFontProvider7getFontEt+0x14>
 80030e2:	2902      	cmp	r1, #2
 80030e4:	d008      	beq.n	80030f8 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 80030e6:	b959      	cbnz	r1, 8003100 <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80030e8:	f000 fc42 	bl	8003970 <_ZN17TypedTextDatabase8getFontsEv>
 80030ec:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 80030ee:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80030f0:	f000 fc3e 	bl	8003970 <_ZN17TypedTextDatabase8getFontsEv>
 80030f4:	6840      	ldr	r0, [r0, #4]
 80030f6:	e7fa      	b.n	80030ee <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80030f8:	f000 fc3a 	bl	8003970 <_ZN17TypedTextDatabase8getFontsEv>
 80030fc:	6880      	ldr	r0, [r0, #8]
 80030fe:	e7f6      	b.n	80030ee <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 8003100:	2000      	movs	r0, #0
 8003102:	e7f4      	b.n	80030ee <_ZN23ApplicationFontProvider7getFontEt+0x12>

08003104 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8003104:	4800      	ldr	r0, [pc, #0]	; (8003108 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8003106:	4770      	bx	lr
 8003108:	0802a144 	.word	0x0802a144

0800310c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 800310c:	2002      	movs	r0, #2
 800310e:	4770      	bx	lr

08003110 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003110:	b513      	push	{r0, r1, r4, lr}
 8003112:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8003114:	b151      	cbz	r1, 800312c <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003116:	6803      	ldr	r3, [r0, #0]
 8003118:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 800311a:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 800311c:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003120:	689c      	ldr	r4, [r3, #8]
 8003122:	f10d 0303 	add.w	r3, sp, #3
 8003126:	47a0      	blx	r4
        return glyph;
    }
 8003128:	b002      	add	sp, #8
 800312a:	bd10      	pop	{r4, pc}
            return 0;
 800312c:	4608      	mov	r0, r1
 800312e:	e7fb      	b.n	8003128 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08003130 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8003130:	8940      	ldrh	r0, [r0, #10]
 8003132:	4770      	bx	lr

08003134 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8003134:	8980      	ldrh	r0, [r0, #12]
 8003136:	4770      	bx	lr

08003138 <_ZNK8touchgfx4Font13getFontHeightEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
    {
        return fontHeight;
    }
 8003138:	8880      	ldrh	r0, [r0, #4]
 800313a:	4770      	bx	lr

0800313c <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
    {
        return fontHeight + pixelsBelowBaseline;
 800313c:	7983      	ldrb	r3, [r0, #6]
 800313e:	8880      	ldrh	r0, [r0, #4]
 8003140:	4418      	add	r0, r3
    }
 8003142:	b280      	uxth	r0, r0
 8003144:	4770      	bx	lr

08003146 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8003146:	79c0      	ldrb	r0, [r0, #7]
    }
 8003148:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800314c:	4770      	bx	lr

0800314e <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 800314e:	79c0      	ldrb	r0, [r0, #7]
    }
 8003150:	09c0      	lsrs	r0, r0, #7
 8003152:	4770      	bx	lr

08003154 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
    }
 8003154:	4770      	bx	lr

08003156 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8003156:	f500 7396 	add.w	r3, r0, #300	; 0x12c
 800315a:	6808      	ldr	r0, [r1, #0]
 800315c:	6849      	ldr	r1, [r1, #4]
 800315e:	c303      	stmia	r3!, {r0, r1}
    }
 8003160:	4770      	bx	lr

08003162 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8003162:	4770      	bx	lr

08003164 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8003164:	4770      	bx	lr

08003166 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8003166:	6041      	str	r1, [r0, #4]
    }
 8003168:	4770      	bx	lr

0800316a <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800316a:	4770      	bx	lr

0800316c <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 800316c:	2301      	movs	r3, #1
 800316e:	7203      	strb	r3, [r0, #8]
    }
 8003170:	4770      	bx	lr

08003172 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8003172:	4770      	bx	lr

08003174 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003174:	4770      	bx	lr

08003176 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003176:	b410      	push	{r4}
    {
        (pobject->*pmemfun_0)();
 8003178:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 800317a:	4603      	mov	r3, r0
        (pobject->*pmemfun_0)();
 800317c:	68c2      	ldr	r2, [r0, #12]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	1054      	asrs	r4, r2, #1
 8003182:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8003186:	07d2      	lsls	r2, r2, #31
 8003188:	bf48      	it	mi
 800318a:	590a      	ldrmi	r2, [r1, r4]
    }
 800318c:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun_0)();
 8003190:	bf48      	it	mi
 8003192:	58d3      	ldrmi	r3, [r2, r3]
 8003194:	4718      	bx	r3

08003196 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8003196:	6843      	ldr	r3, [r0, #4]
 8003198:	b12b      	cbz	r3, 80031a6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 800319a:	6883      	ldr	r3, [r0, #8]
 800319c:	b92b      	cbnz	r3, 80031aa <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 800319e:	68c0      	ldr	r0, [r0, #12]
 80031a0:	f000 0001 	and.w	r0, r0, #1
 80031a4:	4770      	bx	lr
 80031a6:	4618      	mov	r0, r3
 80031a8:	4770      	bx	lr
 80031aa:	2001      	movs	r0, #1
    }
 80031ac:	4770      	bx	lr

080031ae <_ZN8touchgfx12NoTransitionD0Ev>:
 80031ae:	b510      	push	{r4, lr}
 80031b0:	4604      	mov	r4, r0
 80031b2:	210c      	movs	r1, #12
 80031b4:	f024 f8f8 	bl	80273a8 <_ZdlPvj>
 80031b8:	4620      	mov	r0, r4
 80031ba:	bd10      	pop	{r4, pc}

080031bc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80031bc:	b510      	push	{r4, lr}
 80031be:	4604      	mov	r4, r0
 80031c0:	2110      	movs	r1, #16
 80031c2:	f024 f8f1 	bl	80273a8 <_ZdlPvj>
 80031c6:	4620      	mov	r0, r4
 80031c8:	bd10      	pop	{r4, pc}

080031ca <_ZN23FrontendApplicationBaseD0Ev>:
 80031ca:	b510      	push	{r4, lr}
 80031cc:	4604      	mov	r4, r0
 80031ce:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80031d2:	f024 f8e9 	bl	80273a8 <_ZdlPvj>
 80031d6:	4620      	mov	r0, r4
 80031d8:	bd10      	pop	{r4, pc}

080031da <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 80031da:	b510      	push	{r4, lr}
        Application::getInstance()->draw();
 80031dc:	f015 fc7e 	bl	8018adc <_ZN8touchgfx11Application11getInstanceEv>
 80031e0:	6803      	ldr	r3, [r0, #0]
    }
 80031e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->draw();
 80031e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e8:	4718      	bx	r3

080031ea <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 80031ea:	b510      	push	{r4, lr}
 80031ec:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 80031ee:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 80031f2:	b158      	cbz	r0, 800320c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 80031f4:	6803      	ldr	r3, [r0, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	4798      	blx	r3
 80031fa:	b138      	cbz	r0, 800320c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 80031fc:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8003200:	6803      	ldr	r3, [r0, #0]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8003206:	2300      	movs	r3, #0
 8003208:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    }
 800320c:	bd10      	pop	{r4, pc}
	...

08003210 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/home_screen/HomeView.hpp>
#include <gui/home_screen/HomePresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8003210:	b570      	push	{r4, r5, r6, lr}
 8003212:	4604      	mov	r4, r0
 8003214:	460d      	mov	r5, r1
 8003216:	4616      	mov	r6, r2
          pendingScreenTransitionCallback(0)
 8003218:	f015 fc82 	bl	8018b20 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 800321c:	4b0e      	ldr	r3, [pc, #56]	; (8003258 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>)
          pendingScreenTransitionCallback(0)
 800321e:	2100      	movs	r1, #0
        instance = this;
 8003220:	601c      	str	r4, [r3, #0]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8003222:	4b0e      	ldr	r3, [pc, #56]	; (800325c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x4c>)
 8003224:	e9c4 6554 	strd	r6, r5, [r4, #336]	; 0x150
        return instance;
 8003228:	4d0d      	ldr	r5, [pc, #52]	; (8003260 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
 800322a:	6023      	str	r3, [r4, #0]
 800322c:	6828      	ldr	r0, [r5, #0]
        : pobject(0), pmemfun_0(0)
 800322e:	4b0d      	ldr	r3, [pc, #52]	; (8003264 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 8003230:	e9c4 1152 	strd	r1, r1, [r4, #328]	; 0x148
 8003234:	e9c4 3150 	strd	r3, r1, [r4, #320]	; 0x140
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003238:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 800323a:	e9c4 114e 	strd	r1, r1, [r4, #312]	; 0x138
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	4798      	blx	r3
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003242:	682b      	ldr	r3, [r5, #0]
 8003244:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8003248:	b10a      	cbz	r2, 800324e <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x3e>
 800324a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800324c:	b900      	cbnz	r0, 8003250 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x40>
        return instance->lcdRef;
 800324e:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8003250:	f01c ff47 	bl	80200e2 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 8003254:	4620      	mov	r0, r4
 8003256:	bd70      	pop	{r4, r5, r6, pc}
 8003258:	20014c30 	.word	0x20014c30
 800325c:	0802a4a8 	.word	0x0802a4a8
 8003260:	20014be4 	.word	0x20014be4
 8003264:	0802a490 	.word	0x0802a490

08003268 <_ZN23FrontendApplicationBase26gotoHomeScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003268:	4b06      	ldr	r3, [pc, #24]	; (8003284 <_ZN23FrontendApplicationBase26gotoHomeScreenNoTransitionEv+0x1c>)
 800326a:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 800326e:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 8003272:	2300      	movs	r3, #0
 8003274:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
// Home

void FrontendApplicationBase::gotoHomeScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoHomeScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8003278:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 800327c:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
}
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	080033c5 	.word	0x080033c5

08003288 <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8003288:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800328c:	4607      	mov	r7, r0
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800328e:	6890      	ldr	r0, [r2, #8]
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8003290:	4699      	mov	r9, r3
 8003292:	4688      	mov	r8, r1
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003294:	6803      	ldr	r3, [r0, #0]
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8003296:	4614      	mov	r4, r2
 8003298:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	4798      	blx	r3
 80032a0:	28db      	cmp	r0, #219	; 0xdb
 80032a2:	d805      	bhi.n	80032b0 <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x28>
 80032a4:	4b41      	ldr	r3, [pc, #260]	; (80033ac <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x124>)
 80032a6:	21a3      	movs	r1, #163	; 0xa3
 80032a8:	4a41      	ldr	r2, [pc, #260]	; (80033b0 <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x128>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80032aa:	4842      	ldr	r0, [pc, #264]	; (80033b4 <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>)
 80032ac:	f024 f8aa 	bl	8027404 <__assert_func>
 80032b0:	6860      	ldr	r0, [r4, #4]
 80032b2:	6803      	ldr	r3, [r0, #0]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	4798      	blx	r3
 80032b8:	280f      	cmp	r0, #15
 80032ba:	d803      	bhi.n	80032c4 <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x3c>
 80032bc:	4b3e      	ldr	r3, [pc, #248]	; (80033b8 <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>)
 80032be:	21a4      	movs	r1, #164	; 0xa4
 80032c0:	4a3b      	ldr	r2, [pc, #236]	; (80033b0 <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x128>)
 80032c2:	e7f2      	b.n	80032aa <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80032c4:	68e0      	ldr	r0, [r4, #12]
 80032c6:	6803      	ldr	r3, [r0, #0]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	4798      	blx	r3
 80032cc:	280b      	cmp	r0, #11
 80032ce:	d803      	bhi.n	80032d8 <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x50>
 80032d0:	4b3a      	ldr	r3, [pc, #232]	; (80033bc <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>)
 80032d2:	21a5      	movs	r1, #165	; 0xa5
 80032d4:	4a36      	ldr	r2, [pc, #216]	; (80033b0 <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x128>)
 80032d6:	e7e8      	b.n	80032aa <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22>
    Application::getInstance()->clearAllTimerWidgets();
 80032d8:	f015 fc00 	bl	8018adc <_ZN8touchgfx11Application11getInstanceEv>
 80032dc:	f015 fc04 	bl	8018ae8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 80032e0:	f8d9 0000 	ldr.w	r0, [r9]
 80032e4:	b110      	cbz	r0, 80032ec <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x64>
        (*currentTrans)->tearDown();
 80032e6:	6803      	ldr	r3, [r0, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	4798      	blx	r3
    if (*currentTrans)
 80032ec:	f8d9 0000 	ldr.w	r0, [r9]
 80032f0:	b110      	cbz	r0, 80032f8 <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x70>
        (*currentTrans)->~Transition();
 80032f2:	6803      	ldr	r3, [r0, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4798      	blx	r3
    if (*currentScreen)
 80032f8:	6838      	ldr	r0, [r7, #0]
 80032fa:	b110      	cbz	r0, 8003302 <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7a>
        (*currentScreen)->tearDownScreen();
 80032fc:	6803      	ldr	r3, [r0, #0]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	4798      	blx	r3
    if (*currentPresenter)
 8003302:	f8d8 0000 	ldr.w	r0, [r8]
 8003306:	b110      	cbz	r0, 800330e <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x86>
        (*currentPresenter)->deactivate();
 8003308:	6803      	ldr	r3, [r0, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	4798      	blx	r3
    if (*currentScreen)
 800330e:	6838      	ldr	r0, [r7, #0]
 8003310:	b110      	cbz	r0, 8003318 <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x90>
        (*currentScreen)->~Screen();
 8003312:	6803      	ldr	r3, [r0, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4798      	blx	r3
    if (*currentPresenter)
 8003318:	f8d8 0000 	ldr.w	r0, [r8]
 800331c:	b110      	cbz	r0, 8003324 <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x9c>
        (*currentPresenter)->~Presenter();
 800331e:	6803      	ldr	r3, [r0, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8003324:	68e0      	ldr	r0, [r4, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8003326:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8003328:	f04f 0b00 	mov.w	fp, #0
 800332c:	6803      	ldr	r3, [r0, #0]
 800332e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003330:	4798      	blx	r3
 8003332:	4b23      	ldr	r3, [pc, #140]	; (80033c0 <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x138>)
 8003334:	4605      	mov	r5, r0
 8003336:	f8c0 b004 	str.w	fp, [r0, #4]
 800333a:	6003      	str	r3, [r0, #0]
 800333c:	4659      	mov	r1, fp
 800333e:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8003342:	68a0      	ldr	r0, [r4, #8]
 8003344:	6803      	ldr	r3, [r0, #0]
 8003346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003348:	4798      	blx	r3
 800334a:	4606      	mov	r6, r0
 800334c:	f000 fb68 	bl	8003a20 <_ZN8HomeViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8003350:	6860      	ldr	r0, [r4, #4]
 8003352:	4659      	mov	r1, fp
 8003354:	6803      	ldr	r3, [r0, #0]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	4798      	blx	r3
 800335a:	4604      	mov	r4, r0
 800335c:	4631      	mov	r1, r6
 800335e:	f000 fb45 	bl	80039ec <_ZN13HomePresenterC1ER8HomeView>
    *currentTrans = newTransition;
 8003362:	f8c9 5000 	str.w	r5, [r9]
    *currentPresenter = newPresenter;
 8003366:	f8c8 4000 	str.w	r4, [r8]
    *currentScreen = newScreen;
 800336a:	603e      	str	r6, [r7, #0]
    model->bind(newPresenter);
 800336c:	b1e4      	cbz	r4, 80033a8 <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x120>
 800336e:	1d23      	adds	r3, r4, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8003370:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8003374:	4630      	mov	r0, r6
 8003376:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8003378:	f8c4 a008 	str.w	sl, [r4, #8]
 800337c:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
    {
        this->presenter = &presenter;
 800337e:	63f4      	str	r4, [r6, #60]	; 0x3c
 8003380:	4798      	blx	r3
    newPresenter->activate();
 8003382:	6823      	ldr	r3, [r4, #0]
 8003384:	4620      	mov	r0, r4
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800338a:	4629      	mov	r1, r5
 800338c:	4630      	mov	r0, r6
 800338e:	f016 ff71 	bl	801a274 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8003392:	682b      	ldr	r3, [r5, #0]
 8003394:	4628      	mov	r0, r5
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	4798      	blx	r3
    newTransition->invalidate();
 800339a:	682b      	ldr	r3, [r5, #0]
 800339c:	4628      	mov	r0, r5
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	4798      	blx	r3
    newScreen->bind(*newPresenter);

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
}
 80033a2:	4620      	mov	r0, r4
 80033a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    model->bind(newPresenter);
 80033a8:	4623      	mov	r3, r4
 80033aa:	e7e1      	b.n	8003370 <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
 80033ac:	0802a16c 	.word	0x0802a16c
 80033b0:	0802a1fa 	.word	0x0802a1fa
 80033b4:	0802a2f8 	.word	0x0802a2f8
 80033b8:	0802a33f 	.word	0x0802a33f
 80033bc:	0802a3e2 	.word	0x0802a3e2
 80033c0:	0802a4ec 	.word	0x0802a4ec

080033c4 <_ZN23FrontendApplicationBase30gotoHomeScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoHomeScreenNoTransitionImpl()
{
    touchgfx::makeTransition<HomeView, HomePresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80033c4:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
{
 80033c8:	b507      	push	{r0, r1, r2, lr}
    touchgfx::makeTransition<HomeView, HomePresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80033ca:	f500 719c 	add.w	r1, r0, #312	; 0x138
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	4b04      	ldr	r3, [pc, #16]	; (80033e4 <_ZN23FrontendApplicationBase30gotoHomeScreenNoTransitionImplEv+0x20>)
 80033d2:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 80033d6:	4804      	ldr	r0, [pc, #16]	; (80033e8 <_ZN23FrontendApplicationBase30gotoHomeScreenNoTransitionImplEv+0x24>)
 80033d8:	f7ff ff56 	bl	8003288 <_ZN8touchgfx14makeTransitionI8HomeView13HomePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80033dc:	b003      	add	sp, #12
 80033de:	f85d fb04 	ldr.w	pc, [sp], #4
 80033e2:	bf00      	nop
 80033e4:	20014c24 	.word	0x20014c24
 80033e8:	20014c20 	.word	0x20014c20

080033ec <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 80033ec:	6a00      	ldr	r0, [r0, #32]
 80033ee:	4770      	bx	lr

080033f0 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 80033f0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80033f2:	4770      	bx	lr

080033f4 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 80033f4:	4770      	bx	lr

080033f6 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80033f6:	888b      	ldrh	r3, [r1, #4]
 80033f8:	6980      	ldr	r0, [r0, #24]
 80033fa:	0adb      	lsrs	r3, r3, #11
 80033fc:	680a      	ldr	r2, [r1, #0]
 80033fe:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8003402:	4410      	add	r0, r2
 8003404:	4770      	bx	lr

08003406 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8003406:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 8003408:	b1c2      	cbz	r2, 800343c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 800340a:	7b13      	ldrb	r3, [r2, #12]
 800340c:	b1b3      	cbz	r3, 800343c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800340e:	7b54      	ldrb	r4, [r2, #13]
 8003410:	7ad2      	ldrb	r2, [r2, #11]
 8003412:	0224      	lsls	r4, r4, #8
 8003414:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8003418:	4314      	orrs	r4, r2
 800341a:	69c2      	ldr	r2, [r0, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800341c:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800341e:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 8003422:	8813      	ldrh	r3, [r2, #0]
 8003424:	428b      	cmp	r3, r1
 8003426:	d102      	bne.n	800342e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8003428:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 800342c:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 800342e:	d805      	bhi.n	800343c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003430:	3801      	subs	r0, #1
 8003432:	3204      	adds	r2, #4
 8003434:	b280      	uxth	r0, r0
 8003436:	2800      	cmp	r0, #0
 8003438:	d1f3      	bne.n	8003422 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800343a:	e7f7      	b.n	800342c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 800343c:	2000      	movs	r0, #0
 800343e:	e7f5      	b.n	800342c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08003440 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003440:	b510      	push	{r4, lr}
 8003442:	4604      	mov	r4, r0
 8003444:	2128      	movs	r1, #40	; 0x28
 8003446:	f023 ffaf 	bl	80273a8 <_ZdlPvj>
 800344a:	4620      	mov	r0, r4
 800344c:	bd10      	pop	{r4, pc}
	...

08003450 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8003450:	b530      	push	{r4, r5, lr}
 8003452:	b089      	sub	sp, #36	; 0x24
 8003454:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8003456:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 800345a:	9506      	str	r5, [sp, #24]
 800345c:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8003460:	9505      	str	r5, [sp, #20]
 8003462:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8003466:	9504      	str	r5, [sp, #16]
 8003468:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 800346c:	9503      	str	r5, [sp, #12]
 800346e:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 8003472:	9502      	str	r5, [sp, #8]
 8003474:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8003478:	9501      	str	r5, [sp, #4]
 800347a:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 800347e:	9500      	str	r5, [sp, #0]
 8003480:	f016 fb58 	bl	8019b34 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8003484:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x50>)
}
 8003486:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8003488:	6023      	str	r3, [r4, #0]
 800348a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800348c:	61a3      	str	r3, [r4, #24]
 800348e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003490:	61e3      	str	r3, [r4, #28]
 8003492:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003494:	6223      	str	r3, [r4, #32]
 8003496:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003498:	6263      	str	r3, [r4, #36]	; 0x24
}
 800349a:	b009      	add	sp, #36	; 0x24
 800349c:	bd30      	pop	{r4, r5, pc}
 800349e:	bf00      	nop
 80034a0:	0802a510 	.word	0x0802a510

080034a4 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 80034a4:	2000      	movs	r0, #0
 80034a6:	4770      	bx	lr

080034a8 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 80034a8:	8081      	strh	r1, [r0, #4]
    }
 80034aa:	4770      	bx	lr

080034ac <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 80034ac:	80c1      	strh	r1, [r0, #6]
    }
 80034ae:	4770      	bx	lr

080034b0 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 80034b0:	8101      	strh	r1, [r0, #8]
    }
 80034b2:	4770      	bx	lr

080034b4 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 80034b4:	8141      	strh	r1, [r0, #10]
    }
 80034b6:	4770      	bx	lr

080034b8 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 80034b8:	4770      	bx	lr

080034ba <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
    }
 80034ba:	4770      	bx	lr

080034bc <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
    }
 80034bc:	4770      	bx	lr

080034be <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
    }
 80034be:	4770      	bx	lr

080034c0 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 80034c0:	4770      	bx	lr

080034c2 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80034c2:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 80034c4:	88c4      	ldrh	r4, [r0, #6]
 80034c6:	6803      	ldr	r3, [r0, #0]
 80034c8:	1b12      	subs	r2, r2, r4
 80034ca:	8884      	ldrh	r4, [r0, #4]
 80034cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ce:	1b09      	subs	r1, r1, r4
 80034d0:	b212      	sxth	r2, r2
    }
 80034d2:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 80034d6:	b209      	sxth	r1, r1
 80034d8:	4718      	bx	r3

080034da <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80034da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034de:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80034e0:	f04f 33ff 	mov.w	r3, #4294967295
 80034e4:	6203      	str	r3, [r0, #32]
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 80034e6:	6813      	ldr	r3, [r2, #0]
 80034e8:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 80034ea:	6010      	str	r0, [r2, #0]
    }
 80034ec:	4770      	bx	lr

080034ee <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 80034ee:	4770      	bx	lr

080034f0 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 80034f0:	4770      	bx	lr

080034f2 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 80034f2:	4770      	bx	lr

080034f4 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 80034f4:	4770      	bx	lr

080034f6 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
    }
 80034f6:	4770      	bx	lr

080034f8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 80034f8:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80034fc:	b11a      	cbz	r2, 8003506 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 80034fe:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8003502:	b102      	cbz	r2, 8003506 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8003504:	6018      	str	r0, [r3, #0]
        }
    }
 8003506:	4770      	bx	lr

08003508 <_ZN12HomeViewBaseD1Ev>:

class HomeViewBase : public touchgfx::View<HomePresenter>
{
public:
    HomeViewBase();
    virtual ~HomeViewBase() {}
 8003508:	4770      	bx	lr

0800350a <_ZN12HomeViewBase9switchLedEv>:
     * Virtual Action Handlers
     */
    virtual void switchLed()
    {
        // Override and implement this function in Home
    }
 800350a:	4770      	bx	lr

0800350c <_ZN12HomeViewBase11setupScreenEv>:
}

void HomeViewBase::setupScreen()
{

}
 800350c:	4770      	bx	lr

0800350e <_ZN8touchgfx8CallbackI12HomeViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800350e:	4770      	bx	lr

08003510 <_ZN8touchgfx8CallbackI12HomeViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8003510:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8003512:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8003514:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 8003516:	68c2      	ldr	r2, [r0, #12]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	1055      	asrs	r5, r2, #1
 800351c:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8003520:	07d2      	lsls	r2, r2, #31
 8003522:	bf48      	it	mi
 8003524:	5962      	ldrmi	r2, [r4, r5]
    }
 8003526:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8003528:	bf48      	it	mi
 800352a:	58d3      	ldrmi	r3, [r2, r3]
 800352c:	4718      	bx	r3

0800352e <_ZNK8touchgfx8CallbackI12HomeViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun_1 != 0);
 800352e:	6843      	ldr	r3, [r0, #4]
 8003530:	b12b      	cbz	r3, 800353e <_ZNK8touchgfx8CallbackI12HomeViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x10>
 8003532:	6883      	ldr	r3, [r0, #8]
 8003534:	b92b      	cbnz	r3, 8003542 <_ZNK8touchgfx8CallbackI12HomeViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8003536:	68c0      	ldr	r0, [r0, #12]
 8003538:	f000 0001 	and.w	r0, r0, #1
 800353c:	4770      	bx	lr
 800353e:	4618      	mov	r0, r3
 8003540:	4770      	bx	lr
 8003542:	2001      	movs	r0, #1
    }
 8003544:	4770      	bx	lr

08003546 <_ZN8touchgfx8CallbackI12HomeViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003546:	b510      	push	{r4, lr}
 8003548:	4604      	mov	r4, r0
 800354a:	2110      	movs	r1, #16
 800354c:	f023 ff2c 	bl	80273a8 <_ZdlPvj>
 8003550:	4620      	mov	r0, r4
 8003552:	bd10      	pop	{r4, pc}

08003554 <_ZN12HomeViewBaseD0Ev>:
    virtual ~HomeViewBase() {}
 8003554:	b510      	push	{r4, lr}
 8003556:	4604      	mov	r4, r0
 8003558:	21dc      	movs	r1, #220	; 0xdc
 800355a:	f023 ff25 	bl	80273a8 <_ZdlPvj>
 800355e:	4620      	mov	r0, r4
 8003560:	bd10      	pop	{r4, pc}

08003562 <_ZN12HomeViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void HomeViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &btn)
 8003562:	f100 0298 	add.w	r2, r0, #152	; 0x98
 8003566:	428a      	cmp	r2, r1
 8003568:	d102      	bne.n	8003570 <_ZN12HomeViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xe>
    {
        //Led
        //When btn clicked call virtual function
        //Call switchLed
        switchLed();
 800356a:	6803      	ldr	r3, [r0, #0]
 800356c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356e:	4718      	bx	r3
    }
}
 8003570:	4770      	bx	lr

08003572 <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 8003572:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8003574:	b570      	push	{r4, r5, r6, lr}
 8003576:	4604      	mov	r4, r0
        setX(x);
 8003578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    void setXY(int16_t x, int16_t y)
 800357a:	4615      	mov	r5, r2
        setX(x);
 800357c:	4798      	blx	r3
        setY(y);
 800357e:	6823      	ldr	r3, [r4, #0]
 8003580:	4620      	mov	r0, r4
 8003582:	4629      	mov	r1, r5
 8003584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    }
 8003586:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 800358a:	4718      	bx	r3

0800358c <_ZN8touchgfx8Drawable14setWidthHeightEss>:
        setWidth(width);
 800358c:	6803      	ldr	r3, [r0, #0]
    void setWidthHeight(int16_t width, int16_t height)
 800358e:	b570      	push	{r4, r5, r6, lr}
 8003590:	4604      	mov	r4, r0
        setWidth(width);
 8003592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    void setWidthHeight(int16_t width, int16_t height)
 8003594:	4615      	mov	r5, r2
        setWidth(width);
 8003596:	4798      	blx	r3
        setHeight(height);
 8003598:	6823      	ldr	r3, [r4, #0]
 800359a:	4620      	mov	r0, r4
 800359c:	4629      	mov	r1, r5
 800359e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    }
 80035a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 80035a4:	4718      	bx	r3
	...

080035a8 <_ZN8touchgfx3BoxC1Ev>:
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 80035a8:	4a09      	ldr	r2, [pc, #36]	; (80035d0 <_ZN8touchgfx3BoxC1Ev+0x28>)
          visible(true)
 80035aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80035ae:	6002      	str	r2, [r0, #0]
 80035b0:	2200      	movs	r2, #0
 80035b2:	8481      	strh	r1, [r0, #36]	; 0x24
 80035b4:	21ff      	movs	r1, #255	; 0xff
        : color(col)
 80035b6:	6282      	str	r2, [r0, #40]	; 0x28
 80035b8:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
        : x(0), y(0), width(0), height(0)
 80035bc:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80035c0:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80035c4:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80035c8:	e9c0 2207 	strd	r2, r2, [r0, #28]
    {
    }
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	0802d3fc 	.word	0x0802d3fc

080035d4 <_ZN12HomeViewBaseC1Ev>:
HomeViewBase::HomeViewBase() :
 80035d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80035d8:	4604      	mov	r4, r0
        : presenter(0)
 80035da:	2500      	movs	r5, #0
 80035dc:	f016 fc9e 	bl	8019f1c <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &HomeViewBase::buttonCallbackHandler)
 80035e0:	4b39      	ldr	r3, [pc, #228]	; (80036c8 <_ZN12HomeViewBaseC1Ev+0xf4>)
 80035e2:	4626      	mov	r6, r4
 80035e4:	f104 076c 	add.w	r7, r4, #108	; 0x6c
 80035e8:	63e5      	str	r5, [r4, #60]	; 0x3c
 80035ea:	f104 0898 	add.w	r8, r4, #152	; 0x98
 80035ee:	f846 3b40 	str.w	r3, [r6], #64
 80035f2:	4630      	mov	r0, r6
 80035f4:	f7ff ffd8 	bl	80035a8 <_ZN8touchgfx3BoxC1Ev>
 80035f8:	4638      	mov	r0, r7
 80035fa:	f7ff ffd5 	bl	80035a8 <_ZN8touchgfx3BoxC1Ev>
        touchable = touch;
 80035fe:	f240 1301 	movw	r3, #257	; 0x101
        setXY(x, y);
 8003602:	462a      	mov	r2, r5
 8003604:	4629      	mov	r1, r5
        touchable = touch;
 8003606:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
        setXY(x, y);
 800360a:	4630      	mov	r0, r6
 */
class Button : public AbstractButton
{
public:
    Button()
        : AbstractButton(), up(), down(), alpha(255)
 800360c:	4b2f      	ldr	r3, [pc, #188]	; (80036cc <_ZN12HomeViewBaseC1Ev+0xf8>)
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
        : Widget(), action(), pressed(false)
 800360e:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
 8003612:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8003616:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800361a:	f884 50c4 	strb.w	r5, [r4, #196]	; 0xc4
 800361e:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 8003622:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
 8003626:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
        : pobject(pobject), pmemfun_1(pmemfun_1)
 800362a:	4b29      	ldr	r3, [pc, #164]	; (80036d0 <_ZN12HomeViewBaseC1Ev+0xfc>)
 800362c:	e9c4 3433 	strd	r3, r4, [r4, #204]	; 0xcc
 8003630:	4b28      	ldr	r3, [pc, #160]	; (80036d4 <_ZN12HomeViewBaseC1Ev+0x100>)
 8003632:	e9c4 5527 	strd	r5, r5, [r4, #156]	; 0x9c
 8003636:	e9c4 3535 	strd	r3, r5, [r4, #212]	; 0xd4
 800363a:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
          visible(true)
 800363e:	e9c4 552b 	strd	r5, r5, [r4, #172]	; 0xac
 8003642:	e9c4 552d 	strd	r5, r5, [r4, #180]	; 0xb4
        setXY(x, y);
 8003646:	f7ff ff94 	bl	8003572 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800364a:	4630      	mov	r0, r6
 800364c:	f44f 7288 	mov.w	r2, #272	; 0x110
 8003650:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8003654:	f7ff ff9a 	bl	800358c <_ZN8touchgfx8Drawable14setWidthHeightEss>
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
    {
        this->color = color;
 8003658:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
        setXY(x, y);
 800365c:	462a      	mov	r2, r5
 800365e:	4629      	mov	r1, r5
 8003660:	66a3      	str	r3, [r4, #104]	; 0x68
 8003662:	4638      	mov	r0, r7
 8003664:	f7ff ff85 	bl	8003572 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8003668:	4638      	mov	r0, r7
 800366a:	f44f 7288 	mov.w	r2, #272	; 0x110
 800366e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8003672:	f7ff ff8b 	bl	800358c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8003676:	f04f 33ff 	mov.w	r3, #4294967295
    btn.setXY(155, 106);
 800367a:	4640      	mov	r0, r8
 800367c:	226a      	movs	r2, #106	; 0x6a
 800367e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8003682:	219b      	movs	r1, #155	; 0x9b
 8003684:	f7ff ff75 	bl	8003572 <_ZN8touchgfx8Drawable5setXYEss>
 8003688:	2301      	movs	r3, #1
    btn.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 800368a:	aa03      	add	r2, sp, #12
 800368c:	a902      	add	r1, sp, #8
 800368e:	4640      	mov	r0, r8
 8003690:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003694:	f8ad 5008 	strh.w	r5, [sp, #8]
 8003698:	f014 f8ee 	bl	8017878 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    btn.setAction(buttonCallback);
 800369c:	f104 03cc 	add.w	r3, r4, #204	; 0xcc
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 80036a0:	1d20      	adds	r0, r4, #4
 80036a2:	4631      	mov	r1, r6
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 80036a4:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 80036a8:	9001      	str	r0, [sp, #4]
 80036aa:	f012 fe73 	bl	8016394 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80036ae:	4639      	mov	r1, r7
 80036b0:	9801      	ldr	r0, [sp, #4]
 80036b2:	f012 fe6f 	bl	8016394 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80036b6:	9801      	ldr	r0, [sp, #4]
 80036b8:	4641      	mov	r1, r8
 80036ba:	f012 fe6b 	bl	8016394 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80036be:	4620      	mov	r0, r4
 80036c0:	b004      	add	sp, #16
 80036c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036c6:	bf00      	nop
 80036c8:	0802a580 	.word	0x0802a580
 80036cc:	0802d4c4 	.word	0x0802d4c4
 80036d0:	0802a568 	.word	0x0802a568
 80036d4:	08003563 	.word	0x08003563

080036d8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80036d8:	4770      	bx	lr
	...

080036dc <_Z23getFont_verdana_10_4bppv>:
{
 80036dc:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80036de:	4d15      	ldr	r5, [pc, #84]	; (8003734 <_Z23getFont_verdana_10_4bppv+0x58>)
{
 80036e0:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80036e2:	782c      	ldrb	r4, [r5, #0]
 80036e4:	f3bf 8f5b 	dmb	ish
 80036e8:	f014 0401 	ands.w	r4, r4, #1
 80036ec:	d11e      	bne.n	800372c <_Z23getFont_verdana_10_4bppv+0x50>
 80036ee:	4628      	mov	r0, r5
 80036f0:	f023 fe5c 	bl	80273ac <__cxa_guard_acquire>
 80036f4:	b1d0      	cbz	r0, 800372c <_Z23getFont_verdana_10_4bppv+0x50>
 80036f6:	233f      	movs	r3, #63	; 0x3f
 80036f8:	2201      	movs	r2, #1
 80036fa:	490f      	ldr	r1, [pc, #60]	; (8003738 <_Z23getFont_verdana_10_4bppv+0x5c>)
 80036fc:	9307      	str	r3, [sp, #28]
 80036fe:	4b0f      	ldr	r3, [pc, #60]	; (800373c <_Z23getFont_verdana_10_4bppv+0x60>)
 8003700:	480f      	ldr	r0, [pc, #60]	; (8003740 <_Z23getFont_verdana_10_4bppv+0x64>)
 8003702:	9306      	str	r3, [sp, #24]
 8003704:	4b0f      	ldr	r3, [pc, #60]	; (8003744 <_Z23getFont_verdana_10_4bppv+0x68>)
 8003706:	9408      	str	r4, [sp, #32]
 8003708:	9403      	str	r4, [sp, #12]
 800370a:	9400      	str	r4, [sp, #0]
 800370c:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8003710:	2304      	movs	r3, #4
 8003712:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8003716:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800371a:	230a      	movs	r3, #10
 800371c:	f7ff fe98 	bl	8003450 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003720:	4628      	mov	r0, r5
 8003722:	f023 fe4f 	bl	80273c4 <__cxa_guard_release>
 8003726:	4808      	ldr	r0, [pc, #32]	; (8003748 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8003728:	f023 fe8a 	bl	8027440 <atexit>
    return verdana_10_4bpp;
}
 800372c:	4804      	ldr	r0, [pc, #16]	; (8003740 <_Z23getFont_verdana_10_4bppv+0x64>)
 800372e:	b00d      	add	sp, #52	; 0x34
 8003730:	bd30      	pop	{r4, r5, pc}
 8003732:	bf00      	nop
 8003734:	2000192c 	.word	0x2000192c
 8003738:	90014038 	.word	0x90014038
 800373c:	0802ec9c 	.word	0x0802ec9c
 8003740:	20001930 	.word	0x20001930
 8003744:	0802eca8 	.word	0x0802eca8
 8003748:	080036d9 	.word	0x080036d9

0800374c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800374c:	4770      	bx	lr
	...

08003750 <_Z23getFont_verdana_20_4bppv>:
{
 8003750:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003752:	4d15      	ldr	r5, [pc, #84]	; (80037a8 <_Z23getFont_verdana_20_4bppv+0x58>)
{
 8003754:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003756:	782c      	ldrb	r4, [r5, #0]
 8003758:	f3bf 8f5b 	dmb	ish
 800375c:	f014 0401 	ands.w	r4, r4, #1
 8003760:	d11e      	bne.n	80037a0 <_Z23getFont_verdana_20_4bppv+0x50>
 8003762:	4628      	mov	r0, r5
 8003764:	f023 fe22 	bl	80273ac <__cxa_guard_acquire>
 8003768:	b1d0      	cbz	r0, 80037a0 <_Z23getFont_verdana_20_4bppv+0x50>
 800376a:	233f      	movs	r3, #63	; 0x3f
 800376c:	2201      	movs	r2, #1
 800376e:	490f      	ldr	r1, [pc, #60]	; (80037ac <_Z23getFont_verdana_20_4bppv+0x5c>)
 8003770:	9307      	str	r3, [sp, #28]
 8003772:	4b0f      	ldr	r3, [pc, #60]	; (80037b0 <_Z23getFont_verdana_20_4bppv+0x60>)
 8003774:	480f      	ldr	r0, [pc, #60]	; (80037b4 <_Z23getFont_verdana_20_4bppv+0x64>)
 8003776:	9306      	str	r3, [sp, #24]
 8003778:	4b0f      	ldr	r3, [pc, #60]	; (80037b8 <_Z23getFont_verdana_20_4bppv+0x68>)
 800377a:	9408      	str	r4, [sp, #32]
 800377c:	9403      	str	r4, [sp, #12]
 800377e:	9400      	str	r4, [sp, #0]
 8003780:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8003784:	2304      	movs	r3, #4
 8003786:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 800378a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800378e:	2314      	movs	r3, #20
 8003790:	f7ff fe5e 	bl	8003450 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003794:	4628      	mov	r0, r5
 8003796:	f023 fe15 	bl	80273c4 <__cxa_guard_release>
 800379a:	4808      	ldr	r0, [pc, #32]	; (80037bc <_Z23getFont_verdana_20_4bppv+0x6c>)
 800379c:	f023 fe50 	bl	8027440 <atexit>
    return verdana_20_4bpp;
}
 80037a0:	4804      	ldr	r0, [pc, #16]	; (80037b4 <_Z23getFont_verdana_20_4bppv+0x64>)
 80037a2:	b00d      	add	sp, #52	; 0x34
 80037a4:	bd30      	pop	{r4, r5, pc}
 80037a6:	bf00      	nop
 80037a8:	20001958 	.word	0x20001958
 80037ac:	90014048 	.word	0x90014048
 80037b0:	0802eca0 	.word	0x0802eca0
 80037b4:	2000195c 	.word	0x2000195c
 80037b8:	0802ecac 	.word	0x0802ecac
 80037bc:	0800374d 	.word	0x0800374d

080037c0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80037c0:	4770      	bx	lr
	...

080037c4 <_Z23getFont_verdana_40_4bppv>:
{
 80037c4:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80037c6:	4d15      	ldr	r5, [pc, #84]	; (800381c <_Z23getFont_verdana_40_4bppv+0x58>)
{
 80037c8:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80037ca:	782c      	ldrb	r4, [r5, #0]
 80037cc:	f3bf 8f5b 	dmb	ish
 80037d0:	f014 0401 	ands.w	r4, r4, #1
 80037d4:	d11e      	bne.n	8003814 <_Z23getFont_verdana_40_4bppv+0x50>
 80037d6:	4628      	mov	r0, r5
 80037d8:	f023 fde8 	bl	80273ac <__cxa_guard_acquire>
 80037dc:	b1d0      	cbz	r0, 8003814 <_Z23getFont_verdana_40_4bppv+0x50>
 80037de:	233f      	movs	r3, #63	; 0x3f
 80037e0:	2201      	movs	r2, #1
 80037e2:	490f      	ldr	r1, [pc, #60]	; (8003820 <_Z23getFont_verdana_40_4bppv+0x5c>)
 80037e4:	9307      	str	r3, [sp, #28]
 80037e6:	4b0f      	ldr	r3, [pc, #60]	; (8003824 <_Z23getFont_verdana_40_4bppv+0x60>)
 80037e8:	480f      	ldr	r0, [pc, #60]	; (8003828 <_Z23getFont_verdana_40_4bppv+0x64>)
 80037ea:	9306      	str	r3, [sp, #24]
 80037ec:	4b0f      	ldr	r3, [pc, #60]	; (800382c <_Z23getFont_verdana_40_4bppv+0x68>)
 80037ee:	9408      	str	r4, [sp, #32]
 80037f0:	9403      	str	r4, [sp, #12]
 80037f2:	9400      	str	r4, [sp, #0]
 80037f4:	e9cd 4304 	strd	r4, r3, [sp, #16]
 80037f8:	2304      	movs	r3, #4
 80037fa:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80037fe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003802:	2328      	movs	r3, #40	; 0x28
 8003804:	f7ff fe24 	bl	8003450 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003808:	4628      	mov	r0, r5
 800380a:	f023 fddb 	bl	80273c4 <__cxa_guard_release>
 800380e:	4808      	ldr	r0, [pc, #32]	; (8003830 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8003810:	f023 fe16 	bl	8027440 <atexit>
    return verdana_40_4bpp;
}
 8003814:	4804      	ldr	r0, [pc, #16]	; (8003828 <_Z23getFont_verdana_40_4bppv+0x64>)
 8003816:	b00d      	add	sp, #52	; 0x34
 8003818:	bd30      	pop	{r4, r5, pc}
 800381a:	bf00      	nop
 800381c:	20001984 	.word	0x20001984
 8003820:	90014058 	.word	0x90014058
 8003824:	0802eca4 	.word	0x0802eca4
 8003828:	20001988 	.word	0x20001988
 800382c:	0802ecb0 	.word	0x0802ecb0
 8003830:	080037c1 	.word	0x080037c1

08003834 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 8003834:	2000      	movs	r0, #0
 8003836:	4770      	bx	lr

08003838 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 8003838:	2000      	movs	r0, #0
 800383a:	4770      	bx	lr

0800383c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800383c:	b40e      	push	{r1, r2, r3}
 800383e:	b503      	push	{r0, r1, lr}
 8003840:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8003842:	2100      	movs	r1, #0
{
 8003844:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8003848:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800384a:	f015 ffa7 	bl	801979c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 800384e:	b002      	add	sp, #8
 8003850:	f85d eb04 	ldr.w	lr, [sp], #4
 8003854:	b003      	add	sp, #12
 8003856:	4770      	bx	lr

08003858 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003858:	b40c      	push	{r2, r3}
 800385a:	b507      	push	{r0, r1, r2, lr}
 800385c:	ab04      	add	r3, sp, #16
 800385e:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8003862:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8003864:	f015 ff9a 	bl	801979c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003868:	b003      	add	sp, #12
 800386a:	f85d eb04 	ldr.w	lr, [sp], #4
 800386e:	b002      	add	sp, #8
 8003870:	4770      	bx	lr
	...

08003874 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8003874:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8003876:	b510      	push	{r4, lr}
 8003878:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 800387a:	b373      	cbz	r3, 80038da <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800387c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 800387e:	b92b      	cbnz	r3, 800388c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8003880:	4b18      	ldr	r3, [pc, #96]	; (80038e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8003882:	21c0      	movs	r1, #192	; 0xc0
 8003884:	4a18      	ldr	r2, [pc, #96]	; (80038e8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8003886:	4819      	ldr	r0, [pc, #100]	; (80038ec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8003888:	f023 fdbc 	bl	8027404 <__assert_func>
            return buffer[pos];
 800388c:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800388e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003892:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003894:	b30b      	cbz	r3, 80038da <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8003896:	f017 fa03 	bl	801aca0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 800389a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800389c:	2b01      	cmp	r3, #1
 800389e:	d803      	bhi.n	80038a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 80038a0:	4b13      	ldr	r3, [pc, #76]	; (80038f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 80038a2:	21c5      	movs	r1, #197	; 0xc5
 80038a4:	4a13      	ldr	r2, [pc, #76]	; (80038f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 80038a6:	e7ee      	b.n	8003886 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 80038a8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 80038aa:	f640 103f 	movw	r0, #2367	; 0x93f
 80038ae:	1c53      	adds	r3, r2, #1
 80038b0:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 80038b2:	2b09      	cmp	r3, #9
 80038b4:	4619      	mov	r1, r3
 80038b6:	bf88      	it	hi
 80038b8:	f1a3 010a 	subhi.w	r1, r3, #10
 80038bc:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80038c0:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 80038c2:	4281      	cmp	r1, r0
 80038c4:	d109      	bne.n	80038da <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 80038c6:	2b0a      	cmp	r3, #10
 80038c8:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80038cc:	bf28      	it	cs
 80038ce:	2300      	movcs	r3, #0
            return buffer[pos];
 80038d0:	8c50      	ldrh	r0, [r2, #34]	; 0x22
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 80038d2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80038d6:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 80038d8:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 80038da:	4620      	mov	r0, r4
}
 80038dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 80038e0:	f017 b8c2 	b.w	801aa68 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80038e4:	0802a5b0 	.word	0x0802a5b0
 80038e8:	0802a5b9 	.word	0x0802a5b9
 80038ec:	0802a664 	.word	0x0802a664
 80038f0:	0802a6ae 	.word	0x0802a6ae
 80038f4:	0802a6bc 	.word	0x0802a6bc

080038f8 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 80038f8:	f017 b86e 	b.w	801a9d8 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

080038fc <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80038fc:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 80038fe:	bb10      	cbnz	r0, 8003946 <_ZN8touchgfx5Texts11setLanguageEt+0x4a>
    {
        if (languagesArray[id] != 0)
 8003900:	4b11      	ldr	r3, [pc, #68]	; (8003948 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>)
 8003902:	4812      	ldr	r0, [pc, #72]	; (800394c <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4912      	ldr	r1, [pc, #72]	; (8003950 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8003908:	b1b3      	cbz	r3, 8003938 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800390a:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800390c:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800390e:	441a      	add	r2, r3
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8003910:	441c      	add	r4, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8003912:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	441a      	add	r2, r3
 8003918:	600a      	str	r2, [r1, #0]
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 800391a:	4b0e      	ldr	r3, [pc, #56]	; (8003954 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 800391c:	2200      	movs	r2, #0
 800391e:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8003920:	f000 f826 	bl	8003970 <_ZN17TypedTextDatabase8getFontsEv>
 8003924:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8003926:	f000 f821 	bl	800396c <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 800392a:	4b0b      	ldr	r3, [pc, #44]	; (8003958 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 800392c:	601c      	str	r4, [r3, #0]
        fonts = f;
 800392e:	4b0b      	ldr	r3, [pc, #44]	; (800395c <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8003930:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8003932:	4b0b      	ldr	r3, [pc, #44]	; (8003960 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8003934:	8018      	strh	r0, [r3, #0]
    }
}
 8003936:	e006      	b.n	8003946 <_ZN8touchgfx5Texts11setLanguageEt+0x4a>
            currentLanguageIndices = staticLanguageIndices[id];
 8003938:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800393a:	4b0a      	ldr	r3, [pc, #40]	; (8003964 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
            currentLanguagePtr = texts_all_languages;
 800393c:	4a0a      	ldr	r2, [pc, #40]	; (8003968 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800393e:	681c      	ldr	r4, [r3, #0]
            currentLanguagePtr = texts_all_languages;
 8003940:	6002      	str	r2, [r0, #0]
    if (currentLanguageTypedText)
 8003942:	2c00      	cmp	r4, #0
 8003944:	d1e9      	bne.n	800391a <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8003946:	bd38      	pop	{r3, r4, r5, pc}
 8003948:	200019b0 	.word	0x200019b0
 800394c:	200019b4 	.word	0x200019b4
 8003950:	200019b8 	.word	0x200019b8
 8003954:	200019bc 	.word	0x200019bc
 8003958:	20014c34 	.word	0x20014c34
 800395c:	20014c3c 	.word	0x20014c3c
 8003960:	20014c38 	.word	0x20014c38
 8003964:	90014070 	.word	0x90014070
 8003968:	90014068 	.word	0x90014068

0800396c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 800396c:	2001      	movs	r0, #1
 800396e:	4770      	bx	lr

08003970 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8003970:	4800      	ldr	r0, [pc, #0]	; (8003974 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8003972:	4770      	bx	lr
 8003974:	200019c0 	.word	0x200019c0

08003978 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8003978:	b510      	push	{r4, lr}
};
 800397a:	4c05      	ldr	r4, [pc, #20]	; (8003990 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
 800397c:	f7ff fee8 	bl	8003750 <_Z23getFont_verdana_20_4bppv>
};
 8003980:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8003982:	f7ff ff1f 	bl	80037c4 <_Z23getFont_verdana_40_4bppv>
};
 8003986:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 8003988:	f7ff fea8 	bl	80036dc <_Z23getFont_verdana_10_4bppv>
};
 800398c:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 800398e:	bd10      	pop	{r4, pc}
 8003990:	200019c0 	.word	0x200019c0

08003994 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8003994:	4770      	bx	lr

08003996 <_ZN19FrontendApplicationD0Ev>:
 8003996:	b510      	push	{r4, lr}
 8003998:	4604      	mov	r4, r0
 800399a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800399e:	f023 fd03 	bl	80273a8 <_ZdlPvj>
 80039a2:	4620      	mov	r0, r4
 80039a4:	bd10      	pop	{r4, pc}

080039a6 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80039a6:	b510      	push	{r4, lr}
 80039a8:	4604      	mov	r4, r0
    {
        model.tick();
 80039aa:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
 80039ae:	f000 f844 	bl	8003a3a <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80039b2:	4620      	mov	r0, r4
    }
 80039b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 80039b8:	f014 bf64 	b.w	8018884 <_ZN8touchgfx11Application15handleTickEventEv>

080039bc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80039bc:	b510      	push	{r4, lr}
 80039be:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 80039c0:	f7ff fc26 	bl	8003210 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80039c4:	4b01      	ldr	r3, [pc, #4]	; (80039cc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 80039c6:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 80039c8:	6023      	str	r3, [r4, #0]
}
 80039ca:	bd10      	pop	{r4, pc}
 80039cc:	0802a798 	.word	0x0802a798

080039d0 <_ZN13HomePresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~HomePresenter() {};
 80039d0:	4770      	bx	lr

080039d2 <_ZThn4_N13HomePresenterD1Ev>:
 80039d2:	3804      	subs	r0, #4
 80039d4:	4770      	bx	lr

080039d6 <_ZN13HomePresenter10deactivateEv>:
}

void HomePresenter::activate()
{

}
 80039d6:	4770      	bx	lr

080039d8 <_ZN13HomePresenterD0Ev>:
 80039d8:	b510      	push	{r4, lr}
 80039da:	4604      	mov	r4, r0
 80039dc:	2110      	movs	r1, #16
 80039de:	f023 fce3 	bl	80273a8 <_ZdlPvj>
 80039e2:	4620      	mov	r0, r4
 80039e4:	bd10      	pop	{r4, pc}

080039e6 <_ZThn4_N13HomePresenterD0Ev>:
 80039e6:	f1a0 0004 	sub.w	r0, r0, #4
 80039ea:	e7f5      	b.n	80039d8 <_ZN13HomePresenterD0Ev>

080039ec <_ZN13HomePresenterC1ER8HomeView>:
    ModelListener() : model(0) {}
 80039ec:	2200      	movs	r2, #0
    : view(v)
 80039ee:	60c1      	str	r1, [r0, #12]
 80039f0:	6082      	str	r2, [r0, #8]
 80039f2:	4a04      	ldr	r2, [pc, #16]	; (8003a04 <_ZN13HomePresenterC1ER8HomeView+0x18>)
HomePresenter::HomePresenter(HomeView& v)
 80039f4:	b510      	push	{r4, lr}
    : view(v)
 80039f6:	f102 0408 	add.w	r4, r2, #8
 80039fa:	3220      	adds	r2, #32
 80039fc:	6004      	str	r4, [r0, #0]
 80039fe:	6042      	str	r2, [r0, #4]
}
 8003a00:	bd10      	pop	{r4, pc}
 8003a02:	bf00      	nop
 8003a04:	0802a7d4 	.word	0x0802a7d4

08003a08 <_ZN8HomeViewD1Ev>:

class HomeView : public HomeViewBase
{
public:
    HomeView();
    virtual ~HomeView() {}
 8003a08:	4770      	bx	lr

08003a0a <_ZN8HomeView14tearDownScreenEv>:
}

void HomeView::tearDownScreen()
{
    HomeViewBase::tearDownScreen();
}
 8003a0a:	4770      	bx	lr

08003a0c <_ZN8HomeView11setupScreenEv>:
    HomeViewBase::setupScreen();
 8003a0c:	f7ff bd7e 	b.w	800350c <_ZN12HomeViewBase11setupScreenEv>

08003a10 <_ZN8HomeViewD0Ev>:
 8003a10:	b510      	push	{r4, lr}
 8003a12:	4604      	mov	r4, r0
 8003a14:	21dc      	movs	r1, #220	; 0xdc
 8003a16:	f023 fcc7 	bl	80273a8 <_ZdlPvj>
 8003a1a:	4620      	mov	r0, r4
 8003a1c:	bd10      	pop	{r4, pc}
	...

08003a20 <_ZN8HomeViewC1Ev>:
HomeView::HomeView()
 8003a20:	b510      	push	{r4, lr}
 8003a22:	4604      	mov	r4, r0
 8003a24:	f7ff fdd6 	bl	80035d4 <_ZN12HomeViewBaseC1Ev>
 8003a28:	4b01      	ldr	r3, [pc, #4]	; (8003a30 <_ZN8HomeViewC1Ev+0x10>)
}
 8003a2a:	4620      	mov	r0, r4
HomeView::HomeView()
 8003a2c:	6023      	str	r3, [r4, #0]
}
 8003a2e:	bd10      	pop	{r4, pc}
 8003a30:	0802a804 	.word	0x0802a804

08003a34 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8003a34:	2200      	movs	r2, #0
 8003a36:	6002      	str	r2, [r0, #0]
{

}
 8003a38:	4770      	bx	lr

08003a3a <_ZN5Model4tickEv>:

void Model::tick()
{

}
 8003a3a:	4770      	bx	lr

08003a3c <QSPI_AutoPollingMemReady.constprop.0>:
  * @brief  This function read the SR of the memory and wait the EOP.
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 8003a3c:	b500      	push	{lr}
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003a3e:	f44f 7280 	mov.w	r2, #256	; 0x100
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 8003a42:	b095      	sub	sp, #84	; 0x54
  s_command.Instruction       = READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8003a44:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 8003a48:	4603      	mov	r3, r0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003a4a:	920c      	str	r2, [sp, #48]	; 0x30
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003a4c:	2205      	movs	r2, #5
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8003a4e:	910f      	str	r1, [sp, #60]	; 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  s_config.Match           = 0;
  s_config.Mask            = N25Q128A_SR_WIP;
 8003a50:	2101      	movs	r1, #1
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003a52:	9206      	str	r2, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003a54:	2200      	movs	r2, #0
  s_config.Mask            = N25Q128A_SR_WIP;
 8003a56:	9101      	str	r1, [sp, #4]
  s_command.DummyCycles       = 0;
 8003a58:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003a5a:	9213      	str	r2, [sp, #76]	; 0x4c
  s_config.Match           = 0;
 8003a5c:	9200      	str	r2, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 1;
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8003a5e:	480b      	ldr	r0, [pc, #44]	; (8003a8c <QSPI_AutoPollingMemReady.constprop.0+0x50>)
  s_config.StatusBytesSize = 1;
 8003a60:	e9cd 1203 	strd	r1, r2, [sp, #12]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003a64:	e9cd 220d 	strd	r2, r2, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003a68:	e9cd 2211 	strd	r2, r2, [sp, #68]	; 0x44
  s_config.Interval        = 0x10;
 8003a6c:	2210      	movs	r2, #16
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8003a6e:	a906      	add	r1, sp, #24
  s_config.Interval        = 0x10;
 8003a70:	9202      	str	r2, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003a72:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003a76:	9205      	str	r2, [sp, #20]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8003a78:	466a      	mov	r2, sp
 8003a7a:	f001 fdab 	bl	80055d4 <HAL_QSPI_AutoPolling>
  {
    return QSPI_ERROR;
  }

  return QSPI_OK;
}
 8003a7e:	3800      	subs	r0, #0
 8003a80:	bf18      	it	ne
 8003a82:	2001      	movne	r0, #1
 8003a84:	b015      	add	sp, #84	; 0x54
 8003a86:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a8a:	bf00      	nop
 8003a8c:	200150b0 	.word	0x200150b0

08003a90 <QSPI_WriteEnable.constprop.0>:
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8003a90:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003a92:	f44f 7380 	mov.w	r3, #256	; 0x100
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8003a96:	b095      	sub	sp, #84	; 0x54
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a9c:	4817      	ldr	r0, [pc, #92]	; (8003afc <QSPI_WriteEnable.constprop.0+0x6c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003a9e:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8003aa0:	2306      	movs	r3, #6
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003aa2:	a906      	add	r1, sp, #24
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8003aa4:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003aa6:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003aa8:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8003aac:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 0;
 8003aae:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003ab0:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003ab2:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003ab6:	f001 fd4a 	bl	800554e <HAL_QSPI_Command>
 8003aba:	b9e0      	cbnz	r0, 8003af6 <QSPI_WriteEnable.constprop.0+0x66>
  s_config.Match           = N25Q128A_SR_WREN;
 8003abc:	2302      	movs	r3, #2
  s_config.Interval        = 0x10;
 8003abe:	2201      	movs	r2, #1
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003ac0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003ac4:	9004      	str	r0, [sp, #16]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003ac6:	480d      	ldr	r0, [pc, #52]	; (8003afc <QSPI_WriteEnable.constprop.0+0x6c>)
  s_config.Mask            = N25Q128A_SR_WREN;
 8003ac8:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8003acc:	2310      	movs	r3, #16
 8003ace:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003ad2:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003ad4:	466a      	mov	r2, sp
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003ad6:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8003ada:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003ade:	a906      	add	r1, sp, #24
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8003ae0:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003ae2:	f241 3388 	movw	r3, #5000	; 0x1388
 8003ae6:	f001 fd75 	bl	80055d4 <HAL_QSPI_AutoPolling>
    return QSPI_ERROR;
 8003aea:	3800      	subs	r0, #0
 8003aec:	bf18      	it	ne
 8003aee:	2001      	movne	r0, #1
}
 8003af0:	b015      	add	sp, #84	; 0x54
 8003af2:	f85d fb04 	ldr.w	pc, [sp], #4
    return QSPI_ERROR;
 8003af6:	2001      	movs	r0, #1
 8003af8:	e7fa      	b.n	8003af0 <QSPI_WriteEnable.constprop.0+0x60>
 8003afa:	bf00      	nop
 8003afc:	200150b0 	.word	0x200150b0

08003b00 <BSP_QSPI_EnableMemoryMappedMode>:
{
 8003b00:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003b02:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8003b06:	b091      	sub	sp, #68	; 0x44
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003b08:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8003b0c:	480e      	ldr	r0, [pc, #56]	; (8003b48 <BSP_QSPI_EnableMemoryMappedMode+0x48>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003b0e:	9308      	str	r3, [sp, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8003b10:	23eb      	movs	r3, #235	; 0xeb
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8003b12:	a902      	add	r1, sp, #8
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8003b14:	9302      	str	r3, [sp, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8003b16:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003b1a:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8003b1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b20:	9305      	str	r3, [sp, #20]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003b22:	2300      	movs	r3, #0
 8003b24:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8003b28:	220a      	movs	r2, #10
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003b2a:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8003b2c:	9207      	str	r2, [sp, #28]
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8003b2e:	466a      	mov	r2, sp
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003b30:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8003b34:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8003b38:	f001 fd9c 	bl	8005674 <HAL_QSPI_MemoryMapped>
}
 8003b3c:	3800      	subs	r0, #0
 8003b3e:	bf18      	it	ne
 8003b40:	2001      	movne	r0, #1
 8003b42:	b011      	add	sp, #68	; 0x44
 8003b44:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b48:	200150b0 	.word	0x200150b0

08003b4c <BSP_QSPI_MspInit>:
  QSPI_CLK_ENABLE();
 8003b4c:	4b45      	ldr	r3, [pc, #276]	; (8003c64 <BSP_QSPI_MspInit+0x118>)
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8003b4e:	2101      	movs	r1, #1
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8003b50:	4845      	ldr	r0, [pc, #276]	; (8003c68 <BSP_QSPI_MspInit+0x11c>)
  QSPI_CLK_ENABLE();
 8003b52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b54:	f042 0202 	orr.w	r2, r2, #2
{
 8003b58:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPI_CLK_ENABLE();
 8003b5a:	639a      	str	r2, [r3, #56]	; 0x38
{
 8003b5c:	b08d      	sub	sp, #52	; 0x34
  QSPI_CLK_ENABLE();
 8003b5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8003b60:	2409      	movs	r4, #9
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8003b62:	2704      	movs	r7, #4
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003b64:	2600      	movs	r6, #0
  QSPI_CLK_ENABLE();
 8003b66:	f002 0202 	and.w	r2, r2, #2
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8003b6a:	4d40      	ldr	r5, [pc, #256]	; (8003c6c <BSP_QSPI_MspInit+0x120>)
  QSPI_CLK_ENABLE();
 8003b6c:	9200      	str	r2, [sp, #0]
 8003b6e:	9a00      	ldr	r2, [sp, #0]
  QSPI_FORCE_RESET();
 8003b70:	699a      	ldr	r2, [r3, #24]
 8003b72:	f042 0202 	orr.w	r2, r2, #2
 8003b76:	619a      	str	r2, [r3, #24]
  QSPI_RELEASE_RESET();
 8003b78:	699a      	ldr	r2, [r3, #24]
 8003b7a:	f022 0202 	bic.w	r2, r2, #2
 8003b7e:	619a      	str	r2, [r3, #24]
  QSPI_CS_GPIO_CLK_ENABLE();
 8003b80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b82:	f042 0202 	orr.w	r2, r2, #2
 8003b86:	631a      	str	r2, [r3, #48]	; 0x30
 8003b88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b8a:	f002 0202 	and.w	r2, r2, #2
 8003b8e:	9201      	str	r2, [sp, #4]
 8003b90:	9a01      	ldr	r2, [sp, #4]
  QSPI_CLK_GPIO_CLK_ENABLE();
 8003b92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b94:	f042 0202 	orr.w	r2, r2, #2
 8003b98:	631a      	str	r2, [r3, #48]	; 0x30
 8003b9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b9c:	f002 0202 	and.w	r2, r2, #2
 8003ba0:	9202      	str	r2, [sp, #8]
 8003ba2:	9a02      	ldr	r2, [sp, #8]
  QSPI_D0_GPIO_CLK_ENABLE();
 8003ba4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ba6:	f042 0208 	orr.w	r2, r2, #8
 8003baa:	631a      	str	r2, [r3, #48]	; 0x30
 8003bac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bae:	f002 0208 	and.w	r2, r2, #8
 8003bb2:	9203      	str	r2, [sp, #12]
 8003bb4:	9a03      	ldr	r2, [sp, #12]
  QSPI_D1_GPIO_CLK_ENABLE();
 8003bb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bb8:	f042 0208 	orr.w	r2, r2, #8
 8003bbc:	631a      	str	r2, [r3, #48]	; 0x30
 8003bbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bc0:	f002 0208 	and.w	r2, r2, #8
 8003bc4:	9204      	str	r2, [sp, #16]
 8003bc6:	9a04      	ldr	r2, [sp, #16]
  QSPI_D2_GPIO_CLK_ENABLE();
 8003bc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bca:	f042 0210 	orr.w	r2, r2, #16
 8003bce:	631a      	str	r2, [r3, #48]	; 0x30
 8003bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bd2:	f002 0210 	and.w	r2, r2, #16
 8003bd6:	9205      	str	r2, [sp, #20]
 8003bd8:	9a05      	ldr	r2, [sp, #20]
  QSPI_D3_GPIO_CLK_ENABLE();
 8003bda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bdc:	f042 0208 	orr.w	r2, r2, #8
 8003be0:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003be2:	2240      	movs	r2, #64	; 0x40
  QSPI_D3_GPIO_CLK_ENABLE();
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	9306      	str	r3, [sp, #24]
 8003bec:	9b06      	ldr	r3, [sp, #24]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003bee:	2302      	movs	r3, #2
 8003bf0:	e9cd 2307 	strd	r2, r3, [sp, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8003bfa:	230a      	movs	r3, #10
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8003bfc:	a907      	add	r1, sp, #28
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8003bfe:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8003c00:	f000 fc40 	bl	8004484 <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8003c04:	a907      	add	r1, sp, #28
 8003c06:	4818      	ldr	r0, [pc, #96]	; (8003c68 <BSP_QSPI_MspInit+0x11c>)
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8003c08:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003c0a:	9609      	str	r6, [sp, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8003c0c:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8003c0e:	f000 fc39 	bl	8004484 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 8003c12:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8003c16:	a907      	add	r1, sp, #28
 8003c18:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8003c1a:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 8003c1c:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8003c1e:	f000 fc31 	bl	8004484 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 8003c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 8003c26:	a907      	add	r1, sp, #28
 8003c28:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8003c2a:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 8003c2c:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 8003c2e:	f000 fc29 	bl	8004484 <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 8003c32:	a907      	add	r1, sp, #28
 8003c34:	480e      	ldr	r0, [pc, #56]	; (8003c70 <BSP_QSPI_MspInit+0x124>)
  gpio_init_structure.Pin       = QSPI_D2_PIN;
 8003c36:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8003c38:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 8003c3a:	f000 fc23 	bl	8004484 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 8003c3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 8003c42:	a907      	add	r1, sp, #28
 8003c44:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8003c46:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 8003c48:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 8003c4a:	f000 fc1b 	bl	8004484 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8003c4e:	4632      	mov	r2, r6
 8003c50:	210f      	movs	r1, #15
 8003c52:	205c      	movs	r0, #92	; 0x5c
 8003c54:	f000 f9d8 	bl	8004008 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8003c58:	205c      	movs	r0, #92	; 0x5c
 8003c5a:	f000 fa07 	bl	800406c <HAL_NVIC_EnableIRQ>
}
 8003c5e:	b00d      	add	sp, #52	; 0x34
 8003c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c62:	bf00      	nop
 8003c64:	40023800 	.word	0x40023800
 8003c68:	40020400 	.word	0x40020400
 8003c6c:	40020c00 	.word	0x40020c00
 8003c70:	40021000 	.word	0x40021000

08003c74 <BSP_QSPI_Init>:
{ 
 8003c74:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPIHandle.Instance = QUADSPI;
 8003c76:	4c49      	ldr	r4, [pc, #292]	; (8003d9c <BSP_QSPI_Init+0x128>)
{ 
 8003c78:	b091      	sub	sp, #68	; 0x44
  QSPIHandle.Instance = QUADSPI;
 8003c7a:	4b49      	ldr	r3, [pc, #292]	; (8003da0 <BSP_QSPI_Init+0x12c>)
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8003c7c:	4620      	mov	r0, r4
  QSPIHandle.Instance = QUADSPI;
 8003c7e:	6023      	str	r3, [r4, #0]
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8003c80:	f001 fc52 	bl	8005528 <HAL_QSPI_DeInit>
 8003c84:	4605      	mov	r5, r0
 8003c86:	b110      	cbz	r0, 8003c8e <BSP_QSPI_Init+0x1a>
    return QSPI_ERROR;
 8003c88:	2001      	movs	r0, #1
}
 8003c8a:	b011      	add	sp, #68	; 0x44
 8003c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 8003c8e:	4601      	mov	r1, r0
 8003c90:	4620      	mov	r0, r4
 8003c92:	f7ff ff5b 	bl	8003b4c <BSP_QSPI_MspInit>
  QSPIHandle.Init.FifoThreshold      = 4;
 8003c96:	2601      	movs	r6, #1
 8003c98:	2304      	movs	r3, #4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9a:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
 8003c9e:	e9c4 6301 	strd	r6, r3, [r4, #4]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8003ca2:	2310      	movs	r3, #16
 8003ca4:	60e3      	str	r3, [r4, #12]
 8003ca6:	fa97 f3a7 	rbit	r3, r7
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8003caa:	fab3 f383 	clz	r3, r3
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8003cae:	4620      	mov	r0, r4
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	6123      	str	r3, [r4, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE; /* Min 50ns for nonRead */
 8003cb4:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 8003cb8:	e9c4 5507 	strd	r5, r5, [r4, #28]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8003cbc:	e9c4 3505 	strd	r3, r5, [r4, #20]
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8003cc0:	f001 fbde 	bl	8005480 <HAL_QSPI_Init>
 8003cc4:	2800      	cmp	r0, #0
 8003cc6:	d1df      	bne.n	8003c88 <BSP_QSPI_Init+0x14>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003cc8:	f44f 7580 	mov.w	r5, #256	; 0x100
  s_command.Instruction       = RESET_ENABLE_CMD;
 8003ccc:	2366      	movs	r3, #102	; 0x66
  s_command.DataMode          = QSPI_DATA_NONE;
 8003cce:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003cd0:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.DummyCycles       = 0;
 8003cd4:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003cd6:	a902      	add	r1, sp, #8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003cd8:	900f      	str	r0, [sp, #60]	; 0x3c
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003cda:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 8003cdc:	9302      	str	r3, [sp, #8]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003cde:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003ce2:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003ce6:	4620      	mov	r0, r4
 8003ce8:	f001 fc31 	bl	800554e <HAL_QSPI_Command>
 8003cec:	b108      	cbz	r0, 8003cf2 <BSP_QSPI_Init+0x7e>
    return QSPI_NOT_SUPPORTED;
 8003cee:	2004      	movs	r0, #4
 8003cf0:	e7cb      	b.n	8003c8a <BSP_QSPI_Init+0x16>
  s_command.Instruction = RESET_MEMORY_CMD;
 8003cf2:	2399      	movs	r3, #153	; 0x99
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf8:	a902      	add	r1, sp, #8
 8003cfa:	4620      	mov	r0, r4
  s_command.Instruction = RESET_MEMORY_CMD;
 8003cfc:	9302      	str	r3, [sp, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003cfe:	f001 fc26 	bl	800554e <HAL_QSPI_Command>
 8003d02:	2800      	cmp	r0, #0
 8003d04:	d1f3      	bne.n	8003cee <BSP_QSPI_Init+0x7a>
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8003d06:	f241 3088 	movw	r0, #5000	; 0x1388
 8003d0a:	f7ff fe97 	bl	8003a3c <QSPI_AutoPollingMemReady.constprop.0>
 8003d0e:	2800      	cmp	r0, #0
 8003d10:	d1ed      	bne.n	8003cee <BSP_QSPI_Init+0x7a>
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8003d12:	2385      	movs	r3, #133	; 0x85
  s_command.DummyCycles       = 0;
 8003d14:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d1a:	a902      	add	r1, sp, #8
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003d1c:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8003d1e:	9302      	str	r3, [sp, #8]
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8003d20:	970b      	str	r7, [sp, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003d22:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003d26:	e9cd 600c 	strd	r6, r0, [sp, #48]	; 0x30
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003d2a:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d2e:	4620      	mov	r0, r4
 8003d30:	f001 fc0d 	bl	800554e <HAL_QSPI_Command>
 8003d34:	2800      	cmp	r0, #0
 8003d36:	d1da      	bne.n	8003cee <BSP_QSPI_Init+0x7a>
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d3c:	f10d 0107 	add.w	r1, sp, #7
 8003d40:	4620      	mov	r0, r4
 8003d42:	f001 fd77 	bl	8005834 <HAL_QSPI_Receive>
 8003d46:	2800      	cmp	r0, #0
 8003d48:	d1d1      	bne.n	8003cee <BSP_QSPI_Init+0x7a>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8003d4a:	f7ff fea1 	bl	8003a90 <QSPI_WriteEnable.constprop.0>
 8003d4e:	2800      	cmp	r0, #0
 8003d50:	d1cd      	bne.n	8003cee <BSP_QSPI_Init+0x7a>
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 8003d52:	2381      	movs	r3, #129	; 0x81
 8003d54:	22f0      	movs	r2, #240	; 0xf0
 8003d56:	9302      	str	r3, [sp, #8]
 8003d58:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8003d5c:	210a      	movs	r1, #10
 8003d5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003d62:	fab2 f282 	clz	r2, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d66:	4620      	mov	r0, r4
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8003d68:	f003 030f 	and.w	r3, r3, #15
 8003d6c:	fa01 f202 	lsl.w	r2, r1, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d70:	a902      	add	r1, sp, #8
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8003d72:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d74:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8003d78:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d7c:	f001 fbe7 	bl	800554e <HAL_QSPI_Command>
 8003d80:	2800      	cmp	r0, #0
 8003d82:	d1b4      	bne.n	8003cee <BSP_QSPI_Init+0x7a>
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d88:	f10d 0107 	add.w	r1, sp, #7
 8003d8c:	4620      	mov	r0, r4
 8003d8e:	f001 fcf5 	bl	800577c <HAL_QSPI_Transmit>
 8003d92:	2800      	cmp	r0, #0
 8003d94:	f43f af79 	beq.w	8003c8a <BSP_QSPI_Init+0x16>
 8003d98:	e7a9      	b.n	8003cee <BSP_QSPI_Init+0x7a>
 8003d9a:	bf00      	nop
 8003d9c:	200150b0 	.word	0x200150b0
 8003da0:	a0001000 	.word	0xa0001000

08003da4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003da4:	490f      	ldr	r1, [pc, #60]	; (8003de4 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003da6:	2000      	movs	r0, #0
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003da8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003db0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8003db4:	4b0c      	ldr	r3, [pc, #48]	; (8003de8 <SystemInit+0x44>)
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	f042 0201 	orr.w	r2, r2, #1
 8003dbc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003dbe:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003dc6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003dca:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003dcc:	4a07      	ldr	r2, [pc, #28]	; (8003dec <SystemInit+0x48>)
 8003dce:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003dd6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003dd8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003dda:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003dde:	608b      	str	r3, [r1, #8]
#endif
}
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	e000ed00 	.word	0xe000ed00
 8003de8:	40023800 	.word	0x40023800
 8003dec:	24003010 	.word	0x24003010

08003df0 <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8003df0:	4770      	bx	lr

08003df2 <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 8003df2:	2000      	movs	r0, #0
 8003df4:	4770      	bx	lr
	...

08003df8 <ft5336_ReadID>:
  volatile uint8_t ucReadId = 0;
 8003df8:	2300      	movs	r3, #0
{
 8003dfa:	b537      	push	{r0, r1, r2, r4, r5, lr}
  volatile uint8_t ucReadId = 0;
 8003dfc:	f88d 3007 	strb.w	r3, [sp, #7]
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
 8003e00:	4b0d      	ldr	r3, [pc, #52]	; (8003e38 <ft5336_ReadID+0x40>)
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8003e02:	781a      	ldrb	r2, [r3, #0]
 8003e04:	b90a      	cbnz	r2, 8003e0a <ft5336_ReadID+0x12>
  {
    /* Initialize TS IO BUS layer (I2C) */
    //TS_IO_Init();

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8003e06:	2201      	movs	r2, #1
 8003e08:	701a      	strb	r2, [r3, #0]
{
 8003e0a:	2403      	movs	r4, #3
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8003e0c:	b2c5      	uxtb	r5, r0
 8003e0e:	3c01      	subs	r4, #1
 8003e10:	21a8      	movs	r1, #168	; 0xa8
 8003e12:	4628      	mov	r0, r5
 8003e14:	f7fd fe3a 	bl	8001a8c <TS_IO_Read>
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8003e18:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8003e1c:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
 8003e20:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003e24:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8003e26:	d103      	bne.n	8003e30 <ft5336_ReadID+0x38>
  return (ucReadId);
 8003e28:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8003e2c:	b003      	add	sp, #12
 8003e2e:	bd30      	pop	{r4, r5, pc}
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8003e30:	2b51      	cmp	r3, #81	; 0x51
 8003e32:	d1ec      	bne.n	8003e0e <ft5336_ReadID+0x16>
 8003e34:	e7f8      	b.n	8003e28 <ft5336_ReadID+0x30>
 8003e36:	bf00      	nop
 8003e38:	200019ce 	.word	0x200019ce

08003e3c <ft5336_TS_DetectTouch>:
{
 8003e3c:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
 8003e3e:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8003e40:	2102      	movs	r1, #2
 8003e42:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 8003e44:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8003e48:	f7fd fe20 	bl	8001a8c <TS_IO_Read>
 8003e4c:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 8003e50:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003e54:	f003 030f 	and.w	r3, r3, #15
 8003e58:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8003e5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003e60:	2b05      	cmp	r3, #5
 8003e62:	d901      	bls.n	8003e68 <ft5336_TS_DetectTouch+0x2c>
    nbTouch = 0;
 8003e64:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 8003e68:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003e6c:	4b03      	ldr	r3, [pc, #12]	; (8003e7c <ft5336_TS_DetectTouch+0x40>)
  return(nbTouch);
 8003e6e:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 8003e72:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 8003e74:	2200      	movs	r2, #0
 8003e76:	709a      	strb	r2, [r3, #2]
}
 8003e78:	b002      	add	sp, #8
 8003e7a:	bd10      	pop	{r4, pc}
 8003e7c:	200019ce 	.word	0x200019ce

08003e80 <ft5336_TS_GetXY>:
{
 8003e80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8003e84:	4d2f      	ldr	r5, [pc, #188]	; (8003f44 <ft5336_TS_GetXY+0xc4>)
{
 8003e86:	4616      	mov	r6, r2
  volatile uint8_t ucReadData = 0;
 8003e88:	2300      	movs	r3, #0
{
 8003e8a:	460f      	mov	r7, r1
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8003e8c:	78ac      	ldrb	r4, [r5, #2]
 8003e8e:	786a      	ldrb	r2, [r5, #1]
  volatile uint8_t ucReadData = 0;
 8003e90:	f88d 3007 	strb.w	r3, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8003e94:	42a2      	cmp	r2, r4
 8003e96:	d94d      	bls.n	8003f34 <ft5336_TS_GetXY+0xb4>
    switch(ft5336_handle.currActiveTouchIdx)
 8003e98:	2c09      	cmp	r4, #9
 8003e9a:	d84e      	bhi.n	8003f3a <ft5336_TS_GetXY+0xba>
 8003e9c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	1d19      	adds	r1, r3, #4
 8003ea6:	f103 0b03 	add.w	fp, r3, #3
 8003eaa:	f103 0a06 	add.w	sl, r3, #6
 8003eae:	3305      	adds	r3, #5
 8003eb0:	b2c9      	uxtb	r1, r1
 8003eb2:	fa5f fb8b 	uxtb.w	fp, fp
 8003eb6:	fa5f fa8a 	uxtb.w	sl, sl
 8003eba:	fa5f f883 	uxtb.w	r8, r3
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8003ebe:	b2c4      	uxtb	r4, r0
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8003ec0:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8003f48 <ft5336_TS_GetXY+0xc8>
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8003ec4:	4620      	mov	r0, r4
 8003ec6:	f7fd fde1 	bl	8001a8c <TS_IO_Read>
 8003eca:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8003ece:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8003ed2:	4659      	mov	r1, fp
 8003ed4:	4620      	mov	r0, r4
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8003ed6:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8003eda:	f7fd fdd7 	bl	8001a8c <TS_IO_Read>
 8003ede:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8003ee2:	4651      	mov	r1, sl
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8003ee4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8003ee8:	4620      	mov	r0, r4
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8003eea:	f8b9 2000 	ldrh.w	r2, [r9]
 8003eee:	021b      	lsls	r3, r3, #8
 8003ef0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003ef4:	4313      	orrs	r3, r2
    *X = coord;
 8003ef6:	803b      	strh	r3, [r7, #0]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8003ef8:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8003efc:	f7fd fdc6 	bl	8001a8c <TS_IO_Read>
 8003f00:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8003f04:	4641      	mov	r1, r8
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8003f06:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8003f0a:	4620      	mov	r0, r4
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8003f0c:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8003f10:	f7fd fdbc 	bl	8001a8c <TS_IO_Read>
 8003f14:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8003f18:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003f1c:	f8b9 2000 	ldrh.w	r2, [r9]
 8003f20:	021b      	lsls	r3, r3, #8
 8003f22:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f8a9 3000 	strh.w	r3, [r9]
    *Y = coord;
 8003f2c:	8033      	strh	r3, [r6, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8003f2e:	78ab      	ldrb	r3, [r5, #2]
 8003f30:	3301      	adds	r3, #1
 8003f32:	70ab      	strb	r3, [r5, #2]
}
 8003f34:	b003      	add	sp, #12
 8003f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8003f3a:	4698      	mov	r8, r3
 8003f3c:	469a      	mov	sl, r3
 8003f3e:	469b      	mov	fp, r3
 8003f40:	4619      	mov	r1, r3
 8003f42:	e7bc      	b.n	8003ebe <ft5336_TS_GetXY+0x3e>
 8003f44:	200019ce 	.word	0x200019ce
 8003f48:	200019cc 	.word	0x200019cc

08003f4c <ft5336_TS_EnableIT>:
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	21a4      	movs	r1, #164	; 0xa4
 8003f50:	b2c0      	uxtb	r0, r0
 8003f52:	f7fd bd81 	b.w	8001a58 <TS_IO_Write>

08003f56 <ft5336_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8003f56:	2200      	movs	r2, #0
 8003f58:	21a4      	movs	r1, #164	; 0xa4
 8003f5a:	b2c0      	uxtb	r0, r0
 8003f5c:	f7fd bd7c 	b.w	8001a58 <TS_IO_Write>

08003f60 <ft5336_TS_Start>:
  ft5336_TS_DisableIT(DeviceAddr);
 8003f60:	f7ff bff9 	b.w	8003f56 <ft5336_TS_DisableIT>

08003f64 <ft5336_TS_ClearIT>:
 8003f64:	4770      	bx	lr
	...

08003f68 <ft5336_Init>:
  return(ft5336_handle.i2cInitialized);
 8003f68:	4b02      	ldr	r3, [pc, #8]	; (8003f74 <ft5336_Init+0xc>)
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8003f6a:	781a      	ldrb	r2, [r3, #0]
 8003f6c:	b90a      	cbnz	r2, 8003f72 <ft5336_Init+0xa>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8003f6e:	2201      	movs	r2, #1
 8003f70:	701a      	strb	r2, [r3, #0]
}
 8003f72:	4770      	bx	lr
 8003f74:	200019ce 	.word	0x200019ce

08003f78 <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f78:	4a07      	ldr	r2, [pc, #28]	; (8003f98 <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f7a:	2003      	movs	r0, #3
{
 8003f7c:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f7e:	6813      	ldr	r3, [r2, #0]
 8003f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f84:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f86:	f000 f82d 	bl	8003fe4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f8a:	2000      	movs	r0, #0
 8003f8c:	f7fd fc20 	bl	80017d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f90:	f7fd f9be 	bl	8001310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8003f94:	2000      	movs	r0, #0
 8003f96:	bd08      	pop	{r3, pc}
 8003f98:	40023c00 	.word	0x40023c00

08003f9c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003f9c:	4a03      	ldr	r2, [pc, #12]	; (8003fac <HAL_IncTick+0x10>)
 8003f9e:	4b04      	ldr	r3, [pc, #16]	; (8003fb0 <HAL_IncTick+0x14>)
 8003fa0:	6811      	ldr	r1, [r2, #0]
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	440b      	add	r3, r1
 8003fa6:	6013      	str	r3, [r2, #0]
}
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	200150fc 	.word	0x200150fc
 8003fb0:	20000038 	.word	0x20000038

08003fb4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003fb4:	4b01      	ldr	r3, [pc, #4]	; (8003fbc <HAL_GetTick+0x8>)
 8003fb6:	6818      	ldr	r0, [r3, #0]
}
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	200150fc 	.word	0x200150fc

08003fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fc0:	b538      	push	{r3, r4, r5, lr}
 8003fc2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003fc4:	f7ff fff6 	bl	8003fb4 <HAL_GetTick>
 8003fc8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fca:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8003fcc:	bf1e      	ittt	ne
 8003fce:	4b04      	ldrne	r3, [pc, #16]	; (8003fe0 <HAL_Delay+0x20>)
 8003fd0:	781b      	ldrbne	r3, [r3, #0]
 8003fd2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003fd4:	f7ff ffee 	bl	8003fb4 <HAL_GetTick>
 8003fd8:	1b43      	subs	r3, r0, r5
 8003fda:	42a3      	cmp	r3, r4
 8003fdc:	d3fa      	bcc.n	8003fd4 <HAL_Delay+0x14>
  {
  }
}
 8003fde:	bd38      	pop	{r3, r4, r5, pc}
 8003fe0:	20000038 	.word	0x20000038

08003fe4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fe4:	4907      	ldr	r1, [pc, #28]	; (8004004 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fe6:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fe8:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ff2:	0412      	lsls	r2, r2, #16
 8003ff4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ff6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ff8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ffc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004000:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004002:	4770      	bx	lr
 8004004:	e000ed00 	.word	0xe000ed00

08004008 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004008:	4b16      	ldr	r3, [pc, #88]	; (8004064 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800400a:	b530      	push	{r4, r5, lr}
 800400c:	68dc      	ldr	r4, [r3, #12]
 800400e:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004012:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004016:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004018:	2d04      	cmp	r5, #4
 800401a:	bf28      	it	cs
 800401c:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800401e:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004020:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004024:	bf8c      	ite	hi
 8004026:	3c03      	subhi	r4, #3
 8004028:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800402a:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 800402e:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004030:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004034:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004038:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800403c:	fa01 f104 	lsl.w	r1, r1, r4
 8004040:	ea41 0302 	orr.w	r3, r1, r2
 8004044:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004048:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800404a:	db06      	blt.n	800405a <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800404c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004050:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004054:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004058:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800405a:	f000 000f 	and.w	r0, r0, #15
 800405e:	4a02      	ldr	r2, [pc, #8]	; (8004068 <HAL_NVIC_SetPriority+0x60>)
 8004060:	5413      	strb	r3, [r2, r0]
 8004062:	e7f9      	b.n	8004058 <HAL_NVIC_SetPriority+0x50>
 8004064:	e000ed00 	.word	0xe000ed00
 8004068:	e000ed14 	.word	0xe000ed14

0800406c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800406c:	2800      	cmp	r0, #0
 800406e:	db08      	blt.n	8004082 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004070:	0942      	lsrs	r2, r0, #5
 8004072:	2301      	movs	r3, #1
 8004074:	f000 001f 	and.w	r0, r0, #31
 8004078:	fa03 f000 	lsl.w	r0, r3, r0
 800407c:	4b01      	ldr	r3, [pc, #4]	; (8004084 <HAL_NVIC_EnableIRQ+0x18>)
 800407e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004082:	4770      	bx	lr
 8004084:	e000e100 	.word	0xe000e100

08004088 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004088:	2800      	cmp	r0, #0
 800408a:	db0d      	blt.n	80040a8 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800408c:	0943      	lsrs	r3, r0, #5
 800408e:	2201      	movs	r2, #1
 8004090:	f000 001f 	and.w	r0, r0, #31
 8004094:	3320      	adds	r3, #32
 8004096:	fa02 f000 	lsl.w	r0, r2, r0
 800409a:	4a04      	ldr	r2, [pc, #16]	; (80040ac <HAL_NVIC_DisableIRQ+0x24>)
 800409c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80040a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80040a4:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	e000e100 	.word	0xe000e100

080040b0 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 80040b0:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80040b4:	4a04      	ldr	r2, [pc, #16]	; (80040c8 <HAL_MPU_Disable+0x18>)
 80040b6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80040b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040bc:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80040be:	2200      	movs	r2, #0
 80040c0:	4b02      	ldr	r3, [pc, #8]	; (80040cc <HAL_MPU_Disable+0x1c>)
 80040c2:	605a      	str	r2, [r3, #4]
}
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	e000ed00 	.word	0xe000ed00
 80040cc:	e000ed90 	.word	0xe000ed90

080040d0 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80040d0:	4a06      	ldr	r2, [pc, #24]	; (80040ec <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80040d2:	f040 0001 	orr.w	r0, r0, #1
 80040d6:	4b06      	ldr	r3, [pc, #24]	; (80040f0 <HAL_MPU_Enable+0x20>)
 80040d8:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80040da:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80040dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040e0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80040e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80040e6:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80040ea:	4770      	bx	lr
 80040ec:	e000ed00 	.word	0xe000ed00
 80040f0:	e000ed90 	.word	0xe000ed90

080040f4 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80040f4:	7843      	ldrb	r3, [r0, #1]
 80040f6:	4a12      	ldr	r2, [pc, #72]	; (8004140 <HAL_MPU_ConfigRegion+0x4c>)
{
 80040f8:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 80040fa:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != RESET)
 80040fc:	7801      	ldrb	r1, [r0, #0]
 80040fe:	b1d9      	cbz	r1, 8004138 <HAL_MPU_ConfigRegion+0x44>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8004100:	6843      	ldr	r3, [r0, #4]
 8004102:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004104:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004106:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004108:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800410a:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800410e:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004110:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004112:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004116:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004118:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800411c:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800411e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004122:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004124:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004128:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800412a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800412e:	7a01      	ldrb	r1, [r0, #8]
 8004130:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004134:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8004136:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8004138:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 800413a:	6111      	str	r1, [r2, #16]
}
 800413c:	e7fb      	b.n	8004136 <HAL_MPU_ConfigRegion+0x42>
 800413e:	bf00      	nop
 8004140:	e000ed90 	.word	0xe000ed90

08004144 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004144:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004146:	4604      	mov	r4, r0
 8004148:	b908      	cbnz	r0, 800414e <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800414a:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 800414c:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800414e:	7f43      	ldrb	r3, [r0, #29]
 8004150:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004154:	b913      	cbnz	r3, 800415c <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8004156:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8004158:	f7fd f8f8 	bl	800134c <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 800415c:	2302      	movs	r3, #2
 800415e:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004160:	7923      	ldrb	r3, [r4, #4]
 8004162:	b9e3      	cbnz	r3, 800419e <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004164:	6823      	ldr	r3, [r4, #0]
 8004166:	4a13      	ldr	r2, [pc, #76]	; (80041b4 <HAL_CRC_Init+0x70>)
 8004168:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	f022 0218 	bic.w	r2, r2, #24
 8004170:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004172:	7962      	ldrb	r2, [r4, #5]
 8004174:	6823      	ldr	r3, [r4, #0]
 8004176:	b9d2      	cbnz	r2, 80041ae <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004178:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800417c:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 800417e:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004180:	689a      	ldr	r2, [r3, #8]
 8004182:	6961      	ldr	r1, [r4, #20]
 8004184:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004188:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800418a:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800418c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800418e:	689a      	ldr	r2, [r3, #8]
 8004190:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004194:	430a      	orrs	r2, r1
 8004196:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8004198:	2301      	movs	r3, #1
 800419a:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 800419c:	e7d6      	b.n	800414c <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800419e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80041a2:	4620      	mov	r0, r4
 80041a4:	f000 f808 	bl	80041b8 <HAL_CRCEx_Polynomial_Set>
 80041a8:	2800      	cmp	r0, #0
 80041aa:	d0e2      	beq.n	8004172 <HAL_CRC_Init+0x2e>
 80041ac:	e7cd      	b.n	800414a <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80041ae:	6922      	ldr	r2, [r4, #16]
 80041b0:	e7e4      	b.n	800417c <HAL_CRC_Init+0x38>
 80041b2:	bf00      	nop
 80041b4:	04c11db7 	.word	0x04c11db7

080041b8 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80041b8:	231f      	movs	r3, #31
{
 80041ba:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80041bc:	3b01      	subs	r3, #1
 80041be:	d306      	bcc.n	80041ce <HAL_CRCEx_Polynomial_Set+0x16>
 80041c0:	fa21 f403 	lsr.w	r4, r1, r3
 80041c4:	07e4      	lsls	r4, r4, #31
 80041c6:	d5f9      	bpl.n	80041bc <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 80041c8:	2a08      	cmp	r2, #8
 80041ca:	d014      	beq.n	80041f6 <HAL_CRCEx_Polynomial_Set+0x3e>
 80041cc:	d802      	bhi.n	80041d4 <HAL_CRCEx_Polynomial_Set+0x1c>
 80041ce:	b13a      	cbz	r2, 80041e0 <HAL_CRCEx_Polynomial_Set+0x28>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 80041d0:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 80041d2:	e00d      	b.n	80041f0 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 80041d4:	2a10      	cmp	r2, #16
 80041d6:	d00c      	beq.n	80041f2 <HAL_CRCEx_Polynomial_Set+0x3a>
 80041d8:	2a18      	cmp	r2, #24
 80041da:	d1f9      	bne.n	80041d0 <HAL_CRCEx_Polynomial_Set+0x18>
      if (msb >= HAL_CRC_LENGTH_7B)
 80041dc:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 80041de:	d8f7      	bhi.n	80041d0 <HAL_CRCEx_Polynomial_Set+0x18>
    WRITE_REG(hcrc->Instance->POL, Pol);
 80041e0:	6800      	ldr	r0, [r0, #0]
 80041e2:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80041e4:	6883      	ldr	r3, [r0, #8]
 80041e6:	f023 0318 	bic.w	r3, r3, #24
 80041ea:	431a      	orrs	r2, r3
 80041ec:	6082      	str	r2, [r0, #8]
 80041ee:	2000      	movs	r0, #0
}
 80041f0:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 80041f2:	2b07      	cmp	r3, #7
 80041f4:	e7f3      	b.n	80041de <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 80041f6:	2b0f      	cmp	r3, #15
 80041f8:	e7f1      	b.n	80041de <HAL_CRCEx_Polynomial_Set+0x26>

080041fa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041fa:	b570      	push	{r4, r5, r6, lr}
 80041fc:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041fe:	6d86      	ldr	r6, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8004200:	f7ff fed8 	bl	8003fb4 <HAL_GetTick>
 8004204:	4605      	mov	r5, r0
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004206:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800420a:	2b02      	cmp	r3, #2
 800420c:	d006      	beq.n	800421c <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800420e:	2380      	movs	r3, #128	; 0x80
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    return HAL_ERROR;
 8004210:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004212:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8004214:	2300      	movs	r3, #0
 8004216:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
  }
  return HAL_OK;
}
 800421a:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800421c:	6823      	ldr	r3, [r4, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	f022 0216 	bic.w	r2, r2, #22
 8004224:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004226:	695a      	ldr	r2, [r3, #20]
 8004228:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800422c:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800422e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004230:	b90a      	cbnz	r2, 8004236 <HAL_DMA_Abort+0x3c>
 8004232:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004234:	b11a      	cbz	r2, 800423e <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	f022 0208 	bic.w	r2, r2, #8
 800423c:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	f022 0201 	bic.w	r2, r2, #1
 8004244:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004246:	6823      	ldr	r3, [r4, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f013 0301 	ands.w	r3, r3, #1
 800424e:	d10a      	bne.n	8004266 <HAL_DMA_Abort+0x6c>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004250:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004252:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 8004254:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004256:	408a      	lsls	r2, r1
 8004258:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 800425a:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 800425c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8004260:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  return HAL_OK;
 8004264:	e7d9      	b.n	800421a <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004266:	f7ff fea5 	bl	8003fb4 <HAL_GetTick>
 800426a:	1b40      	subs	r0, r0, r5
 800426c:	2805      	cmp	r0, #5
 800426e:	d9ea      	bls.n	8004246 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004270:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004272:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004274:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8004276:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004278:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800427c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8004280:	e7cb      	b.n	800421a <HAL_DMA_Abort+0x20>

08004282 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004282:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004284:	4604      	mov	r4, r0
 8004286:	b330      	cbz	r0, 80042d6 <HAL_DMA2D_Init+0x54>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004288:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800428c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004290:	b91b      	cbnz	r3, 800429a <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004292:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004296:	f7fd f86f 	bl	8001378 <HAL_DMA2D_MspInit>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800429a:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800429c:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800429e:	6861      	ldr	r1, [r4, #4]
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80042a0:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80042a2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80042a6:	6813      	ldr	r3, [r2, #0]
 80042a8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80042ac:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80042ae:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80042b0:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80042b2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80042b4:	f023 0307 	bic.w	r3, r3, #7
 80042b8:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80042ba:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80042bc:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80042be:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80042c0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80042c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80042c8:	430b      	orrs	r3, r1
 80042ca:	6413      	str	r3, [r2, #64]	; 0x40

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80042cc:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80042ce:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80042d0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
}
 80042d4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80042d6:	2001      	movs	r0, #1
 80042d8:	e7fc      	b.n	80042d4 <HAL_DMA2D_Init+0x52>

080042da <HAL_DMA2D_LineEventCallback>:
 80042da:	4770      	bx	lr

080042dc <HAL_DMA2D_CLUTLoadingCpltCallback>:
 80042dc:	4770      	bx	lr

080042de <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80042de:	6803      	ldr	r3, [r0, #0]
{
 80042e0:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80042e2:	685e      	ldr	r6, [r3, #4]
{
 80042e4:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80042e6:	681d      	ldr	r5, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80042e8:	07f2      	lsls	r2, r6, #31
 80042ea:	d514      	bpl.n	8004316 <HAL_DMA2D_IRQHandler+0x38>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80042ec:	05e9      	lsls	r1, r5, #23
 80042ee:	d512      	bpl.n	8004316 <HAL_DMA2D_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042f6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80042f8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80042fa:	f042 0201 	orr.w	r2, r2, #1
 80042fe:	63c2      	str	r2, [r0, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004300:	2201      	movs	r2, #1
 8004302:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004304:	2304      	movs	r3, #4
 8004306:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800430a:	2300      	movs	r3, #0
 800430c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004310:	6943      	ldr	r3, [r0, #20]
 8004312:	b103      	cbz	r3, 8004316 <HAL_DMA2D_IRQHandler+0x38>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004314:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004316:	06b2      	lsls	r2, r6, #26
 8004318:	d516      	bpl.n	8004348 <HAL_DMA2D_IRQHandler+0x6a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800431a:	04ab      	lsls	r3, r5, #18
 800431c:	d514      	bpl.n	8004348 <HAL_DMA2D_IRQHandler+0x6a>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800431e:	6823      	ldr	r3, [r4, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004326:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004328:	2220      	movs	r2, #32
 800432a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800432c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800432e:	f043 0302 	orr.w	r3, r3, #2
 8004332:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004334:	2304      	movs	r3, #4
 8004336:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800433a:	2300      	movs	r3, #0
 800433c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004340:	6963      	ldr	r3, [r4, #20]
 8004342:	b10b      	cbz	r3, 8004348 <HAL_DMA2D_IRQHandler+0x6a>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004344:	4620      	mov	r0, r4
 8004346:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004348:	0730      	lsls	r0, r6, #28
 800434a:	d516      	bpl.n	800437a <HAL_DMA2D_IRQHandler+0x9c>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800434c:	0529      	lsls	r1, r5, #20
 800434e:	d514      	bpl.n	800437a <HAL_DMA2D_IRQHandler+0x9c>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004350:	6823      	ldr	r3, [r4, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004358:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800435a:	2208      	movs	r2, #8
 800435c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800435e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004360:	f043 0304 	orr.w	r3, r3, #4
 8004364:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004366:	2304      	movs	r3, #4
 8004368:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800436c:	2300      	movs	r3, #0
 800436e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004372:	6963      	ldr	r3, [r4, #20]
 8004374:	b10b      	cbz	r3, 800437a <HAL_DMA2D_IRQHandler+0x9c>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004376:	4620      	mov	r0, r4
 8004378:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800437a:	0772      	lsls	r2, r6, #29
 800437c:	d50b      	bpl.n	8004396 <HAL_DMA2D_IRQHandler+0xb8>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800437e:	056b      	lsls	r3, r5, #21
 8004380:	d509      	bpl.n	8004396 <HAL_DMA2D_IRQHandler+0xb8>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004382:	6823      	ldr	r3, [r4, #0]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004384:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800438c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800438e:	2204      	movs	r2, #4
 8004390:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004392:	f7ff ffa2 	bl	80042da <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004396:	07b0      	lsls	r0, r6, #30
 8004398:	d514      	bpl.n	80043c4 <HAL_DMA2D_IRQHandler+0xe6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800439a:	05a9      	lsls	r1, r5, #22
 800439c:	d512      	bpl.n	80043c4 <HAL_DMA2D_IRQHandler+0xe6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800439e:	6823      	ldr	r3, [r4, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80043a6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80043a8:	2202      	movs	r2, #2
 80043aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80043ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80043ae:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80043b0:	2301      	movs	r3, #1
 80043b2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80043b6:	2300      	movs	r3, #0
 80043b8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80043bc:	6923      	ldr	r3, [r4, #16]
 80043be:	b10b      	cbz	r3, 80043c4 <HAL_DMA2D_IRQHandler+0xe6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80043c0:	4620      	mov	r0, r4
 80043c2:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80043c4:	06f2      	lsls	r2, r6, #27
 80043c6:	d513      	bpl.n	80043f0 <HAL_DMA2D_IRQHandler+0x112>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80043c8:	04eb      	lsls	r3, r5, #19
 80043ca:	d511      	bpl.n	80043f0 <HAL_DMA2D_IRQHandler+0x112>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80043cc:	6823      	ldr	r3, [r4, #0]

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80043ce:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80043d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80043d8:	2210      	movs	r2, #16
 80043da:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80043dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80043de:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80043e0:	2301      	movs	r3, #1
 80043e2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 80043e6:	2300      	movs	r3, #0
 80043e8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80043ec:	f7ff ff76 	bl	80042dc <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80043f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080043f4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80043f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80043f6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	f04f 0302 	mov.w	r3, #2
 8004400:	d02b      	beq.n	800445a <HAL_DMA2D_ConfigLayer+0x66>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004402:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 8004406:	2201      	movs	r2, #1
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004408:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 800440c:	4f1c      	ldr	r7, [pc, #112]	; (8004480 <HAL_DMA2D_ConfigLayer+0x8c>)
  __HAL_LOCK(hdma2d);
 800440e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004412:	010e      	lsls	r6, r1, #4
 8004414:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8004416:	e9d3 4207 	ldrd	r4, r2, [r3, #28]
 800441a:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800441e:	3c09      	subs	r4, #9
 8004420:	2c01      	cmp	r4, #1
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004422:	bf96      	itet	ls
 8004424:	f005 437f 	andls.w	r3, r5, #4278190080	; 0xff000000
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004428:	ea42 6205 	orrhi.w	r2, r2, r5, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800442c:	431a      	orrls	r2, r3
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800442e:	6803      	ldr	r3, [r0, #0]
 8004430:	b9a9      	cbnz	r1, 800445e <HAL_DMA2D_ConfigLayer+0x6a>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004432:	6a59      	ldr	r1, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004434:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004436:	ea01 0107 	and.w	r1, r1, r7
 800443a:	ea42 0201 	orr.w	r2, r2, r1
 800443e:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004440:	6982      	ldr	r2, [r0, #24]
 8004442:	619a      	str	r2, [r3, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004444:	d803      	bhi.n	800444e <HAL_DMA2D_ConfigLayer+0x5a>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004446:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8004448:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800444c:	629a      	str	r2, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800444e:	2301      	movs	r3, #1
 8004450:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004454:	2300      	movs	r3, #0
 8004456:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 800445a:	4618      	mov	r0, r3

  return HAL_OK;
}
 800445c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800445e:	69d9      	ldr	r1, [r3, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004460:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004462:	ea01 0107 	and.w	r1, r1, r7
 8004466:	ea42 0201 	orr.w	r2, r2, r1
 800446a:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800446c:	eb00 0206 	add.w	r2, r0, r6
 8004470:	6992      	ldr	r2, [r2, #24]
 8004472:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004474:	d8eb      	bhi.n	800444e <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004476:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 800447a:	621d      	str	r5, [r3, #32]
 800447c:	e7e7      	b.n	800444e <HAL_DMA2D_ConfigLayer+0x5a>
 800447e:	bf00      	nop
 8004480:	00fcfff0 	.word	0x00fcfff0

08004484 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004484:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004488:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800448a:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8004648 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800448e:	4a6c      	ldr	r2, [pc, #432]	; (8004640 <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 8004490:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004492:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8004494:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004496:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 800449a:	43ac      	bics	r4, r5
 800449c:	f040 80b6 	bne.w	800460c <HAL_GPIO_Init+0x188>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044a0:	684d      	ldr	r5, [r1, #4]
 80044a2:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80044a6:	2603      	movs	r6, #3
 80044a8:	f005 0403 	and.w	r4, r5, #3
 80044ac:	fa06 f608 	lsl.w	r6, r6, r8
 80044b0:	1e67      	subs	r7, r4, #1
 80044b2:	43f6      	mvns	r6, r6
 80044b4:	2f01      	cmp	r7, #1
 80044b6:	d834      	bhi.n	8004522 <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR; 
 80044b8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80044ba:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 80044be:	68cf      	ldr	r7, [r1, #12]
 80044c0:	fa07 f708 	lsl.w	r7, r7, r8
 80044c4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80044c8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80044ca:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044cc:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044d0:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80044d4:	409f      	lsls	r7, r3
 80044d6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80044da:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80044dc:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044de:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80044e0:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80044e4:	688f      	ldr	r7, [r1, #8]
 80044e6:	fa07 f708 	lsl.w	r7, r7, r8
 80044ea:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 80044ee:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044f0:	d119      	bne.n	8004526 <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 80044f2:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80044f6:	f003 0b07 	and.w	fp, r3, #7
 80044fa:	f04f 0e0f 	mov.w	lr, #15
 80044fe:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8004502:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8004506:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800450a:	fa0e fe0b 	lsl.w	lr, lr, fp
 800450e:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004512:	690f      	ldr	r7, [r1, #16]
 8004514:	fa07 f70b 	lsl.w	r7, r7, fp
 8004518:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 800451c:	f8ca 7020 	str.w	r7, [sl, #32]
 8004520:	e001      	b.n	8004526 <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004522:	2c03      	cmp	r4, #3
 8004524:	d1da      	bne.n	80044dc <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 8004526:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004528:	fa04 f408 	lsl.w	r4, r4, r8
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800452c:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004530:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004534:	ea46 0604 	orr.w	r6, r6, r4
      GPIOx->MODER = temp;
 8004538:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800453a:	d067      	beq.n	800460c <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800453c:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8004540:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004544:	f003 0703 	and.w	r7, r3, #3
 8004548:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800454c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8004550:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004554:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004556:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 800455a:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 800455e:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8004562:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 8004566:	9401      	str	r4, [sp, #4]
 8004568:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800456a:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2];
 800456e:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004572:	ea28 0e04 	bic.w	lr, r8, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004576:	4c33      	ldr	r4, [pc, #204]	; (8004644 <HAL_GPIO_Init+0x1c0>)
 8004578:	42a0      	cmp	r0, r4
 800457a:	d04e      	beq.n	800461a <HAL_GPIO_Init+0x196>
 800457c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004580:	42a0      	cmp	r0, r4
 8004582:	d04c      	beq.n	800461e <HAL_GPIO_Init+0x19a>
 8004584:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004588:	42a0      	cmp	r0, r4
 800458a:	d04a      	beq.n	8004622 <HAL_GPIO_Init+0x19e>
 800458c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004590:	42a0      	cmp	r0, r4
 8004592:	d048      	beq.n	8004626 <HAL_GPIO_Init+0x1a2>
 8004594:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004598:	42a0      	cmp	r0, r4
 800459a:	d046      	beq.n	800462a <HAL_GPIO_Init+0x1a6>
 800459c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80045a0:	42a0      	cmp	r0, r4
 80045a2:	d044      	beq.n	800462e <HAL_GPIO_Init+0x1aa>
 80045a4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80045a8:	42a0      	cmp	r0, r4
 80045aa:	d042      	beq.n	8004632 <HAL_GPIO_Init+0x1ae>
 80045ac:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80045b0:	42a0      	cmp	r0, r4
 80045b2:	d040      	beq.n	8004636 <HAL_GPIO_Init+0x1b2>
 80045b4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80045b8:	42a0      	cmp	r0, r4
 80045ba:	d03e      	beq.n	800463a <HAL_GPIO_Init+0x1b6>
 80045bc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80045c0:	42a0      	cmp	r0, r4
 80045c2:	bf0c      	ite	eq
 80045c4:	2409      	moveq	r4, #9
 80045c6:	240a      	movne	r4, #10
 80045c8:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80045ca:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80045cc:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 80045d0:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 80045d2:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 80045d6:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80045d8:	bf54      	ite	pl
 80045da:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80045dc:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80045e0:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 80045e2:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 80045e4:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 80045e6:	bf54      	ite	pl
 80045e8:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80045ea:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80045ee:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 80045f0:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 80045f2:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 80045f4:	bf54      	ite	pl
 80045f6:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80045f8:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80045fc:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 80045fe:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 8004600:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8004602:	bf54      	ite	pl
 8004604:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004606:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 800460a:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800460c:	3301      	adds	r3, #1
 800460e:	2b10      	cmp	r3, #16
 8004610:	f47f af3e 	bne.w	8004490 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8004614:	b003      	add	sp, #12
 8004616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800461a:	2400      	movs	r4, #0
 800461c:	e7d4      	b.n	80045c8 <HAL_GPIO_Init+0x144>
 800461e:	2401      	movs	r4, #1
 8004620:	e7d2      	b.n	80045c8 <HAL_GPIO_Init+0x144>
 8004622:	2402      	movs	r4, #2
 8004624:	e7d0      	b.n	80045c8 <HAL_GPIO_Init+0x144>
 8004626:	2403      	movs	r4, #3
 8004628:	e7ce      	b.n	80045c8 <HAL_GPIO_Init+0x144>
 800462a:	2404      	movs	r4, #4
 800462c:	e7cc      	b.n	80045c8 <HAL_GPIO_Init+0x144>
 800462e:	2405      	movs	r4, #5
 8004630:	e7ca      	b.n	80045c8 <HAL_GPIO_Init+0x144>
 8004632:	2406      	movs	r4, #6
 8004634:	e7c8      	b.n	80045c8 <HAL_GPIO_Init+0x144>
 8004636:	2407      	movs	r4, #7
 8004638:	e7c6      	b.n	80045c8 <HAL_GPIO_Init+0x144>
 800463a:	2408      	movs	r4, #8
 800463c:	e7c4      	b.n	80045c8 <HAL_GPIO_Init+0x144>
 800463e:	bf00      	nop
 8004640:	40013c00 	.word	0x40013c00
 8004644:	40020000 	.word	0x40020000
 8004648:	40023800 	.word	0x40023800

0800464c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800464c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004650:	2200      	movs	r2, #0
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004652:	4c4a      	ldr	r4, [pc, #296]	; (800477c <HAL_GPIO_DeInit+0x130>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004654:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8004784 <HAL_GPIO_DeInit+0x138>
 8004658:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8004788 <HAL_GPIO_DeInit+0x13c>
 800465c:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800478c <HAL_GPIO_DeInit+0x140>
    ioposition = ((uint32_t)0x01) << position;
 8004660:	2301      	movs	r3, #1
 8004662:	fa03 fe02 	lsl.w	lr, r3, r2
    if(iocurrent == ioposition)
 8004666:	ea3e 0301 	bics.w	r3, lr, r1
    iocurrent = (GPIO_Pin) & ioposition;
 800466a:	ea0e 0701 	and.w	r7, lr, r1
    if(iocurrent == ioposition)
 800466e:	d16e      	bne.n	800474e <HAL_GPIO_DeInit+0x102>
      tmp = SYSCFG->EXTICR[position >> 2];
 8004670:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004674:	f002 0c03 	and.w	ip, r2, #3
 8004678:	260f      	movs	r6, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800467a:	4b41      	ldr	r3, [pc, #260]	; (8004780 <HAL_GPIO_DeInit+0x134>)
 800467c:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004680:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004684:	4298      	cmp	r0, r3
 8004686:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800468a:	fa06 f60c 	lsl.w	r6, r6, ip
      tmp = SYSCFG->EXTICR[position >> 2];
 800468e:	f8d5 8008 	ldr.w	r8, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004692:	ea06 0808 	and.w	r8, r6, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004696:	d05f      	beq.n	8004758 <HAL_GPIO_DeInit+0x10c>
 8004698:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800469c:	4298      	cmp	r0, r3
 800469e:	d05d      	beq.n	800475c <HAL_GPIO_DeInit+0x110>
 80046a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046a4:	4298      	cmp	r0, r3
 80046a6:	d05b      	beq.n	8004760 <HAL_GPIO_DeInit+0x114>
 80046a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046ac:	4298      	cmp	r0, r3
 80046ae:	d059      	beq.n	8004764 <HAL_GPIO_DeInit+0x118>
 80046b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046b4:	4298      	cmp	r0, r3
 80046b6:	d057      	beq.n	8004768 <HAL_GPIO_DeInit+0x11c>
 80046b8:	4548      	cmp	r0, r9
 80046ba:	d057      	beq.n	800476c <HAL_GPIO_DeInit+0x120>
 80046bc:	4550      	cmp	r0, sl
 80046be:	d057      	beq.n	8004770 <HAL_GPIO_DeInit+0x124>
 80046c0:	4558      	cmp	r0, fp
 80046c2:	d057      	beq.n	8004774 <HAL_GPIO_DeInit+0x128>
 80046c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046c8:	4298      	cmp	r0, r3
 80046ca:	d055      	beq.n	8004778 <HAL_GPIO_DeInit+0x12c>
 80046cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046d0:	4298      	cmp	r0, r3
 80046d2:	bf0c      	ite	eq
 80046d4:	2309      	moveq	r3, #9
 80046d6:	230a      	movne	r3, #10
 80046d8:	fa03 f30c 	lsl.w	r3, r3, ip
 80046dc:	4543      	cmp	r3, r8
 80046de:	d113      	bne.n	8004708 <HAL_GPIO_DeInit+0xbc>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80046e0:	6823      	ldr	r3, [r4, #0]
 80046e2:	ea23 0307 	bic.w	r3, r3, r7
 80046e6:	6023      	str	r3, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80046e8:	6863      	ldr	r3, [r4, #4]
 80046ea:	ea23 0307 	bic.w	r3, r3, r7
 80046ee:	6063      	str	r3, [r4, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80046f0:	68e3      	ldr	r3, [r4, #12]
 80046f2:	ea23 0307 	bic.w	r3, r3, r7
 80046f6:	60e3      	str	r3, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80046f8:	68a3      	ldr	r3, [r4, #8]
 80046fa:	ea23 0707 	bic.w	r7, r3, r7
 80046fe:	60a7      	str	r7, [r4, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8004700:	68ab      	ldr	r3, [r5, #8]
 8004702:	ea23 0606 	bic.w	r6, r3, r6
 8004706:	60ae      	str	r6, [r5, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004708:	2603      	movs	r6, #3
 800470a:	0053      	lsls	r3, r2, #1
 800470c:	6805      	ldr	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800470e:	f002 0c07 	and.w	ip, r2, #7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004712:	fa06 f303 	lsl.w	r3, r6, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004716:	270f      	movs	r7, #15
 8004718:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800471c:	ea25 0503 	bic.w	r5, r5, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004720:	fa07 f70c 	lsl.w	r7, r7, ip
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004724:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004726:	fa22 f506 	lsr.w	r5, r2, r6
 800472a:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800472e:	6a2e      	ldr	r6, [r5, #32]
 8004730:	ea26 0707 	bic.w	r7, r6, r7
 8004734:	622f      	str	r7, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004736:	68c5      	ldr	r5, [r0, #12]
 8004738:	ea25 0503 	bic.w	r5, r5, r3
 800473c:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800473e:	6845      	ldr	r5, [r0, #4]
 8004740:	ea25 050e 	bic.w	r5, r5, lr
 8004744:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004746:	6885      	ldr	r5, [r0, #8]
 8004748:	ea25 0303 	bic.w	r3, r5, r3
 800474c:	6083      	str	r3, [r0, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800474e:	3201      	adds	r2, #1
 8004750:	2a10      	cmp	r2, #16
 8004752:	d185      	bne.n	8004660 <HAL_GPIO_DeInit+0x14>
    }
  }
}
 8004754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004758:	2300      	movs	r3, #0
 800475a:	e7bd      	b.n	80046d8 <HAL_GPIO_DeInit+0x8c>
 800475c:	2301      	movs	r3, #1
 800475e:	e7bb      	b.n	80046d8 <HAL_GPIO_DeInit+0x8c>
 8004760:	2302      	movs	r3, #2
 8004762:	e7b9      	b.n	80046d8 <HAL_GPIO_DeInit+0x8c>
 8004764:	2303      	movs	r3, #3
 8004766:	e7b7      	b.n	80046d8 <HAL_GPIO_DeInit+0x8c>
 8004768:	2304      	movs	r3, #4
 800476a:	e7b5      	b.n	80046d8 <HAL_GPIO_DeInit+0x8c>
 800476c:	2305      	movs	r3, #5
 800476e:	e7b3      	b.n	80046d8 <HAL_GPIO_DeInit+0x8c>
 8004770:	2306      	movs	r3, #6
 8004772:	e7b1      	b.n	80046d8 <HAL_GPIO_DeInit+0x8c>
 8004774:	2307      	movs	r3, #7
 8004776:	e7af      	b.n	80046d8 <HAL_GPIO_DeInit+0x8c>
 8004778:	2308      	movs	r3, #8
 800477a:	e7ad      	b.n	80046d8 <HAL_GPIO_DeInit+0x8c>
 800477c:	40013c00 	.word	0x40013c00
 8004780:	40020000 	.word	0x40020000
 8004784:	40021400 	.word	0x40021400
 8004788:	40021800 	.word	0x40021800
 800478c:	40021c00 	.word	0x40021c00

08004790 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004790:	b10a      	cbz	r2, 8004796 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004792:	6181      	str	r1, [r0, #24]
  }
}
 8004794:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004796:	0409      	lsls	r1, r1, #16
 8004798:	e7fb      	b.n	8004792 <HAL_GPIO_WritePin+0x2>

0800479a <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800479a:	6803      	ldr	r3, [r0, #0]
 800479c:	699a      	ldr	r2, [r3, #24]
 800479e:	0791      	lsls	r1, r2, #30
 80047a0:	d501      	bpl.n	80047a6 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80047a2:	2200      	movs	r2, #0
 80047a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047a6:	699a      	ldr	r2, [r3, #24]
 80047a8:	07d2      	lsls	r2, r2, #31
 80047aa:	d403      	bmi.n	80047b4 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80047ac:	699a      	ldr	r2, [r3, #24]
 80047ae:	f042 0201 	orr.w	r2, r2, #1
 80047b2:	619a      	str	r2, [r3, #24]
  }
}
 80047b4:	4770      	bx	lr
	...

080047b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80047b8:	b530      	push	{r4, r5, lr}
 80047ba:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047bc:	f3c1 0109 	ubfx	r1, r1, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80047c0:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047c2:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 80047c4:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 80047ca:	4a05      	ldr	r2, [pc, #20]	; (80047e0 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047cc:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 80047ce:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 80047d6:	ea20 0002 	bic.w	r0, r0, r2
 80047da:	4303      	orrs	r3, r0
 80047dc:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80047de:	bd30      	pop	{r4, r5, pc}
 80047e0:	03ff63ff 	.word	0x03ff63ff

080047e4 <I2C_IsErrorOccurred>:
{
 80047e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 80047e8:	6803      	ldr	r3, [r0, #0]
{
 80047ea:	4604      	mov	r4, r0
 80047ec:	4688      	mov	r8, r1
 80047ee:	4617      	mov	r7, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 80047f0:	699d      	ldr	r5, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80047f2:	f015 0510 	ands.w	r5, r5, #16
 80047f6:	d079      	beq.n	80048ec <I2C_IsErrorOccurred+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047f8:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 80047fa:	2600      	movs	r6, #0
              hi2c->State = HAL_I2C_STATE_READY;
 80047fc:	f04f 0920 	mov.w	r9, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004800:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004802:	6823      	ldr	r3, [r4, #0]
 8004804:	699a      	ldr	r2, [r3, #24]
 8004806:	0695      	lsls	r5, r2, #26
 8004808:	d436      	bmi.n	8004878 <I2C_IsErrorOccurred+0x94>
 800480a:	b10e      	cbz	r6, 8004810 <I2C_IsErrorOccurred+0x2c>
    error_code |= HAL_I2C_ERROR_AF;
 800480c:	2504      	movs	r5, #4
 800480e:	e039      	b.n	8004884 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 8004810:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004814:	d0f6      	beq.n	8004804 <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004816:	f7ff fbcd 	bl	8003fb4 <HAL_GetTick>
 800481a:	1bc0      	subs	r0, r0, r7
 800481c:	4540      	cmp	r0, r8
 800481e:	d802      	bhi.n	8004826 <I2C_IsErrorOccurred+0x42>
 8004820:	f1b8 0f00 	cmp.w	r8, #0
 8004824:	d1ed      	bne.n	8004802 <I2C_IsErrorOccurred+0x1e>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004826:	6823      	ldr	r3, [r4, #0]
 8004828:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 800482a:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800482e:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8004830:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004832:	0400      	lsls	r0, r0, #16
 8004834:	d50a      	bpl.n	800484c <I2C_IsErrorOccurred+0x68>
 8004836:	0449      	lsls	r1, r1, #17
 8004838:	d408      	bmi.n	800484c <I2C_IsErrorOccurred+0x68>
              (tmp1 != I2C_CR2_STOP) && \
 800483a:	2a20      	cmp	r2, #32
 800483c:	d006      	beq.n	800484c <I2C_IsErrorOccurred+0x68>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004844:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8004846:	f7ff fbb5 	bl	8003fb4 <HAL_GetTick>
 800484a:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800484c:	6823      	ldr	r3, [r4, #0]
 800484e:	699d      	ldr	r5, [r3, #24]
 8004850:	f015 0520 	ands.w	r5, r5, #32
 8004854:	d1d5      	bne.n	8004802 <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004856:	f7ff fbad 	bl	8003fb4 <HAL_GetTick>
 800485a:	1bc0      	subs	r0, r0, r7
 800485c:	2819      	cmp	r0, #25
 800485e:	d9f5      	bls.n	800484c <I2C_IsErrorOccurred+0x68>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004860:	6c63      	ldr	r3, [r4, #68]	; 0x44
              status = HAL_ERROR;
 8004862:	2601      	movs	r6, #1
              __HAL_UNLOCK(hi2c);
 8004864:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004868:	f043 0320 	orr.w	r3, r3, #32
 800486c:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800486e:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004872:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
              status = HAL_ERROR;
 8004876:	e7e9      	b.n	800484c <I2C_IsErrorOccurred+0x68>
    if (status == HAL_OK)
 8004878:	2e00      	cmp	r6, #0
 800487a:	d1c7      	bne.n	800480c <I2C_IsErrorOccurred+0x28>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800487c:	2220      	movs	r2, #32
    error_code |= HAL_I2C_ERROR_AF;
 800487e:	2504      	movs	r5, #4
    status = HAL_ERROR;
 8004880:	2601      	movs	r6, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004882:	61da      	str	r2, [r3, #28]
  itflag = hi2c->Instance->ISR;
 8004884:	6823      	ldr	r3, [r4, #0]
 8004886:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004888:	05d0      	lsls	r0, r2, #23
 800488a:	d505      	bpl.n	8004898 <I2C_IsErrorOccurred+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800488c:	f44f 7180 	mov.w	r1, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8004890:	f045 0501 	orr.w	r5, r5, #1
    status = HAL_ERROR;
 8004894:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004896:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004898:	0551      	lsls	r1, r2, #21
 800489a:	d505      	bpl.n	80048a8 <I2C_IsErrorOccurred+0xc4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800489c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 80048a0:	f045 0508 	orr.w	r5, r5, #8
    status = HAL_ERROR;
 80048a4:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80048a6:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80048a8:	0592      	lsls	r2, r2, #22
 80048aa:	d521      	bpl.n	80048f0 <I2C_IsErrorOccurred+0x10c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80048ac:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 80048b0:	f045 0502 	orr.w	r5, r5, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80048b4:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80048b6:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 80048b8:	2601      	movs	r6, #1
    I2C_Flush_TXDR(hi2c);
 80048ba:	f7ff ff6e 	bl	800479a <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80048be:	6822      	ldr	r2, [r4, #0]
 80048c0:	6853      	ldr	r3, [r2, #4]
 80048c2:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80048c6:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80048ca:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80048ce:	f023 0301 	bic.w	r3, r3, #1
 80048d2:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 80048d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80048d6:	431d      	orrs	r5, r3
    hi2c->State = HAL_I2C_STATE_READY;
 80048d8:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 80048da:	6465      	str	r5, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80048dc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048e0:	2300      	movs	r3, #0
 80048e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80048e6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80048ea:	e003      	b.n	80048f4 <I2C_IsErrorOccurred+0x110>
  HAL_StatusTypeDef status = HAL_OK;
 80048ec:	462e      	mov	r6, r5
 80048ee:	e7c9      	b.n	8004884 <I2C_IsErrorOccurred+0xa0>
  if (status != HAL_OK)
 80048f0:	2e00      	cmp	r6, #0
 80048f2:	d1e0      	bne.n	80048b6 <I2C_IsErrorOccurred+0xd2>
}
 80048f4:	4630      	mov	r0, r6
 80048f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080048fa <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80048fa:	b570      	push	{r4, r5, r6, lr}
 80048fc:	4604      	mov	r4, r0
 80048fe:	460d      	mov	r5, r1
 8004900:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004902:	6823      	ldr	r3, [r4, #0]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	079b      	lsls	r3, r3, #30
 8004908:	d501      	bpl.n	800490e <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800490a:	2000      	movs	r0, #0
}
 800490c:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800490e:	4632      	mov	r2, r6
 8004910:	4629      	mov	r1, r5
 8004912:	4620      	mov	r0, r4
 8004914:	f7ff ff66 	bl	80047e4 <I2C_IsErrorOccurred>
 8004918:	b9a0      	cbnz	r0, 8004944 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800491a:	1c6a      	adds	r2, r5, #1
 800491c:	d0f1      	beq.n	8004902 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800491e:	f7ff fb49 	bl	8003fb4 <HAL_GetTick>
 8004922:	1b80      	subs	r0, r0, r6
 8004924:	42a8      	cmp	r0, r5
 8004926:	d801      	bhi.n	800492c <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8004928:	2d00      	cmp	r5, #0
 800492a:	d1ea      	bne.n	8004902 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800492c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800492e:	f043 0320 	orr.w	r3, r3, #32
 8004932:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004934:	2320      	movs	r3, #32
 8004936:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800493a:	2300      	movs	r3, #0
 800493c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8004940:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004944:	2001      	movs	r0, #1
 8004946:	e7e1      	b.n	800490c <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08004948 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8004948:	b570      	push	{r4, r5, r6, lr}
 800494a:	4604      	mov	r4, r0
 800494c:	460d      	mov	r5, r1
 800494e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004950:	6823      	ldr	r3, [r4, #0]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	069b      	lsls	r3, r3, #26
 8004956:	d501      	bpl.n	800495c <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8004958:	2000      	movs	r0, #0
}
 800495a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800495c:	4632      	mov	r2, r6
 800495e:	4629      	mov	r1, r5
 8004960:	4620      	mov	r0, r4
 8004962:	f7ff ff3f 	bl	80047e4 <I2C_IsErrorOccurred>
 8004966:	b990      	cbnz	r0, 800498e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004968:	f7ff fb24 	bl	8003fb4 <HAL_GetTick>
 800496c:	1b80      	subs	r0, r0, r6
 800496e:	42a8      	cmp	r0, r5
 8004970:	d801      	bhi.n	8004976 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8004972:	2d00      	cmp	r5, #0
 8004974:	d1ec      	bne.n	8004950 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004976:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004978:	f043 0320 	orr.w	r3, r3, #32
 800497c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800497e:	2320      	movs	r3, #32
 8004980:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004984:	2300      	movs	r3, #0
 8004986:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800498a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800498e:	2001      	movs	r0, #1
 8004990:	e7e3      	b.n	800495a <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08004992 <I2C_WaitOnFlagUntilTimeout>:
{
 8004992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004996:	9f06      	ldr	r7, [sp, #24]
 8004998:	4604      	mov	r4, r0
 800499a:	4688      	mov	r8, r1
 800499c:	4616      	mov	r6, r2
 800499e:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049a0:	6822      	ldr	r2, [r4, #0]
 80049a2:	6993      	ldr	r3, [r2, #24]
 80049a4:	ea38 0303 	bics.w	r3, r8, r3
 80049a8:	bf0c      	ite	eq
 80049aa:	2301      	moveq	r3, #1
 80049ac:	2300      	movne	r3, #0
 80049ae:	42b3      	cmp	r3, r6
 80049b0:	d001      	beq.n	80049b6 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 80049b2:	2000      	movs	r0, #0
 80049b4:	e015      	b.n	80049e2 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80049b6:	1c6b      	adds	r3, r5, #1
 80049b8:	d0f3      	beq.n	80049a2 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ba:	f7ff fafb 	bl	8003fb4 <HAL_GetTick>
 80049be:	1bc0      	subs	r0, r0, r7
 80049c0:	42a8      	cmp	r0, r5
 80049c2:	d801      	bhi.n	80049c8 <I2C_WaitOnFlagUntilTimeout+0x36>
 80049c4:	2d00      	cmp	r5, #0
 80049c6:	d1eb      	bne.n	80049a0 <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80049ca:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049cc:	f043 0320 	orr.w	r3, r3, #32
 80049d0:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80049d2:	2320      	movs	r3, #32
 80049d4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049d8:	2300      	movs	r3, #0
 80049da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80049de:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80049e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080049e8 <I2C_RequestMemoryWrite>:
{
 80049e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80049ec:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80049ee:	4b18      	ldr	r3, [pc, #96]	; (8004a50 <I2C_RequestMemoryWrite+0x68>)
{
 80049f0:	4605      	mov	r5, r0
 80049f2:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80049f4:	9300      	str	r3, [sp, #0]
 80049f6:	b2f2      	uxtb	r2, r6
 80049f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
{
 80049fc:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004a00:	f7ff feda 	bl	80047b8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a04:	4628      	mov	r0, r5
 8004a06:	4642      	mov	r2, r8
 8004a08:	4639      	mov	r1, r7
 8004a0a:	f7ff ff76 	bl	80048fa <I2C_WaitOnTXISFlagUntilTimeout>
 8004a0e:	b118      	cbz	r0, 8004a18 <I2C_RequestMemoryWrite+0x30>
    return HAL_ERROR;
 8004a10:	2001      	movs	r0, #1
}
 8004a12:	b002      	add	sp, #8
 8004a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a18:	2e01      	cmp	r6, #1
 8004a1a:	682b      	ldr	r3, [r5, #0]
 8004a1c:	d10d      	bne.n	8004a3a <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a1e:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004a20:	2200      	movs	r2, #0
 8004a22:	2180      	movs	r1, #128	; 0x80
 8004a24:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a26:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004a28:	463b      	mov	r3, r7
 8004a2a:	f8cd 8000 	str.w	r8, [sp]
 8004a2e:	f7ff ffb0 	bl	8004992 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8004a32:	3800      	subs	r0, #0
 8004a34:	bf18      	it	ne
 8004a36:	2001      	movne	r0, #1
 8004a38:	e7eb      	b.n	8004a12 <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a3a:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a3c:	4639      	mov	r1, r7
 8004a3e:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a40:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a42:	4642      	mov	r2, r8
 8004a44:	f7ff ff59 	bl	80048fa <I2C_WaitOnTXISFlagUntilTimeout>
 8004a48:	2800      	cmp	r0, #0
 8004a4a:	d1e1      	bne.n	8004a10 <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a4c:	682b      	ldr	r3, [r5, #0]
 8004a4e:	e7e6      	b.n	8004a1e <I2C_RequestMemoryWrite+0x36>
 8004a50:	80002000 	.word	0x80002000

08004a54 <I2C_RequestMemoryRead>:
{
 8004a54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004a58:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004a5a:	4b18      	ldr	r3, [pc, #96]	; (8004abc <I2C_RequestMemoryRead+0x68>)
{
 8004a5c:	4605      	mov	r5, r0
 8004a5e:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	b2f2      	uxtb	r2, r6
 8004a64:	2300      	movs	r3, #0
{
 8004a66:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004a6a:	f7ff fea5 	bl	80047b8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a6e:	4628      	mov	r0, r5
 8004a70:	4642      	mov	r2, r8
 8004a72:	4639      	mov	r1, r7
 8004a74:	f7ff ff41 	bl	80048fa <I2C_WaitOnTXISFlagUntilTimeout>
 8004a78:	b118      	cbz	r0, 8004a82 <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 8004a7a:	2001      	movs	r0, #1
}
 8004a7c:	b002      	add	sp, #8
 8004a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a82:	2e01      	cmp	r6, #1
 8004a84:	682b      	ldr	r3, [r5, #0]
 8004a86:	d10d      	bne.n	8004aa4 <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a88:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	2140      	movs	r1, #64	; 0x40
 8004a8e:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a90:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004a92:	463b      	mov	r3, r7
 8004a94:	f8cd 8000 	str.w	r8, [sp]
 8004a98:	f7ff ff7b 	bl	8004992 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8004a9c:	3800      	subs	r0, #0
 8004a9e:	bf18      	it	ne
 8004aa0:	2001      	movne	r0, #1
 8004aa2:	e7eb      	b.n	8004a7c <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004aa4:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aa6:	4639      	mov	r1, r7
 8004aa8:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004aaa:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aac:	4642      	mov	r2, r8
 8004aae:	f7ff ff24 	bl	80048fa <I2C_WaitOnTXISFlagUntilTimeout>
 8004ab2:	2800      	cmp	r0, #0
 8004ab4:	d1e1      	bne.n	8004a7a <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ab6:	682b      	ldr	r3, [r5, #0]
 8004ab8:	e7e6      	b.n	8004a88 <I2C_RequestMemoryRead+0x34>
 8004aba:	bf00      	nop
 8004abc:	80002000 	.word	0x80002000

08004ac0 <HAL_I2C_Init>:
{
 8004ac0:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8004ac2:	4604      	mov	r4, r0
 8004ac4:	2800      	cmp	r0, #0
 8004ac6:	d04a      	beq.n	8004b5e <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ac8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004acc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004ad0:	b91b      	cbnz	r3, 8004ada <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8004ad2:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8004ad6:	f7fc fc6f 	bl	80013b8 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ada:	2324      	movs	r3, #36	; 0x24
 8004adc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8004ae0:	6823      	ldr	r3, [r4, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	f022 0201 	bic.w	r2, r2, #1
 8004ae8:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004aea:	6862      	ldr	r2, [r4, #4]
 8004aec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004af0:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004af8:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004afa:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8004afe:	2901      	cmp	r1, #1
 8004b00:	d124      	bne.n	8004b4c <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b06:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004b08:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b0a:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004b0c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004b10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b14:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004b16:	68da      	ldr	r2, [r3, #12]
 8004b18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b1c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b1e:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8004b22:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004b24:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b26:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004b2a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004b2c:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	f042 0201 	orr.w	r2, r2, #1
 8004b3a:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8004b3c:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b3e:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004b40:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b44:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b46:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8004b4a:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004b4c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b50:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004b52:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b54:	d1d8      	bne.n	8004b08 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004b56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b5a:	605a      	str	r2, [r3, #4]
 8004b5c:	e7d4      	b.n	8004b08 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8004b5e:	2001      	movs	r0, #1
 8004b60:	e7f3      	b.n	8004b4a <HAL_I2C_Init+0x8a>

08004b62 <HAL_I2C_DeInit>:
{
 8004b62:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8004b64:	4604      	mov	r4, r0
 8004b66:	b198      	cbz	r0, 8004b90 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8004b68:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b6a:	2324      	movs	r3, #36	; 0x24
 8004b6c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8004b70:	6813      	ldr	r3, [r2, #0]
 8004b72:	f023 0301 	bic.w	r3, r3, #1
 8004b76:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8004b78:	f7fc fc64 	bl	8001444 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b7c:	2000      	movs	r0, #0
 8004b7e:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 8004b80:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8004b84:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b88:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b8a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8004b8e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004b90:	2001      	movs	r0, #1
 8004b92:	e7fc      	b.n	8004b8e <HAL_I2C_DeInit+0x2c>

08004b94 <HAL_I2C_Mem_Write>:
{
 8004b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b98:	b085      	sub	sp, #20
 8004b9a:	469b      	mov	fp, r3
 8004b9c:	4604      	mov	r4, r0
 8004b9e:	460f      	mov	r7, r1
 8004ba0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8004ba4:	4692      	mov	sl, r2
 8004ba6:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8004baa:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bac:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004bb0:	2b20      	cmp	r3, #32
 8004bb2:	f040 80a3 	bne.w	8004cfc <HAL_I2C_Mem_Write+0x168>
    if ((pData == NULL) || (Size == 0U))
 8004bb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bb8:	b10b      	cbz	r3, 8004bbe <HAL_I2C_Mem_Write+0x2a>
 8004bba:	9b03      	ldr	r3, [sp, #12]
 8004bbc:	b933      	cbnz	r3, 8004bcc <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004bbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bc2:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8004bc4:	2001      	movs	r0, #1
}
 8004bc6:	b005      	add	sp, #20
 8004bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8004bcc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	f000 8093 	beq.w	8004cfc <HAL_I2C_Mem_Write+0x168>
 8004bd6:	2501      	movs	r5, #1
 8004bd8:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004bdc:	f7ff f9ea 	bl	8003fb4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004be0:	2319      	movs	r3, #25
 8004be2:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8004be4:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004be6:	462a      	mov	r2, r5
 8004be8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004bec:	4620      	mov	r0, r4
 8004bee:	f7ff fed0 	bl	8004992 <I2C_WaitOnFlagUntilTimeout>
 8004bf2:	4680      	mov	r8, r0
 8004bf4:	2800      	cmp	r0, #0
 8004bf6:	d1e5      	bne.n	8004bc4 <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004bf8:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
 8004bfa:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004bfc:	4652      	mov	r2, sl
 8004bfe:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c00:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c04:	2340      	movs	r3, #64	; 0x40
 8004c06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8004c0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c0c:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c0e:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8004c10:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004c12:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c14:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8004c18:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c1a:	465b      	mov	r3, fp
 8004c1c:	f7ff fee4 	bl	80049e8 <I2C_RequestMemoryWrite>
 8004c20:	b110      	cbz	r0, 8004c28 <HAL_I2C_Mem_Write+0x94>
      __HAL_UNLOCK(hi2c);
 8004c22:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004c26:	e7cd      	b.n	8004bc4 <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c28:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	2bff      	cmp	r3, #255	; 0xff
 8004c2e:	d955      	bls.n	8004cdc <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c30:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004c32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c36:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c38:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004c3a:	4639      	mov	r1, r7
 8004c3c:	4620      	mov	r0, r4
 8004c3e:	f7ff fdbb 	bl	80047b8 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c42:	4632      	mov	r2, r6
 8004c44:	4649      	mov	r1, r9
 8004c46:	4620      	mov	r0, r4
 8004c48:	f7ff fe57 	bl	80048fa <I2C_WaitOnTXISFlagUntilTimeout>
 8004c4c:	2800      	cmp	r0, #0
 8004c4e:	d1b9      	bne.n	8004bc4 <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c52:	6822      	ldr	r2, [r4, #0]
 8004c54:	f813 1b01 	ldrb.w	r1, [r3], #1
 8004c58:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004c5a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004c5c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004c5e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004c60:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8004c62:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8004c64:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8004c66:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8004c68:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c6a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004c6c:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	b1ab      	cbz	r3, 8004c9e <HAL_I2C_Mem_Write+0x10a>
 8004c72:	b9a2      	cbnz	r2, 8004c9e <HAL_I2C_Mem_Write+0x10a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c74:	464b      	mov	r3, r9
 8004c76:	2180      	movs	r1, #128	; 0x80
 8004c78:	4620      	mov	r0, r4
 8004c7a:	9600      	str	r6, [sp, #0]
 8004c7c:	f7ff fe89 	bl	8004992 <I2C_WaitOnFlagUntilTimeout>
 8004c80:	2800      	cmp	r0, #0
 8004c82:	d19f      	bne.n	8004bc4 <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c84:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	2bff      	cmp	r3, #255	; 0xff
 8004c8a:	d92f      	bls.n	8004cec <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c8c:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c92:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c94:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c96:	4639      	mov	r1, r7
 8004c98:	4620      	mov	r0, r4
 8004c9a:	f7ff fd8d 	bl	80047b8 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8004c9e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1cd      	bne.n	8004c42 <HAL_I2C_Mem_Write+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ca6:	4632      	mov	r2, r6
 8004ca8:	4649      	mov	r1, r9
 8004caa:	4620      	mov	r0, r4
 8004cac:	f7ff fe4c 	bl	8004948 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004cb0:	2800      	cmp	r0, #0
 8004cb2:	d187      	bne.n	8004bc4 <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cb4:	6823      	ldr	r3, [r4, #0]
 8004cb6:	2120      	movs	r1, #32
 8004cb8:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8004cc0:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8004cc4:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8004cc8:	f022 0201 	bic.w	r2, r2, #1
 8004ccc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004cce:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004cd2:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004cd6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8004cda:	e774      	b.n	8004bc6 <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8004cdc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004cde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ce2:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8004ce4:	b292      	uxth	r2, r2
 8004ce6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004ce8:	b2d2      	uxtb	r2, r2
 8004cea:	e7a6      	b.n	8004c3a <HAL_I2C_Mem_Write+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 8004cec:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004cee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cf2:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8004cf4:	b292      	uxth	r2, r2
 8004cf6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004cf8:	b2d2      	uxtb	r2, r2
 8004cfa:	e7cc      	b.n	8004c96 <HAL_I2C_Mem_Write+0x102>
    return HAL_BUSY;
 8004cfc:	2002      	movs	r0, #2
 8004cfe:	e762      	b.n	8004bc6 <HAL_I2C_Mem_Write+0x32>

08004d00 <HAL_I2C_Mem_Read>:
{
 8004d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d04:	b085      	sub	sp, #20
 8004d06:	469b      	mov	fp, r3
 8004d08:	4604      	mov	r4, r0
 8004d0a:	460f      	mov	r7, r1
 8004d0c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8004d10:	4692      	mov	sl, r2
 8004d12:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8004d16:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d18:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004d1c:	2b20      	cmp	r3, #32
 8004d1e:	f040 80a7 	bne.w	8004e70 <HAL_I2C_Mem_Read+0x170>
    if ((pData == NULL) || (Size == 0U))
 8004d22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d24:	b10b      	cbz	r3, 8004d2a <HAL_I2C_Mem_Read+0x2a>
 8004d26:	9b03      	ldr	r3, [sp, #12]
 8004d28:	b933      	cbnz	r3, 8004d38 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004d2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d2e:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8004d30:	2001      	movs	r0, #1
}
 8004d32:	b005      	add	sp, #20
 8004d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8004d38:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	f000 8097 	beq.w	8004e70 <HAL_I2C_Mem_Read+0x170>
 8004d42:	2501      	movs	r5, #1
 8004d44:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004d48:	f7ff f934 	bl	8003fb4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d4c:	2319      	movs	r3, #25
 8004d4e:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8004d50:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d52:	462a      	mov	r2, r5
 8004d54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d58:	4620      	mov	r0, r4
 8004d5a:	f7ff fe1a 	bl	8004992 <I2C_WaitOnFlagUntilTimeout>
 8004d5e:	4680      	mov	r8, r0
 8004d60:	2800      	cmp	r0, #0
 8004d62:	d1e5      	bne.n	8004d30 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d64:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 8004d66:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d68:	4652      	mov	r2, sl
 8004d6a:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d6c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d70:	2340      	movs	r3, #64	; 0x40
 8004d72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8004d76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d78:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d7a:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8004d7c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004d7e:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d80:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8004d84:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d86:	465b      	mov	r3, fp
 8004d88:	f7ff fe64 	bl	8004a54 <I2C_RequestMemoryRead>
 8004d8c:	b110      	cbz	r0, 8004d94 <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 8004d8e:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004d92:	e7cd      	b.n	8004d30 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d94:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	2bff      	cmp	r3, #255	; 0xff
 8004d9a:	4b36      	ldr	r3, [pc, #216]	; (8004e74 <HAL_I2C_Mem_Read+0x174>)
 8004d9c:	d958      	bls.n	8004e50 <HAL_I2C_Mem_Read+0x150>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d9e:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004da0:	9300      	str	r3, [sp, #0]
 8004da2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004da6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004da8:	4639      	mov	r1, r7
 8004daa:	4620      	mov	r0, r4
 8004dac:	f7ff fd04 	bl	80047b8 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004db0:	464b      	mov	r3, r9
 8004db2:	2200      	movs	r2, #0
 8004db4:	2104      	movs	r1, #4
 8004db6:	4620      	mov	r0, r4
 8004db8:	9600      	str	r6, [sp, #0]
 8004dba:	f7ff fdea 	bl	8004992 <I2C_WaitOnFlagUntilTimeout>
 8004dbe:	2800      	cmp	r0, #0
 8004dc0:	d1b6      	bne.n	8004d30 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004dc2:	6823      	ldr	r3, [r4, #0]
 8004dc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004dc8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004dca:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004dcc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004dce:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8004dd0:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8004dd2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004dd4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004dd6:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8004dd8:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8004dda:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004de0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	b1ab      	cbz	r3, 8004e12 <HAL_I2C_Mem_Read+0x112>
 8004de6:	b9a2      	cbnz	r2, 8004e12 <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004de8:	464b      	mov	r3, r9
 8004dea:	2180      	movs	r1, #128	; 0x80
 8004dec:	4620      	mov	r0, r4
 8004dee:	9600      	str	r6, [sp, #0]
 8004df0:	f7ff fdcf 	bl	8004992 <I2C_WaitOnFlagUntilTimeout>
 8004df4:	2800      	cmp	r0, #0
 8004df6:	d19b      	bne.n	8004d30 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004df8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	2bff      	cmp	r3, #255	; 0xff
 8004dfe:	d92f      	bls.n	8004e60 <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e00:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004e02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e06:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e08:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e0a:	4639      	mov	r1, r7
 8004e0c:	4620      	mov	r0, r4
 8004e0e:	f7ff fcd3 	bl	80047b8 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8004e12:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1ca      	bne.n	8004db0 <HAL_I2C_Mem_Read+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e1a:	4632      	mov	r2, r6
 8004e1c:	4649      	mov	r1, r9
 8004e1e:	4620      	mov	r0, r4
 8004e20:	f7ff fd92 	bl	8004948 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e24:	2800      	cmp	r0, #0
 8004e26:	d183      	bne.n	8004d30 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e28:	6823      	ldr	r3, [r4, #0]
 8004e2a:	2120      	movs	r1, #32
 8004e2c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8004e34:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8004e38:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8004e3c:	f022 0201 	bic.w	r2, r2, #1
 8004e40:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004e42:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004e46:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e4a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8004e4e:	e770      	b.n	8004d32 <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8004e50:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e52:	9300      	str	r3, [sp, #0]
 8004e54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8004e58:	b292      	uxth	r2, r2
 8004e5a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e5c:	b2d2      	uxtb	r2, r2
 8004e5e:	e7a3      	b.n	8004da8 <HAL_I2C_Mem_Read+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 8004e60:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e66:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8004e68:	b292      	uxth	r2, r2
 8004e6a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e6c:	b2d2      	uxtb	r2, r2
 8004e6e:	e7cc      	b.n	8004e0a <HAL_I2C_Mem_Read+0x10a>
    return HAL_BUSY;
 8004e70:	2002      	movs	r0, #2
 8004e72:	e75e      	b.n	8004d32 <HAL_I2C_Mem_Read+0x32>
 8004e74:	80002400 	.word	0x80002400

08004e78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004e78:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e7a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004e7e:	2b20      	cmp	r3, #32
 8004e80:	b2dc      	uxtb	r4, r3
 8004e82:	d11d      	bne.n	8004ec0 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e84:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d019      	beq.n	8004ec0 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e8c:	2324      	movs	r3, #36	; 0x24
 8004e8e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e92:	6803      	ldr	r3, [r0, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	f022 0201 	bic.w	r2, r2, #1
 8004e9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ea2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	4311      	orrs	r1, r2
 8004ea8:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	f042 0201 	orr.w	r2, r2, #1
 8004eb0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eb2:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004eb4:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004eb8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8004ebc:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004ebe:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8004ec0:	2002      	movs	r0, #2
 8004ec2:	e7fc      	b.n	8004ebe <HAL_I2CEx_ConfigAnalogFilter+0x46>

08004ec4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ec4:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ec6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004eca:	2b20      	cmp	r3, #32
 8004ecc:	b2dc      	uxtb	r4, r3
 8004ece:	d11c      	bne.n	8004f0a <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ed0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d018      	beq.n	8004f0a <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ed8:	2324      	movs	r3, #36	; 0x24
 8004eda:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ede:	6803      	ldr	r3, [r0, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	f022 0201 	bic.w	r2, r2, #1
 8004ee6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004ee8:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004eea:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004eee:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004ef2:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	f042 0201 	orr.w	r2, r2, #1
 8004efa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004efc:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004efe:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004f02:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8004f06:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004f08:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8004f0a:	2002      	movs	r0, #2
 8004f0c:	e7fc      	b.n	8004f08 <HAL_I2CEx_ConfigDigitalFilter+0x44>

08004f0e <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004f0e:	01d2      	lsls	r2, r2, #7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004f10:	f8d1 c000 	ldr.w	ip, [r1]
{
 8004f14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004f18:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004f1a:	6804      	ldr	r4, [r0, #0]
 8004f1c:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004f1e:	f10c 0601 	add.w	r6, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004f22:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004f24:	68e5      	ldr	r5, [r4, #12]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004f26:	f04f 0e00 	mov.w	lr, #0
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004f2a:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004f2e:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004f30:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004f34:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004f38:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004f3a:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004f3c:	68e0      	ldr	r0, [r4, #12]
 8004f3e:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8004f42:	4430      	add	r0, r6
 8004f44:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004f48:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004f4a:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004f4c:	68e0      	ldr	r0, [r4, #12]
 8004f4e:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8004f52:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004f54:	6898      	ldr	r0, [r3, #8]
 8004f56:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8004f5a:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004f5c:	6888      	ldr	r0, [r1, #8]
 8004f5e:	68e6      	ldr	r6, [r4, #12]
 8004f60:	3001      	adds	r0, #1
 8004f62:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8004f66:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004f68:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004f6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8004f6e:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004f70:	6918      	ldr	r0, [r3, #16]
 8004f72:	f020 0007 	bic.w	r0, r0, #7
 8004f76:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004f78:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004f7a:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004f7c:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004f80:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004f84:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004f88:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8004f8c:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8004f90:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8004f94:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8004f98:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004f9a:	6958      	ldr	r0, [r3, #20]
 8004f9c:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8004fa0:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004fa2:	6948      	ldr	r0, [r1, #20]
 8004fa4:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004fa6:	69d8      	ldr	r0, [r3, #28]
 8004fa8:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8004fac:	f020 0007 	bic.w	r0, r0, #7
 8004fb0:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004fb2:	e9d1 5007 	ldrd	r5, r0, [r1, #28]
 8004fb6:	4305      	orrs	r5, r0
 8004fb8:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004fba:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004fbc:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004fbe:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004fc2:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004fc4:	b31e      	cbz	r6, 800500e <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004fc6:	2e01      	cmp	r6, #1
 8004fc8:	d023      	beq.n	8005012 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004fca:	1eb0      	subs	r0, r6, #2
 8004fcc:	2802      	cmp	r0, #2
 8004fce:	d922      	bls.n	8005016 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004fd0:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8004fd2:	bf0c      	ite	eq
 8004fd4:	2002      	moveq	r0, #2
 8004fd6:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004fd8:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004fda:	eba7 070c 	sub.w	r7, r7, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004fde:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8004fe2:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004fe4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004fe6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004fe8:	4345      	muls	r5, r0
 8004fea:	4378      	muls	r0, r7
 8004fec:	3003      	adds	r0, #3
 8004fee:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8004ff2:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004ff4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004ff6:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8004ffa:	f020 0007 	bic.w	r0, r0, #7
 8004ffe:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005000:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005002:	58a3      	ldr	r3, [r4, r2]
 8005004:	f043 0301 	orr.w	r3, r3, #1
 8005008:	50a3      	str	r3, [r4, r2]
}
 800500a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 800500e:	2004      	movs	r0, #4
 8005010:	e7e2      	b.n	8004fd8 <LTDC_SetConfig+0xca>
    tmp = 3U;
 8005012:	2003      	movs	r0, #3
 8005014:	e7e0      	b.n	8004fd8 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8005016:	2002      	movs	r0, #2
 8005018:	e7de      	b.n	8004fd8 <LTDC_SetConfig+0xca>
	...

0800501c <HAL_LTDC_Init>:
{
 800501c:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800501e:	4604      	mov	r4, r0
 8005020:	2800      	cmp	r0, #0
 8005022:	d063      	beq.n	80050ec <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005024:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8005028:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800502c:	b91b      	cbnz	r3, 8005036 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800502e:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8005032:	f7fc fa23 	bl	800147c <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005036:	2302      	movs	r3, #2
 8005038:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800503c:	6823      	ldr	r3, [r4, #0]
 800503e:	699a      	ldr	r2, [r3, #24]
 8005040:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005044:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005046:	6999      	ldr	r1, [r3, #24]
 8005048:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800504c:	4302      	orrs	r2, r0
 800504e:	68e0      	ldr	r0, [r4, #12]
 8005050:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005052:	6920      	ldr	r0, [r4, #16]
 8005054:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005056:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005058:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800505a:	4925      	ldr	r1, [pc, #148]	; (80050f0 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800505c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800505e:	689a      	ldr	r2, [r3, #8]
 8005060:	400a      	ands	r2, r1
 8005062:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005064:	689a      	ldr	r2, [r3, #8]
 8005066:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800506a:	69a0      	ldr	r0, [r4, #24]
 800506c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800506e:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005070:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005072:	68da      	ldr	r2, [r3, #12]
 8005074:	400a      	ands	r2, r1
 8005076:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005078:	68da      	ldr	r2, [r3, #12]
 800507a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800507e:	6a20      	ldr	r0, [r4, #32]
 8005080:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005082:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005084:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005086:	691a      	ldr	r2, [r3, #16]
 8005088:	400a      	ands	r2, r1
 800508a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800508c:	691a      	ldr	r2, [r3, #16]
 800508e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005092:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005094:	4302      	orrs	r2, r0
 8005096:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005098:	695a      	ldr	r2, [r3, #20]
 800509a:	4011      	ands	r1, r2
 800509c:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800509e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80050a0:	695a      	ldr	r2, [r3, #20]
 80050a2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80050a6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80050a8:	430a      	orrs	r2, r1
 80050aa:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80050ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80050ae:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80050b2:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80050b6:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80050ba:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80050bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80050be:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80050c2:	430a      	orrs	r2, r1
 80050c4:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80050c8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80050cc:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80050ce:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80050d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050d2:	f042 0206 	orr.w	r2, r2, #6
 80050d6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80050d8:	699a      	ldr	r2, [r3, #24]
 80050da:	f042 0201 	orr.w	r2, r2, #1
 80050de:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 80050e0:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80050e2:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80050e6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 80050ea:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80050ec:	2001      	movs	r0, #1
 80050ee:	e7fc      	b.n	80050ea <HAL_LTDC_Init+0xce>
 80050f0:	f000f800 	.word	0xf000f800

080050f4 <HAL_LTDC_ErrorCallback>:
 80050f4:	4770      	bx	lr

080050f6 <HAL_LTDC_ReloadEventCallback>:
 80050f6:	4770      	bx	lr

080050f8 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80050f8:	6803      	ldr	r3, [r0, #0]
{
 80050fa:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80050fc:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 80050fe:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005100:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005102:	0772      	lsls	r2, r6, #29
 8005104:	d514      	bpl.n	8005130 <HAL_LTDC_IRQHandler+0x38>
 8005106:	0769      	lsls	r1, r5, #29
 8005108:	d512      	bpl.n	8005130 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800510a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800510c:	f022 0204 	bic.w	r2, r2, #4
 8005110:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005112:	2204      	movs	r2, #4
 8005114:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005116:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800511a:	f043 0301 	orr.w	r3, r3, #1
 800511e:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8005122:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005124:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005128:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800512c:	f7ff ffe2 	bl	80050f4 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005130:	07b2      	lsls	r2, r6, #30
 8005132:	d516      	bpl.n	8005162 <HAL_LTDC_IRQHandler+0x6a>
 8005134:	07ab      	lsls	r3, r5, #30
 8005136:	d514      	bpl.n	8005162 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005138:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 800513a:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800513c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800513e:	f022 0202 	bic.w	r2, r2, #2
 8005142:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005144:	2202      	movs	r2, #2
 8005146:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005148:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800514c:	4313      	orrs	r3, r2
 800514e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005152:	2304      	movs	r3, #4
 8005154:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005158:	2300      	movs	r3, #0
 800515a:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800515e:	f7ff ffc9 	bl	80050f4 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005162:	07f0      	lsls	r0, r6, #31
 8005164:	d510      	bpl.n	8005188 <HAL_LTDC_IRQHandler+0x90>
 8005166:	07e9      	lsls	r1, r5, #31
 8005168:	d50e      	bpl.n	8005188 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800516a:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 800516c:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800516e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005170:	f022 0201 	bic.w	r2, r2, #1
 8005174:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005176:	2201      	movs	r2, #1
 8005178:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 800517a:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 800517c:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005180:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8005184:	f7fd feb4 	bl	8002ef0 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005188:	0732      	lsls	r2, r6, #28
 800518a:	d511      	bpl.n	80051b0 <HAL_LTDC_IRQHandler+0xb8>
 800518c:	072b      	lsls	r3, r5, #28
 800518e:	d50f      	bpl.n	80051b0 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005190:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005192:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005196:	f022 0208 	bic.w	r2, r2, #8
 800519a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800519c:	2208      	movs	r2, #8
 800519e:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80051a0:	2301      	movs	r3, #1
 80051a2:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80051a6:	2300      	movs	r3, #0
 80051a8:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 80051ac:	f7ff ffa3 	bl	80050f6 <HAL_LTDC_ReloadEventCallback>
}
 80051b0:	bd70      	pop	{r4, r5, r6, pc}

080051b2 <HAL_LTDC_ConfigLayer>:
{
 80051b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 80051b6:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 80051ba:	4606      	mov	r6, r0
 80051bc:	460f      	mov	r7, r1
 80051be:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	f04f 0002 	mov.w	r0, #2
 80051c6:	d01f      	beq.n	8005208 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80051c8:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 80051ca:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80051ce:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80051d0:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80051d4:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 80051d8:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80051dc:	3438      	adds	r4, #56	; 0x38
 80051de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80051e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80051e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80051e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80051e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80051e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80051ea:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80051ec:	4630      	mov	r0, r6
 80051ee:	4662      	mov	r2, ip
 80051f0:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80051f2:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80051f4:	f7ff fe8b 	bl	8004f0e <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80051f8:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 80051fa:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80051fc:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005200:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8005204:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8005208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800520c <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 800520c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8005210:	2b01      	cmp	r3, #1
 8005212:	f04f 0302 	mov.w	r3, #2
 8005216:	d012      	beq.n	800523e <HAL_LTDC_ProgramLineEvent+0x32>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005218:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800521c:	6803      	ldr	r3, [r0, #0]
 800521e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005220:	f022 0201 	bic.w	r2, r2, #1
 8005224:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 8005226:	4a07      	ldr	r2, [pc, #28]	; (8005244 <HAL_LTDC_ProgramLineEvent+0x38>)
 8005228:	6411      	str	r1, [r2, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800522a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800522c:	f042 0201 	orr.w	r2, r2, #1
 8005230:	635a      	str	r2, [r3, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 8005232:	2301      	movs	r3, #1
 8005234:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8005238:	2300      	movs	r3, #0
 800523a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 800523e:	4618      	mov	r0, r3
}
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	40016800 	.word	0x40016800

08005248 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8005248:	4b19      	ldr	r3, [pc, #100]	; (80052b0 <HAL_PWREx_EnableOverDrive+0x68>)
{
 800524a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800524c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800524e:	4c19      	ldr	r4, [pc, #100]	; (80052b4 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8005250:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005254:	641a      	str	r2, [r3, #64]	; 0x40
 8005256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800525c:	9301      	str	r3, [sp, #4]
 800525e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005260:	6823      	ldr	r3, [r4, #0]
 8005262:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005266:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005268:	f7fe fea4 	bl	8003fb4 <HAL_GetTick>
 800526c:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800526e:	6863      	ldr	r3, [r4, #4]
 8005270:	03da      	lsls	r2, r3, #15
 8005272:	d50c      	bpl.n	800528e <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005274:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005276:	4d0f      	ldr	r5, [pc, #60]	; (80052b4 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800527c:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800527e:	f7fe fe99 	bl	8003fb4 <HAL_GetTick>
 8005282:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005284:	686b      	ldr	r3, [r5, #4]
 8005286:	039b      	lsls	r3, r3, #14
 8005288:	d50a      	bpl.n	80052a0 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800528a:	2000      	movs	r0, #0
 800528c:	e006      	b.n	800529c <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800528e:	f7fe fe91 	bl	8003fb4 <HAL_GetTick>
 8005292:	1b40      	subs	r0, r0, r5
 8005294:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005298:	d9e9      	bls.n	800526e <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 800529a:	2003      	movs	r0, #3
}
 800529c:	b003      	add	sp, #12
 800529e:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80052a0:	f7fe fe88 	bl	8003fb4 <HAL_GetTick>
 80052a4:	1b00      	subs	r0, r0, r4
 80052a6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80052aa:	d9eb      	bls.n	8005284 <HAL_PWREx_EnableOverDrive+0x3c>
 80052ac:	e7f5      	b.n	800529a <HAL_PWREx_EnableOverDrive+0x52>
 80052ae:	bf00      	nop
 80052b0:	40023800 	.word	0x40023800
 80052b4:	40007000 	.word	0x40007000

080052b8 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80052b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80052bc:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 80052be:	b136      	cbz	r6, 80052ce <QSPI_Config+0x16>
 80052c0:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 80052c4:	d003      	beq.n	80052ce <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80052c6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80052c8:	6804      	ldr	r4, [r0, #0]
 80052ca:	3b01      	subs	r3, #1
 80052cc:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80052ce:	f8d1 a018 	ldr.w	sl, [r1, #24]
 80052d2:	e9d1 7c07 	ldrd	r7, ip, [r1, #28]
 80052d6:	f1ba 0f00 	cmp.w	sl, #0
 80052da:	d04e      	beq.n	800537a <QSPI_Config+0xc2>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80052dc:	694b      	ldr	r3, [r1, #20]
 80052de:	ea46 0a0a 	orr.w	sl, r6, sl
 80052e2:	6805      	ldr	r5, [r0, #0]
 80052e4:	f8d1 8000 	ldr.w	r8, [r1]
 80052e8:	ea4f 4e83 	mov.w	lr, r3, lsl #18
 80052ec:	6b48      	ldr	r0, [r1, #52]	; 0x34
 80052ee:	ea4a 0a02 	orr.w	sl, sl, r2
 80052f2:	e9d1 490b 	ldrd	r4, r9, [r1, #44]	; 0x2c
 80052f6:	f1bc 0f00 	cmp.w	ip, #0
 80052fa:	d026      	beq.n	800534a <QSPI_Config+0x92>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80052fc:	688b      	ldr	r3, [r1, #8]
 80052fe:	ea4c 0c0a 	orr.w	ip, ip, sl
 8005302:	690e      	ldr	r6, [r1, #16]
 8005304:	61eb      	str	r3, [r5, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005306:	b1a7      	cbz	r7, 8005332 <QSPI_Config+0x7a>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005308:	ea48 0307 	orr.w	r3, r8, r7
 800530c:	4323      	orrs	r3, r4
 800530e:	ea43 0309 	orr.w	r3, r3, r9
 8005312:	4303      	orrs	r3, r0
 8005314:	68c8      	ldr	r0, [r1, #12]
 8005316:	4333      	orrs	r3, r6
 8005318:	4303      	orrs	r3, r0
 800531a:	ea43 030e 	orr.w	r3, r3, lr
 800531e:	ea43 030c 	orr.w	r3, r3, ip
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005322:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005326:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005328:	d001      	beq.n	800532e <QSPI_Config+0x76>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800532a:	684b      	ldr	r3, [r1, #4]
 800532c:	61ab      	str	r3, [r5, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800532e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005332:	ea48 0304 	orr.w	r3, r8, r4
 8005336:	ea43 0309 	orr.w	r3, r3, r9
 800533a:	4303      	orrs	r3, r0
 800533c:	4333      	orrs	r3, r6
 800533e:	ea43 030e 	orr.w	r3, r3, lr
 8005342:	ea43 030c 	orr.w	r3, r3, ip
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005346:	616b      	str	r3, [r5, #20]
 8005348:	e7f1      	b.n	800532e <QSPI_Config+0x76>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800534a:	b167      	cbz	r7, 8005366 <QSPI_Config+0xae>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800534c:	ea48 0307 	orr.w	r3, r8, r7
 8005350:	4323      	orrs	r3, r4
 8005352:	ea43 0309 	orr.w	r3, r3, r9
 8005356:	4303      	orrs	r3, r0
 8005358:	68c8      	ldr	r0, [r1, #12]
 800535a:	4303      	orrs	r3, r0
 800535c:	ea43 030e 	orr.w	r3, r3, lr
 8005360:	ea43 030a 	orr.w	r3, r3, sl
 8005364:	e7dd      	b.n	8005322 <QSPI_Config+0x6a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005366:	ea48 0304 	orr.w	r3, r8, r4
 800536a:	ea43 0309 	orr.w	r3, r3, r9
 800536e:	4303      	orrs	r3, r0
 8005370:	ea43 030e 	orr.w	r3, r3, lr
 8005374:	ea43 030a 	orr.w	r3, r3, sl
 8005378:	e7e5      	b.n	8005346 <QSPI_Config+0x8e>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800537a:	f1bc 0f00 	cmp.w	ip, #0
 800537e:	d02c      	beq.n	80053da <QSPI_Config+0x122>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005380:	6804      	ldr	r4, [r0, #0]
 8005382:	688b      	ldr	r3, [r1, #8]
 8005384:	6908      	ldr	r0, [r1, #16]
 8005386:	61e3      	str	r3, [r4, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005388:	ea46 030c 	orr.w	r3, r6, ip
 800538c:	694e      	ldr	r6, [r1, #20]
 800538e:	ea43 0502 	orr.w	r5, r3, r2
 8005392:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 8005396:	04b6      	lsls	r6, r6, #18
 8005398:	e9d1 830b 	ldrd	r8, r3, [r1, #44]	; 0x2c
 800539c:	b1a7      	cbz	r7, 80053c8 <QSPI_Config+0x110>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800539e:	4338      	orrs	r0, r7
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80053a0:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80053a4:	ea40 0008 	orr.w	r0, r0, r8
 80053a8:	ea43 0300 	orr.w	r3, r3, r0
 80053ac:	68c8      	ldr	r0, [r1, #12]
 80053ae:	ea43 030c 	orr.w	r3, r3, ip
 80053b2:	ea43 0300 	orr.w	r3, r3, r0
 80053b6:	ea43 0306 	orr.w	r3, r3, r6
 80053ba:	ea43 0305 	orr.w	r3, r3, r5
 80053be:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80053c0:	d0b5      	beq.n	800532e <QSPI_Config+0x76>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80053c2:	684b      	ldr	r3, [r1, #4]
 80053c4:	61a3      	str	r3, [r4, #24]
 80053c6:	e7b2      	b.n	800532e <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80053c8:	ea40 0008 	orr.w	r0, r0, r8
 80053cc:	4303      	orrs	r3, r0
 80053ce:	ea43 030c 	orr.w	r3, r3, ip
 80053d2:	4333      	orrs	r3, r6
 80053d4:	432b      	orrs	r3, r5
 80053d6:	6163      	str	r3, [r4, #20]
 80053d8:	e7a9      	b.n	800532e <QSPI_Config+0x76>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80053da:	b1d7      	cbz	r7, 8005412 <QSPI_Config+0x15a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80053dc:	ea46 0307 	orr.w	r3, r6, r7
 80053e0:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80053e2:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80053e4:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80053e8:	ea43 0302 	orr.w	r3, r3, r2
 80053ec:	ea43 0304 	orr.w	r3, r3, r4
 80053f0:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 80053f2:	ea43 0304 	orr.w	r3, r3, r4
 80053f6:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 80053f8:	ea43 0304 	orr.w	r3, r3, r4
 80053fc:	68cc      	ldr	r4, [r1, #12]
 80053fe:	ea43 0304 	orr.w	r3, r3, r4
 8005402:	694c      	ldr	r4, [r1, #20]
 8005404:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8005408:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800540a:	d090      	beq.n	800532e <QSPI_Config+0x76>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800540c:	684b      	ldr	r3, [r1, #4]
 800540e:	6183      	str	r3, [r0, #24]
 8005410:	e78d      	b.n	800532e <QSPI_Config+0x76>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8005412:	2e00      	cmp	r6, #0
 8005414:	d08b      	beq.n	800532e <QSPI_Config+0x76>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005416:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8005418:	6800      	ldr	r0, [r0, #0]
 800541a:	4333      	orrs	r3, r6
 800541c:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 800541e:	431a      	orrs	r2, r3
 8005420:	694b      	ldr	r3, [r1, #20]
 8005422:	4332      	orrs	r2, r6
 8005424:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8005426:	4332      	orrs	r2, r6
 8005428:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 800542c:	6142      	str	r2, [r0, #20]
}
 800542e:	e77e      	b.n	800532e <QSPI_Config+0x76>

08005430 <QSPI_WaitFlagStateUntilTimeout>:
{
 8005430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005434:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005438:	4604      	mov	r4, r0
 800543a:	460e      	mov	r6, r1
 800543c:	4615      	mov	r5, r2
 800543e:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005440:	6822      	ldr	r2, [r4, #0]
 8005442:	6893      	ldr	r3, [r2, #8]
 8005444:	4233      	tst	r3, r6
 8005446:	bf14      	ite	ne
 8005448:	2301      	movne	r3, #1
 800544a:	2300      	moveq	r3, #0
 800544c:	42ab      	cmp	r3, r5
 800544e:	d101      	bne.n	8005454 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8005450:	2000      	movs	r0, #0
 8005452:	e012      	b.n	800547a <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8005454:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005458:	d0f3      	beq.n	8005442 <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800545a:	f7fe fdab 	bl	8003fb4 <HAL_GetTick>
 800545e:	1bc0      	subs	r0, r0, r7
 8005460:	4540      	cmp	r0, r8
 8005462:	d802      	bhi.n	800546a <QSPI_WaitFlagStateUntilTimeout+0x3a>
 8005464:	f1b8 0f00 	cmp.w	r8, #0
 8005468:	d1ea      	bne.n	8005440 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800546a:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800546c:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800546e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005472:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005474:	f043 0301 	orr.w	r3, r3, #1
 8005478:	6463      	str	r3, [r4, #68]	; 0x44
}
 800547a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005480 <HAL_QSPI_Init>:
{
 8005480:	b530      	push	{r4, r5, lr}
 8005482:	4604      	mov	r4, r0
 8005484:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 8005486:	f7fe fd95 	bl	8003fb4 <HAL_GetTick>
 800548a:	4603      	mov	r3, r0
  if(hqspi == NULL)
 800548c:	2c00      	cmp	r4, #0
 800548e:	d047      	beq.n	8005520 <HAL_QSPI_Init+0xa0>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005490:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005494:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8005498:	b94a      	cbnz	r2, 80054ae <HAL_QSPI_Init+0x2e>
 800549a:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 800549c:	4620      	mov	r0, r4
    hqspi->Lock = HAL_UNLOCKED;
 800549e:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 80054a2:	f7fc f89b 	bl	80015dc <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 80054a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80054aa:	9b03      	ldr	r3, [sp, #12]
 80054ac:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80054ae:	6820      	ldr	r0, [r4, #0]
 80054b0:	68a1      	ldr	r1, [r4, #8]
 80054b2:	6802      	ldr	r2, [r0, #0]
 80054b4:	3901      	subs	r1, #1
 80054b6:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 80054ba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80054be:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80054c0:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80054c2:	4620      	mov	r0, r4
 80054c4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80054c6:	9200      	str	r2, [sp, #0]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f7ff ffb1 	bl	8005430 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 80054ce:	bb10      	cbnz	r0, 8005516 <HAL_QSPI_Init+0x96>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80054d0:	6822      	ldr	r2, [r4, #0]
 80054d2:	69e5      	ldr	r5, [r4, #28]
 80054d4:	68e3      	ldr	r3, [r4, #12]
 80054d6:	6811      	ldr	r1, [r2, #0]
 80054d8:	432b      	orrs	r3, r5
 80054da:	6a25      	ldr	r5, [r4, #32]
 80054dc:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80054e0:	432b      	orrs	r3, r5
 80054e2:	6865      	ldr	r5, [r4, #4]
 80054e4:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 80054e8:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80054ec:	430b      	orrs	r3, r1
 80054ee:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80054f0:	6855      	ldr	r5, [r2, #4]
 80054f2:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 80054f6:	430b      	orrs	r3, r1
 80054f8:	6921      	ldr	r1, [r4, #16]
 80054fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80054fe:	4909      	ldr	r1, [pc, #36]	; (8005524 <HAL_QSPI_Init+0xa4>)
 8005500:	4029      	ands	r1, r5
 8005502:	430b      	orrs	r3, r1
 8005504:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8005506:	6813      	ldr	r3, [r2, #0]
 8005508:	f043 0301 	orr.w	r3, r3, #1
 800550c:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 800550e:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005510:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8005512:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8005516:	2300      	movs	r3, #0
 8005518:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800551c:	b005      	add	sp, #20
 800551e:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8005520:	2001      	movs	r0, #1
 8005522:	e7fb      	b.n	800551c <HAL_QSPI_Init+0x9c>
 8005524:	ffe0f8fe 	.word	0xffe0f8fe

08005528 <HAL_QSPI_DeInit>:
{
 8005528:	b510      	push	{r4, lr}
  if(hqspi == NULL)
 800552a:	4604      	mov	r4, r0
 800552c:	b168      	cbz	r0, 800554a <HAL_QSPI_DeInit+0x22>
  __HAL_QSPI_DISABLE(hqspi);
 800552e:	6802      	ldr	r2, [r0, #0]
 8005530:	6813      	ldr	r3, [r2, #0]
 8005532:	f023 0301 	bic.w	r3, r3, #1
 8005536:	6013      	str	r3, [r2, #0]
  HAL_QSPI_MspDeInit(hqspi);
 8005538:	f7fc f8be 	bl	80016b8 <HAL_QSPI_MspDeInit>
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800553c:	2000      	movs	r0, #0
 800553e:	6460      	str	r0, [r4, #68]	; 0x44
  hqspi->State = HAL_QSPI_STATE_RESET;
 8005540:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8005544:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8005548:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800554a:	2001      	movs	r0, #1
 800554c:	e7fc      	b.n	8005548 <HAL_QSPI_DeInit+0x20>

0800554e <HAL_QSPI_Command>:
{
 800554e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005552:	4604      	mov	r4, r0
 8005554:	b085      	sub	sp, #20
 8005556:	4617      	mov	r7, r2
 8005558:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
 800555a:	f7fe fd2b 	bl	8003fb4 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800555e:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8005562:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8005564:	2a01      	cmp	r2, #1
 8005566:	d033      	beq.n	80055d0 <HAL_QSPI_Command+0x82>
 8005568:	2201      	movs	r2, #1
 800556a:	2602      	movs	r6, #2
 800556c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005570:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005574:	2a01      	cmp	r2, #1
 8005576:	fa5f f882 	uxtb.w	r8, r2
 800557a:	d127      	bne.n	80055cc <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800557c:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800557e:	9003      	str	r0, [sp, #12]
 8005580:	2120      	movs	r1, #32
 8005582:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005584:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005586:	9700      	str	r7, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8005588:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800558c:	f7ff ff50 	bl	8005430 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8005590:	4605      	mov	r5, r0
 8005592:	b9a0      	cbnz	r0, 80055be <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005594:	4602      	mov	r2, r0
 8005596:	4649      	mov	r1, r9
 8005598:	4620      	mov	r0, r4
 800559a:	f7ff fe8d 	bl	80052b8 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 800559e:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 80055a2:	9b03      	ldr	r3, [sp, #12]
 80055a4:	b94a      	cbnz	r2, 80055ba <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80055a6:	4642      	mov	r2, r8
 80055a8:	4631      	mov	r1, r6
 80055aa:	4620      	mov	r0, r4
 80055ac:	9700      	str	r7, [sp, #0]
 80055ae:	f7ff ff3f 	bl	8005430 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 80055b2:	4605      	mov	r5, r0
 80055b4:	b918      	cbnz	r0, 80055be <HAL_QSPI_Command+0x70>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80055b6:	6823      	ldr	r3, [r4, #0]
 80055b8:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 80055ba:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80055be:	2300      	movs	r3, #0
 80055c0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80055c4:	4628      	mov	r0, r5
 80055c6:	b005      	add	sp, #20
 80055c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 80055cc:	4635      	mov	r5, r6
 80055ce:	e7f6      	b.n	80055be <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 80055d0:	2502      	movs	r5, #2
 80055d2:	e7f7      	b.n	80055c4 <HAL_QSPI_Command+0x76>

080055d4 <HAL_QSPI_AutoPolling>:
{
 80055d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80055d8:	4604      	mov	r4, r0
 80055da:	4615      	mov	r5, r2
 80055dc:	461e      	mov	r6, r3
 80055de:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 80055e0:	f7fe fce8 	bl	8003fb4 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80055e4:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80055e8:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 80055ea:	2a01      	cmp	r2, #1
 80055ec:	d040      	beq.n	8005670 <HAL_QSPI_AutoPolling+0x9c>
 80055ee:	2201      	movs	r2, #1
 80055f0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80055f4:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80055f8:	2a01      	cmp	r2, #1
 80055fa:	b2d7      	uxtb	r7, r2
 80055fc:	d136      	bne.n	800566c <HAL_QSPI_AutoPolling+0x98>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80055fe:	2142      	movs	r1, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005600:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005602:	9003      	str	r0, [sp, #12]
 8005604:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005606:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005608:	9600      	str	r6, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800560a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800560e:	2120      	movs	r1, #32
 8005610:	f7ff ff0e 	bl	8005430 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8005614:	bb20      	cbnz	r0, 8005660 <HAL_QSPI_AutoPolling+0x8c>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8005616:	6821      	ldr	r1, [r4, #0]
 8005618:	682a      	ldr	r2, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800561a:	6928      	ldr	r0, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800561c:	628a      	str	r2, [r1, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800561e:	686a      	ldr	r2, [r5, #4]
 8005620:	624a      	str	r2, [r1, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8005622:	68aa      	ldr	r2, [r5, #8]
 8005624:	62ca      	str	r2, [r1, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8005626:	680a      	ldr	r2, [r1, #0]
 8005628:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800562c:	4302      	orrs	r2, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800562e:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8005630:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005634:	600a      	str	r2, [r1, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8005636:	4641      	mov	r1, r8
      cmd->NbData = cfg->StatusBytesSize;
 8005638:	68ea      	ldr	r2, [r5, #12]
 800563a:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800563e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005642:	f7ff fe39 	bl	80052b8 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8005646:	9b03      	ldr	r3, [sp, #12]
 8005648:	463a      	mov	r2, r7
 800564a:	2108      	movs	r1, #8
 800564c:	4620      	mov	r0, r4
 800564e:	9600      	str	r6, [sp, #0]
 8005650:	f7ff feee 	bl	8005430 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8005654:	b920      	cbnz	r0, 8005660 <HAL_QSPI_AutoPolling+0x8c>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8005656:	6823      	ldr	r3, [r4, #0]
 8005658:	2208      	movs	r2, #8
 800565a:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800565c:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8005660:	2300      	movs	r3, #0
 8005662:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005666:	b004      	add	sp, #16
 8005668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_BUSY;
 800566c:	2002      	movs	r0, #2
 800566e:	e7f7      	b.n	8005660 <HAL_QSPI_AutoPolling+0x8c>
  __HAL_LOCK(hqspi);
 8005670:	2002      	movs	r0, #2
 8005672:	e7f8      	b.n	8005666 <HAL_QSPI_AutoPolling+0x92>

08005674 <HAL_QSPI_MemoryMapped>:
{
 8005674:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005676:	4604      	mov	r4, r0
 8005678:	4616      	mov	r6, r2
 800567a:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800567c:	f7fe fc9a 	bl	8003fb4 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8005680:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8005684:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8005686:	2a01      	cmp	r2, #1
 8005688:	d033      	beq.n	80056f2 <HAL_QSPI_MemoryMapped+0x7e>
 800568a:	2201      	movs	r2, #1
 800568c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005690:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005694:	2a01      	cmp	r2, #1
 8005696:	d12a      	bne.n	80056ee <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005698:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800569a:	2182      	movs	r1, #130	; 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800569c:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800569e:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 80056a0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80056a4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80056a6:	9100      	str	r1, [sp, #0]
 80056a8:	2120      	movs	r1, #32
 80056aa:	f7ff fec1 	bl	8005430 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80056ae:	4605      	mov	r5, r0
 80056b0:	b9b8      	cbnz	r0, 80056e2 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 80056b2:	6823      	ldr	r3, [r4, #0]
 80056b4:	6872      	ldr	r2, [r6, #4]
 80056b6:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 80056b8:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 80056ba:	f020 0008 	bic.w	r0, r0, #8
 80056be:	ea40 0002 	orr.w	r0, r0, r2
 80056c2:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 80056c4:	d107      	bne.n	80056d6 <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 80056c6:	6832      	ldr	r2, [r6, #0]
 80056c8:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 80056ca:	2210      	movs	r2, #16
 80056cc:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80056d4:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 80056d6:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80056da:	4639      	mov	r1, r7
 80056dc:	4620      	mov	r0, r4
 80056de:	f7ff fdeb 	bl	80052b8 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 80056e2:	2300      	movs	r3, #0
 80056e4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80056e8:	4628      	mov	r0, r5
 80056ea:	b003      	add	sp, #12
 80056ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 80056ee:	2502      	movs	r5, #2
 80056f0:	e7f7      	b.n	80056e2 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 80056f2:	2502      	movs	r5, #2
 80056f4:	e7f8      	b.n	80056e8 <HAL_QSPI_MemoryMapped+0x74>

080056f6 <HAL_QSPI_Abort>:
{
 80056f6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80056f8:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80056fa:	f7fe fc5b 	bl	8003fb4 <HAL_GetTick>
 80056fe:	4603      	mov	r3, r0
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8005700:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005704:	f012 0002 	ands.w	r0, r2, #2
 8005708:	d036      	beq.n	8005778 <HAL_QSPI_Abort+0x82>
    __HAL_UNLOCK(hqspi);
 800570a:	2200      	movs	r2, #0
 800570c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005710:	6822      	ldr	r2, [r4, #0]
 8005712:	6811      	ldr	r1, [r2, #0]
 8005714:	0749      	lsls	r1, r1, #29
 8005716:	d50d      	bpl.n	8005734 <HAL_QSPI_Abort+0x3e>
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005718:	6811      	ldr	r1, [r2, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 800571a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800571c:	f021 0104 	bic.w	r1, r1, #4
 8005720:	9303      	str	r3, [sp, #12]
 8005722:	6011      	str	r1, [r2, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 8005724:	f7fe fd69 	bl	80041fa <HAL_DMA_Abort>
      if(status != HAL_OK)
 8005728:	9b03      	ldr	r3, [sp, #12]
 800572a:	b118      	cbz	r0, 8005734 <HAL_QSPI_Abort+0x3e>
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800572c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800572e:	f042 0204 	orr.w	r2, r2, #4
 8005732:	6462      	str	r2, [r4, #68]	; 0x44
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8005734:	6821      	ldr	r1, [r4, #0]
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8005736:	4620      	mov	r0, r4
 8005738:	9303      	str	r3, [sp, #12]
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800573a:	680a      	ldr	r2, [r1, #0]
 800573c:	f042 0202 	orr.w	r2, r2, #2
 8005740:	600a      	str	r2, [r1, #0]
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8005742:	2102      	movs	r1, #2
 8005744:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005746:	9200      	str	r2, [sp, #0]
 8005748:	2201      	movs	r2, #1
 800574a:	f7ff fe71 	bl	8005430 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800574e:	9b03      	ldr	r3, [sp, #12]
 8005750:	b990      	cbnz	r0, 8005778 <HAL_QSPI_Abort+0x82>
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005752:	6822      	ldr	r2, [r4, #0]
 8005754:	2102      	movs	r1, #2
 8005756:	60d1      	str	r1, [r2, #12]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005758:	2120      	movs	r1, #32
 800575a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800575c:	9200      	str	r2, [sp, #0]
 800575e:	4602      	mov	r2, r0
 8005760:	4620      	mov	r0, r4
 8005762:	f7ff fe65 	bl	8005430 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8005766:	b938      	cbnz	r0, 8005778 <HAL_QSPI_Abort+0x82>
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8005768:	6822      	ldr	r2, [r4, #0]
 800576a:	6953      	ldr	r3, [r2, #20]
 800576c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8005770:	6153      	str	r3, [r2, #20]
      hqspi->State = HAL_QSPI_STATE_READY;
 8005772:	2301      	movs	r3, #1
 8005774:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8005778:	b004      	add	sp, #16
 800577a:	bd10      	pop	{r4, pc}

0800577c <HAL_QSPI_Transmit>:
{
 800577c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800577e:	4604      	mov	r4, r0
 8005780:	b085      	sub	sp, #20
 8005782:	4616      	mov	r6, r2
 8005784:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8005786:	f7fe fc15 	bl	8003fb4 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800578a:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800578e:	4603      	mov	r3, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8005790:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 8005792:	2a01      	cmp	r2, #1
 8005794:	d04c      	beq.n	8005830 <HAL_QSPI_Transmit+0xb4>
 8005796:	2201      	movs	r2, #1
 8005798:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800579c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80057a0:	2a01      	cmp	r2, #1
 80057a2:	b2d0      	uxtb	r0, r2
 80057a4:	d142      	bne.n	800582c <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80057a6:	2200      	movs	r2, #0
 80057a8:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 80057aa:	2f00      	cmp	r7, #0
 80057ac:	d039      	beq.n	8005822 <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80057ae:	2212      	movs	r2, #18
 80057b0:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80057b4:	692a      	ldr	r2, [r5, #16]
 80057b6:	3201      	adds	r2, #1
 80057b8:	62e2      	str	r2, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80057ba:	692a      	ldr	r2, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 80057bc:	6267      	str	r7, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80057be:	3201      	adds	r2, #1
 80057c0:	62a2      	str	r2, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80057c2:	696a      	ldr	r2, [r5, #20]
 80057c4:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80057c8:	616a      	str	r2, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 80057ca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80057cc:	b9a2      	cbnz	r2, 80057f8 <HAL_QSPI_Transmit+0x7c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80057ce:	2201      	movs	r2, #1
 80057d0:	2102      	movs	r1, #2
 80057d2:	4620      	mov	r0, r4
 80057d4:	9600      	str	r6, [sp, #0]
 80057d6:	f7ff fe2b 	bl	8005430 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 80057da:	b928      	cbnz	r0, 80057e8 <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80057dc:	6823      	ldr	r3, [r4, #0]
 80057de:	2202      	movs	r2, #2
          status = HAL_QSPI_Abort(hqspi);
 80057e0:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80057e2:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 80057e4:	f7ff ff87 	bl	80056f6 <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 80057e8:	2301      	movs	r3, #1
 80057ea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80057ee:	2300      	movs	r3, #0
 80057f0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80057f4:	b005      	add	sp, #20
 80057f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80057f8:	2201      	movs	r2, #1
 80057fa:	2104      	movs	r1, #4
 80057fc:	4620      	mov	r0, r4
 80057fe:	9600      	str	r6, [sp, #0]
 8005800:	9303      	str	r3, [sp, #12]
 8005802:	f7ff fe15 	bl	8005430 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8005806:	2800      	cmp	r0, #0
 8005808:	d1ee      	bne.n	80057e8 <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800580a:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 800580c:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800580e:	7812      	ldrb	r2, [r2, #0]
 8005810:	f885 2020 	strb.w	r2, [r5, #32]
        hqspi->pTxBuffPtr++;
 8005814:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005816:	3201      	adds	r2, #1
 8005818:	6262      	str	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 800581a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800581c:	3a01      	subs	r2, #1
 800581e:	62e2      	str	r2, [r4, #44]	; 0x2c
 8005820:	e7d3      	b.n	80057ca <HAL_QSPI_Transmit+0x4e>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005822:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005824:	f043 0308 	orr.w	r3, r3, #8
 8005828:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 800582a:	e7e0      	b.n	80057ee <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 800582c:	2002      	movs	r0, #2
 800582e:	e7de      	b.n	80057ee <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 8005830:	2002      	movs	r0, #2
 8005832:	e7df      	b.n	80057f4 <HAL_QSPI_Transmit+0x78>

08005834 <HAL_QSPI_Receive>:
{
 8005834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005836:	4604      	mov	r4, r0
 8005838:	b085      	sub	sp, #20
 800583a:	4616      	mov	r6, r2
 800583c:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800583e:	f7fe fbb9 	bl	8003fb4 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8005842:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8005844:	4603      	mov	r3, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8005846:	f8d5 c018 	ldr.w	ip, [r5, #24]
  __HAL_LOCK(hqspi);
 800584a:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800584e:	2a01      	cmp	r2, #1
 8005850:	d050      	beq.n	80058f4 <HAL_QSPI_Receive+0xc0>
 8005852:	2201      	movs	r2, #1
 8005854:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005858:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800585c:	2a01      	cmp	r2, #1
 800585e:	b2d0      	uxtb	r0, r2
 8005860:	d146      	bne.n	80058f0 <HAL_QSPI_Receive+0xbc>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005862:	2200      	movs	r2, #0
 8005864:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 8005866:	2f00      	cmp	r7, #0
 8005868:	d03d      	beq.n	80058e6 <HAL_QSPI_Receive+0xb2>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800586a:	2222      	movs	r2, #34	; 0x22
 800586c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8005870:	692a      	ldr	r2, [r5, #16]
 8005872:	3201      	adds	r2, #1
 8005874:	63a2      	str	r2, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005876:	692a      	ldr	r2, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 8005878:	6327      	str	r7, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800587a:	3201      	adds	r2, #1
 800587c:	6362      	str	r2, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800587e:	6969      	ldr	r1, [r5, #20]
 8005880:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 8005884:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8005888:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800588a:	f8c5 c018 	str.w	ip, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 800588e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005890:	b9a2      	cbnz	r2, 80058bc <HAL_QSPI_Receive+0x88>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005892:	2201      	movs	r2, #1
 8005894:	2102      	movs	r1, #2
 8005896:	4620      	mov	r0, r4
 8005898:	9600      	str	r6, [sp, #0]
 800589a:	f7ff fdc9 	bl	8005430 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 800589e:	b928      	cbnz	r0, 80058ac <HAL_QSPI_Receive+0x78>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80058a0:	6823      	ldr	r3, [r4, #0]
 80058a2:	2202      	movs	r2, #2
          status = HAL_QSPI_Abort(hqspi);
 80058a4:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80058a6:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 80058a8:	f7ff ff25 	bl	80056f6 <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 80058ac:	2301      	movs	r3, #1
 80058ae:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80058b2:	2300      	movs	r3, #0
 80058b4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80058b8:	b005      	add	sp, #20
 80058ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80058bc:	2201      	movs	r2, #1
 80058be:	2106      	movs	r1, #6
 80058c0:	4620      	mov	r0, r4
 80058c2:	9600      	str	r6, [sp, #0]
 80058c4:	9303      	str	r3, [sp, #12]
 80058c6:	f7ff fdb3 	bl	8005430 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 80058ca:	2800      	cmp	r0, #0
 80058cc:	d1ee      	bne.n	80058ac <HAL_QSPI_Receive+0x78>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80058ce:	f895 1020 	ldrb.w	r1, [r5, #32]
 80058d2:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 80058d4:	9b03      	ldr	r3, [sp, #12]
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80058d6:	7011      	strb	r1, [r2, #0]
        hqspi->pRxBuffPtr++;
 80058d8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80058da:	3201      	adds	r2, #1
 80058dc:	6322      	str	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 80058de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80058e0:	3a01      	subs	r2, #1
 80058e2:	63a2      	str	r2, [r4, #56]	; 0x38
 80058e4:	e7d3      	b.n	800588e <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80058e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80058e8:	f043 0308 	orr.w	r3, r3, #8
 80058ec:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 80058ee:	e7e0      	b.n	80058b2 <HAL_QSPI_Receive+0x7e>
    status = HAL_BUSY;
 80058f0:	2002      	movs	r0, #2
 80058f2:	e7de      	b.n	80058b2 <HAL_QSPI_Receive+0x7e>
  __HAL_LOCK(hqspi);
 80058f4:	2002      	movs	r0, #2
 80058f6:	e7df      	b.n	80058b8 <HAL_QSPI_Receive+0x84>

080058f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058fc:	4604      	mov	r4, r0
 80058fe:	b340      	cbz	r0, 8005952 <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005900:	6803      	ldr	r3, [r0, #0]
 8005902:	07d8      	lsls	r0, r3, #31
 8005904:	d410      	bmi.n	8005928 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005906:	6823      	ldr	r3, [r4, #0]
 8005908:	0799      	lsls	r1, r3, #30
 800590a:	d464      	bmi.n	80059d6 <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800590c:	6823      	ldr	r3, [r4, #0]
 800590e:	0719      	lsls	r1, r3, #28
 8005910:	f100 80aa 	bmi.w	8005a68 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005914:	6823      	ldr	r3, [r4, #0]
 8005916:	075a      	lsls	r2, r3, #29
 8005918:	f100 80cb 	bmi.w	8005ab2 <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800591c:	69a2      	ldr	r2, [r4, #24]
 800591e:	2a00      	cmp	r2, #0
 8005920:	f040 8134 	bne.w	8005b8c <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8005924:	2000      	movs	r0, #0
 8005926:	e02b      	b.n	8005980 <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005928:	4b96      	ldr	r3, [pc, #600]	; (8005b84 <HAL_RCC_OscConfig+0x28c>)
 800592a:	689a      	ldr	r2, [r3, #8]
 800592c:	f002 020c 	and.w	r2, r2, #12
 8005930:	2a04      	cmp	r2, #4
 8005932:	d007      	beq.n	8005944 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005934:	689a      	ldr	r2, [r3, #8]
 8005936:	f002 020c 	and.w	r2, r2, #12
 800593a:	2a08      	cmp	r2, #8
 800593c:	d10b      	bne.n	8005956 <HAL_RCC_OscConfig+0x5e>
 800593e:	685a      	ldr	r2, [r3, #4]
 8005940:	0252      	lsls	r2, r2, #9
 8005942:	d508      	bpl.n	8005956 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005944:	4b8f      	ldr	r3, [pc, #572]	; (8005b84 <HAL_RCC_OscConfig+0x28c>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	039b      	lsls	r3, r3, #14
 800594a:	d5dc      	bpl.n	8005906 <HAL_RCC_OscConfig+0xe>
 800594c:	6863      	ldr	r3, [r4, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1d9      	bne.n	8005906 <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 8005952:	2001      	movs	r0, #1
 8005954:	e014      	b.n	8005980 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005956:	6862      	ldr	r2, [r4, #4]
 8005958:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800595c:	d113      	bne.n	8005986 <HAL_RCC_OscConfig+0x8e>
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005964:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005966:	f7fe fb25 	bl	8003fb4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800596a:	4e86      	ldr	r6, [pc, #536]	; (8005b84 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 800596c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800596e:	6833      	ldr	r3, [r6, #0]
 8005970:	039f      	lsls	r7, r3, #14
 8005972:	d4c8      	bmi.n	8005906 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005974:	f7fe fb1e 	bl	8003fb4 <HAL_GetTick>
 8005978:	1b40      	subs	r0, r0, r5
 800597a:	2864      	cmp	r0, #100	; 0x64
 800597c:	d9f7      	bls.n	800596e <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 800597e:	2003      	movs	r0, #3
}
 8005980:	b002      	add	sp, #8
 8005982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005986:	4d7f      	ldr	r5, [pc, #508]	; (8005b84 <HAL_RCC_OscConfig+0x28c>)
 8005988:	682b      	ldr	r3, [r5, #0]
 800598a:	b992      	cbnz	r2, 80059b2 <HAL_RCC_OscConfig+0xba>
 800598c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005990:	602b      	str	r3, [r5, #0]
 8005992:	682b      	ldr	r3, [r5, #0]
 8005994:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005998:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800599a:	f7fe fb0b 	bl	8003fb4 <HAL_GetTick>
 800599e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059a0:	682b      	ldr	r3, [r5, #0]
 80059a2:	0398      	lsls	r0, r3, #14
 80059a4:	d5af      	bpl.n	8005906 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059a6:	f7fe fb05 	bl	8003fb4 <HAL_GetTick>
 80059aa:	1b80      	subs	r0, r0, r6
 80059ac:	2864      	cmp	r0, #100	; 0x64
 80059ae:	d9f7      	bls.n	80059a0 <HAL_RCC_OscConfig+0xa8>
 80059b0:	e7e5      	b.n	800597e <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059b2:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80059b6:	d107      	bne.n	80059c8 <HAL_RCC_OscConfig+0xd0>
 80059b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059bc:	602b      	str	r3, [r5, #0]
 80059be:	682b      	ldr	r3, [r5, #0]
 80059c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059c4:	602b      	str	r3, [r5, #0]
 80059c6:	e7ce      	b.n	8005966 <HAL_RCC_OscConfig+0x6e>
 80059c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059cc:	602b      	str	r3, [r5, #0]
 80059ce:	682b      	ldr	r3, [r5, #0]
 80059d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059d4:	e7f6      	b.n	80059c4 <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80059d6:	4b6b      	ldr	r3, [pc, #428]	; (8005b84 <HAL_RCC_OscConfig+0x28c>)
 80059d8:	689a      	ldr	r2, [r3, #8]
 80059da:	f012 0f0c 	tst.w	r2, #12
 80059de:	d007      	beq.n	80059f0 <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059e0:	689a      	ldr	r2, [r3, #8]
 80059e2:	f002 020c 	and.w	r2, r2, #12
 80059e6:	2a08      	cmp	r2, #8
 80059e8:	d111      	bne.n	8005a0e <HAL_RCC_OscConfig+0x116>
 80059ea:	685a      	ldr	r2, [r3, #4]
 80059ec:	0251      	lsls	r1, r2, #9
 80059ee:	d40e      	bmi.n	8005a0e <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059f0:	4b64      	ldr	r3, [pc, #400]	; (8005b84 <HAL_RCC_OscConfig+0x28c>)
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	0792      	lsls	r2, r2, #30
 80059f6:	d502      	bpl.n	80059fe <HAL_RCC_OscConfig+0x106>
 80059f8:	68e2      	ldr	r2, [r4, #12]
 80059fa:	2a01      	cmp	r2, #1
 80059fc:	d1a9      	bne.n	8005952 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	6921      	ldr	r1, [r4, #16]
 8005a02:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8005a06:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8005a0a:	601a      	str	r2, [r3, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a0c:	e77e      	b.n	800590c <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005a0e:	68e2      	ldr	r2, [r4, #12]
 8005a10:	b1c2      	cbz	r2, 8005a44 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
 8005a12:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a14:	4d5b      	ldr	r5, [pc, #364]	; (8005b84 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 8005a16:	f042 0201 	orr.w	r2, r2, #1
 8005a1a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005a1c:	f7fe faca 	bl	8003fb4 <HAL_GetTick>
 8005a20:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a22:	682b      	ldr	r3, [r5, #0]
 8005a24:	079f      	lsls	r7, r3, #30
 8005a26:	d507      	bpl.n	8005a38 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a28:	682b      	ldr	r3, [r5, #0]
 8005a2a:	6922      	ldr	r2, [r4, #16]
 8005a2c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005a30:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005a34:	602b      	str	r3, [r5, #0]
 8005a36:	e769      	b.n	800590c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a38:	f7fe fabc 	bl	8003fb4 <HAL_GetTick>
 8005a3c:	1b80      	subs	r0, r0, r6
 8005a3e:	2802      	cmp	r0, #2
 8005a40:	d9ef      	bls.n	8005a22 <HAL_RCC_OscConfig+0x12a>
 8005a42:	e79c      	b.n	800597e <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8005a44:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a46:	4e4f      	ldr	r6, [pc, #316]	; (8005b84 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
 8005a48:	f022 0201 	bic.w	r2, r2, #1
 8005a4c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005a4e:	f7fe fab1 	bl	8003fb4 <HAL_GetTick>
 8005a52:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a54:	6833      	ldr	r3, [r6, #0]
 8005a56:	0798      	lsls	r0, r3, #30
 8005a58:	f57f af58 	bpl.w	800590c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a5c:	f7fe faaa 	bl	8003fb4 <HAL_GetTick>
 8005a60:	1b40      	subs	r0, r0, r5
 8005a62:	2802      	cmp	r0, #2
 8005a64:	d9f6      	bls.n	8005a54 <HAL_RCC_OscConfig+0x15c>
 8005a66:	e78a      	b.n	800597e <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005a68:	6963      	ldr	r3, [r4, #20]
 8005a6a:	4d46      	ldr	r5, [pc, #280]	; (8005b84 <HAL_RCC_OscConfig+0x28c>)
 8005a6c:	b183      	cbz	r3, 8005a90 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
 8005a6e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005a70:	f043 0301 	orr.w	r3, r3, #1
 8005a74:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8005a76:	f7fe fa9d 	bl	8003fb4 <HAL_GetTick>
 8005a7a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a7c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005a7e:	079b      	lsls	r3, r3, #30
 8005a80:	f53f af48 	bmi.w	8005914 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a84:	f7fe fa96 	bl	8003fb4 <HAL_GetTick>
 8005a88:	1b80      	subs	r0, r0, r6
 8005a8a:	2802      	cmp	r0, #2
 8005a8c:	d9f6      	bls.n	8005a7c <HAL_RCC_OscConfig+0x184>
 8005a8e:	e776      	b.n	800597e <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8005a90:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005a92:	f023 0301 	bic.w	r3, r3, #1
 8005a96:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8005a98:	f7fe fa8c 	bl	8003fb4 <HAL_GetTick>
 8005a9c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a9e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005aa0:	079f      	lsls	r7, r3, #30
 8005aa2:	f57f af37 	bpl.w	8005914 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005aa6:	f7fe fa85 	bl	8003fb4 <HAL_GetTick>
 8005aaa:	1b80      	subs	r0, r0, r6
 8005aac:	2802      	cmp	r0, #2
 8005aae:	d9f6      	bls.n	8005a9e <HAL_RCC_OscConfig+0x1a6>
 8005ab0:	e765      	b.n	800597e <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ab2:	4b34      	ldr	r3, [pc, #208]	; (8005b84 <HAL_RCC_OscConfig+0x28c>)
 8005ab4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ab6:	00d0      	lsls	r0, r2, #3
 8005ab8:	d427      	bmi.n	8005b0a <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005aba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8005abc:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8005abe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005ac2:	641a      	str	r2, [r3, #64]	; 0x40
 8005ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aca:	9301      	str	r3, [sp, #4]
 8005acc:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ace:	4d2e      	ldr	r5, [pc, #184]	; (8005b88 <HAL_RCC_OscConfig+0x290>)
 8005ad0:	682b      	ldr	r3, [r5, #0]
 8005ad2:	05d9      	lsls	r1, r3, #23
 8005ad4:	d51b      	bpl.n	8005b0e <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ad6:	68a3      	ldr	r3, [r4, #8]
 8005ad8:	4d2a      	ldr	r5, [pc, #168]	; (8005b84 <HAL_RCC_OscConfig+0x28c>)
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d127      	bne.n	8005b2e <HAL_RCC_OscConfig+0x236>
 8005ade:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005ae0:	f043 0301 	orr.w	r3, r3, #1
 8005ae4:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ae6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8005aea:	f7fe fa63 	bl	8003fb4 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aee:	4e25      	ldr	r6, [pc, #148]	; (8005b84 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8005af0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005af2:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8005af4:	079b      	lsls	r3, r3, #30
 8005af6:	d53f      	bpl.n	8005b78 <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
 8005af8:	2f00      	cmp	r7, #0
 8005afa:	f43f af0f 	beq.w	800591c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005afe:	4a21      	ldr	r2, [pc, #132]	; (8005b84 <HAL_RCC_OscConfig+0x28c>)
 8005b00:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005b02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b06:	6413      	str	r3, [r2, #64]	; 0x40
 8005b08:	e708      	b.n	800591c <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 8005b0a:	2700      	movs	r7, #0
 8005b0c:	e7df      	b.n	8005ace <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
 8005b0e:	682b      	ldr	r3, [r5, #0]
 8005b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b14:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8005b16:	f7fe fa4d 	bl	8003fb4 <HAL_GetTick>
 8005b1a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b1c:	682b      	ldr	r3, [r5, #0]
 8005b1e:	05da      	lsls	r2, r3, #23
 8005b20:	d4d9      	bmi.n	8005ad6 <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b22:	f7fe fa47 	bl	8003fb4 <HAL_GetTick>
 8005b26:	1b80      	subs	r0, r0, r6
 8005b28:	2864      	cmp	r0, #100	; 0x64
 8005b2a:	d9f7      	bls.n	8005b1c <HAL_RCC_OscConfig+0x224>
 8005b2c:	e727      	b.n	800597e <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b2e:	b9ab      	cbnz	r3, 8005b5c <HAL_RCC_OscConfig+0x264>
 8005b30:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b32:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b36:	f023 0301 	bic.w	r3, r3, #1
 8005b3a:	672b      	str	r3, [r5, #112]	; 0x70
 8005b3c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005b3e:	f023 0304 	bic.w	r3, r3, #4
 8005b42:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8005b44:	f7fe fa36 	bl	8003fb4 <HAL_GetTick>
 8005b48:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b4a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005b4c:	0798      	lsls	r0, r3, #30
 8005b4e:	d5d3      	bpl.n	8005af8 <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b50:	f7fe fa30 	bl	8003fb4 <HAL_GetTick>
 8005b54:	1b80      	subs	r0, r0, r6
 8005b56:	4540      	cmp	r0, r8
 8005b58:	d9f7      	bls.n	8005b4a <HAL_RCC_OscConfig+0x252>
 8005b5a:	e710      	b.n	800597e <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b5c:	2b05      	cmp	r3, #5
 8005b5e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005b60:	d103      	bne.n	8005b6a <HAL_RCC_OscConfig+0x272>
 8005b62:	f043 0304 	orr.w	r3, r3, #4
 8005b66:	672b      	str	r3, [r5, #112]	; 0x70
 8005b68:	e7b9      	b.n	8005ade <HAL_RCC_OscConfig+0x1e6>
 8005b6a:	f023 0301 	bic.w	r3, r3, #1
 8005b6e:	672b      	str	r3, [r5, #112]	; 0x70
 8005b70:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005b72:	f023 0304 	bic.w	r3, r3, #4
 8005b76:	e7b5      	b.n	8005ae4 <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b78:	f7fe fa1c 	bl	8003fb4 <HAL_GetTick>
 8005b7c:	1b40      	subs	r0, r0, r5
 8005b7e:	4540      	cmp	r0, r8
 8005b80:	d9b7      	bls.n	8005af2 <HAL_RCC_OscConfig+0x1fa>
 8005b82:	e6fc      	b.n	800597e <HAL_RCC_OscConfig+0x86>
 8005b84:	40023800 	.word	0x40023800
 8005b88:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b8c:	4d38      	ldr	r5, [pc, #224]	; (8005c70 <HAL_RCC_OscConfig+0x378>)
 8005b8e:	68ab      	ldr	r3, [r5, #8]
 8005b90:	f003 030c 	and.w	r3, r3, #12
 8005b94:	2b08      	cmp	r3, #8
 8005b96:	d041      	beq.n	8005c1c <HAL_RCC_OscConfig+0x324>
        __HAL_RCC_PLL_DISABLE();
 8005b98:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b9a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8005b9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ba0:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ba2:	d12e      	bne.n	8005c02 <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 8005ba4:	f7fe fa06 	bl	8003fb4 <HAL_GetTick>
 8005ba8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005baa:	682b      	ldr	r3, [r5, #0]
 8005bac:	0199      	lsls	r1, r3, #6
 8005bae:	d422      	bmi.n	8005bf6 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005bb0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005bb2:	085b      	lsrs	r3, r3, #1
 8005bb4:	1e5a      	subs	r2, r3, #1
 8005bb6:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8005bba:	430b      	orrs	r3, r1
 8005bbc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bc0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005bc2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005bc6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005bc8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005bcc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005bd0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8005bd2:	682b      	ldr	r3, [r5, #0]
 8005bd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bd8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005bda:	f7fe f9eb 	bl	8003fb4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bde:	4d24      	ldr	r5, [pc, #144]	; (8005c70 <HAL_RCC_OscConfig+0x378>)
        tickstart = HAL_GetTick();
 8005be0:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005be2:	682b      	ldr	r3, [r5, #0]
 8005be4:	019a      	lsls	r2, r3, #6
 8005be6:	f53f ae9d 	bmi.w	8005924 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bea:	f7fe f9e3 	bl	8003fb4 <HAL_GetTick>
 8005bee:	1b00      	subs	r0, r0, r4
 8005bf0:	2802      	cmp	r0, #2
 8005bf2:	d9f6      	bls.n	8005be2 <HAL_RCC_OscConfig+0x2ea>
 8005bf4:	e6c3      	b.n	800597e <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bf6:	f7fe f9dd 	bl	8003fb4 <HAL_GetTick>
 8005bfa:	1b80      	subs	r0, r0, r6
 8005bfc:	2802      	cmp	r0, #2
 8005bfe:	d9d4      	bls.n	8005baa <HAL_RCC_OscConfig+0x2b2>
 8005c00:	e6bd      	b.n	800597e <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8005c02:	f7fe f9d7 	bl	8003fb4 <HAL_GetTick>
 8005c06:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c08:	682b      	ldr	r3, [r5, #0]
 8005c0a:	019b      	lsls	r3, r3, #6
 8005c0c:	f57f ae8a 	bpl.w	8005924 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c10:	f7fe f9d0 	bl	8003fb4 <HAL_GetTick>
 8005c14:	1b00      	subs	r0, r0, r4
 8005c16:	2802      	cmp	r0, #2
 8005c18:	d9f6      	bls.n	8005c08 <HAL_RCC_OscConfig+0x310>
 8005c1a:	e6b0      	b.n	800597e <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c1c:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 8005c1e:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c20:	f43f ae97 	beq.w	8005952 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c28:	69e1      	ldr	r1, [r4, #28]
 8005c2a:	428a      	cmp	r2, r1
 8005c2c:	f47f ae91 	bne.w	8005952 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c30:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c34:	6a21      	ldr	r1, [r4, #32]
 8005c36:	428a      	cmp	r2, r1
 8005c38:	f47f ae8b 	bne.w	8005952 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c3c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c40:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c42:	401a      	ands	r2, r3
 8005c44:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8005c48:	f47f ae83 	bne.w	8005952 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005c4c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005c4e:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8005c52:	0852      	lsrs	r2, r2, #1
 8005c54:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c56:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8005c5a:	f47f ae7a 	bne.w	8005952 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c5e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8005c62:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005c64:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8005c68:	f43f ae5c 	beq.w	8005924 <HAL_RCC_OscConfig+0x2c>
 8005c6c:	e671      	b.n	8005952 <HAL_RCC_OscConfig+0x5a>
 8005c6e:	bf00      	nop
 8005c70:	40023800 	.word	0x40023800

08005c74 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c74:	4913      	ldr	r1, [pc, #76]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8005c76:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c78:	688b      	ldr	r3, [r1, #8]
 8005c7a:	f003 030c 	and.w	r3, r3, #12
 8005c7e:	2b04      	cmp	r3, #4
 8005c80:	d01b      	beq.n	8005cba <HAL_RCC_GetSysClockFreq+0x46>
 8005c82:	2b08      	cmp	r3, #8
 8005c84:	d11b      	bne.n	8005cbe <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c86:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005c88:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c8a:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c8c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005c90:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c94:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005c98:	bf1a      	itte	ne
 8005c9a:	480b      	ldrne	r0, [pc, #44]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0x54>)
 8005c9c:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c9e:	480b      	ldreq	r0, [pc, #44]	; (8005ccc <HAL_RCC_GetSysClockFreq+0x58>)
 8005ca0:	fba1 0100 	umull	r0, r1, r1, r0
 8005ca4:	f7fa ff22 	bl	8000aec <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005ca8:	4b06      	ldr	r3, [pc, #24]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x50>)
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8005cb4:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8005cb8:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cba:	4803      	ldr	r0, [pc, #12]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0x54>)
 8005cbc:	e7fc      	b.n	8005cb8 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 8005cbe:	4803      	ldr	r0, [pc, #12]	; (8005ccc <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8005cc0:	e7fa      	b.n	8005cb8 <HAL_RCC_GetSysClockFreq+0x44>
 8005cc2:	bf00      	nop
 8005cc4:	40023800 	.word	0x40023800
 8005cc8:	017d7840 	.word	0x017d7840
 8005ccc:	00f42400 	.word	0x00f42400

08005cd0 <HAL_RCC_ClockConfig>:
{
 8005cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cd4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8005cd6:	4604      	mov	r4, r0
 8005cd8:	b910      	cbnz	r0, 8005ce0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8005cda:	2001      	movs	r0, #1
}
 8005cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ce0:	4a46      	ldr	r2, [pc, #280]	; (8005dfc <HAL_RCC_ClockConfig+0x12c>)
 8005ce2:	6813      	ldr	r3, [r2, #0]
 8005ce4:	f003 030f 	and.w	r3, r3, #15
 8005ce8:	428b      	cmp	r3, r1
 8005cea:	d328      	bcc.n	8005d3e <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cec:	6822      	ldr	r2, [r4, #0]
 8005cee:	0797      	lsls	r7, r2, #30
 8005cf0:	d430      	bmi.n	8005d54 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cf2:	07d0      	lsls	r0, r2, #31
 8005cf4:	d444      	bmi.n	8005d80 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005cf6:	4a41      	ldr	r2, [pc, #260]	; (8005dfc <HAL_RCC_ClockConfig+0x12c>)
 8005cf8:	6813      	ldr	r3, [r2, #0]
 8005cfa:	f003 030f 	and.w	r3, r3, #15
 8005cfe:	42ab      	cmp	r3, r5
 8005d00:	d867      	bhi.n	8005dd2 <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d02:	6822      	ldr	r2, [r4, #0]
 8005d04:	0751      	lsls	r1, r2, #29
 8005d06:	d470      	bmi.n	8005dea <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d08:	0713      	lsls	r3, r2, #28
 8005d0a:	d507      	bpl.n	8005d1c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005d0c:	4a3c      	ldr	r2, [pc, #240]	; (8005e00 <HAL_RCC_ClockConfig+0x130>)
 8005d0e:	6921      	ldr	r1, [r4, #16]
 8005d10:	6893      	ldr	r3, [r2, #8]
 8005d12:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005d16:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005d1a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d1c:	f7ff ffaa 	bl	8005c74 <HAL_RCC_GetSysClockFreq>
 8005d20:	4b37      	ldr	r3, [pc, #220]	; (8005e00 <HAL_RCC_ClockConfig+0x130>)
 8005d22:	4a38      	ldr	r2, [pc, #224]	; (8005e04 <HAL_RCC_ClockConfig+0x134>)
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005d2a:	5cd3      	ldrb	r3, [r2, r3]
 8005d2c:	40d8      	lsrs	r0, r3
 8005d2e:	4b36      	ldr	r3, [pc, #216]	; (8005e08 <HAL_RCC_ClockConfig+0x138>)
 8005d30:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8005d32:	4b36      	ldr	r3, [pc, #216]	; (8005e0c <HAL_RCC_ClockConfig+0x13c>)
 8005d34:	6818      	ldr	r0, [r3, #0]
 8005d36:	f7fb fd4b 	bl	80017d0 <HAL_InitTick>
  return HAL_OK;
 8005d3a:	2000      	movs	r0, #0
 8005d3c:	e7ce      	b.n	8005cdc <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d3e:	6813      	ldr	r3, [r2, #0]
 8005d40:	f023 030f 	bic.w	r3, r3, #15
 8005d44:	430b      	orrs	r3, r1
 8005d46:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d48:	6813      	ldr	r3, [r2, #0]
 8005d4a:	f003 030f 	and.w	r3, r3, #15
 8005d4e:	428b      	cmp	r3, r1
 8005d50:	d1c3      	bne.n	8005cda <HAL_RCC_ClockConfig+0xa>
 8005d52:	e7cb      	b.n	8005cec <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d54:	f012 0f04 	tst.w	r2, #4
 8005d58:	4b29      	ldr	r3, [pc, #164]	; (8005e00 <HAL_RCC_ClockConfig+0x130>)
 8005d5a:	d003      	beq.n	8005d64 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d5c:	6899      	ldr	r1, [r3, #8]
 8005d5e:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 8005d62:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d64:	0716      	lsls	r6, r2, #28
 8005d66:	d503      	bpl.n	8005d70 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d68:	6899      	ldr	r1, [r3, #8]
 8005d6a:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 8005d6e:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d70:	4923      	ldr	r1, [pc, #140]	; (8005e00 <HAL_RCC_ClockConfig+0x130>)
 8005d72:	68a0      	ldr	r0, [r4, #8]
 8005d74:	688b      	ldr	r3, [r1, #8]
 8005d76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d7a:	4303      	orrs	r3, r0
 8005d7c:	608b      	str	r3, [r1, #8]
 8005d7e:	e7b8      	b.n	8005cf2 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d80:	6861      	ldr	r1, [r4, #4]
 8005d82:	4b1f      	ldr	r3, [pc, #124]	; (8005e00 <HAL_RCC_ClockConfig+0x130>)
 8005d84:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d86:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d88:	d11b      	bne.n	8005dc2 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d8a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d8e:	d0a4      	beq.n	8005cda <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d90:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d92:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d96:	4f1a      	ldr	r7, [pc, #104]	; (8005e00 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d98:	f022 0203 	bic.w	r2, r2, #3
 8005d9c:	430a      	orrs	r2, r1
 8005d9e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8005da0:	f7fe f908 	bl	8003fb4 <HAL_GetTick>
 8005da4:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	6862      	ldr	r2, [r4, #4]
 8005daa:	f003 030c 	and.w	r3, r3, #12
 8005dae:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005db2:	d0a0      	beq.n	8005cf6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005db4:	f7fe f8fe 	bl	8003fb4 <HAL_GetTick>
 8005db8:	1b80      	subs	r0, r0, r6
 8005dba:	4540      	cmp	r0, r8
 8005dbc:	d9f3      	bls.n	8005da6 <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 8005dbe:	2003      	movs	r0, #3
 8005dc0:	e78c      	b.n	8005cdc <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005dc2:	2902      	cmp	r1, #2
 8005dc4:	d102      	bne.n	8005dcc <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dc6:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8005dca:	e7e0      	b.n	8005d8e <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dcc:	f012 0f02 	tst.w	r2, #2
 8005dd0:	e7dd      	b.n	8005d8e <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dd2:	6813      	ldr	r3, [r2, #0]
 8005dd4:	f023 030f 	bic.w	r3, r3, #15
 8005dd8:	432b      	orrs	r3, r5
 8005dda:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ddc:	6813      	ldr	r3, [r2, #0]
 8005dde:	f003 030f 	and.w	r3, r3, #15
 8005de2:	42ab      	cmp	r3, r5
 8005de4:	f47f af79 	bne.w	8005cda <HAL_RCC_ClockConfig+0xa>
 8005de8:	e78b      	b.n	8005d02 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005dea:	4905      	ldr	r1, [pc, #20]	; (8005e00 <HAL_RCC_ClockConfig+0x130>)
 8005dec:	68e0      	ldr	r0, [r4, #12]
 8005dee:	688b      	ldr	r3, [r1, #8]
 8005df0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8005df4:	4303      	orrs	r3, r0
 8005df6:	608b      	str	r3, [r1, #8]
 8005df8:	e786      	b.n	8005d08 <HAL_RCC_ClockConfig+0x38>
 8005dfa:	bf00      	nop
 8005dfc:	40023c00 	.word	0x40023c00
 8005e00:	40023800 	.word	0x40023800
 8005e04:	0802a834 	.word	0x0802a834
 8005e08:	2000000c 	.word	0x2000000c
 8005e0c:	2000003c 	.word	0x2000003c

08005e10 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005e10:	4b04      	ldr	r3, [pc, #16]	; (8005e24 <HAL_RCC_GetPCLK1Freq+0x14>)
 8005e12:	4a05      	ldr	r2, [pc, #20]	; (8005e28 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8005e1a:	5cd3      	ldrb	r3, [r2, r3]
 8005e1c:	4a03      	ldr	r2, [pc, #12]	; (8005e2c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005e1e:	6810      	ldr	r0, [r2, #0]
}
 8005e20:	40d8      	lsrs	r0, r3
 8005e22:	4770      	bx	lr
 8005e24:	40023800 	.word	0x40023800
 8005e28:	0802a844 	.word	0x0802a844
 8005e2c:	2000000c 	.word	0x2000000c

08005e30 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005e30:	230f      	movs	r3, #15
 8005e32:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005e34:	4b0b      	ldr	r3, [pc, #44]	; (8005e64 <HAL_RCC_GetClockConfig+0x34>)
 8005e36:	689a      	ldr	r2, [r3, #8]
 8005e38:	f002 0203 	and.w	r2, r2, #3
 8005e3c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005e3e:	689a      	ldr	r2, [r3, #8]
 8005e40:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8005e44:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005e46:	689a      	ldr	r2, [r3, #8]
 8005e48:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8005e4c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	08db      	lsrs	r3, r3, #3
 8005e52:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8005e56:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005e58:	4b03      	ldr	r3, [pc, #12]	; (8005e68 <HAL_RCC_GetClockConfig+0x38>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 030f 	and.w	r3, r3, #15
 8005e60:	600b      	str	r3, [r1, #0]
}
 8005e62:	4770      	bx	lr
 8005e64:	40023800 	.word	0x40023800
 8005e68:	40023c00 	.word	0x40023c00

08005e6c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005e6c:	6803      	ldr	r3, [r0, #0]
{
 8005e6e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005e72:	f013 0601 	ands.w	r6, r3, #1
{
 8005e76:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005e78:	d00b      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005e7a:	4aaa      	ldr	r2, [pc, #680]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005e7c:	6891      	ldr	r1, [r2, #8]
 8005e7e:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8005e82:	6091      	str	r1, [r2, #8]
 8005e84:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8005e86:	6891      	ldr	r1, [r2, #8]
 8005e88:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005e8a:	fab6 f686 	clz	r6, r6
 8005e8e:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005e90:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005e92:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8005e96:	d012      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e98:	49a2      	ldr	r1, [pc, #648]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005e9a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8005e9c:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005ea0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ea4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 8005ea8:	bf08      	it	eq
 8005eaa:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005eac:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005eb0:	bf16      	itet	ne
 8005eb2:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8005eb6:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005eb8:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005eba:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005ebe:	02df      	lsls	r7, r3, #11
 8005ec0:	d510      	bpl.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005ec2:	4898      	ldr	r0, [pc, #608]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005ec4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005ec6:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005eca:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005ece:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8005ed2:	ea42 0201 	orr.w	r2, r2, r1
 8005ed6:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005eda:	f000 8184 	beq.w	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8005ede:	2900      	cmp	r1, #0
 8005ee0:	bf08      	it	eq
 8005ee2:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8005ee4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005ee8:	bf18      	it	ne
 8005eea:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005eec:	0698      	lsls	r0, r3, #26
 8005eee:	d531      	bpl.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ef0:	4b8c      	ldr	r3, [pc, #560]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005ef2:	4f8d      	ldr	r7, [pc, #564]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ef4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ef6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005efa:	641a      	str	r2, [r3, #64]	; 0x40
 8005efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f02:	9301      	str	r3, [sp, #4]
 8005f04:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f0c:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f0e:	f7fe f851 	bl	8003fb4 <HAL_GetTick>
 8005f12:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	05d9      	lsls	r1, r3, #23
 8005f18:	f140 8167 	bpl.w	80061ea <HAL_RCCEx_PeriphCLKConfig+0x37e>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f1c:	4f81      	ldr	r7, [pc, #516]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005f1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f20:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8005f24:	f040 816c 	bne.w	8006200 <HAL_RCCEx_PeriphCLKConfig+0x394>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f28:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005f2a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005f2e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8005f32:	4a7c      	ldr	r2, [pc, #496]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005f34:	f040 818a 	bne.w	800624c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005f38:	6891      	ldr	r1, [r2, #8]
 8005f3a:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8005f3e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8005f42:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8005f46:	4301      	orrs	r1, r0
 8005f48:	6091      	str	r1, [r2, #8]
 8005f4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f4e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8005f50:	430b      	orrs	r3, r1
 8005f52:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005f54:	6823      	ldr	r3, [r4, #0]
 8005f56:	06d8      	lsls	r0, r3, #27
 8005f58:	d50c      	bpl.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005f5a:	4a72      	ldr	r2, [pc, #456]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005f5c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8005f60:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8005f64:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8005f68:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8005f6c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005f6e:	4301      	orrs	r1, r0
 8005f70:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f74:	0459      	lsls	r1, r3, #17
 8005f76:	d508      	bpl.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f78:	496a      	ldr	r1, [pc, #424]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005f7a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8005f7c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005f80:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8005f84:	4302      	orrs	r2, r0
 8005f86:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f8a:	041a      	lsls	r2, r3, #16
 8005f8c:	d508      	bpl.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f8e:	4965      	ldr	r1, [pc, #404]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005f90:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8005f92:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005f96:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8005f9a:	4302      	orrs	r2, r0
 8005f9c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005fa0:	03df      	lsls	r7, r3, #15
 8005fa2:	d508      	bpl.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005fa4:	495f      	ldr	r1, [pc, #380]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005fa6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8005fa8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005fac:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005fb0:	4302      	orrs	r2, r0
 8005fb2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005fb6:	0398      	lsls	r0, r3, #14
 8005fb8:	d508      	bpl.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005fba:	495a      	ldr	r1, [pc, #360]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005fbc:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005fbe:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005fc2:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8005fc6:	4302      	orrs	r2, r0
 8005fc8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005fcc:	0659      	lsls	r1, r3, #25
 8005fce:	d508      	bpl.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fd0:	4954      	ldr	r1, [pc, #336]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005fd2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005fd4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005fd8:	f022 0203 	bic.w	r2, r2, #3
 8005fdc:	4302      	orrs	r2, r0
 8005fde:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005fe2:	061a      	lsls	r2, r3, #24
 8005fe4:	d508      	bpl.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005fe6:	494f      	ldr	r1, [pc, #316]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005fe8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005fea:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005fee:	f022 020c 	bic.w	r2, r2, #12
 8005ff2:	4302      	orrs	r2, r0
 8005ff4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005ff8:	05df      	lsls	r7, r3, #23
 8005ffa:	d508      	bpl.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005ffc:	4949      	ldr	r1, [pc, #292]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005ffe:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006000:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006004:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8006008:	4302      	orrs	r2, r0
 800600a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800600e:	0598      	lsls	r0, r3, #22
 8006010:	d508      	bpl.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006012:	4944      	ldr	r1, [pc, #272]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006014:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006016:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800601a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800601e:	4302      	orrs	r2, r0
 8006020:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006024:	0559      	lsls	r1, r3, #21
 8006026:	d508      	bpl.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006028:	493e      	ldr	r1, [pc, #248]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800602a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800602c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006030:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006034:	4302      	orrs	r2, r0
 8006036:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800603a:	051a      	lsls	r2, r3, #20
 800603c:	d508      	bpl.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800603e:	4939      	ldr	r1, [pc, #228]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006040:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006042:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006046:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800604a:	4302      	orrs	r2, r0
 800604c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006050:	04df      	lsls	r7, r3, #19
 8006052:	d508      	bpl.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006054:	4933      	ldr	r1, [pc, #204]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006056:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8006058:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800605c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006060:	4302      	orrs	r2, r0
 8006062:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006066:	0498      	lsls	r0, r3, #18
 8006068:	d508      	bpl.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800606a:	492e      	ldr	r1, [pc, #184]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800606c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800606e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006072:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006076:	4302      	orrs	r2, r0
 8006078:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800607c:	0259      	lsls	r1, r3, #9
 800607e:	d508      	bpl.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006080:	4928      	ldr	r1, [pc, #160]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006082:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006084:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006088:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800608c:	4302      	orrs	r2, r0
 800608e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006092:	029a      	lsls	r2, r3, #10
 8006094:	d50c      	bpl.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006096:	4823      	ldr	r0, [pc, #140]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006098:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800609a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800609e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80060a2:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 80060a6:	bf08      	it	eq
 80060a8:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80060aa:	430a      	orrs	r2, r1
 80060ac:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 80060b0:	f013 0f08 	tst.w	r3, #8
 80060b4:	bf18      	it	ne
 80060b6:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80060b8:	035f      	lsls	r7, r3, #13
 80060ba:	d508      	bpl.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060bc:	4919      	ldr	r1, [pc, #100]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80060be:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80060c0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80060c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80060c8:	4302      	orrs	r2, r0
 80060ca:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80060ce:	0218      	lsls	r0, r3, #8
 80060d0:	d509      	bpl.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80060d2:	4914      	ldr	r1, [pc, #80]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80060d4:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80060d8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80060dc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80060e0:	4302      	orrs	r2, r0
 80060e2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80060e6:	2e01      	cmp	r6, #1
 80060e8:	f000 80b4 	beq.w	8006254 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80060ec:	0199      	lsls	r1, r3, #6
 80060ee:	f100 80b1 	bmi.w	8006254 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80060f2:	2d01      	cmp	r5, #1
 80060f4:	d175      	bne.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80060f6:	4d0b      	ldr	r5, [pc, #44]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80060f8:	682b      	ldr	r3, [r5, #0]
 80060fa:	462e      	mov	r6, r5
 80060fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006100:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006102:	f7fd ff57 	bl	8003fb4 <HAL_GetTick>
 8006106:	4607      	mov	r7, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006108:	682b      	ldr	r3, [r5, #0]
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	f100 8126 	bmi.w	800635c <HAL_RCCEx_PeriphCLKConfig+0x4f0>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006110:	6822      	ldr	r2, [r4, #0]
 8006112:	0315      	lsls	r5, r2, #12
 8006114:	d501      	bpl.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 8006116:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006118:	b143      	cbz	r3, 800612c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 800611a:	02d0      	lsls	r0, r2, #11
 800611c:	d521      	bpl.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800611e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006120:	b9fb      	cbnz	r3, 8006162 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 8006122:	e003      	b.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8006124:	40023800 	.word	0x40023800
 8006128:	40007000 	.word	0x40007000
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800612c:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006130:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006134:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006138:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800613c:	430b      	orrs	r3, r1
 800613e:	6961      	ldr	r1, [r4, #20]
 8006140:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8006144:	69a1      	ldr	r1, [r4, #24]
 8006146:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800614a:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800614e:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8006152:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006154:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8006158:	3901      	subs	r1, #1
 800615a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800615e:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006162:	0291      	lsls	r1, r2, #10
 8006164:	d515      	bpl.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8006166:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006168:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800616c:	d111      	bne.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x326>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800616e:	4982      	ldr	r1, [pc, #520]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006170:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006174:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006178:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800617c:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8006180:	4303      	orrs	r3, r0
 8006182:	6960      	ldr	r0, [r4, #20]
 8006184:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006188:	6a20      	ldr	r0, [r4, #32]
 800618a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800618e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006192:	0712      	lsls	r2, r2, #28
 8006194:	d519      	bpl.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x35e>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006196:	4a78      	ldr	r2, [pc, #480]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006198:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800619c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80061a0:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80061a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80061a8:	430b      	orrs	r3, r1
 80061aa:	6961      	ldr	r1, [r4, #20]
 80061ac:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80061b0:	69e1      	ldr	r1, [r4, #28]
 80061b2:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80061b6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80061ba:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80061be:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80061c0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80061c4:	430b      	orrs	r3, r1
 80061c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80061ca:	4c6b      	ldr	r4, [pc, #428]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80061cc:	6823      	ldr	r3, [r4, #0]
 80061ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061d2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061d4:	f7fd feee 	bl	8003fb4 <HAL_GetTick>
 80061d8:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80061da:	6823      	ldr	r3, [r4, #0]
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	f140 80c4 	bpl.w	800636a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80061e2:	2000      	movs	r0, #0
 80061e4:	e009      	b.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x38e>
      plli2sused = 1;
 80061e6:	2601      	movs	r6, #1
 80061e8:	e67c      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061ea:	f7fd fee3 	bl	8003fb4 <HAL_GetTick>
 80061ee:	eba0 0008 	sub.w	r0, r0, r8
 80061f2:	2864      	cmp	r0, #100	; 0x64
 80061f4:	f67f ae8e 	bls.w	8005f14 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 80061f8:	2003      	movs	r0, #3
}
 80061fa:	b003      	add	sp, #12
 80061fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006200:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006202:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8006206:	4293      	cmp	r3, r2
 8006208:	f43f ae8e 	beq.w	8005f28 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800620c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800620e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006210:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8006214:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006218:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800621a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800621c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006220:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8006222:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006224:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006226:	07da      	lsls	r2, r3, #31
 8006228:	f57f ae7e 	bpl.w	8005f28 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 800622c:	f7fd fec2 	bl	8003fb4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006230:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8006234:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006236:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006238:	079b      	lsls	r3, r3, #30
 800623a:	f53f ae75 	bmi.w	8005f28 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800623e:	f7fd feb9 	bl	8003fb4 <HAL_GetTick>
 8006242:	eba0 0008 	sub.w	r0, r0, r8
 8006246:	4548      	cmp	r0, r9
 8006248:	d9f5      	bls.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 800624a:	e7d5      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800624c:	6891      	ldr	r1, [r2, #8]
 800624e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8006252:	e679      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8006254:	4e48      	ldr	r6, [pc, #288]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006256:	6833      	ldr	r3, [r6, #0]
 8006258:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800625c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800625e:	f7fd fea9 	bl	8003fb4 <HAL_GetTick>
 8006262:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006264:	6833      	ldr	r3, [r6, #0]
 8006266:	011a      	lsls	r2, r3, #4
 8006268:	d472      	bmi.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800626a:	6822      	ldr	r2, [r4, #0]
 800626c:	07d3      	lsls	r3, r2, #31
 800626e:	d512      	bpl.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8006270:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006272:	b983      	cbnz	r3, 8006296 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006274:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006278:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800627c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006280:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8006284:	430b      	orrs	r3, r1
 8006286:	6861      	ldr	r1, [r4, #4]
 8006288:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800628c:	68a1      	ldr	r1, [r4, #8]
 800628e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8006292:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006296:	0317      	lsls	r7, r2, #12
 8006298:	d503      	bpl.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800629a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800629c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062a0:	d005      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x442>
 80062a2:	02d6      	lsls	r6, r2, #11
 80062a4:	d51e      	bpl.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x478>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80062a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80062a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062ac:	d11a      	bne.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80062ae:	4932      	ldr	r1, [pc, #200]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80062b0:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80062b4:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80062b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80062bc:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80062c0:	4303      	orrs	r3, r0
 80062c2:	6860      	ldr	r0, [r4, #4]
 80062c4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80062c8:	68e0      	ldr	r0, [r4, #12]
 80062ca:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80062ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80062d2:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 80062d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062d8:	f020 001f 	bic.w	r0, r0, #31
 80062dc:	3b01      	subs	r3, #1
 80062de:	4303      	orrs	r3, r0
 80062e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80062e4:	01d0      	lsls	r0, r2, #7
 80062e6:	d511      	bpl.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80062e8:	4923      	ldr	r1, [pc, #140]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80062ea:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80062ee:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80062f2:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80062f6:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80062fa:	4303      	orrs	r3, r0
 80062fc:	6860      	ldr	r0, [r4, #4]
 80062fe:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006302:	6920      	ldr	r0, [r4, #16]
 8006304:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006308:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800630c:	0191      	lsls	r1, r2, #6
 800630e:	d50d      	bpl.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006310:	6923      	ldr	r3, [r4, #16]
 8006312:	6862      	ldr	r2, [r4, #4]
 8006314:	041b      	lsls	r3, r3, #16
 8006316:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800631a:	68e2      	ldr	r2, [r4, #12]
 800631c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006320:	68a2      	ldr	r2, [r4, #8]
 8006322:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8006326:	4a14      	ldr	r2, [pc, #80]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006328:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800632c:	4e12      	ldr	r6, [pc, #72]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800632e:	6833      	ldr	r3, [r6, #0]
 8006330:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006334:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8006336:	f7fd fe3d 	bl	8003fb4 <HAL_GetTick>
 800633a:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800633c:	6833      	ldr	r3, [r6, #0]
 800633e:	011a      	lsls	r2, r3, #4
 8006340:	f53f aed7 	bmi.w	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x286>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006344:	f7fd fe36 	bl	8003fb4 <HAL_GetTick>
 8006348:	1bc0      	subs	r0, r0, r7
 800634a:	2864      	cmp	r0, #100	; 0x64
 800634c:	d9f6      	bls.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800634e:	e753      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006350:	f7fd fe30 	bl	8003fb4 <HAL_GetTick>
 8006354:	1bc0      	subs	r0, r0, r7
 8006356:	2864      	cmp	r0, #100	; 0x64
 8006358:	d984      	bls.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800635a:	e74d      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800635c:	f7fd fe2a 	bl	8003fb4 <HAL_GetTick>
 8006360:	1bc0      	subs	r0, r0, r7
 8006362:	2864      	cmp	r0, #100	; 0x64
 8006364:	f67f aed0 	bls.w	8006108 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 8006368:	e746      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800636a:	f7fd fe23 	bl	8003fb4 <HAL_GetTick>
 800636e:	1b40      	subs	r0, r0, r5
 8006370:	2864      	cmp	r0, #100	; 0x64
 8006372:	f67f af32 	bls.w	80061da <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006376:	e73f      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8006378:	40023800 	.word	0x40023800

0800637c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800637c:	b538      	push	{r3, r4, r5, lr}
 800637e:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006380:	4604      	mov	r4, r0
 8006382:	b1c8      	cbz	r0, 80063b8 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006384:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006388:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800638c:	b91b      	cbnz	r3, 8006396 <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800638e:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006392:	f7fb f9b5 	bl	8001700 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006396:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006398:	1d21      	adds	r1, r4, #4
 800639a:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800639c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80063a0:	f000 f9cf 	bl	8006742 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80063a4:	6862      	ldr	r2, [r4, #4]
 80063a6:	4629      	mov	r1, r5
 80063a8:	6820      	ldr	r0, [r4, #0]
 80063aa:	f000 fa05 	bl	80067b8 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80063ae:	2301      	movs	r3, #1

  return HAL_OK;
 80063b0:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 80063b2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 80063b6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80063b8:	2001      	movs	r0, #1
 80063ba:	e7fc      	b.n	80063b6 <HAL_SDRAM_Init+0x3a>

080063bc <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80063bc:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80063be:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 80063c2:	4605      	mov	r5, r0
 80063c4:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80063c6:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80063c8:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 80063ca:	d010      	beq.n	80063ee <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80063cc:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 80063d0:	2c01      	cmp	r4, #1
 80063d2:	d110      	bne.n	80063f6 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80063d4:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80063d6:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80063d8:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80063dc:	f000 fa22 	bl	8006824 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80063e0:	6833      	ldr	r3, [r6, #0]
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d104      	bne.n	80063f0 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80063e6:	2305      	movs	r3, #5
 80063e8:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80063ec:	2000      	movs	r0, #0
}
 80063ee:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 80063f0:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 80063f4:	e7fa      	b.n	80063ec <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 80063f6:	2001      	movs	r0, #1
 80063f8:	e7f9      	b.n	80063ee <HAL_SDRAM_SendCommand+0x32>

080063fa <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80063fa:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80063fc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8006400:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006402:	2b02      	cmp	r3, #2
 8006404:	b2d8      	uxtb	r0, r3
 8006406:	d00d      	beq.n	8006424 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006408:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800640c:	2b01      	cmp	r3, #1
 800640e:	b2dd      	uxtb	r5, r3
 8006410:	d109      	bne.n	8006426 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006412:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006414:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006416:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800641a:	f000 fa15 	bl	8006848 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800641e:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006420:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 8006424:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006426:	2001      	movs	r0, #1
 8006428:	e7fc      	b.n	8006424 <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800642a <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800642a:	4770      	bx	lr

0800642c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800642c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006430:	2b01      	cmp	r3, #1
 8006432:	d133      	bne.n	800649c <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006434:	2302      	movs	r3, #2
 8006436:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800643a:	6803      	ldr	r3, [r0, #0]
 800643c:	68da      	ldr	r2, [r3, #12]
 800643e:	f042 0201 	orr.w	r2, r2, #1
 8006442:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006444:	4a16      	ldr	r2, [pc, #88]	; (80064a0 <HAL_TIM_Base_Start_IT+0x74>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d01a      	beq.n	8006480 <HAL_TIM_Base_Start_IT+0x54>
 800644a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800644e:	d017      	beq.n	8006480 <HAL_TIM_Base_Start_IT+0x54>
 8006450:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006454:	4293      	cmp	r3, r2
 8006456:	d013      	beq.n	8006480 <HAL_TIM_Base_Start_IT+0x54>
 8006458:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800645c:	4293      	cmp	r3, r2
 800645e:	d00f      	beq.n	8006480 <HAL_TIM_Base_Start_IT+0x54>
 8006460:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006464:	4293      	cmp	r3, r2
 8006466:	d00b      	beq.n	8006480 <HAL_TIM_Base_Start_IT+0x54>
 8006468:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800646c:	4293      	cmp	r3, r2
 800646e:	d007      	beq.n	8006480 <HAL_TIM_Base_Start_IT+0x54>
 8006470:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8006474:	4293      	cmp	r3, r2
 8006476:	d003      	beq.n	8006480 <HAL_TIM_Base_Start_IT+0x54>
 8006478:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800647c:	4293      	cmp	r3, r2
 800647e:	d107      	bne.n	8006490 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006480:	6899      	ldr	r1, [r3, #8]
 8006482:	4a08      	ldr	r2, [pc, #32]	; (80064a4 <HAL_TIM_Base_Start_IT+0x78>)
 8006484:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006486:	2a06      	cmp	r2, #6
 8006488:	d006      	beq.n	8006498 <HAL_TIM_Base_Start_IT+0x6c>
 800648a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800648e:	d003      	beq.n	8006498 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	f042 0201 	orr.w	r2, r2, #1
 8006496:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006498:	2000      	movs	r0, #0
}
 800649a:	4770      	bx	lr
    return HAL_ERROR;
 800649c:	2001      	movs	r0, #1
 800649e:	4770      	bx	lr
 80064a0:	40010000 	.word	0x40010000
 80064a4:	00010007 	.word	0x00010007

080064a8 <HAL_TIM_OC_DelayElapsedCallback>:
 80064a8:	4770      	bx	lr

080064aa <HAL_TIM_IC_CaptureCallback>:
 80064aa:	4770      	bx	lr

080064ac <HAL_TIM_PWM_PulseFinishedCallback>:
 80064ac:	4770      	bx	lr

080064ae <HAL_TIM_TriggerCallback>:
 80064ae:	4770      	bx	lr

080064b0 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064b0:	6803      	ldr	r3, [r0, #0]
 80064b2:	691a      	ldr	r2, [r3, #16]
 80064b4:	0791      	lsls	r1, r2, #30
{
 80064b6:	b510      	push	{r4, lr}
 80064b8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064ba:	d50f      	bpl.n	80064dc <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064bc:	68da      	ldr	r2, [r3, #12]
 80064be:	0792      	lsls	r2, r2, #30
 80064c0:	d50c      	bpl.n	80064dc <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064c2:	f06f 0202 	mvn.w	r2, #2
 80064c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064c8:	2201      	movs	r2, #1
 80064ca:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	0799      	lsls	r1, r3, #30
 80064d0:	f000 8085 	beq.w	80065de <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064d4:	f7ff ffe9 	bl	80064aa <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064d8:	2300      	movs	r3, #0
 80064da:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064dc:	6823      	ldr	r3, [r4, #0]
 80064de:	691a      	ldr	r2, [r3, #16]
 80064e0:	0752      	lsls	r2, r2, #29
 80064e2:	d510      	bpl.n	8006506 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064e4:	68da      	ldr	r2, [r3, #12]
 80064e6:	0750      	lsls	r0, r2, #29
 80064e8:	d50d      	bpl.n	8006506 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064ea:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064ee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064f2:	2202      	movs	r2, #2
 80064f4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064f6:	699b      	ldr	r3, [r3, #24]
 80064f8:	f413 7f40 	tst.w	r3, #768	; 0x300
 80064fc:	d075      	beq.n	80065ea <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80064fe:	f7ff ffd4 	bl	80064aa <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006502:	2300      	movs	r3, #0
 8006504:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006506:	6823      	ldr	r3, [r4, #0]
 8006508:	691a      	ldr	r2, [r3, #16]
 800650a:	0711      	lsls	r1, r2, #28
 800650c:	d50f      	bpl.n	800652e <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800650e:	68da      	ldr	r2, [r3, #12]
 8006510:	0712      	lsls	r2, r2, #28
 8006512:	d50c      	bpl.n	800652e <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006514:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006518:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800651a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800651c:	2204      	movs	r2, #4
 800651e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006520:	69db      	ldr	r3, [r3, #28]
 8006522:	079b      	lsls	r3, r3, #30
 8006524:	d067      	beq.n	80065f6 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8006526:	f7ff ffc0 	bl	80064aa <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800652a:	2300      	movs	r3, #0
 800652c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800652e:	6823      	ldr	r3, [r4, #0]
 8006530:	691a      	ldr	r2, [r3, #16]
 8006532:	06d0      	lsls	r0, r2, #27
 8006534:	d510      	bpl.n	8006558 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006536:	68da      	ldr	r2, [r3, #12]
 8006538:	06d1      	lsls	r1, r2, #27
 800653a:	d50d      	bpl.n	8006558 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800653c:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006540:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006542:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006544:	2208      	movs	r2, #8
 8006546:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006548:	69db      	ldr	r3, [r3, #28]
 800654a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800654e:	d058      	beq.n	8006602 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8006550:	f7ff ffab 	bl	80064aa <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006554:	2300      	movs	r3, #0
 8006556:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006558:	6823      	ldr	r3, [r4, #0]
 800655a:	691a      	ldr	r2, [r3, #16]
 800655c:	07d2      	lsls	r2, r2, #31
 800655e:	d508      	bpl.n	8006572 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006560:	68da      	ldr	r2, [r3, #12]
 8006562:	07d0      	lsls	r0, r2, #31
 8006564:	d505      	bpl.n	8006572 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006566:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800656a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800656c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800656e:	f7fa fec3 	bl	80012f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006572:	6823      	ldr	r3, [r4, #0]
 8006574:	691a      	ldr	r2, [r3, #16]
 8006576:	0611      	lsls	r1, r2, #24
 8006578:	d508      	bpl.n	800658c <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800657a:	68da      	ldr	r2, [r3, #12]
 800657c:	0612      	lsls	r2, r2, #24
 800657e:	d505      	bpl.n	800658c <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006580:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006584:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006586:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006588:	f000 f8d9 	bl	800673e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800658c:	6823      	ldr	r3, [r4, #0]
 800658e:	691a      	ldr	r2, [r3, #16]
 8006590:	05d0      	lsls	r0, r2, #23
 8006592:	d508      	bpl.n	80065a6 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006594:	68da      	ldr	r2, [r3, #12]
 8006596:	0611      	lsls	r1, r2, #24
 8006598:	d505      	bpl.n	80065a6 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800659a:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800659e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80065a0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80065a2:	f000 f8cd 	bl	8006740 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065a6:	6823      	ldr	r3, [r4, #0]
 80065a8:	691a      	ldr	r2, [r3, #16]
 80065aa:	0652      	lsls	r2, r2, #25
 80065ac:	d508      	bpl.n	80065c0 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065ae:	68da      	ldr	r2, [r3, #12]
 80065b0:	0650      	lsls	r0, r2, #25
 80065b2:	d505      	bpl.n	80065c0 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065b8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065ba:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80065bc:	f7ff ff77 	bl	80064ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065c0:	6823      	ldr	r3, [r4, #0]
 80065c2:	691a      	ldr	r2, [r3, #16]
 80065c4:	0691      	lsls	r1, r2, #26
 80065c6:	d522      	bpl.n	800660e <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065c8:	68da      	ldr	r2, [r3, #12]
 80065ca:	0692      	lsls	r2, r2, #26
 80065cc:	d51f      	bpl.n	800660e <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065ce:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065d2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065d4:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80065da:	f000 b8af 	b.w	800673c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065de:	f7ff ff63 	bl	80064a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065e2:	4620      	mov	r0, r4
 80065e4:	f7ff ff62 	bl	80064ac <HAL_TIM_PWM_PulseFinishedCallback>
 80065e8:	e776      	b.n	80064d8 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ea:	f7ff ff5d 	bl	80064a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065ee:	4620      	mov	r0, r4
 80065f0:	f7ff ff5c 	bl	80064ac <HAL_TIM_PWM_PulseFinishedCallback>
 80065f4:	e785      	b.n	8006502 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065f6:	f7ff ff57 	bl	80064a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065fa:	4620      	mov	r0, r4
 80065fc:	f7ff ff56 	bl	80064ac <HAL_TIM_PWM_PulseFinishedCallback>
 8006600:	e793      	b.n	800652a <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006602:	f7ff ff51 	bl	80064a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006606:	4620      	mov	r0, r4
 8006608:	f7ff ff50 	bl	80064ac <HAL_TIM_PWM_PulseFinishedCallback>
 800660c:	e7a2      	b.n	8006554 <HAL_TIM_IRQHandler+0xa4>
}
 800660e:	bd10      	pop	{r4, pc}

08006610 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006610:	4a30      	ldr	r2, [pc, #192]	; (80066d4 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8006612:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006614:	4290      	cmp	r0, r2
 8006616:	d012      	beq.n	800663e <TIM_Base_SetConfig+0x2e>
 8006618:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800661c:	d00f      	beq.n	800663e <TIM_Base_SetConfig+0x2e>
 800661e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006622:	4290      	cmp	r0, r2
 8006624:	d00b      	beq.n	800663e <TIM_Base_SetConfig+0x2e>
 8006626:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800662a:	4290      	cmp	r0, r2
 800662c:	d007      	beq.n	800663e <TIM_Base_SetConfig+0x2e>
 800662e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006632:	4290      	cmp	r0, r2
 8006634:	d003      	beq.n	800663e <TIM_Base_SetConfig+0x2e>
 8006636:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800663a:	4290      	cmp	r0, r2
 800663c:	d119      	bne.n	8006672 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800663e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006644:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006646:	4a23      	ldr	r2, [pc, #140]	; (80066d4 <TIM_Base_SetConfig+0xc4>)
 8006648:	4290      	cmp	r0, r2
 800664a:	d029      	beq.n	80066a0 <TIM_Base_SetConfig+0x90>
 800664c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006650:	d026      	beq.n	80066a0 <TIM_Base_SetConfig+0x90>
 8006652:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006656:	4290      	cmp	r0, r2
 8006658:	d022      	beq.n	80066a0 <TIM_Base_SetConfig+0x90>
 800665a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800665e:	4290      	cmp	r0, r2
 8006660:	d01e      	beq.n	80066a0 <TIM_Base_SetConfig+0x90>
 8006662:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006666:	4290      	cmp	r0, r2
 8006668:	d01a      	beq.n	80066a0 <TIM_Base_SetConfig+0x90>
 800666a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800666e:	4290      	cmp	r0, r2
 8006670:	d016      	beq.n	80066a0 <TIM_Base_SetConfig+0x90>
 8006672:	4a19      	ldr	r2, [pc, #100]	; (80066d8 <TIM_Base_SetConfig+0xc8>)
 8006674:	4290      	cmp	r0, r2
 8006676:	d013      	beq.n	80066a0 <TIM_Base_SetConfig+0x90>
 8006678:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800667c:	4290      	cmp	r0, r2
 800667e:	d00f      	beq.n	80066a0 <TIM_Base_SetConfig+0x90>
 8006680:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006684:	4290      	cmp	r0, r2
 8006686:	d00b      	beq.n	80066a0 <TIM_Base_SetConfig+0x90>
 8006688:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800668c:	4290      	cmp	r0, r2
 800668e:	d007      	beq.n	80066a0 <TIM_Base_SetConfig+0x90>
 8006690:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006694:	4290      	cmp	r0, r2
 8006696:	d003      	beq.n	80066a0 <TIM_Base_SetConfig+0x90>
 8006698:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800669c:	4290      	cmp	r0, r2
 800669e:	d103      	bne.n	80066a8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066a4:	68ca      	ldr	r2, [r1, #12]
 80066a6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066a8:	694a      	ldr	r2, [r1, #20]
 80066aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066ae:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80066b0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066b2:	688b      	ldr	r3, [r1, #8]
 80066b4:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066b6:	680b      	ldr	r3, [r1, #0]
 80066b8:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066ba:	4b06      	ldr	r3, [pc, #24]	; (80066d4 <TIM_Base_SetConfig+0xc4>)
 80066bc:	4298      	cmp	r0, r3
 80066be:	d003      	beq.n	80066c8 <TIM_Base_SetConfig+0xb8>
 80066c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066c4:	4298      	cmp	r0, r3
 80066c6:	d101      	bne.n	80066cc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066c8:	690b      	ldr	r3, [r1, #16]
 80066ca:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066cc:	2301      	movs	r3, #1
 80066ce:	6143      	str	r3, [r0, #20]
}
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	40010000 	.word	0x40010000
 80066d8:	40014000 	.word	0x40014000

080066dc <HAL_TIM_Base_Init>:
{
 80066dc:	b510      	push	{r4, lr}
  if (htim == NULL)
 80066de:	4604      	mov	r4, r0
 80066e0:	b350      	cbz	r0, 8006738 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80066e2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80066e6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80066ea:	b91b      	cbnz	r3, 80066f4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80066ec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80066f0:	f7ff fe9b 	bl	800642a <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80066f4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066f6:	6820      	ldr	r0, [r4, #0]
 80066f8:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 80066fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066fe:	f7ff ff87 	bl	8006610 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006702:	2301      	movs	r3, #1
  return HAL_OK;
 8006704:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006706:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800670a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800670e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006712:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006716:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800671a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800671e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006722:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006726:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800672a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800672e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006732:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8006736:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006738:	2001      	movs	r0, #1
 800673a:	e7fc      	b.n	8006736 <HAL_TIM_Base_Init+0x5a>

0800673c <HAL_TIMEx_CommutCallback>:
 800673c:	4770      	bx	lr

0800673e <HAL_TIMEx_BreakCallback>:
 800673e:	4770      	bx	lr

08006740 <HAL_TIMEx_Break2Callback>:
 8006740:	4770      	bx	lr

08006742 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006742:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006746:	680a      	ldr	r2, [r1, #0]
 8006748:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 800674c:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 8006750:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 8006754:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 8006758:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 800675c:	4323      	orrs	r3, r4
 800675e:	b9a2      	cbnz	r2, 800678a <FMC_SDRAM_Init+0x48>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006760:	ea43 0209 	orr.w	r2, r3, r9
 8006764:	6801      	ldr	r1, [r0, #0]
 8006766:	432a      	orrs	r2, r5
 8006768:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 800676c:	ea42 0308 	orr.w	r3, r2, r8
 8006770:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8006774:	ea43 030e 	orr.w	r3, r3, lr
 8006778:	ea43 030c 	orr.w	r3, r3, ip
 800677c:	433b      	orrs	r3, r7
 800677e:	4333      	orrs	r3, r6
 8006780:	430b      	orrs	r3, r1
 8006782:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8006784:	2000      	movs	r0, #0
 8006786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800678a:	6802      	ldr	r2, [r0, #0]
 800678c:	ea43 0309 	orr.w	r3, r3, r9
 8006790:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8006794:	4313      	orrs	r3, r2
 8006796:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006798:	ea45 0308 	orr.w	r3, r5, r8
 800679c:	6842      	ldr	r2, [r0, #4]
 800679e:	ea43 030e 	orr.w	r3, r3, lr
 80067a2:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 80067a6:	ea43 030c 	orr.w	r3, r3, ip
 80067aa:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80067ae:	433b      	orrs	r3, r7
 80067b0:	4333      	orrs	r3, r6
 80067b2:	4313      	orrs	r3, r2
 80067b4:	6043      	str	r3, [r0, #4]
 80067b6:	e7e5      	b.n	8006784 <FMC_SDRAM_Init+0x42>

080067b8 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80067b8:	68cb      	ldr	r3, [r1, #12]
 80067ba:	f103 3cff 	add.w	ip, r3, #4294967295
 80067be:	694b      	ldr	r3, [r1, #20]
{
 80067c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067c2:	3b01      	subs	r3, #1
 80067c4:	680f      	ldr	r7, [r1, #0]
 80067c6:	684c      	ldr	r4, [r1, #4]
 80067c8:	688e      	ldr	r6, [r1, #8]
 80067ca:	051b      	lsls	r3, r3, #20
 80067cc:	690d      	ldr	r5, [r1, #16]
 80067ce:	3c01      	subs	r4, #1
 80067d0:	6989      	ldr	r1, [r1, #24]
 80067d2:	3e01      	subs	r6, #1
 80067d4:	3d01      	subs	r5, #1
 80067d6:	3f01      	subs	r7, #1
 80067d8:	3901      	subs	r1, #1
 80067da:	0124      	lsls	r4, r4, #4
 80067dc:	0236      	lsls	r6, r6, #8
 80067de:	042d      	lsls	r5, r5, #16
 80067e0:	0609      	lsls	r1, r1, #24
 80067e2:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 80067e6:	b95a      	cbnz	r2, 8006800 <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80067e8:	433b      	orrs	r3, r7
 80067ea:	6882      	ldr	r2, [r0, #8]
 80067ec:	4323      	orrs	r3, r4
 80067ee:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 80067f2:	4333      	orrs	r3, r6
 80067f4:	432b      	orrs	r3, r5
 80067f6:	430b      	orrs	r3, r1
 80067f8:	4313      	orrs	r3, r2
 80067fa:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 80067fc:	2000      	movs	r0, #0
 80067fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006800:	6882      	ldr	r2, [r0, #8]
 8006802:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006806:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 800680a:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800680c:	ea44 0306 	orr.w	r3, r4, r6
 8006810:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006812:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006814:	68c2      	ldr	r2, [r0, #12]
 8006816:	432b      	orrs	r3, r5
 8006818:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800681c:	430b      	orrs	r3, r1
 800681e:	4313      	orrs	r3, r2
 8006820:	60c3      	str	r3, [r0, #12]
 8006822:	e7eb      	b.n	80067fc <FMC_SDRAM_Timing_Init+0x44>

08006824 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8006824:	6902      	ldr	r2, [r0, #16]
{
 8006826:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8006828:	e9d1 3400 	ldrd	r3, r4, [r1]
 800682c:	0d92      	lsrs	r2, r2, #22
 800682e:	4323      	orrs	r3, r4
 8006830:	68cc      	ldr	r4, [r1, #12]
 8006832:	0592      	lsls	r2, r2, #22
 8006834:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 8006838:	4313      	orrs	r3, r2
 800683a:	688a      	ldr	r2, [r1, #8]
 800683c:	3a01      	subs	r2, #1
 800683e:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8006842:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8006844:	2000      	movs	r0, #0
 8006846:	bd10      	pop	{r4, pc}

08006848 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8006848:	6943      	ldr	r3, [r0, #20]
 800684a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800684e:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8006852:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8006856:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 8006858:	2000      	movs	r0, #0
 800685a:	4770      	bx	lr

0800685c <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800685c:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8006860:	b113      	cbz	r3, 8006868 <osKernelInitialize+0xc>
    stat = osErrorISR;
 8006862:	f06f 0005 	mvn.w	r0, #5
 8006866:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006868:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 800686c:	4b07      	ldr	r3, [pc, #28]	; (800688c <osKernelInitialize+0x30>)
  if (IS_IRQ()) {
 800686e:	b912      	cbnz	r2, 8006876 <osKernelInitialize+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006870:	f3ef 8211 	mrs	r2, BASEPRI
 8006874:	b112      	cbz	r2, 800687c <osKernelInitialize+0x20>
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	2a02      	cmp	r2, #2
 800687a:	d0f2      	beq.n	8006862 <osKernelInitialize+0x6>
  }
  else {
    if (KernelState == osKernelInactive) {
 800687c:	6818      	ldr	r0, [r3, #0]
 800687e:	b910      	cbnz	r0, 8006886 <osKernelInitialize+0x2a>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006880:	2201      	movs	r2, #1
 8006882:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006884:	4770      	bx	lr
    } else {
      stat = osError;
 8006886:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800688a:	4770      	bx	lr
 800688c:	20001c34 	.word	0x20001c34

08006890 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006890:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006892:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8006896:	b113      	cbz	r3, 800689e <osKernelStart+0xe>
    stat = osErrorISR;
 8006898:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 800689c:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800689e:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 80068a2:	4b0a      	ldr	r3, [pc, #40]	; (80068cc <osKernelStart+0x3c>)
  if (IS_IRQ()) {
 80068a4:	b912      	cbnz	r2, 80068ac <osKernelStart+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80068a6:	f3ef 8211 	mrs	r2, BASEPRI
 80068aa:	b112      	cbz	r2, 80068b2 <osKernelStart+0x22>
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	2a02      	cmp	r2, #2
 80068b0:	d0f2      	beq.n	8006898 <osKernelStart+0x8>
    if (KernelState == osKernelReady) {
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	2a01      	cmp	r2, #1
 80068b6:	d105      	bne.n	80068c4 <osKernelStart+0x34>
      KernelState = osKernelRunning;
 80068b8:	2202      	movs	r2, #2
 80068ba:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80068bc:	f001 fe7c 	bl	80085b8 <vTaskStartScheduler>
      stat = osOK;
 80068c0:	2000      	movs	r0, #0
 80068c2:	e7eb      	b.n	800689c <osKernelStart+0xc>
      stat = osError;
 80068c4:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 80068c8:	e7e8      	b.n	800689c <osKernelStart+0xc>
 80068ca:	bf00      	nop
 80068cc:	20001c34 	.word	0x20001c34

080068d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80068d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068d2:	4614      	mov	r4, r2
 80068d4:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80068d6:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80068d8:	460b      	mov	r3, r1
  hTask = NULL;
 80068da:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068dc:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80068e0:	bb22      	cbnz	r2, 800692c <osThreadNew+0x5c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068e2:	f3ef 8210 	mrs	r2, PRIMASK
 80068e6:	b912      	cbnz	r2, 80068ee <osThreadNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80068e8:	f3ef 8211 	mrs	r2, BASEPRI
 80068ec:	b11a      	cbz	r2, 80068f6 <osThreadNew+0x26>
 80068ee:	4a22      	ldr	r2, [pc, #136]	; (8006978 <osThreadNew+0xa8>)
 80068f0:	6812      	ldr	r2, [r2, #0]
 80068f2:	2a02      	cmp	r2, #2
 80068f4:	d01a      	beq.n	800692c <osThreadNew+0x5c>
 80068f6:	b1c8      	cbz	r0, 800692c <osThreadNew+0x5c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 80068f8:	2c00      	cmp	r4, #0
 80068fa:	d02f      	beq.n	800695c <osThreadNew+0x8c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80068fc:	69a5      	ldr	r5, [r4, #24]
 80068fe:	2d00      	cmp	r5, #0
 8006900:	bf08      	it	eq
 8006902:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006904:	1e6a      	subs	r2, r5, #1
 8006906:	46ac      	mov	ip, r5
 8006908:	2a37      	cmp	r2, #55	; 0x37
 800690a:	d82b      	bhi.n	8006964 <osThreadNew+0x94>
 800690c:	6862      	ldr	r2, [r4, #4]
 800690e:	07d2      	lsls	r2, r2, #31
 8006910:	d428      	bmi.n	8006964 <osThreadNew+0x94>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8006912:	6966      	ldr	r6, [r4, #20]
 8006914:	b16e      	cbz	r6, 8006932 <osThreadNew+0x62>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006916:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 8006918:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800691a:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800691e:	b157      	cbz	r7, 8006936 <osThreadNew+0x66>
 8006920:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 8006924:	d902      	bls.n	800692c <osThreadNew+0x5c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006926:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006928:	b104      	cbz	r4, 800692c <osThreadNew+0x5c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800692a:	b9ee      	cbnz	r6, 8006968 <osThreadNew+0x98>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800692c:	9805      	ldr	r0, [sp, #20]
}
 800692e:	b007      	add	sp, #28
 8006930:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8006932:	2280      	movs	r2, #128	; 0x80
 8006934:	e7f0      	b.n	8006918 <osThreadNew+0x48>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006936:	f1be 0f00 	cmp.w	lr, #0
 800693a:	d1f7      	bne.n	800692c <osThreadNew+0x5c>
      if (mem == 0) {
 800693c:	6924      	ldr	r4, [r4, #16]
 800693e:	2c00      	cmp	r4, #0
 8006940:	d1f4      	bne.n	800692c <osThreadNew+0x5c>
 8006942:	460c      	mov	r4, r1
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006944:	a905      	add	r1, sp, #20
 8006946:	b292      	uxth	r2, r2
 8006948:	e9cd c100 	strd	ip, r1, [sp]
 800694c:	4621      	mov	r1, r4
 800694e:	f001 fca7 	bl	80082a0 <xTaskCreate>
 8006952:	2801      	cmp	r0, #1
          hTask = NULL;
 8006954:	bf1c      	itt	ne
 8006956:	2300      	movne	r3, #0
 8006958:	9305      	strne	r3, [sp, #20]
 800695a:	e7e7      	b.n	800692c <osThreadNew+0x5c>
    prio  = (UBaseType_t)osPriorityNormal;
 800695c:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 8006960:	2280      	movs	r2, #128	; 0x80
 8006962:	e7ef      	b.n	8006944 <osThreadNew+0x74>
        return (NULL);
 8006964:	2000      	movs	r0, #0
 8006966:	e7e2      	b.n	800692e <osThreadNew+0x5e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006968:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800696c:	9500      	str	r5, [sp, #0]
 800696e:	f001 fc59 	bl	8008224 <xTaskCreateStatic>
 8006972:	9005      	str	r0, [sp, #20]
 8006974:	e7da      	b.n	800692c <osThreadNew+0x5c>
 8006976:	bf00      	nop
 8006978:	20001c34 	.word	0x20001c34

0800697c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800697c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800697e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8006982:	b113      	cbz	r3, 800698a <osDelay+0xe>
    stat = osErrorISR;
 8006984:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8006988:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800698a:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800698e:	b913      	cbnz	r3, 8006996 <osDelay+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006990:	f3ef 8311 	mrs	r3, BASEPRI
 8006994:	b11b      	cbz	r3, 800699e <osDelay+0x22>
 8006996:	4b05      	ldr	r3, [pc, #20]	; (80069ac <osDelay+0x30>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2b02      	cmp	r3, #2
 800699c:	d0f2      	beq.n	8006984 <osDelay+0x8>
    if (ticks != 0U) {
 800699e:	2800      	cmp	r0, #0
 80069a0:	d0f2      	beq.n	8006988 <osDelay+0xc>
      vTaskDelay(ticks);
 80069a2:	f001 fdc7 	bl	8008534 <vTaskDelay>
    stat = osOK;
 80069a6:	2000      	movs	r0, #0
 80069a8:	e7ee      	b.n	8006988 <osDelay+0xc>
 80069aa:	bf00      	nop
 80069ac:	20001c34 	.word	0x20001c34

080069b0 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80069b0:	b570      	push	{r4, r5, r6, lr}
 80069b2:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069b4:	f3ef 8505 	mrs	r5, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 80069b8:	b115      	cbz	r5, 80069c0 <osMutexNew+0x10>
  hMutex = NULL;
 80069ba:	2600      	movs	r6, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 80069bc:	4630      	mov	r0, r6
 80069be:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069c0:	f3ef 8210 	mrs	r2, PRIMASK
  if (!IS_IRQ()) {
 80069c4:	b912      	cbnz	r2, 80069cc <osMutexNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80069c6:	f3ef 8211 	mrs	r2, BASEPRI
 80069ca:	b11a      	cbz	r2, 80069d4 <osMutexNew+0x24>
 80069cc:	4a18      	ldr	r2, [pc, #96]	; (8006a30 <osMutexNew+0x80>)
 80069ce:	6812      	ldr	r2, [r2, #0]
 80069d0:	2a02      	cmp	r2, #2
 80069d2:	d0f2      	beq.n	80069ba <osMutexNew+0xa>
    if (attr != NULL) {
 80069d4:	b114      	cbz	r4, 80069dc <osMutexNew+0x2c>
      type = attr->attr_bits;
 80069d6:	6865      	ldr	r5, [r4, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 80069d8:	072b      	lsls	r3, r5, #28
 80069da:	d4ee      	bmi.n	80069ba <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 80069dc:	f005 0501 	and.w	r5, r5, #1
      if (attr != NULL) {
 80069e0:	b17c      	cbz	r4, 8006a02 <osMutexNew+0x52>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80069e2:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 80069e6:	b151      	cbz	r1, 80069fe <osMutexNew+0x4e>
 80069e8:	2b4f      	cmp	r3, #79	; 0x4f
 80069ea:	d9e6      	bls.n	80069ba <osMutexNew+0xa>
        if (rmtx != 0U) {
 80069ec:	b1dd      	cbz	r5, 8006a26 <osMutexNew+0x76>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80069ee:	2004      	movs	r0, #4
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80069f0:	f000 ff44 	bl	800787c <xQueueCreateMutexStatic>
 80069f4:	4606      	mov	r6, r0
      if (hMutex != NULL) {
 80069f6:	2800      	cmp	r0, #0
 80069f8:	d0df      	beq.n	80069ba <osMutexNew+0xa>
          name = attr->name;
 80069fa:	6824      	ldr	r4, [r4, #0]
 80069fc:	e00a      	b.n	8006a14 <osMutexNew+0x64>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1db      	bne.n	80069ba <osMutexNew+0xa>
          if (rmtx != 0U) {
 8006a02:	b195      	cbz	r5, 8006a2a <osMutexNew+0x7a>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8006a04:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutex ();
 8006a06:	f000 ff6e 	bl	80078e6 <xQueueCreateMutex>
 8006a0a:	4606      	mov	r6, r0
      if (hMutex != NULL) {
 8006a0c:	2800      	cmp	r0, #0
 8006a0e:	d0d4      	beq.n	80069ba <osMutexNew+0xa>
        if (attr != NULL) {
 8006a10:	2c00      	cmp	r4, #0
 8006a12:	d1f2      	bne.n	80069fa <osMutexNew+0x4a>
        vQueueAddToRegistry (hMutex, name);
 8006a14:	4621      	mov	r1, r4
 8006a16:	4630      	mov	r0, r6
 8006a18:	f001 fa34 	bl	8007e84 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006a1c:	2d00      	cmp	r5, #0
 8006a1e:	d0cd      	beq.n	80069bc <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006a20:	f046 0601 	orr.w	r6, r6, #1
  return ((osMutexId_t)hMutex);
 8006a24:	e7ca      	b.n	80069bc <osMutexNew+0xc>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006a26:	2001      	movs	r0, #1
 8006a28:	e7e2      	b.n	80069f0 <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutex ();
 8006a2a:	2001      	movs	r0, #1
 8006a2c:	e7eb      	b.n	8006a06 <osMutexNew+0x56>
 8006a2e:	bf00      	nop
 8006a30:	20001c34 	.word	0x20001c34

08006a34 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006a34:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006a36:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006a3a:	b510      	push	{r4, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 8006a3c:	f003 0301 	and.w	r3, r3, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006a40:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a42:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8006a46:	b112      	cbz	r2, 8006a4e <osMutexAcquire+0x1a>
    stat = osErrorISR;
 8006a48:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8006a4c:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a4e:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 8006a52:	b912      	cbnz	r2, 8006a5a <osMutexAcquire+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a54:	f3ef 8211 	mrs	r2, BASEPRI
 8006a58:	b11a      	cbz	r2, 8006a62 <osMutexAcquire+0x2e>
 8006a5a:	4a0d      	ldr	r2, [pc, #52]	; (8006a90 <osMutexAcquire+0x5c>)
 8006a5c:	6812      	ldr	r2, [r2, #0]
 8006a5e:	2a02      	cmp	r2, #2
 8006a60:	d0f2      	beq.n	8006a48 <osMutexAcquire+0x14>
  else if (hMutex == NULL) {
 8006a62:	b188      	cbz	r0, 8006a88 <osMutexAcquire+0x54>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006a64:	4621      	mov	r1, r4
    if (rmtx != 0U) {
 8006a66:	b163      	cbz	r3, 8006a82 <osMutexAcquire+0x4e>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006a68:	f001 f992 	bl	8007d90 <xQueueTakeMutexRecursive>
 8006a6c:	2801      	cmp	r0, #1
 8006a6e:	d101      	bne.n	8006a74 <osMutexAcquire+0x40>
  stat = osOK;
 8006a70:	2000      	movs	r0, #0
 8006a72:	e7eb      	b.n	8006a4c <osMutexAcquire+0x18>
          stat = osErrorResource;
 8006a74:	2c00      	cmp	r4, #0
 8006a76:	bf14      	ite	ne
 8006a78:	f06f 0001 	mvnne.w	r0, #1
 8006a7c:	f06f 0002 	mvneq.w	r0, #2
 8006a80:	e7e4      	b.n	8006a4c <osMutexAcquire+0x18>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006a82:	f001 f8b9 	bl	8007bf8 <xQueueSemaphoreTake>
 8006a86:	e7f1      	b.n	8006a6c <osMutexAcquire+0x38>
    stat = osErrorParameter;
 8006a88:	f06f 0003 	mvn.w	r0, #3
 8006a8c:	e7de      	b.n	8006a4c <osMutexAcquire+0x18>
 8006a8e:	bf00      	nop
 8006a90:	20001c34 	.word	0x20001c34

08006a94 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006a94:	b508      	push	{r3, lr}
 8006a96:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006a98:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 8006a9c:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006aa0:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8006aa4:	b112      	cbz	r2, 8006aac <osMutexRelease+0x18>
    stat = osErrorISR;
 8006aa6:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8006aaa:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006aac:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 8006ab0:	b912      	cbnz	r2, 8006ab8 <osMutexRelease+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ab2:	f3ef 8211 	mrs	r2, BASEPRI
 8006ab6:	b11a      	cbz	r2, 8006ac0 <osMutexRelease+0x2c>
 8006ab8:	4a0a      	ldr	r2, [pc, #40]	; (8006ae4 <osMutexRelease+0x50>)
 8006aba:	6812      	ldr	r2, [r2, #0]
 8006abc:	2a02      	cmp	r2, #2
 8006abe:	d0f2      	beq.n	8006aa6 <osMutexRelease+0x12>
  else if (hMutex == NULL) {
 8006ac0:	b168      	cbz	r0, 8006ade <osMutexRelease+0x4a>
    if (rmtx != 0U) {
 8006ac2:	b13b      	cbz	r3, 8006ad4 <osMutexRelease+0x40>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006ac4:	f000 feef 	bl	80078a6 <xQueueGiveMutexRecursive>
 8006ac8:	2801      	cmp	r0, #1
  stat = osOK;
 8006aca:	bf0c      	ite	eq
 8006acc:	2000      	moveq	r0, #0
        stat = osErrorResource;
 8006ace:	f06f 0002 	mvnne.w	r0, #2
 8006ad2:	e7ea      	b.n	8006aaa <osMutexRelease+0x16>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	f000 fe16 	bl	8007708 <xQueueGenericSend>
 8006adc:	e7f4      	b.n	8006ac8 <osMutexRelease+0x34>
    stat = osErrorParameter;
 8006ade:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8006ae2:	e7e2      	b.n	8006aaa <osMutexRelease+0x16>
 8006ae4:	20001c34 	.word	0x20001c34

08006ae8 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006ae8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006aea:	460e      	mov	r6, r1
 8006aec:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006aee:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006af2:	b11b      	cbz	r3, 8006afc <osSemaphoreNew+0x14>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 8006af4:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8006af6:	4620      	mov	r0, r4
 8006af8:	b002      	add	sp, #8
 8006afa:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006afc:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006b00:	b913      	cbnz	r3, 8006b08 <osSemaphoreNew+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006b02:	f3ef 8311 	mrs	r3, BASEPRI
 8006b06:	b11b      	cbz	r3, 8006b10 <osSemaphoreNew+0x28>
 8006b08:	4b21      	ldr	r3, [pc, #132]	; (8006b90 <osSemaphoreNew+0xa8>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d0f1      	beq.n	8006af4 <osSemaphoreNew+0xc>
 8006b10:	2800      	cmp	r0, #0
 8006b12:	d0ef      	beq.n	8006af4 <osSemaphoreNew+0xc>
 8006b14:	42b0      	cmp	r0, r6
 8006b16:	d3ed      	bcc.n	8006af4 <osSemaphoreNew+0xc>
    if (attr != NULL) {
 8006b18:	b1ed      	cbz	r5, 8006b56 <osSemaphoreNew+0x6e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006b1a:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8006b1e:	b1c3      	cbz	r3, 8006b52 <osSemaphoreNew+0x6a>
 8006b20:	2a4f      	cmp	r2, #79	; 0x4f
 8006b22:	d9e7      	bls.n	8006af4 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 8006b24:	2801      	cmp	r0, #1
 8006b26:	d129      	bne.n	8006b7c <osSemaphoreNew+0x94>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006b28:	2203      	movs	r2, #3
 8006b2a:	9200      	str	r2, [sp, #0]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	4611      	mov	r1, r2
 8006b30:	f000 fd20 	bl	8007574 <xQueueGenericCreateStatic>
          hSemaphore = xSemaphoreCreateBinary();
 8006b34:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006b36:	2800      	cmp	r0, #0
 8006b38:	d0dc      	beq.n	8006af4 <osSemaphoreNew+0xc>
 8006b3a:	b1ce      	cbz	r6, 8006b70 <osSemaphoreNew+0x88>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	461a      	mov	r2, r3
 8006b40:	4619      	mov	r1, r3
 8006b42:	f000 fde1 	bl	8007708 <xQueueGenericSend>
 8006b46:	2801      	cmp	r0, #1
 8006b48:	d012      	beq.n	8006b70 <osSemaphoreNew+0x88>
            vSemaphoreDelete (hSemaphore);
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	f001 f9c4 	bl	8007ed8 <vQueueDelete>
 8006b50:	e7d0      	b.n	8006af4 <osSemaphoreNew+0xc>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006b52:	2a00      	cmp	r2, #0
 8006b54:	d1ce      	bne.n	8006af4 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 8006b56:	2801      	cmp	r0, #1
 8006b58:	d104      	bne.n	8006b64 <osSemaphoreNew+0x7c>
          hSemaphore = xSemaphoreCreateBinary();
 8006b5a:	2203      	movs	r2, #3
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	f000 fd61 	bl	8007624 <xQueueGenericCreate>
 8006b62:	e7e7      	b.n	8006b34 <osSemaphoreNew+0x4c>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006b64:	4631      	mov	r1, r6
 8006b66:	f000 fdac 	bl	80076c2 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 8006b6a:	4604      	mov	r4, r0
 8006b6c:	2800      	cmp	r0, #0
 8006b6e:	d0c1      	beq.n	8006af4 <osSemaphoreNew+0xc>
        if (attr != NULL) {
 8006b70:	b95d      	cbnz	r5, 8006b8a <osSemaphoreNew+0xa2>
        vQueueAddToRegistry (hSemaphore, name);
 8006b72:	4629      	mov	r1, r5
 8006b74:	4620      	mov	r0, r4
 8006b76:	f001 f985 	bl	8007e84 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 8006b7a:	e7bc      	b.n	8006af6 <osSemaphoreNew+0xe>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	4631      	mov	r1, r6
 8006b80:	f000 fd79 	bl	8007676 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 8006b84:	4604      	mov	r4, r0
 8006b86:	2800      	cmp	r0, #0
 8006b88:	d0b4      	beq.n	8006af4 <osSemaphoreNew+0xc>
          name = attr->name;
 8006b8a:	682d      	ldr	r5, [r5, #0]
 8006b8c:	e7f1      	b.n	8006b72 <osSemaphoreNew+0x8a>
 8006b8e:	bf00      	nop
 8006b90:	20001c34 	.word	0x20001c34

08006b94 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006b94:	b513      	push	{r0, r1, r4, lr}
 8006b96:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8006b98:	b918      	cbnz	r0, 8006ba2 <osSemaphoreAcquire+0xe>
    stat = osErrorParameter;
 8006b9a:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8006b9e:	b002      	add	sp, #8
 8006ba0:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ba2:	f3ef 8305 	mrs	r3, IPSR
  else if (IS_IRQ()) {
 8006ba6:	b163      	cbz	r3, 8006bc2 <osSemaphoreAcquire+0x2e>
    if (timeout != 0U) {
 8006ba8:	2c00      	cmp	r4, #0
 8006baa:	d1f6      	bne.n	8006b9a <osSemaphoreAcquire+0x6>
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006bac:	aa01      	add	r2, sp, #4
 8006bae:	4621      	mov	r1, r4
      yield = pdFALSE;
 8006bb0:	9401      	str	r4, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006bb2:	f001 f911 	bl	8007dd8 <xQueueReceiveFromISR>
 8006bb6:	2801      	cmp	r0, #1
 8006bb8:	d113      	bne.n	8006be2 <osSemaphoreAcquire+0x4e>
        portYIELD_FROM_ISR (yield);
 8006bba:	9b01      	ldr	r3, [sp, #4]
 8006bbc:	b9a3      	cbnz	r3, 8006be8 <osSemaphoreAcquire+0x54>
  stat = osOK;
 8006bbe:	2000      	movs	r0, #0
 8006bc0:	e7ed      	b.n	8006b9e <osSemaphoreAcquire+0xa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bc2:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 8006bc6:	b913      	cbnz	r3, 8006bce <osSemaphoreAcquire+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006bc8:	f3ef 8311 	mrs	r3, BASEPRI
 8006bcc:	b11b      	cbz	r3, 8006bd6 <osSemaphoreAcquire+0x42>
 8006bce:	4b0c      	ldr	r3, [pc, #48]	; (8006c00 <osSemaphoreAcquire+0x6c>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d0e8      	beq.n	8006ba8 <osSemaphoreAcquire+0x14>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006bd6:	4621      	mov	r1, r4
 8006bd8:	f001 f80e 	bl	8007bf8 <xQueueSemaphoreTake>
 8006bdc:	2801      	cmp	r0, #1
 8006bde:	d0ee      	beq.n	8006bbe <osSemaphoreAcquire+0x2a>
      if (timeout != 0U) {
 8006be0:	b95c      	cbnz	r4, 8006bfa <osSemaphoreAcquire+0x66>
        stat = osErrorResource;
 8006be2:	f06f 0002 	mvn.w	r0, #2
 8006be6:	e7da      	b.n	8006b9e <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
 8006be8:	4b06      	ldr	r3, [pc, #24]	; (8006c04 <osSemaphoreAcquire+0x70>)
 8006bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bee:	601a      	str	r2, [r3, #0]
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	f3bf 8f6f 	isb	sy
 8006bf8:	e7e1      	b.n	8006bbe <osSemaphoreAcquire+0x2a>
        stat = osErrorTimeout;
 8006bfa:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8006bfe:	e7ce      	b.n	8006b9e <osSemaphoreAcquire+0xa>
 8006c00:	20001c34 	.word	0x20001c34
 8006c04:	e000ed04 	.word	0xe000ed04

08006c08 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006c08:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8006c0a:	b360      	cbz	r0, 8006c66 <osSemaphoreRelease+0x5e>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c0c:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8006c10:	b14b      	cbz	r3, 8006c26 <osSemaphoreRelease+0x1e>
    yield = pdFALSE;
 8006c12:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006c14:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 8006c16:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006c18:	f000 feeb 	bl	80079f2 <xQueueGiveFromISR>
 8006c1c:	2801      	cmp	r0, #1
 8006c1e:	d014      	beq.n	8006c4a <osSemaphoreRelease+0x42>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 8006c20:	f06f 0002 	mvn.w	r0, #2
 8006c24:	e014      	b.n	8006c50 <osSemaphoreRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c26:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 8006c2a:	b913      	cbnz	r3, 8006c32 <osSemaphoreRelease+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c2c:	f3ef 8311 	mrs	r3, BASEPRI
 8006c30:	b11b      	cbz	r3, 8006c3a <osSemaphoreRelease+0x32>
 8006c32:	4b0e      	ldr	r3, [pc, #56]	; (8006c6c <osSemaphoreRelease+0x64>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d0eb      	beq.n	8006c12 <osSemaphoreRelease+0xa>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	4619      	mov	r1, r3
 8006c40:	f000 fd62 	bl	8007708 <xQueueGenericSend>
 8006c44:	2801      	cmp	r0, #1
 8006c46:	d002      	beq.n	8006c4e <osSemaphoreRelease+0x46>
 8006c48:	e7ea      	b.n	8006c20 <osSemaphoreRelease+0x18>
      portYIELD_FROM_ISR (yield);
 8006c4a:	9b01      	ldr	r3, [sp, #4]
 8006c4c:	b913      	cbnz	r3, 8006c54 <osSemaphoreRelease+0x4c>
  stat = osOK;
 8006c4e:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 8006c50:	b002      	add	sp, #8
 8006c52:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 8006c54:	4b06      	ldr	r3, [pc, #24]	; (8006c70 <osSemaphoreRelease+0x68>)
 8006c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c5a:	601a      	str	r2, [r3, #0]
 8006c5c:	f3bf 8f4f 	dsb	sy
 8006c60:	f3bf 8f6f 	isb	sy
 8006c64:	e7f3      	b.n	8006c4e <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
 8006c66:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8006c6a:	e7f1      	b.n	8006c50 <osSemaphoreRelease+0x48>
 8006c6c:	20001c34 	.word	0x20001c34
 8006c70:	e000ed04 	.word	0xe000ed04

08006c74 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006c74:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006c76:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c78:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006c7c:	b11b      	cbz	r3, 8006c86 <osMessageQueueNew+0x12>
  hQueue = NULL;
 8006c7e:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8006c80:	4628      	mov	r0, r5
 8006c82:	b002      	add	sp, #8
 8006c84:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c86:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006c8a:	b913      	cbnz	r3, 8006c92 <osMessageQueueNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c8c:	f3ef 8311 	mrs	r3, BASEPRI
 8006c90:	b11b      	cbz	r3, 8006c9a <osMessageQueueNew+0x26>
 8006c92:	4b1a      	ldr	r3, [pc, #104]	; (8006cfc <osMessageQueueNew+0x88>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d0f1      	beq.n	8006c7e <osMessageQueueNew+0xa>
 8006c9a:	2800      	cmp	r0, #0
 8006c9c:	d0ef      	beq.n	8006c7e <osMessageQueueNew+0xa>
 8006c9e:	2900      	cmp	r1, #0
 8006ca0:	d0ed      	beq.n	8006c7e <osMessageQueueNew+0xa>
    if (attr != NULL) {
 8006ca2:	b1ec      	cbz	r4, 8006ce0 <osMessageQueueNew+0x6c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006ca4:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8006ca8:	b193      	cbz	r3, 8006cd0 <osMessageQueueNew+0x5c>
 8006caa:	2a4f      	cmp	r2, #79	; 0x4f
 8006cac:	d9e7      	bls.n	8006c7e <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006cae:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006cb0:	2a00      	cmp	r2, #0
 8006cb2:	d0e4      	beq.n	8006c7e <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006cb4:	fb01 f500 	mul.w	r5, r1, r0
 8006cb8:	6966      	ldr	r6, [r4, #20]
 8006cba:	42ae      	cmp	r6, r5
 8006cbc:	d3df      	bcc.n	8006c7e <osMessageQueueNew+0xa>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006cbe:	2500      	movs	r5, #0
 8006cc0:	9500      	str	r5, [sp, #0]
 8006cc2:	f000 fc57 	bl	8007574 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8006cc6:	4605      	mov	r5, r0
 8006cc8:	2800      	cmp	r0, #0
 8006cca:	d0d8      	beq.n	8006c7e <osMessageQueueNew+0xa>
        name = attr->name;
 8006ccc:	6824      	ldr	r4, [r4, #0]
 8006cce:	e00f      	b.n	8006cf0 <osMessageQueueNew+0x7c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006cd0:	2a00      	cmp	r2, #0
 8006cd2:	d1d4      	bne.n	8006c7e <osMessageQueueNew+0xa>
 8006cd4:	6923      	ldr	r3, [r4, #16]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1d1      	bne.n	8006c7e <osMessageQueueNew+0xa>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006cda:	6963      	ldr	r3, [r4, #20]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d1ce      	bne.n	8006c7e <osMessageQueueNew+0xa>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f000 fc9f 	bl	8007624 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8006ce6:	4605      	mov	r5, r0
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	d0c8      	beq.n	8006c7e <osMessageQueueNew+0xa>
      if (attr != NULL) {
 8006cec:	2c00      	cmp	r4, #0
 8006cee:	d1ed      	bne.n	8006ccc <osMessageQueueNew+0x58>
      vQueueAddToRegistry (hQueue, name);
 8006cf0:	4621      	mov	r1, r4
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	f001 f8c6 	bl	8007e84 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8006cf8:	e7c2      	b.n	8006c80 <osMessageQueueNew+0xc>
 8006cfa:	bf00      	nop
 8006cfc:	20001c34 	.word	0x20001c34

08006d00 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006d00:	b513      	push	{r0, r1, r4, lr}
 8006d02:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d04:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8006d08:	b123      	cbz	r3, 8006d14 <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006d0a:	b9d8      	cbnz	r0, 8006d44 <osMessageQueuePut+0x44>
      stat = osErrorParameter;
 8006d0c:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8006d10:	b002      	add	sp, #8
 8006d12:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d14:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8006d18:	b913      	cbnz	r3, 8006d20 <osMessageQueuePut+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d1a:	f3ef 8311 	mrs	r3, BASEPRI
 8006d1e:	b11b      	cbz	r3, 8006d28 <osMessageQueuePut+0x28>
 8006d20:	4b16      	ldr	r3, [pc, #88]	; (8006d7c <osMessageQueuePut+0x7c>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d0f0      	beq.n	8006d0a <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006d28:	2800      	cmp	r0, #0
 8006d2a:	d0ef      	beq.n	8006d0c <osMessageQueuePut+0xc>
 8006d2c:	2900      	cmp	r1, #0
 8006d2e:	d0ed      	beq.n	8006d0c <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006d30:	2300      	movs	r3, #0
 8006d32:	4622      	mov	r2, r4
 8006d34:	f000 fce8 	bl	8007708 <xQueueGenericSend>
 8006d38:	2801      	cmp	r0, #1
 8006d3a:	d010      	beq.n	8006d5e <osMessageQueuePut+0x5e>
        if (timeout != 0U) {
 8006d3c:	b9d4      	cbnz	r4, 8006d74 <osMessageQueuePut+0x74>
          stat = osErrorResource;
 8006d3e:	f06f 0002 	mvn.w	r0, #2
 8006d42:	e7e5      	b.n	8006d10 <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006d44:	2900      	cmp	r1, #0
 8006d46:	d0e1      	beq.n	8006d0c <osMessageQueuePut+0xc>
 8006d48:	2c00      	cmp	r4, #0
 8006d4a:	d1df      	bne.n	8006d0c <osMessageQueuePut+0xc>
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006d4c:	4623      	mov	r3, r4
 8006d4e:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8006d50:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006d52:	f000 fde5 	bl	8007920 <xQueueGenericSendFromISR>
 8006d56:	2801      	cmp	r0, #1
 8006d58:	d1f1      	bne.n	8006d3e <osMessageQueuePut+0x3e>
        portYIELD_FROM_ISR (yield);
 8006d5a:	9b01      	ldr	r3, [sp, #4]
 8006d5c:	b90b      	cbnz	r3, 8006d62 <osMessageQueuePut+0x62>
  stat = osOK;
 8006d5e:	2000      	movs	r0, #0
 8006d60:	e7d6      	b.n	8006d10 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 8006d62:	4b07      	ldr	r3, [pc, #28]	; (8006d80 <osMessageQueuePut+0x80>)
 8006d64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d68:	601a      	str	r2, [r3, #0]
 8006d6a:	f3bf 8f4f 	dsb	sy
 8006d6e:	f3bf 8f6f 	isb	sy
 8006d72:	e7f4      	b.n	8006d5e <osMessageQueuePut+0x5e>
          stat = osErrorTimeout;
 8006d74:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8006d78:	e7ca      	b.n	8006d10 <osMessageQueuePut+0x10>
 8006d7a:	bf00      	nop
 8006d7c:	20001c34 	.word	0x20001c34
 8006d80:	e000ed04 	.word	0xe000ed04

08006d84 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006d84:	b513      	push	{r0, r1, r4, lr}
 8006d86:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d88:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8006d8c:	b123      	cbz	r3, 8006d98 <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006d8e:	b9d0      	cbnz	r0, 8006dc6 <osMessageQueueGet+0x42>
      stat = osErrorParameter;
 8006d90:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8006d94:	b002      	add	sp, #8
 8006d96:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d98:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8006d9c:	b913      	cbnz	r3, 8006da4 <osMessageQueueGet+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d9e:	f3ef 8311 	mrs	r3, BASEPRI
 8006da2:	b11b      	cbz	r3, 8006dac <osMessageQueueGet+0x28>
 8006da4:	4b15      	ldr	r3, [pc, #84]	; (8006dfc <osMessageQueueGet+0x78>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d0f0      	beq.n	8006d8e <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006dac:	2800      	cmp	r0, #0
 8006dae:	d0ef      	beq.n	8006d90 <osMessageQueueGet+0xc>
 8006db0:	2900      	cmp	r1, #0
 8006db2:	d0ed      	beq.n	8006d90 <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006db4:	4622      	mov	r2, r4
 8006db6:	f000 fe79 	bl	8007aac <xQueueReceive>
 8006dba:	2801      	cmp	r0, #1
 8006dbc:	d00f      	beq.n	8006dde <osMessageQueueGet+0x5a>
        if (timeout != 0U) {
 8006dbe:	b9cc      	cbnz	r4, 8006df4 <osMessageQueueGet+0x70>
          stat = osErrorResource;
 8006dc0:	f06f 0002 	mvn.w	r0, #2
 8006dc4:	e7e6      	b.n	8006d94 <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006dc6:	2900      	cmp	r1, #0
 8006dc8:	d0e2      	beq.n	8006d90 <osMessageQueueGet+0xc>
 8006dca:	2c00      	cmp	r4, #0
 8006dcc:	d1e0      	bne.n	8006d90 <osMessageQueueGet+0xc>
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006dce:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8006dd0:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006dd2:	f001 f801 	bl	8007dd8 <xQueueReceiveFromISR>
 8006dd6:	2801      	cmp	r0, #1
 8006dd8:	d1f2      	bne.n	8006dc0 <osMessageQueueGet+0x3c>
        portYIELD_FROM_ISR (yield);
 8006dda:	9b01      	ldr	r3, [sp, #4]
 8006ddc:	b90b      	cbnz	r3, 8006de2 <osMessageQueueGet+0x5e>
  stat = osOK;
 8006dde:	2000      	movs	r0, #0
 8006de0:	e7d8      	b.n	8006d94 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 8006de2:	4b07      	ldr	r3, [pc, #28]	; (8006e00 <osMessageQueueGet+0x7c>)
 8006de4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006de8:	601a      	str	r2, [r3, #0]
 8006dea:	f3bf 8f4f 	dsb	sy
 8006dee:	f3bf 8f6f 	isb	sy
 8006df2:	e7f4      	b.n	8006dde <osMessageQueueGet+0x5a>
          stat = osErrorTimeout;
 8006df4:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8006df8:	e7cc      	b.n	8006d94 <osMessageQueueGet+0x10>
 8006dfa:	bf00      	nop
 8006dfc:	20001c34 	.word	0x20001c34
 8006e00:	e000ed04 	.word	0xe000ed04

08006e04 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006e04:	4b03      	ldr	r3, [pc, #12]	; (8006e14 <vApplicationGetIdleTaskMemory+0x10>)
 8006e06:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006e08:	4b03      	ldr	r3, [pc, #12]	; (8006e18 <vApplicationGetIdleTaskMemory+0x14>)
 8006e0a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006e0c:	2380      	movs	r3, #128	; 0x80
 8006e0e:	6013      	str	r3, [r2, #0]
}
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	20001bd4 	.word	0x20001bd4
 8006e18:	200019d4 	.word	0x200019d4

08006e1c <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006e1c:	4b03      	ldr	r3, [pc, #12]	; (8006e2c <vApplicationGetTimerTaskMemory+0x10>)
 8006e1e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006e20:	4b03      	ldr	r3, [pc, #12]	; (8006e30 <vApplicationGetTimerTaskMemory+0x14>)
 8006e22:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006e24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e28:	6013      	str	r3, [r2, #0]
}
 8006e2a:	4770      	bx	lr
 8006e2c:	20002038 	.word	0x20002038
 8006e30:	20001c38 	.word	0x20001c38

08006e34 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e34:	4b0f      	ldr	r3, [pc, #60]	; (8006e74 <prvInsertBlockIntoFreeList+0x40>)
{
 8006e36:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e38:	461a      	mov	r2, r3
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4283      	cmp	r3, r0
 8006e3e:	d3fb      	bcc.n	8006e38 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e40:	6854      	ldr	r4, [r2, #4]
 8006e42:	1911      	adds	r1, r2, r4
 8006e44:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e46:	bf01      	itttt	eq
 8006e48:	6841      	ldreq	r1, [r0, #4]
 8006e4a:	4610      	moveq	r0, r2
 8006e4c:	1909      	addeq	r1, r1, r4
 8006e4e:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e50:	6844      	ldr	r4, [r0, #4]
 8006e52:	1901      	adds	r1, r0, r4
 8006e54:	428b      	cmp	r3, r1
 8006e56:	d107      	bne.n	8006e68 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e58:	4907      	ldr	r1, [pc, #28]	; (8006e78 <prvInsertBlockIntoFreeList+0x44>)
 8006e5a:	6809      	ldr	r1, [r1, #0]
 8006e5c:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e5e:	bf1f      	itttt	ne
 8006e60:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e62:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e64:	1909      	addne	r1, r1, r4
 8006e66:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e68:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e6a:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e6c:	bf18      	it	ne
 8006e6e:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e70:	bd10      	pop	{r4, pc}
 8006e72:	bf00      	nop
 8006e74:	200145a0 	.word	0x200145a0
 8006e78:	20002098 	.word	0x20002098

08006e7c <pvPortMalloc>:
{
 8006e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e80:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8006e82:	f001 fa3b 	bl	80082fc <vTaskSuspendAll>
		if( pxEnd == NULL )
 8006e86:	4b3d      	ldr	r3, [pc, #244]	; (8006f7c <pvPortMalloc+0x100>)
 8006e88:	483d      	ldr	r0, [pc, #244]	; (8006f80 <pvPortMalloc+0x104>)
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	469c      	mov	ip, r3
 8006e8e:	b9d2      	cbnz	r2, 8006ec6 <pvPortMalloc+0x4a>
	uxAddress = ( size_t ) ucHeap;
 8006e90:	4a3c      	ldr	r2, [pc, #240]	; (8006f84 <pvPortMalloc+0x108>)
	xStart.xBlockSize = ( size_t ) 0;
 8006e92:	2100      	movs	r1, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e94:	4b3c      	ldr	r3, [pc, #240]	; (8006f88 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e96:	0755      	lsls	r5, r2, #29
	xStart.xBlockSize = ( size_t ) 0;
 8006e98:	6059      	str	r1, [r3, #4]
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e9a:	bf1c      	itt	ne
 8006e9c:	3207      	addne	r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e9e:	f022 0207 	bicne.w	r2, r2, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006ea2:	601a      	str	r2, [r3, #0]
	uxAddress -= xHeapStructSize;
 8006ea4:	4b39      	ldr	r3, [pc, #228]	; (8006f8c <pvPortMalloc+0x110>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ea6:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 8006eaa:	e9c3 1100 	strd	r1, r1, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006eae:	1a99      	subs	r1, r3, r2
	pxEnd = ( void * ) uxAddress;
 8006eb0:	f8cc 3000 	str.w	r3, [ip]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006eb4:	e9c2 3100 	strd	r3, r1, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006eb8:	4b35      	ldr	r3, [pc, #212]	; (8006f90 <pvPortMalloc+0x114>)
 8006eba:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ebc:	4b35      	ldr	r3, [pc, #212]	; (8006f94 <pvPortMalloc+0x118>)
 8006ebe:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ec0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006ec4:	6003      	str	r3, [r0, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ec6:	6807      	ldr	r7, [r0, #0]
 8006ec8:	4227      	tst	r7, r4
 8006eca:	d152      	bne.n	8006f72 <pvPortMalloc+0xf6>
			if( xWantedSize > 0 )
 8006ecc:	2c00      	cmp	r4, #0
 8006ece:	d041      	beq.n	8006f54 <pvPortMalloc+0xd8>
				xWantedSize += xHeapStructSize;
 8006ed0:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ed4:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006ed6:	bf1c      	itt	ne
 8006ed8:	f023 0307 	bicne.w	r3, r3, #7
 8006edc:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d047      	beq.n	8006f72 <pvPortMalloc+0xf6>
 8006ee2:	4a2c      	ldr	r2, [pc, #176]	; (8006f94 <pvPortMalloc+0x118>)
 8006ee4:	6816      	ldr	r6, [r2, #0]
 8006ee6:	4690      	mov	r8, r2
 8006ee8:	429e      	cmp	r6, r3
 8006eea:	d342      	bcc.n	8006f72 <pvPortMalloc+0xf6>
				pxBlock = xStart.pxNextFreeBlock;
 8006eec:	4a26      	ldr	r2, [pc, #152]	; (8006f88 <pvPortMalloc+0x10c>)
 8006eee:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ef0:	6869      	ldr	r1, [r5, #4]
 8006ef2:	4299      	cmp	r1, r3
 8006ef4:	d201      	bcs.n	8006efa <pvPortMalloc+0x7e>
 8006ef6:	6828      	ldr	r0, [r5, #0]
 8006ef8:	b9b8      	cbnz	r0, 8006f2a <pvPortMalloc+0xae>
				if( pxBlock != pxEnd )
 8006efa:	f8dc 0000 	ldr.w	r0, [ip]
 8006efe:	42a8      	cmp	r0, r5
 8006f00:	d037      	beq.n	8006f72 <pvPortMalloc+0xf6>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f02:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f04:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f06:	6814      	ldr	r4, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f08:	2910      	cmp	r1, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f0a:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f0c:	d914      	bls.n	8006f38 <pvPortMalloc+0xbc>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f0e:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f10:	0742      	lsls	r2, r0, #29
 8006f12:	d00d      	beq.n	8006f30 <pvPortMalloc+0xb4>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f18:	b672      	cpsid	i
 8006f1a:	f383 8811 	msr	BASEPRI, r3
 8006f1e:	f3bf 8f6f 	isb	sy
 8006f22:	f3bf 8f4f 	dsb	sy
 8006f26:	b662      	cpsie	i
 8006f28:	e7fe      	b.n	8006f28 <pvPortMalloc+0xac>
 8006f2a:	462a      	mov	r2, r5
 8006f2c:	4605      	mov	r5, r0
 8006f2e:	e7df      	b.n	8006ef0 <pvPortMalloc+0x74>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f30:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006f32:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f34:	f7ff ff7e 	bl	8006e34 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f38:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f3a:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f3c:	4914      	ldr	r1, [pc, #80]	; (8006f90 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f3e:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f40:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f42:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8006f44:	2300      	movs	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f46:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f4a:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f4c:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f4e:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f50:	bf38      	it	cc
 8006f52:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
 8006f54:	f001 fa78 	bl	8008448 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f58:	0763      	lsls	r3, r4, #29
 8006f5a:	d00c      	beq.n	8006f76 <pvPortMalloc+0xfa>
 8006f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f60:	b672      	cpsid	i
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	b662      	cpsie	i
 8006f70:	e7fe      	b.n	8006f70 <pvPortMalloc+0xf4>
void *pvReturn = NULL;
 8006f72:	2400      	movs	r4, #0
 8006f74:	e7ee      	b.n	8006f54 <pvPortMalloc+0xd8>
}
 8006f76:	4620      	mov	r0, r4
 8006f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f7c:	20002098 	.word	0x20002098
 8006f80:	20014594 	.word	0x20014594
 8006f84:	2000209c 	.word	0x2000209c
 8006f88:	200145a0 	.word	0x200145a0
 8006f8c:	2001458c 	.word	0x2001458c
 8006f90:	2001459c 	.word	0x2001459c
 8006f94:	20014598 	.word	0x20014598

08006f98 <vPortFree>:
{
 8006f98:	b510      	push	{r4, lr}
	if( pv != NULL )
 8006f9a:	4604      	mov	r4, r0
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	d032      	beq.n	8007006 <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006fa0:	4a19      	ldr	r2, [pc, #100]	; (8007008 <vPortFree+0x70>)
 8006fa2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006fa6:	6812      	ldr	r2, [r2, #0]
 8006fa8:	4213      	tst	r3, r2
 8006faa:	d10a      	bne.n	8006fc2 <vPortFree+0x2a>
 8006fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb0:	b672      	cpsid	i
 8006fb2:	f383 8811 	msr	BASEPRI, r3
 8006fb6:	f3bf 8f6f 	isb	sy
 8006fba:	f3bf 8f4f 	dsb	sy
 8006fbe:	b662      	cpsie	i
 8006fc0:	e7fe      	b.n	8006fc0 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006fc2:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8006fc6:	b151      	cbz	r1, 8006fde <vPortFree+0x46>
 8006fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fcc:	b672      	cpsid	i
 8006fce:	f383 8811 	msr	BASEPRI, r3
 8006fd2:	f3bf 8f6f 	isb	sy
 8006fd6:	f3bf 8f4f 	dsb	sy
 8006fda:	b662      	cpsie	i
 8006fdc:	e7fe      	b.n	8006fdc <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006fde:	ea23 0302 	bic.w	r3, r3, r2
 8006fe2:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8006fe6:	f001 f989 	bl	80082fc <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006fea:	4a08      	ldr	r2, [pc, #32]	; (800700c <vPortFree+0x74>)
 8006fec:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006ff0:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006ff4:	6811      	ldr	r1, [r2, #0]
 8006ff6:	440b      	add	r3, r1
 8006ff8:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006ffa:	f7ff ff1b 	bl	8006e34 <prvInsertBlockIntoFreeList>
}
 8006ffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8007002:	f001 ba21 	b.w	8008448 <xTaskResumeAll>
}
 8007006:	bd10      	pop	{r4, pc}
 8007008:	20014594 	.word	0x20014594
 800700c:	20014598 	.word	0x20014598

08007010 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007010:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007014:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007018:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800701a:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800701c:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007020:	2300      	movs	r3, #0
 8007022:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007024:	4770      	bx	lr

08007026 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007026:	2300      	movs	r3, #0
 8007028:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800702a:	4770      	bx	lr

0800702c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800702c:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800702e:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8007030:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007032:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007034:	689a      	ldr	r2, [r3, #8]
 8007036:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007038:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800703a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800703c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800703e:	3301      	adds	r3, #1
 8007040:	6003      	str	r3, [r0, #0]
}
 8007042:	4770      	bx	lr

08007044 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007044:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007046:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007048:	1c63      	adds	r3, r4, #1
 800704a:	d10a      	bne.n	8007062 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800704c:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800704e:	685a      	ldr	r2, [r3, #4]
 8007050:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007052:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007054:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8007056:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8007058:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800705a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800705c:	3301      	adds	r3, #1
 800705e:	6003      	str	r3, [r0, #0]
}
 8007060:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007062:	f100 0208 	add.w	r2, r0, #8
 8007066:	4613      	mov	r3, r2
 8007068:	6852      	ldr	r2, [r2, #4]
 800706a:	6815      	ldr	r5, [r2, #0]
 800706c:	42a5      	cmp	r5, r4
 800706e:	d9fa      	bls.n	8007066 <vListInsert+0x22>
 8007070:	e7ed      	b.n	800704e <vListInsert+0xa>

08007072 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007072:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007074:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8007078:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800707a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800707c:	6859      	ldr	r1, [r3, #4]
 800707e:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007080:	bf08      	it	eq
 8007082:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007084:	2200      	movs	r2, #0
 8007086:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	3a01      	subs	r2, #1
 800708c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800708e:	6818      	ldr	r0, [r3, #0]
}
 8007090:	4770      	bx	lr
	...

08007094 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007094:	4808      	ldr	r0, [pc, #32]	; (80070b8 <prvPortStartFirstTask+0x24>)
 8007096:	6800      	ldr	r0, [r0, #0]
 8007098:	6800      	ldr	r0, [r0, #0]
 800709a:	f380 8808 	msr	MSP, r0
 800709e:	f04f 0000 	mov.w	r0, #0
 80070a2:	f380 8814 	msr	CONTROL, r0
 80070a6:	b662      	cpsie	i
 80070a8:	b661      	cpsie	f
 80070aa:	f3bf 8f4f 	dsb	sy
 80070ae:	f3bf 8f6f 	isb	sy
 80070b2:	df00      	svc	0
 80070b4:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80070b6:	0000      	.short	0x0000
 80070b8:	e000ed08 	.word	0xe000ed08

080070bc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80070bc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80070cc <vPortEnableVFP+0x10>
 80070c0:	6801      	ldr	r1, [r0, #0]
 80070c2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80070c6:	6001      	str	r1, [r0, #0]
 80070c8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80070ca:	0000      	.short	0x0000
 80070cc:	e000ed88 	.word	0xe000ed88

080070d0 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 80070d0:	2300      	movs	r3, #0
{
 80070d2:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80070d4:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80070d6:	4b0f      	ldr	r3, [pc, #60]	; (8007114 <prvTaskExitError+0x44>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	3301      	adds	r3, #1
 80070dc:	d00a      	beq.n	80070f4 <prvTaskExitError+0x24>
 80070de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e2:	b672      	cpsid	i
 80070e4:	f383 8811 	msr	BASEPRI, r3
 80070e8:	f3bf 8f6f 	isb	sy
 80070ec:	f3bf 8f4f 	dsb	sy
 80070f0:	b662      	cpsie	i
 80070f2:	e7fe      	b.n	80070f2 <prvTaskExitError+0x22>
 80070f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f8:	b672      	cpsid	i
 80070fa:	f383 8811 	msr	BASEPRI, r3
 80070fe:	f3bf 8f6f 	isb	sy
 8007102:	f3bf 8f4f 	dsb	sy
 8007106:	b662      	cpsie	i
	while( ulDummy == 0 )
 8007108:	9b01      	ldr	r3, [sp, #4]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d0fc      	beq.n	8007108 <prvTaskExitError+0x38>
}
 800710e:	b002      	add	sp, #8
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	20000040 	.word	0x20000040

08007118 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007118:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800711c:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007120:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8007124:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007126:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007128:	4b03      	ldr	r3, [pc, #12]	; (8007138 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800712a:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800712c:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800712e:	f06f 0302 	mvn.w	r3, #2
 8007132:	6203      	str	r3, [r0, #32]
}
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	080070d1 	.word	0x080070d1
 800713c:	00000000 	.word	0x00000000

08007140 <SVC_Handler>:
	__asm volatile (
 8007140:	4b07      	ldr	r3, [pc, #28]	; (8007160 <pxCurrentTCBConst2>)
 8007142:	6819      	ldr	r1, [r3, #0]
 8007144:	6808      	ldr	r0, [r1, #0]
 8007146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800714a:	f380 8809 	msr	PSP, r0
 800714e:	f3bf 8f6f 	isb	sy
 8007152:	f04f 0000 	mov.w	r0, #0
 8007156:	f380 8811 	msr	BASEPRI, r0
 800715a:	4770      	bx	lr
 800715c:	f3af 8000 	nop.w

08007160 <pxCurrentTCBConst2>:
 8007160:	200145b0 	.word	0x200145b0

08007164 <vPortEnterCritical>:
 8007164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007168:	b672      	cpsid	i
 800716a:	f383 8811 	msr	BASEPRI, r3
 800716e:	f3bf 8f6f 	isb	sy
 8007172:	f3bf 8f4f 	dsb	sy
 8007176:	b662      	cpsie	i
	uxCriticalNesting++;
 8007178:	4a0b      	ldr	r2, [pc, #44]	; (80071a8 <vPortEnterCritical+0x44>)
 800717a:	6813      	ldr	r3, [r2, #0]
 800717c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800717e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8007180:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8007182:	d10f      	bne.n	80071a4 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007184:	4b09      	ldr	r3, [pc, #36]	; (80071ac <vPortEnterCritical+0x48>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f013 0fff 	tst.w	r3, #255	; 0xff
 800718c:	d00a      	beq.n	80071a4 <vPortEnterCritical+0x40>
 800718e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007192:	b672      	cpsid	i
 8007194:	f383 8811 	msr	BASEPRI, r3
 8007198:	f3bf 8f6f 	isb	sy
 800719c:	f3bf 8f4f 	dsb	sy
 80071a0:	b662      	cpsie	i
 80071a2:	e7fe      	b.n	80071a2 <vPortEnterCritical+0x3e>
}
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	20000040 	.word	0x20000040
 80071ac:	e000ed04 	.word	0xe000ed04

080071b0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80071b0:	4a09      	ldr	r2, [pc, #36]	; (80071d8 <vPortExitCritical+0x28>)
 80071b2:	6813      	ldr	r3, [r2, #0]
 80071b4:	b953      	cbnz	r3, 80071cc <vPortExitCritical+0x1c>
 80071b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ba:	b672      	cpsid	i
 80071bc:	f383 8811 	msr	BASEPRI, r3
 80071c0:	f3bf 8f6f 	isb	sy
 80071c4:	f3bf 8f4f 	dsb	sy
 80071c8:	b662      	cpsie	i
 80071ca:	e7fe      	b.n	80071ca <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 80071cc:	3b01      	subs	r3, #1
 80071ce:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80071d0:	b90b      	cbnz	r3, 80071d6 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80071d2:	f383 8811 	msr	BASEPRI, r3
}
 80071d6:	4770      	bx	lr
 80071d8:	20000040 	.word	0x20000040
 80071dc:	00000000 	.word	0x00000000

080071e0 <PendSV_Handler>:
	__asm volatile
 80071e0:	f3ef 8009 	mrs	r0, PSP
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	4b15      	ldr	r3, [pc, #84]	; (8007240 <pxCurrentTCBConst>)
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	f01e 0f10 	tst.w	lr, #16
 80071f0:	bf08      	it	eq
 80071f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80071f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071fa:	6010      	str	r0, [r2, #0]
 80071fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007200:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007204:	b672      	cpsid	i
 8007206:	f380 8811 	msr	BASEPRI, r0
 800720a:	f3bf 8f4f 	dsb	sy
 800720e:	f3bf 8f6f 	isb	sy
 8007212:	b662      	cpsie	i
 8007214:	f001 fa1e 	bl	8008654 <vTaskSwitchContext>
 8007218:	f04f 0000 	mov.w	r0, #0
 800721c:	f380 8811 	msr	BASEPRI, r0
 8007220:	bc09      	pop	{r0, r3}
 8007222:	6819      	ldr	r1, [r3, #0]
 8007224:	6808      	ldr	r0, [r1, #0]
 8007226:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800722a:	f01e 0f10 	tst.w	lr, #16
 800722e:	bf08      	it	eq
 8007230:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007234:	f380 8809 	msr	PSP, r0
 8007238:	f3bf 8f6f 	isb	sy
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop

08007240 <pxCurrentTCBConst>:
 8007240:	200145b0 	.word	0x200145b0

08007244 <SysTick_Handler>:
{
 8007244:	b508      	push	{r3, lr}
	__asm volatile
 8007246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800724a:	b672      	cpsid	i
 800724c:	f383 8811 	msr	BASEPRI, r3
 8007250:	f3bf 8f6f 	isb	sy
 8007254:	f3bf 8f4f 	dsb	sy
 8007258:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800725a:	f001 f85d 	bl	8008318 <xTaskIncrementTick>
 800725e:	b118      	cbz	r0, 8007268 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007260:	4b03      	ldr	r3, [pc, #12]	; (8007270 <SysTick_Handler+0x2c>)
 8007262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007266:	601a      	str	r2, [r3, #0]
	__asm volatile
 8007268:	2300      	movs	r3, #0
 800726a:	f383 8811 	msr	BASEPRI, r3
}
 800726e:	bd08      	pop	{r3, pc}
 8007270:	e000ed04 	.word	0xe000ed04

08007274 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007274:	2300      	movs	r3, #0
 8007276:	4a08      	ldr	r2, [pc, #32]	; (8007298 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007278:	4908      	ldr	r1, [pc, #32]	; (800729c <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800727a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800727c:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800727e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007282:	4b07      	ldr	r3, [pc, #28]	; (80072a0 <vPortSetupTimerInterrupt+0x2c>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	fbb3 f3f1 	udiv	r3, r3, r1
 800728a:	4906      	ldr	r1, [pc, #24]	; (80072a4 <vPortSetupTimerInterrupt+0x30>)
 800728c:	3b01      	subs	r3, #1
 800728e:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007290:	2307      	movs	r3, #7
 8007292:	6013      	str	r3, [r2, #0]
}
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop
 8007298:	e000e010 	.word	0xe000e010
 800729c:	e000e018 	.word	0xe000e018
 80072a0:	2000000c 	.word	0x2000000c
 80072a4:	e000e014 	.word	0xe000e014

080072a8 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80072a8:	4b2b      	ldr	r3, [pc, #172]	; (8007358 <xPortStartScheduler+0xb0>)
{
 80072aa:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80072ac:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072ae:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80072b0:	b2d2      	uxtb	r2, r2
 80072b2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80072b4:	22ff      	movs	r2, #255	; 0xff
 80072b6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80072b8:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80072ba:	4a28      	ldr	r2, [pc, #160]	; (800735c <xPortStartScheduler+0xb4>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80072c2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80072c6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80072ca:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80072cc:	2307      	movs	r3, #7
 80072ce:	4a24      	ldr	r2, [pc, #144]	; (8007360 <xPortStartScheduler+0xb8>)
 80072d0:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072d2:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80072d6:	1e5c      	subs	r4, r3, #1
 80072d8:	0600      	lsls	r0, r0, #24
 80072da:	d40e      	bmi.n	80072fa <xPortStartScheduler+0x52>
 80072dc:	b111      	cbz	r1, 80072e4 <xPortStartScheduler+0x3c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80072de:	2b03      	cmp	r3, #3
 80072e0:	6013      	str	r3, [r2, #0]
 80072e2:	d013      	beq.n	800730c <xPortStartScheduler+0x64>
	__asm volatile
 80072e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e8:	b672      	cpsid	i
 80072ea:	f383 8811 	msr	BASEPRI, r3
 80072ee:	f3bf 8f6f 	isb	sy
 80072f2:	f3bf 8f4f 	dsb	sy
 80072f6:	b662      	cpsie	i
 80072f8:	e7fe      	b.n	80072f8 <xPortStartScheduler+0x50>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80072fa:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80072fe:	2101      	movs	r1, #1
 8007300:	005b      	lsls	r3, r3, #1
 8007302:	b2db      	uxtb	r3, r3
 8007304:	f88d 3003 	strb.w	r3, [sp, #3]
 8007308:	4623      	mov	r3, r4
 800730a:	e7e2      	b.n	80072d2 <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800730c:	f44f 7340 	mov.w	r3, #768	; 0x300
	uxCriticalNesting = 0;
 8007310:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007312:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007314:	9b01      	ldr	r3, [sp, #4]
 8007316:	4a10      	ldr	r2, [pc, #64]	; (8007358 <xPortStartScheduler+0xb0>)
 8007318:	b2db      	uxtb	r3, r3
 800731a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800731c:	4b11      	ldr	r3, [pc, #68]	; (8007364 <xPortStartScheduler+0xbc>)
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8007324:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800732c:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800732e:	f7ff ffa1 	bl	8007274 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8007332:	4b0d      	ldr	r3, [pc, #52]	; (8007368 <xPortStartScheduler+0xc0>)
 8007334:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8007336:	f7ff fec1 	bl	80070bc <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800733a:	4a0c      	ldr	r2, [pc, #48]	; (800736c <xPortStartScheduler+0xc4>)
 800733c:	6813      	ldr	r3, [r2, #0]
 800733e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007342:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8007344:	f7ff fea6 	bl	8007094 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8007348:	f001 f984 	bl	8008654 <vTaskSwitchContext>
	prvTaskExitError();
 800734c:	f7ff fec0 	bl	80070d0 <prvTaskExitError>
}
 8007350:	4620      	mov	r0, r4
 8007352:	b002      	add	sp, #8
 8007354:	bd10      	pop	{r4, pc}
 8007356:	bf00      	nop
 8007358:	e000e400 	.word	0xe000e400
 800735c:	200145a8 	.word	0x200145a8
 8007360:	200145ac 	.word	0x200145ac
 8007364:	e000ed20 	.word	0xe000ed20
 8007368:	20000040 	.word	0x20000040
 800736c:	e000ef34 	.word	0xe000ef34

08007370 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007370:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007374:	2b0f      	cmp	r3, #15
 8007376:	d910      	bls.n	800739a <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007378:	4a12      	ldr	r2, [pc, #72]	; (80073c4 <vPortValidateInterruptPriority+0x54>)
 800737a:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800737c:	4a12      	ldr	r2, [pc, #72]	; (80073c8 <vPortValidateInterruptPriority+0x58>)
 800737e:	7812      	ldrb	r2, [r2, #0]
 8007380:	429a      	cmp	r2, r3
 8007382:	d90a      	bls.n	800739a <vPortValidateInterruptPriority+0x2a>
 8007384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007388:	b672      	cpsid	i
 800738a:	f383 8811 	msr	BASEPRI, r3
 800738e:	f3bf 8f6f 	isb	sy
 8007392:	f3bf 8f4f 	dsb	sy
 8007396:	b662      	cpsie	i
 8007398:	e7fe      	b.n	8007398 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800739a:	4b0c      	ldr	r3, [pc, #48]	; (80073cc <vPortValidateInterruptPriority+0x5c>)
 800739c:	4a0c      	ldr	r2, [pc, #48]	; (80073d0 <vPortValidateInterruptPriority+0x60>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	6812      	ldr	r2, [r2, #0]
 80073a2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d90a      	bls.n	80073c0 <vPortValidateInterruptPriority+0x50>
 80073aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ae:	b672      	cpsid	i
 80073b0:	f383 8811 	msr	BASEPRI, r3
 80073b4:	f3bf 8f6f 	isb	sy
 80073b8:	f3bf 8f4f 	dsb	sy
 80073bc:	b662      	cpsie	i
 80073be:	e7fe      	b.n	80073be <vPortValidateInterruptPriority+0x4e>
	}
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	e000e3f0 	.word	0xe000e3f0
 80073c8:	200145a8 	.word	0x200145a8
 80073cc:	e000ed0c 	.word	0xe000ed0c
 80073d0:	200145ac 	.word	0x200145ac

080073d4 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80073d4:	b510      	push	{r4, lr}
 80073d6:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073d8:	f7ff fec4 	bl	8007164 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80073dc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80073de:	f7ff fee7 	bl	80071b0 <vPortExitCritical>

	return xReturn;
}
 80073e2:	fab4 f084 	clz	r0, r4
 80073e6:	0940      	lsrs	r0, r0, #5
 80073e8:	bd10      	pop	{r4, pc}

080073ea <prvCopyDataToQueue>:
{
 80073ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ec:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80073ee:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80073f0:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073f2:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80073f4:	b952      	cbnz	r2, 800740c <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073f6:	6807      	ldr	r7, [r0, #0]
 80073f8:	bb47      	cbnz	r7, 800744c <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80073fa:	6880      	ldr	r0, [r0, #8]
 80073fc:	f001 fa9e 	bl	800893c <xTaskPriorityDisinherit>
 8007400:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007402:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007404:	3601      	adds	r6, #1
}
 8007406:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007408:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800740a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800740c:	b965      	cbnz	r5, 8007428 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800740e:	6840      	ldr	r0, [r0, #4]
 8007410:	f020 f87a 	bl	8027508 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007414:	6863      	ldr	r3, [r4, #4]
 8007416:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007418:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800741a:	68a2      	ldr	r2, [r4, #8]
 800741c:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800741e:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007420:	d3f0      	bcc.n	8007404 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007422:	6823      	ldr	r3, [r4, #0]
 8007424:	6063      	str	r3, [r4, #4]
 8007426:	e7ed      	b.n	8007404 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007428:	68c0      	ldr	r0, [r0, #12]
 800742a:	f020 f86d 	bl	8027508 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800742e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007430:	68e3      	ldr	r3, [r4, #12]
 8007432:	4251      	negs	r1, r2
 8007434:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007436:	6822      	ldr	r2, [r4, #0]
 8007438:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800743a:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800743c:	bf3e      	ittt	cc
 800743e:	68a3      	ldrcc	r3, [r4, #8]
 8007440:	185b      	addcc	r3, r3, r1
 8007442:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8007444:	2d02      	cmp	r5, #2
 8007446:	d101      	bne.n	800744c <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007448:	b116      	cbz	r6, 8007450 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 800744a:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800744c:	2500      	movs	r5, #0
 800744e:	e7d9      	b.n	8007404 <prvCopyDataToQueue+0x1a>
 8007450:	4635      	mov	r5, r6
 8007452:	e7d7      	b.n	8007404 <prvCopyDataToQueue+0x1a>

08007454 <prvCopyDataFromQueue>:
{
 8007454:	4603      	mov	r3, r0
 8007456:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007458:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800745a:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800745c:	b162      	cbz	r2, 8007478 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800745e:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007460:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007462:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007464:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007466:	60dc      	str	r4, [r3, #12]
}
 8007468:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800746c:	bf24      	itt	cs
 800746e:	6819      	ldrcs	r1, [r3, #0]
 8007470:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007472:	68d9      	ldr	r1, [r3, #12]
 8007474:	f020 b848 	b.w	8027508 <memcpy>
}
 8007478:	f85d 4b04 	ldr.w	r4, [sp], #4
 800747c:	4770      	bx	lr

0800747e <prvUnlockQueue>:
{
 800747e:	b570      	push	{r4, r5, r6, lr}
 8007480:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007482:	f7ff fe6f 	bl	8007164 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8007486:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800748a:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800748e:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007490:	2d00      	cmp	r5, #0
 8007492:	dc14      	bgt.n	80074be <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8007494:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007496:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800749a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800749e:	f7ff fe87 	bl	80071b0 <vPortExitCritical>
	taskENTER_CRITICAL();
 80074a2:	f7ff fe5f 	bl	8007164 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80074a6:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80074aa:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80074ac:	2d00      	cmp	r5, #0
 80074ae:	dc12      	bgt.n	80074d6 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 80074b0:	23ff      	movs	r3, #255	; 0xff
 80074b2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 80074b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80074ba:	f7ff be79 	b.w	80071b0 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d0e7      	beq.n	8007494 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074c4:	4630      	mov	r0, r6
 80074c6:	f001 f949 	bl	800875c <xTaskRemoveFromEventList>
 80074ca:	b108      	cbz	r0, 80074d0 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80074cc:	f001 f9d8 	bl	8008880 <vTaskMissedYield>
			--cTxLock;
 80074d0:	3d01      	subs	r5, #1
 80074d2:	b26d      	sxtb	r5, r5
 80074d4:	e7dc      	b.n	8007490 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074d6:	6923      	ldr	r3, [r4, #16]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d0e9      	beq.n	80074b0 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074dc:	4630      	mov	r0, r6
 80074de:	f001 f93d 	bl	800875c <xTaskRemoveFromEventList>
 80074e2:	b108      	cbz	r0, 80074e8 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80074e4:	f001 f9cc 	bl	8008880 <vTaskMissedYield>
				--cRxLock;
 80074e8:	3d01      	subs	r5, #1
 80074ea:	b26d      	sxtb	r5, r5
 80074ec:	e7de      	b.n	80074ac <prvUnlockQueue+0x2e>
	...

080074f0 <xQueueGenericReset>:
{
 80074f0:	b538      	push	{r3, r4, r5, lr}
 80074f2:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80074f4:	4604      	mov	r4, r0
 80074f6:	b950      	cbnz	r0, 800750e <xQueueGenericReset+0x1e>
 80074f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fc:	b672      	cpsid	i
 80074fe:	f383 8811 	msr	BASEPRI, r3
 8007502:	f3bf 8f6f 	isb	sy
 8007506:	f3bf 8f4f 	dsb	sy
 800750a:	b662      	cpsie	i
 800750c:	e7fe      	b.n	800750c <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 800750e:	f7ff fe29 	bl	8007164 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007512:	6822      	ldr	r2, [r4, #0]
 8007514:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007518:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800751a:	434b      	muls	r3, r1
 800751c:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800751e:	1a5b      	subs	r3, r3, r1
 8007520:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007522:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007524:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007526:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007528:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800752a:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800752c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007530:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8007534:	b995      	cbnz	r5, 800755c <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007536:	6923      	ldr	r3, [r4, #16]
 8007538:	b163      	cbz	r3, 8007554 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800753a:	f104 0010 	add.w	r0, r4, #16
 800753e:	f001 f90d 	bl	800875c <xTaskRemoveFromEventList>
 8007542:	b138      	cbz	r0, 8007554 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8007544:	4b0a      	ldr	r3, [pc, #40]	; (8007570 <xQueueGenericReset+0x80>)
 8007546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800754a:	601a      	str	r2, [r3, #0]
 800754c:	f3bf 8f4f 	dsb	sy
 8007550:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8007554:	f7ff fe2c 	bl	80071b0 <vPortExitCritical>
}
 8007558:	2001      	movs	r0, #1
 800755a:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800755c:	f104 0010 	add.w	r0, r4, #16
 8007560:	f7ff fd56 	bl	8007010 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007564:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007568:	f7ff fd52 	bl	8007010 <vListInitialise>
 800756c:	e7f2      	b.n	8007554 <xQueueGenericReset+0x64>
 800756e:	bf00      	nop
 8007570:	e000ed04 	.word	0xe000ed04

08007574 <xQueueGenericCreateStatic>:
	{
 8007574:	b513      	push	{r0, r1, r4, lr}
 8007576:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007578:	b950      	cbnz	r0, 8007590 <xQueueGenericCreateStatic+0x1c>
 800757a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757e:	b672      	cpsid	i
 8007580:	f383 8811 	msr	BASEPRI, r3
 8007584:	f3bf 8f6f 	isb	sy
 8007588:	f3bf 8f4f 	dsb	sy
 800758c:	b662      	cpsie	i
 800758e:	e7fe      	b.n	800758e <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 8007590:	b953      	cbnz	r3, 80075a8 <xQueueGenericCreateStatic+0x34>
 8007592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007596:	b672      	cpsid	i
 8007598:	f383 8811 	msr	BASEPRI, r3
 800759c:	f3bf 8f6f 	isb	sy
 80075a0:	f3bf 8f4f 	dsb	sy
 80075a4:	b662      	cpsie	i
 80075a6:	e7fe      	b.n	80075a6 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80075a8:	b15a      	cbz	r2, 80075c2 <xQueueGenericCreateStatic+0x4e>
 80075aa:	b9b1      	cbnz	r1, 80075da <xQueueGenericCreateStatic+0x66>
 80075ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b0:	b672      	cpsid	i
 80075b2:	f383 8811 	msr	BASEPRI, r3
 80075b6:	f3bf 8f6f 	isb	sy
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	b662      	cpsie	i
 80075c0:	e7fe      	b.n	80075c0 <xQueueGenericCreateStatic+0x4c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80075c2:	b151      	cbz	r1, 80075da <xQueueGenericCreateStatic+0x66>
 80075c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c8:	b672      	cpsid	i
 80075ca:	f383 8811 	msr	BASEPRI, r3
 80075ce:	f3bf 8f6f 	isb	sy
 80075d2:	f3bf 8f4f 	dsb	sy
 80075d6:	b662      	cpsie	i
 80075d8:	e7fe      	b.n	80075d8 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80075da:	2350      	movs	r3, #80	; 0x50
 80075dc:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80075de:	9b01      	ldr	r3, [sp, #4]
 80075e0:	2b50      	cmp	r3, #80	; 0x50
 80075e2:	d00a      	beq.n	80075fa <xQueueGenericCreateStatic+0x86>
 80075e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e8:	b672      	cpsid	i
 80075ea:	f383 8811 	msr	BASEPRI, r3
 80075ee:	f3bf 8f6f 	isb	sy
 80075f2:	f3bf 8f4f 	dsb	sy
 80075f6:	b662      	cpsie	i
 80075f8:	e7fe      	b.n	80075f8 <xQueueGenericCreateStatic+0x84>
	if( uxItemSize == ( UBaseType_t ) 0 )
 80075fa:	2900      	cmp	r1, #0
 80075fc:	bf08      	it	eq
 80075fe:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007600:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007602:	2301      	movs	r3, #1
 8007604:	6022      	str	r2, [r4, #0]
 8007606:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800760a:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800760e:	4619      	mov	r1, r3
 8007610:	4620      	mov	r0, r4
 8007612:	f7ff ff6d 	bl	80074f0 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8007616:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 800761a:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800761c:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8007620:	b002      	add	sp, #8
 8007622:	bd10      	pop	{r4, pc}

08007624 <xQueueGenericCreate>:
	{
 8007624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007626:	460d      	mov	r5, r1
 8007628:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800762a:	4606      	mov	r6, r0
 800762c:	b950      	cbnz	r0, 8007644 <xQueueGenericCreate+0x20>
 800762e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007632:	b672      	cpsid	i
 8007634:	f383 8811 	msr	BASEPRI, r3
 8007638:	f3bf 8f6f 	isb	sy
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	b662      	cpsie	i
 8007642:	e7fe      	b.n	8007642 <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007644:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007646:	3050      	adds	r0, #80	; 0x50
 8007648:	f7ff fc18 	bl	8006e7c <pvPortMalloc>
		if( pxNewQueue != NULL )
 800764c:	4604      	mov	r4, r0
 800764e:	b170      	cbz	r0, 800766e <xQueueGenericCreate+0x4a>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007650:	2300      	movs	r3, #0
 8007652:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8007656:	b165      	cbz	r5, 8007672 <xQueueGenericCreate+0x4e>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007658:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800765c:	2101      	movs	r1, #1
 800765e:	4620      	mov	r0, r4
 8007660:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8007662:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007666:	f7ff ff43 	bl	80074f0 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800766a:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 800766e:	4620      	mov	r0, r4
 8007670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007672:	4603      	mov	r3, r0
 8007674:	e7f2      	b.n	800765c <xQueueGenericCreate+0x38>

08007676 <xQueueCreateCountingSemaphoreStatic>:
	{
 8007676:	b513      	push	{r0, r1, r4, lr}
 8007678:	4613      	mov	r3, r2
 800767a:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800767c:	b950      	cbnz	r0, 8007694 <xQueueCreateCountingSemaphoreStatic+0x1e>
 800767e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007682:	b672      	cpsid	i
 8007684:	f383 8811 	msr	BASEPRI, r3
 8007688:	f3bf 8f6f 	isb	sy
 800768c:	f3bf 8f4f 	dsb	sy
 8007690:	b662      	cpsie	i
 8007692:	e7fe      	b.n	8007692 <xQueueCreateCountingSemaphoreStatic+0x1c>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007694:	4288      	cmp	r0, r1
 8007696:	d20a      	bcs.n	80076ae <xQueueCreateCountingSemaphoreStatic+0x38>
 8007698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769c:	b672      	cpsid	i
 800769e:	f383 8811 	msr	BASEPRI, r3
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	f3bf 8f4f 	dsb	sy
 80076aa:	b662      	cpsie	i
 80076ac:	e7fe      	b.n	80076ac <xQueueCreateCountingSemaphoreStatic+0x36>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80076ae:	2202      	movs	r2, #2
 80076b0:	9200      	str	r2, [sp, #0]
 80076b2:	2200      	movs	r2, #0
 80076b4:	4611      	mov	r1, r2
 80076b6:	f7ff ff5d 	bl	8007574 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 80076ba:	b100      	cbz	r0, 80076be <xQueueCreateCountingSemaphoreStatic+0x48>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80076bc:	6384      	str	r4, [r0, #56]	; 0x38
	}
 80076be:	b002      	add	sp, #8
 80076c0:	bd10      	pop	{r4, pc}

080076c2 <xQueueCreateCountingSemaphore>:
	{
 80076c2:	b510      	push	{r4, lr}
 80076c4:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 80076c6:	b950      	cbnz	r0, 80076de <xQueueCreateCountingSemaphore+0x1c>
 80076c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076cc:	b672      	cpsid	i
 80076ce:	f383 8811 	msr	BASEPRI, r3
 80076d2:	f3bf 8f6f 	isb	sy
 80076d6:	f3bf 8f4f 	dsb	sy
 80076da:	b662      	cpsie	i
 80076dc:	e7fe      	b.n	80076dc <xQueueCreateCountingSemaphore+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 80076de:	4288      	cmp	r0, r1
 80076e0:	d20a      	bcs.n	80076f8 <xQueueCreateCountingSemaphore+0x36>
 80076e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e6:	b672      	cpsid	i
 80076e8:	f383 8811 	msr	BASEPRI, r3
 80076ec:	f3bf 8f6f 	isb	sy
 80076f0:	f3bf 8f4f 	dsb	sy
 80076f4:	b662      	cpsie	i
 80076f6:	e7fe      	b.n	80076f6 <xQueueCreateCountingSemaphore+0x34>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80076f8:	2202      	movs	r2, #2
 80076fa:	2100      	movs	r1, #0
 80076fc:	f7ff ff92 	bl	8007624 <xQueueGenericCreate>
		if( xHandle != NULL )
 8007700:	b100      	cbz	r0, 8007704 <xQueueCreateCountingSemaphore+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007702:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8007704:	bd10      	pop	{r4, pc}
	...

08007708 <xQueueGenericSend>:
{
 8007708:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800770c:	4688      	mov	r8, r1
 800770e:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8007710:	4604      	mov	r4, r0
{
 8007712:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8007714:	b950      	cbnz	r0, 800772c <xQueueGenericSend+0x24>
 8007716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800771a:	b672      	cpsid	i
 800771c:	f383 8811 	msr	BASEPRI, r3
 8007720:	f3bf 8f6f 	isb	sy
 8007724:	f3bf 8f4f 	dsb	sy
 8007728:	b662      	cpsie	i
 800772a:	e7fe      	b.n	800772a <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800772c:	b961      	cbnz	r1, 8007748 <xQueueGenericSend+0x40>
 800772e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007730:	b153      	cbz	r3, 8007748 <xQueueGenericSend+0x40>
 8007732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007736:	b672      	cpsid	i
 8007738:	f383 8811 	msr	BASEPRI, r3
 800773c:	f3bf 8f6f 	isb	sy
 8007740:	f3bf 8f4f 	dsb	sy
 8007744:	b662      	cpsie	i
 8007746:	e7fe      	b.n	8007746 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007748:	2f02      	cmp	r7, #2
 800774a:	d10d      	bne.n	8007768 <xQueueGenericSend+0x60>
 800774c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800774e:	2b01      	cmp	r3, #1
 8007750:	d00a      	beq.n	8007768 <xQueueGenericSend+0x60>
 8007752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007756:	b672      	cpsid	i
 8007758:	f383 8811 	msr	BASEPRI, r3
 800775c:	f3bf 8f6f 	isb	sy
 8007760:	f3bf 8f4f 	dsb	sy
 8007764:	b662      	cpsie	i
 8007766:	e7fe      	b.n	8007766 <xQueueGenericSend+0x5e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007768:	f001 f896 	bl	8008898 <xTaskGetSchedulerState>
 800776c:	4606      	mov	r6, r0
 800776e:	b960      	cbnz	r0, 800778a <xQueueGenericSend+0x82>
 8007770:	9b01      	ldr	r3, [sp, #4]
 8007772:	b15b      	cbz	r3, 800778c <xQueueGenericSend+0x84>
 8007774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007778:	b672      	cpsid	i
 800777a:	f383 8811 	msr	BASEPRI, r3
 800777e:	f3bf 8f6f 	isb	sy
 8007782:	f3bf 8f4f 	dsb	sy
 8007786:	b662      	cpsie	i
 8007788:	e7fe      	b.n	8007788 <xQueueGenericSend+0x80>
 800778a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800778c:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 8007790:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007878 <xQueueGenericSend+0x170>
 8007794:	e037      	b.n	8007806 <xQueueGenericSend+0xfe>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007796:	9d01      	ldr	r5, [sp, #4]
 8007798:	b91d      	cbnz	r5, 80077a2 <xQueueGenericSend+0x9a>
					taskEXIT_CRITICAL();
 800779a:	f7ff fd09 	bl	80071b0 <vPortExitCritical>
			return errQUEUE_FULL;
 800779e:	2000      	movs	r0, #0
 80077a0:	e050      	b.n	8007844 <xQueueGenericSend+0x13c>
				else if( xEntryTimeSet == pdFALSE )
 80077a2:	b916      	cbnz	r6, 80077aa <xQueueGenericSend+0xa2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80077a4:	a802      	add	r0, sp, #8
 80077a6:	f001 f81f 	bl	80087e8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80077aa:	f7ff fd01 	bl	80071b0 <vPortExitCritical>
		vTaskSuspendAll();
 80077ae:	f000 fda5 	bl	80082fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80077b2:	f7ff fcd7 	bl	8007164 <vPortEnterCritical>
 80077b6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80077ba:	2bff      	cmp	r3, #255	; 0xff
 80077bc:	d101      	bne.n	80077c2 <xQueueGenericSend+0xba>
 80077be:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 80077c2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80077c6:	2bff      	cmp	r3, #255	; 0xff
 80077c8:	d101      	bne.n	80077ce <xQueueGenericSend+0xc6>
 80077ca:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 80077ce:	f7ff fcef 	bl	80071b0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80077d2:	a901      	add	r1, sp, #4
 80077d4:	a802      	add	r0, sp, #8
 80077d6:	f001 f813 	bl	8008800 <xTaskCheckForTimeOut>
 80077da:	2800      	cmp	r0, #0
 80077dc:	d146      	bne.n	800786c <xQueueGenericSend+0x164>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80077de:	f7ff fcc1 	bl	8007164 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80077e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80077e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d12f      	bne.n	800784a <xQueueGenericSend+0x142>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80077ea:	f7ff fce1 	bl	80071b0 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80077ee:	9901      	ldr	r1, [sp, #4]
 80077f0:	f104 0010 	add.w	r0, r4, #16
 80077f4:	f000 ff76 	bl	80086e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80077f8:	4620      	mov	r0, r4
 80077fa:	f7ff fe40 	bl	800747e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80077fe:	f000 fe23 	bl	8008448 <xTaskResumeAll>
 8007802:	b350      	cbz	r0, 800785a <xQueueGenericSend+0x152>
 8007804:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8007806:	f7ff fcad 	bl	8007164 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800780a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800780c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800780e:	429a      	cmp	r2, r3
 8007810:	d301      	bcc.n	8007816 <xQueueGenericSend+0x10e>
 8007812:	2f02      	cmp	r7, #2
 8007814:	d1bf      	bne.n	8007796 <xQueueGenericSend+0x8e>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007816:	463a      	mov	r2, r7
 8007818:	4641      	mov	r1, r8
 800781a:	4620      	mov	r0, r4
 800781c:	f7ff fde5 	bl	80073ea <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007820:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007822:	b11b      	cbz	r3, 800782c <xQueueGenericSend+0x124>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007824:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007828:	f000 ff98 	bl	800875c <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800782c:	b138      	cbz	r0, 800783e <xQueueGenericSend+0x136>
						queueYIELD_IF_USING_PREEMPTION();
 800782e:	4b12      	ldr	r3, [pc, #72]	; (8007878 <xQueueGenericSend+0x170>)
 8007830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007834:	601a      	str	r2, [r3, #0]
 8007836:	f3bf 8f4f 	dsb	sy
 800783a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800783e:	f7ff fcb7 	bl	80071b0 <vPortExitCritical>
				return pdPASS;
 8007842:	2001      	movs	r0, #1
}
 8007844:	b004      	add	sp, #16
 8007846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 800784a:	f7ff fcb1 	bl	80071b0 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800784e:	4620      	mov	r0, r4
 8007850:	f7ff fe15 	bl	800747e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007854:	f000 fdf8 	bl	8008448 <xTaskResumeAll>
 8007858:	e7d4      	b.n	8007804 <xQueueGenericSend+0xfc>
					portYIELD_WITHIN_API();
 800785a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800785e:	f8ca 3000 	str.w	r3, [sl]
 8007862:	f3bf 8f4f 	dsb	sy
 8007866:	f3bf 8f6f 	isb	sy
 800786a:	e7cb      	b.n	8007804 <xQueueGenericSend+0xfc>
			prvUnlockQueue( pxQueue );
 800786c:	4620      	mov	r0, r4
 800786e:	f7ff fe06 	bl	800747e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007872:	f000 fde9 	bl	8008448 <xTaskResumeAll>
 8007876:	e792      	b.n	800779e <xQueueGenericSend+0x96>
 8007878:	e000ed04 	.word	0xe000ed04

0800787c <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800787c:	2200      	movs	r2, #0
	{
 800787e:	460b      	mov	r3, r1
 8007880:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007882:	4611      	mov	r1, r2
 8007884:	9000      	str	r0, [sp, #0]
 8007886:	2001      	movs	r0, #1
 8007888:	f7ff fe74 	bl	8007574 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 800788c:	4604      	mov	r4, r0
 800788e:	b138      	cbz	r0, 80078a0 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007890:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007892:	461a      	mov	r2, r3
 8007894:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007896:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007898:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800789a:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800789c:	f7ff ff34 	bl	8007708 <xQueueGenericSend>
	}
 80078a0:	4620      	mov	r0, r4
 80078a2:	b002      	add	sp, #8
 80078a4:	bd10      	pop	{r4, pc}

080078a6 <xQueueGiveMutexRecursive>:
	{
 80078a6:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 80078a8:	4604      	mov	r4, r0
 80078aa:	b950      	cbnz	r0, 80078c2 <xQueueGiveMutexRecursive+0x1c>
 80078ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b0:	b672      	cpsid	i
 80078b2:	f383 8811 	msr	BASEPRI, r3
 80078b6:	f3bf 8f6f 	isb	sy
 80078ba:	f3bf 8f4f 	dsb	sy
 80078be:	b662      	cpsie	i
 80078c0:	e7fe      	b.n	80078c0 <xQueueGiveMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80078c2:	6885      	ldr	r5, [r0, #8]
 80078c4:	f000 ffe2 	bl	800888c <xTaskGetCurrentTaskHandle>
 80078c8:	4285      	cmp	r5, r0
 80078ca:	d10a      	bne.n	80078e2 <xQueueGiveMutexRecursive+0x3c>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80078cc:	68e3      	ldr	r3, [r4, #12]
 80078ce:	3b01      	subs	r3, #1
 80078d0:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80078d2:	b923      	cbnz	r3, 80078de <xQueueGiveMutexRecursive+0x38>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80078d4:	461a      	mov	r2, r3
 80078d6:	4619      	mov	r1, r3
 80078d8:	4620      	mov	r0, r4
 80078da:	f7ff ff15 	bl	8007708 <xQueueGenericSend>
			xReturn = pdPASS;
 80078de:	2001      	movs	r0, #1
		return xReturn;
 80078e0:	e000      	b.n	80078e4 <xQueueGiveMutexRecursive+0x3e>
			xReturn = pdFAIL;
 80078e2:	2000      	movs	r0, #0
	}
 80078e4:	bd38      	pop	{r3, r4, r5, pc}

080078e6 <xQueueCreateMutex>:
	{
 80078e6:	b570      	push	{r4, r5, r6, lr}
 80078e8:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80078ea:	2050      	movs	r0, #80	; 0x50
 80078ec:	f7ff fac6 	bl	8006e7c <pvPortMalloc>
		if( pxNewQueue != NULL )
 80078f0:	4604      	mov	r4, r0
 80078f2:	b198      	cbz	r0, 800791c <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80078f4:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 80078f6:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80078f8:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80078fa:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 80078fe:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007902:	f7ff fdf5 	bl	80074f0 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007906:	462b      	mov	r3, r5
 8007908:	462a      	mov	r2, r5
 800790a:	4629      	mov	r1, r5
 800790c:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800790e:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007912:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007914:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007916:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007918:	f7ff fef6 	bl	8007708 <xQueueGenericSend>
	}
 800791c:	4620      	mov	r0, r4
 800791e:	bd70      	pop	{r4, r5, r6, pc}

08007920 <xQueueGenericSendFromISR>:
{
 8007920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007924:	4689      	mov	r9, r1
 8007926:	4690      	mov	r8, r2
 8007928:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800792a:	4604      	mov	r4, r0
 800792c:	b950      	cbnz	r0, 8007944 <xQueueGenericSendFromISR+0x24>
 800792e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007932:	b672      	cpsid	i
 8007934:	f383 8811 	msr	BASEPRI, r3
 8007938:	f3bf 8f6f 	isb	sy
 800793c:	f3bf 8f4f 	dsb	sy
 8007940:	b662      	cpsie	i
 8007942:	e7fe      	b.n	8007942 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007944:	b961      	cbnz	r1, 8007960 <xQueueGenericSendFromISR+0x40>
 8007946:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007948:	b153      	cbz	r3, 8007960 <xQueueGenericSendFromISR+0x40>
 800794a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794e:	b672      	cpsid	i
 8007950:	f383 8811 	msr	BASEPRI, r3
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	b662      	cpsie	i
 800795e:	e7fe      	b.n	800795e <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007960:	2f02      	cmp	r7, #2
 8007962:	d10d      	bne.n	8007980 <xQueueGenericSendFromISR+0x60>
 8007964:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007966:	2b01      	cmp	r3, #1
 8007968:	d00a      	beq.n	8007980 <xQueueGenericSendFromISR+0x60>
 800796a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796e:	b672      	cpsid	i
 8007970:	f383 8811 	msr	BASEPRI, r3
 8007974:	f3bf 8f6f 	isb	sy
 8007978:	f3bf 8f4f 	dsb	sy
 800797c:	b662      	cpsie	i
 800797e:	e7fe      	b.n	800797e <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007980:	f7ff fcf6 	bl	8007370 <vPortValidateInterruptPriority>
	__asm volatile
 8007984:	f3ef 8611 	mrs	r6, BASEPRI
 8007988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798c:	b672      	cpsid	i
 800798e:	f383 8811 	msr	BASEPRI, r3
 8007992:	f3bf 8f6f 	isb	sy
 8007996:	f3bf 8f4f 	dsb	sy
 800799a:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800799c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800799e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d301      	bcc.n	80079a8 <xQueueGenericSendFromISR+0x88>
 80079a4:	2f02      	cmp	r7, #2
 80079a6:	d122      	bne.n	80079ee <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 80079a8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80079ac:	463a      	mov	r2, r7
 80079ae:	4649      	mov	r1, r9
 80079b0:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 80079b2:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80079b4:	f7ff fd19 	bl	80073ea <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80079b8:	1c6b      	adds	r3, r5, #1
 80079ba:	d113      	bne.n	80079e4 <xQueueGenericSendFromISR+0xc4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079be:	b90b      	cbnz	r3, 80079c4 <xQueueGenericSendFromISR+0xa4>
			xReturn = pdPASS;
 80079c0:	2001      	movs	r0, #1
 80079c2:	e00b      	b.n	80079dc <xQueueGenericSendFromISR+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079c4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80079c8:	f000 fec8 	bl	800875c <xTaskRemoveFromEventList>
 80079cc:	2800      	cmp	r0, #0
 80079ce:	d0f7      	beq.n	80079c0 <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 80079d0:	f1b8 0f00 	cmp.w	r8, #0
 80079d4:	d0f4      	beq.n	80079c0 <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80079d6:	2001      	movs	r0, #1
 80079d8:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 80079dc:	f386 8811 	msr	BASEPRI, r6
}
 80079e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80079e4:	3501      	adds	r5, #1
 80079e6:	b26d      	sxtb	r5, r5
 80079e8:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 80079ec:	e7e8      	b.n	80079c0 <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 80079ee:	2000      	movs	r0, #0
 80079f0:	e7f4      	b.n	80079dc <xQueueGenericSendFromISR+0xbc>

080079f2 <xQueueGiveFromISR>:
{
 80079f2:	b570      	push	{r4, r5, r6, lr}
 80079f4:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80079f6:	4604      	mov	r4, r0
 80079f8:	b950      	cbnz	r0, 8007a10 <xQueueGiveFromISR+0x1e>
	__asm volatile
 80079fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fe:	b672      	cpsid	i
 8007a00:	f383 8811 	msr	BASEPRI, r3
 8007a04:	f3bf 8f6f 	isb	sy
 8007a08:	f3bf 8f4f 	dsb	sy
 8007a0c:	b662      	cpsie	i
 8007a0e:	e7fe      	b.n	8007a0e <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 8007a10:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007a12:	b153      	cbz	r3, 8007a2a <xQueueGiveFromISR+0x38>
 8007a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a18:	b672      	cpsid	i
 8007a1a:	f383 8811 	msr	BASEPRI, r3
 8007a1e:	f3bf 8f6f 	isb	sy
 8007a22:	f3bf 8f4f 	dsb	sy
 8007a26:	b662      	cpsie	i
 8007a28:	e7fe      	b.n	8007a28 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007a2a:	6803      	ldr	r3, [r0, #0]
 8007a2c:	b963      	cbnz	r3, 8007a48 <xQueueGiveFromISR+0x56>
 8007a2e:	6883      	ldr	r3, [r0, #8]
 8007a30:	b153      	cbz	r3, 8007a48 <xQueueGiveFromISR+0x56>
 8007a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a36:	b672      	cpsid	i
 8007a38:	f383 8811 	msr	BASEPRI, r3
 8007a3c:	f3bf 8f6f 	isb	sy
 8007a40:	f3bf 8f4f 	dsb	sy
 8007a44:	b662      	cpsie	i
 8007a46:	e7fe      	b.n	8007a46 <xQueueGiveFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a48:	f7ff fc92 	bl	8007370 <vPortValidateInterruptPriority>
	__asm volatile
 8007a4c:	f3ef 8611 	mrs	r6, BASEPRI
 8007a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a54:	b672      	cpsid	i
 8007a56:	f383 8811 	msr	BASEPRI, r3
 8007a5a:	f3bf 8f6f 	isb	sy
 8007a5e:	f3bf 8f4f 	dsb	sy
 8007a62:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a64:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007a66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d91c      	bls.n	8007aa6 <xQueueGiveFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8007a6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a70:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 8007a72:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8007a74:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a76:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8007a78:	d110      	bne.n	8007a9c <xQueueGiveFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a7c:	b90b      	cbnz	r3, 8007a82 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 8007a7e:	2001      	movs	r0, #1
 8007a80:	e009      	b.n	8007a96 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a82:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007a86:	f000 fe69 	bl	800875c <xTaskRemoveFromEventList>
 8007a8a:	2800      	cmp	r0, #0
 8007a8c:	d0f7      	beq.n	8007a7e <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 8007a8e:	2d00      	cmp	r5, #0
 8007a90:	d0f5      	beq.n	8007a7e <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007a92:	2001      	movs	r0, #1
 8007a94:	6028      	str	r0, [r5, #0]
	__asm volatile
 8007a96:	f386 8811 	msr	BASEPRI, r6
}
 8007a9a:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	b25b      	sxtb	r3, r3
 8007aa0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007aa4:	e7eb      	b.n	8007a7e <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 8007aa6:	2000      	movs	r0, #0
 8007aa8:	e7f5      	b.n	8007a96 <xQueueGiveFromISR+0xa4>
	...

08007aac <xQueueReceive>:
{
 8007aac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ab0:	b085      	sub	sp, #20
 8007ab2:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 8007ab4:	4604      	mov	r4, r0
{
 8007ab6:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007ab8:	b950      	cbnz	r0, 8007ad0 <xQueueReceive+0x24>
	__asm volatile
 8007aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007abe:	b672      	cpsid	i
 8007ac0:	f383 8811 	msr	BASEPRI, r3
 8007ac4:	f3bf 8f6f 	isb	sy
 8007ac8:	f3bf 8f4f 	dsb	sy
 8007acc:	b662      	cpsie	i
 8007ace:	e7fe      	b.n	8007ace <xQueueReceive+0x22>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ad0:	b961      	cbnz	r1, 8007aec <xQueueReceive+0x40>
 8007ad2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007ad4:	b153      	cbz	r3, 8007aec <xQueueReceive+0x40>
 8007ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ada:	b672      	cpsid	i
 8007adc:	f383 8811 	msr	BASEPRI, r3
 8007ae0:	f3bf 8f6f 	isb	sy
 8007ae4:	f3bf 8f4f 	dsb	sy
 8007ae8:	b662      	cpsie	i
 8007aea:	e7fe      	b.n	8007aea <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007aec:	f000 fed4 	bl	8008898 <xTaskGetSchedulerState>
 8007af0:	4606      	mov	r6, r0
 8007af2:	b960      	cbnz	r0, 8007b0e <xQueueReceive+0x62>
 8007af4:	9b01      	ldr	r3, [sp, #4]
 8007af6:	b15b      	cbz	r3, 8007b10 <xQueueReceive+0x64>
 8007af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007afc:	b672      	cpsid	i
 8007afe:	f383 8811 	msr	BASEPRI, r3
 8007b02:	f3bf 8f6f 	isb	sy
 8007b06:	f3bf 8f4f 	dsb	sy
 8007b0a:	b662      	cpsie	i
 8007b0c:	e7fe      	b.n	8007b0c <xQueueReceive+0x60>
 8007b0e:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8007b10:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8007b14:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8007bf4 <xQueueReceive+0x148>
 8007b18:	e03b      	b.n	8007b92 <xQueueReceive+0xe6>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b1a:	9d01      	ldr	r5, [sp, #4]
 8007b1c:	b91d      	cbnz	r5, 8007b26 <xQueueReceive+0x7a>
					taskEXIT_CRITICAL();
 8007b1e:	f7ff fb47 	bl	80071b0 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8007b22:	2000      	movs	r0, #0
 8007b24:	e052      	b.n	8007bcc <xQueueReceive+0x120>
				else if( xEntryTimeSet == pdFALSE )
 8007b26:	b916      	cbnz	r6, 8007b2e <xQueueReceive+0x82>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b28:	a802      	add	r0, sp, #8
 8007b2a:	f000 fe5d 	bl	80087e8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007b2e:	f7ff fb3f 	bl	80071b0 <vPortExitCritical>
		vTaskSuspendAll();
 8007b32:	f000 fbe3 	bl	80082fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b36:	f7ff fb15 	bl	8007164 <vPortEnterCritical>
 8007b3a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007b3e:	2bff      	cmp	r3, #255	; 0xff
 8007b40:	d101      	bne.n	8007b46 <xQueueReceive+0x9a>
 8007b42:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8007b46:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007b4a:	2bff      	cmp	r3, #255	; 0xff
 8007b4c:	d101      	bne.n	8007b52 <xQueueReceive+0xa6>
 8007b4e:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8007b52:	f7ff fb2d 	bl	80071b0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b56:	a901      	add	r1, sp, #4
 8007b58:	a802      	add	r0, sp, #8
 8007b5a:	f000 fe51 	bl	8008800 <xTaskCheckForTimeOut>
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	d13d      	bne.n	8007bde <xQueueReceive+0x132>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b62:	4620      	mov	r0, r4
 8007b64:	f7ff fc36 	bl	80073d4 <prvIsQueueEmpty>
 8007b68:	b398      	cbz	r0, 8007bd2 <xQueueReceive+0x126>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007b6a:	9901      	ldr	r1, [sp, #4]
 8007b6c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007b70:	f000 fdb8 	bl	80086e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b74:	4620      	mov	r0, r4
 8007b76:	f7ff fc82 	bl	800747e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b7a:	f000 fc65 	bl	8008448 <xTaskResumeAll>
 8007b7e:	b938      	cbnz	r0, 8007b90 <xQueueReceive+0xe4>
					portYIELD_WITHIN_API();
 8007b80:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007b84:	f8c9 3000 	str.w	r3, [r9]
 8007b88:	f3bf 8f4f 	dsb	sy
 8007b8c:	f3bf 8f6f 	isb	sy
 8007b90:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8007b92:	f7ff fae7 	bl	8007164 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b96:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b98:	2d00      	cmp	r5, #0
 8007b9a:	d0be      	beq.n	8007b1a <xQueueReceive+0x6e>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007b9c:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007b9e:	4639      	mov	r1, r7
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	f7ff fc57 	bl	8007454 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007ba6:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ba8:	6923      	ldr	r3, [r4, #16]
 8007baa:	b163      	cbz	r3, 8007bc6 <xQueueReceive+0x11a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bac:	f104 0010 	add.w	r0, r4, #16
 8007bb0:	f000 fdd4 	bl	800875c <xTaskRemoveFromEventList>
 8007bb4:	b138      	cbz	r0, 8007bc6 <xQueueReceive+0x11a>
						queueYIELD_IF_USING_PREEMPTION();
 8007bb6:	4b0f      	ldr	r3, [pc, #60]	; (8007bf4 <xQueueReceive+0x148>)
 8007bb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bbc:	601a      	str	r2, [r3, #0]
 8007bbe:	f3bf 8f4f 	dsb	sy
 8007bc2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007bc6:	f7ff faf3 	bl	80071b0 <vPortExitCritical>
				return pdPASS;
 8007bca:	2001      	movs	r0, #1
}
 8007bcc:	b005      	add	sp, #20
 8007bce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	f7ff fc53 	bl	800747e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007bd8:	f000 fc36 	bl	8008448 <xTaskResumeAll>
 8007bdc:	e7d8      	b.n	8007b90 <xQueueReceive+0xe4>
			prvUnlockQueue( pxQueue );
 8007bde:	4620      	mov	r0, r4
 8007be0:	f7ff fc4d 	bl	800747e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007be4:	f000 fc30 	bl	8008448 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007be8:	4620      	mov	r0, r4
 8007bea:	f7ff fbf3 	bl	80073d4 <prvIsQueueEmpty>
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	d0ce      	beq.n	8007b90 <xQueueReceive+0xe4>
 8007bf2:	e796      	b.n	8007b22 <xQueueReceive+0x76>
 8007bf4:	e000ed04 	.word	0xe000ed04

08007bf8 <xQueueSemaphoreTake>:
{
 8007bf8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 8007bfc:	4604      	mov	r4, r0
{
 8007bfe:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007c00:	b950      	cbnz	r0, 8007c18 <xQueueSemaphoreTake+0x20>
 8007c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c06:	b672      	cpsid	i
 8007c08:	f383 8811 	msr	BASEPRI, r3
 8007c0c:	f3bf 8f6f 	isb	sy
 8007c10:	f3bf 8f4f 	dsb	sy
 8007c14:	b662      	cpsie	i
 8007c16:	e7fe      	b.n	8007c16 <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 8007c18:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8007c1a:	b155      	cbz	r5, 8007c32 <xQueueSemaphoreTake+0x3a>
 8007c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c20:	b672      	cpsid	i
 8007c22:	f383 8811 	msr	BASEPRI, r3
 8007c26:	f3bf 8f6f 	isb	sy
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	b662      	cpsie	i
 8007c30:	e7fe      	b.n	8007c30 <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c32:	f000 fe31 	bl	8008898 <xTaskGetSchedulerState>
 8007c36:	4606      	mov	r6, r0
 8007c38:	b960      	cbnz	r0, 8007c54 <xQueueSemaphoreTake+0x5c>
 8007c3a:	9b01      	ldr	r3, [sp, #4]
 8007c3c:	b17b      	cbz	r3, 8007c5e <xQueueSemaphoreTake+0x66>
 8007c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c42:	b672      	cpsid	i
 8007c44:	f383 8811 	msr	BASEPRI, r3
 8007c48:	f3bf 8f6f 	isb	sy
 8007c4c:	f3bf 8f4f 	dsb	sy
 8007c50:	b662      	cpsie	i
 8007c52:	e7fe      	b.n	8007c52 <xQueueSemaphoreTake+0x5a>
 8007c54:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8007c56:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8007c58:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8007d8c <xQueueSemaphoreTake+0x194>
 8007c5c:	e053      	b.n	8007d06 <xQueueSemaphoreTake+0x10e>
 8007c5e:	4605      	mov	r5, r0
 8007c60:	e7f9      	b.n	8007c56 <xQueueSemaphoreTake+0x5e>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c62:	9b01      	ldr	r3, [sp, #4]
 8007c64:	b973      	cbnz	r3, 8007c84 <xQueueSemaphoreTake+0x8c>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007c66:	b155      	cbz	r5, 8007c7e <xQueueSemaphoreTake+0x86>
 8007c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6c:	b672      	cpsid	i
 8007c6e:	f383 8811 	msr	BASEPRI, r3
 8007c72:	f3bf 8f6f 	isb	sy
 8007c76:	f3bf 8f4f 	dsb	sy
 8007c7a:	b662      	cpsie	i
 8007c7c:	e7fe      	b.n	8007c7c <xQueueSemaphoreTake+0x84>
					taskEXIT_CRITICAL();
 8007c7e:	f7ff fa97 	bl	80071b0 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8007c82:	e05e      	b.n	8007d42 <xQueueSemaphoreTake+0x14a>
				else if( xEntryTimeSet == pdFALSE )
 8007c84:	b916      	cbnz	r6, 8007c8c <xQueueSemaphoreTake+0x94>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c86:	a802      	add	r0, sp, #8
 8007c88:	f000 fdae 	bl	80087e8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007c8c:	f7ff fa90 	bl	80071b0 <vPortExitCritical>
		vTaskSuspendAll();
 8007c90:	f000 fb34 	bl	80082fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c94:	f7ff fa66 	bl	8007164 <vPortEnterCritical>
 8007c98:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007c9c:	2bff      	cmp	r3, #255	; 0xff
 8007c9e:	d101      	bne.n	8007ca4 <xQueueSemaphoreTake+0xac>
 8007ca0:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8007ca4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007ca8:	2bff      	cmp	r3, #255	; 0xff
 8007caa:	d101      	bne.n	8007cb0 <xQueueSemaphoreTake+0xb8>
 8007cac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007cb0:	f7ff fa7e 	bl	80071b0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007cb4:	a901      	add	r1, sp, #4
 8007cb6:	a802      	add	r0, sp, #8
 8007cb8:	f000 fda2 	bl	8008800 <xTaskCheckForTimeOut>
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	d14a      	bne.n	8007d56 <xQueueSemaphoreTake+0x15e>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	f7ff fb87 	bl	80073d4 <prvIsQueueEmpty>
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	d03f      	beq.n	8007d4a <xQueueSemaphoreTake+0x152>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007cca:	6823      	ldr	r3, [r4, #0]
 8007ccc:	b93b      	cbnz	r3, 8007cde <xQueueSemaphoreTake+0xe6>
						taskENTER_CRITICAL();
 8007cce:	f7ff fa49 	bl	8007164 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007cd2:	68a0      	ldr	r0, [r4, #8]
 8007cd4:	f000 fdf0 	bl	80088b8 <xTaskPriorityInherit>
 8007cd8:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8007cda:	f7ff fa69 	bl	80071b0 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007cde:	9901      	ldr	r1, [sp, #4]
 8007ce0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007ce4:	f000 fcfe 	bl	80086e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007ce8:	4620      	mov	r0, r4
 8007cea:	f7ff fbc8 	bl	800747e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007cee:	f000 fbab 	bl	8008448 <xTaskResumeAll>
 8007cf2:	b938      	cbnz	r0, 8007d04 <xQueueSemaphoreTake+0x10c>
					portYIELD_WITHIN_API();
 8007cf4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007cf8:	f8c8 3000 	str.w	r3, [r8]
 8007cfc:	f3bf 8f4f 	dsb	sy
 8007d00:	f3bf 8f6f 	isb	sy
 8007d04:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8007d06:	f7ff fa2d 	bl	8007164 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007d0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d0a8      	beq.n	8007c62 <xQueueSemaphoreTake+0x6a>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007d10:	3b01      	subs	r3, #1
 8007d12:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d14:	6823      	ldr	r3, [r4, #0]
 8007d16:	b913      	cbnz	r3, 8007d1e <xQueueSemaphoreTake+0x126>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007d18:	f000 feae 	bl	8008a78 <pvTaskIncrementMutexHeldCount>
 8007d1c:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d1e:	6923      	ldr	r3, [r4, #16]
 8007d20:	b163      	cbz	r3, 8007d3c <xQueueSemaphoreTake+0x144>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d22:	f104 0010 	add.w	r0, r4, #16
 8007d26:	f000 fd19 	bl	800875c <xTaskRemoveFromEventList>
 8007d2a:	b138      	cbz	r0, 8007d3c <xQueueSemaphoreTake+0x144>
						queueYIELD_IF_USING_PREEMPTION();
 8007d2c:	4b17      	ldr	r3, [pc, #92]	; (8007d8c <xQueueSemaphoreTake+0x194>)
 8007d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d32:	601a      	str	r2, [r3, #0]
 8007d34:	f3bf 8f4f 	dsb	sy
 8007d38:	f3bf 8f6f 	isb	sy
				return pdPASS;
 8007d3c:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 8007d3e:	f7ff fa37 	bl	80071b0 <vPortExitCritical>
}
 8007d42:	4628      	mov	r0, r5
 8007d44:	b004      	add	sp, #16
 8007d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 8007d4a:	4620      	mov	r0, r4
 8007d4c:	f7ff fb97 	bl	800747e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d50:	f000 fb7a 	bl	8008448 <xTaskResumeAll>
 8007d54:	e7d6      	b.n	8007d04 <xQueueSemaphoreTake+0x10c>
			prvUnlockQueue( pxQueue );
 8007d56:	4620      	mov	r0, r4
 8007d58:	f7ff fb91 	bl	800747e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d5c:	f000 fb74 	bl	8008448 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d60:	4620      	mov	r0, r4
 8007d62:	f7ff fb37 	bl	80073d4 <prvIsQueueEmpty>
 8007d66:	2800      	cmp	r0, #0
 8007d68:	d0cc      	beq.n	8007d04 <xQueueSemaphoreTake+0x10c>
					if( xInheritanceOccurred != pdFALSE )
 8007d6a:	2d00      	cmp	r5, #0
 8007d6c:	d0e9      	beq.n	8007d42 <xQueueSemaphoreTake+0x14a>
						taskENTER_CRITICAL();
 8007d6e:	f7ff f9f9 	bl	8007164 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007d72:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007d74:	b119      	cbz	r1, 8007d7e <xQueueSemaphoreTake+0x186>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007d76:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007d78:	6819      	ldr	r1, [r3, #0]
 8007d7a:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007d7e:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 8007d80:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007d82:	f000 fe23 	bl	80089cc <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8007d86:	f7ff fa13 	bl	80071b0 <vPortExitCritical>
 8007d8a:	e7da      	b.n	8007d42 <xQueueSemaphoreTake+0x14a>
 8007d8c:	e000ed04 	.word	0xe000ed04

08007d90 <xQueueTakeMutexRecursive>:
	{
 8007d90:	b537      	push	{r0, r1, r2, r4, r5, lr}
		configASSERT( pxMutex );
 8007d92:	4604      	mov	r4, r0
 8007d94:	b950      	cbnz	r0, 8007dac <xQueueTakeMutexRecursive+0x1c>
 8007d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9a:	b672      	cpsid	i
 8007d9c:	f383 8811 	msr	BASEPRI, r3
 8007da0:	f3bf 8f6f 	isb	sy
 8007da4:	f3bf 8f4f 	dsb	sy
 8007da8:	b662      	cpsie	i
 8007daa:	e7fe      	b.n	8007daa <xQueueTakeMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007dac:	6885      	ldr	r5, [r0, #8]
 8007dae:	9101      	str	r1, [sp, #4]
 8007db0:	f000 fd6c 	bl	800888c <xTaskGetCurrentTaskHandle>
 8007db4:	4285      	cmp	r5, r0
 8007db6:	9901      	ldr	r1, [sp, #4]
 8007db8:	d105      	bne.n	8007dc6 <xQueueTakeMutexRecursive+0x36>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007dba:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 8007dbc:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	60e3      	str	r3, [r4, #12]
	}
 8007dc2:	b003      	add	sp, #12
 8007dc4:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	f7ff ff16 	bl	8007bf8 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8007dcc:	2800      	cmp	r0, #0
 8007dce:	d0f8      	beq.n	8007dc2 <xQueueTakeMutexRecursive+0x32>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007dd0:	68e3      	ldr	r3, [r4, #12]
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	60e3      	str	r3, [r4, #12]
		return xReturn;
 8007dd6:	e7f4      	b.n	8007dc2 <xQueueTakeMutexRecursive+0x32>

08007dd8 <xQueueReceiveFromISR>:
{
 8007dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ddc:	4689      	mov	r9, r1
 8007dde:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8007de0:	4605      	mov	r5, r0
 8007de2:	b950      	cbnz	r0, 8007dfa <xQueueReceiveFromISR+0x22>
 8007de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de8:	b672      	cpsid	i
 8007dea:	f383 8811 	msr	BASEPRI, r3
 8007dee:	f3bf 8f6f 	isb	sy
 8007df2:	f3bf 8f4f 	dsb	sy
 8007df6:	b662      	cpsie	i
 8007df8:	e7fe      	b.n	8007df8 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007dfa:	b961      	cbnz	r1, 8007e16 <xQueueReceiveFromISR+0x3e>
 8007dfc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007dfe:	b153      	cbz	r3, 8007e16 <xQueueReceiveFromISR+0x3e>
 8007e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e04:	b672      	cpsid	i
 8007e06:	f383 8811 	msr	BASEPRI, r3
 8007e0a:	f3bf 8f6f 	isb	sy
 8007e0e:	f3bf 8f4f 	dsb	sy
 8007e12:	b662      	cpsie	i
 8007e14:	e7fe      	b.n	8007e14 <xQueueReceiveFromISR+0x3c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e16:	f7ff faab 	bl	8007370 <vPortValidateInterruptPriority>
	__asm volatile
 8007e1a:	f3ef 8711 	mrs	r7, BASEPRI
 8007e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e22:	b672      	cpsid	i
 8007e24:	f383 8811 	msr	BASEPRI, r3
 8007e28:	f3bf 8f6f 	isb	sy
 8007e2c:	f3bf 8f4f 	dsb	sy
 8007e30:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e32:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e34:	b31c      	cbz	r4, 8007e7e <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 8007e36:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007e3a:	4649      	mov	r1, r9
 8007e3c:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007e3e:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8007e40:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007e42:	f7ff fb07 	bl	8007454 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007e46:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8007e48:	1c73      	adds	r3, r6, #1
 8007e4a:	d113      	bne.n	8007e74 <xQueueReceiveFromISR+0x9c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e4c:	692b      	ldr	r3, [r5, #16]
 8007e4e:	b90b      	cbnz	r3, 8007e54 <xQueueReceiveFromISR+0x7c>
			xReturn = pdPASS;
 8007e50:	2001      	movs	r0, #1
 8007e52:	e00b      	b.n	8007e6c <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e54:	f105 0010 	add.w	r0, r5, #16
 8007e58:	f000 fc80 	bl	800875c <xTaskRemoveFromEventList>
 8007e5c:	2800      	cmp	r0, #0
 8007e5e:	d0f7      	beq.n	8007e50 <xQueueReceiveFromISR+0x78>
						if( pxHigherPriorityTaskWoken != NULL )
 8007e60:	f1b8 0f00 	cmp.w	r8, #0
 8007e64:	d0f4      	beq.n	8007e50 <xQueueReceiveFromISR+0x78>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007e66:	2001      	movs	r0, #1
 8007e68:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8007e6c:	f387 8811 	msr	BASEPRI, r7
}
 8007e70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007e74:	3601      	adds	r6, #1
 8007e76:	b276      	sxtb	r6, r6
 8007e78:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8007e7c:	e7e8      	b.n	8007e50 <xQueueReceiveFromISR+0x78>
			xReturn = pdFAIL;
 8007e7e:	4620      	mov	r0, r4
 8007e80:	e7f4      	b.n	8007e6c <xQueueReceiveFromISR+0x94>
	...

08007e84 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e84:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007e86:	4a07      	ldr	r2, [pc, #28]	; (8007ea4 <vQueueAddToRegistry+0x20>)
	{
 8007e88:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007e8a:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8007e8e:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8007e92:	b91d      	cbnz	r5, 8007e9c <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007e94:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007e98:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007e9a:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	2b08      	cmp	r3, #8
 8007ea0:	d1f3      	bne.n	8007e8a <vQueueAddToRegistry+0x6>
 8007ea2:	e7fa      	b.n	8007e9a <vQueueAddToRegistry+0x16>
 8007ea4:	20015100 	.word	0x20015100

08007ea8 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ea8:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007eaa:	4909      	ldr	r1, [pc, #36]	; (8007ed0 <vQueueUnregisterQueue+0x28>)
	{
 8007eac:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007eae:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8007eb2:	00dc      	lsls	r4, r3, #3
 8007eb4:	4282      	cmp	r2, r0
 8007eb6:	d106      	bne.n	8007ec6 <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007eb8:	4a06      	ldr	r2, [pc, #24]	; (8007ed4 <vQueueUnregisterQueue+0x2c>)
 8007eba:	2100      	movs	r1, #0
 8007ebc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007ec0:	4422      	add	r2, r4
 8007ec2:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007ec4:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	2b08      	cmp	r3, #8
 8007eca:	d1f0      	bne.n	8007eae <vQueueUnregisterQueue+0x6>
 8007ecc:	e7fa      	b.n	8007ec4 <vQueueUnregisterQueue+0x1c>
 8007ece:	bf00      	nop
 8007ed0:	20015104 	.word	0x20015104
 8007ed4:	20015100 	.word	0x20015100

08007ed8 <vQueueDelete>:
{
 8007ed8:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8007eda:	b950      	cbnz	r0, 8007ef2 <vQueueDelete+0x1a>
	__asm volatile
 8007edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee0:	b672      	cpsid	i
 8007ee2:	f383 8811 	msr	BASEPRI, r3
 8007ee6:	f3bf 8f6f 	isb	sy
 8007eea:	f3bf 8f4f 	dsb	sy
 8007eee:	b662      	cpsie	i
 8007ef0:	e7fe      	b.n	8007ef0 <vQueueDelete+0x18>
		vQueueUnregisterQueue( pxQueue );
 8007ef2:	f7ff ffd9 	bl	8007ea8 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007ef6:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 8007efa:	b91b      	cbnz	r3, 8007f04 <vQueueDelete+0x2c>
}
 8007efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 8007f00:	f7ff b84a 	b.w	8006f98 <vPortFree>
}
 8007f04:	bd10      	pop	{r4, pc}

08007f06 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f06:	b570      	push	{r4, r5, r6, lr}
 8007f08:	4604      	mov	r4, r0
 8007f0a:	460d      	mov	r5, r1
 8007f0c:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007f0e:	f7ff f929 	bl	8007164 <vPortEnterCritical>
 8007f12:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007f16:	2bff      	cmp	r3, #255	; 0xff
 8007f18:	d102      	bne.n	8007f20 <vQueueWaitForMessageRestricted+0x1a>
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007f20:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007f24:	2bff      	cmp	r3, #255	; 0xff
 8007f26:	d102      	bne.n	8007f2e <vQueueWaitForMessageRestricted+0x28>
 8007f28:	2300      	movs	r3, #0
 8007f2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f2e:	f7ff f93f 	bl	80071b0 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007f32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007f34:	b92b      	cbnz	r3, 8007f42 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007f36:	4632      	mov	r2, r6
 8007f38:	4629      	mov	r1, r5
 8007f3a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007f3e:	f000 fbed 	bl	800871c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007f42:	4620      	mov	r0, r4
	}
 8007f44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8007f48:	f7ff ba99 	b.w	800747e <prvUnlockQueue>

08007f4c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f50:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007f52:	f7ff f907 	bl	8007164 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007f56:	4b2e      	ldr	r3, [pc, #184]	; (8008010 <prvAddNewTaskToReadyList+0xc4>)
		if( pxCurrentTCB == NULL )
 8007f58:	4d2e      	ldr	r5, [pc, #184]	; (8008014 <prvAddNewTaskToReadyList+0xc8>)
		uxCurrentNumberOfTasks++;
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	4f2e      	ldr	r7, [pc, #184]	; (8008018 <prvAddNewTaskToReadyList+0xcc>)
 8007f5e:	3201      	adds	r2, #1
 8007f60:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8007f62:	682e      	ldr	r6, [r5, #0]
 8007f64:	2e00      	cmp	r6, #0
 8007f66:	d148      	bne.n	8007ffa <prvAddNewTaskToReadyList+0xae>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007f68:	602c      	str	r4, [r5, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d11f      	bne.n	8007fb0 <prvAddNewTaskToReadyList+0x64>
 8007f70:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f72:	3601      	adds	r6, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f74:	4640      	mov	r0, r8
 8007f76:	f7ff f84b 	bl	8007010 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f7a:	f108 0814 	add.w	r8, r8, #20
 8007f7e:	2e38      	cmp	r6, #56	; 0x38
 8007f80:	d1f7      	bne.n	8007f72 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f82:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8008044 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 8007f86:	4e25      	ldr	r6, [pc, #148]	; (800801c <prvAddNewTaskToReadyList+0xd0>)
	vListInitialise( &xDelayedTaskList1 );
 8007f88:	4640      	mov	r0, r8
 8007f8a:	f7ff f841 	bl	8007010 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f8e:	4630      	mov	r0, r6
 8007f90:	f7ff f83e 	bl	8007010 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007f94:	4822      	ldr	r0, [pc, #136]	; (8008020 <prvAddNewTaskToReadyList+0xd4>)
 8007f96:	f7ff f83b 	bl	8007010 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007f9a:	4822      	ldr	r0, [pc, #136]	; (8008024 <prvAddNewTaskToReadyList+0xd8>)
 8007f9c:	f7ff f838 	bl	8007010 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007fa0:	4821      	ldr	r0, [pc, #132]	; (8008028 <prvAddNewTaskToReadyList+0xdc>)
 8007fa2:	f7ff f835 	bl	8007010 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007fa6:	4b21      	ldr	r3, [pc, #132]	; (800802c <prvAddNewTaskToReadyList+0xe0>)
 8007fa8:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007fac:	4b20      	ldr	r3, [pc, #128]	; (8008030 <prvAddNewTaskToReadyList+0xe4>)
 8007fae:	601e      	str	r6, [r3, #0]
		uxTaskNumber++;
 8007fb0:	4a20      	ldr	r2, [pc, #128]	; (8008034 <prvAddNewTaskToReadyList+0xe8>)
 8007fb2:	6813      	ldr	r3, [r2, #0]
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8007fb8:	4a1f      	ldr	r2, [pc, #124]	; (8008038 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007fba:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8007fbc:	6811      	ldr	r1, [r2, #0]
 8007fbe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007fc0:	428b      	cmp	r3, r1
 8007fc2:	d900      	bls.n	8007fc6 <prvAddNewTaskToReadyList+0x7a>
 8007fc4:	6013      	str	r3, [r2, #0]
 8007fc6:	2014      	movs	r0, #20
 8007fc8:	1d21      	adds	r1, r4, #4
 8007fca:	fb00 7003 	mla	r0, r0, r3, r7
 8007fce:	f7ff f82d 	bl	800702c <vListInsertEnd>
	taskEXIT_CRITICAL();
 8007fd2:	f7ff f8ed 	bl	80071b0 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8007fd6:	4b19      	ldr	r3, [pc, #100]	; (800803c <prvAddNewTaskToReadyList+0xf0>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	b163      	cbz	r3, 8007ff6 <prvAddNewTaskToReadyList+0xaa>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007fdc:	682b      	ldr	r3, [r5, #0]
 8007fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fe0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d207      	bcs.n	8007ff6 <prvAddNewTaskToReadyList+0xaa>
			taskYIELD_IF_USING_PREEMPTION();
 8007fe6:	4b16      	ldr	r3, [pc, #88]	; (8008040 <prvAddNewTaskToReadyList+0xf4>)
 8007fe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fec:	601a      	str	r2, [r3, #0]
 8007fee:	f3bf 8f4f 	dsb	sy
 8007ff2:	f3bf 8f6f 	isb	sy
}
 8007ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8007ffa:	4b10      	ldr	r3, [pc, #64]	; (800803c <prvAddNewTaskToReadyList+0xf0>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d1d6      	bne.n	8007fb0 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008002:	682b      	ldr	r3, [r5, #0]
 8008004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008006:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008008:	429a      	cmp	r2, r3
 800800a:	d8d1      	bhi.n	8007fb0 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800800c:	602c      	str	r4, [r5, #0]
 800800e:	e7cf      	b.n	8007fb0 <prvAddNewTaskToReadyList+0x64>
 8008010:	20014a1c 	.word	0x20014a1c
 8008014:	200145b0 	.word	0x200145b0
 8008018:	200145bc 	.word	0x200145bc
 800801c:	20014a48 	.word	0x20014a48
 8008020:	20014a64 	.word	0x20014a64
 8008024:	20014a90 	.word	0x20014a90
 8008028:	20014a7c 	.word	0x20014a7c
 800802c:	200145b4 	.word	0x200145b4
 8008030:	200145b8 	.word	0x200145b8
 8008034:	20014a2c 	.word	0x20014a2c
 8008038:	20014a30 	.word	0x20014a30
 800803c:	20014a78 	.word	0x20014a78
 8008040:	e000ed04 	.word	0xe000ed04
 8008044:	20014a34 	.word	0x20014a34

08008048 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008048:	4a06      	ldr	r2, [pc, #24]	; (8008064 <prvResetNextTaskUnblockTime+0x1c>)
 800804a:	6813      	ldr	r3, [r2, #0]
 800804c:	6819      	ldr	r1, [r3, #0]
 800804e:	4b06      	ldr	r3, [pc, #24]	; (8008068 <prvResetNextTaskUnblockTime+0x20>)
 8008050:	b919      	cbnz	r1, 800805a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008052:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008056:	601a      	str	r2, [r3, #0]
	}
}
 8008058:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800805a:	6812      	ldr	r2, [r2, #0]
 800805c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800805e:	68d2      	ldr	r2, [r2, #12]
 8008060:	6852      	ldr	r2, [r2, #4]
 8008062:	e7f8      	b.n	8008056 <prvResetNextTaskUnblockTime+0xe>
 8008064:	200145b4 	.word	0x200145b4
 8008068:	20014a5c 	.word	0x20014a5c

0800806c <prvInitialiseNewTask.isra.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800806c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008070:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008074:	4606      	mov	r6, r0
 8008076:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008078:	21a5      	movs	r1, #165	; 0xa5
 800807a:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800807c:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800807e:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008082:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008086:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008088:	f01f fa4c 	bl	8027524 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800808c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800808e:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008090:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 8008094:	2d00      	cmp	r5, #0
 8008096:	d037      	beq.n	8008108 <prvInitialiseNewTask.isra.0+0x9c>
 8008098:	1e6b      	subs	r3, r5, #1
 800809a:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800809e:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80080a0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80080a4:	f802 1b01 	strb.w	r1, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 80080a8:	7819      	ldrb	r1, [r3, #0]
 80080aa:	b109      	cbz	r1, 80080b0 <prvInitialiseNewTask.isra.0+0x44>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080ac:	42ab      	cmp	r3, r5
 80080ae:	d1f7      	bne.n	80080a0 <prvInitialiseNewTask.isra.0+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80080b0:	2300      	movs	r3, #0
 80080b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80080b6:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 80080b8:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80080bc:	1d20      	adds	r0, r4, #4
 80080be:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 80080c0:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 80080c4:	bf28      	it	cs
 80080c6:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 80080c8:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80080ca:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080cc:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80080d0:	f7fe ffa9 	bl	8007026 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80080d4:	f104 0018 	add.w	r0, r4, #24
 80080d8:	f7fe ffa5 	bl	8007026 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80080dc:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80080e0:	463a      	mov	r2, r7
 80080e2:	4631      	mov	r1, r6
 80080e4:	4648      	mov	r0, r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80080e6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080e8:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80080ea:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 80080ec:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80080f0:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80080f4:	f7ff f810 	bl	8007118 <pxPortInitialiseStack>
 80080f8:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80080fa:	f1b8 0f00 	cmp.w	r8, #0
 80080fe:	d001      	beq.n	8008104 <prvInitialiseNewTask.isra.0+0x98>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008100:	f8c8 4000 	str.w	r4, [r8]
}
 8008104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008108:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 800810c:	e7d3      	b.n	80080b6 <prvInitialiseNewTask.isra.0+0x4a>

0800810e <prvDeleteTCB>:
	{
 800810e:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008110:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
	{
 8008114:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008116:	b93b      	cbnz	r3, 8008128 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8008118:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800811a:	f7fe ff3d 	bl	8006f98 <vPortFree>
				vPortFree( pxTCB );
 800811e:	4620      	mov	r0, r4
	}
 8008120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8008124:	f7fe bf38 	b.w	8006f98 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008128:	2b01      	cmp	r3, #1
 800812a:	d0f9      	beq.n	8008120 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800812c:	2b02      	cmp	r3, #2
 800812e:	d00a      	beq.n	8008146 <prvDeleteTCB+0x38>
 8008130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008134:	b672      	cpsid	i
 8008136:	f383 8811 	msr	BASEPRI, r3
 800813a:	f3bf 8f6f 	isb	sy
 800813e:	f3bf 8f4f 	dsb	sy
 8008142:	b662      	cpsie	i
 8008144:	e7fe      	b.n	8008144 <prvDeleteTCB+0x36>
	}
 8008146:	bd10      	pop	{r4, pc}

08008148 <prvIdleTask>:
{
 8008148:	b580      	push	{r7, lr}
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800814a:	4e14      	ldr	r6, [pc, #80]	; (800819c <prvIdleTask+0x54>)
				taskYIELD();
 800814c:	4f14      	ldr	r7, [pc, #80]	; (80081a0 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800814e:	4c15      	ldr	r4, [pc, #84]	; (80081a4 <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 8008150:	4d15      	ldr	r5, [pc, #84]	; (80081a8 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008152:	6823      	ldr	r3, [r4, #0]
 8008154:	b96b      	cbnz	r3, 8008172 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008156:	4b15      	ldr	r3, [pc, #84]	; (80081ac <prvIdleTask+0x64>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2b01      	cmp	r3, #1
 800815c:	d906      	bls.n	800816c <prvIdleTask+0x24>
				taskYIELD();
 800815e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008162:	603b      	str	r3, [r7, #0]
 8008164:	f3bf 8f4f 	dsb	sy
 8008168:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800816c:	f7f8 fe3a 	bl	8000de4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8008170:	e7ed      	b.n	800814e <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8008172:	f7fe fff7 	bl	8007164 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008176:	68f3      	ldr	r3, [r6, #12]
 8008178:	f8d3 800c 	ldr.w	r8, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800817c:	f108 0004 	add.w	r0, r8, #4
 8008180:	f7fe ff77 	bl	8007072 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008184:	682b      	ldr	r3, [r5, #0]
 8008186:	3b01      	subs	r3, #1
 8008188:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800818a:	6823      	ldr	r3, [r4, #0]
 800818c:	3b01      	subs	r3, #1
 800818e:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8008190:	f7ff f80e 	bl	80071b0 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8008194:	4640      	mov	r0, r8
 8008196:	f7ff ffba 	bl	800810e <prvDeleteTCB>
 800819a:	e7da      	b.n	8008152 <prvIdleTask+0xa>
 800819c:	20014a90 	.word	0x20014a90
 80081a0:	e000ed04 	.word	0xe000ed04
 80081a4:	20014a20 	.word	0x20014a20
 80081a8:	20014a1c 	.word	0x20014a1c
 80081ac:	200145bc 	.word	0x200145bc

080081b0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80081b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80081b2:	4b16      	ldr	r3, [pc, #88]	; (800820c <prvAddCurrentTaskToDelayedList+0x5c>)
{
 80081b4:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081b6:	4e16      	ldr	r6, [pc, #88]	; (8008210 <prvAddCurrentTaskToDelayedList+0x60>)
{
 80081b8:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 80081ba:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081bc:	6830      	ldr	r0, [r6, #0]
 80081be:	3004      	adds	r0, #4
 80081c0:	f7fe ff57 	bl	8007072 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80081c4:	1c63      	adds	r3, r4, #1
 80081c6:	4633      	mov	r3, r6
 80081c8:	d107      	bne.n	80081da <prvAddCurrentTaskToDelayedList+0x2a>
 80081ca:	b137      	cbz	r7, 80081da <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081cc:	6831      	ldr	r1, [r6, #0]
 80081ce:	4811      	ldr	r0, [pc, #68]	; (8008214 <prvAddCurrentTaskToDelayedList+0x64>)
 80081d0:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80081d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081d6:	f7fe bf29 	b.w	800702c <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80081da:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 80081e0:	d307      	bcc.n	80081f2 <prvAddCurrentTaskToDelayedList+0x42>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081e2:	4a0d      	ldr	r2, [pc, #52]	; (8008218 <prvAddCurrentTaskToDelayedList+0x68>)
 80081e4:	6810      	ldr	r0, [r2, #0]
 80081e6:	6819      	ldr	r1, [r3, #0]
}
 80081e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081ec:	3104      	adds	r1, #4
 80081ee:	f7fe bf29 	b.w	8007044 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081f2:	4a0a      	ldr	r2, [pc, #40]	; (800821c <prvAddCurrentTaskToDelayedList+0x6c>)
 80081f4:	6810      	ldr	r0, [r2, #0]
 80081f6:	6819      	ldr	r1, [r3, #0]
 80081f8:	3104      	adds	r1, #4
 80081fa:	f7fe ff23 	bl	8007044 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80081fe:	4b08      	ldr	r3, [pc, #32]	; (8008220 <prvAddCurrentTaskToDelayedList+0x70>)
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	42a2      	cmp	r2, r4
 8008204:	d900      	bls.n	8008208 <prvAddCurrentTaskToDelayedList+0x58>
					xNextTaskUnblockTime = xTimeToWake;
 8008206:	601c      	str	r4, [r3, #0]
}
 8008208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800820a:	bf00      	nop
 800820c:	20014aa4 	.word	0x20014aa4
 8008210:	200145b0 	.word	0x200145b0
 8008214:	20014a7c 	.word	0x20014a7c
 8008218:	200145b8 	.word	0x200145b8
 800821c:	200145b4 	.word	0x200145b4
 8008220:	20014a5c 	.word	0x20014a5c

08008224 <xTaskCreateStatic>:
	{
 8008224:	b570      	push	{r4, r5, r6, lr}
 8008226:	b086      	sub	sp, #24
 8008228:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800822c:	b955      	cbnz	r5, 8008244 <xTaskCreateStatic+0x20>
 800822e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008232:	b672      	cpsid	i
 8008234:	f383 8811 	msr	BASEPRI, r3
 8008238:	f3bf 8f6f 	isb	sy
 800823c:	f3bf 8f4f 	dsb	sy
 8008240:	b662      	cpsie	i
 8008242:	e7fe      	b.n	8008242 <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 8008244:	b954      	cbnz	r4, 800825c <xTaskCreateStatic+0x38>
 8008246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824a:	b672      	cpsid	i
 800824c:	f383 8811 	msr	BASEPRI, r3
 8008250:	f3bf 8f6f 	isb	sy
 8008254:	f3bf 8f4f 	dsb	sy
 8008258:	b662      	cpsie	i
 800825a:	e7fe      	b.n	800825a <xTaskCreateStatic+0x36>
			volatile size_t xSize = sizeof( StaticTask_t );
 800825c:	2660      	movs	r6, #96	; 0x60
 800825e:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008260:	9e05      	ldr	r6, [sp, #20]
 8008262:	2e60      	cmp	r6, #96	; 0x60
 8008264:	d00a      	beq.n	800827c <xTaskCreateStatic+0x58>
 8008266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826a:	b672      	cpsid	i
 800826c:	f383 8811 	msr	BASEPRI, r3
 8008270:	f3bf 8f6f 	isb	sy
 8008274:	f3bf 8f4f 	dsb	sy
 8008278:	b662      	cpsie	i
 800827a:	e7fe      	b.n	800827a <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800827c:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800827e:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008280:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008282:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008286:	ad04      	add	r5, sp, #16
 8008288:	9402      	str	r4, [sp, #8]
 800828a:	9501      	str	r5, [sp, #4]
 800828c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800828e:	9500      	str	r5, [sp, #0]
 8008290:	f7ff feec 	bl	800806c <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008294:	4620      	mov	r0, r4
 8008296:	f7ff fe59 	bl	8007f4c <prvAddNewTaskToReadyList>
	}
 800829a:	9804      	ldr	r0, [sp, #16]
 800829c:	b006      	add	sp, #24
 800829e:	bd70      	pop	{r4, r5, r6, pc}

080082a0 <xTaskCreate>:
	{
 80082a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80082a4:	4607      	mov	r7, r0
 80082a6:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80082a8:	0090      	lsls	r0, r2, #2
	{
 80082aa:	4688      	mov	r8, r1
 80082ac:	4616      	mov	r6, r2
 80082ae:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80082b0:	f7fe fde4 	bl	8006e7c <pvPortMalloc>
			if( pxStack != NULL )
 80082b4:	4605      	mov	r5, r0
 80082b6:	b1e8      	cbz	r0, 80082f4 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80082b8:	2060      	movs	r0, #96	; 0x60
 80082ba:	f7fe fddf 	bl	8006e7c <pvPortMalloc>
				if( pxNewTCB != NULL )
 80082be:	4604      	mov	r4, r0
 80082c0:	b1a8      	cbz	r0, 80082ee <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80082c2:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 80082c4:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80082c6:	4632      	mov	r2, r6
 80082c8:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80082ca:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80082ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082d0:	9002      	str	r0, [sp, #8]
 80082d2:	4638      	mov	r0, r7
 80082d4:	9301      	str	r3, [sp, #4]
 80082d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082d8:	9300      	str	r3, [sp, #0]
 80082da:	464b      	mov	r3, r9
 80082dc:	f7ff fec6 	bl	800806c <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80082e0:	4620      	mov	r0, r4
 80082e2:	f7ff fe33 	bl	8007f4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80082e6:	2001      	movs	r0, #1
	}
 80082e8:	b005      	add	sp, #20
 80082ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80082ee:	4628      	mov	r0, r5
 80082f0:	f7fe fe52 	bl	8006f98 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80082f4:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 80082f8:	e7f6      	b.n	80082e8 <xTaskCreate+0x48>
	...

080082fc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80082fc:	4a02      	ldr	r2, [pc, #8]	; (8008308 <vTaskSuspendAll+0xc>)
 80082fe:	6813      	ldr	r3, [r2, #0]
 8008300:	3301      	adds	r3, #1
 8008302:	6013      	str	r3, [r2, #0]
}
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop
 8008308:	20014a28 	.word	0x20014a28

0800830c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800830c:	4b01      	ldr	r3, [pc, #4]	; (8008314 <xTaskGetTickCount+0x8>)
 800830e:	6818      	ldr	r0, [r3, #0]
}
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop
 8008314:	20014aa4 	.word	0x20014aa4

08008318 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008318:	4b40      	ldr	r3, [pc, #256]	; (800841c <xTaskIncrementTick+0x104>)
 800831a:	681b      	ldr	r3, [r3, #0]
{
 800831c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008320:	2b00      	cmp	r3, #0
 8008322:	d174      	bne.n	800840e <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008324:	4b3e      	ldr	r3, [pc, #248]	; (8008420 <xTaskIncrementTick+0x108>)
 8008326:	681d      	ldr	r5, [r3, #0]
 8008328:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800832a:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800832c:	b9cd      	cbnz	r5, 8008362 <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 800832e:	4b3d      	ldr	r3, [pc, #244]	; (8008424 <xTaskIncrementTick+0x10c>)
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	6812      	ldr	r2, [r2, #0]
 8008334:	b152      	cbz	r2, 800834c <xTaskIncrementTick+0x34>
 8008336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800833a:	b672      	cpsid	i
 800833c:	f383 8811 	msr	BASEPRI, r3
 8008340:	f3bf 8f6f 	isb	sy
 8008344:	f3bf 8f4f 	dsb	sy
 8008348:	b662      	cpsie	i
 800834a:	e7fe      	b.n	800834a <xTaskIncrementTick+0x32>
 800834c:	4a36      	ldr	r2, [pc, #216]	; (8008428 <xTaskIncrementTick+0x110>)
 800834e:	6819      	ldr	r1, [r3, #0]
 8008350:	6810      	ldr	r0, [r2, #0]
 8008352:	6018      	str	r0, [r3, #0]
 8008354:	6011      	str	r1, [r2, #0]
 8008356:	4a35      	ldr	r2, [pc, #212]	; (800842c <xTaskIncrementTick+0x114>)
 8008358:	6813      	ldr	r3, [r2, #0]
 800835a:	3301      	adds	r3, #1
 800835c:	6013      	str	r3, [r2, #0]
 800835e:	f7ff fe73 	bl	8008048 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008362:	4e33      	ldr	r6, [pc, #204]	; (8008430 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 8008364:	2400      	movs	r4, #0
 8008366:	4f33      	ldr	r7, [pc, #204]	; (8008434 <xTaskIncrementTick+0x11c>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008368:	6833      	ldr	r3, [r6, #0]
 800836a:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8008440 <xTaskIncrementTick+0x128>
 800836e:	42ab      	cmp	r3, r5
 8008370:	d911      	bls.n	8008396 <xTaskIncrementTick+0x7e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008372:	f8d8 3000 	ldr.w	r3, [r8]
 8008376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008378:	2314      	movs	r3, #20
 800837a:	4353      	muls	r3, r2
 800837c:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 800837e:	2b02      	cmp	r3, #2
 8008380:	bf28      	it	cs
 8008382:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
 8008384:	4b2c      	ldr	r3, [pc, #176]	; (8008438 <xTaskIncrementTick+0x120>)
 8008386:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8008388:	2b00      	cmp	r3, #0
}
 800838a:	bf0c      	ite	eq
 800838c:	4620      	moveq	r0, r4
 800838e:	2001      	movne	r0, #1
 8008390:	b003      	add	sp, #12
 8008392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008396:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8008424 <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 800839a:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8008444 <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800839e:	f8d9 3000 	ldr.w	r3, [r9]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	b91b      	cbnz	r3, 80083ae <xTaskIncrementTick+0x96>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083a6:	f04f 33ff 	mov.w	r3, #4294967295
 80083aa:	6033      	str	r3, [r6, #0]
					break;
 80083ac:	e7e1      	b.n	8008372 <xTaskIncrementTick+0x5a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083ae:	f8d9 3000 	ldr.w	r3, [r9]
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80083b8:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 80083bc:	4295      	cmp	r5, r2
 80083be:	d201      	bcs.n	80083c4 <xTaskIncrementTick+0xac>
						xNextTaskUnblockTime = xItemValue;
 80083c0:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80083c2:	e7d6      	b.n	8008372 <xTaskIncrementTick+0x5a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083c4:	f10b 0104 	add.w	r1, fp, #4
 80083c8:	4608      	mov	r0, r1
 80083ca:	9101      	str	r1, [sp, #4]
 80083cc:	f7fe fe51 	bl	8007072 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80083d0:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 80083d4:	9901      	ldr	r1, [sp, #4]
 80083d6:	b122      	cbz	r2, 80083e2 <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083d8:	f10b 0018 	add.w	r0, fp, #24
 80083dc:	f7fe fe49 	bl	8007072 <uxListRemove>
 80083e0:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 80083e2:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 80083e6:	f8da 2000 	ldr.w	r2, [sl]
 80083ea:	4290      	cmp	r0, r2
 80083ec:	d901      	bls.n	80083f2 <xTaskIncrementTick+0xda>
 80083ee:	f8ca 0000 	str.w	r0, [sl]
 80083f2:	2314      	movs	r3, #20
 80083f4:	fb03 7000 	mla	r0, r3, r0, r7
 80083f8:	f7fe fe18 	bl	800702c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80083fc:	f8d8 1000 	ldr.w	r1, [r8]
 8008400:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8008404:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8008406:	429a      	cmp	r2, r3
 8008408:	bf28      	it	cs
 800840a:	2401      	movcs	r4, #1
 800840c:	e7c7      	b.n	800839e <xTaskIncrementTick+0x86>
		++uxPendedTicks;
 800840e:	4a0b      	ldr	r2, [pc, #44]	; (800843c <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 8008410:	2400      	movs	r4, #0
		++uxPendedTicks;
 8008412:	6813      	ldr	r3, [r2, #0]
 8008414:	3301      	adds	r3, #1
 8008416:	6013      	str	r3, [r2, #0]
 8008418:	e7b4      	b.n	8008384 <xTaskIncrementTick+0x6c>
 800841a:	bf00      	nop
 800841c:	20014a28 	.word	0x20014a28
 8008420:	20014aa4 	.word	0x20014aa4
 8008424:	200145b4 	.word	0x200145b4
 8008428:	200145b8 	.word	0x200145b8
 800842c:	20014a60 	.word	0x20014a60
 8008430:	20014a5c 	.word	0x20014a5c
 8008434:	200145bc 	.word	0x200145bc
 8008438:	20014aa8 	.word	0x20014aa8
 800843c:	20014a24 	.word	0x20014a24
 8008440:	200145b0 	.word	0x200145b0
 8008444:	20014a30 	.word	0x20014a30

08008448 <xTaskResumeAll>:
{
 8008448:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800844a:	4c31      	ldr	r4, [pc, #196]	; (8008510 <xTaskResumeAll+0xc8>)
 800844c:	6823      	ldr	r3, [r4, #0]
 800844e:	b953      	cbnz	r3, 8008466 <xTaskResumeAll+0x1e>
 8008450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008454:	b672      	cpsid	i
 8008456:	f383 8811 	msr	BASEPRI, r3
 800845a:	f3bf 8f6f 	isb	sy
 800845e:	f3bf 8f4f 	dsb	sy
 8008462:	b662      	cpsie	i
 8008464:	e7fe      	b.n	8008464 <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 8008466:	f7fe fe7d 	bl	8007164 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800846a:	6823      	ldr	r3, [r4, #0]
 800846c:	3b01      	subs	r3, #1
 800846e:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008470:	6824      	ldr	r4, [r4, #0]
 8008472:	b12c      	cbz	r4, 8008480 <xTaskResumeAll+0x38>
BaseType_t xAlreadyYielded = pdFALSE;
 8008474:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008476:	f7fe fe9b 	bl	80071b0 <vPortExitCritical>
}
 800847a:	4620      	mov	r0, r4
 800847c:	b003      	add	sp, #12
 800847e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008480:	4b24      	ldr	r3, [pc, #144]	; (8008514 <xTaskResumeAll+0xcc>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d0f5      	beq.n	8008474 <xTaskResumeAll+0x2c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008488:	4d23      	ldr	r5, [pc, #140]	; (8008518 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800848a:	4e24      	ldr	r6, [pc, #144]	; (800851c <xTaskResumeAll+0xd4>)
 800848c:	4f24      	ldr	r7, [pc, #144]	; (8008520 <xTaskResumeAll+0xd8>)
 800848e:	e01e      	b.n	80084ce <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008490:	68eb      	ldr	r3, [r5, #12]
 8008492:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008494:	f104 0018 	add.w	r0, r4, #24
 8008498:	f7fe fdeb 	bl	8007072 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800849c:	1d21      	adds	r1, r4, #4
 800849e:	4608      	mov	r0, r1
 80084a0:	9101      	str	r1, [sp, #4]
 80084a2:	f7fe fde6 	bl	8007072 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80084a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80084a8:	6832      	ldr	r2, [r6, #0]
 80084aa:	9901      	ldr	r1, [sp, #4]
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d900      	bls.n	80084b2 <xTaskResumeAll+0x6a>
 80084b0:	6033      	str	r3, [r6, #0]
 80084b2:	2014      	movs	r0, #20
 80084b4:	fb00 7003 	mla	r0, r0, r3, r7
 80084b8:	f7fe fdb8 	bl	800702c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084bc:	4b19      	ldr	r3, [pc, #100]	; (8008524 <xTaskResumeAll+0xdc>)
 80084be:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d302      	bcc.n	80084ce <xTaskResumeAll+0x86>
						xYieldPending = pdTRUE;
 80084c8:	4b17      	ldr	r3, [pc, #92]	; (8008528 <xTaskResumeAll+0xe0>)
 80084ca:	2201      	movs	r2, #1
 80084cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80084ce:	682b      	ldr	r3, [r5, #0]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d1dd      	bne.n	8008490 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 80084d4:	b10c      	cbz	r4, 80084da <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 80084d6:	f7ff fdb7 	bl	8008048 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80084da:	4d14      	ldr	r5, [pc, #80]	; (800852c <xTaskResumeAll+0xe4>)
 80084dc:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80084de:	b144      	cbz	r4, 80084f2 <xTaskResumeAll+0xaa>
								xYieldPending = pdTRUE;
 80084e0:	4e11      	ldr	r6, [pc, #68]	; (8008528 <xTaskResumeAll+0xe0>)
 80084e2:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80084e4:	f7ff ff18 	bl	8008318 <xTaskIncrementTick>
 80084e8:	b100      	cbz	r0, 80084ec <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 80084ea:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80084ec:	3c01      	subs	r4, #1
 80084ee:	d1f9      	bne.n	80084e4 <xTaskResumeAll+0x9c>
						uxPendedTicks = 0;
 80084f0:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80084f2:	4b0d      	ldr	r3, [pc, #52]	; (8008528 <xTaskResumeAll+0xe0>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d0bc      	beq.n	8008474 <xTaskResumeAll+0x2c>
					taskYIELD_IF_USING_PREEMPTION();
 80084fa:	4b0d      	ldr	r3, [pc, #52]	; (8008530 <xTaskResumeAll+0xe8>)
 80084fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008500:	601a      	str	r2, [r3, #0]
 8008502:	f3bf 8f4f 	dsb	sy
 8008506:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800850a:	2401      	movs	r4, #1
 800850c:	e7b3      	b.n	8008476 <xTaskResumeAll+0x2e>
 800850e:	bf00      	nop
 8008510:	20014a28 	.word	0x20014a28
 8008514:	20014a1c 	.word	0x20014a1c
 8008518:	20014a64 	.word	0x20014a64
 800851c:	20014a30 	.word	0x20014a30
 8008520:	200145bc 	.word	0x200145bc
 8008524:	200145b0 	.word	0x200145b0
 8008528:	20014aa8 	.word	0x20014aa8
 800852c:	20014a24 	.word	0x20014a24
 8008530:	e000ed04 	.word	0xe000ed04

08008534 <vTaskDelay>:
	{
 8008534:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008536:	b940      	cbnz	r0, 800854a <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8008538:	4b0f      	ldr	r3, [pc, #60]	; (8008578 <vTaskDelay+0x44>)
 800853a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800853e:	601a      	str	r2, [r3, #0]
 8008540:	f3bf 8f4f 	dsb	sy
 8008544:	f3bf 8f6f 	isb	sy
	}
 8008548:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800854a:	4b0c      	ldr	r3, [pc, #48]	; (800857c <vTaskDelay+0x48>)
 800854c:	6819      	ldr	r1, [r3, #0]
 800854e:	b151      	cbz	r1, 8008566 <vTaskDelay+0x32>
 8008550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008554:	b672      	cpsid	i
 8008556:	f383 8811 	msr	BASEPRI, r3
 800855a:	f3bf 8f6f 	isb	sy
 800855e:	f3bf 8f4f 	dsb	sy
 8008562:	b662      	cpsie	i
 8008564:	e7fe      	b.n	8008564 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8008566:	f7ff fec9 	bl	80082fc <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800856a:	f7ff fe21 	bl	80081b0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800856e:	f7ff ff6b 	bl	8008448 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8008572:	2800      	cmp	r0, #0
 8008574:	d0e0      	beq.n	8008538 <vTaskDelay+0x4>
 8008576:	e7e7      	b.n	8008548 <vTaskDelay+0x14>
 8008578:	e000ed04 	.word	0xe000ed04
 800857c:	20014a28 	.word	0x20014a28

08008580 <vTaskSetApplicationTaskTag>:
	{
 8008580:	b538      	push	{r3, r4, r5, lr}
 8008582:	460d      	mov	r5, r1
		if( xTask == NULL )
 8008584:	4604      	mov	r4, r0
 8008586:	b908      	cbnz	r0, 800858c <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8008588:	4b04      	ldr	r3, [pc, #16]	; (800859c <vTaskSetApplicationTaskTag+0x1c>)
 800858a:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800858c:	f7fe fdea 	bl	8007164 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 8008590:	6565      	str	r5, [r4, #84]	; 0x54
	}
 8008592:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 8008596:	f7fe be0b 	b.w	80071b0 <vPortExitCritical>
 800859a:	bf00      	nop
 800859c:	200145b0 	.word	0x200145b0

080085a0 <xTaskCallApplicationTaskHook>:
	{
 80085a0:	4603      	mov	r3, r0
 80085a2:	4608      	mov	r0, r1
		if( xTask == NULL )
 80085a4:	b90b      	cbnz	r3, 80085aa <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 80085a6:	4b03      	ldr	r3, [pc, #12]	; (80085b4 <xTaskCallApplicationTaskHook+0x14>)
 80085a8:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 80085aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ac:	b103      	cbz	r3, 80085b0 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 80085ae:	4718      	bx	r3
	}
 80085b0:	4618      	mov	r0, r3
 80085b2:	4770      	bx	lr
 80085b4:	200145b0 	.word	0x200145b0

080085b8 <vTaskStartScheduler>:
{
 80085b8:	b510      	push	{r4, lr}
 80085ba:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80085bc:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80085be:	aa07      	add	r2, sp, #28
 80085c0:	a906      	add	r1, sp, #24
 80085c2:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80085c4:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80085c8:	f7fe fc1c 	bl	8006e04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80085cc:	9b05      	ldr	r3, [sp, #20]
 80085ce:	9a07      	ldr	r2, [sp, #28]
 80085d0:	9302      	str	r3, [sp, #8]
 80085d2:	9b06      	ldr	r3, [sp, #24]
 80085d4:	4919      	ldr	r1, [pc, #100]	; (800863c <vTaskStartScheduler+0x84>)
 80085d6:	481a      	ldr	r0, [pc, #104]	; (8008640 <vTaskStartScheduler+0x88>)
 80085d8:	e9cd 4300 	strd	r4, r3, [sp]
 80085dc:	4623      	mov	r3, r4
 80085de:	f7ff fe21 	bl	8008224 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80085e2:	b1e0      	cbz	r0, 800861e <vTaskStartScheduler+0x66>
			xReturn = xTimerCreateTimerTask();
 80085e4:	f000 faa6 	bl	8008b34 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80085e8:	2801      	cmp	r0, #1
 80085ea:	d11a      	bne.n	8008622 <vTaskStartScheduler+0x6a>
 80085ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f0:	b672      	cpsid	i
 80085f2:	f383 8811 	msr	BASEPRI, r3
 80085f6:	f3bf 8f6f 	isb	sy
 80085fa:	f3bf 8f4f 	dsb	sy
 80085fe:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8008600:	4b10      	ldr	r3, [pc, #64]	; (8008644 <vTaskStartScheduler+0x8c>)
 8008602:	f04f 32ff 	mov.w	r2, #4294967295
		traceTASK_SWITCHED_IN();
 8008606:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 8008608:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800860a:	4b0f      	ldr	r3, [pc, #60]	; (8008648 <vTaskStartScheduler+0x90>)
 800860c:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800860e:	4b0f      	ldr	r3, [pc, #60]	; (800864c <vTaskStartScheduler+0x94>)
 8008610:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 8008612:	4b0f      	ldr	r3, [pc, #60]	; (8008650 <vTaskStartScheduler+0x98>)
 8008614:	6818      	ldr	r0, [r3, #0]
 8008616:	f7ff ffc3 	bl	80085a0 <xTaskCallApplicationTaskHook>
		if( xPortStartScheduler() != pdFALSE )
 800861a:	f7fe fe45 	bl	80072a8 <xPortStartScheduler>
}
 800861e:	b008      	add	sp, #32
 8008620:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008622:	3001      	adds	r0, #1
 8008624:	d1fb      	bne.n	800861e <vTaskStartScheduler+0x66>
 8008626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862a:	b672      	cpsid	i
 800862c:	f383 8811 	msr	BASEPRI, r3
 8008630:	f3bf 8f6f 	isb	sy
 8008634:	f3bf 8f4f 	dsb	sy
 8008638:	b662      	cpsie	i
 800863a:	e7fe      	b.n	800863a <vTaskStartScheduler+0x82>
 800863c:	0802a84c 	.word	0x0802a84c
 8008640:	08008149 	.word	0x08008149
 8008644:	20014a5c 	.word	0x20014a5c
 8008648:	20014a78 	.word	0x20014a78
 800864c:	20014aa4 	.word	0x20014aa4
 8008650:	200145b0 	.word	0x200145b0

08008654 <vTaskSwitchContext>:
{
 8008654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008656:	4b1e      	ldr	r3, [pc, #120]	; (80086d0 <vTaskSwitchContext+0x7c>)
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	4b1e      	ldr	r3, [pc, #120]	; (80086d4 <vTaskSwitchContext+0x80>)
 800865c:	b112      	cbz	r2, 8008664 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800865e:	2201      	movs	r2, #1
 8008660:	601a      	str	r2, [r3, #0]
}
 8008662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 8008664:	4e1c      	ldr	r6, [pc, #112]	; (80086d8 <vTaskSwitchContext+0x84>)
 8008666:	2101      	movs	r1, #1
		xYieldPending = pdFALSE;
 8008668:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800866a:	6830      	ldr	r0, [r6, #0]
 800866c:	f7ff ff98 	bl	80085a0 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008670:	4d1a      	ldr	r5, [pc, #104]	; (80086dc <vTaskSwitchContext+0x88>)
 8008672:	4a1b      	ldr	r2, [pc, #108]	; (80086e0 <vTaskSwitchContext+0x8c>)
 8008674:	f04f 0c14 	mov.w	ip, #20
 8008678:	682b      	ldr	r3, [r5, #0]
 800867a:	4617      	mov	r7, r2
 800867c:	fb0c f103 	mul.w	r1, ip, r3
 8008680:	5854      	ldr	r4, [r2, r1]
 8008682:	1850      	adds	r0, r2, r1
 8008684:	b1ac      	cbz	r4, 80086b2 <vTaskSwitchContext+0x5e>
 8008686:	6844      	ldr	r4, [r0, #4]
 8008688:	3108      	adds	r1, #8
 800868a:	6864      	ldr	r4, [r4, #4]
 800868c:	440a      	add	r2, r1
		traceTASK_SWITCHED_IN();
 800868e:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008690:	4294      	cmp	r4, r2
 8008692:	6044      	str	r4, [r0, #4]
 8008694:	bf04      	itt	eq
 8008696:	6862      	ldreq	r2, [r4, #4]
 8008698:	6042      	streq	r2, [r0, #4]
 800869a:	2214      	movs	r2, #20
 800869c:	fb02 7203 	mla	r2, r2, r3, r7
 80086a0:	6852      	ldr	r2, [r2, #4]
 80086a2:	68d2      	ldr	r2, [r2, #12]
 80086a4:	6032      	str	r2, [r6, #0]
 80086a6:	602b      	str	r3, [r5, #0]
		traceTASK_SWITCHED_IN();
 80086a8:	6830      	ldr	r0, [r6, #0]
}
 80086aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 80086ae:	f7ff bf77 	b.w	80085a0 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086b2:	b953      	cbnz	r3, 80086ca <vTaskSwitchContext+0x76>
 80086b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b8:	b672      	cpsid	i
 80086ba:	f383 8811 	msr	BASEPRI, r3
 80086be:	f3bf 8f6f 	isb	sy
 80086c2:	f3bf 8f4f 	dsb	sy
 80086c6:	b662      	cpsie	i
 80086c8:	e7fe      	b.n	80086c8 <vTaskSwitchContext+0x74>
 80086ca:	3b01      	subs	r3, #1
 80086cc:	e7d6      	b.n	800867c <vTaskSwitchContext+0x28>
 80086ce:	bf00      	nop
 80086d0:	20014a28 	.word	0x20014a28
 80086d4:	20014aa8 	.word	0x20014aa8
 80086d8:	200145b0 	.word	0x200145b0
 80086dc:	20014a30 	.word	0x20014a30
 80086e0:	200145bc 	.word	0x200145bc

080086e4 <vTaskPlaceOnEventList>:
{
 80086e4:	b510      	push	{r4, lr}
 80086e6:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80086e8:	b950      	cbnz	r0, 8008700 <vTaskPlaceOnEventList+0x1c>
 80086ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ee:	b672      	cpsid	i
 80086f0:	f383 8811 	msr	BASEPRI, r3
 80086f4:	f3bf 8f6f 	isb	sy
 80086f8:	f3bf 8f4f 	dsb	sy
 80086fc:	b662      	cpsie	i
 80086fe:	e7fe      	b.n	80086fe <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008700:	4b05      	ldr	r3, [pc, #20]	; (8008718 <vTaskPlaceOnEventList+0x34>)
 8008702:	6819      	ldr	r1, [r3, #0]
 8008704:	3118      	adds	r1, #24
 8008706:	f7fe fc9d 	bl	8007044 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800870a:	4620      	mov	r0, r4
 800870c:	2101      	movs	r1, #1
}
 800870e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008712:	f7ff bd4d 	b.w	80081b0 <prvAddCurrentTaskToDelayedList>
 8008716:	bf00      	nop
 8008718:	200145b0 	.word	0x200145b0

0800871c <vTaskPlaceOnEventListRestricted>:
	{
 800871c:	b538      	push	{r3, r4, r5, lr}
 800871e:	460d      	mov	r5, r1
 8008720:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8008722:	b950      	cbnz	r0, 800873a <vTaskPlaceOnEventListRestricted+0x1e>
 8008724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008728:	b672      	cpsid	i
 800872a:	f383 8811 	msr	BASEPRI, r3
 800872e:	f3bf 8f6f 	isb	sy
 8008732:	f3bf 8f4f 	dsb	sy
 8008736:	b662      	cpsie	i
 8008738:	e7fe      	b.n	8008738 <vTaskPlaceOnEventListRestricted+0x1c>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800873a:	4b07      	ldr	r3, [pc, #28]	; (8008758 <vTaskPlaceOnEventListRestricted+0x3c>)
 800873c:	6819      	ldr	r1, [r3, #0]
 800873e:	3118      	adds	r1, #24
 8008740:	f7fe fc74 	bl	800702c <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8008744:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008746:	4621      	mov	r1, r4
 8008748:	bf0c      	ite	eq
 800874a:	4628      	moveq	r0, r5
 800874c:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8008750:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008754:	f7ff bd2c 	b.w	80081b0 <prvAddCurrentTaskToDelayedList>
 8008758:	200145b0 	.word	0x200145b0

0800875c <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800875c:	68c3      	ldr	r3, [r0, #12]
{
 800875e:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008760:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8008762:	b954      	cbnz	r4, 800877a <xTaskRemoveFromEventList+0x1e>
 8008764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008768:	b672      	cpsid	i
 800876a:	f383 8811 	msr	BASEPRI, r3
 800876e:	f3bf 8f6f 	isb	sy
 8008772:	f3bf 8f4f 	dsb	sy
 8008776:	b662      	cpsie	i
 8008778:	e7fe      	b.n	8008778 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800877a:	f104 0118 	add.w	r1, r4, #24
 800877e:	4608      	mov	r0, r1
 8008780:	9101      	str	r1, [sp, #4]
 8008782:	f7fe fc76 	bl	8007072 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008786:	4b12      	ldr	r3, [pc, #72]	; (80087d0 <xTaskRemoveFromEventList+0x74>)
 8008788:	9901      	ldr	r1, [sp, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	b9e3      	cbnz	r3, 80087c8 <xTaskRemoveFromEventList+0x6c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800878e:	1d21      	adds	r1, r4, #4
 8008790:	4608      	mov	r0, r1
 8008792:	9101      	str	r1, [sp, #4]
 8008794:	f7fe fc6d 	bl	8007072 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008798:	4a0e      	ldr	r2, [pc, #56]	; (80087d4 <xTaskRemoveFromEventList+0x78>)
 800879a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800879c:	6810      	ldr	r0, [r2, #0]
 800879e:	9901      	ldr	r1, [sp, #4]
 80087a0:	4283      	cmp	r3, r0
 80087a2:	d900      	bls.n	80087a6 <xTaskRemoveFromEventList+0x4a>
 80087a4:	6013      	str	r3, [r2, #0]
 80087a6:	4a0c      	ldr	r2, [pc, #48]	; (80087d8 <xTaskRemoveFromEventList+0x7c>)
 80087a8:	2014      	movs	r0, #20
 80087aa:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80087ae:	f7fe fc3d 	bl	800702c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80087b2:	4b0a      	ldr	r3, [pc, #40]	; (80087dc <xTaskRemoveFromEventList+0x80>)
 80087b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d906      	bls.n	80087cc <xTaskRemoveFromEventList+0x70>
		xYieldPending = pdTRUE;
 80087be:	2001      	movs	r0, #1
 80087c0:	4b07      	ldr	r3, [pc, #28]	; (80087e0 <xTaskRemoveFromEventList+0x84>)
 80087c2:	6018      	str	r0, [r3, #0]
}
 80087c4:	b002      	add	sp, #8
 80087c6:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80087c8:	4806      	ldr	r0, [pc, #24]	; (80087e4 <xTaskRemoveFromEventList+0x88>)
 80087ca:	e7f0      	b.n	80087ae <xTaskRemoveFromEventList+0x52>
		xReturn = pdFALSE;
 80087cc:	2000      	movs	r0, #0
	return xReturn;
 80087ce:	e7f9      	b.n	80087c4 <xTaskRemoveFromEventList+0x68>
 80087d0:	20014a28 	.word	0x20014a28
 80087d4:	20014a30 	.word	0x20014a30
 80087d8:	200145bc 	.word	0x200145bc
 80087dc:	200145b0 	.word	0x200145b0
 80087e0:	20014aa8 	.word	0x20014aa8
 80087e4:	20014a64 	.word	0x20014a64

080087e8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80087e8:	4b03      	ldr	r3, [pc, #12]	; (80087f8 <vTaskInternalSetTimeOutState+0x10>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80087ee:	4b03      	ldr	r3, [pc, #12]	; (80087fc <vTaskInternalSetTimeOutState+0x14>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	6043      	str	r3, [r0, #4]
}
 80087f4:	4770      	bx	lr
 80087f6:	bf00      	nop
 80087f8:	20014a60 	.word	0x20014a60
 80087fc:	20014aa4 	.word	0x20014aa4

08008800 <xTaskCheckForTimeOut>:
{
 8008800:	b570      	push	{r4, r5, r6, lr}
 8008802:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8008804:	4605      	mov	r5, r0
 8008806:	b950      	cbnz	r0, 800881e <xTaskCheckForTimeOut+0x1e>
 8008808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800880c:	b672      	cpsid	i
 800880e:	f383 8811 	msr	BASEPRI, r3
 8008812:	f3bf 8f6f 	isb	sy
 8008816:	f3bf 8f4f 	dsb	sy
 800881a:	b662      	cpsie	i
 800881c:	e7fe      	b.n	800881c <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 800881e:	b951      	cbnz	r1, 8008836 <xTaskCheckForTimeOut+0x36>
 8008820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008824:	b672      	cpsid	i
 8008826:	f383 8811 	msr	BASEPRI, r3
 800882a:	f3bf 8f6f 	isb	sy
 800882e:	f3bf 8f4f 	dsb	sy
 8008832:	b662      	cpsie	i
 8008834:	e7fe      	b.n	8008834 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 8008836:	f7fe fc95 	bl	8007164 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800883a:	4b0f      	ldr	r3, [pc, #60]	; (8008878 <xTaskCheckForTimeOut+0x78>)
 800883c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800883e:	6823      	ldr	r3, [r4, #0]
 8008840:	1c5a      	adds	r2, r3, #1
 8008842:	d010      	beq.n	8008866 <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008844:	480d      	ldr	r0, [pc, #52]	; (800887c <xTaskCheckForTimeOut+0x7c>)
 8008846:	682e      	ldr	r6, [r5, #0]
 8008848:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800884a:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800884c:	4286      	cmp	r6, r0
 800884e:	d001      	beq.n	8008854 <xTaskCheckForTimeOut+0x54>
 8008850:	428a      	cmp	r2, r1
 8008852:	d90f      	bls.n	8008874 <xTaskCheckForTimeOut+0x74>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008854:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008856:	4283      	cmp	r3, r0
 8008858:	d90a      	bls.n	8008870 <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= xElapsedTime;
 800885a:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800885c:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800885e:	4413      	add	r3, r2
 8008860:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008862:	f7ff ffc1 	bl	80087e8 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8008866:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008868:	f7fe fca2 	bl	80071b0 <vPortExitCritical>
}
 800886c:	4620      	mov	r0, r4
 800886e:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8008870:	2300      	movs	r3, #0
 8008872:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8008874:	2401      	movs	r4, #1
 8008876:	e7f7      	b.n	8008868 <xTaskCheckForTimeOut+0x68>
 8008878:	20014aa4 	.word	0x20014aa4
 800887c:	20014a60 	.word	0x20014a60

08008880 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8008880:	4b01      	ldr	r3, [pc, #4]	; (8008888 <vTaskMissedYield+0x8>)
 8008882:	2201      	movs	r2, #1
 8008884:	601a      	str	r2, [r3, #0]
}
 8008886:	4770      	bx	lr
 8008888:	20014aa8 	.word	0x20014aa8

0800888c <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800888c:	4b01      	ldr	r3, [pc, #4]	; (8008894 <xTaskGetCurrentTaskHandle+0x8>)
 800888e:	6818      	ldr	r0, [r3, #0]
	}
 8008890:	4770      	bx	lr
 8008892:	bf00      	nop
 8008894:	200145b0 	.word	0x200145b0

08008898 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8008898:	4b05      	ldr	r3, [pc, #20]	; (80088b0 <xTaskGetSchedulerState+0x18>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	b133      	cbz	r3, 80088ac <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800889e:	4b05      	ldr	r3, [pc, #20]	; (80088b4 <xTaskGetSchedulerState+0x1c>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80088a4:	bf0c      	ite	eq
 80088a6:	2002      	moveq	r0, #2
 80088a8:	2000      	movne	r0, #0
 80088aa:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80088ac:	2001      	movs	r0, #1
	}
 80088ae:	4770      	bx	lr
 80088b0:	20014a78 	.word	0x20014a78
 80088b4:	20014a28 	.word	0x20014a28

080088b8 <xTaskPriorityInherit>:
	{
 80088b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 80088ba:	4604      	mov	r4, r0
 80088bc:	b348      	cbz	r0, 8008912 <xTaskPriorityInherit+0x5a>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80088be:	4a1c      	ldr	r2, [pc, #112]	; (8008930 <xTaskPriorityInherit+0x78>)
 80088c0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80088c2:	6811      	ldr	r1, [r2, #0]
 80088c4:	4616      	mov	r6, r2
 80088c6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80088c8:	428b      	cmp	r3, r1
 80088ca:	d228      	bcs.n	800891e <xTaskPriorityInherit+0x66>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80088cc:	6982      	ldr	r2, [r0, #24]
 80088ce:	2a00      	cmp	r2, #0
 80088d0:	db04      	blt.n	80088dc <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088d2:	6832      	ldr	r2, [r6, #0]
 80088d4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80088d6:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80088da:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80088dc:	2214      	movs	r2, #20
 80088de:	4d15      	ldr	r5, [pc, #84]	; (8008934 <xTaskPriorityInherit+0x7c>)
 80088e0:	fb02 5303 	mla	r3, r2, r3, r5
 80088e4:	6962      	ldr	r2, [r4, #20]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d115      	bne.n	8008916 <xTaskPriorityInherit+0x5e>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088ea:	1d21      	adds	r1, r4, #4
 80088ec:	4608      	mov	r0, r1
 80088ee:	9101      	str	r1, [sp, #4]
 80088f0:	f7fe fbbf 	bl	8007072 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80088f4:	6833      	ldr	r3, [r6, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80088f6:	4a10      	ldr	r2, [pc, #64]	; (8008938 <xTaskPriorityInherit+0x80>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80088f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80088fa:	6810      	ldr	r0, [r2, #0]
 80088fc:	9901      	ldr	r1, [sp, #4]
 80088fe:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008900:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008902:	d900      	bls.n	8008906 <xTaskPriorityInherit+0x4e>
 8008904:	6013      	str	r3, [r2, #0]
 8008906:	2014      	movs	r0, #20
 8008908:	fb00 5003 	mla	r0, r0, r3, r5
 800890c:	f7fe fb8e 	bl	800702c <vListInsertEnd>
				xReturn = pdTRUE;
 8008910:	2001      	movs	r0, #1
	}
 8008912:	b002      	add	sp, #8
 8008914:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008916:	6833      	ldr	r3, [r6, #0]
 8008918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800891a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800891c:	e7f8      	b.n	8008910 <xTaskPriorityInherit+0x58>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800891e:	6813      	ldr	r3, [r2, #0]
 8008920:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8008922:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8008924:	42a0      	cmp	r0, r4
 8008926:	bf2c      	ite	cs
 8008928:	2000      	movcs	r0, #0
 800892a:	2001      	movcc	r0, #1
 800892c:	e7f1      	b.n	8008912 <xTaskPriorityInherit+0x5a>
 800892e:	bf00      	nop
 8008930:	200145b0 	.word	0x200145b0
 8008934:	200145bc 	.word	0x200145bc
 8008938:	20014a30 	.word	0x20014a30

0800893c <xTaskPriorityDisinherit>:
	{
 800893c:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 800893e:	b910      	cbnz	r0, 8008946 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8008940:	2000      	movs	r0, #0
	}
 8008942:	b002      	add	sp, #8
 8008944:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8008946:	4b1e      	ldr	r3, [pc, #120]	; (80089c0 <xTaskPriorityDisinherit+0x84>)
 8008948:	681c      	ldr	r4, [r3, #0]
 800894a:	4284      	cmp	r4, r0
 800894c:	d00a      	beq.n	8008964 <xTaskPriorityDisinherit+0x28>
 800894e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008952:	b672      	cpsid	i
 8008954:	f383 8811 	msr	BASEPRI, r3
 8008958:	f3bf 8f6f 	isb	sy
 800895c:	f3bf 8f4f 	dsb	sy
 8008960:	b662      	cpsie	i
 8008962:	e7fe      	b.n	8008962 <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 8008964:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008966:	b953      	cbnz	r3, 800897e <xTaskPriorityDisinherit+0x42>
 8008968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800896c:	b672      	cpsid	i
 800896e:	f383 8811 	msr	BASEPRI, r3
 8008972:	f3bf 8f6f 	isb	sy
 8008976:	f3bf 8f4f 	dsb	sy
 800897a:	b662      	cpsie	i
 800897c:	e7fe      	b.n	800897c <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800897e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8008980:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008982:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 8008984:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008986:	4291      	cmp	r1, r2
 8008988:	d0da      	beq.n	8008940 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1d8      	bne.n	8008940 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800898e:	1d21      	adds	r1, r4, #4
 8008990:	4608      	mov	r0, r1
 8008992:	9101      	str	r1, [sp, #4]
 8008994:	f7fe fb6d 	bl	8007072 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008998:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 800899a:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800899c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80089a0:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089a2:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80089a4:	4a07      	ldr	r2, [pc, #28]	; (80089c4 <xTaskPriorityDisinherit+0x88>)
 80089a6:	6810      	ldr	r0, [r2, #0]
 80089a8:	4283      	cmp	r3, r0
 80089aa:	d900      	bls.n	80089ae <xTaskPriorityDisinherit+0x72>
 80089ac:	6013      	str	r3, [r2, #0]
 80089ae:	4a06      	ldr	r2, [pc, #24]	; (80089c8 <xTaskPriorityDisinherit+0x8c>)
 80089b0:	2014      	movs	r0, #20
 80089b2:	fb00 2003 	mla	r0, r0, r3, r2
 80089b6:	f7fe fb39 	bl	800702c <vListInsertEnd>
					xReturn = pdTRUE;
 80089ba:	2001      	movs	r0, #1
		return xReturn;
 80089bc:	e7c1      	b.n	8008942 <xTaskPriorityDisinherit+0x6>
 80089be:	bf00      	nop
 80089c0:	200145b0 	.word	0x200145b0
 80089c4:	20014a30 	.word	0x20014a30
 80089c8:	200145bc 	.word	0x200145bc

080089cc <vTaskPriorityDisinheritAfterTimeout>:
	{
 80089cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 80089ce:	4604      	mov	r4, r0
 80089d0:	2800      	cmp	r0, #0
 80089d2:	d048      	beq.n	8008a66 <vTaskPriorityDisinheritAfterTimeout+0x9a>
			configASSERT( pxTCB->uxMutexesHeld );
 80089d4:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80089d6:	b952      	cbnz	r2, 80089ee <vTaskPriorityDisinheritAfterTimeout+0x22>
 80089d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089dc:	b672      	cpsid	i
 80089de:	f383 8811 	msr	BASEPRI, r3
 80089e2:	f3bf 8f6f 	isb	sy
 80089e6:	f3bf 8f4f 	dsb	sy
 80089ea:	b662      	cpsie	i
 80089ec:	e7fe      	b.n	80089ec <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80089ee:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80089f0:	4299      	cmp	r1, r3
 80089f2:	bf38      	it	cc
 80089f4:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 80089f6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80089f8:	428b      	cmp	r3, r1
 80089fa:	d034      	beq.n	8008a66 <vTaskPriorityDisinheritAfterTimeout+0x9a>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80089fc:	2a01      	cmp	r2, #1
 80089fe:	d132      	bne.n	8008a66 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					configASSERT( pxTCB != pxCurrentTCB );
 8008a00:	4a1a      	ldr	r2, [pc, #104]	; (8008a6c <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 8008a02:	6812      	ldr	r2, [r2, #0]
 8008a04:	4282      	cmp	r2, r0
 8008a06:	d10a      	bne.n	8008a1e <vTaskPriorityDisinheritAfterTimeout+0x52>
 8008a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0c:	b672      	cpsid	i
 8008a0e:	f383 8811 	msr	BASEPRI, r3
 8008a12:	f3bf 8f6f 	isb	sy
 8008a16:	f3bf 8f4f 	dsb	sy
 8008a1a:	b662      	cpsie	i
 8008a1c:	e7fe      	b.n	8008a1c <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008a1e:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008a20:	4d13      	ldr	r5, [pc, #76]	; (8008a70 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008a22:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008a24:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 8008a28:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008a2a:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a2e:	bfa8      	it	ge
 8008a30:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008a34:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a36:	bfa8      	it	ge
 8008a38:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d113      	bne.n	8008a66 <vTaskPriorityDisinheritAfterTimeout+0x9a>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a3e:	1d01      	adds	r1, r0, #4
 8008a40:	4608      	mov	r0, r1
 8008a42:	9101      	str	r1, [sp, #4]
 8008a44:	f7fe fb15 	bl	8007072 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8008a48:	4a0a      	ldr	r2, [pc, #40]	; (8008a74 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 8008a4a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008a4c:	6810      	ldr	r0, [r2, #0]
 8008a4e:	9901      	ldr	r1, [sp, #4]
 8008a50:	4283      	cmp	r3, r0
 8008a52:	d900      	bls.n	8008a56 <vTaskPriorityDisinheritAfterTimeout+0x8a>
 8008a54:	6013      	str	r3, [r2, #0]
 8008a56:	2014      	movs	r0, #20
 8008a58:	fb00 5003 	mla	r0, r0, r3, r5
	}
 8008a5c:	b003      	add	sp, #12
 8008a5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 8008a62:	f7fe bae3 	b.w	800702c <vListInsertEnd>
	}
 8008a66:	b003      	add	sp, #12
 8008a68:	bd30      	pop	{r4, r5, pc}
 8008a6a:	bf00      	nop
 8008a6c:	200145b0 	.word	0x200145b0
 8008a70:	200145bc 	.word	0x200145bc
 8008a74:	20014a30 	.word	0x20014a30

08008a78 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8008a78:	4b04      	ldr	r3, [pc, #16]	; (8008a8c <pvTaskIncrementMutexHeldCount+0x14>)
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	b11a      	cbz	r2, 8008a86 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8008a7e:	6819      	ldr	r1, [r3, #0]
 8008a80:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8008a82:	3201      	adds	r2, #1
 8008a84:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 8008a86:	6818      	ldr	r0, [r3, #0]
	}
 8008a88:	4770      	bx	lr
 8008a8a:	bf00      	nop
 8008a8c:	200145b0 	.word	0x200145b0

08008a90 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008a90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8008a92:	4c11      	ldr	r4, [pc, #68]	; (8008ad8 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8008a94:	f7fe fb66 	bl	8007164 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8008a98:	6825      	ldr	r5, [r4, #0]
 8008a9a:	b9bd      	cbnz	r5, 8008acc <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8008a9c:	4f0f      	ldr	r7, [pc, #60]	; (8008adc <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8008a9e:	4e10      	ldr	r6, [pc, #64]	; (8008ae0 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8008aa0:	4638      	mov	r0, r7
 8008aa2:	f7fe fab5 	bl	8007010 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008aa6:	4630      	mov	r0, r6
 8008aa8:	f7fe fab2 	bl	8007010 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008aac:	4b0d      	ldr	r3, [pc, #52]	; (8008ae4 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008aae:	4a0e      	ldr	r2, [pc, #56]	; (8008ae8 <prvCheckForValidListAndQueue+0x58>)
 8008ab0:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8008ab2:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008ab4:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8008ab6:	4b0d      	ldr	r3, [pc, #52]	; (8008aec <prvCheckForValidListAndQueue+0x5c>)
 8008ab8:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008aba:	4b0d      	ldr	r3, [pc, #52]	; (8008af0 <prvCheckForValidListAndQueue+0x60>)
 8008abc:	9500      	str	r5, [sp, #0]
 8008abe:	f7fe fd59 	bl	8007574 <xQueueGenericCreateStatic>
 8008ac2:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008ac4:	b110      	cbz	r0, 8008acc <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008ac6:	490b      	ldr	r1, [pc, #44]	; (8008af4 <prvCheckForValidListAndQueue+0x64>)
 8008ac8:	f7ff f9dc 	bl	8007e84 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8008acc:	b003      	add	sp, #12
 8008ace:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8008ad2:	f7fe bb6d 	b.w	80071b0 <vPortExitCritical>
 8008ad6:	bf00      	nop
 8008ad8:	20014bd0 	.word	0x20014bd0
 8008adc:	20014b54 	.word	0x20014b54
 8008ae0:	20014b68 	.word	0x20014b68
 8008ae4:	20014aac 	.word	0x20014aac
 8008ae8:	20014ab4 	.word	0x20014ab4
 8008aec:	20014ab0 	.word	0x20014ab0
 8008af0:	20014b80 	.word	0x20014b80
 8008af4:	0802a851 	.word	0x0802a851

08008af8 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8008af8:	4291      	cmp	r1, r2
{
 8008afa:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008afc:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008afe:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8008b00:	d80a      	bhi.n	8008b18 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b02:	1ad2      	subs	r2, r2, r3
 8008b04:	6983      	ldr	r3, [r0, #24]
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d20d      	bcs.n	8008b26 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008b0a:	1d01      	adds	r1, r0, #4
 8008b0c:	4b07      	ldr	r3, [pc, #28]	; (8008b2c <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008b0e:	6818      	ldr	r0, [r3, #0]
 8008b10:	f7fe fa98 	bl	8007044 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8008b14:	2000      	movs	r0, #0
}
 8008b16:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d201      	bcs.n	8008b20 <prvInsertTimerInActiveList+0x28>
 8008b1c:	4299      	cmp	r1, r3
 8008b1e:	d202      	bcs.n	8008b26 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008b20:	1d01      	adds	r1, r0, #4
 8008b22:	4b03      	ldr	r3, [pc, #12]	; (8008b30 <prvInsertTimerInActiveList+0x38>)
 8008b24:	e7f3      	b.n	8008b0e <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8008b26:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8008b28:	e7f5      	b.n	8008b16 <prvInsertTimerInActiveList+0x1e>
 8008b2a:	bf00      	nop
 8008b2c:	20014ab0 	.word	0x20014ab0
 8008b30:	20014aac 	.word	0x20014aac

08008b34 <xTimerCreateTimerTask>:
{
 8008b34:	b510      	push	{r4, lr}
 8008b36:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8008b38:	f7ff ffaa 	bl	8008a90 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8008b3c:	4b13      	ldr	r3, [pc, #76]	; (8008b8c <xTimerCreateTimerTask+0x58>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	b1b3      	cbz	r3, 8008b70 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008b42:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008b44:	aa07      	add	r2, sp, #28
 8008b46:	a906      	add	r1, sp, #24
 8008b48:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008b4a:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008b4e:	f7fe f965 	bl	8006e1c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008b52:	9b05      	ldr	r3, [sp, #20]
 8008b54:	9a07      	ldr	r2, [sp, #28]
 8008b56:	9302      	str	r3, [sp, #8]
 8008b58:	9b06      	ldr	r3, [sp, #24]
 8008b5a:	490d      	ldr	r1, [pc, #52]	; (8008b90 <xTimerCreateTimerTask+0x5c>)
 8008b5c:	9301      	str	r3, [sp, #4]
 8008b5e:	2302      	movs	r3, #2
 8008b60:	480c      	ldr	r0, [pc, #48]	; (8008b94 <xTimerCreateTimerTask+0x60>)
 8008b62:	9300      	str	r3, [sp, #0]
 8008b64:	4623      	mov	r3, r4
 8008b66:	f7ff fb5d 	bl	8008224 <xTaskCreateStatic>
 8008b6a:	4b0b      	ldr	r3, [pc, #44]	; (8008b98 <xTimerCreateTimerTask+0x64>)
 8008b6c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8008b6e:	b950      	cbnz	r0, 8008b86 <xTimerCreateTimerTask+0x52>
 8008b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b74:	b672      	cpsid	i
 8008b76:	f383 8811 	msr	BASEPRI, r3
 8008b7a:	f3bf 8f6f 	isb	sy
 8008b7e:	f3bf 8f4f 	dsb	sy
 8008b82:	b662      	cpsie	i
	configASSERT( xReturn );
 8008b84:	e7fe      	b.n	8008b84 <xTimerCreateTimerTask+0x50>
}
 8008b86:	2001      	movs	r0, #1
 8008b88:	b008      	add	sp, #32
 8008b8a:	bd10      	pop	{r4, pc}
 8008b8c:	20014bd0 	.word	0x20014bd0
 8008b90:	0802a856 	.word	0x0802a856
 8008b94:	08008c75 	.word	0x08008c75
 8008b98:	20014bd4 	.word	0x20014bd4

08008b9c <xTimerGenericCommand>:
{
 8008b9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008b9e:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8008ba0:	4604      	mov	r4, r0
{
 8008ba2:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8008ba4:	b950      	cbnz	r0, 8008bbc <xTimerGenericCommand+0x20>
 8008ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008baa:	b672      	cpsid	i
 8008bac:	f383 8811 	msr	BASEPRI, r3
 8008bb0:	f3bf 8f6f 	isb	sy
 8008bb4:	f3bf 8f4f 	dsb	sy
 8008bb8:	b662      	cpsie	i
 8008bba:	e7fe      	b.n	8008bba <xTimerGenericCommand+0x1e>
	if( xTimerQueue != NULL )
 8008bbc:	4d0c      	ldr	r5, [pc, #48]	; (8008bf0 <xTimerGenericCommand+0x54>)
 8008bbe:	6828      	ldr	r0, [r5, #0]
 8008bc0:	b178      	cbz	r0, 8008be2 <xTimerGenericCommand+0x46>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008bc2:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008bc4:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008bc6:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008bca:	dc0c      	bgt.n	8008be6 <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008bcc:	f7ff fe64 	bl	8008898 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008bd0:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008bd2:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008bd4:	4669      	mov	r1, sp
 8008bd6:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008bd8:	bf0c      	ite	eq
 8008bda:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008bdc:	461a      	movne	r2, r3
 8008bde:	f7fe fd93 	bl	8007708 <xQueueGenericSend>
}
 8008be2:	b004      	add	sp, #16
 8008be4:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008be6:	2300      	movs	r3, #0
 8008be8:	4669      	mov	r1, sp
 8008bea:	f7fe fe99 	bl	8007920 <xQueueGenericSendFromISR>
 8008bee:	e7f8      	b.n	8008be2 <xTimerGenericCommand+0x46>
 8008bf0:	20014bd0 	.word	0x20014bd0

08008bf4 <prvSwitchTimerLists>:
{
 8008bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008bf6:	4d1d      	ldr	r5, [pc, #116]	; (8008c6c <prvSwitchTimerLists+0x78>)
{
 8008bf8:	b085      	sub	sp, #20
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008bfa:	2700      	movs	r7, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008bfc:	682b      	ldr	r3, [r5, #0]
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	b92a      	cbnz	r2, 8008c0e <prvSwitchTimerLists+0x1a>
	pxCurrentTimerList = pxOverflowTimerList;
 8008c02:	4a1b      	ldr	r2, [pc, #108]	; (8008c70 <prvSwitchTimerLists+0x7c>)
 8008c04:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008c06:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8008c08:	6029      	str	r1, [r5, #0]
}
 8008c0a:	b005      	add	sp, #20
 8008c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c0e:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c10:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c12:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c14:	1d21      	adds	r1, r4, #4
 8008c16:	4608      	mov	r0, r1
 8008c18:	9103      	str	r1, [sp, #12]
 8008c1a:	f7fe fa2a 	bl	8007072 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c1e:	6a23      	ldr	r3, [r4, #32]
 8008c20:	4620      	mov	r0, r4
 8008c22:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c24:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8008c28:	9903      	ldr	r1, [sp, #12]
 8008c2a:	f013 0f04 	tst.w	r3, #4
 8008c2e:	d0e5      	beq.n	8008bfc <prvSwitchTimerLists+0x8>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008c30:	69a3      	ldr	r3, [r4, #24]
 8008c32:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8008c34:	429e      	cmp	r6, r3
 8008c36:	d205      	bcs.n	8008c44 <prvSwitchTimerLists+0x50>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c38:	6828      	ldr	r0, [r5, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008c3a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c3c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c3e:	f7fe fa01 	bl	8007044 <vListInsert>
 8008c42:	e7db      	b.n	8008bfc <prvSwitchTimerLists+0x8>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c44:	2300      	movs	r3, #0
 8008c46:	4632      	mov	r2, r6
 8008c48:	4620      	mov	r0, r4
 8008c4a:	9700      	str	r7, [sp, #0]
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	f7ff ffa5 	bl	8008b9c <xTimerGenericCommand>
				configASSERT( xResult );
 8008c52:	2800      	cmp	r0, #0
 8008c54:	d1d2      	bne.n	8008bfc <prvSwitchTimerLists+0x8>
 8008c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c5a:	b672      	cpsid	i
 8008c5c:	f383 8811 	msr	BASEPRI, r3
 8008c60:	f3bf 8f6f 	isb	sy
 8008c64:	f3bf 8f4f 	dsb	sy
 8008c68:	b662      	cpsie	i
 8008c6a:	e7fe      	b.n	8008c6a <prvSwitchTimerLists+0x76>
 8008c6c:	20014aac 	.word	0x20014aac
 8008c70:	20014ab0 	.word	0x20014ab0

08008c74 <prvTimerTask>:
{
 8008c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008c78:	4f7a      	ldr	r7, [pc, #488]	; (8008e64 <prvTimerTask+0x1f0>)
{
 8008c7a:	b087      	sub	sp, #28
					portYIELD_WITHIN_API();
 8008c7c:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 8008e74 <prvTimerTask+0x200>
 8008c80:	46b9      	mov	r9, r7
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	f8d3 b000 	ldr.w	fp, [r3]
 8008c88:	f1bb 0f00 	cmp.w	fp, #0
 8008c8c:	d028      	beq.n	8008ce0 <prvTimerTask+0x6c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c8e:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008c90:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c92:	f8d3 b000 	ldr.w	fp, [r3]
	if( xTimeNow < xLastTime )
 8008c96:	4e74      	ldr	r6, [pc, #464]	; (8008e68 <prvTimerTask+0x1f4>)
	vTaskSuspendAll();
 8008c98:	f7ff fb30 	bl	80082fc <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8008c9c:	f7ff fb36 	bl	800830c <xTaskGetTickCount>
 8008ca0:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8008ca2:	6833      	ldr	r3, [r6, #0]
 8008ca4:	46b0      	mov	r8, r6
 8008ca6:	4298      	cmp	r0, r3
 8008ca8:	d31c      	bcc.n	8008ce4 <prvTimerTask+0x70>
	xLastTime = xTimeNow;
 8008caa:	6030      	str	r0, [r6, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008cac:	b31c      	cbz	r4, 8008cf6 <prvTimerTask+0x82>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008cae:	4b6f      	ldr	r3, [pc, #444]	; (8008e6c <prvTimerTask+0x1f8>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	681c      	ldr	r4, [r3, #0]
 8008cb4:	fab4 f484 	clz	r4, r4
 8008cb8:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008cba:	4b6d      	ldr	r3, [pc, #436]	; (8008e70 <prvTimerTask+0x1fc>)
 8008cbc:	4622      	mov	r2, r4
 8008cbe:	ebab 0105 	sub.w	r1, fp, r5
 8008cc2:	6818      	ldr	r0, [r3, #0]
 8008cc4:	f7ff f91f 	bl	8007f06 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008cc8:	f7ff fbbe 	bl	8008448 <xTaskResumeAll>
 8008ccc:	b978      	cbnz	r0, 8008cee <prvTimerTask+0x7a>
					portYIELD_WITHIN_API();
 8008cce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008cd2:	f8ca 3000 	str.w	r3, [sl]
 8008cd6:	f3bf 8f4f 	dsb	sy
 8008cda:	f3bf 8f6f 	isb	sy
 8008cde:	e006      	b.n	8008cee <prvTimerTask+0x7a>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008ce0:	2401      	movs	r4, #1
 8008ce2:	e7d8      	b.n	8008c96 <prvTimerTask+0x22>
		prvSwitchTimerLists();
 8008ce4:	f7ff ff86 	bl	8008bf4 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8008ce8:	6035      	str	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8008cea:	f7ff fbad 	bl	8008448 <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008cee:	4e60      	ldr	r6, [pc, #384]	; (8008e70 <prvTimerTask+0x1fc>)
 8008cf0:	f04f 0b00 	mov.w	fp, #0
 8008cf4:	e037      	b.n	8008d66 <prvTimerTask+0xf2>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008cf6:	4583      	cmp	fp, r0
 8008cf8:	d8df      	bhi.n	8008cba <prvTimerTask+0x46>
				( void ) xTaskResumeAll();
 8008cfa:	f7ff fba5 	bl	8008448 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cfe:	f8d9 3000 	ldr.w	r3, [r9]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d06:	1d30      	adds	r0, r6, #4
 8008d08:	f7fe f9b3 	bl	8007072 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d0c:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8008d10:	0758      	lsls	r0, r3, #29
 8008d12:	d51a      	bpl.n	8008d4a <prvTimerTask+0xd6>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008d14:	69b1      	ldr	r1, [r6, #24]
 8008d16:	465b      	mov	r3, fp
 8008d18:	462a      	mov	r2, r5
 8008d1a:	4630      	mov	r0, r6
 8008d1c:	4459      	add	r1, fp
 8008d1e:	f7ff feeb 	bl	8008af8 <prvInsertTimerInActiveList>
 8008d22:	b1b0      	cbz	r0, 8008d52 <prvTimerTask+0xde>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d24:	4623      	mov	r3, r4
 8008d26:	465a      	mov	r2, fp
 8008d28:	4621      	mov	r1, r4
 8008d2a:	4630      	mov	r0, r6
 8008d2c:	9400      	str	r4, [sp, #0]
 8008d2e:	f7ff ff35 	bl	8008b9c <xTimerGenericCommand>
			configASSERT( xResult );
 8008d32:	b970      	cbnz	r0, 8008d52 <prvTimerTask+0xde>
 8008d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d38:	b672      	cpsid	i
 8008d3a:	f383 8811 	msr	BASEPRI, r3
 8008d3e:	f3bf 8f6f 	isb	sy
 8008d42:	f3bf 8f4f 	dsb	sy
 8008d46:	b662      	cpsie	i
 8008d48:	e7fe      	b.n	8008d48 <prvTimerTask+0xd4>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d4a:	f023 0301 	bic.w	r3, r3, #1
 8008d4e:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d52:	6a33      	ldr	r3, [r6, #32]
 8008d54:	4630      	mov	r0, r6
 8008d56:	4798      	blx	r3
}
 8008d58:	e7c9      	b.n	8008cee <prvTimerTask+0x7a>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008d5a:	9b03      	ldr	r3, [sp, #12]
 8008d5c:	9905      	ldr	r1, [sp, #20]
 8008d5e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008d60:	9b02      	ldr	r3, [sp, #8]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	da0a      	bge.n	8008d7c <prvTimerTask+0x108>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008d66:	2200      	movs	r2, #0
 8008d68:	a902      	add	r1, sp, #8
 8008d6a:	6830      	ldr	r0, [r6, #0]
 8008d6c:	f7fe fe9e 	bl	8007aac <xQueueReceive>
 8008d70:	2800      	cmp	r0, #0
 8008d72:	d086      	beq.n	8008c82 <prvTimerTask+0xe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008d74:	9b02      	ldr	r3, [sp, #8]
 8008d76:	9804      	ldr	r0, [sp, #16]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	dbee      	blt.n	8008d5a <prvTimerTask+0xe6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008d7c:	9c04      	ldr	r4, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008d7e:	6963      	ldr	r3, [r4, #20]
 8008d80:	b9a3      	cbnz	r3, 8008dac <prvTimerTask+0x138>
	xTimeNow = xTaskGetTickCount();
 8008d82:	f7ff fac3 	bl	800830c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8008d86:	f8d8 3000 	ldr.w	r3, [r8]
	xTimeNow = xTaskGetTickCount();
 8008d8a:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8008d8c:	4298      	cmp	r0, r3
 8008d8e:	d201      	bcs.n	8008d94 <prvTimerTask+0x120>
		prvSwitchTimerLists();
 8008d90:	f7ff ff30 	bl	8008bf4 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8008d94:	9b02      	ldr	r3, [sp, #8]
 8008d96:	f8c8 5000 	str.w	r5, [r8]
			switch( xMessage.xMessageID )
 8008d9a:	2b09      	cmp	r3, #9
 8008d9c:	d8e3      	bhi.n	8008d66 <prvTimerTask+0xf2>
 8008d9e:	e8df f003 	tbb	[pc, r3]
 8008da2:	0909      	.short	0x0909
 8008da4:	583d3609 	.word	0x583d3609
 8008da8:	3d360909 	.word	0x3d360909
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008dac:	1d20      	adds	r0, r4, #4
 8008dae:	f7fe f960 	bl	8007072 <uxListRemove>
 8008db2:	e7e6      	b.n	8008d82 <prvTimerTask+0x10e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008db4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008db8:	462a      	mov	r2, r5
 8008dba:	69a1      	ldr	r1, [r4, #24]
 8008dbc:	4620      	mov	r0, r4
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008dbe:	f043 0301 	orr.w	r3, r3, #1
 8008dc2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008dc6:	9b03      	ldr	r3, [sp, #12]
 8008dc8:	4419      	add	r1, r3
 8008dca:	f7ff fe95 	bl	8008af8 <prvInsertTimerInActiveList>
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	d0c9      	beq.n	8008d66 <prvTimerTask+0xf2>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008dd2:	6a23      	ldr	r3, [r4, #32]
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008dd8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8008ddc:	0759      	lsls	r1, r3, #29
 8008dde:	d5c2      	bpl.n	8008d66 <prvTimerTask+0xf2>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008de0:	69a2      	ldr	r2, [r4, #24]
 8008de2:	2300      	movs	r3, #0
 8008de4:	9903      	ldr	r1, [sp, #12]
 8008de6:	4620      	mov	r0, r4
 8008de8:	f8cd b000 	str.w	fp, [sp]
 8008dec:	440a      	add	r2, r1
 8008dee:	4619      	mov	r1, r3
 8008df0:	f7ff fed4 	bl	8008b9c <xTimerGenericCommand>
							configASSERT( xResult );
 8008df4:	2800      	cmp	r0, #0
 8008df6:	d1b6      	bne.n	8008d66 <prvTimerTask+0xf2>
 8008df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfc:	b672      	cpsid	i
 8008dfe:	f383 8811 	msr	BASEPRI, r3
 8008e02:	f3bf 8f6f 	isb	sy
 8008e06:	f3bf 8f4f 	dsb	sy
 8008e0a:	b662      	cpsie	i
 8008e0c:	e7fe      	b.n	8008e0c <prvTimerTask+0x198>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e0e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e12:	f023 0301 	bic.w	r3, r3, #1
 8008e16:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8008e1a:	e7a4      	b.n	8008d66 <prvTimerTask+0xf2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008e1c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008e20:	9903      	ldr	r1, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008e22:	f043 0301 	orr.w	r3, r3, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008e26:	61a1      	str	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008e28:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008e2c:	b951      	cbnz	r1, 8008e44 <prvTimerTask+0x1d0>
 8008e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e32:	b672      	cpsid	i
 8008e34:	f383 8811 	msr	BASEPRI, r3
 8008e38:	f3bf 8f6f 	isb	sy
 8008e3c:	f3bf 8f4f 	dsb	sy
 8008e40:	b662      	cpsie	i
 8008e42:	e7fe      	b.n	8008e42 <prvTimerTask+0x1ce>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008e44:	462b      	mov	r3, r5
 8008e46:	462a      	mov	r2, r5
 8008e48:	4429      	add	r1, r5
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	f7ff fe54 	bl	8008af8 <prvInsertTimerInActiveList>
					break;
 8008e50:	e789      	b.n	8008d66 <prvTimerTask+0xf2>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008e52:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8008e56:	079a      	lsls	r2, r3, #30
 8008e58:	d4db      	bmi.n	8008e12 <prvTimerTask+0x19e>
							vPortFree( pxTimer );
 8008e5a:	4620      	mov	r0, r4
 8008e5c:	f7fe f89c 	bl	8006f98 <vPortFree>
 8008e60:	e781      	b.n	8008d66 <prvTimerTask+0xf2>
 8008e62:	bf00      	nop
 8008e64:	20014aac 	.word	0x20014aac
 8008e68:	20014b7c 	.word	0x20014b7c
 8008e6c:	20014ab0 	.word	0x20014ab0
 8008e70:	20014bd0 	.word	0x20014bd0
 8008e74:	e000ed04 	.word	0xe000ed04

08008e78 <jpeg_abort>:
jpeg_abort (j_common_ptr cinfo)
{
  int pool;

  /* Do nothing if called on a not-initialized or destroyed JPEG object. */
  if (cinfo->mem == NULL)
 8008e78:	6843      	ldr	r3, [r0, #4]
{
 8008e7a:	b510      	push	{r4, lr}
 8008e7c:	4604      	mov	r4, r0
  if (cinfo->mem == NULL)
 8008e7e:	b14b      	cbz	r3, 8008e94 <jpeg_abort+0x1c>

  /* Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool > JPOOL_PERMANENT; pool--) {
    (*cinfo->mem->free_pool) (cinfo, pool);
 8008e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e82:	2101      	movs	r1, #1
 8008e84:	4798      	blx	r3
  }

  /* Reset overall state for possible reuse of object */
  if (cinfo->is_decompressor) {
 8008e86:	6923      	ldr	r3, [r4, #16]
 8008e88:	b12b      	cbz	r3, 8008e96 <jpeg_abort+0x1e>
    cinfo->global_state = DSTATE_START;
 8008e8a:	23c8      	movs	r3, #200	; 0xc8
 8008e8c:	6163      	str	r3, [r4, #20]
    /* Try to keep application from accessing now-deleted marker list.
     * A bit kludgy to do it here, but this is the most central place.
     */
    ((j_decompress_ptr) cinfo)->marker_list = NULL;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
  } else {
    cinfo->global_state = CSTATE_START;
  }
}
 8008e94:	bd10      	pop	{r4, pc}
    cinfo->global_state = CSTATE_START;
 8008e96:	2364      	movs	r3, #100	; 0x64
 8008e98:	6163      	str	r3, [r4, #20]
 8008e9a:	e7fb      	b.n	8008e94 <jpeg_abort+0x1c>

08008e9c <jpeg_destroy>:
GLOBAL(void)
jpeg_destroy (j_common_ptr cinfo)
{
  /* We need only tell the memory manager to release everything. */
  /* NB: mem pointer is NULL if memory mgr failed to initialize. */
  if (cinfo->mem != NULL)
 8008e9c:	6843      	ldr	r3, [r0, #4]
{
 8008e9e:	b510      	push	{r4, lr}
 8008ea0:	4604      	mov	r4, r0
  if (cinfo->mem != NULL)
 8008ea2:	b10b      	cbz	r3, 8008ea8 <jpeg_destroy+0xc>
    (*cinfo->mem->self_destruct) (cinfo);
 8008ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea6:	4798      	blx	r3
  cinfo->mem = NULL;		/* be safe if jpeg_destroy is called twice */
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	6063      	str	r3, [r4, #4]
  cinfo->global_state = 0;	/* mark it destroyed */
 8008eac:	6163      	str	r3, [r4, #20]
}
 8008eae:	bd10      	pop	{r4, pc}

08008eb0 <jpeg_alloc_quant_table>:
 * (Would jutils.c be a more reasonable place to put these?)
 */

GLOBAL(JQUANT_TBL *)
jpeg_alloc_quant_table (j_common_ptr cinfo)
{
 8008eb0:	b508      	push	{r3, lr}
  JQUANT_TBL *tbl;

  tbl = (JQUANT_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JQUANT_TBL));
 8008eb2:	6843      	ldr	r3, [r0, #4]
 8008eb4:	2284      	movs	r2, #132	; 0x84
 8008eb6:	2100      	movs	r1, #0
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4798      	blx	r3
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  return tbl;
}
 8008ec2:	bd08      	pop	{r3, pc}

08008ec4 <jpeg_alloc_huff_table>:


GLOBAL(JHUFF_TBL *)
jpeg_alloc_huff_table (j_common_ptr cinfo)
{
 8008ec4:	b508      	push	{r3, lr}
  JHUFF_TBL *tbl;

  tbl = (JHUFF_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JHUFF_TBL));
 8008ec6:	6843      	ldr	r3, [r0, #4]
 8008ec8:	f44f 728c 	mov.w	r2, #280	; 0x118
 8008ecc:	2100      	movs	r1, #0
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4798      	blx	r3
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
  return tbl;
}
 8008ed8:	bd08      	pop	{r3, pc}

08008eda <jpeg_CreateDecompress>:
jpeg_CreateDecompress (j_decompress_ptr cinfo, int version, size_t structsize)
{
  int i;

  /* Guard against version mismatches between library and caller. */
  cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
 8008eda:	2300      	movs	r3, #0
  if (version != JPEG_LIB_VERSION)
 8008edc:	2950      	cmp	r1, #80	; 0x50
{
 8008ede:	b570      	push	{r4, r5, r6, lr}
 8008ee0:	4604      	mov	r4, r0
 8008ee2:	4615      	mov	r5, r2
  cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
 8008ee4:	6043      	str	r3, [r0, #4]
  if (version != JPEG_LIB_VERSION)
 8008ee6:	d007      	beq.n	8008ef8 <jpeg_CreateDecompress+0x1e>
 8008ee8:	6803      	ldr	r3, [r0, #0]
    ERREXIT2(cinfo, JERR_BAD_LIB_VERSION, JPEG_LIB_VERSION, version);
 8008eea:	260d      	movs	r6, #13
 8008eec:	2250      	movs	r2, #80	; 0x50
 8008eee:	61d9      	str	r1, [r3, #28]
 8008ef0:	e9c3 6205 	strd	r6, r2, [r3, #20]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4798      	blx	r3
  if (structsize != SIZEOF(struct jpeg_decompress_struct))
 8008ef8:	f5b5 7ff4 	cmp.w	r5, #488	; 0x1e8
 8008efc:	d009      	beq.n	8008f12 <jpeg_CreateDecompress+0x38>
 8008efe:	6823      	ldr	r3, [r4, #0]
    ERREXIT2(cinfo, JERR_BAD_STRUCT_SIZE, 
 8008f00:	2116      	movs	r1, #22
 8008f02:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8008f06:	4620      	mov	r0, r4
 8008f08:	61dd      	str	r5, [r3, #28]
 8008f0a:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4798      	blx	r3
   * complain here.
   */
  {
    struct jpeg_error_mgr * err = cinfo->err;
    void * client_data = cinfo->client_data; /* ignore Purify complaint here */
    MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
 8008f12:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8008f16:	2100      	movs	r1, #0
 8008f18:	4620      	mov	r0, r4
    struct jpeg_error_mgr * err = cinfo->err;
 8008f1a:	6826      	ldr	r6, [r4, #0]
    void * client_data = cinfo->client_data; /* ignore Purify complaint here */
 8008f1c:	68e5      	ldr	r5, [r4, #12]
    MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
 8008f1e:	f01e fb01 	bl	8027524 <memset>
    cinfo->err = err;
    cinfo->client_data = client_data;
  }
  cinfo->is_decompressor = TRUE;
 8008f22:	2301      	movs	r3, #1

  /* Initialize a memory manager instance for this object */
  jinit_memory_mgr((j_common_ptr) cinfo);
 8008f24:	4620      	mov	r0, r4
    cinfo->err = err;
 8008f26:	6026      	str	r6, [r4, #0]
  cinfo->is_decompressor = TRUE;
 8008f28:	6123      	str	r3, [r4, #16]
    cinfo->client_data = client_data;
 8008f2a:	60e5      	str	r5, [r4, #12]
  jinit_memory_mgr((j_common_ptr) cinfo);
 8008f2c:	f00b fef4 	bl	8014d18 <jinit_memory_mgr>

  /* Zero out pointers to permanent structures. */
  cinfo->progress = NULL;
 8008f30:	2300      	movs	r3, #0

  /* Initialize marker processor so application can override methods
   * for COM, APPn markers before calling jpeg_read_header.
   */
  cinfo->marker_list = NULL;
  jinit_marker_reader(cinfo);
 8008f32:	4620      	mov	r0, r4
  cinfo->progress = NULL;
 8008f34:	60a3      	str	r3, [r4, #8]
  cinfo->src = NULL;
 8008f36:	61a3      	str	r3, [r4, #24]
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 8008f38:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8008f3c:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 8008f40:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8008f44:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 8008f48:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8008f4c:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 8008f50:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8008f54:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
  cinfo->marker_list = NULL;
 8008f58:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    cinfo->quant_tbl_ptrs[i] = NULL;
 8008f5c:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
 8008f60:	e9c4 332b 	strd	r3, r3, [r4, #172]	; 0xac
  jinit_marker_reader(cinfo);
 8008f64:	f005 f8cc 	bl	800e100 <jinit_marker_reader>

  /* And initialize the overall input controller. */
  jinit_input_controller(cinfo);
 8008f68:	4620      	mov	r0, r4
 8008f6a:	f003 fdd7 	bl	800cb1c <jinit_input_controller>

  /* OK, I'm ready */
  cinfo->global_state = DSTATE_START;
 8008f6e:	23c8      	movs	r3, #200	; 0xc8
 8008f70:	6163      	str	r3, [r4, #20]
}
 8008f72:	bd70      	pop	{r4, r5, r6, pc}

08008f74 <jpeg_destroy_decompress>:
 */

GLOBAL(void)
jpeg_destroy_decompress (j_decompress_ptr cinfo)
{
  jpeg_destroy((j_common_ptr) cinfo); /* use common routine */
 8008f74:	f7ff bf92 	b.w	8008e9c <jpeg_destroy>

08008f78 <jpeg_consume_input>:
jpeg_consume_input (j_decompress_ptr cinfo)
{
  int retcode = JPEG_SUSPENDED;

  /* NB: every possible DSTATE value should be listed in this switch */
  switch (cinfo->global_state) {
 8008f78:	6942      	ldr	r2, [r0, #20]
 8008f7a:	f1a2 03c8 	sub.w	r3, r2, #200	; 0xc8
{
 8008f7e:	b570      	push	{r4, r5, r6, lr}
 8008f80:	4604      	mov	r4, r0
 8008f82:	2b0a      	cmp	r3, #10
 8008f84:	f200 80a5 	bhi.w	80090d2 <jpeg_consume_input+0x15a>
 8008f88:	e8df f003 	tbb	[pc, r3]
 8008f8c:	9dab1006 	.word	0x9dab1006
 8008f90:	9d9d9d9d 	.word	0x9d9d9d9d
 8008f94:	a39d      	.short	0xa39d
 8008f96:	9d          	.byte	0x9d
 8008f97:	00          	.byte	0x00
  case DSTATE_START:
    /* Start-of-datastream actions: reset appropriate modules */
    (*cinfo->inputctl->reset_input_controller) (cinfo);
 8008f98:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	4798      	blx	r3
    /* Initialize application's data source module */
    (*cinfo->src->init_source) (cinfo);
 8008fa0:	69a3      	ldr	r3, [r4, #24]
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	689b      	ldr	r3, [r3, #8]
 8008fa6:	4798      	blx	r3
    cinfo->global_state = DSTATE_INHEADER;
 8008fa8:	23c9      	movs	r3, #201	; 0xc9
 8008faa:	6163      	str	r3, [r4, #20]
    /*FALLTHROUGH*/
  case DSTATE_INHEADER:
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 8008fac:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 8008fb0:	4620      	mov	r0, r4
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4798      	blx	r3
    if (retcode == JPEG_REACHED_SOS) { /* Found SOS, prepare to decompress */
 8008fb6:	2801      	cmp	r0, #1
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 8008fb8:	4606      	mov	r6, r0
    if (retcode == JPEG_REACHED_SOS) { /* Found SOS, prepare to decompress */
 8008fba:	d146      	bne.n	800904a <jpeg_consume_input+0xd2>
  switch (cinfo->num_components) {
 8008fbc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008fbe:	2d03      	cmp	r5, #3
 8008fc0:	d007      	beq.n	8008fd2 <jpeg_consume_input+0x5a>
 8008fc2:	2d04      	cmp	r5, #4
 8008fc4:	d064      	beq.n	8009090 <jpeg_consume_input+0x118>
 8008fc6:	2d01      	cmp	r5, #1
 8008fc8:	d17b      	bne.n	80090c2 <jpeg_consume_input+0x14a>
    cinfo->jpeg_color_space = JCS_GRAYSCALE;
 8008fca:	f240 1301 	movw	r3, #257	; 0x101
    cinfo->jpeg_color_space = JCS_UNKNOWN;
 8008fce:	8523      	strh	r3, [r4, #40]	; 0x28
    break;
 8008fd0:	e01c      	b.n	800900c <jpeg_consume_input+0x94>
    if (cinfo->saw_JFIF_marker) {
 8008fd2:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8008fd6:	b10b      	cbz	r3, 8008fdc <jpeg_consume_input+0x64>
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 8008fd8:	2303      	movs	r3, #3
 8008fda:	e056      	b.n	800908a <jpeg_consume_input+0x112>
    } else if (cinfo->saw_Adobe_marker) {
 8008fdc:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d034      	beq.n	800904e <jpeg_consume_input+0xd6>
      switch (cinfo->Adobe_transform) {
 8008fe4:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
 8008fe8:	2a00      	cmp	r2, #0
 8008fea:	d04d      	beq.n	8009088 <jpeg_consume_input+0x110>
 8008fec:	2a01      	cmp	r2, #1
 8008fee:	d008      	beq.n	8009002 <jpeg_consume_input+0x8a>
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 8008ff0:	6823      	ldr	r3, [r4, #0]
 8008ff2:	2174      	movs	r1, #116	; 0x74
 8008ff4:	4620      	mov	r0, r4
      switch (cinfo->Adobe_transform) {
 8008ff6:	e9c3 1205 	strd	r1, r2, [r3, #20]
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8009000:	4798      	blx	r3
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 8009002:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    cinfo->out_color_space = JCS_RGB;
 8009006:	2302      	movs	r3, #2
    cinfo->out_color_space = JCS_CMYK;
 8009008:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  cinfo->scale_num = cinfo->block_size;		/* 1:1 scaling */
 800900c:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
  cinfo->output_gamma = 1.0;
 8009010:	2200      	movs	r2, #0
  cinfo->dither_mode = JDITHER_FS;
 8009012:	2102      	movs	r1, #2
  cinfo->scale_denom = cinfo->block_size;
 8009014:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
  cinfo->output_gamma = 1.0;
 8009018:	4b33      	ldr	r3, [pc, #204]	; (80090e8 <jpeg_consume_input+0x170>)
  cinfo->dither_mode = JDITHER_FS;
 800901a:	f884 1058 	strb.w	r1, [r4, #88]	; 0x58
  cinfo->output_gamma = 1.0;
 800901e:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
  cinfo->buffered_image = FALSE;
 8009022:	2300      	movs	r3, #0
  cinfo->do_fancy_upsampling = TRUE;
 8009024:	2201      	movs	r2, #1
  cinfo->raw_data_out = FALSE;
 8009026:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  cinfo->dct_method = JDCT_DEFAULT;
 800902a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  cinfo->quantize_colors = FALSE;
 800902e:	6563      	str	r3, [r4, #84]	; 0x54
  cinfo->two_pass_quantize = TRUE;
 8009030:	65e2      	str	r2, [r4, #92]	; 0x5c
  cinfo->colormap = NULL;
 8009032:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  cinfo->enable_2pass_quant = FALSE;
 8009036:	66e3      	str	r3, [r4, #108]	; 0x6c
  cinfo->do_block_smoothing = TRUE;
 8009038:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
  cinfo->enable_external_quant = FALSE;
 800903c:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
  cinfo->desired_number_of_colors = 256;
 8009040:	f44f 7280 	mov.w	r2, #256	; 0x100
      /* Set up default parameters based on header data */
      default_decompress_parms(cinfo);
      /* Set global state: ready for start_decompress */
      cinfo->global_state = DSTATE_READY;
 8009044:	23ca      	movs	r3, #202	; 0xca
  cinfo->desired_number_of_colors = 256;
 8009046:	6622      	str	r2, [r4, #96]	; 0x60
      cinfo->global_state = DSTATE_READY;
 8009048:	6163      	str	r3, [r4, #20]
    break;
  default:
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  return retcode;
}
 800904a:	4630      	mov	r0, r6
 800904c:	bd70      	pop	{r4, r5, r6, pc}
      int cid0 = cinfo->comp_info[0].component_id;
 800904e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8009052:	6818      	ldr	r0, [r3, #0]
      int cid1 = cinfo->comp_info[1].component_id;
 8009054:	6d99      	ldr	r1, [r3, #88]	; 0x58
      if (cid0 == 1 && cid1 == 2 && cid2 == 3)
 8009056:	2801      	cmp	r0, #1
      int cid2 = cinfo->comp_info[2].component_id;
 8009058:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
      if (cid0 == 1 && cid1 == 2 && cid2 == 3)
 800905c:	d10e      	bne.n	800907c <jpeg_consume_input+0x104>
 800905e:	2902      	cmp	r1, #2
 8009060:	d101      	bne.n	8009066 <jpeg_consume_input+0xee>
 8009062:	2a03      	cmp	r2, #3
 8009064:	d0b8      	beq.n	8008fd8 <jpeg_consume_input+0x60>
	TRACEMS3(cinfo, 1, JTRC_UNKNOWN_IDS, cid0, cid1, cid2);
 8009066:	6823      	ldr	r3, [r4, #0]
 8009068:	621a      	str	r2, [r3, #32]
 800906a:	2271      	movs	r2, #113	; 0x71
 800906c:	e9c3 0106 	strd	r0, r1, [r3, #24]
 8009070:	615a      	str	r2, [r3, #20]
 8009072:	2101      	movs	r1, #1
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	4620      	mov	r0, r4
 8009078:	4798      	blx	r3
 800907a:	e7ad      	b.n	8008fd8 <jpeg_consume_input+0x60>
      else if (cid0 == 82 && cid1 == 71 && cid2 == 66)
 800907c:	2852      	cmp	r0, #82	; 0x52
 800907e:	d1f2      	bne.n	8009066 <jpeg_consume_input+0xee>
 8009080:	2947      	cmp	r1, #71	; 0x47
 8009082:	d1f0      	bne.n	8009066 <jpeg_consume_input+0xee>
 8009084:	2a42      	cmp	r2, #66	; 0x42
 8009086:	d1ee      	bne.n	8009066 <jpeg_consume_input+0xee>
	cinfo->jpeg_color_space = JCS_RGB; /* ASCII 'R', 'G', 'B' */
 8009088:	2302      	movs	r3, #2
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 800908a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800908e:	e7ba      	b.n	8009006 <jpeg_consume_input+0x8e>
    if (cinfo->saw_Adobe_marker) {
 8009090:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8009094:	b193      	cbz	r3, 80090bc <jpeg_consume_input+0x144>
      switch (cinfo->Adobe_transform) {
 8009096:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
 800909a:	b17a      	cbz	r2, 80090bc <jpeg_consume_input+0x144>
 800909c:	2a02      	cmp	r2, #2
 800909e:	d008      	beq.n	80090b2 <jpeg_consume_input+0x13a>
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 80090a0:	6823      	ldr	r3, [r4, #0]
 80090a2:	2174      	movs	r1, #116	; 0x74
 80090a4:	4620      	mov	r0, r4
      switch (cinfo->Adobe_transform) {
 80090a6:	e9c3 1205 	strd	r1, r2, [r3, #20]
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	f04f 31ff 	mov.w	r1, #4294967295
 80090b0:	4798      	blx	r3
	cinfo->jpeg_color_space = JCS_YCCK; /* assume it's YCCK */
 80090b2:	2305      	movs	r3, #5
 80090b4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    cinfo->out_color_space = JCS_CMYK;
 80090b8:	2304      	movs	r3, #4
 80090ba:	e7a5      	b.n	8009008 <jpeg_consume_input+0x90>
      cinfo->jpeg_color_space = JCS_CMYK;
 80090bc:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
 80090c0:	e7fa      	b.n	80090b8 <jpeg_consume_input+0x140>
    cinfo->jpeg_color_space = JCS_UNKNOWN;
 80090c2:	2300      	movs	r3, #0
 80090c4:	e783      	b.n	8008fce <jpeg_consume_input+0x56>
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 80090c6:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
}
 80090ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4718      	bx	r3
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 80090d2:	6803      	ldr	r3, [r0, #0]
 80090d4:	2115      	movs	r1, #21
  int retcode = JPEG_SUSPENDED;
 80090d6:	2600      	movs	r6, #0
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 80090d8:	e9c3 1205 	strd	r1, r2, [r3, #20]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4798      	blx	r3
 80090e0:	e7b3      	b.n	800904a <jpeg_consume_input+0xd2>
  switch (cinfo->global_state) {
 80090e2:	2601      	movs	r6, #1
  return retcode;
 80090e4:	e7b1      	b.n	800904a <jpeg_consume_input+0xd2>
 80090e6:	bf00      	nop
 80090e8:	3ff00000 	.word	0x3ff00000

080090ec <jpeg_read_header>:
  if (cinfo->global_state != DSTATE_START &&
 80090ec:	6942      	ldr	r2, [r0, #20]
 80090ee:	f1a2 03c8 	sub.w	r3, r2, #200	; 0xc8
 80090f2:	2b01      	cmp	r3, #1
{
 80090f4:	b570      	push	{r4, r5, r6, lr}
 80090f6:	4604      	mov	r4, r0
 80090f8:	460e      	mov	r6, r1
  if (cinfo->global_state != DSTATE_START &&
 80090fa:	d905      	bls.n	8009108 <jpeg_read_header+0x1c>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 80090fc:	6803      	ldr	r3, [r0, #0]
 80090fe:	2115      	movs	r1, #21
 8009100:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4798      	blx	r3
  retcode = jpeg_consume_input(cinfo);
 8009108:	4620      	mov	r0, r4
 800910a:	f7ff ff35 	bl	8008f78 <jpeg_consume_input>
  switch (retcode) {
 800910e:	2801      	cmp	r0, #1
  retcode = jpeg_consume_input(cinfo);
 8009110:	4605      	mov	r5, r0
  switch (retcode) {
 8009112:	d00b      	beq.n	800912c <jpeg_read_header+0x40>
 8009114:	2802      	cmp	r0, #2
 8009116:	d109      	bne.n	800912c <jpeg_read_header+0x40>
    if (require_image)		/* Complain if application wanted an image */
 8009118:	b12e      	cbz	r6, 8009126 <jpeg_read_header+0x3a>
      ERREXIT(cinfo, JERR_NO_IMAGE);
 800911a:	6823      	ldr	r3, [r4, #0]
 800911c:	2235      	movs	r2, #53	; 0x35
 800911e:	4620      	mov	r0, r4
 8009120:	615a      	str	r2, [r3, #20]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4798      	blx	r3
    jpeg_abort((j_common_ptr) cinfo); /* sets state = DSTATE_START */
 8009126:	4620      	mov	r0, r4
 8009128:	f7ff fea6 	bl	8008e78 <jpeg_abort>
}
 800912c:	4628      	mov	r0, r5
 800912e:	bd70      	pop	{r4, r5, r6, pc}

08009130 <jpeg_finish_decompress>:
 */

GLOBAL(boolean)
jpeg_finish_decompress (j_decompress_ptr cinfo)
{
  if ((cinfo->global_state == DSTATE_SCANNING ||
 8009130:	6943      	ldr	r3, [r0, #20]
 8009132:	f1a3 02cd 	sub.w	r2, r3, #205	; 0xcd
 8009136:	2a01      	cmp	r2, #1
{
 8009138:	b510      	push	{r4, lr}
 800913a:	4604      	mov	r4, r0
  if ((cinfo->global_state == DSTATE_SCANNING ||
 800913c:	d81f      	bhi.n	800917e <jpeg_finish_decompress+0x4e>
       cinfo->global_state == DSTATE_RAW_OK) && ! cinfo->buffered_image) {
 800913e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8009140:	bb0a      	cbnz	r2, 8009186 <jpeg_finish_decompress+0x56>
    /* Terminate final pass of non-buffered mode */
    if (cinfo->output_scanline < cinfo->output_height)
 8009142:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8009146:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8009148:	429a      	cmp	r2, r3
 800914a:	d204      	bcs.n	8009156 <jpeg_finish_decompress+0x26>
      ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
 800914c:	6803      	ldr	r3, [r0, #0]
 800914e:	2245      	movs	r2, #69	; 0x45
 8009150:	615a      	str	r2, [r3, #20]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4798      	blx	r3
    (*cinfo->master->finish_output_pass) (cinfo);
 8009156:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 800915a:	4620      	mov	r0, r4
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	4798      	blx	r3
    cinfo->global_state = DSTATE_STOPPING;
  } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
    /* Finishing after a buffered-image operation */
    cinfo->global_state = DSTATE_STOPPING;
 8009160:	23d2      	movs	r3, #210	; 0xd2
 8009162:	6163      	str	r3, [r4, #20]
  } else if (cinfo->global_state != DSTATE_STOPPING) {
    /* STOPPING = repeat call after a suspension, anything else is error */
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  /* Read until EOI */
  while (! cinfo->inputctl->eoi_reached) {
 8009164:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 8009168:	695a      	ldr	r2, [r3, #20]
 800916a:	b1a2      	cbz	r2, 8009196 <jpeg_finish_decompress+0x66>
    if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
      return FALSE;		/* Suspend, come back later */
  }
  /* Do final cleanup */
  (*cinfo->src->term_source) (cinfo);
 800916c:	69a3      	ldr	r3, [r4, #24]
 800916e:	4620      	mov	r0, r4
 8009170:	699b      	ldr	r3, [r3, #24]
 8009172:	4798      	blx	r3
  /* We can use jpeg_abort to release memory and reset global_state */
  jpeg_abort((j_common_ptr) cinfo);
 8009174:	4620      	mov	r0, r4
 8009176:	f7ff fe7f 	bl	8008e78 <jpeg_abort>
  return TRUE;
 800917a:	2001      	movs	r0, #1
 800917c:	e010      	b.n	80091a0 <jpeg_finish_decompress+0x70>
  } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
 800917e:	2bcf      	cmp	r3, #207	; 0xcf
 8009180:	d0ee      	beq.n	8009160 <jpeg_finish_decompress+0x30>
  } else if (cinfo->global_state != DSTATE_STOPPING) {
 8009182:	2bd2      	cmp	r3, #210	; 0xd2
 8009184:	d0ee      	beq.n	8009164 <jpeg_finish_decompress+0x34>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8009186:	6822      	ldr	r2, [r4, #0]
 8009188:	2115      	movs	r1, #21
 800918a:	4620      	mov	r0, r4
 800918c:	e9c2 1305 	strd	r1, r3, [r2, #20]
 8009190:	6813      	ldr	r3, [r2, #0]
 8009192:	4798      	blx	r3
 8009194:	e7e6      	b.n	8009164 <jpeg_finish_decompress+0x34>
    if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4620      	mov	r0, r4
 800919a:	4798      	blx	r3
 800919c:	2800      	cmp	r0, #0
 800919e:	d1e1      	bne.n	8009164 <jpeg_finish_decompress+0x34>
}
 80091a0:	bd10      	pop	{r4, pc}

080091a2 <output_pass_setup>:
 */

LOCAL(boolean)
output_pass_setup (j_decompress_ptr cinfo)
{
  if (cinfo->global_state != DSTATE_PRESCAN) {
 80091a2:	6943      	ldr	r3, [r0, #20]
 80091a4:	2bcc      	cmp	r3, #204	; 0xcc
{
 80091a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091aa:	4604      	mov	r4, r0
  if (cinfo->global_state != DSTATE_PRESCAN) {
 80091ac:	d008      	beq.n	80091c0 <output_pass_setup+0x1e>
    /* First call: do pass setup */
    (*cinfo->master->prepare_for_output_pass) (cinfo);
 80091ae:	f8d0 31b8 	ldr.w	r3, [r0, #440]	; 0x1b8
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4798      	blx	r3
    cinfo->output_scanline = 0;
 80091b6:	2300      	movs	r3, #0
 80091b8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    cinfo->global_state = DSTATE_PRESCAN;
 80091bc:	23cc      	movs	r3, #204	; 0xcc
 80091be:	6163      	str	r3, [r4, #20]
	cinfo->progress->pass_limit = (long) cinfo->output_height;
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
      }
      /* Process some data */
      last_scanline = cinfo->output_scanline;
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 80091c0:	f104 058c 	add.w	r5, r4, #140	; 0x8c
 80091c4:	2600      	movs	r6, #0
  while (cinfo->master->is_dummy_pass) {
 80091c6:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	b9f3      	cbnz	r3, 800920c <output_pass_setup+0x6a>
#endif /* QUANT_2PASS_SUPPORTED */
  }
  /* Ready for application to drive output pass through
   * jpeg_read_scanlines or jpeg_read_raw_data.
   */
  cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
 80091ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return TRUE;
 80091d0:	2001      	movs	r0, #1
  cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	bf14      	ite	ne
 80091d6:	23ce      	movne	r3, #206	; 0xce
 80091d8:	23cd      	moveq	r3, #205	; 0xcd
 80091da:	6163      	str	r3, [r4, #20]
}
 80091dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (cinfo->progress != NULL) {
 80091e0:	68a3      	ldr	r3, [r4, #8]
 80091e2:	b123      	cbz	r3, 80091ee <output_pass_setup+0x4c>
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 80091e4:	4620      	mov	r0, r4
	cinfo->progress->pass_limit = (long) cinfo->output_height;
 80091e6:	e9c3 1201 	strd	r1, r2, [r3, #4]
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4798      	blx	r3
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 80091ee:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 80091f2:	462a      	mov	r2, r5
 80091f4:	4620      	mov	r0, r4
      last_scanline = cinfo->output_scanline;
 80091f6:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 80091fa:	f8d3 8004 	ldr.w	r8, [r3, #4]
 80091fe:	2300      	movs	r3, #0
 8009200:	4619      	mov	r1, r3
 8009202:	47c0      	blx	r8
      if (cinfo->output_scanline == last_scanline)
 8009204:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009208:	42bb      	cmp	r3, r7
 800920a:	d011      	beq.n	8009230 <output_pass_setup+0x8e>
    while (cinfo->output_scanline < cinfo->output_height) {
 800920c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8009210:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8009212:	4291      	cmp	r1, r2
 8009214:	d3e4      	bcc.n	80091e0 <output_pass_setup+0x3e>
    (*cinfo->master->finish_output_pass) (cinfo);
 8009216:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 800921a:	4620      	mov	r0, r4
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	4798      	blx	r3
    (*cinfo->master->prepare_for_output_pass) (cinfo);
 8009220:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 8009224:	4620      	mov	r0, r4
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4798      	blx	r3
    cinfo->output_scanline = 0;
 800922a:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 800922e:	e7ca      	b.n	80091c6 <output_pass_setup+0x24>
	return FALSE;		/* No progress made, must suspend */
 8009230:	2000      	movs	r0, #0
 8009232:	e7d3      	b.n	80091dc <output_pass_setup+0x3a>

08009234 <jpeg_start_decompress>:
  if (cinfo->global_state == DSTATE_READY) {
 8009234:	6943      	ldr	r3, [r0, #20]
 8009236:	2bca      	cmp	r3, #202	; 0xca
{
 8009238:	b510      	push	{r4, lr}
 800923a:	4604      	mov	r4, r0
  if (cinfo->global_state == DSTATE_READY) {
 800923c:	d109      	bne.n	8009252 <jpeg_start_decompress+0x1e>
    jinit_master_decompress(cinfo);
 800923e:	f005 f903 	bl	800e448 <jinit_master_decompress>
    if (cinfo->buffered_image) {
 8009242:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009244:	b11b      	cbz	r3, 800924e <jpeg_start_decompress+0x1a>
      cinfo->global_state = DSTATE_BUFIMAGE;
 8009246:	23cf      	movs	r3, #207	; 0xcf
      return TRUE;
 8009248:	2001      	movs	r0, #1
      cinfo->global_state = DSTATE_BUFIMAGE;
 800924a:	6163      	str	r3, [r4, #20]
}
 800924c:	bd10      	pop	{r4, pc}
    cinfo->global_state = DSTATE_PRELOAD;
 800924e:	23cb      	movs	r3, #203	; 0xcb
 8009250:	6163      	str	r3, [r4, #20]
  if (cinfo->global_state == DSTATE_PRELOAD) {
 8009252:	6962      	ldr	r2, [r4, #20]
 8009254:	2acb      	cmp	r2, #203	; 0xcb
 8009256:	d12c      	bne.n	80092b2 <jpeg_start_decompress+0x7e>
    if (cinfo->inputctl->has_multiple_scans) {
 8009258:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800925c:	691b      	ldr	r3, [r3, #16]
 800925e:	b1fb      	cbz	r3, 80092a0 <jpeg_start_decompress+0x6c>
	if (cinfo->progress != NULL)
 8009260:	68a3      	ldr	r3, [r4, #8]
 8009262:	b113      	cbz	r3, 800926a <jpeg_start_decompress+0x36>
	  (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4620      	mov	r0, r4
 8009268:	4798      	blx	r3
	retcode = (*cinfo->inputctl->consume_input) (cinfo);
 800926a:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800926e:	4620      	mov	r0, r4
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4798      	blx	r3
	if (retcode == JPEG_SUSPENDED)
 8009274:	2800      	cmp	r0, #0
 8009276:	d0e9      	beq.n	800924c <jpeg_start_decompress+0x18>
	if (retcode == JPEG_REACHED_EOI)
 8009278:	2802      	cmp	r0, #2
 800927a:	d011      	beq.n	80092a0 <jpeg_start_decompress+0x6c>
	if (cinfo->progress != NULL &&
 800927c:	68a3      	ldr	r3, [r4, #8]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d0ee      	beq.n	8009260 <jpeg_start_decompress+0x2c>
	    (retcode == JPEG_ROW_COMPLETED || retcode == JPEG_REACHED_SOS)) {
 8009282:	f020 0002 	bic.w	r0, r0, #2
 8009286:	2801      	cmp	r0, #1
 8009288:	d1ea      	bne.n	8009260 <jpeg_start_decompress+0x2c>
	  if (++cinfo->progress->pass_counter >= cinfo->progress->pass_limit) {
 800928a:	685a      	ldr	r2, [r3, #4]
 800928c:	6899      	ldr	r1, [r3, #8]
 800928e:	3201      	adds	r2, #1
 8009290:	428a      	cmp	r2, r1
 8009292:	605a      	str	r2, [r3, #4]
 8009294:	dbe4      	blt.n	8009260 <jpeg_start_decompress+0x2c>
	    cinfo->progress->pass_limit += (long) cinfo->total_iMCU_rows;
 8009296:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 800929a:	440a      	add	r2, r1
 800929c:	609a      	str	r2, [r3, #8]
 800929e:	e7df      	b.n	8009260 <jpeg_start_decompress+0x2c>
    cinfo->output_scan_number = cinfo->input_scan_number;
 80092a0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80092a4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
  return output_pass_setup(cinfo);
 80092a8:	4620      	mov	r0, r4
}
 80092aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return output_pass_setup(cinfo);
 80092ae:	f7ff bf78 	b.w	80091a2 <output_pass_setup>
  } else if (cinfo->global_state != DSTATE_PRESCAN)
 80092b2:	2acc      	cmp	r2, #204	; 0xcc
 80092b4:	d0f8      	beq.n	80092a8 <jpeg_start_decompress+0x74>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 80092b6:	6823      	ldr	r3, [r4, #0]
 80092b8:	2115      	movs	r1, #21
 80092ba:	4620      	mov	r0, r4
 80092bc:	e9c3 1205 	strd	r1, r2, [r3, #20]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4798      	blx	r3
 80092c4:	e7f0      	b.n	80092a8 <jpeg_start_decompress+0x74>

080092c6 <jpeg_read_scanlines>:
 */

GLOBAL(JDIMENSION)
jpeg_read_scanlines (j_decompress_ptr cinfo, JSAMPARRAY scanlines,
		     JDIMENSION max_lines)
{
 80092c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092c8:	4616      	mov	r6, r2
  JDIMENSION row_ctr;

  if (cinfo->global_state != DSTATE_SCANNING)
 80092ca:	6942      	ldr	r2, [r0, #20]
{
 80092cc:	4604      	mov	r4, r0
 80092ce:	460d      	mov	r5, r1
  if (cinfo->global_state != DSTATE_SCANNING)
 80092d0:	2acd      	cmp	r2, #205	; 0xcd
 80092d2:	d005      	beq.n	80092e0 <jpeg_read_scanlines+0x1a>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 80092d4:	6803      	ldr	r3, [r0, #0]
 80092d6:	2115      	movs	r1, #21
 80092d8:	e9c3 1205 	strd	r1, r2, [r3, #20]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4798      	blx	r3
  if (cinfo->output_scanline >= cinfo->output_height) {
 80092e0:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80092e4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d30a      	bcc.n	8009300 <jpeg_read_scanlines+0x3a>
    WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
 80092ea:	6823      	ldr	r3, [r4, #0]
 80092ec:	227e      	movs	r2, #126	; 0x7e
 80092ee:	4620      	mov	r0, r4
 80092f0:	f04f 31ff 	mov.w	r1, #4294967295
 80092f4:	615a      	str	r2, [r3, #20]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	4798      	blx	r3
    return 0;
 80092fa:	2000      	movs	r0, #0
  /* Process some data */
  row_ctr = 0;
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
  cinfo->output_scanline += row_ctr;
  return row_ctr;
}
 80092fc:	b003      	add	sp, #12
 80092fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (cinfo->progress != NULL) {
 8009300:	68a0      	ldr	r0, [r4, #8]
 8009302:	b120      	cbz	r0, 800930e <jpeg_read_scanlines+0x48>
    cinfo->progress->pass_limit = (long) cinfo->output_height;
 8009304:	e9c0 2301 	strd	r2, r3, [r0, #4]
    (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8009308:	6803      	ldr	r3, [r0, #0]
 800930a:	4620      	mov	r0, r4
 800930c:	4798      	blx	r3
  row_ctr = 0;
 800930e:	2300      	movs	r3, #0
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
 8009310:	4620      	mov	r0, r4
 8009312:	aa01      	add	r2, sp, #4
 8009314:	4629      	mov	r1, r5
  row_ctr = 0;
 8009316:	9301      	str	r3, [sp, #4]
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
 8009318:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 800931c:	685f      	ldr	r7, [r3, #4]
 800931e:	4633      	mov	r3, r6
 8009320:	47b8      	blx	r7
  cinfo->output_scanline += row_ctr;
 8009322:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009326:	9801      	ldr	r0, [sp, #4]
 8009328:	4403      	add	r3, r0
 800932a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  return row_ctr;
 800932e:	e7e5      	b.n	80092fc <jpeg_read_scanlines+0x36>

08009330 <get_byte>:


LOCAL(int)
get_byte (j_decompress_ptr cinfo)
/* Read next input byte; we do not support suspension in this module. */
{
 8009330:	b538      	push	{r3, r4, r5, lr}
  struct jpeg_source_mgr * src = cinfo->src;
 8009332:	6984      	ldr	r4, [r0, #24]
{
 8009334:	4605      	mov	r5, r0

  if (src->bytes_in_buffer == 0)
 8009336:	6863      	ldr	r3, [r4, #4]
 8009338:	b943      	cbnz	r3, 800934c <get_byte+0x1c>
    if (! (*src->fill_input_buffer) (cinfo))
 800933a:	68e3      	ldr	r3, [r4, #12]
 800933c:	4798      	blx	r3
 800933e:	b928      	cbnz	r0, 800934c <get_byte+0x1c>
      ERREXIT(cinfo, JERR_CANT_SUSPEND);
 8009340:	682b      	ldr	r3, [r5, #0]
 8009342:	2219      	movs	r2, #25
 8009344:	4628      	mov	r0, r5
 8009346:	615a      	str	r2, [r3, #20]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4798      	blx	r3
  src->bytes_in_buffer--;
 800934c:	6863      	ldr	r3, [r4, #4]
 800934e:	3b01      	subs	r3, #1
 8009350:	6063      	str	r3, [r4, #4]
  return GETJOCTET(*src->next_input_byte++);
 8009352:	6823      	ldr	r3, [r4, #0]
 8009354:	1c5a      	adds	r2, r3, #1
 8009356:	6022      	str	r2, [r4, #0]
}
 8009358:	7818      	ldrb	r0, [r3, #0]
 800935a:	bd38      	pop	{r3, r4, r5, pc}

0800935c <arith_decode>:
 * derived from Markus Kuhn's JBIG implementation.
 */

LOCAL(int)
arith_decode (j_decompress_ptr cinfo, unsigned char *st)
{
 800935c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009360:	4680      	mov	r8, r0
 8009362:	460e      	mov	r6, r1
  register arith_entropy_ptr e = (arith_entropy_ptr) cinfo->entropy;
 8009364:	f8d0 41d0 	ldr.w	r4, [r0, #464]	; 0x1d0
      e->c = (e->c << 8) | data; /* insert data into C register */
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
	/* Need more initial bytes */
	if (++e->ct == 0)
	  /* Got 2 initial bytes -> re-init A and exit loop */
	  e->a = 0x8000L; /* => e->a = 0x10000L after loop exit */
 8009368:	f44f 4700 	mov.w	r7, #32768	; 0x8000
  while (e->a < 0x8000L) {
 800936c:	e9d4 5103 	ldrd	r5, r1, [r4, #12]
 8009370:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 8009374:	db20      	blt.n	80093b8 <arith_decode+0x5c>
  }

  /* Fetch values from our compact representation of Table D.3(D.2):
   * Qe values and probability estimation state machine
   */
  sv = *st;
 8009376:	7830      	ldrb	r0, [r6, #0]
  qe = jpeg_aritab[sv & 0x7F];	/* => Qe_Value */
 8009378:	4b2e      	ldr	r3, [pc, #184]	; (8009434 <arith_decode+0xd8>)
 800937a:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 800937e:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]

  /* Decode & estimation procedures per sections D.2.4 & D.2.5 */
  temp = e->a - qe;
  e->a = temp;
  temp <<= e->ct;
  if (e->c >= temp) {
 8009382:	68a2      	ldr	r2, [r4, #8]
  temp = e->a - qe;
 8009384:	eba5 4527 	sub.w	r5, r5, r7, asr #16
  nl = qe & 0xFF; qe >>= 8;	/* Next_Index_LPS + Switch_MPS */
 8009388:	ea4f 2e27 	mov.w	lr, r7, asr #8
  temp <<= e->ct;
 800938c:	fa05 f101 	lsl.w	r1, r5, r1
  nm = qe & 0xFF; qe >>= 8;	/* Next_Index_MPS */
 8009390:	ea4f 4c27 	mov.w	ip, r7, asr #16
  e->a = temp;
 8009394:	60e5      	str	r5, [r4, #12]
  if (e->c >= temp) {
 8009396:	428a      	cmp	r2, r1
 8009398:	db3c      	blt.n	8009414 <arith_decode+0xb8>
    e->c -= temp;
 800939a:	1a51      	subs	r1, r2, r1
    /* Conditional LPS (less probable symbol) exchange */
    if (e->a < qe) {
 800939c:	45ac      	cmp	ip, r5
      e->a = qe;
 800939e:	f8c4 c00c 	str.w	ip, [r4, #12]
    e->c -= temp;
 80093a2:	60a1      	str	r1, [r4, #8]
    if (e->a < qe) {
 80093a4:	f020 017f 	bic.w	r1, r0, #127	; 0x7f
 80093a8:	b24a      	sxtb	r2, r1
 80093aa:	dd2e      	ble.n	800940a <arith_decode+0xae>
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 80093ac:	ea82 020e 	eor.w	r2, r2, lr
 80093b0:	7032      	strb	r2, [r6, #0]
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
    }
  }

  return sv >> 7;
}
 80093b2:	09c0      	lsrs	r0, r0, #7
 80093b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (--e->ct < 0) {
 80093b8:	3901      	subs	r1, #1
 80093ba:	2900      	cmp	r1, #0
 80093bc:	6121      	str	r1, [r4, #16]
 80093be:	da1a      	bge.n	80093f6 <arith_decode+0x9a>
      if (cinfo->unread_marker)
 80093c0:	f8d8 31b4 	ldr.w	r3, [r8, #436]	; 0x1b4
 80093c4:	b96b      	cbnz	r3, 80093e2 <arith_decode+0x86>
	data = get_byte(cinfo);	/* read next input byte */
 80093c6:	4640      	mov	r0, r8
 80093c8:	f7ff ffb2 	bl	8009330 <get_byte>
	if (data == 0xFF) {	/* zero stuff or marker code */
 80093cc:	28ff      	cmp	r0, #255	; 0xff
	data = get_byte(cinfo);	/* read next input byte */
 80093ce:	4605      	mov	r5, r0
	if (data == 0xFF) {	/* zero stuff or marker code */
 80093d0:	d108      	bne.n	80093e4 <arith_decode+0x88>
	  do data = get_byte(cinfo);
 80093d2:	4640      	mov	r0, r8
 80093d4:	f7ff ffac 	bl	8009330 <get_byte>
	  while (data == 0xFF);	/* swallow extra 0xFF bytes */
 80093d8:	28ff      	cmp	r0, #255	; 0xff
 80093da:	d0fa      	beq.n	80093d2 <arith_decode+0x76>
	  if (data == 0)
 80093dc:	b110      	cbz	r0, 80093e4 <arith_decode+0x88>
	    cinfo->unread_marker = data;
 80093de:	f8c8 01b4 	str.w	r0, [r8, #436]	; 0x1b4
	data = 0;		/* stuff zero data */
 80093e2:	2500      	movs	r5, #0
      e->c = (e->c << 8) | data; /* insert data into C register */
 80093e4:	68a0      	ldr	r0, [r4, #8]
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 80093e6:	6923      	ldr	r3, [r4, #16]
      e->c = (e->c << 8) | data; /* insert data into C register */
 80093e8:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 80093ec:	f113 0208 	adds.w	r2, r3, #8
      e->c = (e->c << 8) | data; /* insert data into C register */
 80093f0:	60a5      	str	r5, [r4, #8]
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 80093f2:	d404      	bmi.n	80093fe <arith_decode+0xa2>
 80093f4:	6122      	str	r2, [r4, #16]
    e->a <<= 1;
 80093f6:	68e3      	ldr	r3, [r4, #12]
 80093f8:	005b      	lsls	r3, r3, #1
 80093fa:	60e3      	str	r3, [r4, #12]
 80093fc:	e7b6      	b.n	800936c <arith_decode+0x10>
	if (++e->ct == 0)
 80093fe:	3309      	adds	r3, #9
 8009400:	6123      	str	r3, [r4, #16]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d1f7      	bne.n	80093f6 <arith_decode+0x9a>
	  e->a = 0x8000L; /* => e->a = 0x10000L after loop exit */
 8009406:	60e7      	str	r7, [r4, #12]
 8009408:	e7f5      	b.n	80093f6 <arith_decode+0x9a>
      *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 800940a:	407a      	eors	r2, r7
 800940c:	7032      	strb	r2, [r6, #0]
      sv ^= 0x80;		/* Exchange LPS/MPS */
 800940e:	f080 0080 	eor.w	r0, r0, #128	; 0x80
 8009412:	e7ce      	b.n	80093b2 <arith_decode+0x56>
  } else if (e->a < 0x8000L) {
 8009414:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 8009418:	dacb      	bge.n	80093b2 <arith_decode+0x56>
    if (e->a < qe) {
 800941a:	f020 027f 	bic.w	r2, r0, #127	; 0x7f
 800941e:	45ac      	cmp	ip, r5
 8009420:	b253      	sxtb	r3, r2
 8009422:	dd02      	ble.n	800942a <arith_decode+0xce>
      *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 8009424:	407b      	eors	r3, r7
 8009426:	7033      	strb	r3, [r6, #0]
 8009428:	e7f1      	b.n	800940e <arith_decode+0xb2>
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 800942a:	ea83 030e 	eor.w	r3, r3, lr
 800942e:	7033      	strb	r3, [r6, #0]
 8009430:	e7bf      	b.n	80093b2 <arith_decode+0x56>
 8009432:	bf00      	nop
 8009434:	0802a860 	.word	0x0802a860

08009438 <start_pass>:
 * Initialize for an arithmetic-compressed scan.
 */

METHODDEF(void)
start_pass (j_decompress_ptr cinfo)
{
 8009438:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
  int ci, tbl;
  jpeg_component_info * compptr;

  if (cinfo->progressive_mode) {
 800943c:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
{
 8009440:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8009442:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
  if (cinfo->progressive_mode) {
 8009446:	f500 77aa 	add.w	r7, r0, #340	; 0x154
 800944a:	f8d0 2198 	ldr.w	r2, [r0, #408]	; 0x198
 800944e:	2b00      	cmp	r3, #0
 8009450:	f000 8088 	beq.w	8009564 <start_pass+0x12c>
    /* Validate progressive scan parameters */
    if (cinfo->Ss == 0) {
 8009454:	e9d0 1667 	ldrd	r1, r6, [r0, #412]	; 0x19c
 8009458:	f8d0 01a4 	ldr.w	r0, [r0, #420]	; 0x1a4
 800945c:	b962      	cbnz	r2, 8009478 <start_pass+0x40>
      if (cinfo->Se != 0)
 800945e:	b1a9      	cbz	r1, 800948c <start_pass+0x54>
      if (cinfo->Ah-1 != cinfo->Al)
	goto bad;
    }
    if (cinfo->Al > 13) {	/* need not check for < 0 */
      bad:
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 8009460:	6823      	ldr	r3, [r4, #0]
 8009462:	f04f 0c11 	mov.w	ip, #17
 8009466:	e9c3 1607 	strd	r1, r6, [r3, #28]
 800946a:	e9c3 c205 	strd	ip, r2, [r3, #20]
 800946e:	6258      	str	r0, [r3, #36]	; 0x24
 8009470:	4620      	mov	r0, r4
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4798      	blx	r3
 8009476:	e00f      	b.n	8009498 <start_pass+0x60>
      if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
 8009478:	4291      	cmp	r1, r2
 800947a:	dbf1      	blt.n	8009460 <start_pass+0x28>
 800947c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8009480:	428b      	cmp	r3, r1
 8009482:	dbed      	blt.n	8009460 <start_pass+0x28>
      if (cinfo->comps_in_scan != 1)
 8009484:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8009488:	2b01      	cmp	r3, #1
 800948a:	d1e9      	bne.n	8009460 <start_pass+0x28>
    if (cinfo->Ah != 0) {
 800948c:	b116      	cbz	r6, 8009494 <start_pass+0x5c>
      if (cinfo->Ah-1 != cinfo->Al)
 800948e:	1e73      	subs	r3, r6, #1
 8009490:	4283      	cmp	r3, r0
 8009492:	d1e5      	bne.n	8009460 <start_pass+0x28>
    if (cinfo->Al > 13) {	/* need not check for < 0 */
 8009494:	280d      	cmp	r0, #13
 8009496:	dce3      	bgt.n	8009460 <start_pass+0x28>
 8009498:	46ba      	mov	sl, r7
{
 800949a:	f04f 0800 	mov.w	r8, #0
    }
    /* Update progression status, and verify that scan order is legal.
     * Note that inter-scan inconsistencies are treated as warnings
     * not fatal errors ... not clear if this is right way to behave.
     */
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800949e:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 80094a2:	f8d4 2198 	ldr.w	r2, [r4, #408]	; 0x198
 80094a6:	4543      	cmp	r3, r8
 80094a8:	dc1b      	bgt.n	80094e2 <start_pass+0xaa>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
	coef_bit_ptr[coefi] = cinfo->Al;
      }
    }
    /* Select MCU decoding routine */
    if (cinfo->Ah == 0) {
 80094aa:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d153      	bne.n	800955a <start_pass+0x122>
      if (cinfo->Ss == 0)
 80094b2:	2a00      	cmp	r2, #0
 80094b4:	d14f      	bne.n	8009556 <start_pass+0x11e>
	entropy->pub.decode_mcu = decode_mcu_DC_first;
 80094b6:	4b63      	ldr	r3, [pc, #396]	; (8009644 <start_pass+0x20c>)
{
 80094b8:	f04f 0800 	mov.w	r8, #0
 80094bc:	f105 0914 	add.w	r9, r5, #20
     */
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
      WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
    /* Select MCU decoding routine */
    entropy->pub.decode_mcu = decode_mcu;
 80094c0:	606b      	str	r3, [r5, #4]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
      if (entropy->ac_stats[tbl] == NULL)
	entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
	  ((j_common_ptr) cinfo, JPOOL_IMAGE, AC_STAT_BINS);
      MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
 80094c2:	46c2      	mov	sl, r8
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80094c4:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 80094c8:	4543      	cmp	r3, r8
 80094ca:	dc64      	bgt.n	8009596 <start_pass+0x15e>
    }
  }

  /* Initialize arithmetic decoding variables */
  entropy->c = 0;
 80094cc:	2300      	movs	r3, #0
  entropy->a = 0;
 80094ce:	e9c5 3302 	strd	r3, r3, [r5, #8]
  entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 80094d2:	f06f 030f 	mvn.w	r3, #15
 80094d6:	612b      	str	r3, [r5, #16]

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 80094d8:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 80094dc:	636b      	str	r3, [r5, #52]	; 0x34
}
 80094de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 80094e2:	f85a 3b04 	ldr.w	r3, [sl], #4
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 80094e6:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 80094ea:	f8d3 9004 	ldr.w	r9, [r3, #4]
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 80094ee:	ea4f 2009 	mov.w	r0, r9, lsl #8
 80094f2:	eb01 2b09 	add.w	fp, r1, r9, lsl #8
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 80094f6:	b16a      	cbz	r2, 8009514 <start_pass+0xdc>
 80094f8:	580a      	ldr	r2, [r1, r0]
 80094fa:	2a00      	cmp	r2, #0
 80094fc:	da0a      	bge.n	8009514 <start_pass+0xdc>
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 80094fe:	6822      	ldr	r2, [r4, #0]
 8009500:	2376      	movs	r3, #118	; 0x76
 8009502:	f04f 31ff 	mov.w	r1, #4294967295
 8009506:	4620      	mov	r0, r4
 8009508:	e9c2 3905 	strd	r3, r9, [r2, #20]
 800950c:	2300      	movs	r3, #0
 800950e:	61d3      	str	r3, [r2, #28]
 8009510:	6852      	ldr	r2, [r2, #4]
 8009512:	4790      	blx	r2
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 8009514:	f8d4 6198 	ldr.w	r6, [r4, #408]	; 0x198
 8009518:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
 800951c:	42b2      	cmp	r2, r6
 800951e:	da02      	bge.n	8009526 <start_pass+0xee>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009520:	f108 0801 	add.w	r8, r8, #1
 8009524:	e7bb      	b.n	800949e <start_pass+0x66>
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 8009526:	f85b 2026 	ldr.w	r2, [fp, r6, lsl #2]
	if (cinfo->Ah != expected)
 800952a:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800952e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	if (cinfo->Ah != expected)
 8009532:	4291      	cmp	r1, r2
 8009534:	d009      	beq.n	800954a <start_pass+0x112>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 8009536:	6822      	ldr	r2, [r4, #0]
 8009538:	2376      	movs	r3, #118	; 0x76
 800953a:	f04f 31ff 	mov.w	r1, #4294967295
 800953e:	4620      	mov	r0, r4
 8009540:	61d6      	str	r6, [r2, #28]
 8009542:	e9c2 3905 	strd	r3, r9, [r2, #20]
 8009546:	6852      	ldr	r2, [r2, #4]
 8009548:	4790      	blx	r2
	coef_bit_ptr[coefi] = cinfo->Al;
 800954a:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
 800954e:	f84b 2026 	str.w	r2, [fp, r6, lsl #2]
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 8009552:	3601      	adds	r6, #1
 8009554:	e7e0      	b.n	8009518 <start_pass+0xe0>
	entropy->pub.decode_mcu = decode_mcu_AC_first;
 8009556:	4b3c      	ldr	r3, [pc, #240]	; (8009648 <start_pass+0x210>)
 8009558:	e7ae      	b.n	80094b8 <start_pass+0x80>
      if (cinfo->Ss == 0)
 800955a:	b90a      	cbnz	r2, 8009560 <start_pass+0x128>
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 800955c:	4b3b      	ldr	r3, [pc, #236]	; (800964c <start_pass+0x214>)
 800955e:	e7ab      	b.n	80094b8 <start_pass+0x80>
	entropy->pub.decode_mcu = decode_mcu_AC_refine;
 8009560:	4b3b      	ldr	r3, [pc, #236]	; (8009650 <start_pass+0x218>)
 8009562:	e7a9      	b.n	80094b8 <start_pass+0x80>
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 8009564:	b96a      	cbnz	r2, 8009582 <start_pass+0x14a>
 8009566:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
 800956a:	b953      	cbnz	r3, 8009582 <start_pass+0x14a>
 800956c:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 8009570:	b93b      	cbnz	r3, 8009582 <start_pass+0x14a>
	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 8009572:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 8009576:	2b3f      	cmp	r3, #63	; 0x3f
 8009578:	dc0b      	bgt.n	8009592 <start_pass+0x15a>
	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 800957a:	f8d0 21b0 	ldr.w	r2, [r0, #432]	; 0x1b0
 800957e:	4293      	cmp	r3, r2
 8009580:	d007      	beq.n	8009592 <start_pass+0x15a>
      WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 8009582:	6823      	ldr	r3, [r4, #0]
 8009584:	227d      	movs	r2, #125	; 0x7d
 8009586:	f04f 31ff 	mov.w	r1, #4294967295
 800958a:	4620      	mov	r0, r4
 800958c:	615a      	str	r2, [r3, #20]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	4798      	blx	r3
    entropy->pub.decode_mcu = decode_mcu;
 8009592:	4b30      	ldr	r3, [pc, #192]	; (8009654 <start_pass+0x21c>)
 8009594:	e790      	b.n	80094b8 <start_pass+0x80>
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 8009596:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    compptr = cinfo->cur_comp_info[ci];
 800959a:	f857 bb04 	ldr.w	fp, [r7], #4
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 800959e:	b133      	cbz	r3, 80095ae <start_pass+0x176>
 80095a0:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 80095a4:	bb43      	cbnz	r3, 80095f8 <start_pass+0x1c0>
 80095a6:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d13a      	bne.n	8009624 <start_pass+0x1ec>
      tbl = compptr->dc_tbl_no;
 80095ae:	f8db 6014 	ldr.w	r6, [fp, #20]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 80095b2:	2e0f      	cmp	r6, #15
 80095b4:	d906      	bls.n	80095c4 <start_pass+0x18c>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 80095b6:	6823      	ldr	r3, [r4, #0]
 80095b8:	2232      	movs	r2, #50	; 0x32
 80095ba:	4620      	mov	r0, r4
 80095bc:	e9c3 2605 	strd	r2, r6, [r3, #20]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	4798      	blx	r3
      if (entropy->dc_stats[tbl] == NULL)
 80095c4:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 80095c8:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80095ca:	b933      	cbnz	r3, 80095da <start_pass+0x1a2>
	entropy->dc_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 80095cc:	6863      	ldr	r3, [r4, #4]
 80095ce:	2240      	movs	r2, #64	; 0x40
 80095d0:	2101      	movs	r1, #1
 80095d2:	4620      	mov	r0, r4
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4798      	blx	r3
 80095d8:	63b0      	str	r0, [r6, #56]	; 0x38
      MEMZERO(entropy->dc_stats[tbl], DC_STAT_BINS);
 80095da:	2240      	movs	r2, #64	; 0x40
 80095dc:	2100      	movs	r1, #0
 80095de:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 80095e0:	f01d ffa0 	bl	8027524 <memset>
      entropy->last_dc_val[ci] = 0;
 80095e4:	f8c9 a000 	str.w	sl, [r9]
      entropy->dc_context[ci] = 0;
 80095e8:	f8c9 a010 	str.w	sl, [r9, #16]
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 80095ec:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80095f0:	b9eb      	cbnz	r3, 800962e <start_pass+0x1f6>
 80095f2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 80095f6:	b1ab      	cbz	r3, 8009624 <start_pass+0x1ec>
      tbl = compptr->ac_tbl_no;
 80095f8:	f8db 6018 	ldr.w	r6, [fp, #24]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 80095fc:	2e0f      	cmp	r6, #15
 80095fe:	d819      	bhi.n	8009634 <start_pass+0x1fc>
      if (entropy->ac_stats[tbl] == NULL)
 8009600:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8009604:	6fb3      	ldr	r3, [r6, #120]	; 0x78
 8009606:	b93b      	cbnz	r3, 8009618 <start_pass+0x1e0>
	entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 8009608:	6863      	ldr	r3, [r4, #4]
 800960a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800960e:	2101      	movs	r1, #1
 8009610:	4620      	mov	r0, r4
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4798      	blx	r3
 8009616:	67b0      	str	r0, [r6, #120]	; 0x78
      MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
 8009618:	f44f 7280 	mov.w	r2, #256	; 0x100
 800961c:	2100      	movs	r1, #0
 800961e:	6fb0      	ldr	r0, [r6, #120]	; 0x78
 8009620:	f01d ff80 	bl	8027524 <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009624:	f108 0801 	add.w	r8, r8, #1
 8009628:	f109 0904 	add.w	r9, r9, #4
 800962c:	e74a      	b.n	80094c4 <start_pass+0x8c>
	(cinfo->progressive_mode && cinfo->Ss)) {
 800962e:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 8009632:	e7e0      	b.n	80095f6 <start_pass+0x1be>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 8009634:	6823      	ldr	r3, [r4, #0]
 8009636:	2232      	movs	r2, #50	; 0x32
 8009638:	4620      	mov	r0, r4
 800963a:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4798      	blx	r3
 8009642:	e7dd      	b.n	8009600 <start_pass+0x1c8>
 8009644:	08009bff 	.word	0x08009bff
 8009648:	08009acb 	.word	0x08009acb
 800964c:	08009a79 	.word	0x08009a79
 8009650:	0800994f 	.word	0x0800994f
 8009654:	080096fb 	.word	0x080096fb

08009658 <process_restart>:
{
 8009658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800965c:	e9d0 3573 	ldrd	r3, r5, [r0, #460]	; 0x1cc
{
 8009660:	4604      	mov	r4, r0
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	4798      	blx	r3
 8009666:	b928      	cbnz	r0, 8009674 <process_restart+0x1c>
    ERREXIT(cinfo, JERR_CANT_SUSPEND);
 8009668:	6823      	ldr	r3, [r4, #0]
 800966a:	2219      	movs	r2, #25
 800966c:	4620      	mov	r0, r4
 800966e:	615a      	str	r2, [r3, #20]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4798      	blx	r3
{
 8009674:	2600      	movs	r6, #0
 8009676:	f105 0714 	add.w	r7, r5, #20
 800967a:	f504 78aa 	add.w	r8, r4, #340	; 0x154
      MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 800967e:	46b1      	mov	r9, r6
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009680:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8009684:	42b3      	cmp	r3, r6
 8009686:	dc0a      	bgt.n	800969e <process_restart+0x46>
  entropy->c = 0;
 8009688:	2300      	movs	r3, #0
  entropy->a = 0;
 800968a:	e9c5 3302 	strd	r3, r3, [r5, #8]
  entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 800968e:	f06f 030f 	mvn.w	r3, #15
 8009692:	612b      	str	r3, [r5, #16]
  entropy->restarts_to_go = cinfo->restart_interval;
 8009694:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8009698:	636b      	str	r3, [r5, #52]	; 0x34
}
 800969a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 800969e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    compptr = cinfo->cur_comp_info[ci];
 80096a2:	f858 ab04 	ldr.w	sl, [r8], #4
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 80096a6:	b12b      	cbz	r3, 80096b4 <process_restart+0x5c>
 80096a8:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 80096ac:	b9ab      	cbnz	r3, 80096da <process_restart+0x82>
 80096ae:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 80096b2:	b9e3      	cbnz	r3, 80096ee <process_restart+0x96>
      MEMZERO(entropy->dc_stats[compptr->dc_tbl_no], DC_STAT_BINS);
 80096b4:	f8da 3014 	ldr.w	r3, [sl, #20]
 80096b8:	2240      	movs	r2, #64	; 0x40
 80096ba:	2100      	movs	r1, #0
 80096bc:	330e      	adds	r3, #14
 80096be:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 80096c2:	f01d ff2f 	bl	8027524 <memset>
      entropy->last_dc_val[ci] = 0;
 80096c6:	f8c7 9000 	str.w	r9, [r7]
      entropy->dc_context[ci] = 0;
 80096ca:	f8c7 9010 	str.w	r9, [r7, #16]
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 80096ce:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80096d2:	b97b      	cbnz	r3, 80096f4 <process_restart+0x9c>
 80096d4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 80096d8:	b14b      	cbz	r3, 80096ee <process_restart+0x96>
      MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 80096da:	f8da 3018 	ldr.w	r3, [sl, #24]
 80096de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80096e2:	2100      	movs	r1, #0
 80096e4:	331e      	adds	r3, #30
 80096e6:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 80096ea:	f01d ff1b 	bl	8027524 <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80096ee:	3601      	adds	r6, #1
 80096f0:	3704      	adds	r7, #4
 80096f2:	e7c5      	b.n	8009680 <process_restart+0x28>
	(cinfo->progressive_mode && cinfo->Ss)) {
 80096f4:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 80096f8:	e7ee      	b.n	80096d8 <process_restart+0x80>

080096fa <decode_mcu>:
{
 80096fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (cinfo->restart_interval) {
 80096fe:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 8009702:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8009704:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 8009708:	ed2d 8b02 	vpush	{d8}
 800970c:	b087      	sub	sp, #28
 800970e:	9105      	str	r1, [sp, #20]
  if (cinfo->restart_interval) {
 8009710:	b133      	cbz	r3, 8009720 <decode_mcu+0x26>
    if (entropy->restarts_to_go == 0)
 8009712:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009714:	b90b      	cbnz	r3, 800971a <decode_mcu+0x20>
      process_restart(cinfo);
 8009716:	f7ff ff9f 	bl	8009658 <process_restart>
    entropy->restarts_to_go--;
 800971a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800971c:	3b01      	subs	r3, #1
 800971e:	636b      	str	r3, [r5, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 8009720:	692b      	ldr	r3, [r5, #16]
 8009722:	3301      	adds	r3, #1
 8009724:	f000 809f 	beq.w	8009866 <decode_mcu+0x16c>
  natural_order = cinfo->natural_order;
 8009728:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800972c:	2700      	movs	r7, #0
  natural_order = cinfo->natural_order;
 800972e:	9304      	str	r3, [sp, #16]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8009730:	f504 73b8 	add.w	r3, r4, #368	; 0x170
 8009734:	9303      	str	r3, [sp, #12]
      sign = arith_decode(cinfo, entropy->fixed_bin);
 8009736:	f105 03b8 	add.w	r3, r5, #184	; 0xb8
 800973a:	ee08 3a10 	vmov	s16, r3
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800973e:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 8009742:	42bb      	cmp	r3, r7
 8009744:	f340 808f 	ble.w	8009866 <decode_mcu+0x16c>
    block = MCU_data[blkn];
 8009748:	9b05      	ldr	r3, [sp, #20]
    if (arith_decode(cinfo, st) == 0)
 800974a:	4620      	mov	r0, r4
    ci = cinfo->MCU_membership[blkn];
 800974c:	9a03      	ldr	r2, [sp, #12]
    block = MCU_data[blkn];
 800974e:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 8009752:	9300      	str	r3, [sp, #0]
    ci = cinfo->MCU_membership[blkn];
 8009754:	f852 3b04 	ldr.w	r3, [r2], #4
 8009758:	9203      	str	r2, [sp, #12]
    compptr = cinfo->cur_comp_info[ci];
 800975a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800975e:	eb05 0b83 	add.w	fp, r5, r3, lsl #2
 8009762:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 8009766:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
    compptr = cinfo->cur_comp_info[ci];
 800976a:	9201      	str	r2, [sp, #4]
    tbl = compptr->dc_tbl_no;
 800976c:	6952      	ldr	r2, [r2, #20]
 800976e:	eb05 0982 	add.w	r9, r5, r2, lsl #2
 8009772:	9202      	str	r2, [sp, #8]
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 8009774:	f8d9 6038 	ldr.w	r6, [r9, #56]	; 0x38
 8009778:	440e      	add	r6, r1
    if (arith_decode(cinfo, st) == 0)
 800977a:	4631      	mov	r1, r6
 800977c:	f7ff fdee 	bl	800935c <arith_decode>
 8009780:	bb68      	cbnz	r0, 80097de <decode_mcu+0xe4>
      entropy->dc_context[ci] = 0;
 8009782:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
    (*block)[0] = (JCOEF) entropy->last_dc_val[ci];
 8009786:	f8db 3014 	ldr.w	r3, [fp, #20]
 800978a:	9a00      	ldr	r2, [sp, #0]
 800978c:	8013      	strh	r3, [r2, #0]
    if (cinfo->lim_Se == 0) continue;
 800978e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8009792:	2b00      	cmp	r3, #0
 8009794:	f000 80c4 	beq.w	8009920 <decode_mcu+0x226>
    tbl = compptr->ac_tbl_no;
 8009798:	9b01      	ldr	r3, [sp, #4]
    k = 0;
 800979a:	2600      	movs	r6, #0
    tbl = compptr->ac_tbl_no;
 800979c:	699b      	ldr	r3, [r3, #24]
    k = 0;
 800979e:	eb05 0b83 	add.w	fp, r5, r3, lsl #2
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 80097a2:	eb04 0a03 	add.w	sl, r4, r3
      st = entropy->ac_stats[tbl] + 3 * k;
 80097a6:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80097aa:	f8db 3078 	ldr.w	r3, [fp, #120]	; 0x78
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 80097ae:	4620      	mov	r0, r4
      st = entropy->ac_stats[tbl] + 3 * k;
 80097b0:	eb03 0901 	add.w	r9, r3, r1
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 80097b4:	4649      	mov	r1, r9
 80097b6:	f7ff fdd1 	bl	800935c <arith_decode>
 80097ba:	2800      	cmp	r0, #0
 80097bc:	f040 80b0 	bne.w	8009920 <decode_mcu+0x226>
	if (arith_decode(cinfo, st + 1)) break;
 80097c0:	f109 0101 	add.w	r1, r9, #1
 80097c4:	4620      	mov	r0, r4
	k++;
 80097c6:	3601      	adds	r6, #1
	if (arith_decode(cinfo, st + 1)) break;
 80097c8:	f7ff fdc8 	bl	800935c <arith_decode>
 80097cc:	2800      	cmp	r0, #0
 80097ce:	d16e      	bne.n	80098ae <decode_mcu+0x1b4>
	if (k >= cinfo->lim_Se) {
 80097d0:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
	st += 3;
 80097d4:	f109 0903 	add.w	r9, r9, #3
	if (k >= cinfo->lim_Se) {
 80097d8:	42b2      	cmp	r2, r6
 80097da:	dcf1      	bgt.n	80097c0 <decode_mcu+0xc6>
 80097dc:	e038      	b.n	8009850 <decode_mcu+0x156>
      sign = arith_decode(cinfo, st + 1);
 80097de:	1c71      	adds	r1, r6, #1
 80097e0:	4620      	mov	r0, r4
 80097e2:	f7ff fdbb 	bl	800935c <arith_decode>
      st += 2; st += sign;
 80097e6:	1c81      	adds	r1, r0, #2
      sign = arith_decode(cinfo, st + 1);
 80097e8:	4680      	mov	r8, r0
      if ((m = arith_decode(cinfo, st)) != 0) {
 80097ea:	4620      	mov	r0, r4
      st += 2; st += sign;
 80097ec:	eb06 0a01 	add.w	sl, r6, r1
      if ((m = arith_decode(cinfo, st)) != 0) {
 80097f0:	4651      	mov	r1, sl
 80097f2:	f7ff fdb3 	bl	800935c <arith_decode>
 80097f6:	4606      	mov	r6, r0
 80097f8:	b140      	cbz	r0, 800980c <decode_mcu+0x112>
	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 80097fa:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 80097fe:	f101 0a14 	add.w	sl, r1, #20
	while (arith_decode(cinfo, st)) {
 8009802:	4651      	mov	r1, sl
 8009804:	4620      	mov	r0, r4
 8009806:	f7ff fda9 	bl	800935c <arith_decode>
 800980a:	b9e8      	cbnz	r0, 8009848 <decode_mcu+0x14e>
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 800980c:	9b02      	ldr	r3, [sp, #8]
 800980e:	4423      	add	r3, r4
 8009810:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
 8009814:	4699      	mov	r9, r3
 8009816:	2301      	movs	r3, #1
 8009818:	fa03 f202 	lsl.w	r2, r3, r2
 800981c:	ebb6 0f62 	cmp.w	r6, r2, asr #1
 8009820:	da2a      	bge.n	8009878 <decode_mcu+0x17e>
	entropy->dc_context[ci] = 0;		   /* zero diff category */
 8009822:	2200      	movs	r2, #0
      st += 14;
 8009824:	f10a 010e 	add.w	r1, sl, #14
      while (m >>= 1)
 8009828:	46b1      	mov	r9, r6
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 800982a:	f8cb 2024 	str.w	r2, [fp, #36]	; 0x24
      while (m >>= 1)
 800982e:	1076      	asrs	r6, r6, #1
 8009830:	d130      	bne.n	8009894 <decode_mcu+0x19a>
      v += 1; if (sign) v = -v;
 8009832:	f1b8 0f00 	cmp.w	r8, #0
 8009836:	d137      	bne.n	80098a8 <decode_mcu+0x1ae>
 8009838:	f109 0901 	add.w	r9, r9, #1
      entropy->last_dc_val[ci] += v;
 800983c:	f8db 2014 	ldr.w	r2, [fp, #20]
 8009840:	444a      	add	r2, r9
 8009842:	f8cb 2014 	str.w	r2, [fp, #20]
 8009846:	e79e      	b.n	8009786 <decode_mcu+0x8c>
	  if ((m <<= 1) == 0x8000) {
 8009848:	0076      	lsls	r6, r6, #1
 800984a:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 800984e:	d110      	bne.n	8009872 <decode_mcu+0x178>
	      WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 8009850:	6823      	ldr	r3, [r4, #0]
 8009852:	2275      	movs	r2, #117	; 0x75
 8009854:	f04f 31ff 	mov.w	r1, #4294967295
 8009858:	4620      	mov	r0, r4
 800985a:	615a      	str	r2, [r3, #20]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	4798      	blx	r3
	      entropy->ct = -1;			/* magnitude overflow */
 8009860:	f04f 33ff 	mov.w	r3, #4294967295
 8009864:	612b      	str	r3, [r5, #16]
}
 8009866:	2001      	movs	r0, #1
 8009868:	b007      	add	sp, #28
 800986a:	ecbd 8b02 	vpop	{d8}
 800986e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  st += 1;
 8009872:	f10a 0a01 	add.w	sl, sl, #1
 8009876:	e7c4      	b.n	8009802 <decode_mcu+0x108>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 8009878:	f899 20f8 	ldrb.w	r2, [r9, #248]	; 0xf8
 800987c:	2301      	movs	r3, #1
 800987e:	fa03 f202 	lsl.w	r2, r3, r2
 8009882:	ebb6 0f62 	cmp.w	r6, r2, asr #1
	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 8009886:	bfcc      	ite	gt
 8009888:	f108 0203 	addgt.w	r2, r8, #3
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 800988c:	f108 0201 	addle.w	r2, r8, #1
 8009890:	0092      	lsls	r2, r2, #2
 8009892:	e7c7      	b.n	8009824 <decode_mcu+0x12a>
	if (arith_decode(cinfo, st)) v |= m;
 8009894:	4620      	mov	r0, r4
 8009896:	9102      	str	r1, [sp, #8]
 8009898:	f7ff fd60 	bl	800935c <arith_decode>
 800989c:	9902      	ldr	r1, [sp, #8]
 800989e:	2800      	cmp	r0, #0
 80098a0:	d0c5      	beq.n	800982e <decode_mcu+0x134>
 80098a2:	ea49 0906 	orr.w	r9, r9, r6
 80098a6:	e7c2      	b.n	800982e <decode_mcu+0x134>
      v += 1; if (sign) v = -v;
 80098a8:	ea6f 0909 	mvn.w	r9, r9
 80098ac:	e7c6      	b.n	800983c <decode_mcu+0x142>
      st += 2;
 80098ae:	f109 0902 	add.w	r9, r9, #2
      sign = arith_decode(cinfo, entropy->fixed_bin);
 80098b2:	ee18 1a10 	vmov	r1, s16
 80098b6:	4620      	mov	r0, r4
 80098b8:	f7ff fd50 	bl	800935c <arith_decode>
      if ((m = arith_decode(cinfo, st)) != 0) {
 80098bc:	4649      	mov	r1, r9
      sign = arith_decode(cinfo, entropy->fixed_bin);
 80098be:	9001      	str	r0, [sp, #4]
      if ((m = arith_decode(cinfo, st)) != 0) {
 80098c0:	4620      	mov	r0, r4
 80098c2:	f7ff fd4b 	bl	800935c <arith_decode>
 80098c6:	4680      	mov	r8, r0
 80098c8:	b1a8      	cbz	r0, 80098f6 <decode_mcu+0x1fc>
	if (arith_decode(cinfo, st)) {
 80098ca:	4649      	mov	r1, r9
 80098cc:	4620      	mov	r0, r4
 80098ce:	f7ff fd45 	bl	800935c <arith_decode>
 80098d2:	b180      	cbz	r0, 80098f6 <decode_mcu+0x1fc>
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 80098d4:	f89a 1108 	ldrb.w	r1, [sl, #264]	; 0x108
	  m <<= 1;
 80098d8:	ea4f 0848 	mov.w	r8, r8, lsl #1
	  st = entropy->ac_stats[tbl] +
 80098dc:	f8db 2078 	ldr.w	r2, [fp, #120]	; 0x78
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 80098e0:	42b1      	cmp	r1, r6
 80098e2:	bfac      	ite	ge
 80098e4:	21bd      	movge	r1, #189	; 0xbd
 80098e6:	21d9      	movlt	r1, #217	; 0xd9
	  st = entropy->ac_stats[tbl] +
 80098e8:	eb02 0901 	add.w	r9, r2, r1
	  while (arith_decode(cinfo, st)) {
 80098ec:	4649      	mov	r1, r9
 80098ee:	4620      	mov	r0, r4
 80098f0:	f7ff fd34 	bl	800935c <arith_decode>
 80098f4:	b9b0      	cbnz	r0, 8009924 <decode_mcu+0x22a>
      st += 14;
 80098f6:	f109 010e 	add.w	r1, r9, #14
      v = m;
 80098fa:	46c1      	mov	r9, r8
      while (m >>= 1)
 80098fc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009900:	d118      	bne.n	8009934 <decode_mcu+0x23a>
      v += 1; if (sign) v = -v;
 8009902:	9b01      	ldr	r3, [sp, #4]
 8009904:	bb03      	cbnz	r3, 8009948 <decode_mcu+0x24e>
 8009906:	f109 0201 	add.w	r2, r9, #1
      (*block)[natural_order[k]] = (JCOEF) v;
 800990a:	9b04      	ldr	r3, [sp, #16]
 800990c:	9900      	ldr	r1, [sp, #0]
 800990e:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8009912:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    } while (k < cinfo->lim_Se);
 8009916:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800991a:	42b3      	cmp	r3, r6
 800991c:	f73f af43 	bgt.w	80097a6 <decode_mcu+0xac>
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8009920:	3701      	adds	r7, #1
 8009922:	e70c      	b.n	800973e <decode_mcu+0x44>
	    if ((m <<= 1) == 0x8000) {
 8009924:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8009928:	f5b8 4f00 	cmp.w	r8, #32768	; 0x8000
 800992c:	d090      	beq.n	8009850 <decode_mcu+0x156>
	    st += 1;
 800992e:	f109 0901 	add.w	r9, r9, #1
 8009932:	e7db      	b.n	80098ec <decode_mcu+0x1f2>
	if (arith_decode(cinfo, st)) v |= m;
 8009934:	4620      	mov	r0, r4
 8009936:	9102      	str	r1, [sp, #8]
 8009938:	f7ff fd10 	bl	800935c <arith_decode>
 800993c:	9902      	ldr	r1, [sp, #8]
 800993e:	2800      	cmp	r0, #0
 8009940:	d0dc      	beq.n	80098fc <decode_mcu+0x202>
 8009942:	ea49 0908 	orr.w	r9, r9, r8
 8009946:	e7d9      	b.n	80098fc <decode_mcu+0x202>
      v += 1; if (sign) v = -v;
 8009948:	ea6f 0209 	mvn.w	r2, r9
 800994c:	e7dd      	b.n	800990a <decode_mcu+0x210>

0800994e <decode_mcu_AC_refine>:
  if (cinfo->restart_interval) {
 800994e:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 8009952:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009956:	4604      	mov	r4, r0
 8009958:	460d      	mov	r5, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800995a:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
{
 800995e:	ed2d 8b02 	vpush	{d8}
 8009962:	b085      	sub	sp, #20
  if (cinfo->restart_interval) {
 8009964:	b133      	cbz	r3, 8009974 <decode_mcu_AC_refine+0x26>
    if (entropy->restarts_to_go == 0)
 8009966:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8009968:	b90b      	cbnz	r3, 800996e <decode_mcu_AC_refine+0x20>
      process_restart(cinfo);
 800996a:	f7ff fe75 	bl	8009658 <process_restart>
    entropy->restarts_to_go--;
 800996e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8009970:	3b01      	subs	r3, #1
 8009972:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 8009974:	6933      	ldr	r3, [r6, #16]
 8009976:	3301      	adds	r3, #1
 8009978:	d078      	beq.n	8009a6c <decode_mcu_AC_refine+0x11e>
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800997a:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800997e:	2101      	movs	r1, #1
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 8009980:	f04f 38ff 	mov.w	r8, #4294967295
  natural_order = cinfo->natural_order;
 8009984:	f8d4 b1ac 	ldr.w	fp, [r4, #428]	; 0x1ac
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 8009988:	699a      	ldr	r2, [r3, #24]
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800998a:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
  block = MCU_data[0];
 800998e:	f8d5 9000 	ldr.w	r9, [r5]
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 8009992:	4099      	lsls	r1, r3
  for (kex = cinfo->Se; kex > 0; kex--)
 8009994:	f8d4 719c 	ldr.w	r7, [r4, #412]	; 0x19c
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 8009998:	fa08 f303 	lsl.w	r3, r8, r3
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800999c:	9101      	str	r1, [sp, #4]
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800999e:	9302      	str	r3, [sp, #8]
  for (kex = cinfo->Se; kex > 0; kex--)
 80099a0:	2f00      	cmp	r7, #0
 80099a2:	dc37      	bgt.n	8009a14 <decode_mcu_AC_refine+0xc6>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 80099a4:	f102 031e 	add.w	r3, r2, #30
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 80099a8:	f8d4 5198 	ldr.w	r5, [r4, #408]	; 0x198
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 80099ac:	9303      	str	r3, [sp, #12]
	if (arith_decode(cinfo, entropy->fixed_bin))
 80099ae:	f106 03b8 	add.w	r3, r6, #184	; 0xb8
 80099b2:	ee08 3a10 	vmov	s16, r3
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 80099b6:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 80099ba:	42ab      	cmp	r3, r5
 80099bc:	db56      	blt.n	8009a6c <decode_mcu_AC_refine+0x11e>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 80099be:	1e6b      	subs	r3, r5, #1
 80099c0:	9a03      	ldr	r2, [sp, #12]
    if (k > kex)
 80099c2:	42bd      	cmp	r5, r7
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 80099c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80099c8:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 80099cc:	eb02 0a03 	add.w	sl, r2, r3
    if (k > kex)
 80099d0:	dd05      	ble.n	80099de <decode_mcu_AC_refine+0x90>
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 80099d2:	4651      	mov	r1, sl
 80099d4:	4620      	mov	r0, r4
 80099d6:	f7ff fcc1 	bl	800935c <arith_decode>
 80099da:	2800      	cmp	r0, #0
 80099dc:	d146      	bne.n	8009a6c <decode_mcu_AC_refine+0x11e>
      thiscoef = *block + natural_order[k];
 80099de:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 80099e2:	3501      	adds	r5, #1
 80099e4:	eb09 0841 	add.w	r8, r9, r1, lsl #1
      if (*thiscoef) {				/* previously nonzero coef */
 80099e8:	f939 1011 	ldrsh.w	r1, [r9, r1, lsl #1]
 80099ec:	b1d1      	cbz	r1, 8009a24 <decode_mcu_AC_refine+0xd6>
	if (arith_decode(cinfo, st + 2)) {
 80099ee:	f10a 0102 	add.w	r1, sl, #2
 80099f2:	4620      	mov	r0, r4
 80099f4:	f7ff fcb2 	bl	800935c <arith_decode>
 80099f8:	2800      	cmp	r0, #0
 80099fa:	d0dc      	beq.n	80099b6 <decode_mcu_AC_refine+0x68>
	  if (*thiscoef < 0)
 80099fc:	f9b8 1000 	ldrsh.w	r1, [r8]
 8009a00:	f8b8 3000 	ldrh.w	r3, [r8]
 8009a04:	2900      	cmp	r1, #0
	    *thiscoef += m1;
 8009a06:	bfb4      	ite	lt
 8009a08:	9a02      	ldrlt	r2, [sp, #8]
	    *thiscoef += p1;
 8009a0a:	9a01      	ldrge	r2, [sp, #4]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	f8a8 3000 	strh.w	r3, [r8]
 8009a12:	e7d0      	b.n	80099b6 <decode_mcu_AC_refine+0x68>
    if ((*block)[natural_order[kex]]) break;
 8009a14:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8009a18:	f939 3013 	ldrsh.w	r3, [r9, r3, lsl #1]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d1c1      	bne.n	80099a4 <decode_mcu_AC_refine+0x56>
  for (kex = cinfo->Se; kex > 0; kex--)
 8009a20:	3f01      	subs	r7, #1
 8009a22:	e7bd      	b.n	80099a0 <decode_mcu_AC_refine+0x52>
      if (arith_decode(cinfo, st + 1)) {	/* newly nonzero coef */
 8009a24:	f10a 0101 	add.w	r1, sl, #1
 8009a28:	4620      	mov	r0, r4
 8009a2a:	f7ff fc97 	bl	800935c <arith_decode>
 8009a2e:	b160      	cbz	r0, 8009a4a <decode_mcu_AC_refine+0xfc>
	if (arith_decode(cinfo, entropy->fixed_bin))
 8009a30:	ee18 1a10 	vmov	r1, s16
 8009a34:	4620      	mov	r0, r4
 8009a36:	f7ff fc91 	bl	800935c <arith_decode>
	  *thiscoef = m1;
 8009a3a:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8009a3e:	2800      	cmp	r0, #0
 8009a40:	bf18      	it	ne
 8009a42:	4613      	movne	r3, r2
 8009a44:	f8a8 3000 	strh.w	r3, [r8]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 8009a48:	e7b5      	b.n	80099b6 <decode_mcu_AC_refine+0x68>
      if (k > cinfo->Se) {
 8009a4a:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
      st += 3; k++;
 8009a4e:	f10a 0a03 	add.w	sl, sl, #3
      if (k > cinfo->Se) {
 8009a52:	42aa      	cmp	r2, r5
 8009a54:	dac3      	bge.n	80099de <decode_mcu_AC_refine+0x90>
	WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 8009a56:	6823      	ldr	r3, [r4, #0]
 8009a58:	2275      	movs	r2, #117	; 0x75
 8009a5a:	f04f 31ff 	mov.w	r1, #4294967295
 8009a5e:	4620      	mov	r0, r4
 8009a60:	615a      	str	r2, [r3, #20]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	4798      	blx	r3
	entropy->ct = -1;			/* spectral overflow */
 8009a66:	f04f 33ff 	mov.w	r3, #4294967295
 8009a6a:	6133      	str	r3, [r6, #16]
}
 8009a6c:	2001      	movs	r0, #1
 8009a6e:	b005      	add	sp, #20
 8009a70:	ecbd 8b02 	vpop	{d8}
 8009a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009a78 <decode_mcu_DC_refine>:
  if (cinfo->restart_interval) {
 8009a78:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 8009a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a80:	4604      	mov	r4, r0
 8009a82:	4688      	mov	r8, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8009a84:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 8009a88:	b133      	cbz	r3, 8009a98 <decode_mcu_DC_refine+0x20>
    if (entropy->restarts_to_go == 0)
 8009a8a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8009a8c:	b90b      	cbnz	r3, 8009a92 <decode_mcu_DC_refine+0x1a>
      process_restart(cinfo);
 8009a8e:	f7ff fde3 	bl	8009658 <process_restart>
    entropy->restarts_to_go--;
 8009a92:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8009a94:	3b01      	subs	r3, #1
 8009a96:	6373      	str	r3, [r6, #52]	; 0x34
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 8009a98:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 8009a9c:	2701      	movs	r7, #1
  st = entropy->fixed_bin;	/* use fixed probability estimation */
 8009a9e:	36b8      	adds	r6, #184	; 0xb8
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8009aa0:	2500      	movs	r5, #0
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 8009aa2:	409f      	lsls	r7, r3
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8009aa4:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 8009aa8:	42ab      	cmp	r3, r5
 8009aaa:	dc02      	bgt.n	8009ab2 <decode_mcu_DC_refine+0x3a>
}
 8009aac:	2001      	movs	r0, #1
 8009aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (arith_decode(cinfo, st))
 8009ab2:	4631      	mov	r1, r6
 8009ab4:	4620      	mov	r0, r4
 8009ab6:	f7ff fc51 	bl	800935c <arith_decode>
 8009aba:	b120      	cbz	r0, 8009ac6 <decode_mcu_DC_refine+0x4e>
      MCU_data[blkn][0][0] |= p1;
 8009abc:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
 8009ac0:	8813      	ldrh	r3, [r2, #0]
 8009ac2:	433b      	orrs	r3, r7
 8009ac4:	8013      	strh	r3, [r2, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8009ac6:	3501      	adds	r5, #1
 8009ac8:	e7ec      	b.n	8009aa4 <decode_mcu_DC_refine+0x2c>

08009aca <decode_mcu_AC_first>:
  if (cinfo->restart_interval) {
 8009aca:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 8009ace:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ad2:	4604      	mov	r4, r0
 8009ad4:	b087      	sub	sp, #28
 8009ad6:	460d      	mov	r5, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8009ad8:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 8009adc:	b133      	cbz	r3, 8009aec <decode_mcu_AC_first+0x22>
    if (entropy->restarts_to_go == 0)
 8009ade:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8009ae0:	b90b      	cbnz	r3, 8009ae6 <decode_mcu_AC_first+0x1c>
      process_restart(cinfo);
 8009ae2:	f7ff fdb9 	bl	8009658 <process_restart>
    entropy->restarts_to_go--;
 8009ae6:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 8009aec:	6933      	ldr	r3, [r6, #16]
 8009aee:	3301      	adds	r3, #1
 8009af0:	d01d      	beq.n	8009b2e <decode_mcu_AC_first+0x64>
  block = MCU_data[0];
 8009af2:	682b      	ldr	r3, [r5, #0]
    sign = arith_decode(cinfo, entropy->fixed_bin);
 8009af4:	f106 0bb8 	add.w	fp, r6, #184	; 0xb8
  natural_order = cinfo->natural_order;
 8009af8:	f8d4 a1ac 	ldr.w	sl, [r4, #428]	; 0x1ac
  block = MCU_data[0];
 8009afc:	9302      	str	r3, [sp, #8]
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 8009afe:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 8009b02:	f8d4 5198 	ldr.w	r5, [r4, #408]	; 0x198
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 8009b06:	699b      	ldr	r3, [r3, #24]
 8009b08:	eb06 0983 	add.w	r9, r6, r3, lsl #2
 8009b0c:	9301      	str	r3, [sp, #4]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 8009b0e:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 8009b12:	42ab      	cmp	r3, r5
 8009b14:	db0b      	blt.n	8009b2e <decode_mcu_AC_first+0x64>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 8009b16:	1e69      	subs	r1, r5, #1
 8009b18:	f8d9 3078 	ldr.w	r3, [r9, #120]	; 0x78
    if (arith_decode(cinfo, st)) break;		/* EOB flag */
 8009b1c:	4620      	mov	r0, r4
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 8009b1e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8009b22:	eb03 0801 	add.w	r8, r3, r1
    if (arith_decode(cinfo, st)) break;		/* EOB flag */
 8009b26:	4641      	mov	r1, r8
 8009b28:	f7ff fc18 	bl	800935c <arith_decode>
 8009b2c:	b1b0      	cbz	r0, 8009b5c <decode_mcu_AC_first+0x92>
}
 8009b2e:	2001      	movs	r0, #1
 8009b30:	b007      	add	sp, #28
 8009b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      st += 3; k++;
 8009b36:	3501      	adds	r5, #1
      if (k > cinfo->Se) {
 8009b38:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
      st += 3; k++;
 8009b3c:	f108 0803 	add.w	r8, r8, #3
      if (k > cinfo->Se) {
 8009b40:	42aa      	cmp	r2, r5
 8009b42:	da0b      	bge.n	8009b5c <decode_mcu_AC_first+0x92>
	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 8009b44:	6823      	ldr	r3, [r4, #0]
 8009b46:	2275      	movs	r2, #117	; 0x75
 8009b48:	f04f 31ff 	mov.w	r1, #4294967295
 8009b4c:	4620      	mov	r0, r4
 8009b4e:	615a      	str	r2, [r3, #20]
 8009b50:	685b      	ldr	r3, [r3, #4]
 8009b52:	4798      	blx	r3
	    entropy->ct = -1;			/* magnitude overflow */
 8009b54:	f04f 33ff 	mov.w	r3, #4294967295
 8009b58:	6133      	str	r3, [r6, #16]
	    return TRUE;
 8009b5a:	e7e8      	b.n	8009b2e <decode_mcu_AC_first+0x64>
    while (arith_decode(cinfo, st + 1) == 0) {
 8009b5c:	f108 0101 	add.w	r1, r8, #1
 8009b60:	4620      	mov	r0, r4
 8009b62:	f7ff fbfb 	bl	800935c <arith_decode>
 8009b66:	2800      	cmp	r0, #0
 8009b68:	d0e5      	beq.n	8009b36 <decode_mcu_AC_first+0x6c>
    st += 2;
 8009b6a:	f108 0802 	add.w	r8, r8, #2
    sign = arith_decode(cinfo, entropy->fixed_bin);
 8009b6e:	4659      	mov	r1, fp
 8009b70:	4620      	mov	r0, r4
 8009b72:	f7ff fbf3 	bl	800935c <arith_decode>
    if ((m = arith_decode(cinfo, st)) != 0) {
 8009b76:	4641      	mov	r1, r8
    sign = arith_decode(cinfo, entropy->fixed_bin);
 8009b78:	9003      	str	r0, [sp, #12]
    if ((m = arith_decode(cinfo, st)) != 0) {
 8009b7a:	4620      	mov	r0, r4
 8009b7c:	f7ff fbee 	bl	800935c <arith_decode>
 8009b80:	4607      	mov	r7, r0
 8009b82:	b1b0      	cbz	r0, 8009bb2 <decode_mcu_AC_first+0xe8>
      if (arith_decode(cinfo, st)) {
 8009b84:	4641      	mov	r1, r8
 8009b86:	4620      	mov	r0, r4
 8009b88:	f7ff fbe8 	bl	800935c <arith_decode>
 8009b8c:	b188      	cbz	r0, 8009bb2 <decode_mcu_AC_first+0xe8>
	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 8009b8e:	9b01      	ldr	r3, [sp, #4]
	m <<= 1;
 8009b90:	007f      	lsls	r7, r7, #1
	st = entropy->ac_stats[tbl] +
 8009b92:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 8009b96:	18e1      	adds	r1, r4, r3
 8009b98:	f891 1108 	ldrb.w	r1, [r1, #264]	; 0x108
 8009b9c:	42a9      	cmp	r1, r5
 8009b9e:	bfac      	ite	ge
 8009ba0:	21bd      	movge	r1, #189	; 0xbd
 8009ba2:	21d9      	movlt	r1, #217	; 0xd9
	st = entropy->ac_stats[tbl] +
 8009ba4:	eb02 0801 	add.w	r8, r2, r1
	while (arith_decode(cinfo, st)) {
 8009ba8:	4641      	mov	r1, r8
 8009baa:	4620      	mov	r0, r4
 8009bac:	f7ff fbd6 	bl	800935c <arith_decode>
 8009bb0:	b988      	cbnz	r0, 8009bd6 <decode_mcu_AC_first+0x10c>
    st += 14;
 8009bb2:	f108 010e 	add.w	r1, r8, #14
    v = m;
 8009bb6:	463a      	mov	r2, r7
    while (m >>= 1)
 8009bb8:	107f      	asrs	r7, r7, #1
 8009bba:	d113      	bne.n	8009be4 <decode_mcu_AC_first+0x11a>
    v += 1; if (sign) v = -v;
 8009bbc:	9b03      	ldr	r3, [sp, #12]
 8009bbe:	b9e3      	cbnz	r3, 8009bfa <decode_mcu_AC_first+0x130>
 8009bc0:	3201      	adds	r2, #1
    (*block)[natural_order[k]] = (JCOEF) (v << cinfo->Al);
 8009bc2:	f8d4 11a4 	ldr.w	r1, [r4, #420]	; 0x1a4
 8009bc6:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 8009bca:	3501      	adds	r5, #1
    (*block)[natural_order[k]] = (JCOEF) (v << cinfo->Al);
 8009bcc:	408a      	lsls	r2, r1
 8009bce:	9902      	ldr	r1, [sp, #8]
 8009bd0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 8009bd4:	e79b      	b.n	8009b0e <decode_mcu_AC_first+0x44>
	  if ((m <<= 1) == 0x8000) {
 8009bd6:	007f      	lsls	r7, r7, #1
 8009bd8:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
 8009bdc:	d0b2      	beq.n	8009b44 <decode_mcu_AC_first+0x7a>
	  st += 1;
 8009bde:	f108 0801 	add.w	r8, r8, #1
 8009be2:	e7e1      	b.n	8009ba8 <decode_mcu_AC_first+0xde>
      if (arith_decode(cinfo, st)) v |= m;
 8009be4:	4620      	mov	r0, r4
 8009be6:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8009bea:	f7ff fbb7 	bl	800935c <arith_decode>
 8009bee:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8009bf2:	2800      	cmp	r0, #0
 8009bf4:	d0e0      	beq.n	8009bb8 <decode_mcu_AC_first+0xee>
 8009bf6:	433a      	orrs	r2, r7
 8009bf8:	e7de      	b.n	8009bb8 <decode_mcu_AC_first+0xee>
    v += 1; if (sign) v = -v;
 8009bfa:	43d2      	mvns	r2, r2
 8009bfc:	e7e1      	b.n	8009bc2 <decode_mcu_AC_first+0xf8>

08009bfe <decode_mcu_DC_first>:
{
 8009bfe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (cinfo->restart_interval) {
 8009c02:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 8009c06:	b085      	sub	sp, #20
 8009c08:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8009c0a:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
{
 8009c0e:	9103      	str	r1, [sp, #12]
  if (cinfo->restart_interval) {
 8009c10:	b133      	cbz	r3, 8009c20 <decode_mcu_DC_first+0x22>
    if (entropy->restarts_to_go == 0)
 8009c12:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8009c14:	b90b      	cbnz	r3, 8009c1a <decode_mcu_DC_first+0x1c>
      process_restart(cinfo);
 8009c16:	f7ff fd1f 	bl	8009658 <process_restart>
    entropy->restarts_to_go--;
 8009c1a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8009c1c:	3b01      	subs	r3, #1
 8009c1e:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 8009c20:	6933      	ldr	r3, [r6, #16]
 8009c22:	3301      	adds	r3, #1
 8009c24:	d073      	beq.n	8009d0e <decode_mcu_DC_first+0x110>
 8009c26:	f504 73b8 	add.w	r3, r4, #368	; 0x170
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8009c2a:	f04f 0800 	mov.w	r8, #0
 8009c2e:	9301      	str	r3, [sp, #4]
 8009c30:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 8009c34:	4543      	cmp	r3, r8
 8009c36:	dd6a      	ble.n	8009d0e <decode_mcu_DC_first+0x110>
    block = MCU_data[blkn];
 8009c38:	9b03      	ldr	r3, [sp, #12]
    if (arith_decode(cinfo, st) == 0)
 8009c3a:	4620      	mov	r0, r4
    ci = cinfo->MCU_membership[blkn];
 8009c3c:	9a01      	ldr	r2, [sp, #4]
    block = MCU_data[blkn];
 8009c3e:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8009c42:	9302      	str	r3, [sp, #8]
    ci = cinfo->MCU_membership[blkn];
 8009c44:	f852 3b04 	ldr.w	r3, [r2], #4
 8009c48:	9201      	str	r2, [sp, #4]
    tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 8009c4a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8009c4e:	eb06 0a83 	add.w	sl, r6, r3, lsl #2
 8009c52:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 8009c56:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
    tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 8009c5a:	6952      	ldr	r2, [r2, #20]
 8009c5c:	eb06 0982 	add.w	r9, r6, r2, lsl #2
 8009c60:	9200      	str	r2, [sp, #0]
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 8009c62:	f8d9 5038 	ldr.w	r5, [r9, #56]	; 0x38
 8009c66:	440d      	add	r5, r1
    if (arith_decode(cinfo, st) == 0)
 8009c68:	4629      	mov	r1, r5
 8009c6a:	f7ff fb77 	bl	800935c <arith_decode>
 8009c6e:	b958      	cbnz	r0, 8009c88 <decode_mcu_DC_first+0x8a>
      entropy->dc_context[ci] = 0;
 8009c70:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
    (*block)[0] = (JCOEF) (entropy->last_dc_val[ci] << cinfo->Al);
 8009c74:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8009c78:	f108 0801 	add.w	r8, r8, #1
    (*block)[0] = (JCOEF) (entropy->last_dc_val[ci] << cinfo->Al);
 8009c7c:	f8da 3014 	ldr.w	r3, [sl, #20]
 8009c80:	4093      	lsls	r3, r2
 8009c82:	9a02      	ldr	r2, [sp, #8]
 8009c84:	8013      	strh	r3, [r2, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8009c86:	e7d3      	b.n	8009c30 <decode_mcu_DC_first+0x32>
      sign = arith_decode(cinfo, st + 1);
 8009c88:	1c69      	adds	r1, r5, #1
 8009c8a:	4620      	mov	r0, r4
 8009c8c:	f7ff fb66 	bl	800935c <arith_decode>
      st += 2; st += sign;
 8009c90:	1c81      	adds	r1, r0, #2
      sign = arith_decode(cinfo, st + 1);
 8009c92:	4607      	mov	r7, r0
      if ((m = arith_decode(cinfo, st)) != 0) {
 8009c94:	4620      	mov	r0, r4
      st += 2; st += sign;
 8009c96:	eb05 0b01 	add.w	fp, r5, r1
      if ((m = arith_decode(cinfo, st)) != 0) {
 8009c9a:	4659      	mov	r1, fp
 8009c9c:	f7ff fb5e 	bl	800935c <arith_decode>
 8009ca0:	4605      	mov	r5, r0
 8009ca2:	b140      	cbz	r0, 8009cb6 <decode_mcu_DC_first+0xb8>
	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 8009ca4:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 8009ca8:	f101 0b14 	add.w	fp, r1, #20
	while (arith_decode(cinfo, st)) {
 8009cac:	4659      	mov	r1, fp
 8009cae:	4620      	mov	r0, r4
 8009cb0:	f7ff fb54 	bl	800935c <arith_decode>
 8009cb4:	b9e0      	cbnz	r0, 8009cf0 <decode_mcu_DC_first+0xf2>
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 8009cb6:	9b00      	ldr	r3, [sp, #0]
 8009cb8:	4423      	add	r3, r4
 8009cba:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
 8009cbe:	4699      	mov	r9, r3
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	fa03 f202 	lsl.w	r2, r3, r2
 8009cc6:	ebb5 0f62 	cmp.w	r5, r2, asr #1
 8009cca:	da27      	bge.n	8009d1c <decode_mcu_DC_first+0x11e>
	entropy->dc_context[ci] = 0;		   /* zero diff category */
 8009ccc:	2300      	movs	r3, #0
 8009cce:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
      st += 14;
 8009cd2:	f10b 010e 	add.w	r1, fp, #14
      while (m >>= 1)
 8009cd6:	46a9      	mov	r9, r5
 8009cd8:	106d      	asrs	r5, r5, #1
 8009cda:	d12d      	bne.n	8009d38 <decode_mcu_DC_first+0x13a>
      v += 1; if (sign) v = -v;
 8009cdc:	2f00      	cmp	r7, #0
 8009cde:	d135      	bne.n	8009d4c <decode_mcu_DC_first+0x14e>
 8009ce0:	f109 0901 	add.w	r9, r9, #1
      entropy->last_dc_val[ci] += v;
 8009ce4:	f8da 2014 	ldr.w	r2, [sl, #20]
 8009ce8:	444a      	add	r2, r9
 8009cea:	f8ca 2014 	str.w	r2, [sl, #20]
 8009cee:	e7c1      	b.n	8009c74 <decode_mcu_DC_first+0x76>
	  if ((m <<= 1) == 0x8000) {
 8009cf0:	006d      	lsls	r5, r5, #1
 8009cf2:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 8009cf6:	d10e      	bne.n	8009d16 <decode_mcu_DC_first+0x118>
	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 8009cf8:	6823      	ldr	r3, [r4, #0]
 8009cfa:	2275      	movs	r2, #117	; 0x75
 8009cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8009d00:	4620      	mov	r0, r4
 8009d02:	615a      	str	r2, [r3, #20]
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	4798      	blx	r3
	    entropy->ct = -1;			/* magnitude overflow */
 8009d08:	f04f 33ff 	mov.w	r3, #4294967295
 8009d0c:	6133      	str	r3, [r6, #16]
}
 8009d0e:	2001      	movs	r0, #1
 8009d10:	b005      	add	sp, #20
 8009d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  st += 1;
 8009d16:	f10b 0b01 	add.w	fp, fp, #1
 8009d1a:	e7c7      	b.n	8009cac <decode_mcu_DC_first+0xae>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 8009d1c:	f899 20f8 	ldrb.w	r2, [r9, #248]	; 0xf8
 8009d20:	2301      	movs	r3, #1
 8009d22:	fa03 f202 	lsl.w	r2, r3, r2
 8009d26:	ebb5 0f62 	cmp.w	r5, r2, asr #1
	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 8009d2a:	bfcc      	ite	gt
 8009d2c:	1cfa      	addgt	r2, r7, #3
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 8009d2e:	1c7a      	addle	r2, r7, #1
 8009d30:	0092      	lsls	r2, r2, #2
 8009d32:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
 8009d36:	e7cc      	b.n	8009cd2 <decode_mcu_DC_first+0xd4>
	if (arith_decode(cinfo, st)) v |= m;
 8009d38:	4620      	mov	r0, r4
 8009d3a:	9100      	str	r1, [sp, #0]
 8009d3c:	f7ff fb0e 	bl	800935c <arith_decode>
 8009d40:	9900      	ldr	r1, [sp, #0]
 8009d42:	2800      	cmp	r0, #0
 8009d44:	d0c8      	beq.n	8009cd8 <decode_mcu_DC_first+0xda>
 8009d46:	ea49 0905 	orr.w	r9, r9, r5
 8009d4a:	e7c5      	b.n	8009cd8 <decode_mcu_DC_first+0xda>
      v += 1; if (sign) v = -v;
 8009d4c:	ea6f 0909 	mvn.w	r9, r9
 8009d50:	e7c8      	b.n	8009ce4 <decode_mcu_DC_first+0xe6>
	...

08009d54 <jinit_arith_decoder>:
 * Module initialization routine for arithmetic entropy decoding.
 */

GLOBAL(void)
jinit_arith_decoder (j_decompress_ptr cinfo)
{
 8009d54:	b538      	push	{r3, r4, r5, lr}
  arith_entropy_ptr entropy;
  int i;

  entropy = (arith_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009d56:	6843      	ldr	r3, [r0, #4]
 8009d58:	22bc      	movs	r2, #188	; 0xbc
 8009d5a:	2101      	movs	r1, #1
{
 8009d5c:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4798      	blx	r3
				SIZEOF(arith_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
  entropy->pub.start_pass = start_pass;
 8009d62:	4a18      	ldr	r2, [pc, #96]	; (8009dc4 <jinit_arith_decoder+0x70>)
 8009d64:	4603      	mov	r3, r0
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
 8009d66:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
  entropy->pub.start_pass = start_pass;
 8009d6a:	f100 0178 	add.w	r1, r0, #120	; 0x78
 8009d6e:	f843 2b38 	str.w	r2, [r3], #56

  /* Mark tables unallocated */
  for (i = 0; i < NUM_ARITH_TBLS; i++) {
    entropy->dc_stats[i] = NULL;
 8009d72:	2200      	movs	r2, #0
 8009d74:	f843 2b04 	str.w	r2, [r3], #4
  for (i = 0; i < NUM_ARITH_TBLS; i++) {
 8009d78:	428b      	cmp	r3, r1
    entropy->ac_stats[i] = NULL;
 8009d7a:	63da      	str	r2, [r3, #60]	; 0x3c
  for (i = 0; i < NUM_ARITH_TBLS; i++) {
 8009d7c:	d1fa      	bne.n	8009d74 <jinit_arith_decoder+0x20>
  }

  /* Initialize index for fixed probability estimation */
  entropy->fixed_bin[0] = 113;
 8009d7e:	2371      	movs	r3, #113	; 0x71
 8009d80:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8

  if (cinfo->progressive_mode) {
 8009d84:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8009d88:	b193      	cbz	r3, 8009db0 <jinit_arith_decoder+0x5c>
    /* Create progression status table */
    int *coef_bit_ptr, ci;
    cinfo->coef_bits = (int (*)[DCTSIZE2])
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009d8a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009d8c:	2101      	movs	r1, #1
 8009d8e:	6863      	ldr	r3, [r4, #4]
 8009d90:	4620      	mov	r0, r4
 8009d92:	0212      	lsls	r2, r2, #8
				  cinfo->num_components*DCTSIZE2*SIZEOF(int));
    coef_bit_ptr = & cinfo->coef_bits[0][0];
    for (ci = 0; ci < cinfo->num_components; ci++) 
      for (i = 0; i < DCTSIZE2; i++)
	*coef_bit_ptr++ = -1;
 8009d94:	f04f 35ff 	mov.w	r5, #4294967295
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4798      	blx	r3
    for (ci = 0; ci < cinfo->num_components; ci++) 
 8009d9c:	2300      	movs	r3, #0
    cinfo->coef_bits = (int (*)[DCTSIZE2])
 8009d9e:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    for (ci = 0; ci < cinfo->num_components; ci++) 
 8009da2:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8009da6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009da8:	f5a0 7280 	sub.w	r2, r0, #256	; 0x100
 8009dac:	4299      	cmp	r1, r3
 8009dae:	dc00      	bgt.n	8009db2 <jinit_arith_decoder+0x5e>
  }
}
 8009db0:	bd38      	pop	{r3, r4, r5, pc}
	*coef_bit_ptr++ = -1;
 8009db2:	f842 5b04 	str.w	r5, [r2], #4
      for (i = 0; i < DCTSIZE2; i++)
 8009db6:	4282      	cmp	r2, r0
 8009db8:	d1fb      	bne.n	8009db2 <jinit_arith_decoder+0x5e>
    for (ci = 0; ci < cinfo->num_components; ci++) 
 8009dba:	3301      	adds	r3, #1
 8009dbc:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8009dc0:	e7f1      	b.n	8009da6 <jinit_arith_decoder+0x52>
 8009dc2:	bf00      	nop
 8009dc4:	08009439 	.word	0x08009439

08009dc8 <init_mem_source>:

METHODDEF(void)
init_mem_source (j_decompress_ptr cinfo)
{
  /* no work necessary here */
}
 8009dc8:	4770      	bx	lr
	...

08009dcc <fill_mem_input_buffer>:

  /* The whole JPEG data is expected to reside in the supplied memory
   * buffer, so any request for more data beyond the given buffer size
   * is treated as an error.
   */
  WARNMS(cinfo, JWRN_JPEG_EOF);
 8009dcc:	6803      	ldr	r3, [r0, #0]
 8009dce:	227b      	movs	r2, #123	; 0x7b
 8009dd0:	f04f 31ff 	mov.w	r1, #4294967295
{
 8009dd4:	b510      	push	{r4, lr}
 8009dd6:	4604      	mov	r4, r0
  WARNMS(cinfo, JWRN_JPEG_EOF);
 8009dd8:	615a      	str	r2, [r3, #20]
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	4798      	blx	r3

  /* Insert a fake EOI marker */

  cinfo->src->next_input_byte = mybuffer;
 8009dde:	69a3      	ldr	r3, [r4, #24]
 8009de0:	4a02      	ldr	r2, [pc, #8]	; (8009dec <fill_mem_input_buffer+0x20>)
  cinfo->src->bytes_in_buffer = 2;

  return TRUE;
}
 8009de2:	2001      	movs	r0, #1
  cinfo->src->next_input_byte = mybuffer;
 8009de4:	601a      	str	r2, [r3, #0]
  cinfo->src->bytes_in_buffer = 2;
 8009de6:	2202      	movs	r2, #2
 8009de8:	605a      	str	r2, [r3, #4]
}
 8009dea:	bd10      	pop	{r4, pc}
 8009dec:	0802aa28 	.word	0x0802aa28

08009df0 <skip_input_data>:
 * buffer is the application writer's problem.
 */

METHODDEF(void)
skip_input_data (j_decompress_ptr cinfo, long num_bytes)
{
 8009df0:	b570      	push	{r4, r5, r6, lr}

  /* Just a dumb implementation for now.  Could use fseek() except
   * it doesn't work on pipes.  Not clear that being smart is worth
   * any trouble anyway --- large skips are infrequent.
   */
  if (num_bytes > 0) {
 8009df2:	1e0c      	subs	r4, r1, #0
{
 8009df4:	4606      	mov	r6, r0
  if (num_bytes > 0) {
 8009df6:	dd08      	ble.n	8009e0a <skip_input_data+0x1a>
  struct jpeg_source_mgr * src = cinfo->src;
 8009df8:	6985      	ldr	r5, [r0, #24]
    while (num_bytes > (long) src->bytes_in_buffer) {
 8009dfa:	6869      	ldr	r1, [r5, #4]
 8009dfc:	42a1      	cmp	r1, r4
 8009dfe:	db05      	blt.n	8009e0c <skip_input_data+0x1c>
      (void) (*src->fill_input_buffer) (cinfo);
      /* note we assume that fill_input_buffer will never return FALSE,
       * so suspension need not be handled.
       */
    }
    src->next_input_byte += (size_t) num_bytes;
 8009e00:	682b      	ldr	r3, [r5, #0]
    src->bytes_in_buffer -= (size_t) num_bytes;
 8009e02:	1b09      	subs	r1, r1, r4
    src->next_input_byte += (size_t) num_bytes;
 8009e04:	4423      	add	r3, r4
    src->bytes_in_buffer -= (size_t) num_bytes;
 8009e06:	6069      	str	r1, [r5, #4]
    src->next_input_byte += (size_t) num_bytes;
 8009e08:	602b      	str	r3, [r5, #0]
  }
}
 8009e0a:	bd70      	pop	{r4, r5, r6, pc}
      (void) (*src->fill_input_buffer) (cinfo);
 8009e0c:	68eb      	ldr	r3, [r5, #12]
 8009e0e:	4630      	mov	r0, r6
      num_bytes -= (long) src->bytes_in_buffer;
 8009e10:	1a64      	subs	r4, r4, r1
      (void) (*src->fill_input_buffer) (cinfo);
 8009e12:	4798      	blx	r3
 8009e14:	e7f1      	b.n	8009dfa <skip_input_data+0xa>

08009e16 <term_source>:
 8009e16:	4770      	bx	lr

08009e18 <jpeg_mem_src>:
 */

GLOBAL(void)
jpeg_mem_src (j_decompress_ptr cinfo,
	      unsigned char * inbuffer, unsigned long insize)
{
 8009e18:	b570      	push	{r4, r5, r6, lr}
 8009e1a:	4604      	mov	r4, r0
 8009e1c:	4616      	mov	r6, r2
  struct jpeg_source_mgr * src;

  if (inbuffer == NULL || insize == 0)	/* Treat empty input as fatal error */
 8009e1e:	460d      	mov	r5, r1
 8009e20:	b101      	cbz	r1, 8009e24 <jpeg_mem_src+0xc>
 8009e22:	b92a      	cbnz	r2, 8009e30 <jpeg_mem_src+0x18>
    ERREXIT(cinfo, JERR_INPUT_EMPTY);
 8009e24:	6823      	ldr	r3, [r4, #0]
 8009e26:	222b      	movs	r2, #43	; 0x2b
 8009e28:	4620      	mov	r0, r4
 8009e2a:	615a      	str	r2, [r3, #20]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4798      	blx	r3

  /* The source object is made permanent so that a series of JPEG images
   * can be read from the same buffer by calling jpeg_mem_src only before
   * the first one.
   */
  if (cinfo->src == NULL) {	/* first time for this JPEG object? */
 8009e30:	69a1      	ldr	r1, [r4, #24]
 8009e32:	b929      	cbnz	r1, 8009e40 <jpeg_mem_src+0x28>
    cinfo->src = (struct jpeg_source_mgr *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 8009e34:	6863      	ldr	r3, [r4, #4]
 8009e36:	221c      	movs	r2, #28
 8009e38:	4620      	mov	r0, r4
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4798      	blx	r3
    cinfo->src = (struct jpeg_source_mgr *)
 8009e3e:	61a0      	str	r0, [r4, #24]
				  SIZEOF(struct jpeg_source_mgr));
  }

  src = cinfo->src;
 8009e40:	69a3      	ldr	r3, [r4, #24]
  src->init_source = init_mem_source;
 8009e42:	4a06      	ldr	r2, [pc, #24]	; (8009e5c <jpeg_mem_src+0x44>)
 8009e44:	609a      	str	r2, [r3, #8]
  src->fill_input_buffer = fill_mem_input_buffer;
 8009e46:	4a06      	ldr	r2, [pc, #24]	; (8009e60 <jpeg_mem_src+0x48>)
 8009e48:	60da      	str	r2, [r3, #12]
  src->skip_input_data = skip_input_data;
 8009e4a:	4a06      	ldr	r2, [pc, #24]	; (8009e64 <jpeg_mem_src+0x4c>)
 8009e4c:	611a      	str	r2, [r3, #16]
  src->resync_to_restart = jpeg_resync_to_restart; /* use default method */
 8009e4e:	4a06      	ldr	r2, [pc, #24]	; (8009e68 <jpeg_mem_src+0x50>)
 8009e50:	615a      	str	r2, [r3, #20]
  src->term_source = term_source;
 8009e52:	4a06      	ldr	r2, [pc, #24]	; (8009e6c <jpeg_mem_src+0x54>)
  src->bytes_in_buffer = (size_t) insize;
  src->next_input_byte = (JOCTET *) inbuffer;
 8009e54:	e9c3 5600 	strd	r5, r6, [r3]
  src->term_source = term_source;
 8009e58:	619a      	str	r2, [r3, #24]
}
 8009e5a:	bd70      	pop	{r4, r5, r6, pc}
 8009e5c:	08009dc9 	.word	0x08009dc9
 8009e60:	08009dcd 	.word	0x08009dcd
 8009e64:	08009df1 	.word	0x08009df1
 8009e68:	0800e05f 	.word	0x0800e05f
 8009e6c:	08009e17 	.word	0x08009e17

08009e70 <start_iMCU_row>:

  /* In an interleaved scan, an MCU row is the same as an iMCU row.
   * In a noninterleaved scan, an iMCU row has v_samp_factor MCU rows.
   * But at the bottom of the image, process only what's left.
   */
  if (cinfo->comps_in_scan > 1) {
 8009e70:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 8009e74:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
  if (cinfo->comps_in_scan > 1) {
 8009e78:	2a01      	cmp	r2, #1
 8009e7a:	dd05      	ble.n	8009e88 <start_iMCU_row+0x18>
    coef->MCU_rows_per_iMCU_row = 1;
 8009e7c:	2201      	movs	r2, #1
  } else {
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
    else
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
 8009e7e:	61da      	str	r2, [r3, #28]
  }

  coef->MCU_ctr = 0;
 8009e80:	2200      	movs	r2, #0
  coef->MCU_vert_offset = 0;
 8009e82:	e9c3 2205 	strd	r2, r2, [r3, #20]
}
 8009e86:	4770      	bx	lr
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
 8009e88:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
 8009e8c:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
 8009e90:	3a01      	subs	r2, #1
 8009e92:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
 8009e96:	4290      	cmp	r0, r2
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 8009e98:	bf34      	ite	cc
 8009e9a:	68ca      	ldrcc	r2, [r1, #12]
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
 8009e9c:	6cca      	ldrcs	r2, [r1, #76]	; 0x4c
 8009e9e:	e7ee      	b.n	8009e7e <start_iMCU_row+0xe>

08009ea0 <start_input_pass>:
 */

METHODDEF(void)
start_input_pass (j_decompress_ptr cinfo)
{
  cinfo->input_iMCU_row = 0;
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
  start_iMCU_row(cinfo);
 8009ea6:	f7ff bfe3 	b.w	8009e70 <start_iMCU_row>

08009eaa <dummy_consume_data>:

METHODDEF(int)
dummy_consume_data (j_decompress_ptr cinfo)
{
  return JPEG_SUSPENDED;	/* Always indicate nothing was done */
}
 8009eaa:	2000      	movs	r0, #0
 8009eac:	4770      	bx	lr

08009eae <consume_data>:
 * Return value is JPEG_ROW_COMPLETED, JPEG_SCAN_COMPLETED, or JPEG_SUSPENDED.
 */

METHODDEF(int)
consume_data (j_decompress_ptr cinfo)
{
 8009eae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eb2:	f500 7baa 	add.w	fp, r0, #340	; 0x154
 8009eb6:	4604      	mov	r4, r0
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 8009eb8:	f8d0 51c0 	ldr.w	r5, [r0, #448]	; 0x1c0
  JBLOCKARRAY buffer[MAX_COMPS_IN_SCAN];
  JBLOCKROW buffer_ptr;
  jpeg_component_info *compptr;

  /* Align the virtual buffers for the components used in this scan. */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009ebc:	2600      	movs	r6, #0
 8009ebe:	465f      	mov	r7, fp
    compptr = cinfo->cur_comp_info[ci];
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 8009ec0:	f04f 0801 	mov.w	r8, #1
{
 8009ec4:	ed2d 8b02 	vpush	{d8}
 8009ec8:	b08f      	sub	sp, #60	; 0x3c
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 8009eca:	f10d 0928 	add.w	r9, sp, #40	; 0x28
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009ece:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8009ed2:	42b3      	cmp	r3, r6
 8009ed4:	dc17      	bgt.n	8009f06 <consume_data+0x58>
     * because we requested a pre-zeroed array.
     */
  }

  /* Loop to process one whole iMCU row */
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 8009ed6:	69ae      	ldr	r6, [r5, #24]
	    coef->MCU_buffer[blkn++] = buffer_ptr++;
	  }
	}
      }
      /* Try to fetch the MCU. */
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 8009ed8:	f105 0320 	add.w	r3, r5, #32
 8009edc:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8009ee0:	ee08 3a10 	vmov	s16, r3
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 8009ee4:	69eb      	ldr	r3, [r5, #28]
 8009ee6:	42b3      	cmp	r3, r6
 8009ee8:	dc22      	bgt.n	8009f30 <consume_data+0x82>
    }
    /* Completed an MCU row, but perhaps not an iMCU row */
    coef->MCU_ctr = 0;
  }
  /* Completed the iMCU row, advance counters for next one */
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 8009eea:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8009eee:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8009efa:	d275      	bcs.n	8009fe8 <consume_data+0x13a>
    start_iMCU_row(cinfo);
 8009efc:	4620      	mov	r0, r4
 8009efe:	f7ff ffb7 	bl	8009e70 <start_iMCU_row>
    return JPEG_ROW_COMPLETED;
 8009f02:	2003      	movs	r0, #3
 8009f04:	e047      	b.n	8009f96 <consume_data+0xe8>
    compptr = cinfo->cur_comp_info[ci];
 8009f06:	f857 1b04 	ldr.w	r1, [r7], #4
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 8009f0a:	6860      	ldr	r0, [r4, #4]
       cinfo->input_iMCU_row * compptr->v_samp_factor,
 8009f0c:	68cb      	ldr	r3, [r1, #12]
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 8009f0e:	6849      	ldr	r1, [r1, #4]
 8009f10:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8009f14:	3112      	adds	r1, #18
 8009f16:	f8cd 8000 	str.w	r8, [sp]
 8009f1a:	435a      	muls	r2, r3
 8009f1c:	f8d0 a020 	ldr.w	sl, [r0, #32]
 8009f20:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8009f24:	4620      	mov	r0, r4
 8009f26:	47d0      	blx	sl
 8009f28:	f849 0026 	str.w	r0, [r9, r6, lsl #2]
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009f2c:	3601      	adds	r6, #1
 8009f2e:	e7ce      	b.n	8009ece <consume_data+0x20>
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num < cinfo->MCUs_per_row;
 8009f30:	696f      	ldr	r7, [r5, #20]
 8009f32:	f8d4 3164 	ldr.w	r3, [r4, #356]	; 0x164
 8009f36:	42bb      	cmp	r3, r7
 8009f38:	d950      	bls.n	8009fdc <consume_data+0x12e>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009f3a:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8009f3e:	9307      	str	r3, [sp, #28]
 8009f40:	ab0a      	add	r3, sp, #40	; 0x28
 8009f42:	e9cd 3b03 	strd	r3, fp, [sp, #12]
 8009f46:	2300      	movs	r3, #0
      blkn = 0;			/* index of current DCT block within MCU */
 8009f48:	469a      	mov	sl, r3
 8009f4a:	e017      	b.n	8009f7c <consume_data+0xce>
	compptr = cinfo->cur_comp_info[ci];
 8009f4c:	9904      	ldr	r1, [sp, #16]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 8009f4e:	46c1      	mov	r9, r8
 8009f50:	f04f 0c00 	mov.w	ip, #0
	compptr = cinfo->cur_comp_info[ci];
 8009f54:	f851 2b04 	ldr.w	r2, [r1], #4
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 8009f58:	e9d2 e20e 	ldrd	lr, r2, [r2, #56]	; 0x38
	compptr = cinfo->cur_comp_info[ci];
 8009f5c:	9104      	str	r1, [sp, #16]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 8009f5e:	9206      	str	r2, [sp, #24]
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 8009f60:	fb07 f20e 	mul.w	r2, r7, lr
 8009f64:	01d2      	lsls	r2, r2, #7
 8009f66:	9205      	str	r2, [sp, #20]
 8009f68:	ea2e 72ee 	bic.w	r2, lr, lr, asr #31
 8009f6c:	9209      	str	r2, [sp, #36]	; 0x24
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 8009f6e:	9a06      	ldr	r2, [sp, #24]
 8009f70:	4562      	cmp	r2, ip
 8009f72:	dc15      	bgt.n	8009fa0 <consume_data+0xf2>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009f74:	9a03      	ldr	r2, [sp, #12]
 8009f76:	3301      	adds	r3, #1
 8009f78:	3204      	adds	r2, #4
 8009f7a:	9203      	str	r2, [sp, #12]
 8009f7c:	9a07      	ldr	r2, [sp, #28]
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	dce4      	bgt.n	8009f4c <consume_data+0x9e>
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 8009f82:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 8009f86:	ee18 1a10 	vmov	r1, s16
 8009f8a:	4620      	mov	r0, r4
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	4798      	blx	r3
 8009f90:	bb10      	cbnz	r0, 8009fd8 <consume_data+0x12a>
	coef->MCU_ctr = MCU_col_num;
 8009f92:	e9c5 7605 	strd	r7, r6, [r5, #20]
  }
  /* Completed the scan */
  (*cinfo->inputctl->finish_input_pass) (cinfo);
  return JPEG_SCAN_COMPLETED;
}
 8009f96:	b00f      	add	sp, #60	; 0x3c
 8009f98:	ecbd 8b02 	vpop	{d8}
 8009f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 8009fa0:	9a03      	ldr	r2, [sp, #12]
 8009fa2:	9905      	ldr	r1, [sp, #20]
 8009fa4:	6812      	ldr	r2, [r2, #0]
 8009fa6:	f852 2009 	ldr.w	r2, [r2, r9]
 8009faa:	440a      	add	r2, r1
 8009fac:	f10a 0108 	add.w	r1, sl, #8
 8009fb0:	9208      	str	r2, [sp, #32]
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 8009fb2:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	9808      	ldr	r0, [sp, #32]
 8009fba:	4596      	cmp	lr, r2
 8009fbc:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
 8009fc0:	dc06      	bgt.n	8009fd0 <consume_data+0x122>
 8009fc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 8009fc4:	f10c 0c01 	add.w	ip, ip, #1
 8009fc8:	f109 0904 	add.w	r9, r9, #4
 8009fcc:	4492      	add	sl, r2
 8009fce:	e7ce      	b.n	8009f6e <consume_data+0xc0>
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 8009fd0:	3201      	adds	r2, #1
	    coef->MCU_buffer[blkn++] = buffer_ptr++;
 8009fd2:	f841 0b04 	str.w	r0, [r1], #4
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 8009fd6:	e7ef      	b.n	8009fb8 <consume_data+0x10a>
	 MCU_col_num++) {
 8009fd8:	3701      	adds	r7, #1
 8009fda:	e7aa      	b.n	8009f32 <consume_data+0x84>
    coef->MCU_ctr = 0;
 8009fdc:	2300      	movs	r3, #0
       yoffset++) {
 8009fde:	3601      	adds	r6, #1
 8009fe0:	f108 0804 	add.w	r8, r8, #4
    coef->MCU_ctr = 0;
 8009fe4:	616b      	str	r3, [r5, #20]
       yoffset++) {
 8009fe6:	e77d      	b.n	8009ee4 <consume_data+0x36>
  (*cinfo->inputctl->finish_input_pass) (cinfo);
 8009fe8:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 8009fec:	4620      	mov	r0, r4
 8009fee:	68db      	ldr	r3, [r3, #12]
 8009ff0:	4798      	blx	r3
  return JPEG_SCAN_COMPLETED;
 8009ff2:	2004      	movs	r0, #4
 8009ff4:	e7cf      	b.n	8009f96 <consume_data+0xe8>

08009ff6 <decompress_data>:
 * NB: output_buf contains a plane for each component in image.
 */

METHODDEF(int)
decompress_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
 8009ff6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ffa:	4604      	mov	r4, r0
 8009ffc:	b08b      	sub	sp, #44	; 0x2c
 8009ffe:	468b      	mov	fp, r1
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800a000:	f8d0 71c0 	ldr.w	r7, [r0, #448]	; 0x1c0
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800a004:	f8d0 5148 	ldr.w	r5, [r0, #328]	; 0x148
  JDIMENSION output_col;
  jpeg_component_info *compptr;
  inverse_DCT_method_ptr inverse_DCT;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number < cinfo->output_scan_number ||
 800a008:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800a00c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800a010:	429a      	cmp	r2, r3
 800a012:	db1d      	blt.n	800a050 <decompress_data+0x5a>
 800a014:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800a018:	d103      	bne.n	800a022 <decompress_data+0x2c>
	 (cinfo->input_scan_number == cinfo->output_scan_number &&
 800a01a:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800a01e:	429a      	cmp	r2, r3
 800a020:	d916      	bls.n	800a050 <decompress_data+0x5a>
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800a022:	1e6b      	subs	r3, r5, #1
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
      return JPEG_SUSPENDED;
  }

  /* OK, output from the virtual arrays. */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a024:	2600      	movs	r6, #0
 800a026:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800a02a:	9304      	str	r3, [sp, #16]
       ci++, compptr++) {
    /* Don't bother to IDCT an uninteresting component. */
    if (! compptr->component_needed)
      continue;
    /* Align the virtual buffer for this component. */
    buffer = (*cinfo->mem->access_virt_barray)
 800a02c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a030:	9308      	str	r3, [sp, #32]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a032:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a034:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 800a038:	42b3      	cmp	r3, r6
 800a03a:	dc13      	bgt.n	800a064 <decompress_data+0x6e>
      }
      output_ptr += compptr->DCT_v_scaled_size;
    }
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
 800a03c:	1c50      	adds	r0, r2, #1
 800a03e:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 800a042:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
    return JPEG_ROW_COMPLETED;
 800a046:	4290      	cmp	r0, r2
 800a048:	bf2c      	ite	cs
 800a04a:	2004      	movcs	r0, #4
 800a04c:	2003      	movcc	r0, #3
 800a04e:	e006      	b.n	800a05e <decompress_data+0x68>
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
 800a050:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800a054:	4620      	mov	r0, r4
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4798      	blx	r3
 800a05a:	2800      	cmp	r0, #0
 800a05c:	d1d4      	bne.n	800a008 <decompress_data+0x12>
  return JPEG_SCAN_COMPLETED;
}
 800a05e:	b00b      	add	sp, #44	; 0x2c
 800a060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (! compptr->component_needed)
 800a064:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a066:	b913      	cbnz	r3, 800a06e <decompress_data+0x78>
       ci++, compptr++) {
 800a068:	3601      	adds	r6, #1
 800a06a:	3558      	adds	r5, #88	; 0x58
 800a06c:	e7e1      	b.n	800a032 <decompress_data+0x3c>
    buffer = (*cinfo->mem->access_virt_barray)
 800a06e:	6861      	ldr	r1, [r4, #4]
 800a070:	2000      	movs	r0, #0
       cinfo->output_iMCU_row * compptr->v_samp_factor,
 800a072:	68eb      	ldr	r3, [r5, #12]
    buffer = (*cinfo->mem->access_virt_barray)
 800a074:	9000      	str	r0, [sp, #0]
 800a076:	4620      	mov	r0, r4
 800a078:	6a0f      	ldr	r7, [r1, #32]
 800a07a:	435a      	muls	r2, r3
 800a07c:	9908      	ldr	r1, [sp, #32]
 800a07e:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800a082:	47b8      	blx	r7
    if (cinfo->output_iMCU_row < last_iMCU_row)
 800a084:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800a088:	9a04      	ldr	r2, [sp, #16]
    buffer = (*cinfo->mem->access_virt_barray)
 800a08a:	9005      	str	r0, [sp, #20]
    if (cinfo->output_iMCU_row < last_iMCU_row)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	68eb      	ldr	r3, [r5, #12]
 800a090:	d221      	bcs.n	800a0d6 <decompress_data+0xe0>
      block_rows = compptr->v_samp_factor;
 800a092:	469a      	mov	sl, r3
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800a094:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
    for (block_row = 0; block_row < block_rows; block_row++) {
 800a098:	2200      	movs	r2, #0
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800a09a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	9306      	str	r3, [sp, #24]
    output_ptr = output_buf[ci];
 800a0a2:	f85b 3026 	ldr.w	r3, [fp, r6, lsl #2]
    for (block_row = 0; block_row < block_rows; block_row++) {
 800a0a6:	9203      	str	r2, [sp, #12]
 800a0a8:	9a03      	ldr	r2, [sp, #12]
 800a0aa:	4552      	cmp	r2, sl
 800a0ac:	dadc      	bge.n	800a068 <decompress_data+0x72>
      buffer_ptr = buffer[block_row];
 800a0ae:	9a05      	ldr	r2, [sp, #20]
      output_col = 0;
 800a0b0:	f04f 0900 	mov.w	r9, #0
      buffer_ptr = buffer[block_row];
 800a0b4:	9903      	ldr	r1, [sp, #12]
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800a0b6:	46c8      	mov	r8, r9
      buffer_ptr = buffer[block_row];
 800a0b8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a0bc:	9207      	str	r2, [sp, #28]
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800a0be:	69e9      	ldr	r1, [r5, #28]
 800a0c0:	9a07      	ldr	r2, [sp, #28]
 800a0c2:	4541      	cmp	r1, r8
 800a0c4:	eb02 12c8 	add.w	r2, r2, r8, lsl #7
 800a0c8:	d80f      	bhi.n	800a0ea <decompress_data+0xf4>
      output_ptr += compptr->DCT_v_scaled_size;
 800a0ca:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800a0cc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (block_row = 0; block_row < block_rows; block_row++) {
 800a0d0:	9a03      	ldr	r2, [sp, #12]
 800a0d2:	3201      	adds	r2, #1
 800a0d4:	e7e7      	b.n	800a0a6 <decompress_data+0xb0>
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800a0d6:	6a2a      	ldr	r2, [r5, #32]
 800a0d8:	fbb2 f1f3 	udiv	r1, r2, r3
 800a0dc:	fb03 2a11 	mls	sl, r3, r1, r2
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
 800a0e0:	f1ba 0f00 	cmp.w	sl, #0
 800a0e4:	bf08      	it	eq
 800a0e6:	469a      	moveq	sl, r3
 800a0e8:	e7d4      	b.n	800a094 <decompress_data+0x9e>
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) buffer_ptr,
 800a0ea:	f8cd 9000 	str.w	r9, [sp]
 800a0ee:	4629      	mov	r1, r5
 800a0f0:	9309      	str	r3, [sp, #36]	; 0x24
 800a0f2:	4620      	mov	r0, r4
 800a0f4:	9f06      	ldr	r7, [sp, #24]
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800a0f6:	f108 0801 	add.w	r8, r8, #1
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) buffer_ptr,
 800a0fa:	47b8      	blx	r7
	output_col += compptr->DCT_h_scaled_size;
 800a0fc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800a0fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
	output_col += compptr->DCT_h_scaled_size;
 800a100:	4491      	add	r9, r2
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800a102:	e7dc      	b.n	800a0be <decompress_data+0xc8>

0800a104 <start_output_pass>:
{
 800a104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800a108:	f8d0 51c0 	ldr.w	r5, [r0, #448]	; 0x1c0
{
 800a10c:	4604      	mov	r4, r0
  if (coef->pub.coef_arrays != NULL) {
 800a10e:	692b      	ldr	r3, [r5, #16]
 800a110:	b323      	cbz	r3, 800a15c <start_output_pass+0x58>
    if (cinfo->do_block_smoothing && smoothing_ok(cinfo))
 800a112:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a114:	2b00      	cmp	r3, #0
 800a116:	d04b      	beq.n	800a1b0 <start_output_pass+0xac>
  jpeg_component_info *compptr;
  JQUANT_TBL * qtable;
  int * coef_bits;
  int * coef_bits_latch;

  if (! cinfo->progressive_mode || cinfo->coef_bits == NULL)
 800a118:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d047      	beq.n	800a1b0 <start_output_pass+0xac>
 800a120:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 800a124:	2b00      	cmp	r3, #0
 800a126:	d043      	beq.n	800a1b0 <start_output_pass+0xac>
    return FALSE;

  /* Allocate latch area if not already done */
  if (coef->coef_bits_latch == NULL)
 800a128:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800a12a:	b93b      	cbnz	r3, 800a13c <start_output_pass+0x38>
    coef->coef_bits_latch = (int *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a12c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800a12e:	2118      	movs	r1, #24
 800a130:	6843      	ldr	r3, [r0, #4]
 800a132:	434a      	muls	r2, r1
 800a134:	2101      	movs	r1, #1
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	4798      	blx	r3
    coef->coef_bits_latch = (int *)
 800a13a:	6728      	str	r0, [r5, #112]	; 0x70
				  cinfo->num_components *
				  (SAVED_COEFS * SIZEOF(int)));
  coef_bits_latch = coef->coef_bits_latch;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a13c:	2300      	movs	r3, #0
  coef_bits_latch = coef->coef_bits_latch;
 800a13e:	f8d5 c070 	ldr.w	ip, [r5, #112]	; 0x70
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a142:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
 800a146:	f04f 0e18 	mov.w	lr, #24
  boolean smoothing_useful = FALSE;
 800a14a:	4619      	mov	r1, r3
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a14c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a14e:	fb0e c703 	mla	r7, lr, r3, ip
 800a152:	4293      	cmp	r3, r2
 800a154:	db07      	blt.n	800a166 <start_output_pass+0x62>
    if (cinfo->do_block_smoothing && smoothing_ok(cinfo))
 800a156:	b359      	cbz	r1, 800a1b0 <start_output_pass+0xac>
      coef->pub.decompress_data = decompress_smooth_data;
 800a158:	4b16      	ldr	r3, [pc, #88]	; (800a1b4 <start_output_pass+0xb0>)
      coef->pub.decompress_data = decompress_data;
 800a15a:	60eb      	str	r3, [r5, #12]
  cinfo->output_iMCU_row = 0;
 800a15c:	2300      	movs	r3, #0
 800a15e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
}
 800a162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       ci++, compptr++) {
    /* All components' quantization values must already be latched. */
    if ((qtable = compptr->quant_table) == NULL)
 800a166:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800a168:	b312      	cbz	r2, 800a1b0 <start_output_pass+0xac>
      return FALSE;
    /* Verify DC & first 5 AC quantizers are nonzero to avoid zero-divide. */
    if (qtable->quantval[0] == 0 ||
 800a16a:	8816      	ldrh	r6, [r2, #0]
 800a16c:	b306      	cbz	r6, 800a1b0 <start_output_pass+0xac>
 800a16e:	8856      	ldrh	r6, [r2, #2]
 800a170:	b1f6      	cbz	r6, 800a1b0 <start_output_pass+0xac>
	qtable->quantval[Q01_POS] == 0 ||
 800a172:	8a16      	ldrh	r6, [r2, #16]
 800a174:	b1e6      	cbz	r6, 800a1b0 <start_output_pass+0xac>
	qtable->quantval[Q10_POS] == 0 ||
 800a176:	8c16      	ldrh	r6, [r2, #32]
 800a178:	b1d6      	cbz	r6, 800a1b0 <start_output_pass+0xac>
	qtable->quantval[Q20_POS] == 0 ||
 800a17a:	8a56      	ldrh	r6, [r2, #18]
 800a17c:	b1c6      	cbz	r6, 800a1b0 <start_output_pass+0xac>
	qtable->quantval[Q11_POS] == 0 ||
 800a17e:	8892      	ldrh	r2, [r2, #4]
 800a180:	b1b2      	cbz	r2, 800a1b0 <start_output_pass+0xac>
	qtable->quantval[Q02_POS] == 0)
      return FALSE;
    /* DC values must be at least partly known for all components. */
    coef_bits = cinfo->coef_bits[ci];
 800a182:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
 800a186:	021a      	lsls	r2, r3, #8
    if (coef_bits[0] < 0)
 800a188:	58b2      	ldr	r2, [r6, r2]
    coef_bits = cinfo->coef_bits[ci];
 800a18a:	eb06 2803 	add.w	r8, r6, r3, lsl #8
    if (coef_bits[0] < 0)
 800a18e:	2a00      	cmp	r2, #0
 800a190:	db0e      	blt.n	800a1b0 <start_output_pass+0xac>
      return FALSE;
    /* Block smoothing is helpful if some AC coefficients remain inaccurate. */
    for (coefi = 1; coefi <= 5; coefi++) {
 800a192:	2201      	movs	r2, #1
      coef_bits_latch[coefi] = coef_bits[coefi];
 800a194:	f858 6022 	ldr.w	r6, [r8, r2, lsl #2]
      if (coef_bits[coefi] != 0)
	smoothing_useful = TRUE;
 800a198:	2e00      	cmp	r6, #0
      coef_bits_latch[coefi] = coef_bits[coefi];
 800a19a:	f847 6022 	str.w	r6, [r7, r2, lsl #2]
    for (coefi = 1; coefi <= 5; coefi++) {
 800a19e:	f102 0201 	add.w	r2, r2, #1
	smoothing_useful = TRUE;
 800a1a2:	bf18      	it	ne
 800a1a4:	2101      	movne	r1, #1
    for (coefi = 1; coefi <= 5; coefi++) {
 800a1a6:	2a06      	cmp	r2, #6
 800a1a8:	d1f4      	bne.n	800a194 <start_output_pass+0x90>
       ci++, compptr++) {
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	3058      	adds	r0, #88	; 0x58
 800a1ae:	e7cd      	b.n	800a14c <start_output_pass+0x48>
      coef->pub.decompress_data = decompress_data;
 800a1b0:	4b01      	ldr	r3, [pc, #4]	; (800a1b8 <start_output_pass+0xb4>)
 800a1b2:	e7d2      	b.n	800a15a <start_output_pass+0x56>
 800a1b4:	0800a33d 	.word	0x0800a33d
 800a1b8:	08009ff7 	.word	0x08009ff7

0800a1bc <decompress_onepass>:
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800a1bc:	f8d0 3164 	ldr.w	r3, [r0, #356]	; 0x164
{
 800a1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800a1c4:	3b01      	subs	r3, #1
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800a1c6:	f8d0 51c0 	ldr.w	r5, [r0, #448]	; 0x1c0
{
 800a1ca:	4604      	mov	r4, r0
 800a1cc:	ed2d 8b02 	vpush	{d8}
 800a1d0:	b08f      	sub	sp, #60	; 0x3c
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800a1d2:	9307      	str	r3, [sp, #28]
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800a1d4:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
{
 800a1d8:	910b      	str	r1, [sp, #44]	; 0x2c
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800a1da:	3b01      	subs	r3, #1
 800a1dc:	9308      	str	r3, [sp, #32]
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800a1de:	69ab      	ldr	r3, [r5, #24]
 800a1e0:	9302      	str	r3, [sp, #8]
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800a1e2:	f105 0320 	add.w	r3, r5, #32
 800a1e6:	ee08 3a10 	vmov	s16, r3
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800a1ea:	69eb      	ldr	r3, [r5, #28]
 800a1ec:	9a02      	ldr	r2, [sp, #8]
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	dc13      	bgt.n	800a21a <decompress_onepass+0x5e>
  cinfo->output_iMCU_row++;
 800a1f2:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800a1f6:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  cinfo->output_iMCU_row++;
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800a200:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800a204:	3301      	adds	r3, #1
 800a206:	4293      	cmp	r3, r2
 800a208:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800a20c:	f080 808f 	bcs.w	800a32e <decompress_onepass+0x172>
    start_iMCU_row(cinfo);
 800a210:	4620      	mov	r0, r4
 800a212:	f7ff fe2d 	bl	8009e70 <start_iMCU_row>
    return JPEG_ROW_COMPLETED;
 800a216:	2003      	movs	r0, #3
 800a218:	e02a      	b.n	800a270 <decompress_onepass+0xb4>
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num <= last_MCU_col;
 800a21a:	696f      	ldr	r7, [r5, #20]
 800a21c:	9b07      	ldr	r3, [sp, #28]
 800a21e:	429f      	cmp	r7, r3
 800a220:	d905      	bls.n	800a22e <decompress_onepass+0x72>
    coef->MCU_ctr = 0;
 800a222:	2300      	movs	r3, #0
 800a224:	616b      	str	r3, [r5, #20]
       yoffset++) {
 800a226:	9b02      	ldr	r3, [sp, #8]
 800a228:	3301      	adds	r3, #1
 800a22a:	9302      	str	r3, [sp, #8]
 800a22c:	e7dd      	b.n	800a1ea <decompress_onepass+0x2e>
      if (cinfo->lim_Se)	/* can bypass in DC only case */
 800a22e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800a232:	b133      	cbz	r3, 800a242 <decompress_onepass+0x86>
	FMEMZERO((void FAR *) coef->MCU_buffer[0],
 800a234:	f8d4 216c 	ldr.w	r2, [r4, #364]	; 0x16c
 800a238:	2100      	movs	r1, #0
 800a23a:	6a28      	ldr	r0, [r5, #32]
 800a23c:	01d2      	lsls	r2, r2, #7
 800a23e:	f01d f971 	bl	8027524 <memset>
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800a242:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 800a246:	ee18 1a10 	vmov	r1, s16
 800a24a:	4620      	mov	r0, r4
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	4798      	blx	r3
 800a250:	b158      	cbz	r0, 800a26a <decompress_onepass+0xae>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a252:	f04f 0b00 	mov.w	fp, #0
 800a256:	f504 73aa 	add.w	r3, r4, #340	; 0x154
      blkn = 0;			/* index of current DCT block within MCU */
 800a25a:	46da      	mov	sl, fp
 800a25c:	9304      	str	r3, [sp, #16]
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a25e:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800a262:	455b      	cmp	r3, fp
 800a264:	dc09      	bgt.n	800a27a <decompress_onepass+0xbe>
	 MCU_col_num++) {
 800a266:	3701      	adds	r7, #1
 800a268:	e7d8      	b.n	800a21c <decompress_onepass+0x60>
	coef->MCU_vert_offset = yoffset;
 800a26a:	9b02      	ldr	r3, [sp, #8]
	coef->MCU_ctr = MCU_col_num;
 800a26c:	e9c5 7305 	strd	r7, r3, [r5, #20]
}
 800a270:	b00f      	add	sp, #60	; 0x3c
 800a272:	ecbd 8b02 	vpop	{d8}
 800a276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	compptr = cinfo->cur_comp_info[ci];
 800a27a:	9b04      	ldr	r3, [sp, #16]
 800a27c:	f853 1b04 	ldr.w	r1, [r3], #4
 800a280:	9304      	str	r3, [sp, #16]
	if (! compptr->component_needed) {
 800a282:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800a284:	b923      	cbnz	r3, 800a290 <decompress_onepass+0xd4>
	  blkn += compptr->MCU_blocks;
 800a286:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a288:	449a      	add	sl, r3
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a28a:	f10b 0b01 	add.w	fp, fp, #1
 800a28e:	e7e6      	b.n	800a25e <decompress_onepass+0xa2>
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800a290:	684a      	ldr	r2, [r1, #4]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800a292:	f04f 0800 	mov.w	r8, #0
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800a296:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	  yoffset * compptr->DCT_v_scaled_size;
 800a29a:	9802      	ldr	r0, [sp, #8]
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800a29c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800a2a0:	685b      	ldr	r3, [r3, #4]
 800a2a2:	9309      	str	r3, [sp, #36]	; 0x24
						    : compptr->last_col_width;
 800a2a4:	9b07      	ldr	r3, [sp, #28]
 800a2a6:	429f      	cmp	r7, r3
 800a2a8:	bf34      	ite	cc
 800a2aa:	6b8b      	ldrcc	r3, [r1, #56]	; 0x38
 800a2ac:	6c8b      	ldrcs	r3, [r1, #72]	; 0x48
 800a2ae:	9305      	str	r3, [sp, #20]
	  yoffset * compptr->DCT_v_scaled_size;
 800a2b0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800a2b2:	4343      	muls	r3, r0
	output_ptr = output_buf[compptr->component_index] +
 800a2b4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a2b6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800a2ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	start_col = MCU_col_num * compptr->MCU_sample_width;
 800a2be:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 800a2c0:	437a      	muls	r2, r7
 800a2c2:	920a      	str	r2, [sp, #40]	; 0x28
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800a2c4:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800a2c6:	4542      	cmp	r2, r8
 800a2c8:	dddf      	ble.n	800a28a <decompress_onepass+0xce>
	  if (cinfo->input_iMCU_row < last_iMCU_row ||
 800a2ca:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800a2ce:	9808      	ldr	r0, [sp, #32]
 800a2d0:	4282      	cmp	r2, r0
 800a2d2:	d304      	bcc.n	800a2de <decompress_onepass+0x122>
 800a2d4:	9a02      	ldr	r2, [sp, #8]
 800a2d6:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 800a2d8:	4442      	add	r2, r8
 800a2da:	4290      	cmp	r0, r2
 800a2dc:	dd0b      	ble.n	800a2f6 <decompress_onepass+0x13a>
 800a2de:	f10a 0908 	add.w	r9, sl, #8
 800a2e2:	eb05 0289 	add.w	r2, r5, r9, lsl #2
{
 800a2e6:	f04f 0900 	mov.w	r9, #0
 800a2ea:	9206      	str	r2, [sp, #24]
 800a2ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2ee:	9203      	str	r2, [sp, #12]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800a2f0:	9a05      	ldr	r2, [sp, #20]
 800a2f2:	4591      	cmp	r9, r2
 800a2f4:	db07      	blt.n	800a306 <decompress_onepass+0x14a>
	  blkn += compptr->MCU_width;
 800a2f6:	6b8a      	ldr	r2, [r1, #56]	; 0x38
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800a2f8:	f108 0801 	add.w	r8, r8, #1
	  blkn += compptr->MCU_width;
 800a2fc:	4492      	add	sl, r2
	  output_ptr += compptr->DCT_v_scaled_size;
 800a2fe:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800a300:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800a304:	e7de      	b.n	800a2c4 <decompress_onepass+0x108>
			      (JCOEFPTR) coef->MCU_buffer[blkn+xindex],
 800a306:	9806      	ldr	r0, [sp, #24]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800a308:	f109 0901 	add.w	r9, r9, #1
	      (*inverse_DCT) (cinfo, compptr,
 800a30c:	9e09      	ldr	r6, [sp, #36]	; 0x24
			      (JCOEFPTR) coef->MCU_buffer[blkn+xindex],
 800a30e:	f850 2b04 	ldr.w	r2, [r0], #4
 800a312:	9006      	str	r0, [sp, #24]
	      (*inverse_DCT) (cinfo, compptr,
 800a314:	9803      	ldr	r0, [sp, #12]
 800a316:	e9cd 130c 	strd	r1, r3, [sp, #48]	; 0x30
 800a31a:	9000      	str	r0, [sp, #0]
 800a31c:	4620      	mov	r0, r4
 800a31e:	47b0      	blx	r6
	      output_col += compptr->DCT_h_scaled_size;
 800a320:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a322:	9b03      	ldr	r3, [sp, #12]
 800a324:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800a326:	4413      	add	r3, r2
 800a328:	9303      	str	r3, [sp, #12]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800a32a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a32c:	e7e0      	b.n	800a2f0 <decompress_onepass+0x134>
  (*cinfo->inputctl->finish_input_pass) (cinfo);
 800a32e:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800a332:	4620      	mov	r0, r4
 800a334:	68db      	ldr	r3, [r3, #12]
 800a336:	4798      	blx	r3
  return JPEG_SCAN_COMPLETED;
 800a338:	2004      	movs	r0, #4
 800a33a:	e799      	b.n	800a270 <decompress_onepass+0xb4>

0800a33c <decompress_smooth_data>:
 * Variant of decompress_data for use when doing block smoothing.
 */

METHODDEF(int)
decompress_smooth_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
 800a33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800a340:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
{
 800a344:	b0c5      	sub	sp, #276	; 0x114
 800a346:	4604      	mov	r4, r0
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800a348:	f8d0 5148 	ldr.w	r5, [r0, #328]	; 0x148
{
 800a34c:	9121      	str	r1, [sp, #132]	; 0x84
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800a34e:	931d      	str	r3, [sp, #116]	; 0x74
  INT32 Q00,Q01,Q02,Q10,Q11,Q20, num;
  int DC1,DC2,DC3,DC4,DC5,DC6,DC7,DC8,DC9;
  int Al, pred;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
 800a350:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a354:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800a358:	428b      	cmp	r3, r1
 800a35a:	dc03      	bgt.n	800a364 <decompress_smooth_data+0x28>
	 ! cinfo->inputctl->eoi_reached) {
 800a35c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
 800a360:	6950      	ldr	r0, [r2, #20]
 800a362:	b1c0      	cbz	r0, 800a396 <decompress_smooth_data+0x5a>
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800a364:	1e6b      	subs	r3, r5, #1
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
      return JPEG_SUSPENDED;
  }

  /* OK, output from the virtual arrays. */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a366:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800a36a:	931f      	str	r3, [sp, #124]	; 0x7c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a36c:	2300      	movs	r3, #0
 800a36e:	9302      	str	r3, [sp, #8]
 800a370:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a372:	3348      	adds	r3, #72	; 0x48
 800a374:	9323      	str	r3, [sp, #140]	; 0x8c
 800a376:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a378:	9902      	ldr	r1, [sp, #8]
 800a37a:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 800a37e:	428b      	cmp	r3, r1
 800a380:	dc1e      	bgt.n	800a3c0 <decompress_smooth_data+0x84>
      }
      output_ptr += compptr->DCT_v_scaled_size;
    }
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
 800a382:	3201      	adds	r2, #1
 800a384:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
 800a388:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
    return JPEG_ROW_COMPLETED;
 800a38c:	4282      	cmp	r2, r0
 800a38e:	bf2c      	ite	cs
 800a390:	2004      	movcs	r0, #4
 800a392:	2003      	movcc	r0, #3
 800a394:	e011      	b.n	800a3ba <decompress_smooth_data+0x7e>
    if (cinfo->input_scan_number == cinfo->output_scan_number) {
 800a396:	428b      	cmp	r3, r1
 800a398:	d10a      	bne.n	800a3b0 <decompress_smooth_data+0x74>
      JDIMENSION delta = (cinfo->Ss == 0) ? 1 : 0;
 800a39a:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
      if (cinfo->input_iMCU_row > cinfo->output_iMCU_row+delta)
 800a39e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800a3a2:	2900      	cmp	r1, #0
 800a3a4:	bf08      	it	eq
 800a3a6:	3301      	addeq	r3, #1
 800a3a8:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800a3ac:	4299      	cmp	r1, r3
 800a3ae:	d8d9      	bhi.n	800a364 <decompress_smooth_data+0x28>
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
 800a3b0:	6813      	ldr	r3, [r2, #0]
 800a3b2:	4620      	mov	r0, r4
 800a3b4:	4798      	blx	r3
 800a3b6:	2800      	cmp	r0, #0
 800a3b8:	d1ca      	bne.n	800a350 <decompress_smooth_data+0x14>
  return JPEG_SCAN_COMPLETED;
}
 800a3ba:	b045      	add	sp, #276	; 0x114
 800a3bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (! compptr->component_needed)
 800a3c0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a3c2:	b923      	cbnz	r3, 800a3ce <decompress_smooth_data+0x92>
       ci++, compptr++) {
 800a3c4:	9b02      	ldr	r3, [sp, #8]
 800a3c6:	3558      	adds	r5, #88	; 0x58
 800a3c8:	3301      	adds	r3, #1
 800a3ca:	9302      	str	r3, [sp, #8]
 800a3cc:	e7d3      	b.n	800a376 <decompress_smooth_data+0x3a>
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 800a3ce:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a3d0:	68e8      	ldr	r0, [r5, #12]
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	f240 8152 	bls.w	800a67c <decompress_smooth_data+0x340>
      access_rows = block_rows * 2; /* this and next iMCU row */
 800a3d8:	0043      	lsls	r3, r0, #1
      block_rows = compptr->v_samp_factor;
 800a3da:	4681      	mov	r9, r0
      last_row = FALSE;
 800a3dc:	2100      	movs	r1, #0
      last_row = TRUE;
 800a3de:	910d      	str	r1, [sp, #52]	; 0x34
    if (cinfo->output_iMCU_row > 0) {
 800a3e0:	6861      	ldr	r1, [r4, #4]
 800a3e2:	9e02      	ldr	r6, [sp, #8]
 800a3e4:	f8d1 8020 	ldr.w	r8, [r1, #32]
 800a3e8:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800a3ea:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800a3ee:	2a00      	cmp	r2, #0
 800a3f0:	f000 8152 	beq.w	800a698 <decompress_smooth_data+0x35c>
      buffer = (*cinfo->mem->access_virt_barray)
 800a3f4:	2600      	movs	r6, #0
	 (cinfo->output_iMCU_row - 1) * compptr->v_samp_factor,
 800a3f6:	3a01      	subs	r2, #1
      buffer = (*cinfo->mem->access_virt_barray)
 800a3f8:	4403      	add	r3, r0
 800a3fa:	4342      	muls	r2, r0
 800a3fc:	4620      	mov	r0, r4
 800a3fe:	9600      	str	r6, [sp, #0]
 800a400:	47c0      	blx	r8
      buffer += compptr->v_samp_factor;	/* point to current iMCU row */
 800a402:	68eb      	ldr	r3, [r5, #12]
      first_row = FALSE;
 800a404:	961c      	str	r6, [sp, #112]	; 0x70
      buffer += compptr->v_samp_factor;	/* point to current iMCU row */
 800a406:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    coef_bits = coef->coef_bits_latch + (ci * SAVED_COEFS);
 800a40a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a40c:	2218      	movs	r2, #24
 800a40e:	9902      	ldr	r1, [sp, #8]
 800a410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800a412:	9f02      	ldr	r7, [sp, #8]
    coef_bits = coef->coef_bits_latch + (ci * SAVED_COEFS);
 800a414:	fb02 3301 	mla	r3, r2, r1, r3
 800a418:	9304      	str	r3, [sp, #16]
    quanttbl = compptr->quant_table;
 800a41a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    Q00 = quanttbl->quantval[0];
 800a41c:	881a      	ldrh	r2, [r3, #0]
    Q20 = quanttbl->quantval[Q20_POS];
 800a41e:	8c1e      	ldrh	r6, [r3, #32]
    Q01 = quanttbl->quantval[Q01_POS];
 800a420:	f8b3 e002 	ldrh.w	lr, [r3, #2]
    Q10 = quanttbl->quantval[Q10_POS];
 800a424:	f8b3 c010 	ldrh.w	ip, [r3, #16]
    Q11 = quanttbl->quantval[Q11_POS];
 800a428:	8a59      	ldrh	r1, [r3, #18]
    Q00 = quanttbl->quantval[0];
 800a42a:	9205      	str	r2, [sp, #20]
    Q02 = quanttbl->quantval[Q02_POS];
 800a42c:	889a      	ldrh	r2, [r3, #4]
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800a42e:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 800a432:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800a436:	685b      	ldr	r3, [r3, #4]
 800a438:	9320      	str	r3, [sp, #128]	; 0x80
    output_ptr = output_buf[ci];
 800a43a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a43c:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800a440:	930c      	str	r3, [sp, #48]	; 0x30
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 800a442:	ea4f 13ce 	mov.w	r3, lr, lsl #7
 800a446:	9312      	str	r3, [sp, #72]	; 0x48
 800a448:	ea4f 230e 	mov.w	r3, lr, lsl #8
 800a44c:	9313      	str	r3, [sp, #76]	; 0x4c
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 800a44e:	ea4f 13cc 	mov.w	r3, ip, lsl #7
 800a452:	9314      	str	r3, [sp, #80]	; 0x50
 800a454:	ea4f 230c 	mov.w	r3, ip, lsl #8
 800a458:	9315      	str	r3, [sp, #84]	; 0x54
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800a45a:	01f3      	lsls	r3, r6, #7
 800a45c:	9316      	str	r3, [sp, #88]	; 0x58
 800a45e:	0233      	lsls	r3, r6, #8
	jcopy_block_row(buffer_ptr, (JBLOCKROW) workspace, (JDIMENSION) 1);
 800a460:	2601      	movs	r6, #1
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800a462:	9317      	str	r3, [sp, #92]	; 0x5c
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 800a464:	01cb      	lsls	r3, r1, #7
 800a466:	9318      	str	r3, [sp, #96]	; 0x60
 800a468:	020b      	lsls	r3, r1, #8
 800a46a:	9319      	str	r3, [sp, #100]	; 0x64
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 800a46c:	01d3      	lsls	r3, r2, #7
 800a46e:	931a      	str	r3, [sp, #104]	; 0x68
 800a470:	0213      	lsls	r3, r2, #8
 800a472:	931b      	str	r3, [sp, #108]	; 0x6c
 800a474:	1f03      	subs	r3, r0, #4
 800a476:	930a      	str	r3, [sp, #40]	; 0x28
    for (block_row = 0; block_row < block_rows; block_row++) {
 800a478:	2300      	movs	r3, #0
 800a47a:	9303      	str	r3, [sp, #12]
      if (last_row && block_row == block_rows-1)
 800a47c:	f109 33ff 	add.w	r3, r9, #4294967295
 800a480:	9322      	str	r3, [sp, #136]	; 0x88
    for (block_row = 0; block_row < block_rows; block_row++) {
 800a482:	9b03      	ldr	r3, [sp, #12]
 800a484:	454b      	cmp	r3, r9
 800a486:	da9d      	bge.n	800a3c4 <decompress_smooth_data+0x88>
      buffer_ptr = buffer[block_row];
 800a488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a48a:	f853 8f04 	ldr.w	r8, [r3, #4]!
 800a48e:	930a      	str	r3, [sp, #40]	; 0x28
      if (first_row && block_row == 0)
 800a490:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a492:	b11b      	cbz	r3, 800a49c <decompress_smooth_data+0x160>
 800a494:	9b03      	ldr	r3, [sp, #12]
 800a496:	2b00      	cmp	r3, #0
 800a498:	f000 8104 	beq.w	800a6a4 <decompress_smooth_data+0x368>
	prev_block_row = buffer[block_row-1];
 800a49c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a49e:	f853 3c04 	ldr.w	r3, [r3, #-4]
      if (last_row && block_row == block_rows-1)
 800a4a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a4a4:	b122      	cbz	r2, 800a4b0 <decompress_smooth_data+0x174>
 800a4a6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a4a8:	9903      	ldr	r1, [sp, #12]
 800a4aa:	428a      	cmp	r2, r1
 800a4ac:	f000 80fc 	beq.w	800a6a8 <decompress_smooth_data+0x36c>
	next_block_row = buffer[block_row+1];
 800a4b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4b2:	6852      	ldr	r2, [r2, #4]
 800a4b4:	920b      	str	r2, [sp, #44]	; 0x2c
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	f932 3b80 	ldrsh.w	r3, [r2], #128
 800a4bc:	9211      	str	r2, [sp, #68]	; 0x44
 800a4be:	461f      	mov	r7, r3
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800a4c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 800a4c2:	f9b8 3000 	ldrsh.w	r3, [r8]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800a4c6:	46bb      	mov	fp, r7
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800a4c8:	f9b2 2000 	ldrsh.w	r2, [r2]
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 800a4cc:	469a      	mov	sl, r3
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800a4ce:	9210      	str	r2, [sp, #64]	; 0x40
      last_block_column = compptr->width_in_blocks - 1;
 800a4d0:	69ea      	ldr	r2, [r5, #28]
 800a4d2:	3a01      	subs	r2, #1
 800a4d4:	921e      	str	r2, [sp, #120]	; 0x78
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800a4d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a4d8:	9207      	str	r2, [sp, #28]
      output_col = 0;
 800a4da:	2200      	movs	r2, #0
 800a4dc:	9209      	str	r2, [sp, #36]	; 0x24
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800a4de:	9206      	str	r2, [sp, #24]
	jcopy_block_row(buffer_ptr, (JBLOCKROW) workspace, (JDIMENSION) 1);
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	a924      	add	r1, sp, #144	; 0x90
 800a4e4:	4640      	mov	r0, r8
 800a4e6:	9308      	str	r3, [sp, #32]
 800a4e8:	f00b fe4f 	bl	801618a <jcopy_block_row>
	if (block_num < last_block_column) {
 800a4ec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a4ee:	9a06      	ldr	r2, [sp, #24]
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	9b08      	ldr	r3, [sp, #32]
 800a4f4:	f240 80e2 	bls.w	800a6bc <decompress_smooth_data+0x380>
	  DC3 = (int) prev_block_row[1][0];
 800a4f8:	01d2      	lsls	r2, r2, #7
 800a4fa:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a4fc:	5e89      	ldrsh	r1, [r1, r2]
 800a4fe:	910e      	str	r1, [sp, #56]	; 0x38
	  DC6 = (int) buffer_ptr[1][0];
 800a500:	f9b8 1080 	ldrsh.w	r1, [r8, #128]	; 0x80
 800a504:	9108      	str	r1, [sp, #32]
	  DC9 = (int) next_block_row[1][0];
 800a506:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a508:	3180      	adds	r1, #128	; 0x80
 800a50a:	5e8a      	ldrsh	r2, [r1, r2]
 800a50c:	920f      	str	r2, [sp, #60]	; 0x3c
	if ((Al=coef_bits[1]) != 0 && workspace[1] == 0) {
 800a50e:	9a04      	ldr	r2, [sp, #16]
 800a510:	6851      	ldr	r1, [r2, #4]
 800a512:	b1c1      	cbz	r1, 800a546 <decompress_smooth_data+0x20a>
 800a514:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
 800a518:	b9aa      	cbnz	r2, 800a546 <decompress_smooth_data+0x20a>
	  num = 36 * Q00 * (DC4 - DC6);
 800a51a:	9a08      	ldr	r2, [sp, #32]
 800a51c:	1a98      	subs	r0, r3, r2
 800a51e:	9a05      	ldr	r2, [sp, #20]
 800a520:	4350      	muls	r0, r2
 800a522:	2224      	movs	r2, #36	; 0x24
	  if (num >= 0) {
 800a524:	4342      	muls	r2, r0
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800a526:	9812      	ldr	r0, [sp, #72]	; 0x48
	  if (num >= 0) {
 800a528:	f100 80cf 	bmi.w	800a6ca <decompress_smooth_data+0x38e>
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800a52c:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800a52e:	2900      	cmp	r1, #0
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800a530:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800a532:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800a536:	dd04      	ble.n	800a542 <decompress_smooth_data+0x206>
 800a538:	fa06 f101 	lsl.w	r1, r6, r1
 800a53c:	4291      	cmp	r1, r2
 800a53e:	dc00      	bgt.n	800a542 <decompress_smooth_data+0x206>
	      pred = (1<<Al)-1;
 800a540:	1e4a      	subs	r2, r1, #1
	  workspace[1] = (JCOEF) pred;
 800a542:	f8ad 2092 	strh.w	r2, [sp, #146]	; 0x92
	if ((Al=coef_bits[2]) != 0 && workspace[8] == 0) {
 800a546:	9a04      	ldr	r2, [sp, #16]
 800a548:	6891      	ldr	r1, [r2, #8]
 800a54a:	b1c9      	cbz	r1, 800a580 <decompress_smooth_data+0x244>
 800a54c:	f9bd 20a0 	ldrsh.w	r2, [sp, #160]	; 0xa0
 800a550:	b9b2      	cbnz	r2, 800a580 <decompress_smooth_data+0x244>
	  num = 36 * Q00 * (DC2 - DC8);
 800a552:	9a07      	ldr	r2, [sp, #28]
 800a554:	ebab 0002 	sub.w	r0, fp, r2
 800a558:	9a05      	ldr	r2, [sp, #20]
 800a55a:	4350      	muls	r0, r2
 800a55c:	2224      	movs	r2, #36	; 0x24
	  if (num >= 0) {
 800a55e:	4342      	muls	r2, r0
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800a560:	9814      	ldr	r0, [sp, #80]	; 0x50
	  if (num >= 0) {
 800a562:	f100 80c0 	bmi.w	800a6e6 <decompress_smooth_data+0x3aa>
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800a566:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800a568:	2900      	cmp	r1, #0
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800a56a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a56c:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800a570:	dd04      	ble.n	800a57c <decompress_smooth_data+0x240>
 800a572:	fa06 f101 	lsl.w	r1, r6, r1
 800a576:	4291      	cmp	r1, r2
 800a578:	dc00      	bgt.n	800a57c <decompress_smooth_data+0x240>
	      pred = (1<<Al)-1;
 800a57a:	1e4a      	subs	r2, r1, #1
	  workspace[8] = (JCOEF) pred;
 800a57c:	f8ad 20a0 	strh.w	r2, [sp, #160]	; 0xa0
	if ((Al=coef_bits[3]) != 0 && workspace[16] == 0) {
 800a580:	9a04      	ldr	r2, [sp, #16]
 800a582:	68d1      	ldr	r1, [r2, #12]
 800a584:	b1d1      	cbz	r1, 800a5bc <decompress_smooth_data+0x280>
 800a586:	f9bd 20b0 	ldrsh.w	r2, [sp, #176]	; 0xb0
 800a58a:	b9ba      	cbnz	r2, 800a5bc <decompress_smooth_data+0x280>
	  num = 9 * Q00 * (DC2 + DC8 - 2*DC5);
 800a58c:	9a07      	ldr	r2, [sp, #28]
 800a58e:	9805      	ldr	r0, [sp, #20]
 800a590:	445a      	add	r2, fp
 800a592:	eba2 024a 	sub.w	r2, r2, sl, lsl #1
 800a596:	4342      	muls	r2, r0
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800a598:	9816      	ldr	r0, [sp, #88]	; 0x58
	  if (num >= 0) {
 800a59a:	eb12 02c2 	adds.w	r2, r2, r2, lsl #3
 800a59e:	f100 80b0 	bmi.w	800a702 <decompress_smooth_data+0x3c6>
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800a5a2:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800a5a4:	2900      	cmp	r1, #0
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800a5a6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a5a8:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800a5ac:	dd04      	ble.n	800a5b8 <decompress_smooth_data+0x27c>
 800a5ae:	fa06 f101 	lsl.w	r1, r6, r1
 800a5b2:	4291      	cmp	r1, r2
 800a5b4:	dc00      	bgt.n	800a5b8 <decompress_smooth_data+0x27c>
	      pred = (1<<Al)-1;
 800a5b6:	1e4a      	subs	r2, r1, #1
	  workspace[16] = (JCOEF) pred;
 800a5b8:	f8ad 20b0 	strh.w	r2, [sp, #176]	; 0xb0
	if ((Al=coef_bits[4]) != 0 && workspace[9] == 0) {
 800a5bc:	9a04      	ldr	r2, [sp, #16]
 800a5be:	6911      	ldr	r1, [r2, #16]
 800a5c0:	b1e1      	cbz	r1, 800a5fc <decompress_smooth_data+0x2c0>
 800a5c2:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
 800a5c6:	b9ca      	cbnz	r2, 800a5fc <decompress_smooth_data+0x2c0>
	  num = 5 * Q00 * (DC1 - DC3 - DC7 + DC9);
 800a5c8:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a5ca:	1a3a      	subs	r2, r7, r0
 800a5cc:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a5ce:	1a12      	subs	r2, r2, r0
 800a5d0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800a5d2:	4402      	add	r2, r0
 800a5d4:	9805      	ldr	r0, [sp, #20]
 800a5d6:	4342      	muls	r2, r0
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800a5d8:	9818      	ldr	r0, [sp, #96]	; 0x60
	  if (num >= 0) {
 800a5da:	eb12 0282 	adds.w	r2, r2, r2, lsl #2
 800a5de:	f100 809e 	bmi.w	800a71e <decompress_smooth_data+0x3e2>
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800a5e2:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800a5e4:	2900      	cmp	r1, #0
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800a5e6:	9819      	ldr	r0, [sp, #100]	; 0x64
 800a5e8:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800a5ec:	dd04      	ble.n	800a5f8 <decompress_smooth_data+0x2bc>
 800a5ee:	fa06 f101 	lsl.w	r1, r6, r1
 800a5f2:	4291      	cmp	r1, r2
 800a5f4:	dc00      	bgt.n	800a5f8 <decompress_smooth_data+0x2bc>
	      pred = (1<<Al)-1;
 800a5f6:	1e4a      	subs	r2, r1, #1
	  workspace[9] = (JCOEF) pred;
 800a5f8:	f8ad 20a2 	strh.w	r2, [sp, #162]	; 0xa2
	if ((Al=coef_bits[5]) != 0 && workspace[2] == 0) {
 800a5fc:	9a04      	ldr	r2, [sp, #16]
 800a5fe:	6952      	ldr	r2, [r2, #20]
 800a600:	b1d2      	cbz	r2, 800a638 <decompress_smooth_data+0x2fc>
 800a602:	f9bd 1094 	ldrsh.w	r1, [sp, #148]	; 0x94
 800a606:	b9b9      	cbnz	r1, 800a638 <decompress_smooth_data+0x2fc>
	  num = 9 * Q00 * (DC4 + DC6 - 2*DC5);
 800a608:	9908      	ldr	r1, [sp, #32]
 800a60a:	440b      	add	r3, r1
 800a60c:	9905      	ldr	r1, [sp, #20]
 800a60e:	eba3 034a 	sub.w	r3, r3, sl, lsl #1
 800a612:	434b      	muls	r3, r1
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800a614:	991a      	ldr	r1, [sp, #104]	; 0x68
	  if (num >= 0) {
 800a616:	eb13 03c3 	adds.w	r3, r3, r3, lsl #3
 800a61a:	f100 808e 	bmi.w	800a73a <decompress_smooth_data+0x3fe>
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800a61e:	440b      	add	r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800a620:	2a00      	cmp	r2, #0
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800a622:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800a624:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800a628:	dd04      	ble.n	800a634 <decompress_smooth_data+0x2f8>
 800a62a:	fa06 f202 	lsl.w	r2, r6, r2
 800a62e:	429a      	cmp	r2, r3
 800a630:	dc00      	bgt.n	800a634 <decompress_smooth_data+0x2f8>
	      pred = (1<<Al)-1;
 800a632:	1e53      	subs	r3, r2, #1
	  workspace[2] = (JCOEF) pred;
 800a634:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) workspace,
 800a638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a63a:	aa24      	add	r2, sp, #144	; 0x90
 800a63c:	4629      	mov	r1, r5
 800a63e:	9f20      	ldr	r7, [sp, #128]	; 0x80
 800a640:	9300      	str	r3, [sp, #0]
 800a642:	4620      	mov	r0, r4
 800a644:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	buffer_ptr++, prev_block_row++, next_block_row++;
 800a646:	f108 0880 	add.w	r8, r8, #128	; 0x80
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) workspace,
 800a64a:	47b8      	blx	r7
	output_col += compptr->DCT_h_scaled_size;
 800a64c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a64e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a650:	465f      	mov	r7, fp
 800a652:	18d3      	adds	r3, r2, r3
 800a654:	9a07      	ldr	r2, [sp, #28]
 800a656:	9309      	str	r3, [sp, #36]	; 0x24
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800a658:	9b06      	ldr	r3, [sp, #24]
 800a65a:	9210      	str	r2, [sp, #64]	; 0x40
 800a65c:	3301      	adds	r3, #1
 800a65e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a660:	9306      	str	r3, [sp, #24]
 800a662:	4653      	mov	r3, sl
 800a664:	9906      	ldr	r1, [sp, #24]
 800a666:	428a      	cmp	r2, r1
 800a668:	d221      	bcs.n	800a6ae <decompress_smooth_data+0x372>
      output_ptr += compptr->DCT_v_scaled_size;
 800a66a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a66c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800a66e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a672:	930c      	str	r3, [sp, #48]	; 0x30
    for (block_row = 0; block_row < block_rows; block_row++) {
 800a674:	9b03      	ldr	r3, [sp, #12]
 800a676:	3301      	adds	r3, #1
 800a678:	9303      	str	r3, [sp, #12]
 800a67a:	e702      	b.n	800a482 <decompress_smooth_data+0x146>
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800a67c:	6a2b      	ldr	r3, [r5, #32]
 800a67e:	fbb3 f1f0 	udiv	r1, r3, r0
 800a682:	fb00 3911 	mls	r9, r0, r1, r3
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
 800a686:	f1b9 0f00 	cmp.w	r9, #0
 800a68a:	d103      	bne.n	800a694 <decompress_smooth_data+0x358>
 800a68c:	4603      	mov	r3, r0
 800a68e:	4681      	mov	r9, r0
      last_row = TRUE;
 800a690:	2101      	movs	r1, #1
 800a692:	e6a4      	b.n	800a3de <decompress_smooth_data+0xa2>
 800a694:	464b      	mov	r3, r9
 800a696:	e7fb      	b.n	800a690 <decompress_smooth_data+0x354>
      buffer = (*cinfo->mem->access_virt_barray)
 800a698:	4620      	mov	r0, r4
 800a69a:	9200      	str	r2, [sp, #0]
 800a69c:	47c0      	blx	r8
      first_row = TRUE;
 800a69e:	2301      	movs	r3, #1
 800a6a0:	931c      	str	r3, [sp, #112]	; 0x70
 800a6a2:	e6b2      	b.n	800a40a <decompress_smooth_data+0xce>
      buffer_ptr = buffer[block_row];
 800a6a4:	4643      	mov	r3, r8
 800a6a6:	e6fc      	b.n	800a4a2 <decompress_smooth_data+0x166>
 800a6a8:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800a6ac:	e703      	b.n	800a4b6 <decompress_smooth_data+0x17a>
	DC7 = DC8; DC8 = DC9;
 800a6ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
	DC4 = DC5; DC5 = DC6;
 800a6b0:	f8dd a020 	ldr.w	sl, [sp, #32]
	DC1 = DC2; DC2 = DC3;
 800a6b4:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
	DC7 = DC8; DC8 = DC9;
 800a6b8:	9207      	str	r2, [sp, #28]
 800a6ba:	e711      	b.n	800a4e0 <decompress_smooth_data+0x1a4>
 800a6bc:	9a07      	ldr	r2, [sp, #28]
 800a6be:	f8cd a020 	str.w	sl, [sp, #32]
 800a6c2:	920f      	str	r2, [sp, #60]	; 0x3c
 800a6c4:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800a6c8:	e721      	b.n	800a50e <decompress_smooth_data+0x1d2>
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 800a6ca:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800a6cc:	2900      	cmp	r1, #0
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 800a6ce:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800a6d0:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800a6d4:	dd05      	ble.n	800a6e2 <decompress_smooth_data+0x3a6>
 800a6d6:	fa06 f101 	lsl.w	r1, r6, r1
 800a6da:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 800a6dc:	bfd8      	it	le
 800a6de:	f101 32ff 	addle.w	r2, r1, #4294967295
	    pred = -pred;
 800a6e2:	4252      	negs	r2, r2
 800a6e4:	e72d      	b.n	800a542 <decompress_smooth_data+0x206>
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 800a6e6:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800a6e8:	2900      	cmp	r1, #0
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 800a6ea:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a6ec:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800a6f0:	dd05      	ble.n	800a6fe <decompress_smooth_data+0x3c2>
 800a6f2:	fa06 f101 	lsl.w	r1, r6, r1
 800a6f6:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 800a6f8:	bfd8      	it	le
 800a6fa:	f101 32ff 	addle.w	r2, r1, #4294967295
	    pred = -pred;
 800a6fe:	4252      	negs	r2, r2
 800a700:	e73c      	b.n	800a57c <decompress_smooth_data+0x240>
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800a702:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800a704:	2900      	cmp	r1, #0
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800a706:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a708:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800a70c:	dd05      	ble.n	800a71a <decompress_smooth_data+0x3de>
 800a70e:	fa06 f101 	lsl.w	r1, r6, r1
 800a712:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 800a714:	bfd8      	it	le
 800a716:	f101 32ff 	addle.w	r2, r1, #4294967295
	    pred = -pred;
 800a71a:	4252      	negs	r2, r2
 800a71c:	e74c      	b.n	800a5b8 <decompress_smooth_data+0x27c>
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 800a71e:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800a720:	2900      	cmp	r1, #0
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 800a722:	9819      	ldr	r0, [sp, #100]	; 0x64
 800a724:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800a728:	dd05      	ble.n	800a736 <decompress_smooth_data+0x3fa>
 800a72a:	fa06 f101 	lsl.w	r1, r6, r1
 800a72e:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 800a730:	bfd8      	it	le
 800a732:	f101 32ff 	addle.w	r2, r1, #4294967295
	    pred = -pred;
 800a736:	4252      	negs	r2, r2
 800a738:	e75e      	b.n	800a5f8 <decompress_smooth_data+0x2bc>
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 800a73a:	1acb      	subs	r3, r1, r3
	    if (Al > 0 && pred >= (1<<Al))
 800a73c:	2a00      	cmp	r2, #0
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 800a73e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800a740:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800a744:	dd05      	ble.n	800a752 <decompress_smooth_data+0x416>
 800a746:	fa06 f202 	lsl.w	r2, r6, r2
 800a74a:	429a      	cmp	r2, r3
	      pred = (1<<Al)-1;
 800a74c:	bfd8      	it	le
 800a74e:	f102 33ff 	addle.w	r3, r2, #4294967295
	    pred = -pred;
 800a752:	425b      	negs	r3, r3
 800a754:	e76e      	b.n	800a634 <decompress_smooth_data+0x2f8>
	...

0800a758 <jinit_d_coef_controller>:
jinit_d_coef_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_coef_ptr coef;

  coef = (my_coef_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a758:	6843      	ldr	r3, [r0, #4]
 800a75a:	2274      	movs	r2, #116	; 0x74
{
 800a75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a760:	681b      	ldr	r3, [r3, #0]
{
 800a762:	b085      	sub	sp, #20
 800a764:	460e      	mov	r6, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a766:	2101      	movs	r1, #1
{
 800a768:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a76a:	4798      	blx	r3
				SIZEOF(my_coef_controller));
  cinfo->coef = (struct jpeg_d_coef_controller *) coef;
  coef->pub.start_input_pass = start_input_pass;
 800a76c:	4b2c      	ldr	r3, [pc, #176]	; (800a820 <jinit_d_coef_controller+0xc8>)
  coef->pub.start_output_pass = start_output_pass;
#ifdef BLOCK_SMOOTHING_SUPPORTED
  coef->coef_bits_latch = NULL;
 800a76e:	2700      	movs	r7, #0
  cinfo->coef = (struct jpeg_d_coef_controller *) coef;
 800a770:	f8c5 01c0 	str.w	r0, [r5, #448]	; 0x1c0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a774:	4604      	mov	r4, r0
  coef->pub.start_input_pass = start_input_pass;
 800a776:	6003      	str	r3, [r0, #0]
  coef->pub.start_output_pass = start_output_pass;
 800a778:	f100 0948 	add.w	r9, r0, #72	; 0x48
 800a77c:	4b29      	ldr	r3, [pc, #164]	; (800a824 <jinit_d_coef_controller+0xcc>)
  coef->coef_bits_latch = NULL;
 800a77e:	6707      	str	r7, [r0, #112]	; 0x70
  coef->pub.start_output_pass = start_output_pass;
 800a780:	6083      	str	r3, [r0, #8]
#endif

  /* Create the coefficient buffer. */
  if (need_full_buffer) {
 800a782:	b37e      	cbz	r6, 800a7e4 <jinit_d_coef_controller+0x8c>
    /* padded to a multiple of samp_factor DCT blocks in each direction. */
    /* Note we ask for a pre-zeroed array. */
    int ci, access_rows;
    jpeg_component_info *compptr;

    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a784:	f8d5 60d8 	ldr.w	r6, [r5, #216]	; 0xd8
 800a788:	46ca      	mov	sl, r9
 800a78a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a78c:	42bb      	cmp	r3, r7
 800a78e:	dc07      	bgt.n	800a7a0 <jinit_d_coef_controller+0x48>
				(long) compptr->h_samp_factor),
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
				(long) compptr->v_samp_factor),
	 (JDIMENSION) access_rows);
    }
    coef->pub.consume_data = consume_data;
 800a790:	4b25      	ldr	r3, [pc, #148]	; (800a828 <jinit_d_coef_controller+0xd0>)
 800a792:	6063      	str	r3, [r4, #4]
    coef->pub.decompress_data = decompress_data;
 800a794:	4b25      	ldr	r3, [pc, #148]	; (800a82c <jinit_d_coef_controller+0xd4>)
    coef->pub.coef_arrays = coef->whole_image; /* link to virtual arrays */
 800a796:	e9c4 3903 	strd	r3, r9, [r4, #12]
	       (size_t) (D_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK)));
    coef->pub.consume_data = dummy_consume_data;
    coef->pub.decompress_data = decompress_onepass;
    coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
  }
}
 800a79a:	b005      	add	sp, #20
 800a79c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (cinfo->progressive_mode)
 800a7a0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
      access_rows = compptr->v_samp_factor;
 800a7a4:	f8d6 800c 	ldr.w	r8, [r6, #12]
      if (cinfo->progressive_mode)
 800a7a8:	b10b      	cbz	r3, 800a7ae <jinit_d_coef_controller+0x56>
	access_rows *= 3;
 800a7aa:	eb08 0848 	add.w	r8, r8, r8, lsl #1
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800a7ae:	686b      	ldr	r3, [r5, #4]
	 ci++, compptr++) {
 800a7b0:	3701      	adds	r7, #1
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800a7b2:	68b1      	ldr	r1, [r6, #8]
	 ci++, compptr++) {
 800a7b4:	3658      	adds	r6, #88	; 0x58
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800a7b6:	f856 0c3c 	ldr.w	r0, [r6, #-60]
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800a7ba:	f8d3 b014 	ldr.w	fp, [r3, #20]
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800a7be:	f00b fcca 	bl	8016156 <jround_up>
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 800a7c2:	f856 1c4c 	ldr.w	r1, [r6, #-76]
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800a7c6:	9003      	str	r0, [sp, #12]
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 800a7c8:	f856 0c38 	ldr.w	r0, [r6, #-56]
 800a7cc:	f00b fcc3 	bl	8016156 <jround_up>
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800a7d0:	2201      	movs	r2, #1
 800a7d2:	9b03      	ldr	r3, [sp, #12]
 800a7d4:	4611      	mov	r1, r2
 800a7d6:	e9cd 0800 	strd	r0, r8, [sp]
 800a7da:	4628      	mov	r0, r5
 800a7dc:	47d8      	blx	fp
 800a7de:	f84a 0b04 	str.w	r0, [sl], #4
	 ci++, compptr++) {
 800a7e2:	e7d2      	b.n	800a78a <jinit_d_coef_controller+0x32>
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a7e4:	686b      	ldr	r3, [r5, #4]
 800a7e6:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800a7ea:	2101      	movs	r1, #1
 800a7ec:	4628      	mov	r0, r5
 800a7ee:	685b      	ldr	r3, [r3, #4]
 800a7f0:	4798      	blx	r3
    for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
 800a7f2:	f104 0320 	add.w	r3, r4, #32
 800a7f6:	4602      	mov	r2, r0
      coef->MCU_buffer[i] = buffer + i;
 800a7f8:	f843 2b04 	str.w	r2, [r3], #4
    for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
 800a7fc:	454b      	cmp	r3, r9
 800a7fe:	f102 0280 	add.w	r2, r2, #128	; 0x80
 800a802:	d1f9      	bne.n	800a7f8 <jinit_d_coef_controller+0xa0>
    if (cinfo->lim_Se == 0)	/* DC only case: want to bypass later */
 800a804:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
 800a808:	b919      	cbnz	r1, 800a812 <jinit_d_coef_controller+0xba>
      FMEMZERO((void FAR *) buffer,
 800a80a:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800a80e:	f01c fe89 	bl	8027524 <memset>
    coef->pub.consume_data = dummy_consume_data;
 800a812:	4b07      	ldr	r3, [pc, #28]	; (800a830 <jinit_d_coef_controller+0xd8>)
 800a814:	6063      	str	r3, [r4, #4]
    coef->pub.decompress_data = decompress_onepass;
 800a816:	4b07      	ldr	r3, [pc, #28]	; (800a834 <jinit_d_coef_controller+0xdc>)
 800a818:	60e3      	str	r3, [r4, #12]
    coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
 800a81a:	2300      	movs	r3, #0
 800a81c:	6123      	str	r3, [r4, #16]
}
 800a81e:	e7bc      	b.n	800a79a <jinit_d_coef_controller+0x42>
 800a820:	08009ea1 	.word	0x08009ea1
 800a824:	0800a105 	.word	0x0800a105
 800a828:	08009eaf 	.word	0x08009eaf
 800a82c:	08009ff7 	.word	0x08009ff7
 800a830:	08009eab 	.word	0x08009eab
 800a834:	0800a1bd 	.word	0x0800a1bd

0800a838 <build_ycc_rgb_table>:
  int i;
  INT32 x;
  SHIFT_TEMPS

  cconvert->Cr_r_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a838:	6843      	ldr	r3, [r0, #4]
 800a83a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a83e:	2101      	movs	r1, #1
 800a840:	681b      	ldr	r3, [r3, #0]
{
 800a842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a846:	4604      	mov	r4, r0
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800a848:	f8d0 51dc 	ldr.w	r5, [r0, #476]	; 0x1dc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a84c:	4798      	blx	r3
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cb_b_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a84e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a852:	6863      	ldr	r3, [r4, #4]
 800a854:	2101      	movs	r1, #1
  cconvert->Cr_r_tab = (int *)
 800a856:	60a8      	str	r0, [r5, #8]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a858:	4620      	mov	r0, r4
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4798      	blx	r3
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cr_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a85e:	6863      	ldr	r3, [r4, #4]
  cconvert->Cb_b_tab = (int *)
 800a860:	60e8      	str	r0, [r5, #12]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a862:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	2101      	movs	r1, #1
 800a86a:	4620      	mov	r0, r4
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
    /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
    /* The Cb or Cr value we are thinking of is x = i - CENTERJSAMPLE */
    /* Cr=>R value is nearest int to 1.40200 * x */
    cconvert->Cr_r_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800a86c:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800a8ec <build_ycc_rgb_table+0xb4>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a870:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a872:	6863      	ldr	r3, [r4, #4]
  cconvert->Cr_g_tab = (INT32 *)
 800a874:	6128      	str	r0, [r5, #16]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a876:	2101      	movs	r1, #1
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4620      	mov	r0, r4
 800a87c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    /* Cb=>B value is nearest int to 1.77200 * x */
    cconvert->Cb_b_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800a880:	4f17      	ldr	r7, [pc, #92]	; (800a8e0 <build_ycc_rgb_table+0xa8>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a882:	4798      	blx	r3
    /* Cr=>G value is scaled-up -0.71414 * x */
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800a884:	692c      	ldr	r4, [r5, #16]
  cconvert->Cb_g_tab = (INT32 *)
 800a886:	6168      	str	r0, [r5, #20]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800a888:	2300      	movs	r3, #0
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800a88a:	f8df e064 	ldr.w	lr, [pc, #100]	; 800a8f0 <build_ycc_rgb_table+0xb8>
    /* Cb=>G value is scaled-up -0.34414 * x */
    /* We also add in ONE_HALF so that need not do it in inner loop */
    cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800a88e:	4915      	ldr	r1, [pc, #84]	; (800a8e4 <build_ycc_rgb_table+0xac>)
    cconvert->Cb_b_tab[i] = (int)
 800a890:	e9d5 c602 	ldrd	ip, r6, [r5, #8]
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800a894:	4d14      	ldr	r5, [pc, #80]	; (800a8e8 <build_ycc_rgb_table+0xb0>)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800a896:	fb08 e203 	mla	r2, r8, r3, lr
 800a89a:	1412      	asrs	r2, r2, #16
    cconvert->Cr_r_tab[i] = (int)
 800a89c:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800a8a0:	fb07 f203 	mul.w	r2, r7, r3
 800a8a4:	f5a2 0262 	sub.w	r2, r2, #14811136	; 0xe20000
 800a8a8:	f5a2 42a2 	sub.w	r2, r2, #20736	; 0x5100
 800a8ac:	1412      	asrs	r2, r2, #16
    cconvert->Cb_b_tab[i] = (int)
 800a8ae:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800a8b2:	fb05 f203 	mul.w	r2, r5, r3
 800a8b6:	f502 02b6 	add.w	r2, r2, #5963776	; 0x5b0000
 800a8ba:	f502 42d2 	add.w	r2, r2, #26880	; 0x6900
 800a8be:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800a8c2:	fb01 f203 	mul.w	r2, r1, r3
 800a8c6:	f502 1232 	add.w	r2, r2, #2916352	; 0x2c8000
 800a8ca:	f502 6250 	add.w	r2, r2, #3328	; 0xd00
 800a8ce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8d8:	d1dd      	bne.n	800a896 <build_ycc_rgb_table+0x5e>
  }
}
 800a8da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8de:	bf00      	nop
 800a8e0:	0001c5a2 	.word	0x0001c5a2
 800a8e4:	ffffa7e6 	.word	0xffffa7e6
 800a8e8:	ffff492e 	.word	0xffff492e
 800a8ec:	000166e9 	.word	0x000166e9
 800a8f0:	ff4d0b80 	.word	0xff4d0b80

0800a8f4 <ycc_rgb_convert>:

METHODDEF(void)
ycc_rgb_convert (j_decompress_ptr cinfo,
		 JSAMPIMAGE input_buf, JDIMENSION input_row,
		 JSAMPARRAY output_buf, int num_rows)
{
 800a8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800a8f8:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
{
 800a8fc:	b087      	sub	sp, #28
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800a8fe:	6f05      	ldr	r5, [r0, #112]	; 0x70
 800a900:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800a904:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
 800a908:	f8d4 e014 	ldr.w	lr, [r4, #20]
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800a90c:	9002      	str	r0, [sp, #8]
  JDIMENSION num_cols = cinfo->output_width;
 800a90e:	9501      	str	r5, [sp, #4]
  register int * Crrtab = cconvert->Cr_r_tab;
 800a910:	9205      	str	r2, [sp, #20]
  register int * Cbbtab = cconvert->Cb_b_tab;
 800a912:	e9d4 6002 	ldrd	r6, r0, [r4, #8]
 800a916:	9003      	str	r0, [sp, #12]
  register INT32 * Crgtab = cconvert->Cr_g_tab;
 800a918:	6920      	ldr	r0, [r4, #16]
 800a91a:	9004      	str	r0, [sp, #16]
  SHIFT_TEMPS

  while (--num_rows >= 0) {
 800a91c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a91e:	3a01      	subs	r2, #1
 800a920:	9210      	str	r2, [sp, #64]	; 0x40
 800a922:	d502      	bpl.n	800a92a <ycc_rgb_convert+0x36>
						 SCALEBITS))];
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800a924:	b007      	add	sp, #28
 800a926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800a92a:	9a05      	ldr	r2, [sp, #20]
 800a92c:	680c      	ldr	r4, [r1, #0]
 800a92e:	189d      	adds	r5, r3, r2
    for (col = 0; col < num_cols; col++) {
 800a930:	f853 0b04 	ldr.w	r0, [r3], #4
 800a934:	f854 8005 	ldr.w	r8, [r4, r5]
    inptr1 = input_buf[1][input_row];
 800a938:	684c      	ldr	r4, [r1, #4]
 800a93a:	5964      	ldr	r4, [r4, r5]
 800a93c:	f104 3cff 	add.w	ip, r4, #4294967295
    inptr2 = input_buf[2][input_row];
 800a940:	688c      	ldr	r4, [r1, #8]
 800a942:	5967      	ldr	r7, [r4, r5]
 800a944:	9c01      	ldr	r4, [sp, #4]
 800a946:	3f01      	subs	r7, #1
 800a948:	eb04 0a08 	add.w	sl, r4, r8
    for (col = 0; col < num_cols; col++) {
 800a94c:	45d0      	cmp	r8, sl
 800a94e:	f100 0003 	add.w	r0, r0, #3
 800a952:	d0e3      	beq.n	800a91c <ycc_rgb_convert+0x28>
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800a954:	f817 9f01 	ldrb.w	r9, [r7, #1]!
      y  = GETJSAMPLE(inptr0[col]);
 800a958:	f818 4b01 	ldrb.w	r4, [r8], #1
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800a95c:	9a02      	ldr	r2, [sp, #8]
      cb = GETJSAMPLE(inptr1[col]);
 800a95e:	f81c bf01 	ldrb.w	fp, [ip, #1]!
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800a962:	f856 5029 	ldr.w	r5, [r6, r9, lsl #2]
 800a966:	4414      	add	r4, r2
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800a968:	fa0f fb8b 	sxth.w	fp, fp
 800a96c:	9a04      	ldr	r2, [sp, #16]
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800a96e:	5d65      	ldrb	r5, [r4, r5]
 800a970:	f800 5c01 	strb.w	r5, [r0, #-1]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800a974:	f852 5029 	ldr.w	r5, [r2, r9, lsl #2]
 800a978:	f85e 202b 	ldr.w	r2, [lr, fp, lsl #2]
 800a97c:	4415      	add	r5, r2
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
 800a97e:	9a03      	ldr	r2, [sp, #12]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800a980:	142d      	asrs	r5, r5, #16
      outptr[RGB_GREEN] = range_limit[y +
 800a982:	5d65      	ldrb	r5, [r4, r5]
 800a984:	f800 5c02 	strb.w	r5, [r0, #-2]
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
 800a988:	f852 502b 	ldr.w	r5, [r2, fp, lsl #2]
 800a98c:	5d64      	ldrb	r4, [r4, r5]
 800a98e:	f800 4c03 	strb.w	r4, [r0, #-3]
    for (col = 0; col < num_cols; col++) {
 800a992:	e7db      	b.n	800a94c <ycc_rgb_convert+0x58>

0800a994 <rgb_gray_convert>:

METHODDEF(void)
rgb_gray_convert (j_decompress_ptr cinfo,
		  JSAMPIMAGE input_buf, JDIMENSION input_row,
		  JSAMPARRAY output_buf, int num_rows)
{
 800a994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register int r, g, b;
  register INT32 * ctab = cconvert->rgb_y_tab;
 800a998:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
 800a99c:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
{
 800a9a0:	9d09      	ldr	r5, [sp, #36]	; 0x24
  register INT32 * ctab = cconvert->rgb_y_tab;
 800a9a2:	69a6      	ldr	r6, [r4, #24]
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800a9a4:	6f07      	ldr	r7, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 800a9a6:	3d01      	subs	r5, #1
 800a9a8:	d501      	bpl.n	800a9ae <rgb_gray_convert+0x1a>
      outptr[col] = (JSAMPLE)
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
		 >> SCALEBITS);
    }
  }
}
 800a9aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800a9ae:	189c      	adds	r4, r3, r2
 800a9b0:	6808      	ldr	r0, [r1, #0]
    outptr = *output_buf++;
 800a9b2:	f853 9b04 	ldr.w	r9, [r3], #4
    inptr0 = input_buf[0][input_row];
 800a9b6:	f850 c004 	ldr.w	ip, [r0, r4]
    inptr1 = input_buf[1][input_row];
 800a9ba:	6848      	ldr	r0, [r1, #4]
 800a9bc:	f850 e004 	ldr.w	lr, [r0, r4]
    inptr2 = input_buf[2][input_row];
 800a9c0:	6888      	ldr	r0, [r1, #8]
 800a9c2:	f850 8004 	ldr.w	r8, [r0, r4]
    for (col = 0; col < num_cols; col++) {
 800a9c6:	2000      	movs	r0, #0
 800a9c8:	42b8      	cmp	r0, r7
 800a9ca:	d0ec      	beq.n	800a9a6 <rgb_gray_convert+0x12>
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
 800a9cc:	f81e 4000 	ldrb.w	r4, [lr, r0]
 800a9d0:	f81c b000 	ldrb.w	fp, [ip, r0]
 800a9d4:	f504 7480 	add.w	r4, r4, #256	; 0x100
 800a9d8:	f856 a024 	ldr.w	sl, [r6, r4, lsl #2]
 800a9dc:	f856 402b 	ldr.w	r4, [r6, fp, lsl #2]
 800a9e0:	4454      	add	r4, sl
 800a9e2:	f818 a000 	ldrb.w	sl, [r8, r0]
 800a9e6:	f50a 7a00 	add.w	sl, sl, #512	; 0x200
 800a9ea:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
 800a9ee:	4454      	add	r4, sl
		 >> SCALEBITS);
 800a9f0:	1424      	asrs	r4, r4, #16
      outptr[col] = (JSAMPLE)
 800a9f2:	f809 4000 	strb.w	r4, [r9, r0]
    for (col = 0; col < num_cols; col++) {
 800a9f6:	3001      	adds	r0, #1
 800a9f8:	e7e6      	b.n	800a9c8 <rgb_gray_convert+0x34>

0800a9fa <rgb_convert>:

METHODDEF(void)
rgb_convert (j_decompress_ptr cinfo,
	     JSAMPIMAGE input_buf, JDIMENSION input_row,
	     JSAMPARRAY output_buf, int num_rows)
{
 800a9fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9fe:	9d06      	ldr	r5, [sp, #24]
 800aa00:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800aa04:	6f06      	ldr	r6, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 800aa06:	3d01      	subs	r5, #1
 800aa08:	d501      	bpl.n	800aa0e <rgb_convert+0x14>
      outptr[RGB_GREEN] = inptr1[col];
      outptr[RGB_BLUE]  = inptr2[col];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800aa0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    inptr0 = input_buf[0][input_row];
 800aa0e:	1898      	adds	r0, r3, r2
 800aa10:	680c      	ldr	r4, [r1, #0]
 800aa12:	5827      	ldr	r7, [r4, r0]
    inptr1 = input_buf[1][input_row];
 800aa14:	684c      	ldr	r4, [r1, #4]
 800aa16:	f854 c000 	ldr.w	ip, [r4, r0]
    inptr2 = input_buf[2][input_row];
 800aa1a:	688c      	ldr	r4, [r1, #8]
 800aa1c:	f854 e000 	ldr.w	lr, [r4, r0]
    for (col = 0; col < num_cols; col++) {
 800aa20:	2000      	movs	r0, #0
 800aa22:	f853 4b04 	ldr.w	r4, [r3], #4
 800aa26:	42b0      	cmp	r0, r6
 800aa28:	f104 0403 	add.w	r4, r4, #3
 800aa2c:	d0eb      	beq.n	800aa06 <rgb_convert+0xc>
      outptr[RGB_RED]   = inptr0[col];
 800aa2e:	f817 8000 	ldrb.w	r8, [r7, r0]
 800aa32:	f804 8c01 	strb.w	r8, [r4, #-1]
      outptr[RGB_GREEN] = inptr1[col];
 800aa36:	f81c 8000 	ldrb.w	r8, [ip, r0]
 800aa3a:	f804 8c02 	strb.w	r8, [r4, #-2]
      outptr[RGB_BLUE]  = inptr2[col];
 800aa3e:	f81e 8000 	ldrb.w	r8, [lr, r0]
    for (col = 0; col < num_cols; col++) {
 800aa42:	3001      	adds	r0, #1
      outptr[RGB_BLUE]  = inptr2[col];
 800aa44:	f804 8c03 	strb.w	r8, [r4, #-3]
    for (col = 0; col < num_cols; col++) {
 800aa48:	e7ed      	b.n	800aa26 <rgb_convert+0x2c>

0800aa4a <null_convert>:

METHODDEF(void)
null_convert (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION input_row,
	      JSAMPARRAY output_buf, int num_rows)
{
 800aa4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa4e:	9e07      	ldr	r6, [sp, #28]
 800aa50:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW inptr, outptr;
  register JDIMENSION count;
  register int num_components = cinfo->num_components;
 800aa54:	6a47      	ldr	r7, [r0, #36]	; 0x24
  JDIMENSION num_cols = cinfo->output_width;
 800aa56:	f8d0 e070 	ldr.w	lr, [r0, #112]	; 0x70
  int ci;

  while (--num_rows >= 0) {
 800aa5a:	3e01      	subs	r6, #1
 800aa5c:	d418      	bmi.n	800aa90 <null_convert+0x46>
    for (ci = 0; ci < num_components; ci++) {
      inptr = input_buf[ci][input_row];
 800aa5e:	eb03 0c02 	add.w	ip, r3, r2
    for (ci = 0; ci < num_components; ci++) {
 800aa62:	2000      	movs	r0, #0
 800aa64:	e00a      	b.n	800aa7c <null_convert+0x32>
      inptr = input_buf[ci][input_row];
 800aa66:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 800aa6a:	f854 500c 	ldr.w	r5, [r4, ip]
      outptr = output_buf[0] + ci;
 800aa6e:	681c      	ldr	r4, [r3, #0]
 800aa70:	eb05 080e 	add.w	r8, r5, lr
 800aa74:	4404      	add	r4, r0
      for (count = num_cols; count > 0; count--) {
 800aa76:	4545      	cmp	r5, r8
 800aa78:	d104      	bne.n	800aa84 <null_convert+0x3a>
    for (ci = 0; ci < num_components; ci++) {
 800aa7a:	3001      	adds	r0, #1
 800aa7c:	42b8      	cmp	r0, r7
 800aa7e:	dbf2      	blt.n	800aa66 <null_convert+0x1c>
	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
	outptr += num_components;
      }
    }
    input_row++;
    output_buf++;
 800aa80:	3304      	adds	r3, #4
 800aa82:	e7ea      	b.n	800aa5a <null_convert+0x10>
	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
 800aa84:	f815 9b01 	ldrb.w	r9, [r5], #1
 800aa88:	f884 9000 	strb.w	r9, [r4]
	outptr += num_components;
 800aa8c:	443c      	add	r4, r7
      for (count = num_cols; count > 0; count--) {
 800aa8e:	e7f2      	b.n	800aa76 <null_convert+0x2c>
  }
}
 800aa90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800aa94 <gray_rgb_convert>:

METHODDEF(void)
gray_rgb_convert (j_decompress_ptr cinfo,
		  JSAMPIMAGE input_buf, JDIMENSION input_row,
		  JSAMPARRAY output_buf, int num_rows)
{
 800aa94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa96:	9d05      	ldr	r5, [sp, #20]
 800aa98:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW inptr, outptr;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800aa9c:	6f07      	ldr	r7, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 800aa9e:	3d01      	subs	r5, #1
 800aaa0:	d500      	bpl.n	800aaa4 <gray_rgb_convert+0x10>
      /* We can dispense with GETJSAMPLE() here */
      outptr[RGB_RED] = outptr[RGB_GREEN] = outptr[RGB_BLUE] = inptr[col];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800aaa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inptr = input_buf[0][input_row++];
 800aaa4:	6808      	ldr	r0, [r1, #0]
 800aaa6:	181c      	adds	r4, r3, r0
    for (col = 0; col < num_cols; col++) {
 800aaa8:	f853 0b04 	ldr.w	r0, [r3], #4
 800aaac:	58a4      	ldr	r4, [r4, r2]
 800aaae:	eb04 0c07 	add.w	ip, r4, r7
 800aab2:	4564      	cmp	r4, ip
 800aab4:	f100 0003 	add.w	r0, r0, #3
 800aab8:	d0f1      	beq.n	800aa9e <gray_rgb_convert+0xa>
      outptr[RGB_RED] = outptr[RGB_GREEN] = outptr[RGB_BLUE] = inptr[col];
 800aaba:	f814 6b01 	ldrb.w	r6, [r4], #1
 800aabe:	f800 6c03 	strb.w	r6, [r0, #-3]
 800aac2:	f800 6c02 	strb.w	r6, [r0, #-2]
 800aac6:	f800 6c01 	strb.w	r6, [r0, #-1]
    for (col = 0; col < num_cols; col++) {
 800aaca:	e7f2      	b.n	800aab2 <gray_rgb_convert+0x1e>

0800aacc <ycck_cmyk_convert>:

METHODDEF(void)
ycck_cmyk_convert (j_decompress_ptr cinfo,
		   JSAMPIMAGE input_buf, JDIMENSION input_row,
		   JSAMPARRAY output_buf, int num_rows)
{
 800aacc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800aad0:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
{
 800aad4:	b087      	sub	sp, #28
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2, inptr3;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800aad6:	6f05      	ldr	r5, [r0, #112]	; 0x70
 800aad8:	ebc3 0882 	rsb	r8, r3, r2, lsl #2
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800aadc:	f8d0 614c 	ldr.w	r6, [r0, #332]	; 0x14c
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
 800aae0:	f8d4 e014 	ldr.w	lr, [r4, #20]
  JDIMENSION num_cols = cinfo->output_width;
 800aae4:	9500      	str	r5, [sp, #0]
  register int * Cbbtab = cconvert->Cb_b_tab;
 800aae6:	e9d4 c002 	ldrd	ip, r0, [r4, #8]
 800aaea:	9001      	str	r0, [sp, #4]
  register INT32 * Crgtab = cconvert->Cr_g_tab;
 800aaec:	6920      	ldr	r0, [r4, #16]
 800aaee:	9002      	str	r0, [sp, #8]
  SHIFT_TEMPS

  while (--num_rows >= 0) {
 800aaf0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aaf2:	3a01      	subs	r2, #1
 800aaf4:	9210      	str	r2, [sp, #64]	; 0x40
 800aaf6:	d502      	bpl.n	800aafe <ycck_cmyk_convert+0x32>
      /* K passes through unchanged */
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
      outptr += 4;
    }
  }
}
 800aaf8:	b007      	add	sp, #28
 800aafa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800aafe:	eb03 0008 	add.w	r0, r3, r8
 800ab02:	680a      	ldr	r2, [r1, #0]
 800ab04:	f853 5b04 	ldr.w	r5, [r3], #4
 800ab08:	5812      	ldr	r2, [r2, r0]
 800ab0a:	9203      	str	r2, [sp, #12]
    inptr1 = input_buf[1][input_row];
 800ab0c:	684a      	ldr	r2, [r1, #4]
 800ab0e:	5812      	ldr	r2, [r2, r0]
 800ab10:	9204      	str	r2, [sp, #16]
    inptr2 = input_buf[2][input_row];
 800ab12:	688a      	ldr	r2, [r1, #8]
 800ab14:	f852 9000 	ldr.w	r9, [r2, r0]
    inptr3 = input_buf[3][input_row];
 800ab18:	68ca      	ldr	r2, [r1, #12]
 800ab1a:	f852 a000 	ldr.w	sl, [r2, r0]
    for (col = 0; col < num_cols; col++) {
 800ab1e:	2200      	movs	r2, #0
 800ab20:	9800      	ldr	r0, [sp, #0]
 800ab22:	3504      	adds	r5, #4
 800ab24:	4282      	cmp	r2, r0
 800ab26:	d0e3      	beq.n	800aaf0 <ycck_cmyk_convert+0x24>
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800ab28:	f819 7002 	ldrb.w	r7, [r9, r2]
      cb = GETJSAMPLE(inptr1[col]);
 800ab2c:	9c04      	ldr	r4, [sp, #16]
      y  = GETJSAMPLE(inptr0[col]);
 800ab2e:	9803      	ldr	r0, [sp, #12]
      cb = GETJSAMPLE(inptr1[col]);
 800ab30:	f814 b002 	ldrb.w	fp, [r4, r2]
      y  = GETJSAMPLE(inptr0[col]);
 800ab34:	5c80      	ldrb	r0, [r0, r2]
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800ab36:	f85c 4027 	ldr.w	r4, [ip, r7, lsl #2]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800ab3a:	fa0f fb8b 	sxth.w	fp, fp
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800ab3e:	4404      	add	r4, r0
 800ab40:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
 800ab44:	5d34      	ldrb	r4, [r6, r4]
 800ab46:	f805 4c04 	strb.w	r4, [r5, #-4]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800ab4a:	f85e 402b 	ldr.w	r4, [lr, fp, lsl #2]
 800ab4e:	9405      	str	r4, [sp, #20]
 800ab50:	9c02      	ldr	r4, [sp, #8]
 800ab52:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 800ab56:	9c05      	ldr	r4, [sp, #20]
 800ab58:	443c      	add	r4, r7
      outptr[1] = range_limit[MAXJSAMPLE - (y +			/* green */
 800ab5a:	eb00 4424 	add.w	r4, r0, r4, asr #16
 800ab5e:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
 800ab62:	5d34      	ldrb	r4, [r6, r4]
 800ab64:	f805 4c03 	strb.w	r4, [r5, #-3]
      outptr[2] = range_limit[MAXJSAMPLE - (y + Cbbtab[cb])];	/* blue */
 800ab68:	9c01      	ldr	r4, [sp, #4]
 800ab6a:	f854 402b 	ldr.w	r4, [r4, fp, lsl #2]
 800ab6e:	4420      	add	r0, r4
 800ab70:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800ab74:	5c30      	ldrb	r0, [r6, r0]
 800ab76:	f805 0c02 	strb.w	r0, [r5, #-2]
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
 800ab7a:	f81a 0002 	ldrb.w	r0, [sl, r2]
    for (col = 0; col < num_cols; col++) {
 800ab7e:	3201      	adds	r2, #1
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
 800ab80:	f805 0c01 	strb.w	r0, [r5, #-1]
    for (col = 0; col < num_cols; col++) {
 800ab84:	e7cc      	b.n	800ab20 <ycck_cmyk_convert+0x54>

0800ab86 <start_pass_dcolor>:

METHODDEF(void)
start_pass_dcolor (j_decompress_ptr cinfo)
{
  /* no work needed */
}
 800ab86:	4770      	bx	lr

0800ab88 <grayscale_convert>:
{
 800ab88:	b513      	push	{r0, r1, r4, lr}
 800ab8a:	460c      	mov	r4, r1
 800ab8c:	4611      	mov	r1, r2
 800ab8e:	461a      	mov	r2, r3
  jcopy_sample_rows(input_buf[0], (int) input_row, output_buf, 0,
 800ab90:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800ab92:	6820      	ldr	r0, [r4, #0]
 800ab94:	9301      	str	r3, [sp, #4]
 800ab96:	9b04      	ldr	r3, [sp, #16]
 800ab98:	9300      	str	r3, [sp, #0]
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	f00b fae3 	bl	8016166 <jcopy_sample_rows>
}
 800aba0:	b002      	add	sp, #8
 800aba2:	bd10      	pop	{r4, pc}

0800aba4 <jinit_color_deconverter>:
{
  my_cconvert_ptr cconvert;
  int ci;

  cconvert = (my_cconvert_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800aba4:	6843      	ldr	r3, [r0, #4]
 800aba6:	221c      	movs	r2, #28
 800aba8:	2101      	movs	r1, #1
 800abaa:	681b      	ldr	r3, [r3, #0]
{
 800abac:	b570      	push	{r4, r5, r6, lr}
 800abae:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800abb0:	4798      	blx	r3
				SIZEOF(my_color_deconverter));
  cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
  cconvert->pub.start_pass = start_pass_dcolor;
 800abb2:	4b4a      	ldr	r3, [pc, #296]	; (800acdc <jinit_color_deconverter+0x138>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800abb4:	4605      	mov	r5, r0
  cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
 800abb6:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
  cconvert->pub.start_pass = start_pass_dcolor;
 800abba:	6003      	str	r3, [r0, #0]

  /* Make sure num_components agrees with jpeg_color_space */
  switch (cinfo->jpeg_color_space) {
 800abbc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800abc0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800abc2:	2b03      	cmp	r3, #3
 800abc4:	d821      	bhi.n	800ac0a <jinit_color_deconverter+0x66>
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d82d      	bhi.n	800ac26 <jinit_color_deconverter+0x82>
 800abca:	d023      	beq.n	800ac14 <jinit_color_deconverter+0x70>
    if (cinfo->num_components != 4)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;

  default:			/* JCS_UNKNOWN can be anything */
    if (cinfo->num_components < 1)
 800abcc:	2a00      	cmp	r2, #0
 800abce:	dd23      	ble.n	800ac18 <jinit_color_deconverter+0x74>
  /* Set out_color_components and conversion method based on requested space.
   * Also clear the component_needed flags for any unused components,
   * so that earlier pipeline stages can avoid useless computation.
   */

  switch (cinfo->out_color_space) {
 800abd0:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
 800abd4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800abd8:	2902      	cmp	r1, #2
 800abda:	d055      	beq.n	800ac88 <jinit_color_deconverter+0xe4>
 800abdc:	2904      	cmp	r1, #4
 800abde:	d066      	beq.n	800acae <jinit_color_deconverter+0x10a>
 800abe0:	2901      	cmp	r1, #1
 800abe2:	d16d      	bne.n	800acc0 <jinit_color_deconverter+0x11c>
  case JCS_GRAYSCALE:
    cinfo->out_color_components = 1;
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800abe4:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
    cinfo->out_color_components = 1;
 800abe8:	67a1      	str	r1, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800abea:	2a01      	cmp	r2, #1
 800abec:	d124      	bne.n	800ac38 <jinit_color_deconverter+0x94>
	cinfo->jpeg_color_space == JCS_YCbCr) {
      cconvert->pub.color_convert = grayscale_convert;
 800abee:	4b3c      	ldr	r3, [pc, #240]	; (800ace0 <jinit_color_deconverter+0x13c>)
      /* For color->grayscale conversion, only the Y (0) component is needed */
      for (ci = 1; ci < cinfo->num_components; ci++)
	cinfo->comp_info[ci].component_needed = FALSE;
 800abf0:	2058      	movs	r0, #88	; 0x58
      for (ci = 1; ci < cinfo->num_components; ci++)
 800abf2:	6a61      	ldr	r1, [r4, #36]	; 0x24
      cconvert->pub.color_convert = grayscale_convert;
 800abf4:	606b      	str	r3, [r5, #4]
      for (ci = 1; ci < cinfo->num_components; ci++)
 800abf6:	4613      	mov	r3, r2
	cinfo->comp_info[ci].component_needed = FALSE;
 800abf8:	2500      	movs	r5, #0
      for (ci = 1; ci < cinfo->num_components; ci++)
 800abfa:	4299      	cmp	r1, r3
 800abfc:	dc15      	bgt.n	800ac2a <jinit_color_deconverter+0x86>
    } else			/* unsupported non-null conversion */
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;
  }

  if (cinfo->quantize_colors)
 800abfe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d169      	bne.n	800acd8 <jinit_color_deconverter+0x134>
    cinfo->output_components = 1; /* single colormapped output component */
  else
    cinfo->output_components = cinfo->out_color_components;
 800ac04:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ac06:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 800ac08:	bd70      	pop	{r4, r5, r6, pc}
  switch (cinfo->jpeg_color_space) {
 800ac0a:	3b04      	subs	r3, #4
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	d8dd      	bhi.n	800abcc <jinit_color_deconverter+0x28>
    if (cinfo->num_components != 4)
 800ac10:	2a04      	cmp	r2, #4
 800ac12:	e000      	b.n	800ac16 <jinit_color_deconverter+0x72>
    if (cinfo->num_components != 1)
 800ac14:	2a01      	cmp	r2, #1
    if (cinfo->num_components != 4)
 800ac16:	d0db      	beq.n	800abd0 <jinit_color_deconverter+0x2c>
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 800ac18:	6823      	ldr	r3, [r4, #0]
 800ac1a:	220b      	movs	r2, #11
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	615a      	str	r2, [r3, #20]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	4798      	blx	r3
 800ac24:	e7d4      	b.n	800abd0 <jinit_color_deconverter+0x2c>
    if (cinfo->num_components != 3)
 800ac26:	2a03      	cmp	r2, #3
 800ac28:	e7f5      	b.n	800ac16 <jinit_color_deconverter+0x72>
	cinfo->comp_info[ci].component_needed = FALSE;
 800ac2a:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
 800ac2e:	fb00 2203 	mla	r2, r0, r3, r2
      for (ci = 1; ci < cinfo->num_components; ci++)
 800ac32:	3301      	adds	r3, #1
	cinfo->comp_info[ci].component_needed = FALSE;
 800ac34:	6355      	str	r5, [r2, #52]	; 0x34
      for (ci = 1; ci < cinfo->num_components; ci++)
 800ac36:	e7e0      	b.n	800abfa <jinit_color_deconverter+0x56>
    } else if (cinfo->jpeg_color_space == JCS_RGB) {
 800ac38:	2b02      	cmp	r3, #2
 800ac3a:	d146      	bne.n	800acca <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = rgb_gray_convert;
 800ac3c:	4b29      	ldr	r3, [pc, #164]	; (800ace4 <jinit_color_deconverter+0x140>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ac3e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800ac42:	4620      	mov	r0, r4
    rgb_y_tab[i+R_Y_OFF] = FIX(0.29900) * i;
 800ac44:	f644 468b 	movw	r6, #19595	; 0x4c8b
      cconvert->pub.color_convert = rgb_gray_convert;
 800ac48:	606b      	str	r3, [r5, #4]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ac4a:	6863      	ldr	r3, [r4, #4]
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800ac4c:	f8d4 51dc 	ldr.w	r5, [r4, #476]	; 0x1dc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	4798      	blx	r3
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800ac54:	2300      	movs	r3, #0
  cconvert->rgb_y_tab = rgb_y_tab = (INT32 *)
 800ac56:	61a8      	str	r0, [r5, #24]
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800ac58:	f641 512f 	movw	r1, #7471	; 0x1d2f
 800ac5c:	3804      	subs	r0, #4
    rgb_y_tab[i+G_Y_OFF] = FIX(0.58700) * i;
 800ac5e:	f249 6546 	movw	r5, #38470	; 0x9646
    rgb_y_tab[i+R_Y_OFF] = FIX(0.29900) * i;
 800ac62:	fb06 f203 	mul.w	r2, r6, r3
 800ac66:	f840 2f04 	str.w	r2, [r0, #4]!
    rgb_y_tab[i+G_Y_OFF] = FIX(0.58700) * i;
 800ac6a:	fb05 f203 	mul.w	r2, r5, r3
 800ac6e:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800ac72:	fb01 f203 	mul.w	r2, r1, r3
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800ac76:	3301      	adds	r3, #1
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800ac78:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800ac7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800ac80:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800ac84:	d1ed      	bne.n	800ac62 <jinit_color_deconverter+0xbe>
 800ac86:	e7ba      	b.n	800abfe <jinit_color_deconverter+0x5a>
    cinfo->out_color_components = RGB_PIXELSIZE;
 800ac88:	2203      	movs	r2, #3
    if (cinfo->jpeg_color_space == JCS_YCbCr) {
 800ac8a:	4293      	cmp	r3, r2
    cinfo->out_color_components = RGB_PIXELSIZE;
 800ac8c:	67a2      	str	r2, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_YCbCr) {
 800ac8e:	d105      	bne.n	800ac9c <jinit_color_deconverter+0xf8>
      cconvert->pub.color_convert = ycc_rgb_convert;
 800ac90:	4b15      	ldr	r3, [pc, #84]	; (800ace8 <jinit_color_deconverter+0x144>)
      build_ycc_rgb_table(cinfo);
 800ac92:	4620      	mov	r0, r4
      cconvert->pub.color_convert = ycck_cmyk_convert;
 800ac94:	606b      	str	r3, [r5, #4]
      build_ycc_rgb_table(cinfo);
 800ac96:	f7ff fdcf 	bl	800a838 <build_ycc_rgb_table>
 800ac9a:	e7b0      	b.n	800abfe <jinit_color_deconverter+0x5a>
    } else if (cinfo->jpeg_color_space == JCS_GRAYSCALE) {
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d102      	bne.n	800aca6 <jinit_color_deconverter+0x102>
      cconvert->pub.color_convert = gray_rgb_convert;
 800aca0:	4b12      	ldr	r3, [pc, #72]	; (800acec <jinit_color_deconverter+0x148>)
      cconvert->pub.color_convert = null_convert;
 800aca2:	606b      	str	r3, [r5, #4]
 800aca4:	e7ab      	b.n	800abfe <jinit_color_deconverter+0x5a>
    } else if (cinfo->jpeg_color_space == JCS_RGB) {
 800aca6:	2b02      	cmp	r3, #2
 800aca8:	d10f      	bne.n	800acca <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = rgb_convert;
 800acaa:	4b11      	ldr	r3, [pc, #68]	; (800acf0 <jinit_color_deconverter+0x14c>)
 800acac:	e7f9      	b.n	800aca2 <jinit_color_deconverter+0xfe>
    if (cinfo->jpeg_color_space == JCS_YCCK) {
 800acae:	2b05      	cmp	r3, #5
    cinfo->out_color_components = 4;
 800acb0:	67a1      	str	r1, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_YCCK) {
 800acb2:	d101      	bne.n	800acb8 <jinit_color_deconverter+0x114>
      cconvert->pub.color_convert = ycck_cmyk_convert;
 800acb4:	4b0f      	ldr	r3, [pc, #60]	; (800acf4 <jinit_color_deconverter+0x150>)
 800acb6:	e7ec      	b.n	800ac92 <jinit_color_deconverter+0xee>
    } else if (cinfo->jpeg_color_space == JCS_CMYK) {
 800acb8:	2b04      	cmp	r3, #4
 800acba:	d106      	bne.n	800acca <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = null_convert;
 800acbc:	4b0e      	ldr	r3, [pc, #56]	; (800acf8 <jinit_color_deconverter+0x154>)
 800acbe:	e7f0      	b.n	800aca2 <jinit_color_deconverter+0xfe>
    if (cinfo->out_color_space == cinfo->jpeg_color_space) {
 800acc0:	4299      	cmp	r1, r3
 800acc2:	d102      	bne.n	800acca <jinit_color_deconverter+0x126>
      cinfo->out_color_components = cinfo->num_components;
 800acc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800acc6:	67a3      	str	r3, [r4, #120]	; 0x78
 800acc8:	e7f8      	b.n	800acbc <jinit_color_deconverter+0x118>
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 800acca:	6823      	ldr	r3, [r4, #0]
 800accc:	221c      	movs	r2, #28
 800acce:	4620      	mov	r0, r4
 800acd0:	615a      	str	r2, [r3, #20]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	4798      	blx	r3
 800acd6:	e792      	b.n	800abfe <jinit_color_deconverter+0x5a>
    cinfo->output_components = 1; /* single colormapped output component */
 800acd8:	2301      	movs	r3, #1
 800acda:	e794      	b.n	800ac06 <jinit_color_deconverter+0x62>
 800acdc:	0800ab87 	.word	0x0800ab87
 800ace0:	0800ab89 	.word	0x0800ab89
 800ace4:	0800a995 	.word	0x0800a995
 800ace8:	0800a8f5 	.word	0x0800a8f5
 800acec:	0800aa95 	.word	0x0800aa95
 800acf0:	0800a9fb 	.word	0x0800a9fb
 800acf4:	0800aacd 	.word	0x0800aacd
 800acf8:	0800aa4b 	.word	0x0800aa4b

0800acfc <start_pass>:
 * a matching multiplier table.
 */

METHODDEF(void)
start_pass (j_decompress_ptr cinfo)
{
 800acfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad00:	f8d0 31d4 	ldr.w	r3, [r0, #468]	; 0x1d4
  my_idct_ptr idct = (my_idct_ptr) cinfo->idct;
  int ci, i;
  jpeg_component_info *compptr;
  int method = 0;
  inverse_DCT_method_ptr method_ptr = NULL;
 800ad04:	2500      	movs	r5, #0
{
 800ad06:	4682      	mov	sl, r0
  JQUANT_TBL * qtbl;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ad08:	f8d0 b0d8 	ldr.w	fp, [r0, #216]	; 0xd8
 800ad0c:	f103 0804 	add.w	r8, r3, #4
  int method = 0;
 800ad10:	462c      	mov	r4, r5
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ad12:	46a9      	mov	r9, r5
{
 800ad14:	ed2d 8b04 	vpush	{d8-d9}
 800ad18:	b087      	sub	sp, #28
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ad1a:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800ad1e:	454b      	cmp	r3, r9
 800ad20:	dc04      	bgt.n	800ad2c <start_pass+0x30>
    default:
      ERREXIT(cinfo, JERR_NOT_COMPILED);
      break;
    }
  }
}
 800ad22:	b007      	add	sp, #28
 800ad24:	ecbd 8b04 	vpop	{d8-d9}
 800ad28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800ad2c:	e9db 1209 	ldrd	r1, r2, [fp, #36]	; 0x24
 800ad30:	f240 700e 	movw	r0, #1806	; 0x70e
 800ad34:	eb02 2301 	add.w	r3, r2, r1, lsl #8
 800ad38:	4283      	cmp	r3, r0
 800ad3a:	f000 80dc 	beq.w	800aef6 <start_pass+0x1fa>
 800ad3e:	dc5b      	bgt.n	800adf8 <start_pass+0xfc>
 800ad40:	f240 4004 	movw	r0, #1028	; 0x404
 800ad44:	4283      	cmp	r3, r0
 800ad46:	f000 80d9 	beq.w	800aefc <start_pass+0x200>
 800ad4a:	dc30      	bgt.n	800adae <start_pass+0xb2>
 800ad4c:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 800ad50:	f000 80d6 	beq.w	800af00 <start_pass+0x204>
 800ad54:	dc1b      	bgt.n	800ad8e <start_pass+0x92>
 800ad56:	f240 2001 	movw	r0, #513	; 0x201
 800ad5a:	4283      	cmp	r3, r0
 800ad5c:	f000 80d2 	beq.w	800af04 <start_pass+0x208>
 800ad60:	dc0f      	bgt.n	800ad82 <start_pass+0x86>
 800ad62:	f240 1001 	movw	r0, #257	; 0x101
 800ad66:	4283      	cmp	r3, r0
 800ad68:	f000 80ce 	beq.w	800af08 <start_pass+0x20c>
 800ad6c:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800ad70:	f000 80cc 	beq.w	800af0c <start_pass+0x210>
      ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 800ad74:	f8da 3000 	ldr.w	r3, [sl]
 800ad78:	2007      	movs	r0, #7
 800ad7a:	61da      	str	r2, [r3, #28]
 800ad7c:	e9c3 0105 	strd	r0, r1, [r3, #20]
 800ad80:	e0b5      	b.n	800aeee <start_pass+0x1f2>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800ad82:	f240 2002 	movw	r0, #514	; 0x202
 800ad86:	4283      	cmp	r3, r0
 800ad88:	d1f4      	bne.n	800ad74 <start_pass+0x78>
 800ad8a:	4da0      	ldr	r5, [pc, #640]	; (800b00c <start_pass+0x310>)
 800ad8c:	e0b4      	b.n	800aef8 <start_pass+0x1fc>
 800ad8e:	f240 3006 	movw	r0, #774	; 0x306
 800ad92:	4283      	cmp	r3, r0
 800ad94:	f000 80bc 	beq.w	800af10 <start_pass+0x214>
 800ad98:	f240 4002 	movw	r0, #1026	; 0x402
 800ad9c:	4283      	cmp	r3, r0
 800ad9e:	f000 80b9 	beq.w	800af14 <start_pass+0x218>
 800ada2:	f240 3003 	movw	r0, #771	; 0x303
 800ada6:	4283      	cmp	r3, r0
 800ada8:	d1e4      	bne.n	800ad74 <start_pass+0x78>
      method_ptr = jpeg_idct_3x3;
 800adaa:	4d99      	ldr	r5, [pc, #612]	; (800b010 <start_pass+0x314>)
 800adac:	e0a4      	b.n	800aef8 <start_pass+0x1fc>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800adae:	f240 6003 	movw	r0, #1539	; 0x603
 800adb2:	4283      	cmp	r3, r0
 800adb4:	f000 80b0 	beq.w	800af18 <start_pass+0x21c>
 800adb8:	dc0e      	bgt.n	800add8 <start_pass+0xdc>
 800adba:	f240 5005 	movw	r0, #1285	; 0x505
 800adbe:	4283      	cmp	r3, r0
 800adc0:	f000 80ac 	beq.w	800af1c <start_pass+0x220>
 800adc4:	f240 500a 	movw	r0, #1290	; 0x50a
 800adc8:	4283      	cmp	r3, r0
 800adca:	f000 80a9 	beq.w	800af20 <start_pass+0x224>
 800adce:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 800add2:	d1cf      	bne.n	800ad74 <start_pass+0x78>
      method_ptr = jpeg_idct_4x8;
 800add4:	4d8f      	ldr	r5, [pc, #572]	; (800b014 <start_pass+0x318>)
 800add6:	e08f      	b.n	800aef8 <start_pass+0x1fc>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800add8:	f240 600c 	movw	r0, #1548	; 0x60c
 800addc:	4283      	cmp	r3, r0
 800adde:	f000 80a1 	beq.w	800af24 <start_pass+0x228>
 800ade2:	f240 7007 	movw	r0, #1799	; 0x707
 800ade6:	4283      	cmp	r3, r0
 800ade8:	f000 809e 	beq.w	800af28 <start_pass+0x22c>
 800adec:	f240 6006 	movw	r0, #1542	; 0x606
 800adf0:	4283      	cmp	r3, r0
 800adf2:	d1bf      	bne.n	800ad74 <start_pass+0x78>
      method_ptr = jpeg_idct_6x6;
 800adf4:	4d88      	ldr	r5, [pc, #544]	; (800b018 <start_pass+0x31c>)
 800adf6:	e07f      	b.n	800aef8 <start_pass+0x1fc>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800adf8:	f640 4006 	movw	r0, #3078	; 0xc06
 800adfc:	4283      	cmp	r3, r0
 800adfe:	f000 8095 	beq.w	800af2c <start_pass+0x230>
 800ae02:	dc22      	bgt.n	800ae4a <start_pass+0x14e>
 800ae04:	f640 1009 	movw	r0, #2313	; 0x909
 800ae08:	4283      	cmp	r3, r0
 800ae0a:	f000 8091 	beq.w	800af30 <start_pass+0x234>
 800ae0e:	dc0d      	bgt.n	800ae2c <start_pass+0x130>
 800ae10:	f640 0008 	movw	r0, #2056	; 0x808
 800ae14:	4283      	cmp	r3, r0
 800ae16:	d03a      	beq.n	800ae8e <start_pass+0x192>
 800ae18:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 800ae1c:	f000 808a 	beq.w	800af34 <start_pass+0x238>
 800ae20:	f640 0004 	movw	r0, #2052	; 0x804
 800ae24:	4283      	cmp	r3, r0
 800ae26:	d1a5      	bne.n	800ad74 <start_pass+0x78>
      method_ptr = jpeg_idct_8x4;
 800ae28:	4d7c      	ldr	r5, [pc, #496]	; (800b01c <start_pass+0x320>)
 800ae2a:	e065      	b.n	800aef8 <start_pass+0x1fc>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800ae2c:	f640 200a 	movw	r0, #2570	; 0xa0a
 800ae30:	4283      	cmp	r3, r0
 800ae32:	f000 8081 	beq.w	800af38 <start_pass+0x23c>
 800ae36:	f640 300b 	movw	r0, #2827	; 0xb0b
 800ae3a:	4283      	cmp	r3, r0
 800ae3c:	d07e      	beq.n	800af3c <start_pass+0x240>
 800ae3e:	f640 2005 	movw	r0, #2565	; 0xa05
 800ae42:	4283      	cmp	r3, r0
 800ae44:	d196      	bne.n	800ad74 <start_pass+0x78>
      method_ptr = jpeg_idct_10x5;
 800ae46:	4d76      	ldr	r5, [pc, #472]	; (800b020 <start_pass+0x324>)
 800ae48:	e056      	b.n	800aef8 <start_pass+0x1fc>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800ae4a:	f640 600e 	movw	r0, #3598	; 0xe0e
 800ae4e:	4283      	cmp	r3, r0
 800ae50:	d076      	beq.n	800af40 <start_pass+0x244>
 800ae52:	dc0d      	bgt.n	800ae70 <start_pass+0x174>
 800ae54:	f640 500d 	movw	r0, #3341	; 0xd0d
 800ae58:	4283      	cmp	r3, r0
 800ae5a:	d073      	beq.n	800af44 <start_pass+0x248>
 800ae5c:	f640 6007 	movw	r0, #3591	; 0xe07
 800ae60:	4283      	cmp	r3, r0
 800ae62:	d071      	beq.n	800af48 <start_pass+0x24c>
 800ae64:	f640 400c 	movw	r0, #3084	; 0xc0c
 800ae68:	4283      	cmp	r3, r0
 800ae6a:	d183      	bne.n	800ad74 <start_pass+0x78>
      method_ptr = jpeg_idct_12x12;
 800ae6c:	4d6d      	ldr	r5, [pc, #436]	; (800b024 <start_pass+0x328>)
 800ae6e:	e043      	b.n	800aef8 <start_pass+0x1fc>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800ae70:	f241 0008 	movw	r0, #4104	; 0x1008
 800ae74:	4283      	cmp	r3, r0
 800ae76:	d069      	beq.n	800af4c <start_pass+0x250>
 800ae78:	f241 0010 	movw	r0, #4112	; 0x1010
 800ae7c:	4283      	cmp	r3, r0
 800ae7e:	d067      	beq.n	800af50 <start_pass+0x254>
 800ae80:	f640 700f 	movw	r0, #3855	; 0xf0f
 800ae84:	4283      	cmp	r3, r0
 800ae86:	f47f af75 	bne.w	800ad74 <start_pass+0x78>
      method_ptr = jpeg_idct_15x15;
 800ae8a:	4d67      	ldr	r5, [pc, #412]	; (800b028 <start_pass+0x32c>)
 800ae8c:	e034      	b.n	800aef8 <start_pass+0x1fc>
      switch (cinfo->dct_method) {
 800ae8e:	f89a 3048 	ldrb.w	r3, [sl, #72]	; 0x48
 800ae92:	2b02      	cmp	r3, #2
 800ae94:	d827      	bhi.n	800aee6 <start_pass+0x1ea>
 800ae96:	461c      	mov	r4, r3
 800ae98:	4b64      	ldr	r3, [pc, #400]	; (800b02c <start_pass+0x330>)
 800ae9a:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
    if (! compptr->component_needed || idct->cur_method[ci] == method)
 800ae9e:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
    idct->pub.inverse_DCT[ci] = method_ptr;
 800aea2:	f848 5b04 	str.w	r5, [r8], #4
    if (! compptr->component_needed || idct->cur_method[ci] == method)
 800aea6:	b1cb      	cbz	r3, 800aedc <start_pass+0x1e0>
 800aea8:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800aeac:	42a3      	cmp	r3, r4
 800aeae:	d015      	beq.n	800aedc <start_pass+0x1e0>
    qtbl = compptr->quant_table;
 800aeb0:	f8db 6050 	ldr.w	r6, [fp, #80]	; 0x50
    if (qtbl == NULL)		/* happens if no data yet for component */
 800aeb4:	b196      	cbz	r6, 800aedc <start_pass+0x1e0>
    switch (method) {
 800aeb6:	2c01      	cmp	r4, #1
    idct->cur_method[ci] = method;
 800aeb8:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
    switch (method) {
 800aebc:	d04a      	beq.n	800af54 <start_pass+0x258>
 800aebe:	2c02      	cmp	r4, #2
 800aec0:	d05a      	beq.n	800af78 <start_pass+0x27c>
 800aec2:	2c00      	cmp	r4, #0
 800aec4:	f040 8099 	bne.w	800affa <start_pass+0x2fe>
	ISLOW_MULT_TYPE * ismtbl = (ISLOW_MULT_TYPE *) compptr->dct_table;
 800aec8:	f8db 2054 	ldr.w	r2, [fp, #84]	; 0x54
	for (i = 0; i < DCTSIZE2; i++) {
 800aecc:	4623      	mov	r3, r4
	  ismtbl[i] = (ISLOW_MULT_TYPE) qtbl->quantval[i];
 800aece:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 800aed2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i = 0; i < DCTSIZE2; i++) {
 800aed6:	3301      	adds	r3, #1
 800aed8:	2b40      	cmp	r3, #64	; 0x40
 800aeda:	d1f8      	bne.n	800aece <start_pass+0x1d2>
       ci++, compptr++) {
 800aedc:	f109 0901 	add.w	r9, r9, #1
 800aee0:	f10b 0b58 	add.w	fp, fp, #88	; 0x58
 800aee4:	e719      	b.n	800ad1a <start_pass+0x1e>
	ERREXIT(cinfo, JERR_NOT_COMPILED);
 800aee6:	f8da 3000 	ldr.w	r3, [sl]
 800aeea:	2231      	movs	r2, #49	; 0x31
 800aeec:	615a      	str	r2, [r3, #20]
      ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	4650      	mov	r0, sl
 800aef2:	4798      	blx	r3
      break;
 800aef4:	e7d3      	b.n	800ae9e <start_pass+0x1a2>
      method_ptr = jpeg_idct_7x14;
 800aef6:	4d4e      	ldr	r5, [pc, #312]	; (800b030 <start_pass+0x334>)
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800aef8:	2400      	movs	r4, #0
 800aefa:	e7d0      	b.n	800ae9e <start_pass+0x1a2>
      method_ptr = jpeg_idct_4x4;
 800aefc:	4d4d      	ldr	r5, [pc, #308]	; (800b034 <start_pass+0x338>)
 800aefe:	e7fb      	b.n	800aef8 <start_pass+0x1fc>
      method_ptr = jpeg_idct_2x4;
 800af00:	4d4d      	ldr	r5, [pc, #308]	; (800b038 <start_pass+0x33c>)
 800af02:	e7f9      	b.n	800aef8 <start_pass+0x1fc>
      method_ptr = jpeg_idct_2x1;
 800af04:	4d4d      	ldr	r5, [pc, #308]	; (800b03c <start_pass+0x340>)
 800af06:	e7f7      	b.n	800aef8 <start_pass+0x1fc>
      method_ptr = jpeg_idct_1x1;
 800af08:	4d4d      	ldr	r5, [pc, #308]	; (800b040 <start_pass+0x344>)
 800af0a:	e7f5      	b.n	800aef8 <start_pass+0x1fc>
      method_ptr = jpeg_idct_1x2;
 800af0c:	4d4d      	ldr	r5, [pc, #308]	; (800b044 <start_pass+0x348>)
 800af0e:	e7f3      	b.n	800aef8 <start_pass+0x1fc>
      method_ptr = jpeg_idct_3x6;
 800af10:	4d4d      	ldr	r5, [pc, #308]	; (800b048 <start_pass+0x34c>)
 800af12:	e7f1      	b.n	800aef8 <start_pass+0x1fc>
      method_ptr = jpeg_idct_4x2;
 800af14:	4d4d      	ldr	r5, [pc, #308]	; (800b04c <start_pass+0x350>)
 800af16:	e7ef      	b.n	800aef8 <start_pass+0x1fc>
      method_ptr = jpeg_idct_6x3;
 800af18:	4d4d      	ldr	r5, [pc, #308]	; (800b050 <start_pass+0x354>)
 800af1a:	e7ed      	b.n	800aef8 <start_pass+0x1fc>
      method_ptr = jpeg_idct_5x5;
 800af1c:	4d4d      	ldr	r5, [pc, #308]	; (800b054 <start_pass+0x358>)
 800af1e:	e7eb      	b.n	800aef8 <start_pass+0x1fc>
      method_ptr = jpeg_idct_5x10;
 800af20:	4d4d      	ldr	r5, [pc, #308]	; (800b058 <start_pass+0x35c>)
 800af22:	e7e9      	b.n	800aef8 <start_pass+0x1fc>
      method_ptr = jpeg_idct_6x12;
 800af24:	4d4d      	ldr	r5, [pc, #308]	; (800b05c <start_pass+0x360>)
 800af26:	e7e7      	b.n	800aef8 <start_pass+0x1fc>
      method_ptr = jpeg_idct_7x7;
 800af28:	4d4d      	ldr	r5, [pc, #308]	; (800b060 <start_pass+0x364>)
 800af2a:	e7e5      	b.n	800aef8 <start_pass+0x1fc>
      method_ptr = jpeg_idct_12x6;
 800af2c:	4d4d      	ldr	r5, [pc, #308]	; (800b064 <start_pass+0x368>)
 800af2e:	e7e3      	b.n	800aef8 <start_pass+0x1fc>
      method_ptr = jpeg_idct_9x9;
 800af30:	4d4d      	ldr	r5, [pc, #308]	; (800b068 <start_pass+0x36c>)
 800af32:	e7e1      	b.n	800aef8 <start_pass+0x1fc>
      method_ptr = jpeg_idct_8x16;
 800af34:	4d4d      	ldr	r5, [pc, #308]	; (800b06c <start_pass+0x370>)
 800af36:	e7df      	b.n	800aef8 <start_pass+0x1fc>
      method_ptr = jpeg_idct_10x10;
 800af38:	4d4d      	ldr	r5, [pc, #308]	; (800b070 <start_pass+0x374>)
 800af3a:	e7dd      	b.n	800aef8 <start_pass+0x1fc>
      method_ptr = jpeg_idct_11x11;
 800af3c:	4d4d      	ldr	r5, [pc, #308]	; (800b074 <start_pass+0x378>)
 800af3e:	e7db      	b.n	800aef8 <start_pass+0x1fc>
      method_ptr = jpeg_idct_14x14;
 800af40:	4d4d      	ldr	r5, [pc, #308]	; (800b078 <start_pass+0x37c>)
 800af42:	e7d9      	b.n	800aef8 <start_pass+0x1fc>
      method_ptr = jpeg_idct_13x13;
 800af44:	4d4d      	ldr	r5, [pc, #308]	; (800b07c <start_pass+0x380>)
 800af46:	e7d7      	b.n	800aef8 <start_pass+0x1fc>
      method_ptr = jpeg_idct_14x7;
 800af48:	4d4d      	ldr	r5, [pc, #308]	; (800b080 <start_pass+0x384>)
 800af4a:	e7d5      	b.n	800aef8 <start_pass+0x1fc>
      method_ptr = jpeg_idct_16x8;
 800af4c:	4d4d      	ldr	r5, [pc, #308]	; (800b084 <start_pass+0x388>)
 800af4e:	e7d3      	b.n	800aef8 <start_pass+0x1fc>
      method_ptr = jpeg_idct_16x16;
 800af50:	4d4d      	ldr	r5, [pc, #308]	; (800b088 <start_pass+0x38c>)
 800af52:	e7d1      	b.n	800aef8 <start_pass+0x1fc>
	IFAST_MULT_TYPE * ifmtbl = (IFAST_MULT_TYPE *) compptr->dct_table;
 800af54:	f8db 0054 	ldr.w	r0, [fp, #84]	; 0x54
	for (i = 0; i < DCTSIZE2; i++) {
 800af58:	2200      	movs	r2, #0
 800af5a:	494c      	ldr	r1, [pc, #304]	; (800b08c <start_pass+0x390>)
	    DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[i],
 800af5c:	f836 7012 	ldrh.w	r7, [r6, r2, lsl #1]
 800af60:	f931 3b02 	ldrsh.w	r3, [r1], #2
 800af64:	437b      	muls	r3, r7
 800af66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af6a:	131b      	asrs	r3, r3, #12
	  ifmtbl[i] = (IFAST_MULT_TYPE)
 800af6c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	for (i = 0; i < DCTSIZE2; i++) {
 800af70:	3201      	adds	r2, #1
 800af72:	2a40      	cmp	r2, #64	; 0x40
 800af74:	d1f2      	bne.n	800af5c <start_pass+0x260>
 800af76:	e7b1      	b.n	800aedc <start_pass+0x1e0>
	FLOAT_MULT_TYPE * fmtbl = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800af78:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
 800af7c:	3610      	adds	r6, #16
	i = 0;
 800af7e:	2700      	movs	r7, #0
	FLOAT_MULT_TYPE * fmtbl = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800af80:	9305      	str	r3, [sp, #20]
 800af82:	4b43      	ldr	r3, [pc, #268]	; (800b090 <start_pass+0x394>)
 800af84:	9304      	str	r3, [sp, #16]
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800af86:	9b04      	ldr	r3, [sp, #16]
 800af88:	ecb3 7b02 	vldmia	r3!, {d7}
 800af8c:	9304      	str	r3, [sp, #16]
 800af8e:	f1a6 0310 	sub.w	r3, r6, #16
 800af92:	eeb0 8a47 	vmov.f32	s16, s14
 800af96:	eef0 8a67 	vmov.f32	s17, s15
 800af9a:	9301      	str	r3, [sp, #4]
 800af9c:	9b05      	ldr	r3, [sp, #20]
 800af9e:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800afa2:	9302      	str	r3, [sp, #8]
 800afa4:	4b3a      	ldr	r3, [pc, #232]	; (800b090 <start_pass+0x394>)
 800afa6:	9303      	str	r3, [sp, #12]
 800afa8:	9b03      	ldr	r3, [sp, #12]
 800afaa:	ecb3 7b02 	vldmia	r3!, {d7}
 800afae:	9303      	str	r3, [sp, #12]
 800afb0:	eeb0 9a47 	vmov.f32	s18, s14
 800afb4:	eef0 9a67 	vmov.f32	s19, s15
	      ((double) qtbl->quantval[i] *
 800afb8:	9b01      	ldr	r3, [sp, #4]
 800afba:	f833 0b02 	ldrh.w	r0, [r3], #2
 800afbe:	9301      	str	r3, [sp, #4]
 800afc0:	f7f5 fab8 	bl	8000534 <__aeabi_ui2d>
 800afc4:	ec53 2b18 	vmov	r2, r3, d8
 800afc8:	f7f5 fb2e 	bl	8000628 <__aeabi_dmul>
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800afcc:	ec53 2b19 	vmov	r2, r3, d9
 800afd0:	f7f5 fb2a 	bl	8000628 <__aeabi_dmul>
 800afd4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800afd8:	2200      	movs	r2, #0
 800afda:	f7f5 fb25 	bl	8000628 <__aeabi_dmul>
	    fmtbl[i] = (FLOAT_MULT_TYPE)
 800afde:	f7f5 fd35 	bl	8000a4c <__aeabi_d2f>
 800afe2:	9b02      	ldr	r3, [sp, #8]
 800afe4:	f843 0b04 	str.w	r0, [r3], #4
 800afe8:	9302      	str	r3, [sp, #8]
	  for (col = 0; col < DCTSIZE; col++) {
 800afea:	9b01      	ldr	r3, [sp, #4]
 800afec:	42b3      	cmp	r3, r6
 800afee:	d1db      	bne.n	800afa8 <start_pass+0x2ac>
 800aff0:	3708      	adds	r7, #8
	for (row = 0; row < DCTSIZE; row++) {
 800aff2:	3610      	adds	r6, #16
 800aff4:	2f40      	cmp	r7, #64	; 0x40
 800aff6:	d1c6      	bne.n	800af86 <start_pass+0x28a>
 800aff8:	e770      	b.n	800aedc <start_pass+0x1e0>
      ERREXIT(cinfo, JERR_NOT_COMPILED);
 800affa:	f8da 3000 	ldr.w	r3, [sl]
 800affe:	2231      	movs	r2, #49	; 0x31
 800b000:	4650      	mov	r0, sl
 800b002:	615a      	str	r2, [r3, #20]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	4798      	blx	r3
      break;
 800b008:	e768      	b.n	800aedc <start_pass+0x1e0>
 800b00a:	bf00      	nop
 800b00c:	080101bd 	.word	0x080101bd
 800b010:	080100c9 	.word	0x080100c9
 800b014:	080140a5 	.word	0x080140a5
 800b018:	0800fc69 	.word	0x0800fc69
 800b01c:	08012fdd 	.word	0x08012fdd
 800b020:	08012d81 	.word	0x08012d81
 800b024:	08010c3d 	.word	0x08010c3d
 800b028:	080118e9 	.word	0x080118e9
 800b02c:	0802aa2c 	.word	0x0802aa2c
 800b030:	08013835 	.word	0x08013835
 800b034:	0800ff9d 	.word	0x0800ff9d
 800b038:	08014415 	.word	0x08014415
 800b03c:	080133f5 	.word	0x080133f5
 800b040:	08010231 	.word	0x08010231
 800b044:	080144e9 	.word	0x080144e9
 800b048:	080142c9 	.word	0x080142c9
 800b04c:	08013325 	.word	0x08013325
 800b050:	080131c9 	.word	0x080131c9
 800b054:	0800fe19 	.word	0x0800fe19
 800b058:	08013e69 	.word	0x08013e69
 800b05c:	08013ba9 	.word	0x08013ba9
 800b060:	0800f9c9 	.word	0x0800f9c9
 800b064:	08012abd 	.word	0x08012abd
 800b068:	08010255 	.word	0x08010255
 800b06c:	0801342d 	.word	0x0801342d
 800b070:	08010531 	.word	0x08010531
 800b074:	08010851 	.word	0x08010851
 800b078:	080114a5 	.word	0x080114a5
 800b07c:	08010fe5 	.word	0x08010fe5
 800b080:	0801273d 	.word	0x0801273d
 800b084:	080122dd 	.word	0x080122dd
 800b088:	08011d7d 	.word	0x08011d7d
 800b08c:	0802aa78 	.word	0x0802aa78
 800b090:	0802aa38 	.word	0x0802aa38

0800b094 <jinit_inverse_dct>:
 * Initialize IDCT manager.
 */

GLOBAL(void)
jinit_inverse_dct (j_decompress_ptr cinfo)
{
 800b094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_idct_ptr idct;
  int ci;
  jpeg_component_info *compptr;

  idct = (my_idct_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b096:	6843      	ldr	r3, [r0, #4]
{
 800b098:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b09a:	2254      	movs	r2, #84	; 0x54
 800b09c:	2101      	movs	r1, #1
 800b09e:	681b      	ldr	r3, [r3, #0]
				SIZEOF(my_idct_controller));
  cinfo->idct = (struct jpeg_inverse_dct *) idct;
  idct->pub.start_pass = start_pass;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b0a0:	2600      	movs	r6, #0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b0a2:	4798      	blx	r3
  idct->pub.start_pass = start_pass;
 800b0a4:	4b0f      	ldr	r3, [pc, #60]	; (800b0e4 <jinit_inverse_dct+0x50>)
 800b0a6:	4604      	mov	r4, r0
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b0a8:	f8d5 70d8 	ldr.w	r7, [r5, #216]	; 0xd8
  cinfo->idct = (struct jpeg_inverse_dct *) idct;
 800b0ac:	f8c5 01d4 	str.w	r0, [r5, #468]	; 0x1d4
  idct->pub.start_pass = start_pass;
 800b0b0:	f844 3b2c 	str.w	r3, [r4], #44
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b0b4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b0b6:	42b3      	cmp	r3, r6
 800b0b8:	dc00      	bgt.n	800b0bc <jinit_inverse_dct+0x28>
				  SIZEOF(multiplier_table));
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
    /* Mark multiplier table not yet set up for any method */
    idct->cur_method[ci] = -1;
  }
}
 800b0ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b0bc:	686b      	ldr	r3, [r5, #4]
 800b0be:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b0c2:	2101      	movs	r1, #1
 800b0c4:	4628      	mov	r0, r5
 800b0c6:	681b      	ldr	r3, [r3, #0]
       ci++, compptr++) {
 800b0c8:	3601      	adds	r6, #1
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b0ca:	4798      	blx	r3
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
 800b0cc:	f44f 7280 	mov.w	r2, #256	; 0x100
    compptr->dct_table =
 800b0d0:	6578      	str	r0, [r7, #84]	; 0x54
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
 800b0d2:	2100      	movs	r1, #0
 800b0d4:	f01c fa26 	bl	8027524 <memset>
    idct->cur_method[ci] = -1;
 800b0d8:	f04f 33ff 	mov.w	r3, #4294967295
       ci++, compptr++) {
 800b0dc:	3758      	adds	r7, #88	; 0x58
    idct->cur_method[ci] = -1;
 800b0de:	f844 3b04 	str.w	r3, [r4], #4
       ci++, compptr++) {
 800b0e2:	e7e7      	b.n	800b0b4 <jinit_inverse_dct+0x20>
 800b0e4:	0800acfd 	.word	0x0800acfd

0800b0e8 <jpeg_fill_bit_buffer>:
LOCAL(boolean)
jpeg_fill_bit_buffer (bitread_working_state * state,
		      register bit_buf_type get_buffer, register int bits_left,
		      int nbits)
/* Load up the bit buffer to a depth of at least nbits */
{
 800b0e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* Copy heavily used state fields into locals (hopefully registers) */
  register const JOCTET * next_input_byte = state->next_input_byte;
  register size_t bytes_in_buffer = state->bytes_in_buffer;
  j_decompress_ptr cinfo = state->cinfo;
 800b0ec:	6905      	ldr	r5, [r0, #16]
{
 800b0ee:	4607      	mov	r7, r0
 800b0f0:	4688      	mov	r8, r1
 800b0f2:	4616      	mov	r6, r2

  /* Attempt to load at least MIN_GET_BITS bits into get_buffer. */
  /* (It is assumed that no request will be for more than that many bits.) */
  /* We fail to do so only if we hit a marker or are forced to suspend. */

  if (cinfo->unread_marker == 0) {	/* cannot advance past a marker */
 800b0f4:	f8d5 b1b4 	ldr.w	fp, [r5, #436]	; 0x1b4
{
 800b0f8:	4699      	mov	r9, r3
  register size_t bytes_in_buffer = state->bytes_in_buffer;
 800b0fa:	e9d0 4a00 	ldrd	r4, sl, [r0]
  if (cinfo->unread_marker == 0) {	/* cannot advance past a marker */
 800b0fe:	f1bb 0f00 	cmp.w	fp, #0
 800b102:	d042      	beq.n	800b18a <jpeg_fill_bit_buffer+0xa2>
  no_more_bytes:
    /* We get here if we've read the marker that terminates the compressed
     * data segment.  There should be enough bits in the buffer register
     * to satisfy the request; if so, no problem.
     */
    if (nbits > bits_left) {
 800b104:	454e      	cmp	r6, r9
 800b106:	da42      	bge.n	800b18e <jpeg_fill_bit_buffer+0xa6>
      /* Uh-oh.  Report corrupted data to user and stuff zeroes into
       * the data stream, so that we can produce some kind of image.
       * We use a nonvolatile flag to ensure that only one warning message
       * appears per data segment.
       */
      if (! ((huff_entropy_ptr) cinfo->entropy)->insufficient_data) {
 800b108:	f8d5 31d0 	ldr.w	r3, [r5, #464]	; 0x1d0
 800b10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b10e:	b95b      	cbnz	r3, 800b128 <jpeg_fill_bit_buffer+0x40>
	WARNMS(cinfo, JWRN_HIT_MARKER);
 800b110:	682b      	ldr	r3, [r5, #0]
 800b112:	2278      	movs	r2, #120	; 0x78
 800b114:	f04f 31ff 	mov.w	r1, #4294967295
 800b118:	4628      	mov	r0, r5
 800b11a:	615a      	str	r2, [r3, #20]
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	4798      	blx	r3
	((huff_entropy_ptr) cinfo->entropy)->insufficient_data = TRUE;
 800b120:	f8d5 31d0 	ldr.w	r3, [r5, #464]	; 0x1d0
 800b124:	2201      	movs	r2, #1
 800b126:	625a      	str	r2, [r3, #36]	; 0x24
      }
      /* Fill the buffer with zero bits */
      get_buffer <<= MIN_GET_BITS - bits_left;
 800b128:	f1c6 0619 	rsb	r6, r6, #25
 800b12c:	fa08 f806 	lsl.w	r8, r8, r6
      bits_left = MIN_GET_BITS;
 800b130:	2619      	movs	r6, #25
 800b132:	e02c      	b.n	800b18e <jpeg_fill_bit_buffer+0xa6>
      if (bytes_in_buffer == 0) {
 800b134:	f1ba 0f00 	cmp.w	sl, #0
 800b138:	d107      	bne.n	800b14a <jpeg_fill_bit_buffer+0x62>
	if (! (*cinfo->src->fill_input_buffer) (cinfo))
 800b13a:	69ab      	ldr	r3, [r5, #24]
 800b13c:	4628      	mov	r0, r5
 800b13e:	68db      	ldr	r3, [r3, #12]
 800b140:	4798      	blx	r3
 800b142:	b350      	cbz	r0, 800b19a <jpeg_fill_bit_buffer+0xb2>
	next_input_byte = cinfo->src->next_input_byte;
 800b144:	69ab      	ldr	r3, [r5, #24]
	bytes_in_buffer = cinfo->src->bytes_in_buffer;
 800b146:	e9d3 4a00 	ldrd	r4, sl, [r3]
      c = GETJOCTET(*next_input_byte++);
 800b14a:	f814 2b01 	ldrb.w	r2, [r4], #1
      bytes_in_buffer--;
 800b14e:	f10a 3aff 	add.w	sl, sl, #4294967295
      if (c == 0xFF) {
 800b152:	2aff      	cmp	r2, #255	; 0xff
 800b154:	d116      	bne.n	800b184 <jpeg_fill_bit_buffer+0x9c>
	  if (bytes_in_buffer == 0) {
 800b156:	f1ba 0f00 	cmp.w	sl, #0
 800b15a:	d109      	bne.n	800b170 <jpeg_fill_bit_buffer+0x88>
	    if (! (*cinfo->src->fill_input_buffer) (cinfo))
 800b15c:	69ab      	ldr	r3, [r5, #24]
 800b15e:	4628      	mov	r0, r5
 800b160:	9201      	str	r2, [sp, #4]
 800b162:	68db      	ldr	r3, [r3, #12]
 800b164:	4798      	blx	r3
 800b166:	b1c0      	cbz	r0, 800b19a <jpeg_fill_bit_buffer+0xb2>
	    next_input_byte = cinfo->src->next_input_byte;
 800b168:	69ab      	ldr	r3, [r5, #24]
 800b16a:	9a01      	ldr	r2, [sp, #4]
	    bytes_in_buffer = cinfo->src->bytes_in_buffer;
 800b16c:	e9d3 4a00 	ldrd	r4, sl, [r3]
	  c = GETJOCTET(*next_input_byte++);
 800b170:	f814 3b01 	ldrb.w	r3, [r4], #1
	  bytes_in_buffer--;
 800b174:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (c == 0xFF);
 800b178:	2bff      	cmp	r3, #255	; 0xff
 800b17a:	d0ec      	beq.n	800b156 <jpeg_fill_bit_buffer+0x6e>
	if (c == 0) {
 800b17c:	b113      	cbz	r3, 800b184 <jpeg_fill_bit_buffer+0x9c>
	  cinfo->unread_marker = c;
 800b17e:	f8c5 31b4 	str.w	r3, [r5, #436]	; 0x1b4
	  goto no_more_bytes;
 800b182:	e7bf      	b.n	800b104 <jpeg_fill_bit_buffer+0x1c>
      get_buffer = (get_buffer << 8) | c;
 800b184:	ea42 2808 	orr.w	r8, r2, r8, lsl #8
      bits_left += 8;
 800b188:	3608      	adds	r6, #8
    while (bits_left < MIN_GET_BITS) {
 800b18a:	2e18      	cmp	r6, #24
 800b18c:	ddd2      	ble.n	800b134 <jpeg_fill_bit_buffer+0x4c>
  state->next_input_byte = next_input_byte;
  state->bytes_in_buffer = bytes_in_buffer;
  state->get_buffer = get_buffer;
  state->bits_left = bits_left;

  return TRUE;
 800b18e:	f04f 0b01 	mov.w	fp, #1
  state->bytes_in_buffer = bytes_in_buffer;
 800b192:	e9c7 4a00 	strd	r4, sl, [r7]
  state->bits_left = bits_left;
 800b196:	e9c7 8602 	strd	r8, r6, [r7, #8]
}
 800b19a:	4658      	mov	r0, fp
 800b19c:	b003      	add	sp, #12
 800b19e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800b1a4 <jpeg_huff_decode>:

LOCAL(int)
jpeg_huff_decode (bitread_working_state * state,
		  register bit_buf_type get_buffer, register int bits_left,
		  d_derived_tbl * htbl, int min_bits)
{
 800b1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1a6:	9d06      	ldr	r5, [sp, #24]
 800b1a8:	4606      	mov	r6, r0
 800b1aa:	468c      	mov	ip, r1
 800b1ac:	4614      	mov	r4, r2
  register INT32 code;

  /* HUFF_DECODE has determined that the code is at least min_bits */
  /* bits long, so fetch that many bits in one swoop. */

  CHECK_BIT_BUFFER(*state, l, return -1);
 800b1ae:	4295      	cmp	r5, r2
{
 800b1b0:	461f      	mov	r7, r3
  CHECK_BIT_BUFFER(*state, l, return -1);
 800b1b2:	dd08      	ble.n	800b1c6 <jpeg_huff_decode+0x22>
 800b1b4:	462b      	mov	r3, r5
 800b1b6:	f7ff ff97 	bl	800b0e8 <jpeg_fill_bit_buffer>
 800b1ba:	b910      	cbnz	r0, 800b1c2 <jpeg_huff_decode+0x1e>
 800b1bc:	f04f 30ff 	mov.w	r0, #4294967295
    WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
    return 0;			/* fake a zero as the safest result */
  }

  return htbl->pub->huffval[ (int) (code + htbl->valoffset[l]) ];
}
 800b1c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CHECK_BIT_BUFFER(*state, l, return -1);
 800b1c2:	e9d6 c402 	ldrd	ip, r4, [r6, #8]
  code = GET_BITS(l);
 800b1c6:	1b62      	subs	r2, r4, r5
 800b1c8:	4b1a      	ldr	r3, [pc, #104]	; (800b234 <jpeg_huff_decode+0x90>)
 800b1ca:	fa4c f002 	asr.w	r0, ip, r2
 800b1ce:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b1d2:	4018      	ands	r0, r3
  while (code > htbl->maxcode[l]) {
 800b1d4:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 800b1d8:	4283      	cmp	r3, r0
 800b1da:	db0d      	blt.n	800b1f8 <jpeg_huff_decode+0x54>
  if (l > 16) {
 800b1dc:	2d10      	cmp	r5, #16
  state->bits_left = bits_left;
 800b1de:	e9c6 c202 	strd	ip, r2, [r6, #8]
  if (l > 16) {
 800b1e2:	dd1e      	ble.n	800b222 <jpeg_huff_decode+0x7e>
    WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
 800b1e4:	6930      	ldr	r0, [r6, #16]
 800b1e6:	2279      	movs	r2, #121	; 0x79
 800b1e8:	f04f 31ff 	mov.w	r1, #4294967295
 800b1ec:	6803      	ldr	r3, [r0, #0]
 800b1ee:	615a      	str	r2, [r3, #20]
 800b1f0:	685b      	ldr	r3, [r3, #4]
 800b1f2:	4798      	blx	r3
    return 0;			/* fake a zero as the safest result */
 800b1f4:	2000      	movs	r0, #0
 800b1f6:	e7e3      	b.n	800b1c0 <jpeg_huff_decode+0x1c>
    CHECK_BIT_BUFFER(*state, 1, return -1);
 800b1f8:	2a00      	cmp	r2, #0
    code <<= 1;
 800b1fa:	ea4f 0440 	mov.w	r4, r0, lsl #1
    CHECK_BIT_BUFFER(*state, 1, return -1);
 800b1fe:	dc08      	bgt.n	800b212 <jpeg_huff_decode+0x6e>
 800b200:	2301      	movs	r3, #1
 800b202:	4661      	mov	r1, ip
 800b204:	4630      	mov	r0, r6
 800b206:	f7ff ff6f 	bl	800b0e8 <jpeg_fill_bit_buffer>
 800b20a:	2800      	cmp	r0, #0
 800b20c:	d0d6      	beq.n	800b1bc <jpeg_huff_decode+0x18>
 800b20e:	e9d6 c202 	ldrd	ip, r2, [r6, #8]
    code |= GET_BITS(1);
 800b212:	3a01      	subs	r2, #1
    l++;
 800b214:	3501      	adds	r5, #1
    code |= GET_BITS(1);
 800b216:	fa4c f002 	asr.w	r0, ip, r2
 800b21a:	f000 0001 	and.w	r0, r0, #1
 800b21e:	4320      	orrs	r0, r4
    l++;
 800b220:	e7d8      	b.n	800b1d4 <jpeg_huff_decode+0x30>
  return htbl->pub->huffval[ (int) (code + htbl->valoffset[l]) ];
 800b222:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b226:	3512      	adds	r5, #18
 800b228:	4418      	add	r0, r3
 800b22a:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 800b22e:	4410      	add	r0, r2
 800b230:	7c40      	ldrb	r0, [r0, #17]
 800b232:	e7c5      	b.n	800b1c0 <jpeg_huff_decode+0x1c>
 800b234:	0802aaf8 	.word	0x0802aaf8

0800b238 <process_restart>:
 * Returns FALSE if must suspend.
 */

LOCAL(boolean)
process_restart (j_decompress_ptr cinfo)
{
 800b238:	b570      	push	{r4, r5, r6, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci;

  /* Throw away any unused bits remaining in bit buffer; */
  /* include any full bytes in next_marker's count of discarded bytes */
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 800b23a:	e9d0 2673 	ldrd	r2, r6, [r0, #460]	; 0x1cc
  entropy->bitstate.bits_left = 0;
 800b23e:	2500      	movs	r5, #0
{
 800b240:	4604      	mov	r4, r0
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 800b242:	68f3      	ldr	r3, [r6, #12]
 800b244:	6991      	ldr	r1, [r2, #24]
 800b246:	2b00      	cmp	r3, #0
 800b248:	bfb8      	it	lt
 800b24a:	3307      	addlt	r3, #7
 800b24c:	eb01 03e3 	add.w	r3, r1, r3, asr #3
 800b250:	6193      	str	r3, [r2, #24]

  /* Advance past the RSTn marker */
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800b252:	6893      	ldr	r3, [r2, #8]
  entropy->bitstate.bits_left = 0;
 800b254:	60f5      	str	r5, [r6, #12]
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800b256:	4798      	blx	r3
 800b258:	b180      	cbz	r0, 800b27c <process_restart+0x44>
    return FALSE;

  /* Re-initialize DC predictions to 0 */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++)
 800b25a:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
 800b25e:	f106 0114 	add.w	r1, r6, #20
 800b262:	462b      	mov	r3, r5
 800b264:	462a      	mov	r2, r5
 800b266:	4298      	cmp	r0, r3
 800b268:	dc09      	bgt.n	800b27e <process_restart+0x46>
    entropy->saved.last_dc_val[ci] = 0;
  /* Re-init EOB run count, too */
  entropy->saved.EOBRUN = 0;

  /* Reset restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800b26a:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
  entropy->saved.EOBRUN = 0;
 800b26e:	6132      	str	r2, [r6, #16]
  entropy->restarts_to_go = cinfo->restart_interval;
 800b270:	62b3      	str	r3, [r6, #40]	; 0x28
  /* Reset out-of-data flag, unless read_restart_marker left us smack up
   * against a marker.  In that case we will end up treating the next data
   * segment as empty, and we can avoid producing bogus output pixels by
   * leaving the flag set.
   */
  if (cinfo->unread_marker == 0)
 800b272:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 800b276:	b903      	cbnz	r3, 800b27a <process_restart+0x42>
    entropy->insufficient_data = FALSE;
 800b278:	6273      	str	r3, [r6, #36]	; 0x24

  return TRUE;
 800b27a:	2001      	movs	r0, #1
}
 800b27c:	bd70      	pop	{r4, r5, r6, pc}
  for (ci = 0; ci < cinfo->comps_in_scan; ci++)
 800b27e:	3301      	adds	r3, #1
    entropy->saved.last_dc_val[ci] = 0;
 800b280:	f841 2b04 	str.w	r2, [r1], #4
  for (ci = 0; ci < cinfo->comps_in_scan; ci++)
 800b284:	e7ef      	b.n	800b266 <process_restart+0x2e>
	...

0800b288 <decode_mcu_DC_first>:
 * or first pass of successive approximation).
 */

METHODDEF(boolean)
decode_mcu_DC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 800b288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int Al = cinfo->Al;
 800b28c:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
{   
 800b290:	b091      	sub	sp, #68	; 0x44
 800b292:	4605      	mov	r5, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800b294:	f8d0 41d0 	ldr.w	r4, [r0, #464]	; 0x1d0
  int Al = cinfo->Al;
 800b298:	9303      	str	r3, [sp, #12]
  savable_state state;
  d_derived_tbl * tbl;
  jpeg_component_info * compptr;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800b29a:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800b29e:	9105      	str	r1, [sp, #20]
  if (cinfo->restart_interval) {
 800b2a0:	b933      	cbnz	r3, 800b2b0 <decode_mcu_DC_first+0x28>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800b2a2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b2a4:	b17e      	cbz	r6, 800b2c6 <decode_mcu_DC_first+0x3e>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800b2a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28

  return TRUE;
 800b2a8:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800b2aa:	3b01      	subs	r3, #1
 800b2ac:	62a3      	str	r3, [r4, #40]	; 0x28
  return TRUE;
 800b2ae:	e007      	b.n	800b2c0 <decode_mcu_DC_first+0x38>
    if (entropy->restarts_to_go == 0)
 800b2b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d1f5      	bne.n	800b2a2 <decode_mcu_DC_first+0x1a>
      if (! process_restart(cinfo))
 800b2b6:	f7ff ffbf 	bl	800b238 <process_restart>
 800b2ba:	2800      	cmp	r0, #0
 800b2bc:	d1f1      	bne.n	800b2a2 <decode_mcu_DC_first+0x1a>
	return FALSE;
 800b2be:	2000      	movs	r0, #0
}
 800b2c0:	b011      	add	sp, #68	; 0x44
 800b2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b2c6:	69ab      	ldr	r3, [r5, #24]
    ASSIGN_STATE(state, entropy->saved);
 800b2c8:	f104 0810 	add.w	r8, r4, #16
 800b2cc:	af0b      	add	r7, sp, #44	; 0x2c
 800b2ce:	f505 79b8 	add.w	r9, r5, #368	; 0x170
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b2d2:	681a      	ldr	r2, [r3, #0]
 800b2d4:	f104 0b10 	add.w	fp, r4, #16
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	9206      	str	r2, [sp, #24]
 800b2dc:	9307      	str	r3, [sp, #28]
	r = GET_BITS(s);
 800b2de:	f8df a118 	ldr.w	sl, [pc, #280]	; 800b3f8 <decode_mcu_DC_first+0x170>
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b2e2:	950a      	str	r5, [sp, #40]	; 0x28
    ASSIGN_STATE(state, entropy->saved);
 800b2e4:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b2e8:	e9d4 ec02 	ldrd	lr, ip, [r4, #8]
    ASSIGN_STATE(state, entropy->saved);
 800b2ec:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800b2ee:	f8d8 3000 	ldr.w	r3, [r8]
 800b2f2:	603b      	str	r3, [r7, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b2f4:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
 800b2f8:	42b3      	cmp	r3, r6
 800b2fa:	dc0d      	bgt.n	800b318 <decode_mcu_DC_first+0x90>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800b2fc:	69ab      	ldr	r3, [r5, #24]
    ASSIGN_STATE(entropy->saved, state);
 800b2fe:	ae0b      	add	r6, sp, #44	; 0x2c
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800b300:	9a06      	ldr	r2, [sp, #24]
    ASSIGN_STATE(entropy->saved, state);
 800b302:	465d      	mov	r5, fp
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800b304:	601a      	str	r2, [r3, #0]
 800b306:	9a07      	ldr	r2, [sp, #28]
 800b308:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800b30a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800b30c:	e9c4 ec02 	strd	lr, ip, [r4, #8]
    ASSIGN_STATE(entropy->saved, state);
 800b310:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b312:	6833      	ldr	r3, [r6, #0]
 800b314:	602b      	str	r3, [r5, #0]
 800b316:	e7c6      	b.n	800b2a6 <decode_mcu_DC_first+0x1e>
      block = MCU_data[blkn];
 800b318:	9b05      	ldr	r3, [sp, #20]
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800b31a:	f1bc 0f07 	cmp.w	ip, #7
      ci = cinfo->MCU_membership[blkn];
 800b31e:	f859 7b04 	ldr.w	r7, [r9], #4
      block = MCU_data[blkn];
 800b322:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800b326:	9304      	str	r3, [sp, #16]
      compptr = cinfo->cur_comp_info[ci];
 800b328:	eb05 0387 	add.w	r3, r5, r7, lsl #2
      tbl = entropy->derived_tbls[compptr->dc_tbl_no];
 800b32c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800b330:	695b      	ldr	r3, [r3, #20]
 800b332:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b336:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800b33a:	dc0c      	bgt.n	800b356 <decode_mcu_DC_first+0xce>
 800b33c:	2300      	movs	r3, #0
 800b33e:	4662      	mov	r2, ip
 800b340:	4671      	mov	r1, lr
 800b342:	a806      	add	r0, sp, #24
 800b344:	f7ff fed0 	bl	800b0e8 <jpeg_fill_bit_buffer>
 800b348:	2800      	cmp	r0, #0
 800b34a:	d0b8      	beq.n	800b2be <decode_mcu_DC_first+0x36>
 800b34c:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800b350:	f1bc 0f07 	cmp.w	ip, #7
 800b354:	dd3e      	ble.n	800b3d4 <decode_mcu_DC_first+0x14c>
 800b356:	f1ac 0308 	sub.w	r3, ip, #8
 800b35a:	fa4e f303 	asr.w	r3, lr, r3
 800b35e:	b2db      	uxtb	r3, r3
 800b360:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800b364:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800b368:	2a00      	cmp	r2, #0
 800b36a:	d042      	beq.n	800b3f2 <decode_mcu_DC_first+0x16a>
 800b36c:	4498      	add	r8, r3
 800b36e:	ebac 0c02 	sub.w	ip, ip, r2
 800b372:	f898 8490 	ldrb.w	r8, [r8, #1168]	; 0x490
      if (s) {
 800b376:	f1b8 0f00 	cmp.w	r8, #0
 800b37a:	d01b      	beq.n	800b3b4 <decode_mcu_DC_first+0x12c>
	CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800b37c:	45e0      	cmp	r8, ip
 800b37e:	dd09      	ble.n	800b394 <decode_mcu_DC_first+0x10c>
 800b380:	4643      	mov	r3, r8
 800b382:	4662      	mov	r2, ip
 800b384:	4671      	mov	r1, lr
 800b386:	a806      	add	r0, sp, #24
 800b388:	f7ff feae 	bl	800b0e8 <jpeg_fill_bit_buffer>
 800b38c:	2800      	cmp	r0, #0
 800b38e:	d096      	beq.n	800b2be <decode_mcu_DC_first+0x36>
 800b390:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	r = GET_BITS(s);
 800b394:	ebac 0c08 	sub.w	ip, ip, r8
 800b398:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
	s = HUFF_EXTEND(r, s);
 800b39c:	f108 38ff 	add.w	r8, r8, #4294967295
	r = GET_BITS(s);
 800b3a0:	fa4e f20c 	asr.w	r2, lr, ip
	s = HUFF_EXTEND(r, s);
 800b3a4:	f85a 3028 	ldr.w	r3, [sl, r8, lsl #2]
	r = GET_BITS(s);
 800b3a8:	400a      	ands	r2, r1
	s = HUFF_EXTEND(r, s);
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	bfac      	ite	ge
 800b3ae:	eba2 0801 	subge.w	r8, r2, r1
 800b3b2:	4690      	movlt	r8, r2
      s += state.last_dc_val[ci];
 800b3b4:	ab10      	add	r3, sp, #64	; 0x40
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b3b6:	3601      	adds	r6, #1
      s += state.last_dc_val[ci];
 800b3b8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
      (*block)[0] = (JCOEF) (s << Al);
 800b3bc:	9b03      	ldr	r3, [sp, #12]
      s += state.last_dc_val[ci];
 800b3be:	f857 0c10 	ldr.w	r0, [r7, #-16]
 800b3c2:	4440      	add	r0, r8
      (*block)[0] = (JCOEF) (s << Al);
 800b3c4:	fa00 f803 	lsl.w	r8, r0, r3
 800b3c8:	9b04      	ldr	r3, [sp, #16]
      state.last_dc_val[ci] = s;
 800b3ca:	f847 0c10 	str.w	r0, [r7, #-16]
      (*block)[0] = (JCOEF) (s << Al);
 800b3ce:	f8a3 8000 	strh.w	r8, [r3]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b3d2:	e78f      	b.n	800b2f4 <decode_mcu_DC_first+0x6c>
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	9300      	str	r3, [sp, #0]
 800b3d8:	4662      	mov	r2, ip
 800b3da:	4643      	mov	r3, r8
 800b3dc:	4671      	mov	r1, lr
 800b3de:	a806      	add	r0, sp, #24
 800b3e0:	f7ff fee0 	bl	800b1a4 <jpeg_huff_decode>
 800b3e4:	f1b0 0800 	subs.w	r8, r0, #0
 800b3e8:	f6ff af69 	blt.w	800b2be <decode_mcu_DC_first+0x36>
 800b3ec:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800b3f0:	e7c1      	b.n	800b376 <decode_mcu_DC_first+0xee>
 800b3f2:	2309      	movs	r3, #9
 800b3f4:	e7ef      	b.n	800b3d6 <decode_mcu_DC_first+0x14e>
 800b3f6:	bf00      	nop
 800b3f8:	0802aaf8 	.word	0x0802aaf8

0800b3fc <decode_mcu_AC_first>:
  JBLOCKROW block;
  BITREAD_STATE_VARS;
  d_derived_tbl * tbl;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800b3fc:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800b400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b404:	4607      	mov	r7, r0
 800b406:	b08d      	sub	sp, #52	; 0x34
 800b408:	460c      	mov	r4, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800b40a:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800b40e:	b933      	cbnz	r3, 800b41e <decode_mcu_AC_first+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800b410:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b412:	b17b      	cbz	r3, 800b434 <decode_mcu_AC_first+0x38>
    /* Completed MCU, so update state */
    entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800b414:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 800b416:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800b418:	3b01      	subs	r3, #1
 800b41a:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800b41c:	e007      	b.n	800b42e <decode_mcu_AC_first+0x32>
    if (entropy->restarts_to_go == 0)
 800b41e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800b420:	2b00      	cmp	r3, #0
 800b422:	d1f5      	bne.n	800b410 <decode_mcu_AC_first+0x14>
      if (! process_restart(cinfo))
 800b424:	f7ff ff08 	bl	800b238 <process_restart>
 800b428:	2800      	cmp	r0, #0
 800b42a:	d1f1      	bne.n	800b410 <decode_mcu_AC_first+0x14>
	return FALSE;
 800b42c:	2000      	movs	r0, #0
}
 800b42e:	b00d      	add	sp, #52	; 0x34
 800b430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    EOBRUN = entropy->saved.EOBRUN;	/* only part of saved state we need */
 800b434:	692e      	ldr	r6, [r5, #16]
    if (EOBRUN > 0)		/* if it's a band of zeroes... */
 800b436:	b116      	cbz	r6, 800b43e <decode_mcu_AC_first+0x42>
      EOBRUN--;			/* ...process it now (we do nothing) */
 800b438:	3e01      	subs	r6, #1
    entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
 800b43a:	612e      	str	r6, [r5, #16]
 800b43c:	e7ea      	b.n	800b414 <decode_mcu_AC_first+0x18>
    Se = cinfo->Se;
 800b43e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
    natural_order = cinfo->natural_order;
 800b442:	f8d7 b1ac 	ldr.w	fp, [r7, #428]	; 0x1ac
    Se = cinfo->Se;
 800b446:	9303      	str	r3, [sp, #12]
    Al = cinfo->Al;
 800b448:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
      tbl = entropy->ac_derived_tbl;
 800b44c:	f8d5 903c 	ldr.w	r9, [r5, #60]	; 0x3c
    Al = cinfo->Al;
 800b450:	9304      	str	r3, [sp, #16]
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b452:	69bb      	ldr	r3, [r7, #24]
      for (k = cinfo->Ss; k <= Se; k++) {
 800b454:	f8d7 8198 	ldr.w	r8, [r7, #408]	; 0x198
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b458:	681a      	ldr	r2, [r3, #0]
 800b45a:	685b      	ldr	r3, [r3, #4]
 800b45c:	9207      	str	r2, [sp, #28]
 800b45e:	9308      	str	r3, [sp, #32]
	  r = GET_BITS(s);
 800b460:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 800b560 <decode_mcu_AC_first+0x164>
      block = MCU_data[0];
 800b464:	6823      	ldr	r3, [r4, #0]
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b466:	970b      	str	r7, [sp, #44]	; 0x2c
      block = MCU_data[0];
 800b468:	9305      	str	r3, [sp, #20]
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b46a:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
      for (k = cinfo->Ss; k <= Se; k++) {
 800b46e:	9b03      	ldr	r3, [sp, #12]
 800b470:	4598      	cmp	r8, r3
 800b472:	dc6c      	bgt.n	800b54e <decode_mcu_AC_first+0x152>
	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 800b474:	2a07      	cmp	r2, #7
 800b476:	dc09      	bgt.n	800b48c <decode_mcu_AC_first+0x90>
 800b478:	2300      	movs	r3, #0
 800b47a:	a807      	add	r0, sp, #28
 800b47c:	f7ff fe34 	bl	800b0e8 <jpeg_fill_bit_buffer>
 800b480:	2800      	cmp	r0, #0
 800b482:	d0d3      	beq.n	800b42c <decode_mcu_AC_first+0x30>
 800b484:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
 800b488:	2a07      	cmp	r2, #7
 800b48a:	dd36      	ble.n	800b4fa <decode_mcu_AC_first+0xfe>
 800b48c:	f1a2 0308 	sub.w	r3, r2, #8
 800b490:	fa41 f303 	asr.w	r3, r1, r3
 800b494:	b2db      	uxtb	r3, r3
 800b496:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800b49a:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800b49e:	b3b8      	cbz	r0, 800b510 <decode_mcu_AC_first+0x114>
 800b4a0:	444b      	add	r3, r9
 800b4a2:	1a12      	subs	r2, r2, r0
 800b4a4:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800b4a8:	f010 040f 	ands.w	r4, r0, #15
	r = s >> 4;
 800b4ac:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800b4b0:	d030      	beq.n	800b514 <decode_mcu_AC_first+0x118>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800b4b2:	42a2      	cmp	r2, r4
	  k += r;
 800b4b4:	4498      	add	r8, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800b4b6:	da07      	bge.n	800b4c8 <decode_mcu_AC_first+0xcc>
 800b4b8:	4623      	mov	r3, r4
 800b4ba:	a807      	add	r0, sp, #28
 800b4bc:	f7ff fe14 	bl	800b0e8 <jpeg_fill_bit_buffer>
 800b4c0:	2800      	cmp	r0, #0
 800b4c2:	d0b3      	beq.n	800b42c <decode_mcu_AC_first+0x30>
 800b4c4:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
	  r = GET_BITS(s);
 800b4c8:	1b12      	subs	r2, r2, r4
 800b4ca:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800b4ce:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800b4d0:	fa41 fc02 	asr.w	ip, r1, r2
	  s = HUFF_EXTEND(r, s);
 800b4d4:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800b4d8:	ea0c 0c03 	and.w	ip, ip, r3
	  s = HUFF_EXTEND(r, s);
 800b4dc:	4560      	cmp	r0, ip
	  (*block)[natural_order[k]] = (JCOEF) (s << Al);
 800b4de:	9804      	ldr	r0, [sp, #16]
	  s = HUFF_EXTEND(r, s);
 800b4e0:	bfa8      	it	ge
 800b4e2:	ebac 0c03 	subge.w	ip, ip, r3
	  (*block)[natural_order[k]] = (JCOEF) (s << Al);
 800b4e6:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 800b4ea:	fa0c fc00 	lsl.w	ip, ip, r0
 800b4ee:	9805      	ldr	r0, [sp, #20]
 800b4f0:	f820 c013 	strh.w	ip, [r0, r3, lsl #1]
      for (k = cinfo->Ss; k <= Se; k++) {
 800b4f4:	f108 0801 	add.w	r8, r8, #1
 800b4f8:	e7b9      	b.n	800b46e <decode_mcu_AC_first+0x72>
	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	9300      	str	r3, [sp, #0]
 800b4fe:	a807      	add	r0, sp, #28
 800b500:	464b      	mov	r3, r9
 800b502:	f7ff fe4f 	bl	800b1a4 <jpeg_huff_decode>
 800b506:	2800      	cmp	r0, #0
 800b508:	db90      	blt.n	800b42c <decode_mcu_AC_first+0x30>
 800b50a:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
 800b50e:	e7cb      	b.n	800b4a8 <decode_mcu_AC_first+0xac>
 800b510:	2309      	movs	r3, #9
 800b512:	e7f3      	b.n	800b4fc <decode_mcu_AC_first+0x100>
	  if (r == 15) {	/* ZRL */
 800b514:	2b0f      	cmp	r3, #15
 800b516:	d102      	bne.n	800b51e <decode_mcu_AC_first+0x122>
	    k += 15;		/* skip 15 zeroes in band */
 800b518:	f108 080f 	add.w	r8, r8, #15
 800b51c:	e7ea      	b.n	800b4f4 <decode_mcu_AC_first+0xf8>
	    EOBRUN = 1 << r;
 800b51e:	2601      	movs	r6, #1
 800b520:	409e      	lsls	r6, r3
	    if (r) {		/* EOBr, r > 0 */
 800b522:	b19b      	cbz	r3, 800b54c <decode_mcu_AC_first+0x150>
	      CHECK_BIT_BUFFER(br_state, r, return FALSE);
 800b524:	429a      	cmp	r2, r3
 800b526:	da09      	bge.n	800b53c <decode_mcu_AC_first+0x140>
 800b528:	a807      	add	r0, sp, #28
 800b52a:	9303      	str	r3, [sp, #12]
 800b52c:	f7ff fddc 	bl	800b0e8 <jpeg_fill_bit_buffer>
 800b530:	2800      	cmp	r0, #0
 800b532:	f43f af7b 	beq.w	800b42c <decode_mcu_AC_first+0x30>
 800b536:	9b03      	ldr	r3, [sp, #12]
 800b538:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
	      r = GET_BITS(r);
 800b53c:	1ad2      	subs	r2, r2, r3
 800b53e:	4808      	ldr	r0, [pc, #32]	; (800b560 <decode_mcu_AC_first+0x164>)
 800b540:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800b544:	fa41 f302 	asr.w	r3, r1, r2
 800b548:	4003      	ands	r3, r0
	      EOBRUN += r;
 800b54a:	441e      	add	r6, r3
	    EOBRUN--;		/* this band is processed at this moment */
 800b54c:	3e01      	subs	r6, #1
      BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800b54e:	69bb      	ldr	r3, [r7, #24]
 800b550:	9807      	ldr	r0, [sp, #28]
 800b552:	6018      	str	r0, [r3, #0]
 800b554:	9808      	ldr	r0, [sp, #32]
 800b556:	6058      	str	r0, [r3, #4]
 800b558:	e9c5 1202 	strd	r1, r2, [r5, #8]
 800b55c:	e76d      	b.n	800b43a <decode_mcu_AC_first+0x3e>
 800b55e:	bf00      	nop
 800b560:	0802aaf8 	.word	0x0802aaf8

0800b564 <decode_mcu_DC_refine>:
 * is not very clear on the point.
 */

METHODDEF(boolean)
decode_mcu_DC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 800b564:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800b568:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 800b56c:	2701      	movs	r7, #1
{   
 800b56e:	b087      	sub	sp, #28
 800b570:	4604      	mov	r4, r0
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800b572:	409f      	lsls	r7, r3
  int blkn;
  JBLOCKROW block;
  BITREAD_STATE_VARS;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800b574:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800b578:	4688      	mov	r8, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800b57a:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800b57e:	b9c3      	cbnz	r3, 800b5b2 <decode_mcu_DC_refine+0x4e>
  /* Not worth the cycles to check insufficient_data here,
   * since we will not change the data anyway if we read zeroes.
   */

  /* Load up working state */
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b580:	69a3      	ldr	r3, [r4, #24]

  /* Outer loop handles each block in the MCU */

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b582:	2600      	movs	r6, #0
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b584:	9405      	str	r4, [sp, #20]
 800b586:	681a      	ldr	r2, [r3, #0]
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	9201      	str	r2, [sp, #4]
 800b58c:	9302      	str	r3, [sp, #8]
 800b58e:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b592:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800b596:	42b3      	cmp	r3, r6
 800b598:	dc16      	bgt.n	800b5c8 <decode_mcu_DC_refine+0x64>
      (*block)[0] |= p1;
    /* Note: since we use |=, repeating the assignment later is safe */
  }

  /* Completed MCU, so update state */
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800b59a:	69a3      	ldr	r3, [r4, #24]
 800b59c:	9801      	ldr	r0, [sp, #4]
 800b59e:	6018      	str	r0, [r3, #0]
 800b5a0:	9802      	ldr	r0, [sp, #8]
 800b5a2:	6058      	str	r0, [r3, #4]

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;

  return TRUE;
 800b5a4:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800b5a6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800b5a8:	3b01      	subs	r3, #1
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800b5aa:	e9c5 1202 	strd	r1, r2, [r5, #8]
  entropy->restarts_to_go--;
 800b5ae:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800b5b0:	e007      	b.n	800b5c2 <decode_mcu_DC_refine+0x5e>
    if (entropy->restarts_to_go == 0)
 800b5b2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d1e3      	bne.n	800b580 <decode_mcu_DC_refine+0x1c>
      if (! process_restart(cinfo))
 800b5b8:	f7ff fe3e 	bl	800b238 <process_restart>
 800b5bc:	2800      	cmp	r0, #0
 800b5be:	d1df      	bne.n	800b580 <decode_mcu_DC_refine+0x1c>
	return FALSE;
 800b5c0:	2000      	movs	r0, #0
}
 800b5c2:	b007      	add	sp, #28
 800b5c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    CHECK_BIT_BUFFER(br_state, 1, return FALSE);
 800b5c8:	2a00      	cmp	r2, #0
    block = MCU_data[blkn];
 800b5ca:	f858 9026 	ldr.w	r9, [r8, r6, lsl #2]
    CHECK_BIT_BUFFER(br_state, 1, return FALSE);
 800b5ce:	dc07      	bgt.n	800b5e0 <decode_mcu_DC_refine+0x7c>
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	a801      	add	r0, sp, #4
 800b5d4:	f7ff fd88 	bl	800b0e8 <jpeg_fill_bit_buffer>
 800b5d8:	2800      	cmp	r0, #0
 800b5da:	d0f1      	beq.n	800b5c0 <decode_mcu_DC_refine+0x5c>
 800b5dc:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
    if (GET_BITS(1))
 800b5e0:	3a01      	subs	r2, #1
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b5e2:	3601      	adds	r6, #1
    if (GET_BITS(1))
 800b5e4:	fa41 f302 	asr.w	r3, r1, r2
 800b5e8:	07db      	lsls	r3, r3, #31
      (*block)[0] |= p1;
 800b5ea:	bf42      	ittt	mi
 800b5ec:	f8b9 3000 	ldrhmi.w	r3, [r9]
 800b5f0:	433b      	orrmi	r3, r7
 800b5f2:	f8a9 3000 	strhmi.w	r3, [r9]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b5f6:	e7cc      	b.n	800b592 <decode_mcu_DC_refine+0x2e>

0800b5f8 <decode_mcu_AC_refine>:
  d_derived_tbl * tbl;
  int num_newnz;
  int newnz_pos[DCTSIZE2];

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800b5f8:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800b5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b600:	4606      	mov	r6, r0
 800b602:	b0d1      	sub	sp, #324	; 0x144
 800b604:	460f      	mov	r7, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800b606:	f8d0 81d0 	ldr.w	r8, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800b60a:	b95b      	cbnz	r3, 800b624 <decode_mcu_AC_refine+0x2c>
	return FALSE;
  }

  /* If we've run out of data, don't modify the MCU.
   */
  if (! entropy->insufficient_data) {
 800b60c:	f8d8 b024 	ldr.w	fp, [r8, #36]	; 0x24
 800b610:	f1bb 0f00 	cmp.w	fp, #0
 800b614:	d012      	beq.n	800b63c <decode_mcu_AC_refine+0x44>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800b616:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28

  return TRUE;
 800b61a:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800b61c:	3b01      	subs	r3, #1
 800b61e:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  return TRUE;
 800b622:	e008      	b.n	800b636 <decode_mcu_AC_refine+0x3e>
    if (entropy->restarts_to_go == 0)
 800b624:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d1ef      	bne.n	800b60c <decode_mcu_AC_refine+0x14>
      if (! process_restart(cinfo))
 800b62c:	f7ff fe04 	bl	800b238 <process_restart>
 800b630:	2800      	cmp	r0, #0
 800b632:	d1eb      	bne.n	800b60c <decode_mcu_AC_refine+0x14>
	return FALSE;
 800b634:	2000      	movs	r0, #0
  /* Re-zero any output coefficients that we made newly nonzero */
  while (num_newnz > 0)
    (*block)[newnz_pos[--num_newnz]] = 0;

  return FALSE;
}
 800b636:	b051      	add	sp, #324	; 0x144
 800b638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Se = cinfo->Se;
 800b63c:	f8d6 319c 	ldr.w	r3, [r6, #412]	; 0x19c
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800b640:	2201      	movs	r2, #1
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b642:	ad0b      	add	r5, sp, #44	; 0x2c
    block = MCU_data[0];
 800b644:	f8d7 9000 	ldr.w	r9, [r7]
    Se = cinfo->Se;
 800b648:	9306      	str	r3, [sp, #24]
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800b64a:	f8d6 31a4 	ldr.w	r3, [r6, #420]	; 0x1a4
    k = cinfo->Ss;
 800b64e:	f8d6 7198 	ldr.w	r7, [r6, #408]	; 0x198
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800b652:	409a      	lsls	r2, r3
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b654:	612e      	str	r6, [r5, #16]
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800b656:	9203      	str	r2, [sp, #12]
    m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800b658:	f04f 32ff 	mov.w	r2, #4294967295
 800b65c:	fa02 f303 	lsl.w	r3, r2, r3
 800b660:	9307      	str	r3, [sp, #28]
    natural_order = cinfo->natural_order;
 800b662:	f8d6 31ac 	ldr.w	r3, [r6, #428]	; 0x1ac
 800b666:	9308      	str	r3, [sp, #32]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b668:	69b3      	ldr	r3, [r6, #24]
 800b66a:	681a      	ldr	r2, [r3, #0]
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	602a      	str	r2, [r5, #0]
 800b670:	606b      	str	r3, [r5, #4]
    EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 800b672:	f8d8 3010 	ldr.w	r3, [r8, #16]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b676:	e9d8 4202 	ldrd	r4, r2, [r8, #8]
    EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 800b67a:	9302      	str	r3, [sp, #8]
    if (EOBRUN == 0) {
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	f040 80bf 	bne.w	800b800 <decode_mcu_AC_refine+0x208>
    tbl = entropy->ac_derived_tbl;
 800b682:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800b686:	9309      	str	r3, [sp, #36]	; 0x24
      for (; k <= Se; k++) {
 800b688:	9b06      	ldr	r3, [sp, #24]
 800b68a:	429f      	cmp	r7, r3
 800b68c:	dd0a      	ble.n	800b6a4 <decode_mcu_AC_refine+0xac>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800b68e:	69b3      	ldr	r3, [r6, #24]
 800b690:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b692:	6019      	str	r1, [r3, #0]
 800b694:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b696:	6059      	str	r1, [r3, #4]
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 800b698:	9b02      	ldr	r3, [sp, #8]
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800b69a:	e9c8 4202 	strd	r4, r2, [r8, #8]
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 800b69e:	f8c8 3010 	str.w	r3, [r8, #16]
 800b6a2:	e7b8      	b.n	800b616 <decode_mcu_AC_refine+0x1e>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800b6a4:	2a07      	cmp	r2, #7
 800b6a6:	dc0a      	bgt.n	800b6be <decode_mcu_AC_refine+0xc6>
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	4621      	mov	r1, r4
 800b6ac:	4628      	mov	r0, r5
 800b6ae:	f7ff fd1b 	bl	800b0e8 <jpeg_fill_bit_buffer>
 800b6b2:	2800      	cmp	r0, #0
 800b6b4:	d06e      	beq.n	800b794 <decode_mcu_AC_refine+0x19c>
 800b6b6:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
 800b6ba:	2a07      	cmp	r2, #7
 800b6bc:	dd61      	ble.n	800b782 <decode_mcu_AC_refine+0x18a>
 800b6be:	f1a2 0308 	sub.w	r3, r2, #8
 800b6c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6c4:	fa44 f303 	asr.w	r3, r4, r3
 800b6c8:	b2db      	uxtb	r3, r3
 800b6ca:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800b6ce:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800b6d2:	2900      	cmp	r1, #0
 800b6d4:	d06b      	beq.n	800b7ae <decode_mcu_AC_refine+0x1b6>
 800b6d6:	4403      	add	r3, r0
 800b6d8:	1a52      	subs	r2, r2, r1
 800b6da:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800b6de:	f010 030f 	ands.w	r3, r0, #15
	r = s >> 4;
 800b6e2:	ea4f 1a20 	mov.w	sl, r0, asr #4
	if (s) {
 800b6e6:	9304      	str	r3, [sp, #16]
 800b6e8:	d066      	beq.n	800b7b8 <decode_mcu_AC_refine+0x1c0>
	  if (s != 1)		/* size of new coef should always be 1 */
 800b6ea:	2b01      	cmp	r3, #1
 800b6ec:	d009      	beq.n	800b702 <decode_mcu_AC_refine+0x10a>
	    WARNMS(cinfo, JWRN_HUFF_BAD_CODE);
 800b6ee:	6833      	ldr	r3, [r6, #0]
 800b6f0:	2179      	movs	r1, #121	; 0x79
 800b6f2:	4630      	mov	r0, r6
 800b6f4:	9204      	str	r2, [sp, #16]
 800b6f6:	6159      	str	r1, [r3, #20]
 800b6f8:	f04f 31ff 	mov.w	r1, #4294967295
 800b6fc:	685b      	ldr	r3, [r3, #4]
 800b6fe:	4798      	blx	r3
 800b700:	9a04      	ldr	r2, [sp, #16]
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800b702:	2a00      	cmp	r2, #0
 800b704:	dc08      	bgt.n	800b718 <decode_mcu_AC_refine+0x120>
 800b706:	2301      	movs	r3, #1
 800b708:	4621      	mov	r1, r4
 800b70a:	4628      	mov	r0, r5
 800b70c:	f7ff fcec 	bl	800b0e8 <jpeg_fill_bit_buffer>
 800b710:	2800      	cmp	r0, #0
 800b712:	d03f      	beq.n	800b794 <decode_mcu_AC_refine+0x19c>
 800b714:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
	  if (GET_BITS(1))
 800b718:	3a01      	subs	r2, #1
	    s = m1;		/* newly nonzero coef is negative */
 800b71a:	9907      	ldr	r1, [sp, #28]
	  if (GET_BITS(1))
 800b71c:	fa44 f302 	asr.w	r3, r4, r2
	    s = m1;		/* newly nonzero coef is negative */
 800b720:	f013 0f01 	tst.w	r3, #1
 800b724:	9b03      	ldr	r3, [sp, #12]
 800b726:	bf08      	it	eq
 800b728:	460b      	moveq	r3, r1
 800b72a:	9304      	str	r3, [sp, #16]
	  thiscoef = *block + natural_order[k];
 800b72c:	9b08      	ldr	r3, [sp, #32]
 800b72e:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800b732:	9305      	str	r3, [sp, #20]
	  if (*thiscoef != 0) {
 800b734:	f939 3013 	ldrsh.w	r3, [r9, r3, lsl #1]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d068      	beq.n	800b80e <decode_mcu_AC_refine+0x216>
	    CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800b73c:	2a00      	cmp	r2, #0
 800b73e:	dc07      	bgt.n	800b750 <decode_mcu_AC_refine+0x158>
 800b740:	2301      	movs	r3, #1
 800b742:	4621      	mov	r1, r4
 800b744:	4628      	mov	r0, r5
 800b746:	f7ff fccf 	bl	800b0e8 <jpeg_fill_bit_buffer>
 800b74a:	b318      	cbz	r0, 800b794 <decode_mcu_AC_refine+0x19c>
 800b74c:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
	    if (GET_BITS(1)) {
 800b750:	3a01      	subs	r2, #1
 800b752:	fa44 f302 	asr.w	r3, r4, r2
 800b756:	07d9      	lsls	r1, r3, #31
 800b758:	d50e      	bpl.n	800b778 <decode_mcu_AC_refine+0x180>
	      if ((*thiscoef & p1) == 0) { /* do nothing if already set it */
 800b75a:	9b05      	ldr	r3, [sp, #20]
 800b75c:	f939 1013 	ldrsh.w	r1, [r9, r3, lsl #1]
 800b760:	9b03      	ldr	r3, [sp, #12]
 800b762:	4219      	tst	r1, r3
 800b764:	d108      	bne.n	800b778 <decode_mcu_AC_refine+0x180>
		if (*thiscoef >= 0)
 800b766:	2900      	cmp	r1, #0
		  *thiscoef += p1;
 800b768:	b28b      	uxth	r3, r1
 800b76a:	bfac      	ite	ge
 800b76c:	9903      	ldrge	r1, [sp, #12]
		  *thiscoef += m1;
 800b76e:	9907      	ldrlt	r1, [sp, #28]
 800b770:	440b      	add	r3, r1
 800b772:	9905      	ldr	r1, [sp, #20]
 800b774:	f829 3011 	strh.w	r3, [r9, r1, lsl #1]
	  k++;
 800b778:	3701      	adds	r7, #1
	} while (k <= Se);
 800b77a:	9b06      	ldr	r3, [sp, #24]
 800b77c:	42bb      	cmp	r3, r7
 800b77e:	dad5      	bge.n	800b72c <decode_mcu_AC_refine+0x134>
 800b780:	e048      	b.n	800b814 <decode_mcu_AC_refine+0x21c>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800b782:	2301      	movs	r3, #1
 800b784:	9300      	str	r3, [sp, #0]
 800b786:	4621      	mov	r1, r4
 800b788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b78a:	4628      	mov	r0, r5
 800b78c:	f7ff fd0a 	bl	800b1a4 <jpeg_huff_decode>
 800b790:	2800      	cmp	r0, #0
 800b792:	da0e      	bge.n	800b7b2 <decode_mcu_AC_refine+0x1ba>
    (*block)[newnz_pos[--num_newnz]] = 0;
 800b794:	ab10      	add	r3, sp, #64	; 0x40
 800b796:	2200      	movs	r2, #0
  while (num_newnz > 0)
 800b798:	f1bb 0f00 	cmp.w	fp, #0
 800b79c:	f43f af4a 	beq.w	800b634 <decode_mcu_AC_refine+0x3c>
    (*block)[newnz_pos[--num_newnz]] = 0;
 800b7a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b7a4:	f853 102b 	ldr.w	r1, [r3, fp, lsl #2]
 800b7a8:	f829 2011 	strh.w	r2, [r9, r1, lsl #1]
 800b7ac:	e7f4      	b.n	800b798 <decode_mcu_AC_refine+0x1a0>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800b7ae:	2309      	movs	r3, #9
 800b7b0:	e7e8      	b.n	800b784 <decode_mcu_AC_refine+0x18c>
 800b7b2:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
 800b7b6:	e792      	b.n	800b6de <decode_mcu_AC_refine+0xe6>
	  if (r != 15) {
 800b7b8:	f1ba 0f0f 	cmp.w	sl, #15
 800b7bc:	d0b6      	beq.n	800b72c <decode_mcu_AC_refine+0x134>
	    EOBRUN = 1 << r;	/* EOBr, run length is 2^r + appended bits */
 800b7be:	2301      	movs	r3, #1
 800b7c0:	fa03 f30a 	lsl.w	r3, r3, sl
 800b7c4:	9302      	str	r3, [sp, #8]
	    if (r) {
 800b7c6:	f1ba 0f00 	cmp.w	sl, #0
 800b7ca:	d015      	beq.n	800b7f8 <decode_mcu_AC_refine+0x200>
	      CHECK_BIT_BUFFER(br_state, r, goto undoit);
 800b7cc:	4552      	cmp	r2, sl
 800b7ce:	da08      	bge.n	800b7e2 <decode_mcu_AC_refine+0x1ea>
 800b7d0:	4653      	mov	r3, sl
 800b7d2:	4621      	mov	r1, r4
 800b7d4:	a80b      	add	r0, sp, #44	; 0x2c
 800b7d6:	f7ff fc87 	bl	800b0e8 <jpeg_fill_bit_buffer>
 800b7da:	2800      	cmp	r0, #0
 800b7dc:	d0da      	beq.n	800b794 <decode_mcu_AC_refine+0x19c>
 800b7de:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	; 0x34
	      r = GET_BITS(r);
 800b7e2:	4b26      	ldr	r3, [pc, #152]	; (800b87c <decode_mcu_AC_refine+0x284>)
 800b7e4:	eba2 020a 	sub.w	r2, r2, sl
 800b7e8:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800b7ec:	fa44 f302 	asr.w	r3, r4, r2
 800b7f0:	400b      	ands	r3, r1
	      EOBRUN += r;
 800b7f2:	9902      	ldr	r1, [sp, #8]
 800b7f4:	4419      	add	r1, r3
 800b7f6:	9102      	str	r1, [sp, #8]
    if (EOBRUN > 0) {
 800b7f8:	9b02      	ldr	r3, [sp, #8]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	f43f af47 	beq.w	800b68e <decode_mcu_AC_refine+0x96>
      for (; k <= Se; k++) {
 800b800:	9b06      	ldr	r3, [sp, #24]
 800b802:	429f      	cmp	r7, r3
 800b804:	dd15      	ble.n	800b832 <decode_mcu_AC_refine+0x23a>
      EOBRUN--;
 800b806:	9b02      	ldr	r3, [sp, #8]
 800b808:	3b01      	subs	r3, #1
 800b80a:	9302      	str	r3, [sp, #8]
 800b80c:	e73f      	b.n	800b68e <decode_mcu_AC_refine+0x96>
	    if (--r < 0)
 800b80e:	f1ba 0a01 	subs.w	sl, sl, #1
 800b812:	d2b1      	bcs.n	800b778 <decode_mcu_AC_refine+0x180>
	if (s) {
 800b814:	9b04      	ldr	r3, [sp, #16]
 800b816:	b153      	cbz	r3, 800b82e <decode_mcu_AC_refine+0x236>
	  int pos = natural_order[k];
 800b818:	9b08      	ldr	r3, [sp, #32]
	  (*block)[pos] = (JCOEF) s;
 800b81a:	9904      	ldr	r1, [sp, #16]
	  int pos = natural_order[k];
 800b81c:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
	  (*block)[pos] = (JCOEF) s;
 800b820:	f829 1013 	strh.w	r1, [r9, r3, lsl #1]
	  newnz_pos[num_newnz++] = pos;
 800b824:	a910      	add	r1, sp, #64	; 0x40
 800b826:	f841 302b 	str.w	r3, [r1, fp, lsl #2]
 800b82a:	f10b 0b01 	add.w	fp, fp, #1
      for (; k <= Se; k++) {
 800b82e:	3701      	adds	r7, #1
 800b830:	e72a      	b.n	800b688 <decode_mcu_AC_refine+0x90>
	thiscoef = *block + natural_order[k];
 800b832:	9b08      	ldr	r3, [sp, #32]
 800b834:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
	if (*thiscoef != 0) {
 800b838:	f939 3015 	ldrsh.w	r3, [r9, r5, lsl #1]
 800b83c:	b1e3      	cbz	r3, 800b878 <decode_mcu_AC_refine+0x280>
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800b83e:	2a00      	cmp	r2, #0
 800b840:	dc08      	bgt.n	800b854 <decode_mcu_AC_refine+0x25c>
 800b842:	2301      	movs	r3, #1
 800b844:	4621      	mov	r1, r4
 800b846:	a80b      	add	r0, sp, #44	; 0x2c
 800b848:	f7ff fc4e 	bl	800b0e8 <jpeg_fill_bit_buffer>
 800b84c:	2800      	cmp	r0, #0
 800b84e:	d0a1      	beq.n	800b794 <decode_mcu_AC_refine+0x19c>
 800b850:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	; 0x34
	  if (GET_BITS(1)) {
 800b854:	3a01      	subs	r2, #1
 800b856:	fa44 f302 	asr.w	r3, r4, r2
 800b85a:	07db      	lsls	r3, r3, #31
 800b85c:	d50c      	bpl.n	800b878 <decode_mcu_AC_refine+0x280>
	    if ((*thiscoef & p1) == 0) { /* do nothing if already changed it */
 800b85e:	f939 1015 	ldrsh.w	r1, [r9, r5, lsl #1]
 800b862:	9b03      	ldr	r3, [sp, #12]
 800b864:	4219      	tst	r1, r3
 800b866:	d107      	bne.n	800b878 <decode_mcu_AC_refine+0x280>
	      if (*thiscoef >= 0)
 800b868:	2900      	cmp	r1, #0
		*thiscoef += p1;
 800b86a:	b28b      	uxth	r3, r1
 800b86c:	bfac      	ite	ge
 800b86e:	9903      	ldrge	r1, [sp, #12]
		*thiscoef += m1;
 800b870:	9907      	ldrlt	r1, [sp, #28]
 800b872:	440b      	add	r3, r1
 800b874:	f829 3015 	strh.w	r3, [r9, r5, lsl #1]
      for (; k <= Se; k++) {
 800b878:	3701      	adds	r7, #1
 800b87a:	e7c1      	b.n	800b800 <decode_mcu_AC_refine+0x208>
 800b87c:	0802aaf8 	.word	0x0802aaf8

0800b880 <decode_mcu_sub>:
 * partial blocks.
 */

METHODDEF(boolean)
decode_mcu_sub (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800b880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int Se, blkn;
  BITREAD_STATE_VARS;
  savable_state state;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800b884:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800b888:	b093      	sub	sp, #76	; 0x4c
 800b88a:	4606      	mov	r6, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800b88c:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 800b890:	9106      	str	r1, [sp, #24]
  if (cinfo->restart_interval) {
 800b892:	b933      	cbnz	r3, 800b8a2 <decode_mcu_sub+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800b894:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800b896:	b17f      	cbz	r7, 800b8b8 <decode_mcu_sub+0x38>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800b898:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 800b89a:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800b89c:	3b01      	subs	r3, #1
 800b89e:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800b8a0:	e007      	b.n	800b8b2 <decode_mcu_sub+0x32>
    if (entropy->restarts_to_go == 0)
 800b8a2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d1f5      	bne.n	800b894 <decode_mcu_sub+0x14>
      if (! process_restart(cinfo))
 800b8a8:	f7ff fcc6 	bl	800b238 <process_restart>
 800b8ac:	2800      	cmp	r0, #0
 800b8ae:	d1f1      	bne.n	800b894 <decode_mcu_sub+0x14>
	return FALSE;
 800b8b0:	2000      	movs	r0, #0
}
 800b8b2:	b013      	add	sp, #76	; 0x4c
 800b8b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    natural_order = cinfo->natural_order;
 800b8b8:	f8d6 31ac 	ldr.w	r3, [r6, #428]	; 0x1ac
    ASSIGN_STATE(state, entropy->saved);
 800b8bc:	f105 0810 	add.w	r8, r5, #16
 800b8c0:	ac0d      	add	r4, sp, #52	; 0x34
 800b8c2:	f105 0960 	add.w	r9, r5, #96	; 0x60
    natural_order = cinfo->natural_order;
 800b8c6:	9304      	str	r3, [sp, #16]
    Se = cinfo->lim_Se;
 800b8c8:	f8d6 31b0 	ldr.w	r3, [r6, #432]	; 0x1b0
	    r = GET_BITS(s);
 800b8cc:	f8df a29c 	ldr.w	sl, [pc, #668]	; 800bb6c <decode_mcu_sub+0x2ec>
    Se = cinfo->lim_Se;
 800b8d0:	9305      	str	r3, [sp, #20]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b8d2:	69b3      	ldr	r3, [r6, #24]
 800b8d4:	960c      	str	r6, [sp, #48]	; 0x30
 800b8d6:	681a      	ldr	r2, [r3, #0]
 800b8d8:	685b      	ldr	r3, [r3, #4]
 800b8da:	9208      	str	r2, [sp, #32]
 800b8dc:	9309      	str	r3, [sp, #36]	; 0x24
    ASSIGN_STATE(state, entropy->saved);
 800b8de:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b8e2:	e9d5 ec02 	ldrd	lr, ip, [r5, #8]
    ASSIGN_STATE(state, entropy->saved);
 800b8e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b8e8:	f8d8 3000 	ldr.w	r3, [r8]
 800b8ec:	6023      	str	r3, [r4, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b8ee:	f8d6 316c 	ldr.w	r3, [r6, #364]	; 0x16c
 800b8f2:	42bb      	cmp	r3, r7
 800b8f4:	dc0e      	bgt.n	800b914 <decode_mcu_sub+0x94>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800b8f6:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(entropy->saved, state);
 800b8f8:	ae0d      	add	r6, sp, #52	; 0x34
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800b8fa:	9a08      	ldr	r2, [sp, #32]
    ASSIGN_STATE(entropy->saved, state);
 800b8fc:	f105 0410 	add.w	r4, r5, #16
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800b900:	601a      	str	r2, [r3, #0]
 800b902:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b904:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800b906:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800b908:	e9c5 ec02 	strd	lr, ip, [r5, #8]
    ASSIGN_STATE(entropy->saved, state);
 800b90c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b90e:	6833      	ldr	r3, [r6, #0]
 800b910:	6023      	str	r3, [r4, #0]
 800b912:	e7c1      	b.n	800b898 <decode_mcu_sub+0x18>
      JBLOCKROW block = MCU_data[blkn];
 800b914:	9b06      	ldr	r3, [sp, #24]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800b916:	f1bc 0f07 	cmp.w	ip, #7
      htbl = entropy->dc_cur_tbls[blkn];
 800b91a:	f859 4b04 	ldr.w	r4, [r9], #4
      JBLOCKROW block = MCU_data[blkn];
 800b91e:	f853 b027 	ldr.w	fp, [r3, r7, lsl #2]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800b922:	dc0c      	bgt.n	800b93e <decode_mcu_sub+0xbe>
 800b924:	2300      	movs	r3, #0
 800b926:	4662      	mov	r2, ip
 800b928:	4671      	mov	r1, lr
 800b92a:	a808      	add	r0, sp, #32
 800b92c:	f7ff fbdc 	bl	800b0e8 <jpeg_fill_bit_buffer>
 800b930:	2800      	cmp	r0, #0
 800b932:	d0bd      	beq.n	800b8b0 <decode_mcu_sub+0x30>
 800b934:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800b938:	f1bc 0f07 	cmp.w	ip, #7
 800b93c:	dd4a      	ble.n	800b9d4 <decode_mcu_sub+0x154>
 800b93e:	f1ac 0308 	sub.w	r3, ip, #8
 800b942:	fa4e f303 	asr.w	r3, lr, r3
 800b946:	b2db      	uxtb	r3, r3
 800b948:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800b94c:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b950:	2a00      	cmp	r2, #0
 800b952:	d04d      	beq.n	800b9f0 <decode_mcu_sub+0x170>
 800b954:	441c      	add	r4, r3
 800b956:	ebac 0c02 	sub.w	ip, ip, r2
 800b95a:	f894 4490 	ldrb.w	r4, [r4, #1168]	; 0x490
      coef_limit = entropy->coef_limit[blkn];
 800b95e:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
      htbl = entropy->ac_cur_tbls[blkn];
 800b962:	f8d9 8024 	ldr.w	r8, [r9, #36]	; 0x24
      coef_limit = entropy->coef_limit[blkn];
 800b966:	9303      	str	r3, [sp, #12]
      if (coef_limit) {
 800b968:	2b00      	cmp	r3, #0
 800b96a:	f000 80a0 	beq.w	800baae <decode_mcu_sub+0x22e>
	if (s) {
 800b96e:	b1cc      	cbz	r4, 800b9a4 <decode_mcu_sub+0x124>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800b970:	45a4      	cmp	ip, r4
 800b972:	da09      	bge.n	800b988 <decode_mcu_sub+0x108>
 800b974:	4623      	mov	r3, r4
 800b976:	4662      	mov	r2, ip
 800b978:	4671      	mov	r1, lr
 800b97a:	a808      	add	r0, sp, #32
 800b97c:	f7ff fbb4 	bl	800b0e8 <jpeg_fill_bit_buffer>
 800b980:	2800      	cmp	r0, #0
 800b982:	d095      	beq.n	800b8b0 <decode_mcu_sub+0x30>
 800b984:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  r = GET_BITS(s);
 800b988:	ebac 0c04 	sub.w	ip, ip, r4
 800b98c:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800b990:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800b992:	fa4e f20c 	asr.w	r2, lr, ip
	  s = HUFF_EXTEND(r, s);
 800b996:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800b99a:	400a      	ands	r2, r1
	  s = HUFF_EXTEND(r, s);
 800b99c:	4293      	cmp	r3, r2
 800b99e:	bfac      	ite	ge
 800b9a0:	1a54      	subge	r4, r2, r1
 800b9a2:	4614      	movlt	r4, r2
	ci = cinfo->MCU_membership[blkn];
 800b9a4:	f506 73b8 	add.w	r3, r6, #368	; 0x170
 800b9a8:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
	s += state.last_dc_val[ci];
 800b9ac:	ab12      	add	r3, sp, #72	; 0x48
 800b9ae:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800b9b2:	f852 3c10 	ldr.w	r3, [r2, #-16]
 800b9b6:	441c      	add	r4, r3
	state.last_dc_val[ci] = s;
 800b9b8:	f842 4c10 	str.w	r4, [r2, #-16]
	(*block)[0] = (JCOEF) s;
 800b9bc:	f8ab 4000 	strh.w	r4, [fp]
      k = 1;
 800b9c0:	2401      	movs	r4, #1
	for (; k < coef_limit; k++) {
 800b9c2:	9b03      	ldr	r3, [sp, #12]
 800b9c4:	429c      	cmp	r4, r3
 800b9c6:	db15      	blt.n	800b9f4 <decode_mcu_sub+0x174>
      for (; k <= Se; k++) {
 800b9c8:	9b05      	ldr	r3, [sp, #20]
 800b9ca:	429c      	cmp	r4, r3
 800b9cc:	f340 8081 	ble.w	800bad2 <decode_mcu_sub+0x252>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b9d0:	3701      	adds	r7, #1
 800b9d2:	e78c      	b.n	800b8ee <decode_mcu_sub+0x6e>
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800b9d4:	2301      	movs	r3, #1
 800b9d6:	9300      	str	r3, [sp, #0]
 800b9d8:	4662      	mov	r2, ip
 800b9da:	4623      	mov	r3, r4
 800b9dc:	4671      	mov	r1, lr
 800b9de:	a808      	add	r0, sp, #32
 800b9e0:	f7ff fbe0 	bl	800b1a4 <jpeg_huff_decode>
 800b9e4:	1e04      	subs	r4, r0, #0
 800b9e6:	f6ff af63 	blt.w	800b8b0 <decode_mcu_sub+0x30>
 800b9ea:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800b9ee:	e7b6      	b.n	800b95e <decode_mcu_sub+0xde>
 800b9f0:	2309      	movs	r3, #9
 800b9f2:	e7f0      	b.n	800b9d6 <decode_mcu_sub+0x156>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800b9f4:	f1bc 0f07 	cmp.w	ip, #7
 800b9f8:	dc0d      	bgt.n	800ba16 <decode_mcu_sub+0x196>
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	4662      	mov	r2, ip
 800b9fe:	4671      	mov	r1, lr
 800ba00:	a808      	add	r0, sp, #32
 800ba02:	f7ff fb71 	bl	800b0e8 <jpeg_fill_bit_buffer>
 800ba06:	2800      	cmp	r0, #0
 800ba08:	f43f af52 	beq.w	800b8b0 <decode_mcu_sub+0x30>
 800ba0c:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800ba10:	f1bc 0f07 	cmp.w	ip, #7
 800ba14:	dd37      	ble.n	800ba86 <decode_mcu_sub+0x206>
 800ba16:	f1ac 0308 	sub.w	r3, ip, #8
 800ba1a:	fa4e f303 	asr.w	r3, lr, r3
 800ba1e:	b2db      	uxtb	r3, r3
 800ba20:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800ba24:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800ba28:	2a00      	cmp	r2, #0
 800ba2a:	d03a      	beq.n	800baa2 <decode_mcu_sub+0x222>
 800ba2c:	4443      	add	r3, r8
 800ba2e:	ebac 0c02 	sub.w	ip, ip, r2
 800ba32:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	  if (s) {
 800ba36:	f010 030f 	ands.w	r3, r0, #15
	  r = s >> 4;
 800ba3a:	ea4f 1220 	mov.w	r2, r0, asr #4
	  if (s) {
 800ba3e:	d032      	beq.n	800baa6 <decode_mcu_sub+0x226>
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800ba40:	459c      	cmp	ip, r3
	    k += r;
 800ba42:	4414      	add	r4, r2
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800ba44:	da0b      	bge.n	800ba5e <decode_mcu_sub+0x1de>
 800ba46:	4662      	mov	r2, ip
 800ba48:	4671      	mov	r1, lr
 800ba4a:	a808      	add	r0, sp, #32
 800ba4c:	9307      	str	r3, [sp, #28]
 800ba4e:	f7ff fb4b 	bl	800b0e8 <jpeg_fill_bit_buffer>
 800ba52:	2800      	cmp	r0, #0
 800ba54:	f43f af2c 	beq.w	800b8b0 <decode_mcu_sub+0x30>
 800ba58:	9b07      	ldr	r3, [sp, #28]
 800ba5a:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	    r = GET_BITS(s);
 800ba5e:	ebac 0c03 	sub.w	ip, ip, r3
 800ba62:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
	    s = HUFF_EXTEND(r, s);
 800ba66:	3b01      	subs	r3, #1
	    r = GET_BITS(s);
 800ba68:	fa4e f20c 	asr.w	r2, lr, ip
	    s = HUFF_EXTEND(r, s);
 800ba6c:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
	    r = GET_BITS(s);
 800ba70:	400a      	ands	r2, r1
	    s = HUFF_EXTEND(r, s);
 800ba72:	4293      	cmp	r3, r2
	    (*block)[natural_order[k]] = (JCOEF) s;
 800ba74:	9b04      	ldr	r3, [sp, #16]
	    s = HUFF_EXTEND(r, s);
 800ba76:	bfa8      	it	ge
 800ba78:	1a52      	subge	r2, r2, r1
	    (*block)[natural_order[k]] = (JCOEF) s;
 800ba7a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ba7e:	f82b 2013 	strh.w	r2, [fp, r3, lsl #1]
	for (; k < coef_limit; k++) {
 800ba82:	3401      	adds	r4, #1
 800ba84:	e79d      	b.n	800b9c2 <decode_mcu_sub+0x142>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800ba86:	2301      	movs	r3, #1
 800ba88:	9300      	str	r3, [sp, #0]
 800ba8a:	4662      	mov	r2, ip
 800ba8c:	4643      	mov	r3, r8
 800ba8e:	4671      	mov	r1, lr
 800ba90:	a808      	add	r0, sp, #32
 800ba92:	f7ff fb87 	bl	800b1a4 <jpeg_huff_decode>
 800ba96:	2800      	cmp	r0, #0
 800ba98:	f6ff af0a 	blt.w	800b8b0 <decode_mcu_sub+0x30>
 800ba9c:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800baa0:	e7c9      	b.n	800ba36 <decode_mcu_sub+0x1b6>
 800baa2:	2309      	movs	r3, #9
 800baa4:	e7f0      	b.n	800ba88 <decode_mcu_sub+0x208>
	    if (r != 15)
 800baa6:	2a0f      	cmp	r2, #15
 800baa8:	d192      	bne.n	800b9d0 <decode_mcu_sub+0x150>
	    k += 15;
 800baaa:	340f      	adds	r4, #15
 800baac:	e7e9      	b.n	800ba82 <decode_mcu_sub+0x202>
	if (s) {
 800baae:	b174      	cbz	r4, 800bace <decode_mcu_sub+0x24e>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800bab0:	45a4      	cmp	ip, r4
 800bab2:	da0a      	bge.n	800baca <decode_mcu_sub+0x24a>
 800bab4:	4623      	mov	r3, r4
 800bab6:	4662      	mov	r2, ip
 800bab8:	4671      	mov	r1, lr
 800baba:	a808      	add	r0, sp, #32
 800babc:	f7ff fb14 	bl	800b0e8 <jpeg_fill_bit_buffer>
 800bac0:	2800      	cmp	r0, #0
 800bac2:	f43f aef5 	beq.w	800b8b0 <decode_mcu_sub+0x30>
 800bac6:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  DROP_BITS(s);
 800baca:	ebac 0c04 	sub.w	ip, ip, r4
      k = 1;
 800bace:	2401      	movs	r4, #1
 800bad0:	e77a      	b.n	800b9c8 <decode_mcu_sub+0x148>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800bad2:	f1bc 0f07 	cmp.w	ip, #7
 800bad6:	dc0d      	bgt.n	800baf4 <decode_mcu_sub+0x274>
 800bad8:	2300      	movs	r3, #0
 800bada:	4662      	mov	r2, ip
 800badc:	4671      	mov	r1, lr
 800bade:	a808      	add	r0, sp, #32
 800bae0:	f7ff fb02 	bl	800b0e8 <jpeg_fill_bit_buffer>
 800bae4:	2800      	cmp	r0, #0
 800bae6:	f43f aee3 	beq.w	800b8b0 <decode_mcu_sub+0x30>
 800baea:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800baee:	f1bc 0f07 	cmp.w	ip, #7
 800baf2:	dd25      	ble.n	800bb40 <decode_mcu_sub+0x2c0>
 800baf4:	f1ac 0308 	sub.w	r3, ip, #8
 800baf8:	fa4e f303 	asr.w	r3, lr, r3
 800bafc:	b2db      	uxtb	r3, r3
 800bafe:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800bb02:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800bb06:	b34a      	cbz	r2, 800bb5c <decode_mcu_sub+0x2dc>
 800bb08:	4443      	add	r3, r8
 800bb0a:	ebac 0c02 	sub.w	ip, ip, r2
 800bb0e:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800bb12:	f010 0b0f 	ands.w	fp, r0, #15
	r = s >> 4;
 800bb16:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800bb1a:	d021      	beq.n	800bb60 <decode_mcu_sub+0x2e0>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800bb1c:	45dc      	cmp	ip, fp
	  k += r;
 800bb1e:	441c      	add	r4, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800bb20:	da0a      	bge.n	800bb38 <decode_mcu_sub+0x2b8>
 800bb22:	465b      	mov	r3, fp
 800bb24:	4662      	mov	r2, ip
 800bb26:	4671      	mov	r1, lr
 800bb28:	a808      	add	r0, sp, #32
 800bb2a:	f7ff fadd 	bl	800b0e8 <jpeg_fill_bit_buffer>
 800bb2e:	2800      	cmp	r0, #0
 800bb30:	f43f aebe 	beq.w	800b8b0 <decode_mcu_sub+0x30>
 800bb34:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  DROP_BITS(s);
 800bb38:	ebac 0c0b 	sub.w	ip, ip, fp
      for (; k <= Se; k++) {
 800bb3c:	3401      	adds	r4, #1
 800bb3e:	e743      	b.n	800b9c8 <decode_mcu_sub+0x148>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800bb40:	2301      	movs	r3, #1
 800bb42:	9300      	str	r3, [sp, #0]
 800bb44:	4662      	mov	r2, ip
 800bb46:	4643      	mov	r3, r8
 800bb48:	4671      	mov	r1, lr
 800bb4a:	a808      	add	r0, sp, #32
 800bb4c:	f7ff fb2a 	bl	800b1a4 <jpeg_huff_decode>
 800bb50:	2800      	cmp	r0, #0
 800bb52:	f6ff aead 	blt.w	800b8b0 <decode_mcu_sub+0x30>
 800bb56:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800bb5a:	e7da      	b.n	800bb12 <decode_mcu_sub+0x292>
 800bb5c:	2309      	movs	r3, #9
 800bb5e:	e7f0      	b.n	800bb42 <decode_mcu_sub+0x2c2>
	  if (r != 15)
 800bb60:	2b0f      	cmp	r3, #15
 800bb62:	f47f af35 	bne.w	800b9d0 <decode_mcu_sub+0x150>
	  k += 15;
 800bb66:	340f      	adds	r4, #15
 800bb68:	e7e8      	b.n	800bb3c <decode_mcu_sub+0x2bc>
 800bb6a:	bf00      	nop
 800bb6c:	0802aaf8 	.word	0x0802aaf8

0800bb70 <decode_mcu>:
 * full-size blocks.
 */

METHODDEF(boolean)
decode_mcu (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800bb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int blkn;
  BITREAD_STATE_VARS;
  savable_state state;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800bb74:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800bb78:	b091      	sub	sp, #68	; 0x44
 800bb7a:	4606      	mov	r6, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800bb7c:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 800bb80:	9104      	str	r1, [sp, #16]
  if (cinfo->restart_interval) {
 800bb82:	b933      	cbnz	r3, 800bb92 <decode_mcu+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800bb84:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800bb86:	b17f      	cbz	r7, 800bba8 <decode_mcu+0x38>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800bb88:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 800bb8a:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800bb8c:	3b01      	subs	r3, #1
 800bb8e:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800bb90:	e007      	b.n	800bba2 <decode_mcu+0x32>
    if (entropy->restarts_to_go == 0)
 800bb92:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d1f5      	bne.n	800bb84 <decode_mcu+0x14>
      if (! process_restart(cinfo))
 800bb98:	f7ff fb4e 	bl	800b238 <process_restart>
 800bb9c:	2800      	cmp	r0, #0
 800bb9e:	d1f1      	bne.n	800bb84 <decode_mcu+0x14>
	return FALSE;
 800bba0:	2000      	movs	r0, #0
}
 800bba2:	b011      	add	sp, #68	; 0x44
 800bba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bba8:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(state, entropy->saved);
 800bbaa:	f105 0810 	add.w	r8, r5, #16
 800bbae:	ac0b      	add	r4, sp, #44	; 0x2c
 800bbb0:	f105 0960 	add.w	r9, r5, #96	; 0x60
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bbb4:	681a      	ldr	r2, [r3, #0]
 800bbb6:	685b      	ldr	r3, [r3, #4]
 800bbb8:	9206      	str	r2, [sp, #24]
 800bbba:	9307      	str	r3, [sp, #28]
	    r = GET_BITS(s);
 800bbbc:	f8df a290 	ldr.w	sl, [pc, #656]	; 800be50 <decode_mcu+0x2e0>
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bbc0:	960a      	str	r6, [sp, #40]	; 0x28
    ASSIGN_STATE(state, entropy->saved);
 800bbc2:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bbc6:	e9d5 ec02 	ldrd	lr, ip, [r5, #8]
    ASSIGN_STATE(state, entropy->saved);
 800bbca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bbcc:	f8d8 3000 	ldr.w	r3, [r8]
 800bbd0:	6023      	str	r3, [r4, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800bbd2:	f8d6 316c 	ldr.w	r3, [r6, #364]	; 0x16c
 800bbd6:	42bb      	cmp	r3, r7
 800bbd8:	dc0e      	bgt.n	800bbf8 <decode_mcu+0x88>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bbda:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(entropy->saved, state);
 800bbdc:	ae0b      	add	r6, sp, #44	; 0x2c
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bbde:	9a06      	ldr	r2, [sp, #24]
    ASSIGN_STATE(entropy->saved, state);
 800bbe0:	f105 0410 	add.w	r4, r5, #16
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bbe4:	601a      	str	r2, [r3, #0]
 800bbe6:	9a07      	ldr	r2, [sp, #28]
 800bbe8:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800bbea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bbec:	e9c5 ec02 	strd	lr, ip, [r5, #8]
    ASSIGN_STATE(entropy->saved, state);
 800bbf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bbf2:	6833      	ldr	r3, [r6, #0]
 800bbf4:	6023      	str	r3, [r4, #0]
 800bbf6:	e7c7      	b.n	800bb88 <decode_mcu+0x18>
      JBLOCKROW block = MCU_data[blkn];
 800bbf8:	9b04      	ldr	r3, [sp, #16]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800bbfa:	f1bc 0f07 	cmp.w	ip, #7
      htbl = entropy->dc_cur_tbls[blkn];
 800bbfe:	f859 4b04 	ldr.w	r4, [r9], #4
      JBLOCKROW block = MCU_data[blkn];
 800bc02:	f853 b027 	ldr.w	fp, [r3, r7, lsl #2]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800bc06:	dc0c      	bgt.n	800bc22 <decode_mcu+0xb2>
 800bc08:	2300      	movs	r3, #0
 800bc0a:	4662      	mov	r2, ip
 800bc0c:	4671      	mov	r1, lr
 800bc0e:	a806      	add	r0, sp, #24
 800bc10:	f7ff fa6a 	bl	800b0e8 <jpeg_fill_bit_buffer>
 800bc14:	2800      	cmp	r0, #0
 800bc16:	d0c3      	beq.n	800bba0 <decode_mcu+0x30>
 800bc18:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800bc1c:	f1bc 0f07 	cmp.w	ip, #7
 800bc20:	dd49      	ble.n	800bcb6 <decode_mcu+0x146>
 800bc22:	f1ac 0308 	sub.w	r3, ip, #8
 800bc26:	fa4e f303 	asr.w	r3, lr, r3
 800bc2a:	b2db      	uxtb	r3, r3
 800bc2c:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800bc30:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bc34:	2a00      	cmp	r2, #0
 800bc36:	d04c      	beq.n	800bcd2 <decode_mcu+0x162>
 800bc38:	441c      	add	r4, r3
 800bc3a:	ebac 0c02 	sub.w	ip, ip, r2
 800bc3e:	f894 4490 	ldrb.w	r4, [r4, #1168]	; 0x490
      coef_limit = entropy->coef_limit[blkn];
 800bc42:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
      htbl = entropy->ac_cur_tbls[blkn];
 800bc46:	f8d9 8024 	ldr.w	r8, [r9, #36]	; 0x24
      coef_limit = entropy->coef_limit[blkn];
 800bc4a:	9303      	str	r3, [sp, #12]
      if (coef_limit) {
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	f000 809f 	beq.w	800bd90 <decode_mcu+0x220>
	if (s) {
 800bc52:	b1cc      	cbz	r4, 800bc88 <decode_mcu+0x118>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800bc54:	45a4      	cmp	ip, r4
 800bc56:	da09      	bge.n	800bc6c <decode_mcu+0xfc>
 800bc58:	4623      	mov	r3, r4
 800bc5a:	4662      	mov	r2, ip
 800bc5c:	4671      	mov	r1, lr
 800bc5e:	a806      	add	r0, sp, #24
 800bc60:	f7ff fa42 	bl	800b0e8 <jpeg_fill_bit_buffer>
 800bc64:	2800      	cmp	r0, #0
 800bc66:	d09b      	beq.n	800bba0 <decode_mcu+0x30>
 800bc68:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  r = GET_BITS(s);
 800bc6c:	ebac 0c04 	sub.w	ip, ip, r4
 800bc70:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800bc74:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800bc76:	fa4e f20c 	asr.w	r2, lr, ip
	  s = HUFF_EXTEND(r, s);
 800bc7a:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800bc7e:	400a      	ands	r2, r1
	  s = HUFF_EXTEND(r, s);
 800bc80:	4293      	cmp	r3, r2
 800bc82:	bfac      	ite	ge
 800bc84:	1a54      	subge	r4, r2, r1
 800bc86:	4614      	movlt	r4, r2
	ci = cinfo->MCU_membership[blkn];
 800bc88:	f506 73b8 	add.w	r3, r6, #368	; 0x170
 800bc8c:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
	s += state.last_dc_val[ci];
 800bc90:	ab10      	add	r3, sp, #64	; 0x40
 800bc92:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800bc96:	f852 3c10 	ldr.w	r3, [r2, #-16]
 800bc9a:	441c      	add	r4, r3
	state.last_dc_val[ci] = s;
 800bc9c:	f842 4c10 	str.w	r4, [r2, #-16]
	(*block)[0] = (JCOEF) s;
 800bca0:	f8ab 4000 	strh.w	r4, [fp]
      k = 1;
 800bca4:	2401      	movs	r4, #1
	for (; k < coef_limit; k++) {
 800bca6:	9b03      	ldr	r3, [sp, #12]
 800bca8:	429c      	cmp	r4, r3
 800bcaa:	db14      	blt.n	800bcd6 <decode_mcu+0x166>
      for (; k < DCTSIZE2; k++) {
 800bcac:	2c3f      	cmp	r4, #63	; 0x3f
 800bcae:	f340 8081 	ble.w	800bdb4 <decode_mcu+0x244>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800bcb2:	3701      	adds	r7, #1
 800bcb4:	e78d      	b.n	800bbd2 <decode_mcu+0x62>
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	9300      	str	r3, [sp, #0]
 800bcba:	4662      	mov	r2, ip
 800bcbc:	4623      	mov	r3, r4
 800bcbe:	4671      	mov	r1, lr
 800bcc0:	a806      	add	r0, sp, #24
 800bcc2:	f7ff fa6f 	bl	800b1a4 <jpeg_huff_decode>
 800bcc6:	1e04      	subs	r4, r0, #0
 800bcc8:	f6ff af6a 	blt.w	800bba0 <decode_mcu+0x30>
 800bccc:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800bcd0:	e7b7      	b.n	800bc42 <decode_mcu+0xd2>
 800bcd2:	2309      	movs	r3, #9
 800bcd4:	e7f0      	b.n	800bcb8 <decode_mcu+0x148>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800bcd6:	f1bc 0f07 	cmp.w	ip, #7
 800bcda:	dc0d      	bgt.n	800bcf8 <decode_mcu+0x188>
 800bcdc:	2300      	movs	r3, #0
 800bcde:	4662      	mov	r2, ip
 800bce0:	4671      	mov	r1, lr
 800bce2:	a806      	add	r0, sp, #24
 800bce4:	f7ff fa00 	bl	800b0e8 <jpeg_fill_bit_buffer>
 800bce8:	2800      	cmp	r0, #0
 800bcea:	f43f af59 	beq.w	800bba0 <decode_mcu+0x30>
 800bcee:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800bcf2:	f1bc 0f07 	cmp.w	ip, #7
 800bcf6:	dd37      	ble.n	800bd68 <decode_mcu+0x1f8>
 800bcf8:	f1ac 0308 	sub.w	r3, ip, #8
 800bcfc:	fa4e f303 	asr.w	r3, lr, r3
 800bd00:	b2db      	uxtb	r3, r3
 800bd02:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800bd06:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800bd0a:	2a00      	cmp	r2, #0
 800bd0c:	d03a      	beq.n	800bd84 <decode_mcu+0x214>
 800bd0e:	4443      	add	r3, r8
 800bd10:	ebac 0c02 	sub.w	ip, ip, r2
 800bd14:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	  if (s) {
 800bd18:	f010 030f 	ands.w	r3, r0, #15
	  r = s >> 4;
 800bd1c:	ea4f 1220 	mov.w	r2, r0, asr #4
	  if (s) {
 800bd20:	d032      	beq.n	800bd88 <decode_mcu+0x218>
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800bd22:	459c      	cmp	ip, r3
	    k += r;
 800bd24:	4414      	add	r4, r2
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800bd26:	da0b      	bge.n	800bd40 <decode_mcu+0x1d0>
 800bd28:	4662      	mov	r2, ip
 800bd2a:	4671      	mov	r1, lr
 800bd2c:	a806      	add	r0, sp, #24
 800bd2e:	9305      	str	r3, [sp, #20]
 800bd30:	f7ff f9da 	bl	800b0e8 <jpeg_fill_bit_buffer>
 800bd34:	2800      	cmp	r0, #0
 800bd36:	f43f af33 	beq.w	800bba0 <decode_mcu+0x30>
 800bd3a:	9b05      	ldr	r3, [sp, #20]
 800bd3c:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	    r = GET_BITS(s);
 800bd40:	ebac 0c03 	sub.w	ip, ip, r3
 800bd44:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
	    s = HUFF_EXTEND(r, s);
 800bd48:	3b01      	subs	r3, #1
	    r = GET_BITS(s);
 800bd4a:	fa4e f20c 	asr.w	r2, lr, ip
	    s = HUFF_EXTEND(r, s);
 800bd4e:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
	    r = GET_BITS(s);
 800bd52:	400a      	ands	r2, r1
	    s = HUFF_EXTEND(r, s);
 800bd54:	4293      	cmp	r3, r2
	    (*block)[jpeg_natural_order[k]] = (JCOEF) s;
 800bd56:	4b3d      	ldr	r3, [pc, #244]	; (800be4c <decode_mcu+0x2dc>)
	    s = HUFF_EXTEND(r, s);
 800bd58:	bfa8      	it	ge
 800bd5a:	1a52      	subge	r2, r2, r1
	    (*block)[jpeg_natural_order[k]] = (JCOEF) s;
 800bd5c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800bd60:	f82b 2013 	strh.w	r2, [fp, r3, lsl #1]
	for (; k < coef_limit; k++) {
 800bd64:	3401      	adds	r4, #1
 800bd66:	e79e      	b.n	800bca6 <decode_mcu+0x136>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800bd68:	2301      	movs	r3, #1
 800bd6a:	9300      	str	r3, [sp, #0]
 800bd6c:	4662      	mov	r2, ip
 800bd6e:	4643      	mov	r3, r8
 800bd70:	4671      	mov	r1, lr
 800bd72:	a806      	add	r0, sp, #24
 800bd74:	f7ff fa16 	bl	800b1a4 <jpeg_huff_decode>
 800bd78:	2800      	cmp	r0, #0
 800bd7a:	f6ff af11 	blt.w	800bba0 <decode_mcu+0x30>
 800bd7e:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800bd82:	e7c9      	b.n	800bd18 <decode_mcu+0x1a8>
 800bd84:	2309      	movs	r3, #9
 800bd86:	e7f0      	b.n	800bd6a <decode_mcu+0x1fa>
	    if (r != 15)
 800bd88:	2a0f      	cmp	r2, #15
 800bd8a:	d192      	bne.n	800bcb2 <decode_mcu+0x142>
	    k += 15;
 800bd8c:	340f      	adds	r4, #15
 800bd8e:	e7e9      	b.n	800bd64 <decode_mcu+0x1f4>
	if (s) {
 800bd90:	b174      	cbz	r4, 800bdb0 <decode_mcu+0x240>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800bd92:	45a4      	cmp	ip, r4
 800bd94:	da0a      	bge.n	800bdac <decode_mcu+0x23c>
 800bd96:	4623      	mov	r3, r4
 800bd98:	4662      	mov	r2, ip
 800bd9a:	4671      	mov	r1, lr
 800bd9c:	a806      	add	r0, sp, #24
 800bd9e:	f7ff f9a3 	bl	800b0e8 <jpeg_fill_bit_buffer>
 800bda2:	2800      	cmp	r0, #0
 800bda4:	f43f aefc 	beq.w	800bba0 <decode_mcu+0x30>
 800bda8:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  DROP_BITS(s);
 800bdac:	ebac 0c04 	sub.w	ip, ip, r4
      k = 1;
 800bdb0:	2401      	movs	r4, #1
 800bdb2:	e77b      	b.n	800bcac <decode_mcu+0x13c>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800bdb4:	f1bc 0f07 	cmp.w	ip, #7
 800bdb8:	dc0d      	bgt.n	800bdd6 <decode_mcu+0x266>
 800bdba:	2300      	movs	r3, #0
 800bdbc:	4662      	mov	r2, ip
 800bdbe:	4671      	mov	r1, lr
 800bdc0:	a806      	add	r0, sp, #24
 800bdc2:	f7ff f991 	bl	800b0e8 <jpeg_fill_bit_buffer>
 800bdc6:	2800      	cmp	r0, #0
 800bdc8:	f43f aeea 	beq.w	800bba0 <decode_mcu+0x30>
 800bdcc:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800bdd0:	f1bc 0f07 	cmp.w	ip, #7
 800bdd4:	dd25      	ble.n	800be22 <decode_mcu+0x2b2>
 800bdd6:	f1ac 0308 	sub.w	r3, ip, #8
 800bdda:	fa4e f303 	asr.w	r3, lr, r3
 800bdde:	b2db      	uxtb	r3, r3
 800bde0:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800bde4:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800bde8:	b34a      	cbz	r2, 800be3e <decode_mcu+0x2ce>
 800bdea:	4443      	add	r3, r8
 800bdec:	ebac 0c02 	sub.w	ip, ip, r2
 800bdf0:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800bdf4:	f010 0b0f 	ands.w	fp, r0, #15
	r = s >> 4;
 800bdf8:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800bdfc:	d021      	beq.n	800be42 <decode_mcu+0x2d2>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800bdfe:	45dc      	cmp	ip, fp
	  k += r;
 800be00:	441c      	add	r4, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800be02:	da0a      	bge.n	800be1a <decode_mcu+0x2aa>
 800be04:	465b      	mov	r3, fp
 800be06:	4662      	mov	r2, ip
 800be08:	4671      	mov	r1, lr
 800be0a:	a806      	add	r0, sp, #24
 800be0c:	f7ff f96c 	bl	800b0e8 <jpeg_fill_bit_buffer>
 800be10:	2800      	cmp	r0, #0
 800be12:	f43f aec5 	beq.w	800bba0 <decode_mcu+0x30>
 800be16:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  DROP_BITS(s);
 800be1a:	ebac 0c0b 	sub.w	ip, ip, fp
      for (; k < DCTSIZE2; k++) {
 800be1e:	3401      	adds	r4, #1
 800be20:	e744      	b.n	800bcac <decode_mcu+0x13c>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800be22:	2301      	movs	r3, #1
 800be24:	9300      	str	r3, [sp, #0]
 800be26:	4662      	mov	r2, ip
 800be28:	4643      	mov	r3, r8
 800be2a:	4671      	mov	r1, lr
 800be2c:	a806      	add	r0, sp, #24
 800be2e:	f7ff f9b9 	bl	800b1a4 <jpeg_huff_decode>
 800be32:	2800      	cmp	r0, #0
 800be34:	f6ff aeb4 	blt.w	800bba0 <decode_mcu+0x30>
 800be38:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800be3c:	e7da      	b.n	800bdf4 <decode_mcu+0x284>
 800be3e:	2309      	movs	r3, #9
 800be40:	e7f0      	b.n	800be24 <decode_mcu+0x2b4>
	  if (r != 15)
 800be42:	2b0f      	cmp	r3, #15
 800be44:	f47f af35 	bne.w	800bcb2 <decode_mcu+0x142>
	  k += 15;
 800be48:	340f      	adds	r4, #15
 800be4a:	e7e8      	b.n	800be1e <decode_mcu+0x2ae>
 800be4c:	0802c3d0 	.word	0x0802c3d0
 800be50:	0802aaf8 	.word	0x0802aaf8

0800be54 <jpeg_make_d_derived_tbl>:
{
 800be54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 800be58:	2a03      	cmp	r2, #3
{
 800be5a:	f2ad 5d24 	subw	sp, sp, #1316	; 0x524
 800be5e:	4604      	mov	r4, r0
 800be60:	4616      	mov	r6, r2
 800be62:	461f      	mov	r7, r3
 800be64:	9101      	str	r1, [sp, #4]
  if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 800be66:	d905      	bls.n	800be74 <jpeg_make_d_derived_tbl+0x20>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 800be68:	6803      	ldr	r3, [r0, #0]
 800be6a:	2234      	movs	r2, #52	; 0x34
 800be6c:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	4798      	blx	r3
    isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 800be74:	9b01      	ldr	r3, [sp, #4]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d045      	beq.n	800bf06 <jpeg_make_d_derived_tbl+0xb2>
 800be7a:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800be7e:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
  if (htbl == NULL)
 800be82:	b935      	cbnz	r5, 800be92 <jpeg_make_d_derived_tbl+0x3e>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 800be84:	6823      	ldr	r3, [r4, #0]
 800be86:	2234      	movs	r2, #52	; 0x34
 800be88:	4620      	mov	r0, r4
 800be8a:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	4798      	blx	r3
  if (*pdtbl == NULL)
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	b93b      	cbnz	r3, 800bea6 <jpeg_make_d_derived_tbl+0x52>
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800be96:	6863      	ldr	r3, [r4, #4]
 800be98:	f44f 62b2 	mov.w	r2, #1424	; 0x590
 800be9c:	2101      	movs	r1, #1
 800be9e:	4620      	mov	r0, r4
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	4798      	blx	r3
    *pdtbl = (d_derived_tbl *)
 800bea4:	6038      	str	r0, [r7, #0]
  dtbl = *pdtbl;
 800bea6:	683f      	ldr	r7, [r7, #0]
  for (l = 1; l <= 16; l++) {
 800bea8:	f04f 0801 	mov.w	r8, #1
  p = 0;
 800beac:	2600      	movs	r6, #0
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800beae:	f04f 0b09 	mov.w	fp, #9
  dtbl->pub = htbl;		/* fill in back link */
 800beb2:	f8c7 508c 	str.w	r5, [r7, #140]	; 0x8c
    i = (int) htbl->bits[l];
 800beb6:	f815 9008 	ldrb.w	r9, [r5, r8]
    if (i < 0 || p + i > 256)	/* protect against table overrun */
 800beba:	46b2      	mov	sl, r6
 800bebc:	444e      	add	r6, r9
 800bebe:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 800bec2:	dd05      	ble.n	800bed0 <jpeg_make_d_derived_tbl+0x7c>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800bec4:	6823      	ldr	r3, [r4, #0]
 800bec6:	4620      	mov	r0, r4
 800bec8:	f8c3 b014 	str.w	fp, [r3, #20]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	4798      	blx	r3
 800bed0:	ab06      	add	r3, sp, #24
 800bed2:	4453      	add	r3, sl
    while (i--)
 800bed4:	f1b9 0901 	subs.w	r9, r9, #1
 800bed8:	d21a      	bcs.n	800bf10 <jpeg_make_d_derived_tbl+0xbc>
  for (l = 1; l <= 16; l++) {
 800beda:	f108 0801 	add.w	r8, r8, #1
 800bede:	f1b8 0f11 	cmp.w	r8, #17
 800bee2:	d1e8      	bne.n	800beb6 <jpeg_make_d_derived_tbl+0x62>
  huffsize[p] = 0;
 800bee4:	2200      	movs	r2, #0
 800bee6:	ab06      	add	r3, sp, #24
      huffcode[p++] = code;
 800bee8:	f50d 7a8e 	add.w	sl, sp, #284	; 0x11c
    if (((INT32) code) >= (((INT32) 1) << si))
 800beec:	f04f 0b01 	mov.w	fp, #1
  huffsize[p] = 0;
 800bef0:	559a      	strb	r2, [r3, r6]
  p = 0;
 800bef2:	4691      	mov	r9, r2
  si = huffsize[0];
 800bef4:	f89d 8018 	ldrb.w	r8, [sp, #24]
  while (huffsize[p]) {
 800bef8:	ab06      	add	r3, sp, #24
 800befa:	f813 3009 	ldrb.w	r3, [r3, r9]
 800befe:	b31b      	cbz	r3, 800bf48 <jpeg_make_d_derived_tbl+0xf4>
 800bf00:	4649      	mov	r1, r9
 800bf02:	1a52      	subs	r2, r2, r1
 800bf04:	e00a      	b.n	800bf1c <jpeg_make_d_derived_tbl+0xc8>
    isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 800bf06:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800bf0a:	f8d3 50c4 	ldr.w	r5, [r3, #196]	; 0xc4
 800bf0e:	e7b8      	b.n	800be82 <jpeg_make_d_derived_tbl+0x2e>
      huffsize[p++] = (char) l;
 800bf10:	f803 8b01 	strb.w	r8, [r3], #1
 800bf14:	e7de      	b.n	800bed4 <jpeg_make_d_derived_tbl+0x80>
      huffcode[p++] = code;
 800bf16:	f84a 3021 	str.w	r3, [sl, r1, lsl #2]
      code++;
 800bf1a:	3101      	adds	r1, #1
    while (((int) huffsize[p]) == si) {
 800bf1c:	a806      	add	r0, sp, #24
 800bf1e:	1853      	adds	r3, r2, r1
 800bf20:	4689      	mov	r9, r1
 800bf22:	5c40      	ldrb	r0, [r0, r1]
 800bf24:	4540      	cmp	r0, r8
 800bf26:	d0f6      	beq.n	800bf16 <jpeg_make_d_derived_tbl+0xc2>
    if (((INT32) code) >= (((INT32) 1) << si))
 800bf28:	fa0b f208 	lsl.w	r2, fp, r8
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	dc07      	bgt.n	800bf40 <jpeg_make_d_derived_tbl+0xec>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800bf30:	6822      	ldr	r2, [r4, #0]
 800bf32:	2109      	movs	r1, #9
 800bf34:	4620      	mov	r0, r4
 800bf36:	9300      	str	r3, [sp, #0]
 800bf38:	6151      	str	r1, [r2, #20]
 800bf3a:	6812      	ldr	r2, [r2, #0]
 800bf3c:	4790      	blx	r2
 800bf3e:	9b00      	ldr	r3, [sp, #0]
    code <<= 1;
 800bf40:	005a      	lsls	r2, r3, #1
    si++;
 800bf42:	f108 0801 	add.w	r8, r8, #1
 800bf46:	e7d7      	b.n	800bef8 <jpeg_make_d_derived_tbl+0xa4>
 800bf48:	1c68      	adds	r0, r5, #1
 800bf4a:	1d3a      	adds	r2, r7, #4
 800bf4c:	f105 0b11 	add.w	fp, r5, #17
      dtbl->maxcode[l] = -1;	/* -1 if no codes of this length */
 800bf50:	f04f 3eff 	mov.w	lr, #4294967295
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800bf54:	f50d 7c8e 	add.w	ip, sp, #284	; 0x11c
    if (htbl->bits[l]) {
 800bf58:	f810 8b01 	ldrb.w	r8, [r0], #1
 800bf5c:	f1b8 0f00 	cmp.w	r8, #0
 800bf60:	d02a      	beq.n	800bfb8 <jpeg_make_d_derived_tbl+0x164>
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800bf62:	f85c 1023 	ldr.w	r1, [ip, r3, lsl #2]
 800bf66:	1a59      	subs	r1, r3, r1
      p += htbl->bits[l];
 800bf68:	4443      	add	r3, r8
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800bf6a:	6491      	str	r1, [r2, #72]	; 0x48
      dtbl->maxcode[l] = huffcode[p-1]; /* maximum code of length l */
 800bf6c:	1e59      	subs	r1, r3, #1
 800bf6e:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800bf72:	6011      	str	r1, [r2, #0]
  for (l = 1; l <= 16; l++) {
 800bf74:	4583      	cmp	fp, r0
 800bf76:	f102 0204 	add.w	r2, r2, #4
 800bf7a:	d1ed      	bne.n	800bf58 <jpeg_make_d_derived_tbl+0x104>
  dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */
 800bf7c:	4b2b      	ldr	r3, [pc, #172]	; (800c02c <jpeg_make_d_derived_tbl+0x1d8>)
  MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));
 800bf7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bf82:	2100      	movs	r1, #0
 800bf84:	f107 0090 	add.w	r0, r7, #144	; 0x90
  dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */
 800bf88:	647b      	str	r3, [r7, #68]	; 0x44
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800bf8a:	f50d 7a8e 	add.w	sl, sp, #284	; 0x11c
  MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));
 800bf8e:	f01b fac9 	bl	8027524 <memset>
  p = 0;
 800bf92:	2200      	movs	r2, #0
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 800bf94:	2301      	movs	r3, #1
  p = 0;
 800bf96:	9200      	str	r2, [sp, #0]
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800bf98:	f105 0211 	add.w	r2, r5, #17
 800bf9c:	9205      	str	r2, [sp, #20]
 800bf9e:	f1c3 0908 	rsb	r9, r3, #8
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800bfa2:	2201      	movs	r2, #1
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800bfa4:	f815 8003 	ldrb.w	r8, [r5, r3]
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800bfa8:	fa02 f209 	lsl.w	r2, r2, r9
 800bfac:	9900      	ldr	r1, [sp, #0]
 800bfae:	9203      	str	r2, [sp, #12]
 800bfb0:	9a00      	ldr	r2, [sp, #0]
 800bfb2:	4442      	add	r2, r8
 800bfb4:	9204      	str	r2, [sp, #16]
 800bfb6:	e01b      	b.n	800bff0 <jpeg_make_d_derived_tbl+0x19c>
      dtbl->maxcode[l] = -1;	/* -1 if no codes of this length */
 800bfb8:	f8c2 e000 	str.w	lr, [r2]
 800bfbc:	e7da      	b.n	800bf74 <jpeg_make_d_derived_tbl+0x120>
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800bfbe:	f85a 2021 	ldr.w	r2, [sl, r1, lsl #2]
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800bfc2:	9805      	ldr	r0, [sp, #20]
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800bfc4:	fa02 f209 	lsl.w	r2, r2, r9
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800bfc8:	f8dd e00c 	ldr.w	lr, [sp, #12]
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800bfcc:	5c40      	ldrb	r0, [r0, r1]
 800bfce:	f102 0c24 	add.w	ip, r2, #36	; 0x24
 800bfd2:	f502 6292 	add.w	r2, r2, #1168	; 0x490
 800bfd6:	9002      	str	r0, [sp, #8]
 800bfd8:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
 800bfdc:	443a      	add	r2, r7
 800bfde:	9802      	ldr	r0, [sp, #8]
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800bfe0:	f1be 0e01 	subs.w	lr, lr, #1
	dtbl->look_nbits[lookbits] = l;
 800bfe4:	f84c 3b04 	str.w	r3, [ip], #4
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800bfe8:	f802 0b01 	strb.w	r0, [r2], #1
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800bfec:	d1f7      	bne.n	800bfde <jpeg_make_d_derived_tbl+0x18a>
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800bfee:	3101      	adds	r1, #1
 800bff0:	9a04      	ldr	r2, [sp, #16]
 800bff2:	4291      	cmp	r1, r2
 800bff4:	d1e3      	bne.n	800bfbe <jpeg_make_d_derived_tbl+0x16a>
 800bff6:	9a00      	ldr	r2, [sp, #0]
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 800bff8:	3301      	adds	r3, #1
 800bffa:	4442      	add	r2, r8
 800bffc:	2b09      	cmp	r3, #9
 800bffe:	9200      	str	r2, [sp, #0]
 800c000:	d1cd      	bne.n	800bf9e <jpeg_make_d_derived_tbl+0x14a>
  if (isDC) {
 800c002:	9a01      	ldr	r2, [sp, #4]
 800c004:	b122      	cbz	r2, 800c010 <jpeg_make_d_derived_tbl+0x1bc>
 800c006:	3511      	adds	r5, #17
 800c008:	445e      	add	r6, fp
	ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800c00a:	461f      	mov	r7, r3
    for (i = 0; i < numsymbols; i++) {
 800c00c:	42b5      	cmp	r5, r6
 800c00e:	d103      	bne.n	800c018 <jpeg_make_d_derived_tbl+0x1c4>
}
 800c010:	f20d 5d24 	addw	sp, sp, #1316	; 0x524
 800c014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int sym = htbl->huffval[i];
 800c018:	f815 3b01 	ldrb.w	r3, [r5], #1
      if (sym < 0 || sym > 15)
 800c01c:	2b0f      	cmp	r3, #15
 800c01e:	d9f5      	bls.n	800c00c <jpeg_make_d_derived_tbl+0x1b8>
	ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800c020:	6823      	ldr	r3, [r4, #0]
 800c022:	4620      	mov	r0, r4
 800c024:	615f      	str	r7, [r3, #20]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	4798      	blx	r3
    for (i = 0; i < numsymbols; i++) {
 800c02a:	e7ef      	b.n	800c00c <jpeg_make_d_derived_tbl+0x1b8>
 800c02c:	000fffff 	.word	0x000fffff

0800c030 <start_pass_huff_decoder>:
 * Initialize for a Huffman-compressed scan.
 */

METHODDEF(void)
start_pass_huff_decoder (j_decompress_ptr cinfo)
{
 800c030:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci, blkn, tbl, i;
  jpeg_component_info * compptr;

  if (cinfo->progressive_mode) {
 800c034:	f8d0 50e0 	ldr.w	r5, [r0, #224]	; 0xe0
{
 800c038:	4682      	mov	sl, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800c03a:	f8d0 b1d0 	ldr.w	fp, [r0, #464]	; 0x1d0
  if (cinfo->progressive_mode) {
 800c03e:	f500 74aa 	add.w	r4, r0, #340	; 0x154
 800c042:	f8d0 2198 	ldr.w	r2, [r0, #408]	; 0x198
 800c046:	2d00      	cmp	r5, #0
 800c048:	f000 80ae 	beq.w	800c1a8 <start_pass_huff_decoder+0x178>
    /* Validate progressive scan parameters */
    if (cinfo->Ss == 0) {
 800c04c:	f8d0 51a4 	ldr.w	r5, [r0, #420]	; 0x1a4
 800c050:	e9d0 1667 	ldrd	r1, r6, [r0, #412]	; 0x19c
 800c054:	b962      	cbnz	r2, 800c070 <start_pass_huff_decoder+0x40>
      if (cinfo->Se != 0)
 800c056:	b1a9      	cbz	r1, 800c084 <start_pass_huff_decoder+0x54>
       * accept.  Note: large Al values could result in out-of-range DC
       * coefficients during early scans, leading to bizarre displays due to
       * overflows in the IDCT math.  But we won't crash.
       */
      bad:
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800c058:	f8da 3000 	ldr.w	r3, [sl]
 800c05c:	2711      	movs	r7, #17
 800c05e:	4650      	mov	r0, sl
 800c060:	625d      	str	r5, [r3, #36]	; 0x24
 800c062:	e9c3 7205 	strd	r7, r2, [r3, #20]
 800c066:	e9c3 1607 	strd	r1, r6, [r3, #28]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	4798      	blx	r3
 800c06e:	e00f      	b.n	800c090 <start_pass_huff_decoder+0x60>
      if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
 800c070:	4291      	cmp	r1, r2
 800c072:	dbf1      	blt.n	800c058 <start_pass_huff_decoder+0x28>
 800c074:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
 800c078:	428b      	cmp	r3, r1
 800c07a:	dbed      	blt.n	800c058 <start_pass_huff_decoder+0x28>
      if (cinfo->comps_in_scan != 1)
 800c07c:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
 800c080:	2b01      	cmp	r3, #1
 800c082:	d1e9      	bne.n	800c058 <start_pass_huff_decoder+0x28>
    if (cinfo->Ah != 0) {
 800c084:	b116      	cbz	r6, 800c08c <start_pass_huff_decoder+0x5c>
      if (cinfo->Ah-1 != cinfo->Al)
 800c086:	1e73      	subs	r3, r6, #1
 800c088:	42ab      	cmp	r3, r5
 800c08a:	d1e5      	bne.n	800c058 <start_pass_huff_decoder+0x28>
    if (cinfo->Al > 13) {	/* need not check for < 0 */
 800c08c:	2d0d      	cmp	r5, #13
 800c08e:	dce3      	bgt.n	800c058 <start_pass_huff_decoder+0x28>
{
 800c090:	46a0      	mov	r8, r4
 800c092:	2600      	movs	r6, #0
    }
    /* Update progression status, and verify that scan order is legal.
     * Note that inter-scan inconsistencies are treated as warnings
     * not fatal errors ... not clear if this is right way to behave.
     */
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c094:	f8da 2150 	ldr.w	r2, [sl, #336]	; 0x150
 800c098:	f8da 3198 	ldr.w	r3, [sl, #408]	; 0x198
 800c09c:	42b2      	cmp	r2, r6
 800c09e:	dc1e      	bgt.n	800c0de <start_pass_huff_decoder+0xae>
	coef_bit_ptr[coefi] = cinfo->Al;
      }
    }

    /* Select MCU decoding routine */
    if (cinfo->Ah == 0) {
 800c0a0:	f8da 21a0 	ldr.w	r2, [sl, #416]	; 0x1a0
 800c0a4:	2a00      	cmp	r2, #0
 800c0a6:	d155      	bne.n	800c154 <start_pass_huff_decoder+0x124>
      if (cinfo->Ss == 0)
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d151      	bne.n	800c150 <start_pass_huff_decoder+0x120>
	entropy->pub.decode_mcu = decode_mcu_DC_first;
 800c0ac:	4bb8      	ldr	r3, [pc, #736]	; (800c390 <start_pass_huff_decoder+0x360>)
{
 800c0ae:	2600      	movs	r6, #0
 800c0b0:	f10b 0714 	add.w	r7, fp, #20
      else
	entropy->pub.decode_mcu = decode_mcu_AC_first;
    } else {
      if (cinfo->Ss == 0)
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 800c0b4:	f8cb 3004 	str.w	r3, [fp, #4]
	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
				  & entropy->derived_tbls[tbl]);
	}
      } else {
	tbl = compptr->ac_tbl_no;
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800c0b8:	46b0      	mov	r8, r6
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c0ba:	f8da 3150 	ldr.w	r3, [sl, #336]	; 0x150
 800c0be:	42b3      	cmp	r3, r6
 800c0c0:	dc4d      	bgt.n	800c15e <start_pass_huff_decoder+0x12e>
      /* Initialize DC predictions to 0 */
      entropy->saved.last_dc_val[ci] = 0;
    }

    /* Initialize private state variables */
    entropy->saved.EOBRUN = 0;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	f8cb 3010 	str.w	r3, [fp, #16]
      }
    }
  }

  /* Initialize bitread state variables */
  entropy->bitstate.bits_left = 0;
 800c0c8:	2300      	movs	r3, #0
  entropy->bitstate.get_buffer = 0; /* unnecessary, but keeps Purify quiet */
 800c0ca:	e9cb 3302 	strd	r3, r3, [fp, #8]
  entropy->insufficient_data = FALSE;
 800c0ce:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800c0d2:	f8da 3118 	ldr.w	r3, [sl, #280]	; 0x118
 800c0d6:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
}
 800c0da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 800c0de:	f858 2b04 	ldr.w	r2, [r8], #4
 800c0e2:	6857      	ldr	r7, [r2, #4]
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 800c0e4:	f8da 20a0 	ldr.w	r2, [sl, #160]	; 0xa0
 800c0e8:	0239      	lsls	r1, r7, #8
 800c0ea:	eb02 2907 	add.w	r9, r2, r7, lsl #8
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800c0ee:	b173      	cbz	r3, 800c10e <start_pass_huff_decoder+0xde>
 800c0f0:	5853      	ldr	r3, [r2, r1]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	da0b      	bge.n	800c10e <start_pass_huff_decoder+0xde>
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 800c0f6:	f8da 3000 	ldr.w	r3, [sl]
 800c0fa:	2276      	movs	r2, #118	; 0x76
 800c0fc:	f04f 31ff 	mov.w	r1, #4294967295
 800c100:	4650      	mov	r0, sl
 800c102:	e9c3 2705 	strd	r2, r7, [r3, #20]
 800c106:	2200      	movs	r2, #0
 800c108:	61da      	str	r2, [r3, #28]
 800c10a:	685b      	ldr	r3, [r3, #4]
 800c10c:	4798      	blx	r3
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800c10e:	f8da 5198 	ldr.w	r5, [sl, #408]	; 0x198
 800c112:	f8da 319c 	ldr.w	r3, [sl, #412]	; 0x19c
 800c116:	42ab      	cmp	r3, r5
 800c118:	da01      	bge.n	800c11e <start_pass_huff_decoder+0xee>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c11a:	3601      	adds	r6, #1
 800c11c:	e7ba      	b.n	800c094 <start_pass_huff_decoder+0x64>
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800c11e:	f859 3025 	ldr.w	r3, [r9, r5, lsl #2]
	if (cinfo->Ah != expected)
 800c122:	f8da 21a0 	ldr.w	r2, [sl, #416]	; 0x1a0
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800c126:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	if (cinfo->Ah != expected)
 800c12a:	429a      	cmp	r2, r3
 800c12c:	d00a      	beq.n	800c144 <start_pass_huff_decoder+0x114>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 800c12e:	f8da 3000 	ldr.w	r3, [sl]
 800c132:	2276      	movs	r2, #118	; 0x76
 800c134:	f04f 31ff 	mov.w	r1, #4294967295
 800c138:	4650      	mov	r0, sl
 800c13a:	61dd      	str	r5, [r3, #28]
 800c13c:	e9c3 2705 	strd	r2, r7, [r3, #20]
 800c140:	685b      	ldr	r3, [r3, #4]
 800c142:	4798      	blx	r3
	coef_bit_ptr[coefi] = cinfo->Al;
 800c144:	f8da 31a4 	ldr.w	r3, [sl, #420]	; 0x1a4
 800c148:	f849 3025 	str.w	r3, [r9, r5, lsl #2]
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800c14c:	3501      	adds	r5, #1
 800c14e:	e7e0      	b.n	800c112 <start_pass_huff_decoder+0xe2>
	entropy->pub.decode_mcu = decode_mcu_AC_first;
 800c150:	4b90      	ldr	r3, [pc, #576]	; (800c394 <start_pass_huff_decoder+0x364>)
 800c152:	e7ac      	b.n	800c0ae <start_pass_huff_decoder+0x7e>
      if (cinfo->Ss == 0)
 800c154:	b90b      	cbnz	r3, 800c15a <start_pass_huff_decoder+0x12a>
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 800c156:	4b90      	ldr	r3, [pc, #576]	; (800c398 <start_pass_huff_decoder+0x368>)
 800c158:	e7a9      	b.n	800c0ae <start_pass_huff_decoder+0x7e>
	entropy->pub.decode_mcu = decode_mcu_AC_refine;
 800c15a:	4b90      	ldr	r3, [pc, #576]	; (800c39c <start_pass_huff_decoder+0x36c>)
 800c15c:	e7a7      	b.n	800c0ae <start_pass_huff_decoder+0x7e>
      if (cinfo->Ss == 0) {
 800c15e:	f8da 2198 	ldr.w	r2, [sl, #408]	; 0x198
      compptr = cinfo->cur_comp_info[ci];
 800c162:	f854 3b04 	ldr.w	r3, [r4], #4
      if (cinfo->Ss == 0) {
 800c166:	b97a      	cbnz	r2, 800c188 <start_pass_huff_decoder+0x158>
	if (cinfo->Ah == 0) {	/* DC refinement needs no table */
 800c168:	f8da 21a0 	ldr.w	r2, [sl, #416]	; 0x1a0
 800c16c:	b942      	cbnz	r2, 800c180 <start_pass_huff_decoder+0x150>
	  tbl = compptr->dc_tbl_no;
 800c16e:	695a      	ldr	r2, [r3, #20]
	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800c170:	2101      	movs	r1, #1
 800c172:	4650      	mov	r0, sl
 800c174:	f102 030b 	add.w	r3, r2, #11
 800c178:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800c17c:	f7ff fe6a 	bl	800be54 <jpeg_make_d_derived_tbl>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c180:	3601      	adds	r6, #1
      entropy->saved.last_dc_val[ci] = 0;
 800c182:	f847 8b04 	str.w	r8, [r7], #4
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c186:	e798      	b.n	800c0ba <start_pass_huff_decoder+0x8a>
	tbl = compptr->ac_tbl_no;
 800c188:	699d      	ldr	r5, [r3, #24]
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800c18a:	2100      	movs	r1, #0
 800c18c:	4650      	mov	r0, sl
 800c18e:	f105 030b 	add.w	r3, r5, #11
 800c192:	462a      	mov	r2, r5
	entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
 800c194:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800c198:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800c19c:	f7ff fe5a 	bl	800be54 <jpeg_make_d_derived_tbl>
	entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
 800c1a0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800c1a2:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
 800c1a6:	e7eb      	b.n	800c180 <start_pass_huff_decoder+0x150>
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800c1a8:	b982      	cbnz	r2, 800c1cc <start_pass_huff_decoder+0x19c>
 800c1aa:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
 800c1ae:	b96b      	cbnz	r3, 800c1cc <start_pass_huff_decoder+0x19c>
 800c1b0:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 800c1b4:	b953      	cbnz	r3, 800c1cc <start_pass_huff_decoder+0x19c>
 800c1b6:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
 800c1ba:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
 800c1be:	b90a      	cbnz	r2, 800c1c4 <start_pass_huff_decoder+0x194>
	((cinfo->is_baseline || cinfo->Se < DCTSIZE2) &&
 800c1c0:	2b3f      	cmp	r3, #63	; 0x3f
 800c1c2:	dc0c      	bgt.n	800c1de <start_pass_huff_decoder+0x1ae>
 800c1c4:	f8da 21b0 	ldr.w	r2, [sl, #432]	; 0x1b0
 800c1c8:	429a      	cmp	r2, r3
 800c1ca:	d008      	beq.n	800c1de <start_pass_huff_decoder+0x1ae>
      WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 800c1cc:	f8da 3000 	ldr.w	r3, [sl]
 800c1d0:	227d      	movs	r2, #125	; 0x7d
 800c1d2:	f04f 31ff 	mov.w	r1, #4294967295
 800c1d6:	4650      	mov	r0, sl
 800c1d8:	615a      	str	r2, [r3, #20]
 800c1da:	685b      	ldr	r3, [r3, #4]
 800c1dc:	4798      	blx	r3
    if (cinfo->lim_Se != DCTSIZE2-1)
 800c1de:	f8da 11b0 	ldr.w	r1, [sl, #432]	; 0x1b0
      entropy->pub.decode_mcu = decode_mcu;
 800c1e2:	2600      	movs	r6, #0
 800c1e4:	4b6e      	ldr	r3, [pc, #440]	; (800c3a0 <start_pass_huff_decoder+0x370>)
 800c1e6:	f10b 0714 	add.w	r7, fp, #20
 800c1ea:	4a6e      	ldr	r2, [pc, #440]	; (800c3a4 <start_pass_huff_decoder+0x374>)
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800c1ec:	46b0      	mov	r8, r6
      entropy->pub.decode_mcu = decode_mcu;
 800c1ee:	293f      	cmp	r1, #63	; 0x3f
 800c1f0:	bf08      	it	eq
 800c1f2:	4613      	moveq	r3, r2
 800c1f4:	f8cb 3004 	str.w	r3, [fp, #4]
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c1f8:	f8da 3150 	ldr.w	r3, [sl, #336]	; 0x150
 800c1fc:	42b3      	cmp	r3, r6
 800c1fe:	dc3c      	bgt.n	800c27a <start_pass_huff_decoder+0x24a>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c200:	f8da 016c 	ldr.w	r0, [sl, #364]	; 0x16c
 800c204:	f10b 0160 	add.w	r1, fp, #96	; 0x60
 800c208:	f50a 76b8 	add.w	r6, sl, #368	; 0x170
 800c20c:	f04f 0c06 	mov.w	ip, #6
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800c210:	4f65      	ldr	r7, [pc, #404]	; (800c3a8 <start_pass_huff_decoder+0x378>)
	  entropy->coef_limit[blkn] = 1;
 800c212:	f04f 0801 	mov.w	r8, #1
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c216:	42a8      	cmp	r0, r5
 800c218:	f77f af56 	ble.w	800c0c8 <start_pass_huff_decoder+0x98>
      ci = cinfo->MCU_membership[blkn];
 800c21c:	f856 3b04 	ldr.w	r3, [r6], #4
      compptr = cinfo->cur_comp_info[ci];
 800c220:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 800c224:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
      entropy->dc_cur_tbls[blkn] = entropy->dc_derived_tbls[compptr->dc_tbl_no];
 800c228:	6953      	ldr	r3, [r2, #20]
 800c22a:	3310      	adds	r3, #16
 800c22c:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800c230:	f841 3b04 	str.w	r3, [r1], #4
      entropy->ac_cur_tbls[blkn] = entropy->ac_derived_tbls[compptr->ac_tbl_no];
 800c234:	6993      	ldr	r3, [r2, #24]
 800c236:	3314      	adds	r3, #20
 800c238:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800c23c:	624b      	str	r3, [r1, #36]	; 0x24
      if (compptr->component_needed) {
 800c23e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800c240:	2b00      	cmp	r3, #0
 800c242:	d052      	beq.n	800c2ea <start_pass_huff_decoder+0x2ba>
	switch (cinfo->lim_Se) {
 800c244:	f8da 41b0 	ldr.w	r4, [sl, #432]	; 0x1b0
 800c248:	2c0f      	cmp	r4, #15
	i = compptr->DCT_h_scaled_size;
 800c24a:	e9d2 2309 	ldrd	r2, r3, [r2, #36]	; 0x24
	switch (cinfo->lim_Se) {
 800c24e:	d073      	beq.n	800c338 <start_pass_huff_decoder+0x308>
 800c250:	dc30      	bgt.n	800c2b4 <start_pass_huff_decoder+0x284>
 800c252:	2c03      	cmp	r4, #3
 800c254:	d04f      	beq.n	800c2f6 <start_pass_huff_decoder+0x2c6>
 800c256:	2c08      	cmp	r4, #8
 800c258:	d05d      	beq.n	800c316 <start_pass_huff_decoder+0x2e6>
 800c25a:	2c00      	cmp	r4, #0
 800c25c:	d047      	beq.n	800c2ee <start_pass_huff_decoder+0x2be>
	  if (ci <= 0 || ci > 8) ci = 8;
 800c25e:	1e5c      	subs	r4, r3, #1
 800c260:	2c08      	cmp	r4, #8
	  if (i <= 0 || i > 8) i = 8;
 800c262:	f102 34ff 	add.w	r4, r2, #4294967295
	  if (ci <= 0 || ci > 8) ci = 8;
 800c266:	bf28      	it	cs
 800c268:	2308      	movcs	r3, #8
	  if (i <= 0 || i > 8) i = 8;
 800c26a:	2c08      	cmp	r4, #8
 800c26c:	bf28      	it	cs
 800c26e:	2208      	movcs	r2, #8
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800c270:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c274:	4a4d      	ldr	r2, [pc, #308]	; (800c3ac <start_pass_huff_decoder+0x37c>)
 800c276:	3b09      	subs	r3, #9
 800c278:	e04a      	b.n	800c310 <start_pass_huff_decoder+0x2e0>
      compptr = cinfo->cur_comp_info[ci];
 800c27a:	f854 9b04 	ldr.w	r9, [r4], #4
      jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800c27e:	2101      	movs	r1, #1
 800c280:	4650      	mov	r0, sl
      tbl = compptr->dc_tbl_no;
 800c282:	f8d9 2014 	ldr.w	r2, [r9, #20]
      jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800c286:	f102 0310 	add.w	r3, r2, #16
 800c28a:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800c28e:	f7ff fde1 	bl	800be54 <jpeg_make_d_derived_tbl>
      if (cinfo->lim_Se) {	/* AC needs no table when not present */
 800c292:	f8da 31b0 	ldr.w	r3, [sl, #432]	; 0x1b0
 800c296:	b14b      	cbz	r3, 800c2ac <start_pass_huff_decoder+0x27c>
	tbl = compptr->ac_tbl_no;
 800c298:	f8d9 2018 	ldr.w	r2, [r9, #24]
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800c29c:	2100      	movs	r1, #0
 800c29e:	4650      	mov	r0, sl
 800c2a0:	f102 0314 	add.w	r3, r2, #20
 800c2a4:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800c2a8:	f7ff fdd4 	bl	800be54 <jpeg_make_d_derived_tbl>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c2ac:	3601      	adds	r6, #1
      entropy->saved.last_dc_val[ci] = 0;
 800c2ae:	f847 8b04 	str.w	r8, [r7], #4
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c2b2:	e7a1      	b.n	800c1f8 <start_pass_huff_decoder+0x1c8>
	switch (cinfo->lim_Se) {
 800c2b4:	2c23      	cmp	r4, #35	; 0x23
 800c2b6:	f103 3eff 	add.w	lr, r3, #4294967295
 800c2ba:	f102 39ff 	add.w	r9, r2, #4294967295
 800c2be:	d049      	beq.n	800c354 <start_pass_huff_decoder+0x324>
 800c2c0:	2c30      	cmp	r4, #48	; 0x30
 800c2c2:	d055      	beq.n	800c370 <start_pass_huff_decoder+0x340>
 800c2c4:	2c18      	cmp	r4, #24
 800c2c6:	d1ca      	bne.n	800c25e <start_pass_huff_decoder+0x22e>
	  if (ci <= 0 || ci > 5) ci = 5;
 800c2c8:	f1be 0f05 	cmp.w	lr, #5
 800c2cc:	bf28      	it	cs
 800c2ce:	2305      	movcs	r3, #5
	  if (i <= 0 || i > 5) i = 5;
 800c2d0:	f1b9 0f05 	cmp.w	r9, #5
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800c2d4:	f103 33ff 	add.w	r3, r3, #4294967295
	  if (i <= 0 || i > 5) i = 5;
 800c2d8:	bf28      	it	cs
 800c2da:	2205      	movcs	r2, #5
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800c2dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c2e0:	3a01      	subs	r2, #1
 800c2e2:	4413      	add	r3, r2
 800c2e4:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800c2e8:	3301      	adds	r3, #1
	entropy->coef_limit[blkn] = 0;
 800c2ea:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c2ec:	e001      	b.n	800c2f2 <start_pass_huff_decoder+0x2c2>
	  entropy->coef_limit[blkn] = 1;
 800c2ee:	f8c1 804c 	str.w	r8, [r1, #76]	; 0x4c
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c2f2:	3501      	adds	r5, #1
 800c2f4:	e78f      	b.n	800c216 <start_pass_huff_decoder+0x1e6>
	  if (ci <= 0 || ci > 2) ci = 2;
 800c2f6:	1e5c      	subs	r4, r3, #1
 800c2f8:	2c02      	cmp	r4, #2
	  if (i <= 0 || i > 2) i = 2;
 800c2fa:	f102 34ff 	add.w	r4, r2, #4294967295
	  if (ci <= 0 || ci > 2) ci = 2;
 800c2fe:	bf28      	it	cs
 800c300:	2302      	movcs	r3, #2
	  if (i <= 0 || i > 2) i = 2;
 800c302:	2c02      	cmp	r4, #2
 800c304:	bf28      	it	cs
 800c306:	2202      	movcs	r2, #2
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order2[ci - 1][i - 1];
 800c308:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800c30c:	4a28      	ldr	r2, [pc, #160]	; (800c3b0 <start_pass_huff_decoder+0x380>)
 800c30e:	3b03      	subs	r3, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800c310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c314:	e7e8      	b.n	800c2e8 <start_pass_huff_decoder+0x2b8>
	  if (ci <= 0 || ci > 3) ci = 3;
 800c316:	1e5c      	subs	r4, r3, #1
 800c318:	2c03      	cmp	r4, #3
	  if (i <= 0 || i > 3) i = 3;
 800c31a:	f102 34ff 	add.w	r4, r2, #4294967295
	  if (ci <= 0 || ci > 3) ci = 3;
 800c31e:	bf28      	it	cs
 800c320:	2303      	movcs	r3, #3
	  if (i <= 0 || i > 3) i = 3;
 800c322:	2c03      	cmp	r4, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 800c324:	f103 33ff 	add.w	r3, r3, #4294967295
	  if (i <= 0 || i > 3) i = 3;
 800c328:	bf28      	it	cs
 800c32a:	2203      	movcs	r2, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 800c32c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c330:	3a01      	subs	r2, #1
 800c332:	4413      	add	r3, r2
 800c334:	4a1f      	ldr	r2, [pc, #124]	; (800c3b4 <start_pass_huff_decoder+0x384>)
 800c336:	e7eb      	b.n	800c310 <start_pass_huff_decoder+0x2e0>
	  if (ci <= 0 || ci > 4) ci = 4;
 800c338:	1e5c      	subs	r4, r3, #1
 800c33a:	2c04      	cmp	r4, #4
	  if (i <= 0 || i > 4) i = 4;
 800c33c:	f102 34ff 	add.w	r4, r2, #4294967295
	  if (ci <= 0 || ci > 4) ci = 4;
 800c340:	bf28      	it	cs
 800c342:	2304      	movcs	r3, #4
	  if (i <= 0 || i > 4) i = 4;
 800c344:	2c04      	cmp	r4, #4
 800c346:	bf28      	it	cs
 800c348:	2204      	movcs	r2, #4
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order4[ci - 1][i - 1];
 800c34a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c34e:	4a1a      	ldr	r2, [pc, #104]	; (800c3b8 <start_pass_huff_decoder+0x388>)
 800c350:	3b05      	subs	r3, #5
 800c352:	e7dd      	b.n	800c310 <start_pass_huff_decoder+0x2e0>
	  if (ci <= 0 || ci > 6) ci = 6;
 800c354:	f1be 0f06 	cmp.w	lr, #6
 800c358:	bf28      	it	cs
 800c35a:	2306      	movcs	r3, #6
	  if (i <= 0 || i > 6) i = 6;
 800c35c:	f1b9 0f06 	cmp.w	r9, #6
 800c360:	bf28      	it	cs
 800c362:	2206      	movcs	r2, #6
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order6[ci - 1][i - 1];
 800c364:	3b01      	subs	r3, #1
 800c366:	3a01      	subs	r2, #1
 800c368:	fb0c 2303 	mla	r3, ip, r3, r2
 800c36c:	4a13      	ldr	r2, [pc, #76]	; (800c3bc <start_pass_huff_decoder+0x38c>)
 800c36e:	e7cf      	b.n	800c310 <start_pass_huff_decoder+0x2e0>
	  if (ci <= 0 || ci > 7) ci = 7;
 800c370:	f1be 0f07 	cmp.w	lr, #7
 800c374:	bf28      	it	cs
 800c376:	2307      	movcs	r3, #7
	  if (i <= 0 || i > 7) i = 7;
 800c378:	f1b9 0f07 	cmp.w	r9, #7
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800c37c:	f103 33ff 	add.w	r3, r3, #4294967295
	  if (i <= 0 || i > 7) i = 7;
 800c380:	bf28      	it	cs
 800c382:	2207      	movcs	r2, #7
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800c384:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800c388:	3a01      	subs	r2, #1
 800c38a:	4413      	add	r3, r2
 800c38c:	4a0c      	ldr	r2, [pc, #48]	; (800c3c0 <start_pass_huff_decoder+0x390>)
 800c38e:	e7bf      	b.n	800c310 <start_pass_huff_decoder+0x2e0>
 800c390:	0800b289 	.word	0x0800b289
 800c394:	0800b3fd 	.word	0x0800b3fd
 800c398:	0800b565 	.word	0x0800b565
 800c39c:	0800b5f9 	.word	0x0800b5f9
 800c3a0:	0800b881 	.word	0x0800b881
 800c3a4:	0800bb71 	.word	0x0800bb71
 800c3a8:	0802acac 	.word	0x0802acac
 800c3ac:	0802ab38 	.word	0x0802ab38
 800c3b0:	0802ac38 	.word	0x0802ac38
 800c3b4:	0802ac48 	.word	0x0802ac48
 800c3b8:	0802ac6c 	.word	0x0802ac6c
 800c3bc:	0802ad10 	.word	0x0802ad10
 800c3c0:	0802ada0 	.word	0x0802ada0

0800c3c4 <jinit_huff_decoder>:
{
  huff_entropy_ptr entropy;
  int i;

  entropy = (huff_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c3c4:	6843      	ldr	r3, [r0, #4]
 800c3c6:	22d8      	movs	r2, #216	; 0xd8
 800c3c8:	2101      	movs	r1, #1
 800c3ca:	681b      	ldr	r3, [r3, #0]
{
 800c3cc:	b570      	push	{r4, r5, r6, lr}
 800c3ce:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c3d0:	4798      	blx	r3
				SIZEOF(huff_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
  entropy->pub.start_pass = start_pass_huff_decoder;
 800c3d2:	4b19      	ldr	r3, [pc, #100]	; (800c438 <jinit_huff_decoder+0x74>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c3d4:	4604      	mov	r4, r0
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
 800c3d6:	f8c5 01d0 	str.w	r0, [r5, #464]	; 0x1d0
  entropy->pub.start_pass = start_pass_huff_decoder;
 800c3da:	6003      	str	r3, [r0, #0]

  if (cinfo->progressive_mode) {
 800c3dc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800c3e0:	b943      	cbnz	r3, 800c3f4 <jinit_huff_decoder+0x30>
      entropy->derived_tbls[i] = NULL;
    }
  } else {
    /* Mark tables unallocated */
    for (i = 0; i < NUM_HUFF_TBLS; i++) {
      entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
 800c3e2:	6503      	str	r3, [r0, #80]	; 0x50
 800c3e4:	6403      	str	r3, [r0, #64]	; 0x40
 800c3e6:	6543      	str	r3, [r0, #84]	; 0x54
 800c3e8:	6443      	str	r3, [r0, #68]	; 0x44
 800c3ea:	6583      	str	r3, [r0, #88]	; 0x58
 800c3ec:	6483      	str	r3, [r0, #72]	; 0x48
 800c3ee:	65c3      	str	r3, [r0, #92]	; 0x5c
 800c3f0:	64c3      	str	r3, [r0, #76]	; 0x4c
    }
  }
}
 800c3f2:	bd70      	pop	{r4, r5, r6, pc}
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c3f4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800c3f6:	2101      	movs	r1, #1
 800c3f8:	686b      	ldr	r3, [r5, #4]
 800c3fa:	4628      	mov	r0, r5
 800c3fc:	0212      	lsls	r2, r2, #8
	*coef_bit_ptr++ = -1;
 800c3fe:	f04f 36ff 	mov.w	r6, #4294967295
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	4798      	blx	r3
    for (ci = 0; ci < cinfo->num_components; ci++)
 800c406:	2300      	movs	r3, #0
    cinfo->coef_bits = (int (*)[DCTSIZE2])
 800c408:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
    for (ci = 0; ci < cinfo->num_components; ci++)
 800c40c:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800c410:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800c412:	f5a0 7280 	sub.w	r2, r0, #256	; 0x100
 800c416:	4299      	cmp	r1, r3
 800c418:	dc05      	bgt.n	800c426 <jinit_huff_decoder+0x62>
      entropy->derived_tbls[i] = NULL;
 800c41a:	2300      	movs	r3, #0
 800c41c:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 800c420:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
}
 800c424:	e7e5      	b.n	800c3f2 <jinit_huff_decoder+0x2e>
	*coef_bit_ptr++ = -1;
 800c426:	f842 6b04 	str.w	r6, [r2], #4
      for (i = 0; i < DCTSIZE2; i++)
 800c42a:	4282      	cmp	r2, r0
 800c42c:	d1fb      	bne.n	800c426 <jinit_huff_decoder+0x62>
    for (ci = 0; ci < cinfo->num_components; ci++)
 800c42e:	3301      	adds	r3, #1
 800c430:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800c434:	e7ec      	b.n	800c410 <jinit_huff_decoder+0x4c>
 800c436:	bf00      	nop
 800c438:	0800c031 	.word	0x0800c031

0800c43c <finish_input_pass>:
 */

METHODDEF(void)
finish_input_pass (j_decompress_ptr cinfo)
{
  cinfo->inputctl->consume_input = consume_markers;
 800c43c:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
 800c440:	4a01      	ldr	r2, [pc, #4]	; (800c448 <finish_input_pass+0xc>)
 800c442:	601a      	str	r2, [r3, #0]
}
 800c444:	4770      	bx	lr
 800c446:	bf00      	nop
 800c448:	0800c605 	.word	0x0800c605

0800c44c <reset_input_controller>:
 * Reset state to begin a fresh datastream.
 */

METHODDEF(void)
reset_input_controller (j_decompress_ptr cinfo)
{
 800c44c:	b538      	push	{r3, r4, r5, lr}
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;

  inputctl->pub.consume_input = consume_markers;
 800c44e:	4a0a      	ldr	r2, [pc, #40]	; (800c478 <reset_input_controller+0x2c>)
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
 800c450:	2500      	movs	r5, #0
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
 800c452:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
{
 800c456:	4604      	mov	r4, r0
  inputctl->pub.consume_input = consume_markers;
 800c458:	601a      	str	r2, [r3, #0]
  inputctl->pub.eoi_reached = FALSE;
  inputctl->inheaders = 1;
 800c45a:	2201      	movs	r2, #1
  inputctl->pub.eoi_reached = FALSE;
 800c45c:	e9c3 5504 	strd	r5, r5, [r3, #16]
  inputctl->inheaders = 1;
 800c460:	619a      	str	r2, [r3, #24]
  /* Reset other modules */
  (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
 800c462:	6803      	ldr	r3, [r0, #0]
 800c464:	691b      	ldr	r3, [r3, #16]
 800c466:	4798      	blx	r3
  (*cinfo->marker->reset_marker_reader) (cinfo);
 800c468:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800c46c:	4620      	mov	r0, r4
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	4798      	blx	r3
  /* Reset progression state -- would be cleaner if entropy decoder did this */
  cinfo->coef_bits = NULL;
 800c472:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
}
 800c476:	bd38      	pop	{r3, r4, r5, pc}
 800c478:	0800c605 	.word	0x0800c605

0800c47c <start_input_pass>:
  if (cinfo->comps_in_scan == 1) {
 800c47c:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 800c480:	2a01      	cmp	r2, #1
{
 800c482:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c486:	4604      	mov	r4, r0
 800c488:	f500 77aa 	add.w	r7, r0, #340	; 0x154
  if (cinfo->comps_in_scan == 1) {
 800c48c:	d135      	bne.n	800c4fa <start_input_pass+0x7e>
    compptr = cinfo->cur_comp_info[0];
 800c48e:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
    cinfo->MCUs_per_row = compptr->width_in_blocks;
 800c492:	69d9      	ldr	r1, [r3, #28]
    cinfo->MCU_rows_in_scan = compptr->height_in_blocks;
 800c494:	6a1d      	ldr	r5, [r3, #32]
    cinfo->MCUs_per_row = compptr->width_in_blocks;
 800c496:	f8c0 1164 	str.w	r1, [r0, #356]	; 0x164
    cinfo->MCU_rows_in_scan = compptr->height_in_blocks;
 800c49a:	f8c0 5168 	str.w	r5, [r0, #360]	; 0x168
    compptr->MCU_sample_width = compptr->DCT_h_scaled_size;
 800c49e:	6a59      	ldr	r1, [r3, #36]	; 0x24
    tmp = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800c4a0:	68d8      	ldr	r0, [r3, #12]
    compptr->MCU_blocks = 1;
 800c4a2:	641a      	str	r2, [r3, #64]	; 0x40
    compptr->last_col_width = 1;
 800c4a4:	e9c3 1211 	strd	r1, r2, [r3, #68]	; 0x44
    tmp = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800c4a8:	fbb5 f1f0 	udiv	r1, r5, r0
 800c4ac:	fb00 5111 	mls	r1, r0, r1, r5
    if (tmp == 0) tmp = compptr->v_samp_factor;
 800c4b0:	2900      	cmp	r1, #0
 800c4b2:	bf08      	it	eq
 800c4b4:	4601      	moveq	r1, r0
    compptr->MCU_height = 1;
 800c4b6:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
    compptr->last_row_height = tmp;
 800c4ba:	64d9      	str	r1, [r3, #76]	; 0x4c
    cinfo->MCU_membership[0] = 0;
 800c4bc:	2300      	movs	r3, #0
    cinfo->blocks_in_MCU = 1;
 800c4be:	f8c4 216c 	str.w	r2, [r4, #364]	; 0x16c
    cinfo->MCU_membership[0] = 0;
 800c4c2:	f8c4 3170 	str.w	r3, [r4, #368]	; 0x170
 800c4c6:	46b9      	mov	r9, r7
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c4c8:	2600      	movs	r6, #0
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
 800c4ca:	f04f 0a36 	mov.w	sl, #54	; 0x36
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c4ce:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800c4d2:	429e      	cmp	r6, r3
 800c4d4:	db72      	blt.n	800c5bc <start_input_pass+0x140>
  (*cinfo->entropy->start_pass) (cinfo);
 800c4d6:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 800c4da:	4620      	mov	r0, r4
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	4798      	blx	r3
  (*cinfo->coef->start_input_pass) (cinfo);
 800c4e0:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 800c4e4:	4620      	mov	r0, r4
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	4798      	blx	r3
  cinfo->inputctl->consume_input = cinfo->coef->consume_data;
 800c4ea:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
 800c4ee:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800c4f2:	6852      	ldr	r2, [r2, #4]
 800c4f4:	601a      	str	r2, [r3, #0]
}
 800c4f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (cinfo->comps_in_scan <= 0 || cinfo->comps_in_scan > MAX_COMPS_IN_SCAN)
 800c4fa:	1e53      	subs	r3, r2, #1
 800c4fc:	2b03      	cmp	r3, #3
 800c4fe:	d907      	bls.n	800c510 <start_input_pass+0x94>
      ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->comps_in_scan,
 800c500:	6803      	ldr	r3, [r0, #0]
 800c502:	211b      	movs	r1, #27
 800c504:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800c508:	2204      	movs	r2, #4
 800c50a:	61da      	str	r2, [r3, #28]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	4798      	blx	r3
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800c510:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    cinfo->blocks_in_MCU = 0;
 800c514:	2500      	movs	r5, #0
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800c516:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800c51a:	46b8      	mov	r8, r7
      jdiv_round_up((long) cinfo->image_width,
 800c51c:	69e0      	ldr	r0, [r4, #28]
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
 800c51e:	f04f 090e 	mov.w	r9, #14
      jdiv_round_up((long) cinfo->image_width,
 800c522:	4359      	muls	r1, r3
 800c524:	f009 fe12 	bl	801614c <jdiv_round_up>
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800c528:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 800c52c:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    cinfo->MCUs_per_row = (JDIMENSION)
 800c530:	f8c4 0164 	str.w	r0, [r4, #356]	; 0x164
      jdiv_round_up((long) cinfo->image_height,
 800c534:	4359      	muls	r1, r3
 800c536:	6a20      	ldr	r0, [r4, #32]
 800c538:	f009 fe08 	bl	801614c <jdiv_round_up>
    cinfo->blocks_in_MCU = 0;
 800c53c:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
    cinfo->MCU_rows_in_scan = (JDIMENSION)
 800c540:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c544:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800c548:	429d      	cmp	r5, r3
 800c54a:	dabc      	bge.n	800c4c6 <start_input_pass+0x4a>
      compptr = cinfo->cur_comp_info[ci];
 800c54c:	f858 3b04 	ldr.w	r3, [r8], #4
      compptr->MCU_width = compptr->h_samp_factor;
 800c550:	6899      	ldr	r1, [r3, #8]
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800c552:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
 800c554:	f8d3 c01c 	ldr.w	ip, [r3, #28]
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800c558:	434a      	muls	r2, r1
      compptr->MCU_height = compptr->v_samp_factor;
 800c55a:	68d8      	ldr	r0, [r3, #12]
      compptr->MCU_width = compptr->h_samp_factor;
 800c55c:	6399      	str	r1, [r3, #56]	; 0x38
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800c55e:	645a      	str	r2, [r3, #68]	; 0x44
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
 800c560:	fb00 f601 	mul.w	r6, r0, r1
      compptr->MCU_height = compptr->v_samp_factor;
 800c564:	63d8      	str	r0, [r3, #60]	; 0x3c
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
 800c566:	641e      	str	r6, [r3, #64]	; 0x40
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
 800c568:	fbbc f2f1 	udiv	r2, ip, r1
 800c56c:	fb01 c212 	mls	r2, r1, r2, ip
      if (tmp == 0) tmp = compptr->MCU_width;
 800c570:	2a00      	cmp	r2, #0
 800c572:	bf08      	it	eq
 800c574:	460a      	moveq	r2, r1
      tmp = (int) (compptr->height_in_blocks % compptr->MCU_height);
 800c576:	6a19      	ldr	r1, [r3, #32]
      compptr->last_col_width = tmp;
 800c578:	649a      	str	r2, [r3, #72]	; 0x48
      tmp = (int) (compptr->height_in_blocks % compptr->MCU_height);
 800c57a:	fbb1 f2f0 	udiv	r2, r1, r0
 800c57e:	fb00 1212 	mls	r2, r0, r2, r1
      if (tmp == 0) tmp = compptr->MCU_height;
 800c582:	2a00      	cmp	r2, #0
 800c584:	bf08      	it	eq
 800c586:	4602      	moveq	r2, r0
      compptr->last_row_height = tmp;
 800c588:	64da      	str	r2, [r3, #76]	; 0x4c
      if (cinfo->blocks_in_MCU + mcublks > D_MAX_BLOCKS_IN_MCU)
 800c58a:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800c58e:	4433      	add	r3, r6
 800c590:	2b0a      	cmp	r3, #10
 800c592:	dd05      	ble.n	800c5a0 <start_input_pass+0x124>
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
 800c594:	6823      	ldr	r3, [r4, #0]
 800c596:	4620      	mov	r0, r4
 800c598:	f8c3 9014 	str.w	r9, [r3, #20]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	4798      	blx	r3
      while (mcublks-- > 0) {
 800c5a0:	2e00      	cmp	r6, #0
 800c5a2:	dc01      	bgt.n	800c5a8 <start_input_pass+0x12c>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c5a4:	3501      	adds	r5, #1
 800c5a6:	e7cd      	b.n	800c544 <start_input_pass+0xc8>
	cinfo->MCU_membership[cinfo->blocks_in_MCU++] = ci;
 800c5a8:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800c5ac:	3e01      	subs	r6, #1
 800c5ae:	1c5a      	adds	r2, r3, #1
 800c5b0:	335c      	adds	r3, #92	; 0x5c
 800c5b2:	f8c4 216c 	str.w	r2, [r4, #364]	; 0x16c
 800c5b6:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 800c5ba:	e7f1      	b.n	800c5a0 <start_input_pass+0x124>
    compptr = cinfo->cur_comp_info[ci];
 800c5bc:	f859 7b04 	ldr.w	r7, [r9], #4
    if (compptr->quant_table != NULL)
 800c5c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5c2:	b9eb      	cbnz	r3, 800c600 <start_input_pass+0x184>
    qtblno = compptr->quant_tbl_no;
 800c5c4:	693a      	ldr	r2, [r7, #16]
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 800c5c6:	2a03      	cmp	r2, #3
 800c5c8:	f102 0528 	add.w	r5, r2, #40	; 0x28
 800c5cc:	d803      	bhi.n	800c5d6 <start_input_pass+0x15a>
	cinfo->quant_tbl_ptrs[qtblno] == NULL)
 800c5ce:	eb04 0385 	add.w	r3, r4, r5, lsl #2
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 800c5d2:	685b      	ldr	r3, [r3, #4]
 800c5d4:	b92b      	cbnz	r3, 800c5e2 <start_input_pass+0x166>
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
 800c5d6:	6823      	ldr	r3, [r4, #0]
 800c5d8:	4620      	mov	r0, r4
 800c5da:	e9c3 a205 	strd	sl, r2, [r3, #20]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	4798      	blx	r3
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c5e2:	6863      	ldr	r3, [r4, #4]
 800c5e4:	2284      	movs	r2, #132	; 0x84
 800c5e6:	2101      	movs	r1, #1
 800c5e8:	4620      	mov	r0, r4
 800c5ea:	681b      	ldr	r3, [r3, #0]
    MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
 800c5ec:	eb04 0585 	add.w	r5, r4, r5, lsl #2
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c5f0:	4798      	blx	r3
 800c5f2:	4680      	mov	r8, r0
    MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
 800c5f4:	2284      	movs	r2, #132	; 0x84
 800c5f6:	6869      	ldr	r1, [r5, #4]
 800c5f8:	f01a ff86 	bl	8027508 <memcpy>
    compptr->quant_table = qtbl;
 800c5fc:	f8c7 8050 	str.w	r8, [r7, #80]	; 0x50
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c600:	3601      	adds	r6, #1
 800c602:	e764      	b.n	800c4ce <start_input_pass+0x52>

0800c604 <consume_markers>:
{
 800c604:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
 800c608:	f8d0 61c8 	ldr.w	r6, [r0, #456]	; 0x1c8
{
 800c60c:	4604      	mov	r4, r0
  if (inputctl->pub.eoi_reached) /* After hitting EOI, read no further */
 800c60e:	6973      	ldr	r3, [r6, #20]
 800c610:	b9eb      	cbnz	r3, 800c64e <consume_markers+0x4a>
  cinfo->max_h_samp_factor = 1;
 800c612:	f04f 0901 	mov.w	r9, #1
    cinfo->natural_order = jpeg_natural_order;
 800c616:	4db3      	ldr	r5, [pc, #716]	; (800c8e4 <consume_markers+0x2e0>)
    val = (*cinfo->marker->read_markers) (cinfo);
 800c618:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800c61c:	4620      	mov	r0, r4
 800c61e:	685b      	ldr	r3, [r3, #4]
 800c620:	4798      	blx	r3
    switch (val) {
 800c622:	2801      	cmp	r0, #1
    val = (*cinfo->marker->read_markers) (cinfo);
 800c624:	4607      	mov	r7, r0
    switch (val) {
 800c626:	d016      	beq.n	800c656 <consume_markers+0x52>
 800c628:	2802      	cmp	r0, #2
 800c62a:	d111      	bne.n	800c650 <consume_markers+0x4c>
      inputctl->pub.eoi_reached = TRUE;
 800c62c:	2301      	movs	r3, #1
 800c62e:	6173      	str	r3, [r6, #20]
      if (inputctl->inheaders) { /* Tables-only datastream, apparently */
 800c630:	69b3      	ldr	r3, [r6, #24]
 800c632:	2b00      	cmp	r3, #0
 800c634:	f000 8175 	beq.w	800c922 <consume_markers+0x31e>
	if (cinfo->marker->saw_SOF)
 800c638:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800c63c:	691b      	ldr	r3, [r3, #16]
 800c63e:	b133      	cbz	r3, 800c64e <consume_markers+0x4a>
	  ERREXIT(cinfo, JERR_SOF_NO_SOS);
 800c640:	6823      	ldr	r3, [r4, #0]
 800c642:	223d      	movs	r2, #61	; 0x3d
 800c644:	4620      	mov	r0, r4
 800c646:	615a      	str	r2, [r3, #20]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	4798      	blx	r3
 800c64c:	e000      	b.n	800c650 <consume_markers+0x4c>
    return JPEG_REACHED_EOI;
 800c64e:	2702      	movs	r7, #2
}
 800c650:	4638      	mov	r0, r7
 800c652:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (inputctl->inheaders) { /* 1st SOS */
 800c656:	69b3      	ldr	r3, [r6, #24]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	f000 8151 	beq.w	800c900 <consume_markers+0x2fc>
	if (inputctl->inheaders == 1)
 800c65e:	2b01      	cmp	r3, #1
 800c660:	f040 80d8 	bne.w	800c814 <consume_markers+0x210>
  if ((long) cinfo->image_height > (long) JPEG_MAX_DIMENSION ||
 800c664:	6a22      	ldr	r2, [r4, #32]
 800c666:	f64f 73dc 	movw	r3, #65500	; 0xffdc
 800c66a:	429a      	cmp	r2, r3
 800c66c:	dc02      	bgt.n	800c674 <consume_markers+0x70>
 800c66e:	69e2      	ldr	r2, [r4, #28]
 800c670:	429a      	cmp	r2, r3
 800c672:	dd08      	ble.n	800c686 <consume_markers+0x82>
    ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) JPEG_MAX_DIMENSION);
 800c674:	6823      	ldr	r3, [r4, #0]
 800c676:	212a      	movs	r1, #42	; 0x2a
 800c678:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 800c67c:	4620      	mov	r0, r4
 800c67e:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	4798      	blx	r3
  if (cinfo->data_precision != BITS_IN_JSAMPLE)
 800c686:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
 800c68a:	2a08      	cmp	r2, #8
 800c68c:	d006      	beq.n	800c69c <consume_markers+0x98>
    ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
 800c68e:	6823      	ldr	r3, [r4, #0]
 800c690:	2110      	movs	r1, #16
 800c692:	4620      	mov	r0, r4
 800c694:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	4798      	blx	r3
  if (cinfo->num_components > MAX_COMPONENTS)
 800c69c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c69e:	2a0a      	cmp	r2, #10
 800c6a0:	dd08      	ble.n	800c6b4 <consume_markers+0xb0>
    ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
 800c6a2:	6823      	ldr	r3, [r4, #0]
 800c6a4:	211b      	movs	r1, #27
 800c6a6:	4620      	mov	r0, r4
 800c6a8:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800c6ac:	220a      	movs	r2, #10
 800c6ae:	61da      	str	r2, [r3, #28]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	4798      	blx	r3
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c6b4:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
 800c6b8:	f04f 0a00 	mov.w	sl, #0
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
 800c6bc:	f04f 0b13 	mov.w	fp, #19
  cinfo->max_v_samp_factor = 1;
 800c6c0:	e9c4 994e 	strd	r9, r9, [r4, #312]	; 0x138
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c6c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6c6:	459a      	cmp	sl, r3
 800c6c8:	db0d      	blt.n	800c6e6 <consume_markers+0xe2>
  if (cinfo->is_baseline || (cinfo->progressive_mode &&
 800c6ca:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 800c6ce:	b92b      	cbnz	r3, 800c6dc <consume_markers+0xd8>
 800c6d0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800c6d4:	b383      	cbz	r3, 800c738 <consume_markers+0x134>
 800c6d6:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800c6da:	b36b      	cbz	r3, 800c738 <consume_markers+0x134>
    cinfo->block_size = DCTSIZE;
 800c6dc:	2308      	movs	r3, #8
      cinfo->natural_order = jpeg_natural_order;
 800c6de:	e9c4 356a 	strd	r3, r5, [r4, #424]	; 0x1a8
      cinfo->lim_Se = DCTSIZE2-1;
 800c6e2:	233f      	movs	r3, #63	; 0x3f
 800c6e4:	e071      	b.n	800c7ca <consume_markers+0x1c6>
    if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
 800c6e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c6ea:	3b01      	subs	r3, #1
 800c6ec:	2b03      	cmp	r3, #3
 800c6ee:	d804      	bhi.n	800c6fa <consume_markers+0xf6>
 800c6f0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c6f4:	3b01      	subs	r3, #1
 800c6f6:	2b03      	cmp	r3, #3
 800c6f8:	d905      	bls.n	800c706 <consume_markers+0x102>
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
 800c6fa:	6823      	ldr	r3, [r4, #0]
 800c6fc:	4620      	mov	r0, r4
 800c6fe:	f8c3 b014 	str.w	fp, [r3, #20]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	4798      	blx	r3
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800c706:	f8d8 3008 	ldr.w	r3, [r8, #8]
       ci++, compptr++) {
 800c70a:	f10a 0a01 	add.w	sl, sl, #1
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800c70e:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
       ci++, compptr++) {
 800c712:	f108 0858 	add.w	r8, r8, #88	; 0x58
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800c716:	429a      	cmp	r2, r3
 800c718:	bfac      	ite	ge
 800c71a:	f8c4 2138 	strge.w	r2, [r4, #312]	; 0x138
 800c71e:	f8c4 3138 	strlt.w	r3, [r4, #312]	; 0x138
    cinfo->max_v_samp_factor = MAX(cinfo->max_v_samp_factor,
 800c722:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 800c726:	f858 3c4c 	ldr.w	r3, [r8, #-76]
 800c72a:	429a      	cmp	r2, r3
 800c72c:	bfac      	ite	ge
 800c72e:	f8c4 213c 	strge.w	r2, [r4, #316]	; 0x13c
 800c732:	f8c4 313c 	strlt.w	r3, [r4, #316]	; 0x13c
       ci++, compptr++) {
 800c736:	e7c5      	b.n	800c6c4 <consume_markers+0xc0>
    switch (cinfo->Se) {
 800c738:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 800c73c:	2b50      	cmp	r3, #80	; 0x50
 800c73e:	f000 808a 	beq.w	800c856 <consume_markers+0x252>
 800c742:	dc2b      	bgt.n	800c79c <consume_markers+0x198>
 800c744:	2b18      	cmp	r3, #24
 800c746:	d078      	beq.n	800c83a <consume_markers+0x236>
 800c748:	dc1d      	bgt.n	800c786 <consume_markers+0x182>
 800c74a:	2b08      	cmp	r3, #8
 800c74c:	d070      	beq.n	800c830 <consume_markers+0x22c>
 800c74e:	dc13      	bgt.n	800c778 <consume_markers+0x174>
 800c750:	b3bb      	cbz	r3, 800c7c2 <consume_markers+0x1be>
 800c752:	2b03      	cmp	r3, #3
 800c754:	d065      	beq.n	800c822 <consume_markers+0x21e>
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800c756:	6822      	ldr	r2, [r4, #0]
 800c758:	2111      	movs	r1, #17
 800c75a:	4620      	mov	r0, r4
 800c75c:	6151      	str	r1, [r2, #20]
 800c75e:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
 800c762:	e9c2 1306 	strd	r1, r3, [r2, #24]
 800c766:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 800c76a:	6213      	str	r3, [r2, #32]
 800c76c:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 800c770:	6253      	str	r3, [r2, #36]	; 0x24
 800c772:	6813      	ldr	r3, [r2, #0]
 800c774:	4798      	blx	r3
      break;
 800c776:	e02a      	b.n	800c7ce <consume_markers+0x1ca>
    switch (cinfo->Se) {
 800c778:	2b0f      	cmp	r3, #15
 800c77a:	d1ec      	bne.n	800c756 <consume_markers+0x152>
      cinfo->block_size = 4;
 800c77c:	2204      	movs	r2, #4
 800c77e:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order4;
 800c782:	4a59      	ldr	r2, [pc, #356]	; (800c8e8 <consume_markers+0x2e4>)
 800c784:	e051      	b.n	800c82a <consume_markers+0x226>
    switch (cinfo->Se) {
 800c786:	2b30      	cmp	r3, #48	; 0x30
 800c788:	d05c      	beq.n	800c844 <consume_markers+0x240>
 800c78a:	2b3f      	cmp	r3, #63	; 0x3f
 800c78c:	d05f      	beq.n	800c84e <consume_markers+0x24a>
 800c78e:	2b23      	cmp	r3, #35	; 0x23
 800c790:	d1e1      	bne.n	800c756 <consume_markers+0x152>
      cinfo->block_size = 6;
 800c792:	2206      	movs	r2, #6
 800c794:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order6;
 800c798:	4a54      	ldr	r2, [pc, #336]	; (800c8ec <consume_markers+0x2e8>)
 800c79a:	e046      	b.n	800c82a <consume_markers+0x226>
    switch (cinfo->Se) {
 800c79c:	2ba8      	cmp	r3, #168	; 0xa8
 800c79e:	d060      	beq.n	800c862 <consume_markers+0x25e>
 800c7a0:	dc07      	bgt.n	800c7b2 <consume_markers+0x1ae>
 800c7a2:	2b78      	cmp	r3, #120	; 0x78
 800c7a4:	d059      	beq.n	800c85a <consume_markers+0x256>
 800c7a6:	2b8f      	cmp	r3, #143	; 0x8f
 800c7a8:	d059      	beq.n	800c85e <consume_markers+0x25a>
 800c7aa:	2b63      	cmp	r3, #99	; 0x63
 800c7ac:	d1d3      	bne.n	800c756 <consume_markers+0x152>
      cinfo->block_size = 10;
 800c7ae:	230a      	movs	r3, #10
 800c7b0:	e795      	b.n	800c6de <consume_markers+0xda>
    switch (cinfo->Se) {
 800c7b2:	2be0      	cmp	r3, #224	; 0xe0
 800c7b4:	d057      	beq.n	800c866 <consume_markers+0x262>
 800c7b6:	2bff      	cmp	r3, #255	; 0xff
 800c7b8:	d057      	beq.n	800c86a <consume_markers+0x266>
 800c7ba:	2bc3      	cmp	r3, #195	; 0xc3
 800c7bc:	d1cb      	bne.n	800c756 <consume_markers+0x152>
      cinfo->block_size = 14;
 800c7be:	230e      	movs	r3, #14
 800c7c0:	e78d      	b.n	800c6de <consume_markers+0xda>
      cinfo->block_size = 1;
 800c7c2:	f8c4 91a8 	str.w	r9, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order; /* not needed */
 800c7c6:	f8c4 51ac 	str.w	r5, [r4, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800c7ca:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c7ce:	f04f 0a00 	mov.w	sl, #0
  cinfo->min_DCT_h_scaled_size = cinfo->block_size;
 800c7d2:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c7d6:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
    compptr->quant_table = NULL;
 800c7da:	46d3      	mov	fp, sl
  cinfo->min_DCT_v_scaled_size = cinfo->block_size;
 800c7dc:	e9c4 3350 	strd	r3, r3, [r4, #320]	; 0x140
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c7e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7e2:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800c7e6:	459a      	cmp	sl, r3
 800c7e8:	db41      	blt.n	800c86e <consume_markers+0x26a>
	          (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800c7ea:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    jdiv_round_up((long) cinfo->image_height,
 800c7ee:	6a20      	ldr	r0, [r4, #32]
 800c7f0:	4359      	muls	r1, r3
 800c7f2:	f009 fcab 	bl	801614c <jdiv_round_up>
  if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
 800c7f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7f8:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
  cinfo->total_iMCU_rows = (JDIMENSION)
 800c7fc:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
 800c800:	429a      	cmp	r2, r3
 800c802:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800c806:	db03      	blt.n	800c810 <consume_markers+0x20c>
 800c808:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 800c80c:	2a00      	cmp	r2, #0
 800c80e:	d063      	beq.n	800c8d8 <consume_markers+0x2d4>
    cinfo->inputctl->has_multiple_scans = TRUE;
 800c810:	f8c3 9010 	str.w	r9, [r3, #16]
	if (cinfo->comps_in_scan == 0) { /* pseudo SOS marker */
 800c814:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d15f      	bne.n	800c8dc <consume_markers+0x2d8>
	  inputctl->inheaders = 2;
 800c81c:	2302      	movs	r3, #2
 800c81e:	61b3      	str	r3, [r6, #24]
	  break;
 800c820:	e6fa      	b.n	800c618 <consume_markers+0x14>
      cinfo->block_size = 2;
 800c822:	2202      	movs	r2, #2
 800c824:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order2;
 800c828:	4a31      	ldr	r2, [pc, #196]	; (800c8f0 <consume_markers+0x2ec>)
      cinfo->natural_order = jpeg_natural_order7;
 800c82a:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800c82e:	e7cc      	b.n	800c7ca <consume_markers+0x1c6>
      cinfo->block_size = 3;
 800c830:	2203      	movs	r2, #3
 800c832:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order3;
 800c836:	4a2f      	ldr	r2, [pc, #188]	; (800c8f4 <consume_markers+0x2f0>)
 800c838:	e7f7      	b.n	800c82a <consume_markers+0x226>
      cinfo->block_size = 5;
 800c83a:	2205      	movs	r2, #5
 800c83c:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order5;
 800c840:	4a2d      	ldr	r2, [pc, #180]	; (800c8f8 <consume_markers+0x2f4>)
 800c842:	e7f2      	b.n	800c82a <consume_markers+0x226>
      cinfo->block_size = 7;
 800c844:	2207      	movs	r2, #7
 800c846:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order7;
 800c84a:	4a2c      	ldr	r2, [pc, #176]	; (800c8fc <consume_markers+0x2f8>)
 800c84c:	e7ed      	b.n	800c82a <consume_markers+0x226>
      cinfo->block_size = 8;
 800c84e:	2208      	movs	r2, #8
 800c850:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 800c854:	e7b7      	b.n	800c7c6 <consume_markers+0x1c2>
      cinfo->block_size = 9;
 800c856:	2309      	movs	r3, #9
 800c858:	e741      	b.n	800c6de <consume_markers+0xda>
      cinfo->block_size = 11;
 800c85a:	230b      	movs	r3, #11
 800c85c:	e73f      	b.n	800c6de <consume_markers+0xda>
      cinfo->block_size = 12;
 800c85e:	230c      	movs	r3, #12
 800c860:	e73d      	b.n	800c6de <consume_markers+0xda>
      cinfo->block_size = 13;
 800c862:	230d      	movs	r3, #13
 800c864:	e73b      	b.n	800c6de <consume_markers+0xda>
      cinfo->block_size = 15;
 800c866:	230f      	movs	r3, #15
 800c868:	e739      	b.n	800c6de <consume_markers+0xda>
      cinfo->block_size = 16;
 800c86a:	2310      	movs	r3, #16
 800c86c:	e737      	b.n	800c6de <consume_markers+0xda>
    compptr->DCT_v_scaled_size = cinfo->block_size;
 800c86e:	e9c8 1109 	strd	r1, r1, [r8, #36]	; 0x24
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800c872:	f8d8 0008 	ldr.w	r0, [r8, #8]
       ci++, compptr++) {
 800c876:	f10a 0a01 	add.w	sl, sl, #1
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800c87a:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800c87e:	69e3      	ldr	r3, [r4, #28]
 800c880:	4351      	muls	r1, r2
 800c882:	4358      	muls	r0, r3
 800c884:	f009 fc62 	bl	801614c <jdiv_round_up>
    compptr->width_in_blocks = (JDIMENSION)
 800c888:	f8c8 001c 	str.w	r0, [r8, #28]
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800c88c:	f8d8 000c 	ldr.w	r0, [r8, #12]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800c890:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800c894:	6a23      	ldr	r3, [r4, #32]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800c896:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800c89a:	4358      	muls	r0, r3
 800c89c:	4351      	muls	r1, r2
 800c89e:	f009 fc55 	bl	801614c <jdiv_round_up>
    compptr->height_in_blocks = (JDIMENSION)
 800c8a2:	f8c8 0020 	str.w	r0, [r8, #32]
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800c8a6:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800c8aa:	69e3      	ldr	r3, [r4, #28]
 800c8ac:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 800c8b0:	4358      	muls	r0, r3
 800c8b2:	f009 fc4b 	bl	801614c <jdiv_round_up>
    compptr->downsampled_width = (JDIMENSION)
 800c8b6:	f8c8 002c 	str.w	r0, [r8, #44]	; 0x2c
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800c8ba:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800c8be:	6a23      	ldr	r3, [r4, #32]
 800c8c0:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 800c8c4:	4358      	muls	r0, r3
 800c8c6:	f009 fc41 	bl	801614c <jdiv_round_up>
    compptr->quant_table = NULL;
 800c8ca:	f8c8 b050 	str.w	fp, [r8, #80]	; 0x50
    compptr->component_needed = TRUE;
 800c8ce:	e9c8 090c 	strd	r0, r9, [r8, #48]	; 0x30
       ci++, compptr++) {
 800c8d2:	f108 0858 	add.w	r8, r8, #88	; 0x58
 800c8d6:	e783      	b.n	800c7e0 <consume_markers+0x1dc>
    cinfo->inputctl->has_multiple_scans = FALSE;
 800c8d8:	611a      	str	r2, [r3, #16]
 800c8da:	e79b      	b.n	800c814 <consume_markers+0x210>
	inputctl->inheaders = 0;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	61b3      	str	r3, [r6, #24]
 800c8e0:	e6b6      	b.n	800c650 <consume_markers+0x4c>
 800c8e2:	bf00      	nop
 800c8e4:	0802c3d0 	.word	0x0802c3d0
 800c8e8:	0802c5c4 	.word	0x0802c5c4
 800c8ec:	0802c6e8 	.word	0x0802c6e8
 800c8f0:	0802c510 	.word	0x0802c510
 800c8f4:	0802c560 	.word	0x0802c560
 800c8f8:	0802c644 	.word	0x0802c644
 800c8fc:	0802c7b8 	.word	0x0802c7b8
	if (! inputctl->pub.has_multiple_scans)
 800c900:	6933      	ldr	r3, [r6, #16]
 800c902:	b92b      	cbnz	r3, 800c910 <consume_markers+0x30c>
	  ERREXIT(cinfo, JERR_EOI_EXPECTED); /* Oops, I wasn't expecting this! */
 800c904:	6823      	ldr	r3, [r4, #0]
 800c906:	2224      	movs	r2, #36	; 0x24
 800c908:	4620      	mov	r0, r4
 800c90a:	615a      	str	r2, [r3, #20]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	4798      	blx	r3
	if (cinfo->comps_in_scan == 0) /* unexpected pseudo SOS marker */
 800c910:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800c914:	2b00      	cmp	r3, #0
 800c916:	f43f ae7f 	beq.w	800c618 <consume_markers+0x14>
	start_input_pass(cinfo);
 800c91a:	4620      	mov	r0, r4
 800c91c:	f7ff fdae 	bl	800c47c <start_input_pass>
 800c920:	e696      	b.n	800c650 <consume_markers+0x4c>
	if (cinfo->output_scan_number > cinfo->input_scan_number)
 800c922:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c926:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800c92a:	429a      	cmp	r2, r3
 800c92c:	f77f ae8f 	ble.w	800c64e <consume_markers+0x4a>
	  cinfo->output_scan_number = cinfo->input_scan_number;
 800c930:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 800c934:	e68c      	b.n	800c650 <consume_markers+0x4c>
 800c936:	bf00      	nop

0800c938 <jpeg_core_output_dimensions>:
  if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom) {
 800c938:	f8d0 11a8 	ldr.w	r1, [r0, #424]	; 0x1a8
 800c93c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800c93e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800c940:	434a      	muls	r2, r1
 800c942:	429a      	cmp	r2, r3
{
 800c944:	b570      	push	{r4, r5, r6, lr}
 800c946:	4604      	mov	r4, r0
 800c948:	69c0      	ldr	r0, [r0, #28]
  if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom) {
 800c94a:	d80c      	bhi.n	800c966 <jpeg_core_output_dimensions+0x2e>
      jdiv_round_up((long) cinfo->image_width, (long) cinfo->block_size);
 800c94c:	f009 fbfe 	bl	801614c <jdiv_round_up>
      jdiv_round_up((long) cinfo->image_height, (long) cinfo->block_size);
 800c950:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    cinfo->output_width = (JDIMENSION)
 800c954:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height, (long) cinfo->block_size);
 800c956:	6a20      	ldr	r0, [r4, #32]
 800c958:	f009 fbf8 	bl	801614c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 1;
 800c95c:	2301      	movs	r3, #1
    cinfo->output_height = (JDIMENSION)
 800c95e:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_v_scaled_size = 16;
 800c960:	e9c4 3350 	strd	r3, r3, [r4, #320]	; 0x140
 800c964:	e059      	b.n	800ca1a <jpeg_core_output_dimensions+0xe2>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 2) {
 800c966:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800c96a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800c96e:	d80c      	bhi.n	800c98a <jpeg_core_output_dimensions+0x52>
      jdiv_round_up((long) cinfo->image_width * 2L, (long) cinfo->block_size);
 800c970:	0040      	lsls	r0, r0, #1
 800c972:	f009 fbeb 	bl	801614c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800c976:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 2L, (long) cinfo->block_size);
 800c978:	6a20      	ldr	r0, [r4, #32]
 800c97a:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800c97e:	0040      	lsls	r0, r0, #1
 800c980:	f009 fbe4 	bl	801614c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 2;
 800c984:	2302      	movs	r3, #2
    cinfo->output_height = (JDIMENSION)
 800c986:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 2;
 800c988:	e7ea      	b.n	800c960 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 3) {
 800c98a:	441d      	add	r5, r3
 800c98c:	42aa      	cmp	r2, r5
 800c98e:	d80e      	bhi.n	800c9ae <jpeg_core_output_dimensions+0x76>
      jdiv_round_up((long) cinfo->image_width * 3L, (long) cinfo->block_size);
 800c990:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800c994:	f009 fbda 	bl	801614c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800c998:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 3L, (long) cinfo->block_size);
 800c99a:	6a20      	ldr	r0, [r4, #32]
 800c99c:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800c9a0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800c9a4:	f009 fbd2 	bl	801614c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 3;
 800c9a8:	2303      	movs	r3, #3
    cinfo->output_height = (JDIMENSION)
 800c9aa:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 3;
 800c9ac:	e7d8      	b.n	800c960 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 4) {
 800c9ae:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 800c9b2:	ea4f 0583 	mov.w	r5, r3, lsl #2
 800c9b6:	d80c      	bhi.n	800c9d2 <jpeg_core_output_dimensions+0x9a>
      jdiv_round_up((long) cinfo->image_width * 4L, (long) cinfo->block_size);
 800c9b8:	0080      	lsls	r0, r0, #2
 800c9ba:	f009 fbc7 	bl	801614c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800c9be:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 4L, (long) cinfo->block_size);
 800c9c0:	6a20      	ldr	r0, [r4, #32]
 800c9c2:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800c9c6:	0080      	lsls	r0, r0, #2
 800c9c8:	f009 fbc0 	bl	801614c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 4;
 800c9cc:	2304      	movs	r3, #4
    cinfo->output_height = (JDIMENSION)
 800c9ce:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 4;
 800c9d0:	e7c6      	b.n	800c960 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 5) {
 800c9d2:	441d      	add	r5, r3
 800c9d4:	42aa      	cmp	r2, r5
 800c9d6:	d80e      	bhi.n	800c9f6 <jpeg_core_output_dimensions+0xbe>
      jdiv_round_up((long) cinfo->image_width * 5L, (long) cinfo->block_size);
 800c9d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800c9dc:	f009 fbb6 	bl	801614c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800c9e0:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 5L, (long) cinfo->block_size);
 800c9e2:	6a20      	ldr	r0, [r4, #32]
 800c9e4:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800c9e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800c9ec:	f009 fbae 	bl	801614c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 5;
 800c9f0:	2305      	movs	r3, #5
    cinfo->output_height = (JDIMENSION)
 800c9f2:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 5;
 800c9f4:	e7b4      	b.n	800c960 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 6) {
 800c9f6:	2506      	movs	r5, #6
 800c9f8:	fb05 f603 	mul.w	r6, r5, r3
 800c9fc:	42b2      	cmp	r2, r6
 800c9fe:	d813      	bhi.n	800ca28 <jpeg_core_output_dimensions+0xf0>
      jdiv_round_up((long) cinfo->image_width * 14L, (long) cinfo->block_size);
 800ca00:	4368      	muls	r0, r5
 800ca02:	f009 fba3 	bl	801614c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800ca06:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 14L, (long) cinfo->block_size);
 800ca08:	6a20      	ldr	r0, [r4, #32]
 800ca0a:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800ca0e:	4368      	muls	r0, r5
 800ca10:	f009 fb9c 	bl	801614c <jdiv_round_up>
    cinfo->output_height = (JDIMENSION)
 800ca14:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_v_scaled_size = 14;
 800ca16:	e9c4 5550 	strd	r5, r5, [r4, #320]	; 0x140
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ca1a:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800ca1e:	2200      	movs	r2, #0
 800ca20:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ca22:	4291      	cmp	r1, r2
 800ca24:	dc6f      	bgt.n	800cb06 <jpeg_core_output_dimensions+0x1ce>
}
 800ca26:	bd70      	pop	{r4, r5, r6, pc}
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 7) {
 800ca28:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 800ca2c:	00dd      	lsls	r5, r3, #3
 800ca2e:	42b2      	cmp	r2, r6
 800ca30:	d80e      	bhi.n	800ca50 <jpeg_core_output_dimensions+0x118>
      jdiv_round_up((long) cinfo->image_width * 7L, (long) cinfo->block_size);
 800ca32:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800ca36:	f009 fb89 	bl	801614c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800ca3a:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 7L, (long) cinfo->block_size);
 800ca3c:	6a20      	ldr	r0, [r4, #32]
 800ca3e:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800ca42:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800ca46:	f009 fb81 	bl	801614c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 7;
 800ca4a:	2307      	movs	r3, #7
    cinfo->output_height = (JDIMENSION)
 800ca4c:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 7;
 800ca4e:	e787      	b.n	800c960 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 8) {
 800ca50:	42aa      	cmp	r2, r5
 800ca52:	d80c      	bhi.n	800ca6e <jpeg_core_output_dimensions+0x136>
      jdiv_round_up((long) cinfo->image_width * 8L, (long) cinfo->block_size);
 800ca54:	00c0      	lsls	r0, r0, #3
 800ca56:	f009 fb79 	bl	801614c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800ca5a:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 8L, (long) cinfo->block_size);
 800ca5c:	6a20      	ldr	r0, [r4, #32]
 800ca5e:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800ca62:	00c0      	lsls	r0, r0, #3
 800ca64:	f009 fb72 	bl	801614c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 8;
 800ca68:	2308      	movs	r3, #8
    cinfo->output_height = (JDIMENSION)
 800ca6a:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 8;
 800ca6c:	e778      	b.n	800c960 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 9) {
 800ca6e:	441d      	add	r5, r3
 800ca70:	42aa      	cmp	r2, r5
 800ca72:	d80e      	bhi.n	800ca92 <jpeg_core_output_dimensions+0x15a>
      jdiv_round_up((long) cinfo->image_width * 9L, (long) cinfo->block_size);
 800ca74:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800ca78:	f009 fb68 	bl	801614c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800ca7c:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 9L, (long) cinfo->block_size);
 800ca7e:	6a20      	ldr	r0, [r4, #32]
 800ca80:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800ca84:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800ca88:	f009 fb60 	bl	801614c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 9;
 800ca8c:	2309      	movs	r3, #9
    cinfo->output_height = (JDIMENSION)
 800ca8e:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 9;
 800ca90:	e766      	b.n	800c960 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 10) {
 800ca92:	250a      	movs	r5, #10
 800ca94:	fb05 f603 	mul.w	r6, r5, r3
 800ca98:	42b2      	cmp	r2, r6
 800ca9a:	d9b1      	bls.n	800ca00 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 11) {
 800ca9c:	250b      	movs	r5, #11
 800ca9e:	fb05 f603 	mul.w	r6, r5, r3
 800caa2:	42b2      	cmp	r2, r6
 800caa4:	d9ac      	bls.n	800ca00 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 12) {
 800caa6:	250c      	movs	r5, #12
 800caa8:	fb05 f603 	mul.w	r6, r5, r3
 800caac:	42b2      	cmp	r2, r6
 800caae:	d9a7      	bls.n	800ca00 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 13) {
 800cab0:	250d      	movs	r5, #13
 800cab2:	fb05 f603 	mul.w	r6, r5, r3
 800cab6:	42b2      	cmp	r2, r6
 800cab8:	d9a2      	bls.n	800ca00 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 14) {
 800caba:	250e      	movs	r5, #14
 800cabc:	fb05 f603 	mul.w	r6, r5, r3
 800cac0:	42b2      	cmp	r2, r6
 800cac2:	d99d      	bls.n	800ca00 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 15) {
 800cac4:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800cac8:	429a      	cmp	r2, r3
 800caca:	ea4f 1300 	mov.w	r3, r0, lsl #4
 800cace:	d80d      	bhi.n	800caec <jpeg_core_output_dimensions+0x1b4>
      jdiv_round_up((long) cinfo->image_width * 15L, (long) cinfo->block_size);
 800cad0:	1a18      	subs	r0, r3, r0
 800cad2:	f009 fb3b 	bl	801614c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800cad6:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 15L, (long) cinfo->block_size);
 800cad8:	6a20      	ldr	r0, [r4, #32]
 800cada:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800cade:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 800cae2:	f009 fb33 	bl	801614c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 15;
 800cae6:	230f      	movs	r3, #15
    cinfo->output_height = (JDIMENSION)
 800cae8:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 15;
 800caea:	e739      	b.n	800c960 <jpeg_core_output_dimensions+0x28>
      jdiv_round_up((long) cinfo->image_width * 16L, (long) cinfo->block_size);
 800caec:	4618      	mov	r0, r3
 800caee:	f009 fb2d 	bl	801614c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800caf2:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 16L, (long) cinfo->block_size);
 800caf4:	6a20      	ldr	r0, [r4, #32]
 800caf6:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800cafa:	0100      	lsls	r0, r0, #4
 800cafc:	f009 fb26 	bl	801614c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 16;
 800cb00:	2310      	movs	r3, #16
    cinfo->output_height = (JDIMENSION)
 800cb02:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 16;
 800cb04:	e72c      	b.n	800c960 <jpeg_core_output_dimensions+0x28>
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size;
 800cb06:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
       ci++, compptr++) {
 800cb0a:	3201      	adds	r2, #1
 800cb0c:	3358      	adds	r3, #88	; 0x58
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size;
 800cb0e:	f843 0c34 	str.w	r0, [r3, #-52]
    compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size;
 800cb12:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
 800cb16:	f843 0c30 	str.w	r0, [r3, #-48]
       ci++, compptr++) {
 800cb1a:	e782      	b.n	800ca22 <jpeg_core_output_dimensions+0xea>

0800cb1c <jinit_input_controller>:
{
  my_inputctl_ptr inputctl;

  /* Create subobject in permanent pool */
  inputctl = (my_inputctl_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800cb1c:	6843      	ldr	r3, [r0, #4]
 800cb1e:	221c      	movs	r2, #28
 800cb20:	2100      	movs	r1, #0
 800cb22:	681b      	ldr	r3, [r3, #0]
{
 800cb24:	b510      	push	{r4, lr}
 800cb26:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800cb28:	4798      	blx	r3
				SIZEOF(my_input_controller));
  cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
  /* Initialize method pointers */
  inputctl->pub.consume_input = consume_markers;
 800cb2a:	4b08      	ldr	r3, [pc, #32]	; (800cb4c <jinit_input_controller+0x30>)
  cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
 800cb2c:	f8c4 01c8 	str.w	r0, [r4, #456]	; 0x1c8
  inputctl->pub.consume_input = consume_markers;
 800cb30:	6003      	str	r3, [r0, #0]
  inputctl->pub.reset_input_controller = reset_input_controller;
 800cb32:	4b07      	ldr	r3, [pc, #28]	; (800cb50 <jinit_input_controller+0x34>)
 800cb34:	6043      	str	r3, [r0, #4]
  inputctl->pub.start_input_pass = start_input_pass;
 800cb36:	4b07      	ldr	r3, [pc, #28]	; (800cb54 <jinit_input_controller+0x38>)
 800cb38:	6083      	str	r3, [r0, #8]
  inputctl->pub.finish_input_pass = finish_input_pass;
 800cb3a:	4b07      	ldr	r3, [pc, #28]	; (800cb58 <jinit_input_controller+0x3c>)
 800cb3c:	60c3      	str	r3, [r0, #12]
  /* Initialize state: can't use reset_input_controller since we don't
   * want to try to reset other modules yet.
   */
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
 800cb3e:	2300      	movs	r3, #0
  inputctl->pub.eoi_reached = FALSE;
 800cb40:	e9c0 3304 	strd	r3, r3, [r0, #16]
  inputctl->inheaders = 1;
 800cb44:	2301      	movs	r3, #1
 800cb46:	6183      	str	r3, [r0, #24]
}
 800cb48:	bd10      	pop	{r4, pc}
 800cb4a:	bf00      	nop
 800cb4c:	0800c605 	.word	0x0800c605
 800cb50:	0800c44d 	.word	0x0800c44d
 800cb54:	0800c47d 	.word	0x0800c47d
 800cb58:	0800c43d 	.word	0x0800c43d

0800cb5c <process_data_simple_main>:

METHODDEF(void)
process_data_simple_main (j_decompress_ptr cinfo,
			  JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			  JDIMENSION out_rows_avail)
{
 800cb5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800cb60:	f8d0 41bc 	ldr.w	r4, [r0, #444]	; 0x1bc
{
 800cb64:	4698      	mov	r8, r3
 800cb66:	460e      	mov	r6, r1
 800cb68:	b087      	sub	sp, #28
  JDIMENSION rowgroups_avail;

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
 800cb6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
{
 800cb6c:	4605      	mov	r5, r0
 800cb6e:	4617      	mov	r7, r2
 800cb70:	f104 0108 	add.w	r1, r4, #8
  if (! main->buffer_full) {
 800cb74:	b943      	cbnz	r3, 800cb88 <process_data_simple_main+0x2c>
    if (! (*cinfo->coef->decompress_data) (cinfo, main->buffer))
 800cb76:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
 800cb7a:	9105      	str	r1, [sp, #20]
 800cb7c:	68db      	ldr	r3, [r3, #12]
 800cb7e:	4798      	blx	r3
 800cb80:	b1a8      	cbz	r0, 800cbae <process_data_simple_main+0x52>
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
 800cb82:	2301      	movs	r3, #1
 800cb84:	9905      	ldr	r1, [sp, #20]
 800cb86:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /* There are always min_DCT_scaled_size row groups in an iMCU row. */
  rowgroups_avail = (JDIMENSION) cinfo->min_DCT_v_scaled_size;
 800cb88:	f8d5 9144 	ldr.w	r9, [r5, #324]	; 0x144
   * to the postprocessor.  The postprocessor has to check for bottom
   * of image anyway (at row resolution), so no point in us doing it too.
   */

  /* Feed the postprocessor */
  (*cinfo->post->post_process_data) (cinfo, main->buffer,
 800cb8c:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800cb90:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800cb94:	4628      	mov	r0, r5
 800cb96:	9600      	str	r6, [sp, #0]
 800cb98:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800cb9c:	685e      	ldr	r6, [r3, #4]
 800cb9e:	464b      	mov	r3, r9
 800cba0:	47b0      	blx	r6
				     &main->rowgroup_ctr, rowgroups_avail,
				     output_buf, out_row_ctr, out_rows_avail);

  /* Has postprocessor consumed all the data yet? If so, mark buffer empty */
  if (main->rowgroup_ctr >= rowgroups_avail) {
 800cba2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cba4:	454b      	cmp	r3, r9
    main->buffer_full = FALSE;
 800cba6:	bf24      	itt	cs
 800cba8:	2300      	movcs	r3, #0
    main->rowgroup_ctr = 0;
 800cbaa:	e9c4 330c 	strdcs	r3, r3, [r4, #48]	; 0x30
  }
}
 800cbae:	b007      	add	sp, #28
 800cbb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800cbb4 <process_data_context_main>:

METHODDEF(void)
process_data_context_main (j_decompress_ptr cinfo,
			   JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			   JDIMENSION out_rows_avail)
{
 800cbb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800cbb8:	f8d0 41bc 	ldr.w	r4, [r0, #444]	; 0x1bc
{
 800cbbc:	4698      	mov	r8, r3
 800cbbe:	b08b      	sub	sp, #44	; 0x2c
 800cbc0:	4605      	mov	r5, r0

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
 800cbc2:	6b23      	ldr	r3, [r4, #48]	; 0x30
{
 800cbc4:	4689      	mov	r9, r1
 800cbc6:	4617      	mov	r7, r2
  if (! main->buffer_full) {
 800cbc8:	b973      	cbnz	r3, 800cbe8 <process_data_context_main+0x34>
    if (! (*cinfo->coef->decompress_data) (cinfo,
 800cbca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cbcc:	f8d0 21c0 	ldr.w	r2, [r0, #448]	; 0x1c0
 800cbd0:	330e      	adds	r3, #14
 800cbd2:	68d2      	ldr	r2, [r2, #12]
 800cbd4:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800cbd8:	4790      	blx	r2
 800cbda:	2800      	cmp	r0, #0
 800cbdc:	d05a      	beq.n	800cc94 <process_data_context_main+0xe0>
					   main->xbuffer[main->whichptr]))
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
 800cbde:	2301      	movs	r3, #1
 800cbe0:	6323      	str	r3, [r4, #48]	; 0x30
    main->iMCU_row_ctr++;	/* count rows received */
 800cbe2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800cbe4:	3301      	adds	r3, #1
 800cbe6:	64e3      	str	r3, [r4, #76]	; 0x4c
  /* Postprocessor typically will not swallow all the input data it is handed
   * in one call (due to filling the output buffer first).  Must be prepared
   * to exit and restart.  This switch lets us keep track of how far we got.
   * Note that each case falls through to the next on successful completion.
   */
  switch (main->context_state) {
 800cbe8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800cbea:	2b01      	cmp	r3, #1
 800cbec:	d011      	beq.n	800cc12 <process_data_context_main+0x5e>
 800cbee:	2b02      	cmp	r3, #2
 800cbf0:	d036      	beq.n	800cc60 <process_data_context_main+0xac>
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d14e      	bne.n	800cc94 <process_data_context_main+0xe0>
      return;			/* Postprocessor exactly filled output buf */
    /*FALLTHROUGH*/
  case CTX_PREPARE_FOR_IMCU:
    /* Prepare to process first M-1 row groups of this iMCU row */
    main->rowgroup_ctr = 0;
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800cbf6:	f8d5 c144 	ldr.w	ip, [r5, #324]	; 0x144
    main->rowgroup_ctr = 0;
 800cbfa:	2600      	movs	r6, #0
    /* Check for bottom of image: if so, tweak pointers to "duplicate"
     * the last sample row, and adjust rowgroups_avail to ignore padding rows.
     */
    if (main->iMCU_row_ctr == cinfo->total_iMCU_rows)
 800cbfc:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800cbfe:	f10c 33ff 	add.w	r3, ip, #4294967295
    main->rowgroup_ctr = 0;
 800cc02:	6366      	str	r6, [r4, #52]	; 0x34
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800cc04:	64a3      	str	r3, [r4, #72]	; 0x48
    if (main->iMCU_row_ctr == cinfo->total_iMCU_rows)
 800cc06:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800cc0a:	429a      	cmp	r2, r3
 800cc0c:	d045      	beq.n	800cc9a <process_data_context_main+0xe6>
      set_bottom_pointers(cinfo);
    main->context_state = CTX_PROCESS_IMCU;
 800cc0e:	2301      	movs	r3, #1
 800cc10:	6463      	str	r3, [r4, #68]	; 0x44
    /*FALLTHROUGH*/
  case CTX_PROCESS_IMCU:
    /* Call postprocessor using previously set pointers */
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
 800cc12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc14:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800cc18:	4628      	mov	r0, r5
 800cc1a:	f103 010e 	add.w	r1, r3, #14
 800cc1e:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800cc22:	f8cd 9000 	str.w	r9, [sp]
 800cc26:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800cc2a:	685e      	ldr	r6, [r3, #4]
 800cc2c:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800cc30:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800cc32:	47b0      	blx	r6
			&main->rowgroup_ctr, main->rowgroups_avail,
			output_buf, out_row_ctr, out_rows_avail);
    if (main->rowgroup_ctr < main->rowgroups_avail)
 800cc34:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800cc36:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800cc38:	429a      	cmp	r2, r3
 800cc3a:	d32b      	bcc.n	800cc94 <process_data_context_main+0xe0>
      return;			/* Need to suspend */
    /* After the first iMCU, change wraparound pointers to normal state */
    if (main->iMCU_row_ctr == 1)
 800cc3c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800cc3e:	f8d5 0144 	ldr.w	r0, [r5, #324]	; 0x144
 800cc42:	2b01      	cmp	r3, #1
 800cc44:	d063      	beq.n	800cd0e <process_data_context_main+0x15a>
      set_wraparound_pointers(cinfo);
    /* Prepare to load new iMCU row using other xbuffer list */
    main->whichptr ^= 1;	/* 0=>1 or 1=>0 */
 800cc46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc48:	f083 0301 	eor.w	r3, r3, #1
 800cc4c:	6423      	str	r3, [r4, #64]	; 0x40
    main->buffer_full = FALSE;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	6323      	str	r3, [r4, #48]	; 0x30
    /* Still need to process last row group of this iMCU row, */
    /* which is saved at index M+1 of the other xbuffer */
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800cc52:	1c43      	adds	r3, r0, #1
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 2);
 800cc54:	3002      	adds	r0, #2
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800cc56:	6363      	str	r3, [r4, #52]	; 0x34
    main->context_state = CTX_POSTPONED_ROW;
 800cc58:	2302      	movs	r3, #2
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 2);
 800cc5a:	64a0      	str	r0, [r4, #72]	; 0x48
    main->context_state = CTX_POSTPONED_ROW;
 800cc5c:	6463      	str	r3, [r4, #68]	; 0x44
 800cc5e:	e019      	b.n	800cc94 <process_data_context_main+0xe0>
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
 800cc60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc62:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800cc66:	4628      	mov	r0, r5
 800cc68:	f103 010e 	add.w	r1, r3, #14
 800cc6c:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800cc70:	f8cd 9000 	str.w	r9, [sp]
 800cc74:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800cc78:	685e      	ldr	r6, [r3, #4]
 800cc7a:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800cc7e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800cc80:	47b0      	blx	r6
    if (main->rowgroup_ctr < main->rowgroups_avail)
 800cc82:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800cc84:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800cc86:	429a      	cmp	r2, r3
 800cc88:	d304      	bcc.n	800cc94 <process_data_context_main+0xe0>
    main->context_state = CTX_PREPARE_FOR_IMCU;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	6463      	str	r3, [r4, #68]	; 0x44
    if (*out_row_ctr >= out_rows_avail)
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	4543      	cmp	r3, r8
 800cc92:	d3b0      	bcc.n	800cbf6 <process_data_context_main+0x42>
  }
}
 800cc94:	b00b      	add	sp, #44	; 0x2c
 800cc96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cc9a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800cc9c:	f06f 4e40 	mvn.w	lr, #3221225472	; 0xc0000000
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800cca0:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cca4:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
 800cca8:	9206      	str	r2, [sp, #24]
 800ccaa:	9a06      	ldr	r2, [sp, #24]
 800ccac:	4296      	cmp	r6, r2
 800ccae:	daae      	bge.n	800cc0e <process_data_context_main+0x5a>
    iMCUheight = compptr->v_samp_factor * compptr->DCT_v_scaled_size;
 800ccb0:	68d8      	ldr	r0, [r3, #12]
 800ccb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ccb4:	4342      	muls	r2, r0
    rows_left = (int) (compptr->downsampled_height % (JDIMENSION) iMCUheight);
 800ccb6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ccb8:	fbb0 fbf2 	udiv	fp, r0, r2
 800ccbc:	fb02 001b 	mls	r0, r2, fp, r0
    rgroup = iMCUheight / cinfo->min_DCT_v_scaled_size;
 800ccc0:	fb92 fafc 	sdiv	sl, r2, ip
    if (rows_left == 0) rows_left = iMCUheight;
 800ccc4:	2800      	cmp	r0, #0
 800ccc6:	bf08      	it	eq
 800ccc8:	4610      	moveq	r0, r2
    if (ci == 0) {
 800ccca:	b926      	cbnz	r6, 800ccd6 <process_data_context_main+0x122>
      main->rowgroups_avail = (JDIMENSION) ((rows_left-1) / rgroup + 1);
 800cccc:	1e42      	subs	r2, r0, #1
 800ccce:	fb92 f2fa 	sdiv	r2, r2, sl
 800ccd2:	3201      	adds	r2, #1
 800ccd4:	648a      	str	r2, [r1, #72]	; 0x48
    xbuf = main->xbuffer[main->whichptr][ci];
 800ccd6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800ccd8:	4470      	add	r0, lr
    for (i = 0; i < rgroup * 2; i++) {
 800ccda:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    xbuf = main->xbuffer[main->whichptr][ci];
 800ccde:	320e      	adds	r2, #14
 800cce0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800cce4:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800cce8:	eb02 0b80 	add.w	fp, r2, r0, lsl #2
    for (i = 0; i < rgroup * 2; i++) {
 800ccec:	2200      	movs	r2, #0
 800ccee:	4658      	mov	r0, fp
 800ccf0:	3004      	adds	r0, #4
 800ccf2:	9205      	str	r2, [sp, #20]
 800ccf4:	9a05      	ldr	r2, [sp, #20]
 800ccf6:	4552      	cmp	r2, sl
 800ccf8:	db02      	blt.n	800cd00 <process_data_context_main+0x14c>
       ci++, compptr++) {
 800ccfa:	3601      	adds	r6, #1
 800ccfc:	3358      	adds	r3, #88	; 0x58
 800ccfe:	e7d4      	b.n	800ccaa <process_data_context_main+0xf6>
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800cd00:	f8db 2000 	ldr.w	r2, [fp]
 800cd04:	f840 2b04 	str.w	r2, [r0], #4
    for (i = 0; i < rgroup * 2; i++) {
 800cd08:	9a05      	ldr	r2, [sp, #20]
 800cd0a:	3201      	adds	r2, #1
 800cd0c:	e7f1      	b.n	800ccf2 <process_data_context_main+0x13e>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cd0e:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800cd12:	f8d5 81bc 	ldr.w	r8, [r5, #444]	; 0x1bc
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cd16:	9305      	str	r3, [sp, #20]
 800cd18:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cd1a:	2500      	movs	r5, #0
 800cd1c:	9307      	str	r3, [sp, #28]
 800cd1e:	1c43      	adds	r3, r0, #1
 800cd20:	9308      	str	r3, [sp, #32]
 800cd22:	9b07      	ldr	r3, [sp, #28]
 800cd24:	429d      	cmp	r5, r3
 800cd26:	da8e      	bge.n	800cc46 <process_data_context_main+0x92>
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800cd28:	9b05      	ldr	r3, [sp, #20]
 800cd2a:	9a05      	ldr	r2, [sp, #20]
 800cd2c:	68db      	ldr	r3, [r3, #12]
 800cd2e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800cd30:	435a      	muls	r2, r3
    xbuf0 = main->xbuffer[0][ci];
 800cd32:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800cd36:	fb92 f2f0 	sdiv	r2, r2, r0
    xbuf0 = main->xbuffer[0][ci];
 800cd3a:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]
    xbuf1 = main->xbuffer[1][ci];
 800cd3e:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800cd42:	f853 c025 	ldr.w	ip, [r3, r5, lsl #2]
      xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 800cd46:	9b08      	ldr	r3, [sp, #32]
 800cd48:	4353      	muls	r3, r2
 800cd4a:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 800cd4e:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
      xbuf0[rgroup*(M+2) + i] = xbuf0[i];
 800cd52:	4413      	add	r3, r2
 800cd54:	9106      	str	r1, [sp, #24]
 800cd56:	eb07 0983 	add.w	r9, r7, r3, lsl #2
 800cd5a:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800cd5e:	461e      	mov	r6, r3
 800cd60:	f06f 0303 	mvn.w	r3, #3
 800cd64:	fb03 fe02 	mul.w	lr, r3, r2
 800cd68:	eb07 010e 	add.w	r1, r7, lr
 800cd6c:	44e6      	add	lr, ip
 800cd6e:	9109      	str	r1, [sp, #36]	; 0x24
    for (i = 0; i < rgroup; i++) {
 800cd70:	2100      	movs	r1, #0
 800cd72:	428a      	cmp	r2, r1
 800cd74:	dc04      	bgt.n	800cd80 <process_data_context_main+0x1cc>
       ci++, compptr++) {
 800cd76:	9b05      	ldr	r3, [sp, #20]
 800cd78:	3501      	adds	r5, #1
 800cd7a:	3358      	adds	r3, #88	; 0x58
 800cd7c:	9305      	str	r3, [sp, #20]
 800cd7e:	e7d0      	b.n	800cd22 <process_data_context_main+0x16e>
      xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 800cd80:	9b06      	ldr	r3, [sp, #24]
 800cd82:	f853 bb04 	ldr.w	fp, [r3], #4
 800cd86:	9306      	str	r3, [sp, #24]
 800cd88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd8a:	f843 b021 	str.w	fp, [r3, r1, lsl #2]
      xbuf1[i - rgroup] = xbuf1[rgroup*(M+1) + i];
 800cd8e:	f85a bb04 	ldr.w	fp, [sl], #4
 800cd92:	f84e b021 	str.w	fp, [lr, r1, lsl #2]
      xbuf0[rgroup*(M+2) + i] = xbuf0[i];
 800cd96:	f857 3021 	ldr.w	r3, [r7, r1, lsl #2]
 800cd9a:	f849 3b04 	str.w	r3, [r9], #4
      xbuf1[rgroup*(M+2) + i] = xbuf1[i];
 800cd9e:	f85c 3021 	ldr.w	r3, [ip, r1, lsl #2]
    for (i = 0; i < rgroup; i++) {
 800cda2:	3101      	adds	r1, #1
      xbuf1[rgroup*(M+2) + i] = xbuf1[i];
 800cda4:	f846 3b04 	str.w	r3, [r6], #4
    for (i = 0; i < rgroup; i++) {
 800cda8:	e7e3      	b.n	800cd72 <process_data_context_main+0x1be>

0800cdaa <process_data_crank_post>:

METHODDEF(void)
process_data_crank_post (j_decompress_ptr cinfo,
			 JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			 JDIMENSION out_rows_avail)
{
 800cdaa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  (*cinfo->post->post_process_data) (cinfo, (JSAMPIMAGE) NULL,
 800cdac:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
 800cdb0:	9100      	str	r1, [sp, #0]
 800cdb2:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	6864      	ldr	r4, [r4, #4]
 800cdba:	461a      	mov	r2, r3
 800cdbc:	4619      	mov	r1, r3
 800cdbe:	47a0      	blx	r4
				     (JDIMENSION *) NULL, (JDIMENSION) 0,
				     output_buf, out_row_ctr, out_rows_avail);
}
 800cdc0:	b004      	add	sp, #16
 800cdc2:	bd10      	pop	{r4, pc}

0800cdc4 <start_pass_main>:
{
 800cdc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800cdc8:	f8d0 31bc 	ldr.w	r3, [r0, #444]	; 0x1bc
{
 800cdcc:	4602      	mov	r2, r0
  switch (pass_mode) {
 800cdce:	b149      	cbz	r1, 800cde4 <start_pass_main+0x20>
 800cdd0:	2902      	cmp	r1, #2
 800cdd2:	d070      	beq.n	800ceb6 <start_pass_main+0xf2>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800cdd4:	6803      	ldr	r3, [r0, #0]
 800cdd6:	2203      	movs	r2, #3
 800cdd8:	615a      	str	r2, [r3, #20]
 800cdda:	681b      	ldr	r3, [r3, #0]
}
 800cddc:	b003      	add	sp, #12
 800cdde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800cde2:	4718      	bx	r3
    if (cinfo->upsample->need_context_rows) {
 800cde4:	f8d0 01d8 	ldr.w	r0, [r0, #472]	; 0x1d8
 800cde8:	6880      	ldr	r0, [r0, #8]
 800cdea:	2800      	cmp	r0, #0
 800cdec:	d060      	beq.n	800ceb0 <start_pass_main+0xec>
  int M = cinfo->min_DCT_v_scaled_size;
 800cdee:	f8d2 7144 	ldr.w	r7, [r2, #324]	; 0x144
 800cdf2:	f103 0e08 	add.w	lr, r3, #8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cdf6:	f8d2 60d8 	ldr.w	r6, [r2, #216]	; 0xd8
 800cdfa:	6a52      	ldr	r2, [r2, #36]	; 0x24
      main->pub.process_data = process_data_context_main;
 800cdfc:	482f      	ldr	r0, [pc, #188]	; (800cebc <start_pass_main+0xf8>)
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cdfe:	9200      	str	r2, [sp, #0]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800ce00:	1cba      	adds	r2, r7, #2
      main->pub.process_data = process_data_context_main;
 800ce02:	6058      	str	r0, [r3, #4]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800ce04:	9201      	str	r2, [sp, #4]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ce06:	9a00      	ldr	r2, [sp, #0]
 800ce08:	4291      	cmp	r1, r2
 800ce0a:	db09      	blt.n	800ce20 <start_pass_main+0x5c>
      main->whichptr = 0;	/* Read first iMCU row into xbuffer[0] */
 800ce0c:	2200      	movs	r2, #0
      main->context_state = CTX_PREPARE_FOR_IMCU;
 800ce0e:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
      main->iMCU_row_ctr = 0;
 800ce12:	64da      	str	r2, [r3, #76]	; 0x4c
    main->buffer_full = FALSE;	/* Mark buffer empty */
 800ce14:	2200      	movs	r2, #0
    main->rowgroup_ctr = 0;
 800ce16:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
}
 800ce1a:	b003      	add	sp, #12
 800ce1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800ce20:	68f0      	ldr	r0, [r6, #12]
 800ce22:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    for (i = 0; i < rgroup * (M + 2); i++) {
 800ce24:	9d01      	ldr	r5, [sp, #4]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800ce26:	4342      	muls	r2, r0
    xbuf0 = main->xbuffer[0][ci];
 800ce28:	6b98      	ldr	r0, [r3, #56]	; 0x38
    buf = main->buffer[ci];
 800ce2a:	f85e 4b04 	ldr.w	r4, [lr], #4
    xbuf0 = main->xbuffer[0][ci];
 800ce2e:	f850 c021 	ldr.w	ip, [r0, r1, lsl #2]
    xbuf1 = main->xbuffer[1][ci];
 800ce32:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800ce34:	fb92 f2f7 	sdiv	r2, r2, r7
    xbuf1 = main->xbuffer[1][ci];
 800ce38:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800ce3c:	fb02 f905 	mul.w	r9, r2, r5
 800ce40:	2500      	movs	r5, #0
 800ce42:	454d      	cmp	r5, r9
 800ce44:	db1c      	blt.n	800ce80 <start_pass_main+0xbc>
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800ce46:	fb02 fb07 	mul.w	fp, r2, r7
 800ce4a:	f06f 0501 	mvn.w	r5, #1
    for (i = 0; i < rgroup * 2; i++) {
 800ce4e:	ea4f 0a42 	mov.w	sl, r2, lsl #1
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800ce52:	fb05 b502 	mla	r5, r5, r2, fp
 800ce56:	eb04 088b 	add.w	r8, r4, fp, lsl #2
 800ce5a:	eb00 0985 	add.w	r9, r0, r5, lsl #2
 800ce5e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    for (i = 0; i < rgroup * 2; i++) {
 800ce62:	2400      	movs	r4, #0
 800ce64:	eb00 008b 	add.w	r0, r0, fp, lsl #2
 800ce68:	4554      	cmp	r4, sl
 800ce6a:	db11      	blt.n	800ce90 <start_pass_main+0xcc>
 800ce6c:	f06f 0003 	mvn.w	r0, #3
    for (i = 0; i < rgroup; i++) {
 800ce70:	2400      	movs	r4, #0
 800ce72:	fb00 c502 	mla	r5, r0, r2, ip
 800ce76:	42a2      	cmp	r2, r4
 800ce78:	dc14      	bgt.n	800cea4 <start_pass_main+0xe0>
       ci++, compptr++) {
 800ce7a:	3101      	adds	r1, #1
 800ce7c:	3658      	adds	r6, #88	; 0x58
 800ce7e:	e7c2      	b.n	800ce06 <start_pass_main+0x42>
      xbuf0[i] = xbuf1[i] = buf[i];
 800ce80:	f854 8025 	ldr.w	r8, [r4, r5, lsl #2]
 800ce84:	f840 8025 	str.w	r8, [r0, r5, lsl #2]
 800ce88:	f84c 8025 	str.w	r8, [ip, r5, lsl #2]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800ce8c:	3501      	adds	r5, #1
 800ce8e:	e7d8      	b.n	800ce42 <start_pass_main+0x7e>
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800ce90:	f858 bb04 	ldr.w	fp, [r8], #4
    for (i = 0; i < rgroup * 2; i++) {
 800ce94:	3401      	adds	r4, #1
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800ce96:	f849 bb04 	str.w	fp, [r9], #4
      xbuf1[rgroup*M + i] = buf[rgroup*(M-2) + i];
 800ce9a:	f855 bb04 	ldr.w	fp, [r5], #4
 800ce9e:	f840 bb04 	str.w	fp, [r0], #4
    for (i = 0; i < rgroup * 2; i++) {
 800cea2:	e7e1      	b.n	800ce68 <start_pass_main+0xa4>
      xbuf0[i - rgroup] = xbuf0[0];
 800cea4:	f8dc 0000 	ldr.w	r0, [ip]
 800cea8:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
    for (i = 0; i < rgroup; i++) {
 800ceac:	3401      	adds	r4, #1
 800ceae:	e7e2      	b.n	800ce76 <start_pass_main+0xb2>
      main->pub.process_data = process_data_simple_main;
 800ceb0:	4a03      	ldr	r2, [pc, #12]	; (800cec0 <start_pass_main+0xfc>)
 800ceb2:	605a      	str	r2, [r3, #4]
 800ceb4:	e7ae      	b.n	800ce14 <start_pass_main+0x50>
    main->pub.process_data = process_data_crank_post;
 800ceb6:	4a03      	ldr	r2, [pc, #12]	; (800cec4 <start_pass_main+0x100>)
 800ceb8:	605a      	str	r2, [r3, #4]
    break;
 800ceba:	e7ae      	b.n	800ce1a <start_pass_main+0x56>
 800cebc:	0800cbb5 	.word	0x0800cbb5
 800cec0:	0800cb5d 	.word	0x0800cb5d
 800cec4:	0800cdab 	.word	0x0800cdab

0800cec8 <jinit_d_main_controller>:
 * Initialize main buffer controller.
 */

GLOBAL(void)
jinit_d_main_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
 800cec8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main;
  int ci, rgroup, ngroups;
  jpeg_component_info *compptr;

  main = (my_main_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cecc:	6843      	ldr	r3, [r0, #4]
{
 800cece:	460d      	mov	r5, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ced0:	2250      	movs	r2, #80	; 0x50
 800ced2:	2101      	movs	r1, #1
 800ced4:	681b      	ldr	r3, [r3, #0]
{
 800ced6:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ced8:	4798      	blx	r3
				SIZEOF(my_main_controller));
  cinfo->main = (struct jpeg_d_main_controller *) main;
  main->pub.start_pass = start_pass_main;
 800ceda:	4b3a      	ldr	r3, [pc, #232]	; (800cfc4 <jinit_d_main_controller+0xfc>)
  cinfo->main = (struct jpeg_d_main_controller *) main;
 800cedc:	f8c4 01bc 	str.w	r0, [r4, #444]	; 0x1bc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cee0:	4606      	mov	r6, r0
  main->pub.start_pass = start_pass_main;
 800cee2:	6003      	str	r3, [r0, #0]

  if (need_full_buffer)		/* shouldn't happen */
 800cee4:	b12d      	cbz	r5, 800cef2 <jinit_d_main_controller+0x2a>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800cee6:	6823      	ldr	r3, [r4, #0]
 800cee8:	2203      	movs	r2, #3
 800ceea:	4620      	mov	r0, r4
 800ceec:	615a      	str	r2, [r3, #20]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	4798      	blx	r3

  /* Allocate the workspace.
   * ngroups is the number of row groups we need.
   */
  if (cinfo->upsample->need_context_rows) {
 800cef2:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
 800cef6:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144
 800cefa:	689b      	ldr	r3, [r3, #8]
 800cefc:	b31b      	cbz	r3, 800cf46 <jinit_d_main_controller+0x7e>
    if (cinfo->min_DCT_v_scaled_size < 2) /* unsupported, see comments above */
 800cefe:	2d01      	cmp	r5, #1
 800cf00:	dc05      	bgt.n	800cf0e <jinit_d_main_controller+0x46>
      ERREXIT(cinfo, JERR_NOTIMPL);
 800cf02:	6823      	ldr	r3, [r4, #0]
 800cf04:	2230      	movs	r2, #48	; 0x30
 800cf06:	4620      	mov	r0, r4
 800cf08:	615a      	str	r2, [r3, #20]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cf0e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800cf10:	2101      	movs	r1, #1
 800cf12:	6863      	ldr	r3, [r4, #4]
 800cf14:	4620      	mov	r0, r4
 800cf16:	00d2      	lsls	r2, r2, #3
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800cf18:	f8d4 71bc 	ldr.w	r7, [r4, #444]	; 0x1bc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cf1c:	681b      	ldr	r3, [r3, #0]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cf1e:	f04f 0800 	mov.w	r8, #0
  int M = cinfo->min_DCT_v_scaled_size;
 800cf22:	f8d4 9144 	ldr.w	r9, [r4, #324]	; 0x144
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cf26:	4798      	blx	r3
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800cf28:	6a63      	ldr	r3, [r4, #36]	; 0x24
  main->xbuffer[0] = (JSAMPIMAGE)
 800cf2a:	63b8      	str	r0, [r7, #56]	; 0x38
				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
 800cf2c:	f109 0904 	add.w	r9, r9, #4
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800cf30:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cf34:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800cf38:	63f8      	str	r0, [r7, #60]	; 0x3c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cf3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf3c:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
 800cf40:	4598      	cmp	r8, r3
 800cf42:	db0a      	blt.n	800cf5a <jinit_d_main_controller+0x92>
    alloc_funny_pointers(cinfo); /* Alloc space for xbuffer[] lists */
    ngroups = cinfo->min_DCT_v_scaled_size + 2;
 800cf44:	1c85      	adds	r5, r0, #2
  } else {
    ngroups = cinfo->min_DCT_v_scaled_size;
  }

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cf46:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
 800cf4a:	3608      	adds	r6, #8
 800cf4c:	f04f 0800 	mov.w	r8, #0
 800cf50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf52:	4543      	cmp	r3, r8
 800cf54:	dc1d      	bgt.n	800cf92 <jinit_d_main_controller+0xca>
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
			((j_common_ptr) cinfo, JPOOL_IMAGE,
			 compptr->width_in_blocks * compptr->DCT_h_scaled_size,
			 (JDIMENSION) (rgroup * ngroups));
  }
}
 800cf56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800cf5a:	68ea      	ldr	r2, [r5, #12]
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cf5c:	2101      	movs	r1, #1
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800cf5e:	6aab      	ldr	r3, [r5, #40]	; 0x28
       ci++, compptr++) {
 800cf60:	3558      	adds	r5, #88	; 0x58
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800cf62:	4353      	muls	r3, r2
 800cf64:	fb93 fbf0 	sdiv	fp, r3, r0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cf68:	6863      	ldr	r3, [r4, #4]
				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
 800cf6a:	fb0b fa09 	mul.w	sl, fp, r9
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cf6e:	4620      	mov	r0, r4
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cf76:	4798      	blx	r3
    main->xbuffer[0][ci] = xbuf;
 800cf78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    xbuf += rgroup;		/* want one row group at negative offsets */
 800cf7a:	eb00 008b 	add.w	r0, r0, fp, lsl #2
    main->xbuffer[0][ci] = xbuf;
 800cf7e:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
    xbuf += rgroup * (M + 4);
 800cf82:	eb00 008a 	add.w	r0, r0, sl, lsl #2
    main->xbuffer[1][ci] = xbuf;
 800cf86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf88:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
       ci++, compptr++) {
 800cf8c:	f108 0801 	add.w	r8, r8, #1
 800cf90:	e7d3      	b.n	800cf3a <jinit_d_main_controller+0x72>
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800cf92:	68fa      	ldr	r2, [r7, #12]
       ci++, compptr++) {
 800cf94:	f108 0801 	add.w	r8, r8, #1
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800cf98:	6abb      	ldr	r3, [r7, #40]	; 0x28
       ci++, compptr++) {
 800cf9a:	3758      	adds	r7, #88	; 0x58
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800cf9c:	f857 1c34 	ldr.w	r1, [r7, #-52]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800cfa0:	4353      	muls	r3, r2
 800cfa2:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800cfa6:	6860      	ldr	r0, [r4, #4]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800cfa8:	fb93 f3f2 	sdiv	r3, r3, r2
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800cfac:	f857 2c3c 	ldr.w	r2, [r7, #-60]
 800cfb0:	436b      	muls	r3, r5
 800cfb2:	f8d0 9008 	ldr.w	r9, [r0, #8]
 800cfb6:	4620      	mov	r0, r4
 800cfb8:	434a      	muls	r2, r1
 800cfba:	2101      	movs	r1, #1
 800cfbc:	47c8      	blx	r9
 800cfbe:	f846 0b04 	str.w	r0, [r6], #4
       ci++, compptr++) {
 800cfc2:	e7c5      	b.n	800cf50 <jinit_d_main_controller+0x88>
 800cfc4:	0800cdc5 	.word	0x0800cdc5

0800cfc8 <get_sof>:

LOCAL(boolean)
get_sof (j_decompress_ptr cinfo, boolean is_baseline, boolean is_prog,
	 boolean is_arith)
/* Process a SOFn marker */
{
 800cfc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  INT32 length;
  int c, ci;
  jpeg_component_info * compptr;
  INPUT_VARS(cinfo);
 800cfcc:	6986      	ldr	r6, [r0, #24]
{
 800cfce:	4604      	mov	r4, r0
  INPUT_VARS(cinfo);
 800cfd0:	e9d6 c500 	ldrd	ip, r5, [r6]

  cinfo->is_baseline = is_baseline;
  cinfo->progressive_mode = is_prog;
 800cfd4:	e9c0 1237 	strd	r1, r2, [r0, #220]	; 0xdc
  cinfo->arith_code = is_arith;
 800cfd8:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4

  INPUT_2BYTES(cinfo, length, return FALSE);
 800cfdc:	b93d      	cbnz	r5, 800cfee <get_sof+0x26>
 800cfde:	68f3      	ldr	r3, [r6, #12]
 800cfe0:	4798      	blx	r3
 800cfe2:	b910      	cbnz	r0, 800cfea <get_sof+0x22>
 800cfe4:	2000      	movs	r0, #0

  cinfo->marker->saw_SOF = TRUE;

  INPUT_SYNC(cinfo);
  return TRUE;
}
 800cfe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800cfea:	e9d6 c500 	ldrd	ip, r5, [r6]
 800cfee:	1e6b      	subs	r3, r5, #1
 800cff0:	f89c 7000 	ldrb.w	r7, [ip]
 800cff4:	f000 8087 	beq.w	800d106 <get_sof+0x13e>
 800cff8:	f10c 0501 	add.w	r5, ip, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800cffc:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800cffe:	f895 8000 	ldrb.w	r8, [r5]
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800d002:	f000 8089 	beq.w	800d118 <get_sof+0x150>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d006:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800d008:	782a      	ldrb	r2, [r5, #0]
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800d00a:	3b01      	subs	r3, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800d00c:	f8c4 20d4 	str.w	r2, [r4, #212]	; 0xd4
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800d010:	f000 808b 	beq.w	800d12a <get_sof+0x162>
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800d014:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800d016:	782a      	ldrb	r2, [r5, #0]
 800d018:	3b01      	subs	r3, #1
 800d01a:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800d01e:	6222      	str	r2, [r4, #32]
 800d020:	f000 808c 	beq.w	800d13c <get_sof+0x174>
 800d024:	3501      	adds	r5, #1
 800d026:	7829      	ldrb	r1, [r5, #0]
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800d028:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800d02a:	6a22      	ldr	r2, [r4, #32]
 800d02c:	440a      	add	r2, r1
 800d02e:	6222      	str	r2, [r4, #32]
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800d030:	f000 808d 	beq.w	800d14e <get_sof+0x186>
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800d034:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800d036:	782a      	ldrb	r2, [r5, #0]
 800d038:	3b01      	subs	r3, #1
 800d03a:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800d03e:	61e2      	str	r2, [r4, #28]
 800d040:	f000 808e 	beq.w	800d160 <get_sof+0x198>
 800d044:	3501      	adds	r5, #1
 800d046:	7829      	ldrb	r1, [r5, #0]
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800d048:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800d04a:	69e2      	ldr	r2, [r4, #28]
 800d04c:	440a      	add	r2, r1
 800d04e:	61e2      	str	r2, [r4, #28]
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800d050:	f000 808f 	beq.w	800d172 <get_sof+0x1aa>
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800d054:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800d056:	f103 39ff 	add.w	r9, r3, #4294967295
 800d05a:	f815 3b01 	ldrb.w	r3, [r5], #1
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800d05e:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
 800d062:	2101      	movs	r1, #1
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800d064:	6263      	str	r3, [r4, #36]	; 0x24
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800d066:	4620      	mov	r0, r4
 800d068:	6823      	ldr	r3, [r4, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d06a:	eb08 2707 	add.w	r7, r8, r7, lsl #8
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800d06e:	619a      	str	r2, [r3, #24]
  length -= 8;
 800d070:	3f08      	subs	r7, #8
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800d072:	69e2      	ldr	r2, [r4, #28]
 800d074:	61da      	str	r2, [r3, #28]
 800d076:	6a22      	ldr	r2, [r4, #32]
 800d078:	621a      	str	r2, [r3, #32]
 800d07a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d07c:	625a      	str	r2, [r3, #36]	; 0x24
 800d07e:	2266      	movs	r2, #102	; 0x66
 800d080:	615a      	str	r2, [r3, #20]
 800d082:	685b      	ldr	r3, [r3, #4]
 800d084:	4798      	blx	r3
  if (cinfo->marker->saw_SOF)
 800d086:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800d08a:	691b      	ldr	r3, [r3, #16]
 800d08c:	b12b      	cbz	r3, 800d09a <get_sof+0xd2>
    ERREXIT(cinfo, JERR_SOF_DUPLICATE);
 800d08e:	6823      	ldr	r3, [r4, #0]
 800d090:	223c      	movs	r2, #60	; 0x3c
 800d092:	4620      	mov	r0, r4
 800d094:	615a      	str	r2, [r3, #20]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	4798      	blx	r3
  if (cinfo->image_height <= 0 || cinfo->image_width <= 0
 800d09a:	6a23      	ldr	r3, [r4, #32]
 800d09c:	b123      	cbz	r3, 800d0a8 <get_sof+0xe0>
 800d09e:	69e3      	ldr	r3, [r4, #28]
 800d0a0:	b113      	cbz	r3, 800d0a8 <get_sof+0xe0>
      || cinfo->num_components <= 0)
 800d0a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	dc05      	bgt.n	800d0b4 <get_sof+0xec>
    ERREXIT(cinfo, JERR_EMPTY_IMAGE);
 800d0a8:	6823      	ldr	r3, [r4, #0]
 800d0aa:	2221      	movs	r2, #33	; 0x21
 800d0ac:	4620      	mov	r0, r4
 800d0ae:	615a      	str	r2, [r3, #20]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	4798      	blx	r3
  if (length != (cinfo->num_components * 3))
 800d0b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d0b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d0ba:	42bb      	cmp	r3, r7
 800d0bc:	d005      	beq.n	800d0ca <get_sof+0x102>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800d0be:	6823      	ldr	r3, [r4, #0]
 800d0c0:	220c      	movs	r2, #12
 800d0c2:	4620      	mov	r0, r4
 800d0c4:	615a      	str	r2, [r3, #20]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	4798      	blx	r3
  if (cinfo->comp_info == NULL)	/* do only once, even if suspend */
 800d0ca:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800d0ce:	b94b      	cbnz	r3, 800d0e4 <get_sof+0x11c>
    cinfo->comp_info = (jpeg_component_info *) (*cinfo->mem->alloc_small)
 800d0d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d0d2:	2158      	movs	r1, #88	; 0x58
 800d0d4:	6863      	ldr	r3, [r4, #4]
 800d0d6:	4620      	mov	r0, r4
 800d0d8:	434a      	muls	r2, r1
 800d0da:	2101      	movs	r1, #1
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	4798      	blx	r3
 800d0e0:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d0e4:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
 800d0e8:	f04f 0800 	mov.w	r8, #0
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800d0ec:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800d0f0:	3758      	adds	r7, #88	; 0x58
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d0f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d0f4:	4543      	cmp	r3, r8
 800d0f6:	dc45      	bgt.n	800d184 <get_sof+0x1bc>
  cinfo->marker->saw_SOF = TRUE;
 800d0f8:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800d0fc:	2001      	movs	r0, #1
 800d0fe:	6118      	str	r0, [r3, #16]
  INPUT_SYNC(cinfo);
 800d100:	e9c6 5900 	strd	r5, r9, [r6]
  return TRUE;
 800d104:	e76f      	b.n	800cfe6 <get_sof+0x1e>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d106:	68f3      	ldr	r3, [r6, #12]
 800d108:	4620      	mov	r0, r4
 800d10a:	4798      	blx	r3
 800d10c:	2800      	cmp	r0, #0
 800d10e:	f43f af69 	beq.w	800cfe4 <get_sof+0x1c>
 800d112:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d116:	e771      	b.n	800cffc <get_sof+0x34>
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800d118:	68f3      	ldr	r3, [r6, #12]
 800d11a:	4620      	mov	r0, r4
 800d11c:	4798      	blx	r3
 800d11e:	2800      	cmp	r0, #0
 800d120:	f43f af60 	beq.w	800cfe4 <get_sof+0x1c>
 800d124:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d128:	e76e      	b.n	800d008 <get_sof+0x40>
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800d12a:	68f3      	ldr	r3, [r6, #12]
 800d12c:	4620      	mov	r0, r4
 800d12e:	4798      	blx	r3
 800d130:	2800      	cmp	r0, #0
 800d132:	f43f af57 	beq.w	800cfe4 <get_sof+0x1c>
 800d136:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d13a:	e76c      	b.n	800d016 <get_sof+0x4e>
 800d13c:	68f3      	ldr	r3, [r6, #12]
 800d13e:	4620      	mov	r0, r4
 800d140:	4798      	blx	r3
 800d142:	2800      	cmp	r0, #0
 800d144:	f43f af4e 	beq.w	800cfe4 <get_sof+0x1c>
 800d148:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d14c:	e76b      	b.n	800d026 <get_sof+0x5e>
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800d14e:	68f3      	ldr	r3, [r6, #12]
 800d150:	4620      	mov	r0, r4
 800d152:	4798      	blx	r3
 800d154:	2800      	cmp	r0, #0
 800d156:	f43f af45 	beq.w	800cfe4 <get_sof+0x1c>
 800d15a:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d15e:	e76a      	b.n	800d036 <get_sof+0x6e>
 800d160:	68f3      	ldr	r3, [r6, #12]
 800d162:	4620      	mov	r0, r4
 800d164:	4798      	blx	r3
 800d166:	2800      	cmp	r0, #0
 800d168:	f43f af3c 	beq.w	800cfe4 <get_sof+0x1c>
 800d16c:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d170:	e769      	b.n	800d046 <get_sof+0x7e>
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800d172:	68f3      	ldr	r3, [r6, #12]
 800d174:	4620      	mov	r0, r4
 800d176:	4798      	blx	r3
 800d178:	2800      	cmp	r0, #0
 800d17a:	f43f af33 	beq.w	800cfe4 <get_sof+0x1c>
 800d17e:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d182:	e768      	b.n	800d056 <get_sof+0x8e>
    compptr->component_index = ci;
 800d184:	f847 8c54 	str.w	r8, [r7, #-84]
    INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
 800d188:	f1b9 0f00 	cmp.w	r9, #0
 800d18c:	d107      	bne.n	800d19e <get_sof+0x1d6>
 800d18e:	68f3      	ldr	r3, [r6, #12]
 800d190:	4620      	mov	r0, r4
 800d192:	4798      	blx	r3
 800d194:	2800      	cmp	r0, #0
 800d196:	f43f af25 	beq.w	800cfe4 <get_sof+0x1c>
 800d19a:	e9d6 5900 	ldrd	r5, r9, [r6]
 800d19e:	782b      	ldrb	r3, [r5, #0]
 800d1a0:	f847 3c58 	str.w	r3, [r7, #-88]
    INPUT_BYTE(cinfo, c, return FALSE);
 800d1a4:	f1b9 0301 	subs.w	r3, r9, #1
 800d1a8:	d029      	beq.n	800d1fe <get_sof+0x236>
    INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
 800d1aa:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, c, return FALSE);
 800d1ac:	782a      	ldrb	r2, [r5, #0]
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800d1ae:	3b01      	subs	r3, #1
    compptr->h_samp_factor = (c >> 4) & 15;
 800d1b0:	ea4f 1122 	mov.w	r1, r2, asr #4
    compptr->v_samp_factor = (c     ) & 15;
 800d1b4:	f002 020f 	and.w	r2, r2, #15
    compptr->h_samp_factor = (c >> 4) & 15;
 800d1b8:	f847 1c50 	str.w	r1, [r7, #-80]
    compptr->v_samp_factor = (c     ) & 15;
 800d1bc:	f847 2c4c 	str.w	r2, [r7, #-76]
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800d1c0:	d026      	beq.n	800d210 <get_sof+0x248>
    INPUT_BYTE(cinfo, c, return FALSE);
 800d1c2:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800d1c4:	f103 39ff 	add.w	r9, r3, #4294967295
 800d1c8:	f815 3b01 	ldrb.w	r3, [r5], #1
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800d1cc:	f857 2c58 	ldr.w	r2, [r7, #-88]
 800d1d0:	2101      	movs	r1, #1
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800d1d2:	f847 3c48 	str.w	r3, [r7, #-72]
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800d1d6:	4620      	mov	r0, r4
 800d1d8:	6823      	ldr	r3, [r4, #0]
       ci++, compptr++) {
 800d1da:	f108 0801 	add.w	r8, r8, #1
 800d1de:	3758      	adds	r7, #88	; 0x58
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800d1e0:	619a      	str	r2, [r3, #24]
 800d1e2:	f857 2ca8 	ldr.w	r2, [r7, #-168]
 800d1e6:	61da      	str	r2, [r3, #28]
 800d1e8:	f857 2ca4 	ldr.w	r2, [r7, #-164]
 800d1ec:	621a      	str	r2, [r3, #32]
 800d1ee:	f857 2ca0 	ldr.w	r2, [r7, #-160]
 800d1f2:	f8c3 a014 	str.w	sl, [r3, #20]
 800d1f6:	625a      	str	r2, [r3, #36]	; 0x24
 800d1f8:	685b      	ldr	r3, [r3, #4]
 800d1fa:	4798      	blx	r3
       ci++, compptr++) {
 800d1fc:	e779      	b.n	800d0f2 <get_sof+0x12a>
    INPUT_BYTE(cinfo, c, return FALSE);
 800d1fe:	68f3      	ldr	r3, [r6, #12]
 800d200:	4620      	mov	r0, r4
 800d202:	4798      	blx	r3
 800d204:	2800      	cmp	r0, #0
 800d206:	f43f aeed 	beq.w	800cfe4 <get_sof+0x1c>
 800d20a:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d20e:	e7cd      	b.n	800d1ac <get_sof+0x1e4>
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800d210:	68f3      	ldr	r3, [r6, #12]
 800d212:	4620      	mov	r0, r4
 800d214:	4798      	blx	r3
 800d216:	2800      	cmp	r0, #0
 800d218:	f43f aee4 	beq.w	800cfe4 <get_sof+0x1c>
 800d21c:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d220:	e7d0      	b.n	800d1c4 <get_sof+0x1fc>

0800d222 <examine_app0>:
	      unsigned int datalen, INT32 remaining)
/* Examine first few bytes from an APP0.
 * Take appropriate action if it is a JFIF marker.
 * datalen is # of bytes at data[], remaining is length of rest of marker data.
 */
{
 800d222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  INT32 totallen = (INT32) datalen + remaining;

  if (datalen >= APP0_DATA_LEN &&
 800d226:	2a0d      	cmp	r2, #13
{
 800d228:	460c      	mov	r4, r1
 800d22a:	6801      	ldr	r1, [r0, #0]
  INT32 totallen = (INT32) datalen + remaining;
 800d22c:	eb02 0603 	add.w	r6, r2, r3
{
 800d230:	4605      	mov	r5, r0
 800d232:	684b      	ldr	r3, [r1, #4]
  if (datalen >= APP0_DATA_LEN &&
 800d234:	d96d      	bls.n	800d312 <examine_app0+0xf0>
 800d236:	7822      	ldrb	r2, [r4, #0]
 800d238:	2a4a      	cmp	r2, #74	; 0x4a
 800d23a:	f040 808f 	bne.w	800d35c <examine_app0+0x13a>
      GETJOCTET(data[0]) == 0x4A &&
 800d23e:	7862      	ldrb	r2, [r4, #1]
 800d240:	2a46      	cmp	r2, #70	; 0x46
 800d242:	f040 808b 	bne.w	800d35c <examine_app0+0x13a>
      GETJOCTET(data[1]) == 0x46 &&
 800d246:	78a2      	ldrb	r2, [r4, #2]
 800d248:	2a49      	cmp	r2, #73	; 0x49
 800d24a:	d16a      	bne.n	800d322 <examine_app0+0x100>
      GETJOCTET(data[2]) == 0x49 &&
 800d24c:	78e2      	ldrb	r2, [r4, #3]
 800d24e:	2a46      	cmp	r2, #70	; 0x46
 800d250:	d167      	bne.n	800d322 <examine_app0+0x100>
      GETJOCTET(data[3]) == 0x46 &&
 800d252:	7922      	ldrb	r2, [r4, #4]
 800d254:	2a00      	cmp	r2, #0
 800d256:	d164      	bne.n	800d322 <examine_app0+0x100>
      GETJOCTET(data[4]) == 0) {
    /* Found JFIF APP0 marker: save info */
    cinfo->saw_JFIF_marker = TRUE;
 800d258:	2201      	movs	r2, #1
 800d25a:	f8c0 211c 	str.w	r2, [r0, #284]	; 0x11c
    cinfo->JFIF_major_version = GETJOCTET(data[5]);
 800d25e:	7962      	ldrb	r2, [r4, #5]
 800d260:	f880 2120 	strb.w	r2, [r0, #288]	; 0x120
     * Major version must be 1, anything else signals an incompatible change.
     * (We used to treat this as an error, but now it's a nonfatal warning,
     * because some bozo at Hijaak couldn't read the spec.)
     * Minor version should be 0..2, but process anyway if newer.
     */
    if (cinfo->JFIF_major_version != 1)
 800d264:	2a01      	cmp	r2, #1
    cinfo->JFIF_minor_version = GETJOCTET(data[6]);
 800d266:	f894 c006 	ldrb.w	ip, [r4, #6]
 800d26a:	f880 c121 	strb.w	ip, [r0, #289]	; 0x121
    cinfo->density_unit = GETJOCTET(data[7]);
 800d26e:	79e7      	ldrb	r7, [r4, #7]
 800d270:	f880 7122 	strb.w	r7, [r0, #290]	; 0x122
    cinfo->X_density = (GETJOCTET(data[8]) << 8) + GETJOCTET(data[9]);
 800d274:	f894 e008 	ldrb.w	lr, [r4, #8]
 800d278:	7a67      	ldrb	r7, [r4, #9]
 800d27a:	eb07 270e 	add.w	r7, r7, lr, lsl #8
 800d27e:	f8a0 7124 	strh.w	r7, [r0, #292]	; 0x124
    cinfo->Y_density = (GETJOCTET(data[10]) << 8) + GETJOCTET(data[11]);
 800d282:	f894 e00a 	ldrb.w	lr, [r4, #10]
 800d286:	7ae7      	ldrb	r7, [r4, #11]
 800d288:	eb07 270e 	add.w	r7, r7, lr, lsl #8
 800d28c:	f8a0 7126 	strh.w	r7, [r0, #294]	; 0x126
    if (cinfo->JFIF_major_version != 1)
 800d290:	d007      	beq.n	800d2a2 <examine_app0+0x80>
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800d292:	277a      	movs	r7, #122	; 0x7a
 800d294:	f8c1 c01c 	str.w	ip, [r1, #28]
 800d298:	e9c1 7205 	strd	r7, r2, [r1, #20]
 800d29c:	f04f 31ff 	mov.w	r1, #4294967295
 800d2a0:	4798      	blx	r3
	      cinfo->JFIF_major_version, cinfo->JFIF_minor_version);
    /* Generate trace messages */
    TRACEMS5(cinfo, 1, JTRC_JFIF,
 800d2a2:	682b      	ldr	r3, [r5, #0]
 800d2a4:	2101      	movs	r1, #1
 800d2a6:	f895 2120 	ldrb.w	r2, [r5, #288]	; 0x120
 800d2aa:	4628      	mov	r0, r5
 800d2ac:	619a      	str	r2, [r3, #24]
 800d2ae:	f895 2121 	ldrb.w	r2, [r5, #289]	; 0x121
 800d2b2:	61da      	str	r2, [r3, #28]
 800d2b4:	f8b5 2124 	ldrh.w	r2, [r5, #292]	; 0x124
 800d2b8:	621a      	str	r2, [r3, #32]
 800d2ba:	f8b5 2126 	ldrh.w	r2, [r5, #294]	; 0x126
 800d2be:	625a      	str	r2, [r3, #36]	; 0x24
 800d2c0:	f895 2122 	ldrb.w	r2, [r5, #290]	; 0x122
 800d2c4:	629a      	str	r2, [r3, #40]	; 0x28
 800d2c6:	2259      	movs	r2, #89	; 0x59
 800d2c8:	615a      	str	r2, [r3, #20]
 800d2ca:	685b      	ldr	r3, [r3, #4]
 800d2cc:	4798      	blx	r3
	     cinfo->JFIF_major_version, cinfo->JFIF_minor_version,
	     cinfo->X_density, cinfo->Y_density, cinfo->density_unit);
    /* Validate thumbnail dimensions and issue appropriate messages */
    if (GETJOCTET(data[12]) | GETJOCTET(data[13]))
 800d2ce:	7b22      	ldrb	r2, [r4, #12]
 800d2d0:	7b63      	ldrb	r3, [r4, #13]
 800d2d2:	4313      	orrs	r3, r2
 800d2d4:	d00a      	beq.n	800d2ec <examine_app0+0xca>
      TRACEMS2(cinfo, 1, JTRC_JFIF_THUMBNAIL,
 800d2d6:	682b      	ldr	r3, [r5, #0]
 800d2d8:	225c      	movs	r2, #92	; 0x5c
 800d2da:	2101      	movs	r1, #1
 800d2dc:	4628      	mov	r0, r5
 800d2de:	615a      	str	r2, [r3, #20]
 800d2e0:	7b22      	ldrb	r2, [r4, #12]
 800d2e2:	619a      	str	r2, [r3, #24]
 800d2e4:	7b62      	ldrb	r2, [r4, #13]
 800d2e6:	61da      	str	r2, [r3, #28]
 800d2e8:	685b      	ldr	r3, [r3, #4]
 800d2ea:	4798      	blx	r3
	       GETJOCTET(data[12]), GETJOCTET(data[13]));
    totallen -= APP0_DATA_LEN;
    if (totallen !=
	((INT32)GETJOCTET(data[12]) * (INT32)GETJOCTET(data[13]) * (INT32) 3))
 800d2ec:	7b22      	ldrb	r2, [r4, #12]
    totallen -= APP0_DATA_LEN;
 800d2ee:	3e0e      	subs	r6, #14
	((INT32)GETJOCTET(data[12]) * (INT32)GETJOCTET(data[13]) * (INT32) 3))
 800d2f0:	7b63      	ldrb	r3, [r4, #13]
 800d2f2:	fb12 f203 	smulbb	r2, r2, r3
 800d2f6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    if (totallen !=
 800d2fa:	42b2      	cmp	r2, r6
 800d2fc:	d030      	beq.n	800d360 <examine_app0+0x13e>
      TRACEMS1(cinfo, 1, JTRC_JFIF_BADTHUMBNAILSIZE, (int) totallen);
 800d2fe:	682a      	ldr	r2, [r5, #0]
 800d300:	235a      	movs	r3, #90	; 0x5a
 800d302:	e9c2 3605 	strd	r3, r6, [r2, #20]
 800d306:	6853      	ldr	r3, [r2, #4]
	       GETJOCTET(data[5]), (int) totallen);
      break;
    }
  } else {
    /* Start of APP0 does not match "JFIF" or "JFXX", or too short */
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800d308:	4628      	mov	r0, r5
 800d30a:	2101      	movs	r1, #1
  }
}
 800d30c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800d310:	4718      	bx	r3
  } else if (datalen >= 6 &&
 800d312:	2a05      	cmp	r2, #5
 800d314:	d922      	bls.n	800d35c <examine_app0+0x13a>
 800d316:	7822      	ldrb	r2, [r4, #0]
 800d318:	2a4a      	cmp	r2, #74	; 0x4a
 800d31a:	d11f      	bne.n	800d35c <examine_app0+0x13a>
      GETJOCTET(data[0]) == 0x4A &&
 800d31c:	7862      	ldrb	r2, [r4, #1]
 800d31e:	2a46      	cmp	r2, #70	; 0x46
 800d320:	d11c      	bne.n	800d35c <examine_app0+0x13a>
      GETJOCTET(data[1]) == 0x46 &&
 800d322:	78a2      	ldrb	r2, [r4, #2]
 800d324:	2a58      	cmp	r2, #88	; 0x58
 800d326:	d119      	bne.n	800d35c <examine_app0+0x13a>
      GETJOCTET(data[2]) == 0x58 &&
 800d328:	78e2      	ldrb	r2, [r4, #3]
 800d32a:	2a58      	cmp	r2, #88	; 0x58
 800d32c:	d116      	bne.n	800d35c <examine_app0+0x13a>
      GETJOCTET(data[3]) == 0x58 &&
 800d32e:	7922      	ldrb	r2, [r4, #4]
 800d330:	b9a2      	cbnz	r2, 800d35c <examine_app0+0x13a>
    switch (GETJOCTET(data[5])) {
 800d332:	7962      	ldrb	r2, [r4, #5]
 800d334:	2a11      	cmp	r2, #17
 800d336:	d007      	beq.n	800d348 <examine_app0+0x126>
 800d338:	2a13      	cmp	r2, #19
 800d33a:	d007      	beq.n	800d34c <examine_app0+0x12a>
 800d33c:	2a10      	cmp	r2, #16
 800d33e:	d107      	bne.n	800d350 <examine_app0+0x12e>
      TRACEMS1(cinfo, 1, JTRC_THUMB_JPEG, (int) totallen);
 800d340:	226e      	movs	r2, #110	; 0x6e
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800d342:	e9c1 2605 	strd	r2, r6, [r1, #20]
 800d346:	e7df      	b.n	800d308 <examine_app0+0xe6>
      TRACEMS1(cinfo, 1, JTRC_THUMB_PALETTE, (int) totallen);
 800d348:	226f      	movs	r2, #111	; 0x6f
 800d34a:	e7fa      	b.n	800d342 <examine_app0+0x120>
      TRACEMS1(cinfo, 1, JTRC_THUMB_RGB, (int) totallen);
 800d34c:	2270      	movs	r2, #112	; 0x70
 800d34e:	e7f8      	b.n	800d342 <examine_app0+0x120>
      TRACEMS2(cinfo, 1, JTRC_JFIF_EXTENSION,
 800d350:	225b      	movs	r2, #91	; 0x5b
 800d352:	614a      	str	r2, [r1, #20]
 800d354:	7962      	ldrb	r2, [r4, #5]
 800d356:	e9c1 2606 	strd	r2, r6, [r1, #24]
 800d35a:	e7d5      	b.n	800d308 <examine_app0+0xe6>
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800d35c:	224f      	movs	r2, #79	; 0x4f
 800d35e:	e7f0      	b.n	800d342 <examine_app0+0x120>
}
 800d360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d364 <skip_variable>:


METHODDEF(boolean)
skip_variable (j_decompress_ptr cinfo)
/* Skip over an unknown or uninteresting variable-length marker */
{
 800d364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  INT32 length;
  INPUT_VARS(cinfo);
 800d368:	6984      	ldr	r4, [r0, #24]
{
 800d36a:	4607      	mov	r7, r0
  INPUT_VARS(cinfo);
 800d36c:	6863      	ldr	r3, [r4, #4]

  INPUT_2BYTES(cinfo, length, return FALSE);
 800d36e:	b31b      	cbz	r3, 800d3b8 <skip_variable+0x54>
  INPUT_VARS(cinfo);
 800d370:	6825      	ldr	r5, [r4, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d372:	782e      	ldrb	r6, [r5, #0]
 800d374:	f1b3 0801 	subs.w	r8, r3, #1
 800d378:	ea4f 2906 	mov.w	r9, r6, lsl #8
 800d37c:	d025      	beq.n	800d3ca <skip_variable+0x66>
 800d37e:	3501      	adds	r5, #1
 800d380:	f815 6b01 	ldrb.w	r6, [r5], #1
  length -= 2;
  
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800d384:	235d      	movs	r3, #93	; 0x5d
 800d386:	683a      	ldr	r2, [r7, #0]
 800d388:	2101      	movs	r1, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d38a:	444e      	add	r6, r9
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800d38c:	4638      	mov	r0, r7
 800d38e:	6153      	str	r3, [r2, #20]
  length -= 2;
 800d390:	3e02      	subs	r6, #2
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800d392:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800d396:	e9c2 3606 	strd	r3, r6, [r2, #24]
 800d39a:	6853      	ldr	r3, [r2, #4]
 800d39c:	4798      	blx	r3
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d39e:	f108 33ff 	add.w	r3, r8, #4294967295

  INPUT_SYNC(cinfo);		/* do before skip_input_data */
  if (length > 0)
 800d3a2:	2e00      	cmp	r6, #0
  INPUT_SYNC(cinfo);		/* do before skip_input_data */
 800d3a4:	6025      	str	r5, [r4, #0]
 800d3a6:	6063      	str	r3, [r4, #4]
  if (length > 0)
 800d3a8:	dd04      	ble.n	800d3b4 <skip_variable+0x50>
    (*cinfo->src->skip_input_data) (cinfo, (long) length);
 800d3aa:	69bb      	ldr	r3, [r7, #24]
 800d3ac:	4631      	mov	r1, r6
 800d3ae:	4638      	mov	r0, r7
 800d3b0:	691b      	ldr	r3, [r3, #16]
 800d3b2:	4798      	blx	r3

  return TRUE;
 800d3b4:	2001      	movs	r0, #1
 800d3b6:	e003      	b.n	800d3c0 <skip_variable+0x5c>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d3b8:	68e3      	ldr	r3, [r4, #12]
 800d3ba:	4798      	blx	r3
 800d3bc:	b910      	cbnz	r0, 800d3c4 <skip_variable+0x60>
 800d3be:	2000      	movs	r0, #0
}
 800d3c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d3c4:	e9d4 5300 	ldrd	r5, r3, [r4]
 800d3c8:	e7d3      	b.n	800d372 <skip_variable+0xe>
 800d3ca:	68e3      	ldr	r3, [r4, #12]
 800d3cc:	4638      	mov	r0, r7
 800d3ce:	4798      	blx	r3
 800d3d0:	2800      	cmp	r0, #0
 800d3d2:	d0f4      	beq.n	800d3be <skip_variable+0x5a>
 800d3d4:	e9d4 5800 	ldrd	r5, r8, [r4]
 800d3d8:	e7d2      	b.n	800d380 <skip_variable+0x1c>

0800d3da <next_marker>:
 * but it will never be 0 or FF.
 */

LOCAL(boolean)
next_marker (j_decompress_ptr cinfo)
{
 800d3da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int c;
  INPUT_VARS(cinfo);
 800d3de:	6986      	ldr	r6, [r0, #24]
{
 800d3e0:	4680      	mov	r8, r0
  INPUT_VARS(cinfo);
 800d3e2:	e9d6 4700 	ldrd	r4, r7, [r6]

  for (;;) {
    INPUT_BYTE(cinfo, c, return FALSE);
 800d3e6:	b987      	cbnz	r7, 800d40a <next_marker+0x30>
 800d3e8:	68f3      	ldr	r3, [r6, #12]
 800d3ea:	4640      	mov	r0, r8
 800d3ec:	4798      	blx	r3
 800d3ee:	b950      	cbnz	r0, 800d406 <next_marker+0x2c>
 800d3f0:	2000      	movs	r0, #0

  cinfo->unread_marker = c;

  INPUT_SYNC(cinfo);
  return TRUE;
}
 800d3f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      cinfo->marker->discarded_bytes++;
 800d3f6:	f8d8 21cc 	ldr.w	r2, [r8, #460]	; 0x1cc
 800d3fa:	6993      	ldr	r3, [r2, #24]
 800d3fc:	3301      	adds	r3, #1
    cinfo->marker->discarded_bytes += 2;
 800d3fe:	6193      	str	r3, [r2, #24]
    INPUT_SYNC(cinfo);
 800d400:	e9c6 4700 	strd	r4, r7, [r6]
    INPUT_BYTE(cinfo, c, return FALSE);
 800d404:	e7ef      	b.n	800d3e6 <next_marker+0xc>
      INPUT_BYTE(cinfo, c, return FALSE);
 800d406:	e9d6 4700 	ldrd	r4, r7, [r6]
 800d40a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d40e:	3f01      	subs	r7, #1
    while (c != 0xFF) {
 800d410:	2bff      	cmp	r3, #255	; 0xff
 800d412:	d1f0      	bne.n	800d3f6 <next_marker+0x1c>
      INPUT_BYTE(cinfo, c, return FALSE);
 800d414:	b937      	cbnz	r7, 800d424 <next_marker+0x4a>
 800d416:	68f3      	ldr	r3, [r6, #12]
 800d418:	4640      	mov	r0, r8
 800d41a:	4798      	blx	r3
 800d41c:	2800      	cmp	r0, #0
 800d41e:	d0e7      	beq.n	800d3f0 <next_marker+0x16>
 800d420:	e9d6 4700 	ldrd	r4, r7, [r6]
 800d424:	f814 5b01 	ldrb.w	r5, [r4], #1
 800d428:	3f01      	subs	r7, #1
    } while (c == 0xFF);
 800d42a:	2dff      	cmp	r5, #255	; 0xff
 800d42c:	d0f2      	beq.n	800d414 <next_marker+0x3a>
    if (c != 0)
 800d42e:	f8d8 21cc 	ldr.w	r2, [r8, #460]	; 0x1cc
 800d432:	6993      	ldr	r3, [r2, #24]
 800d434:	b90d      	cbnz	r5, 800d43a <next_marker+0x60>
    cinfo->marker->discarded_bytes += 2;
 800d436:	3302      	adds	r3, #2
 800d438:	e7e1      	b.n	800d3fe <next_marker+0x24>
  if (cinfo->marker->discarded_bytes != 0) {
 800d43a:	b173      	cbz	r3, 800d45a <next_marker+0x80>
    WARNMS2(cinfo, JWRN_EXTRANEOUS_DATA, cinfo->marker->discarded_bytes, c);
 800d43c:	f8d8 2000 	ldr.w	r2, [r8]
 800d440:	2177      	movs	r1, #119	; 0x77
 800d442:	4640      	mov	r0, r8
 800d444:	61d5      	str	r5, [r2, #28]
 800d446:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800d44a:	6853      	ldr	r3, [r2, #4]
 800d44c:	f04f 31ff 	mov.w	r1, #4294967295
 800d450:	4798      	blx	r3
    cinfo->marker->discarded_bytes = 0;
 800d452:	f8d8 31cc 	ldr.w	r3, [r8, #460]	; 0x1cc
 800d456:	2200      	movs	r2, #0
 800d458:	619a      	str	r2, [r3, #24]
  cinfo->unread_marker = c;
 800d45a:	f8c8 51b4 	str.w	r5, [r8, #436]	; 0x1b4
  return TRUE;
 800d45e:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800d460:	e9c6 4700 	strd	r4, r7, [r6]
  return TRUE;
 800d464:	e7c5      	b.n	800d3f2 <next_marker+0x18>

0800d466 <reset_marker_reader>:
METHODDEF(void)
reset_marker_reader (j_decompress_ptr cinfo)
{
  my_marker_ptr marker = (my_marker_ptr) cinfo->marker;

  cinfo->comp_info = NULL;		/* until allocated by get_sof */
 800d466:	2300      	movs	r3, #0
  my_marker_ptr marker = (my_marker_ptr) cinfo->marker;
 800d468:	f8d0 21cc 	ldr.w	r2, [r0, #460]	; 0x1cc
  cinfo->comp_info = NULL;		/* until allocated by get_sof */
 800d46c:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
  cinfo->input_scan_number = 0;		/* no SOS seen yet */
 800d470:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  cinfo->unread_marker = 0;		/* no pending marker */
 800d474:	f8c0 31b4 	str.w	r3, [r0, #436]	; 0x1b4
  marker->pub.saw_SOI = FALSE;		/* set internal state too */
  marker->pub.saw_SOF = FALSE;
  marker->pub.discarded_bytes = 0;
 800d478:	6193      	str	r3, [r2, #24]
  marker->cur_marker = NULL;
 800d47a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  marker->pub.saw_SOF = FALSE;
 800d47e:	e9c2 3303 	strd	r3, r3, [r2, #12]
}
 800d482:	4770      	bx	lr

0800d484 <get_dht>:
{
 800d484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INPUT_VARS(cinfo);
 800d488:	6987      	ldr	r7, [r0, #24]
{
 800d48a:	b0c9      	sub	sp, #292	; 0x124
 800d48c:	4605      	mov	r5, r0
  INPUT_VARS(cinfo);
 800d48e:	687e      	ldr	r6, [r7, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d490:	b1fe      	cbz	r6, 800d4d2 <get_dht+0x4e>
  INPUT_VARS(cinfo);
 800d492:	683c      	ldr	r4, [r7, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d494:	f894 9000 	ldrb.w	r9, [r4]
 800d498:	3e01      	subs	r6, #1
 800d49a:	ea4f 2809 	mov.w	r8, r9, lsl #8
 800d49e:	d022      	beq.n	800d4e6 <get_dht+0x62>
 800d4a0:	3401      	adds	r4, #1
 800d4a2:	f814 9b01 	ldrb.w	r9, [r4], #1
 800d4a6:	3e01      	subs	r6, #1
      INPUT_BYTE(cinfo, bits[i], return FALSE);
 800d4a8:	f10d 0b0c 	add.w	fp, sp, #12
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d4ac:	44c1      	add	r9, r8
  length -= 2;
 800d4ae:	f1a9 0902 	sub.w	r9, r9, #2
  while (length > 16) {
 800d4b2:	f1b9 0f10 	cmp.w	r9, #16
 800d4b6:	dc1e      	bgt.n	800d4f6 <get_dht+0x72>
  if (length != 0)
 800d4b8:	f1b9 0f00 	cmp.w	r9, #0
 800d4bc:	d005      	beq.n	800d4ca <get_dht+0x46>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800d4be:	682b      	ldr	r3, [r5, #0]
 800d4c0:	220c      	movs	r2, #12
 800d4c2:	4628      	mov	r0, r5
 800d4c4:	615a      	str	r2, [r3, #20]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	4798      	blx	r3
  return TRUE;
 800d4ca:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800d4cc:	e9c7 4600 	strd	r4, r6, [r7]
  return TRUE;
 800d4d0:	e003      	b.n	800d4da <get_dht+0x56>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	4798      	blx	r3
 800d4d6:	b918      	cbnz	r0, 800d4e0 <get_dht+0x5c>
 800d4d8:	2000      	movs	r0, #0
}
 800d4da:	b049      	add	sp, #292	; 0x124
 800d4dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d4e0:	e9d7 4600 	ldrd	r4, r6, [r7]
 800d4e4:	e7d6      	b.n	800d494 <get_dht+0x10>
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	4628      	mov	r0, r5
 800d4ea:	4798      	blx	r3
 800d4ec:	2800      	cmp	r0, #0
 800d4ee:	d0f3      	beq.n	800d4d8 <get_dht+0x54>
 800d4f0:	e9d7 4600 	ldrd	r4, r6, [r7]
 800d4f4:	e7d5      	b.n	800d4a2 <get_dht+0x1e>
    INPUT_BYTE(cinfo, index, return FALSE);
 800d4f6:	b936      	cbnz	r6, 800d506 <get_dht+0x82>
 800d4f8:	68fa      	ldr	r2, [r7, #12]
 800d4fa:	4628      	mov	r0, r5
 800d4fc:	4790      	blx	r2
 800d4fe:	2800      	cmp	r0, #0
 800d500:	d0ea      	beq.n	800d4d8 <get_dht+0x54>
 800d502:	e9d7 4600 	ldrd	r4, r6, [r7]
 800d506:	f814 8b01 	ldrb.w	r8, [r4], #1
    TRACEMS1(cinfo, 1, JTRC_DHT, index);
 800d50a:	2152      	movs	r1, #82	; 0x52
 800d50c:	682a      	ldr	r2, [r5, #0]
 800d50e:	4628      	mov	r0, r5
    INPUT_BYTE(cinfo, index, return FALSE);
 800d510:	f8cd 8000 	str.w	r8, [sp]
 800d514:	3e01      	subs	r6, #1
    count = 0;
 800d516:	f04f 0a00 	mov.w	sl, #0
    TRACEMS1(cinfo, 1, JTRC_DHT, index);
 800d51a:	e9c2 1805 	strd	r1, r8, [r2, #20]
 800d51e:	6852      	ldr	r2, [r2, #4]
 800d520:	2101      	movs	r1, #1
 800d522:	4790      	blx	r2
    for (i = 1; i <= 16; i++) {
 800d524:	2201      	movs	r2, #1
      INPUT_BYTE(cinfo, bits[i], return FALSE);
 800d526:	b946      	cbnz	r6, 800d53a <get_dht+0xb6>
 800d528:	68f9      	ldr	r1, [r7, #12]
 800d52a:	4628      	mov	r0, r5
 800d52c:	9201      	str	r2, [sp, #4]
 800d52e:	4788      	blx	r1
 800d530:	2800      	cmp	r0, #0
 800d532:	d0d1      	beq.n	800d4d8 <get_dht+0x54>
 800d534:	9a01      	ldr	r2, [sp, #4]
 800d536:	e9d7 4600 	ldrd	r4, r6, [r7]
 800d53a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d53e:	3e01      	subs	r6, #1
 800d540:	f802 100b 	strb.w	r1, [r2, fp]
    for (i = 1; i <= 16; i++) {
 800d544:	3201      	adds	r2, #1
      count += bits[i];
 800d546:	448a      	add	sl, r1
    for (i = 1; i <= 16; i++) {
 800d548:	2a11      	cmp	r2, #17
 800d54a:	d1ec      	bne.n	800d526 <get_dht+0xa2>
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800d54c:	682a      	ldr	r2, [r5, #0]
    length -= 1 + 16;
 800d54e:	f1a9 0311 	sub.w	r3, r9, #17
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800d552:	f89b 1001 	ldrb.w	r1, [fp, #1]
 800d556:	f04f 0958 	mov.w	r9, #88	; 0x58
 800d55a:	4628      	mov	r0, r5
    length -= 1 + 16;
 800d55c:	9301      	str	r3, [sp, #4]
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800d55e:	6191      	str	r1, [r2, #24]
 800d560:	f89b 1002 	ldrb.w	r1, [fp, #2]
 800d564:	f8c2 9014 	str.w	r9, [r2, #20]
 800d568:	61d1      	str	r1, [r2, #28]
 800d56a:	f89b 1003 	ldrb.w	r1, [fp, #3]
 800d56e:	6211      	str	r1, [r2, #32]
 800d570:	f89b 1004 	ldrb.w	r1, [fp, #4]
 800d574:	6251      	str	r1, [r2, #36]	; 0x24
 800d576:	f89b 1005 	ldrb.w	r1, [fp, #5]
 800d57a:	6291      	str	r1, [r2, #40]	; 0x28
 800d57c:	f89b 1006 	ldrb.w	r1, [fp, #6]
 800d580:	62d1      	str	r1, [r2, #44]	; 0x2c
 800d582:	f89b 1007 	ldrb.w	r1, [fp, #7]
 800d586:	6311      	str	r1, [r2, #48]	; 0x30
 800d588:	f89b 1008 	ldrb.w	r1, [fp, #8]
 800d58c:	6351      	str	r1, [r2, #52]	; 0x34
 800d58e:	2102      	movs	r1, #2
 800d590:	6852      	ldr	r2, [r2, #4]
 800d592:	4790      	blx	r2
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800d594:	682a      	ldr	r2, [r5, #0]
 800d596:	f89b 1009 	ldrb.w	r1, [fp, #9]
 800d59a:	4628      	mov	r0, r5
 800d59c:	f8c2 9014 	str.w	r9, [r2, #20]
 800d5a0:	6191      	str	r1, [r2, #24]
 800d5a2:	f89b 100a 	ldrb.w	r1, [fp, #10]
 800d5a6:	61d1      	str	r1, [r2, #28]
 800d5a8:	f89b 100b 	ldrb.w	r1, [fp, #11]
 800d5ac:	6211      	str	r1, [r2, #32]
 800d5ae:	f89b 100c 	ldrb.w	r1, [fp, #12]
 800d5b2:	6251      	str	r1, [r2, #36]	; 0x24
 800d5b4:	f89b 100d 	ldrb.w	r1, [fp, #13]
 800d5b8:	6291      	str	r1, [r2, #40]	; 0x28
 800d5ba:	f89b 100e 	ldrb.w	r1, [fp, #14]
 800d5be:	62d1      	str	r1, [r2, #44]	; 0x2c
 800d5c0:	f89b 100f 	ldrb.w	r1, [fp, #15]
 800d5c4:	6311      	str	r1, [r2, #48]	; 0x30
 800d5c6:	f89b 1010 	ldrb.w	r1, [fp, #16]
 800d5ca:	6351      	str	r1, [r2, #52]	; 0x34
 800d5cc:	2102      	movs	r1, #2
 800d5ce:	6852      	ldr	r2, [r2, #4]
 800d5d0:	4790      	blx	r2
    if (count > 256 || ((INT32) count) > length)
 800d5d2:	f5ba 7f80 	cmp.w	sl, #256	; 0x100
 800d5d6:	dc02      	bgt.n	800d5de <get_dht+0x15a>
 800d5d8:	9b01      	ldr	r3, [sp, #4]
 800d5da:	4553      	cmp	r3, sl
 800d5dc:	da05      	bge.n	800d5ea <get_dht+0x166>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800d5de:	682a      	ldr	r2, [r5, #0]
 800d5e0:	2109      	movs	r1, #9
 800d5e2:	4628      	mov	r0, r5
 800d5e4:	6151      	str	r1, [r2, #20]
 800d5e6:	6812      	ldr	r2, [r2, #0]
 800d5e8:	4790      	blx	r2
 800d5ea:	f04f 0900 	mov.w	r9, #0
      INPUT_BYTE(cinfo, huffval[i], return FALSE);
 800d5ee:	a908      	add	r1, sp, #32
    for (i = 0; i < count; i++)
 800d5f0:	45d1      	cmp	r9, sl
 800d5f2:	d13f      	bne.n	800d674 <get_dht+0x1f0>
    if (index & 0x10) {		/* AC table definition */
 800d5f4:	f018 0f10 	tst.w	r8, #16
    length -= count;
 800d5f8:	9b01      	ldr	r3, [sp, #4]
 800d5fa:	eba3 0909 	sub.w	r9, r3, r9
      index -= 0x10;
 800d5fe:	bf17      	itett	ne
 800d600:	f1a8 0310 	subne.w	r3, r8, #16
      htblptr = &cinfo->dc_huff_tbl_ptrs[index];
 800d604:	f108 082d 	addeq.w	r8, r8, #45	; 0x2d
      htblptr = &cinfo->ac_huff_tbl_ptrs[index];
 800d608:	f108 0821 	addne.w	r8, r8, #33	; 0x21
      index -= 0x10;
 800d60c:	9300      	strne	r3, [sp, #0]
    if (index < 0 || index >= NUM_HUFF_TBLS)
 800d60e:	9b00      	ldr	r3, [sp, #0]
      htblptr = &cinfo->dc_huff_tbl_ptrs[index];
 800d610:	eb05 0888 	add.w	r8, r5, r8, lsl #2
    if (index < 0 || index >= NUM_HUFF_TBLS)
 800d614:	2b03      	cmp	r3, #3
 800d616:	d906      	bls.n	800d626 <get_dht+0x1a2>
      ERREXIT1(cinfo, JERR_DHT_INDEX, index);
 800d618:	682a      	ldr	r2, [r5, #0]
 800d61a:	211f      	movs	r1, #31
 800d61c:	4628      	mov	r0, r5
 800d61e:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800d622:	6812      	ldr	r2, [r2, #0]
 800d624:	4790      	blx	r2
    if (*htblptr == NULL)
 800d626:	f8d8 2000 	ldr.w	r2, [r8]
 800d62a:	b922      	cbnz	r2, 800d636 <get_dht+0x1b2>
      *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
 800d62c:	4628      	mov	r0, r5
 800d62e:	f7fb fc49 	bl	8008ec4 <jpeg_alloc_huff_table>
 800d632:	f8c8 0000 	str.w	r0, [r8]
    MEMCOPY((*htblptr)->bits, bits, SIZEOF((*htblptr)->bits));
 800d636:	2200      	movs	r2, #0
 800d638:	46de      	mov	lr, fp
 800d63a:	f10d 0a1c 	add.w	sl, sp, #28
 800d63e:	f88b 2000 	strb.w	r2, [fp]
 800d642:	f8d8 2000 	ldr.w	r2, [r8]
 800d646:	46f4      	mov	ip, lr
 800d648:	3208      	adds	r2, #8
 800d64a:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 800d64e:	45d4      	cmp	ip, sl
 800d650:	f842 0c08 	str.w	r0, [r2, #-8]
 800d654:	f842 1c04 	str.w	r1, [r2, #-4]
 800d658:	46e6      	mov	lr, ip
 800d65a:	d1f4      	bne.n	800d646 <get_dht+0x1c2>
 800d65c:	f89c 1000 	ldrb.w	r1, [ip]
 800d660:	7011      	strb	r1, [r2, #0]
    MEMCOPY((*htblptr)->huffval, huffval, SIZEOF((*htblptr)->huffval));
 800d662:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d666:	f8d8 0000 	ldr.w	r0, [r8]
 800d66a:	a908      	add	r1, sp, #32
 800d66c:	3011      	adds	r0, #17
 800d66e:	f019 ff4b 	bl	8027508 <memcpy>
 800d672:	e71e      	b.n	800d4b2 <get_dht+0x2e>
      INPUT_BYTE(cinfo, huffval[i], return FALSE);
 800d674:	b946      	cbnz	r6, 800d688 <get_dht+0x204>
 800d676:	68fa      	ldr	r2, [r7, #12]
 800d678:	4628      	mov	r0, r5
 800d67a:	4790      	blx	r2
 800d67c:	2800      	cmp	r0, #0
 800d67e:	f43f af2b 	beq.w	800d4d8 <get_dht+0x54>
 800d682:	a908      	add	r1, sp, #32
 800d684:	e9d7 4600 	ldrd	r4, r6, [r7]
 800d688:	f814 2b01 	ldrb.w	r2, [r4], #1
 800d68c:	3e01      	subs	r6, #1
 800d68e:	f809 2001 	strb.w	r2, [r9, r1]
    for (i = 0; i < count; i++)
 800d692:	f109 0901 	add.w	r9, r9, #1
 800d696:	e7ab      	b.n	800d5f0 <get_dht+0x16c>

0800d698 <read_markers>:
{
 800d698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d69c:	4604      	mov	r4, r0
 800d69e:	b085      	sub	sp, #20
    if (cinfo->unread_marker == 0) {
 800d6a0:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 800d6a4:	bb2b      	cbnz	r3, 800d6f2 <read_markers+0x5a>
      if (! cinfo->marker->saw_SOI) {
 800d6a6:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800d6aa:	68db      	ldr	r3, [r3, #12]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d17c      	bne.n	800d7aa <read_markers+0x112>
  INPUT_VARS(cinfo);
 800d6b0:	69a7      	ldr	r7, [r4, #24]
 800d6b2:	687b      	ldr	r3, [r7, #4]
  INPUT_BYTE(cinfo, c, return FALSE);
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d06a      	beq.n	800d78e <read_markers+0xf6>
  INPUT_VARS(cinfo);
 800d6b8:	683d      	ldr	r5, [r7, #0]
  INPUT_BYTE(cinfo, c2, return FALSE);
 800d6ba:	3b01      	subs	r3, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800d6bc:	f895 8000 	ldrb.w	r8, [r5]
  INPUT_BYTE(cinfo, c2, return FALSE);
 800d6c0:	d06c      	beq.n	800d79c <read_markers+0x104>
  INPUT_BYTE(cinfo, c, return FALSE);
 800d6c2:	3501      	adds	r5, #1
  if (c != 0xFF || c2 != (int) M_SOI)
 800d6c4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
  INPUT_BYTE(cinfo, c2, return FALSE);
 800d6c8:	f103 36ff 	add.w	r6, r3, #4294967295
 800d6cc:	f815 9b01 	ldrb.w	r9, [r5], #1
  if (c != 0xFF || c2 != (int) M_SOI)
 800d6d0:	d102      	bne.n	800d6d8 <read_markers+0x40>
 800d6d2:	f1b9 0fd8 	cmp.w	r9, #216	; 0xd8
 800d6d6:	d008      	beq.n	800d6ea <read_markers+0x52>
    ERREXIT2(cinfo, JERR_NO_SOI, c, c2);
 800d6d8:	6823      	ldr	r3, [r4, #0]
 800d6da:	2237      	movs	r2, #55	; 0x37
 800d6dc:	4620      	mov	r0, r4
 800d6de:	f8c3 901c 	str.w	r9, [r3, #28]
 800d6e2:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	4798      	blx	r3
  cinfo->unread_marker = c2;
 800d6ea:	f8c4 91b4 	str.w	r9, [r4, #436]	; 0x1b4
  INPUT_SYNC(cinfo);
 800d6ee:	e9c7 5600 	strd	r5, r6, [r7]
    switch (cinfo->unread_marker) {
 800d6f2:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 800d6f6:	2b01      	cmp	r3, #1
 800d6f8:	f000 83bc 	beq.w	800de74 <read_markers+0x7dc>
 800d6fc:	f1a3 02c0 	sub.w	r2, r3, #192	; 0xc0
 800d700:	2a3e      	cmp	r2, #62	; 0x3e
 800d702:	f200 83c4 	bhi.w	800de8e <read_markers+0x7f6>
 800d706:	2a3e      	cmp	r2, #62	; 0x3e
 800d708:	f200 83c1 	bhi.w	800de8e <read_markers+0x7f6>
 800d70c:	e8df f012 	tbh	[pc, r2, lsl #1]
 800d710:	0094008b 	.word	0x0094008b
 800d714:	00a00097 	.word	0x00a00097
 800d718:	00a00232 	.word	0x00a00232
 800d71c:	00a000a0 	.word	0x00a000a0
 800d720:	009b00a0 	.word	0x009b00a0
 800d724:	00a0009d 	.word	0x00a0009d
 800d728:	00a001b8 	.word	0x00a001b8
 800d72c:	00a000a0 	.word	0x00a000a0
 800d730:	03b203b2 	.word	0x03b203b2
 800d734:	03b203b2 	.word	0x03b203b2
 800d738:	03b203b2 	.word	0x03b203b2
 800d73c:	03b203b2 	.word	0x03b203b2
 800d740:	01ac0054 	.word	0x01ac0054
 800d744:	023600a8 	.word	0x023600a8
 800d748:	035403bb 	.word	0x035403bb
 800d74c:	03bf03bf 	.word	0x03bf03bf
 800d750:	03a603a6 	.word	0x03a603a6
 800d754:	03a603a6 	.word	0x03a603a6
 800d758:	03a603a6 	.word	0x03a603a6
 800d75c:	03a603a6 	.word	0x03a603a6
 800d760:	03a603a6 	.word	0x03a603a6
 800d764:	03a603a6 	.word	0x03a603a6
 800d768:	03a603a6 	.word	0x03a603a6
 800d76c:	03a603a6 	.word	0x03a603a6
 800d770:	03bf03bf 	.word	0x03bf03bf
 800d774:	03bf03bf 	.word	0x03bf03bf
 800d778:	03bf03bf 	.word	0x03bf03bf
 800d77c:	03bf03bf 	.word	0x03bf03bf
 800d780:	03bf03bf 	.word	0x03bf03bf
 800d784:	03bf03bf 	.word	0x03bf03bf
 800d788:	03bf03bf 	.word	0x03bf03bf
 800d78c:	03ae      	.short	0x03ae
  INPUT_BYTE(cinfo, c, return FALSE);
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	4620      	mov	r0, r4
 800d792:	4798      	blx	r3
 800d794:	b170      	cbz	r0, 800d7b4 <read_markers+0x11c>
 800d796:	e9d7 5300 	ldrd	r5, r3, [r7]
 800d79a:	e78e      	b.n	800d6ba <read_markers+0x22>
  INPUT_BYTE(cinfo, c2, return FALSE);
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	4620      	mov	r0, r4
 800d7a0:	4798      	blx	r3
 800d7a2:	b138      	cbz	r0, 800d7b4 <read_markers+0x11c>
 800d7a4:	e9d7 5300 	ldrd	r5, r3, [r7]
 800d7a8:	e78c      	b.n	800d6c4 <read_markers+0x2c>
	if (! next_marker(cinfo))
 800d7aa:	4620      	mov	r0, r4
 800d7ac:	f7ff fe15 	bl	800d3da <next_marker>
 800d7b0:	2800      	cmp	r0, #0
 800d7b2:	d19e      	bne.n	800d6f2 <read_markers+0x5a>
	  return JPEG_SUSPENDED;
 800d7b4:	2000      	movs	r0, #0
 800d7b6:	e0e2      	b.n	800d97e <read_markers+0x2e6>
  TRACEMS(cinfo, 1, JTRC_SOI);
 800d7b8:	6823      	ldr	r3, [r4, #0]
 800d7ba:	2268      	movs	r2, #104	; 0x68
 800d7bc:	2101      	movs	r1, #1
 800d7be:	4620      	mov	r0, r4
 800d7c0:	615a      	str	r2, [r3, #20]
 800d7c2:	685b      	ldr	r3, [r3, #4]
 800d7c4:	4798      	blx	r3
  if (cinfo->marker->saw_SOI)
 800d7c6:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800d7ca:	68db      	ldr	r3, [r3, #12]
 800d7cc:	b12b      	cbz	r3, 800d7da <read_markers+0x142>
    ERREXIT(cinfo, JERR_SOI_DUPLICATE);
 800d7ce:	6823      	ldr	r3, [r4, #0]
 800d7d0:	223f      	movs	r2, #63	; 0x3f
 800d7d2:	4620      	mov	r0, r4
 800d7d4:	615a      	str	r2, [r3, #20]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	4798      	blx	r3
 800d7da:	f104 02e8 	add.w	r2, r4, #232	; 0xe8
 800d7de:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
    cinfo->arith_dc_L[i] = 0;
 800d7e2:	2300      	movs	r3, #0
    cinfo->arith_dc_U[i] = 1;
 800d7e4:	2101      	movs	r1, #1
    cinfo->arith_ac_K[i] = 5;
 800d7e6:	2505      	movs	r5, #5
    cinfo->arith_dc_L[i] = 0;
 800d7e8:	f802 3b01 	strb.w	r3, [r2], #1
  for (i = 0; i < NUM_ARITH_TBLS; i++) {
 800d7ec:	4290      	cmp	r0, r2
    cinfo->arith_dc_U[i] = 1;
 800d7ee:	73d1      	strb	r1, [r2, #15]
    cinfo->arith_ac_K[i] = 5;
 800d7f0:	77d5      	strb	r5, [r2, #31]
  for (i = 0; i < NUM_ARITH_TBLS; i++) {
 800d7f2:	d1f9      	bne.n	800d7e8 <read_markers+0x150>
  cinfo->JFIF_major_version = 1; /* set default JFIF APP0 values */
 800d7f4:	f240 1201 	movw	r2, #257	; 0x101
  cinfo->jpeg_color_space = JCS_UNKNOWN;
 800d7f8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  cinfo->CCIR601_sampling = FALSE; /* Assume non-CCIR sampling??? */
 800d7fc:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
  cinfo->JFIF_major_version = 1; /* set default JFIF APP0 values */
 800d800:	f8a4 2120 	strh.w	r2, [r4, #288]	; 0x120
  cinfo->X_density = 1;
 800d804:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  cinfo->density_unit = 0;
 800d808:	f884 3122 	strb.w	r3, [r4, #290]	; 0x122
  cinfo->Adobe_transform = 0;
 800d80c:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
  cinfo->saw_JFIF_marker = FALSE;
 800d810:	e9c4 3346 	strd	r3, r3, [r4, #280]	; 0x118
  cinfo->saw_Adobe_marker = FALSE;
 800d814:	e9c4 2349 	strd	r2, r3, [r4, #292]	; 0x124
  cinfo->marker->saw_SOI = TRUE;
 800d818:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800d81c:	60d9      	str	r1, [r3, #12]
    cinfo->unread_marker = 0;
 800d81e:	2300      	movs	r3, #0
 800d820:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
    if (cinfo->unread_marker == 0) {
 800d824:	e73c      	b.n	800d6a0 <read_markers+0x8>
      if (! get_sof(cinfo, TRUE, FALSE, FALSE))
 800d826:	2300      	movs	r3, #0
 800d828:	2101      	movs	r1, #1
 800d82a:	461a      	mov	r2, r3
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800d82c:	4620      	mov	r0, r4
 800d82e:	f7ff fbcb 	bl	800cfc8 <get_sof>
      if (! skip_variable(cinfo))
 800d832:	2800      	cmp	r0, #0
 800d834:	d1f3      	bne.n	800d81e <read_markers+0x186>
 800d836:	e7bd      	b.n	800d7b4 <read_markers+0x11c>
      if (! get_sof(cinfo, FALSE, FALSE, FALSE))
 800d838:	2300      	movs	r3, #0
      if (! get_sof(cinfo, FALSE, FALSE, TRUE))
 800d83a:	2200      	movs	r2, #0
 800d83c:	e001      	b.n	800d842 <read_markers+0x1aa>
      if (! get_sof(cinfo, FALSE, TRUE, FALSE))
 800d83e:	2300      	movs	r3, #0
 800d840:	2201      	movs	r2, #1
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800d842:	2100      	movs	r1, #0
 800d844:	e7f2      	b.n	800d82c <read_markers+0x194>
      if (! get_sof(cinfo, FALSE, FALSE, TRUE))
 800d846:	2301      	movs	r3, #1
 800d848:	e7f7      	b.n	800d83a <read_markers+0x1a2>
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800d84a:	2301      	movs	r3, #1
 800d84c:	461a      	mov	r2, r3
 800d84e:	e7f8      	b.n	800d842 <read_markers+0x1aa>
      ERREXIT1(cinfo, JERR_SOF_UNSUPPORTED, cinfo->unread_marker);
 800d850:	6822      	ldr	r2, [r4, #0]
 800d852:	213e      	movs	r1, #62	; 0x3e
      ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800d854:	4620      	mov	r0, r4
 800d856:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800d85a:	6813      	ldr	r3, [r2, #0]
 800d85c:	4798      	blx	r3
      break;
 800d85e:	e7de      	b.n	800d81e <read_markers+0x186>
  if (! cinfo->marker->saw_SOF)
 800d860:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
  INPUT_VARS(cinfo);
 800d864:	69a7      	ldr	r7, [r4, #24]
  if (! cinfo->marker->saw_SOF)
 800d866:	691b      	ldr	r3, [r3, #16]
  INPUT_VARS(cinfo);
 800d868:	e9d7 5600 	ldrd	r5, r6, [r7]
  if (! cinfo->marker->saw_SOF)
 800d86c:	b92b      	cbnz	r3, 800d87a <read_markers+0x1e2>
    ERREXIT(cinfo, JERR_SOS_NO_SOF);
 800d86e:	6823      	ldr	r3, [r4, #0]
 800d870:	2240      	movs	r2, #64	; 0x40
 800d872:	4620      	mov	r0, r4
 800d874:	615a      	str	r2, [r3, #20]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	4798      	blx	r3
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d87a:	b936      	cbnz	r6, 800d88a <read_markers+0x1f2>
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	4620      	mov	r0, r4
 800d880:	4798      	blx	r3
 800d882:	2800      	cmp	r0, #0
 800d884:	d096      	beq.n	800d7b4 <read_markers+0x11c>
 800d886:	e9d7 5600 	ldrd	r5, r6, [r7]
 800d88a:	f895 8000 	ldrb.w	r8, [r5]
 800d88e:	3e01      	subs	r6, #1
 800d890:	ea4f 2808 	mov.w	r8, r8, lsl #8
 800d894:	d076      	beq.n	800d984 <read_markers+0x2ec>
 800d896:	3501      	adds	r5, #1
 800d898:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800d89a:	3e01      	subs	r6, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d89c:	4498      	add	r8, r3
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800d89e:	d07a      	beq.n	800d996 <read_markers+0x2fe>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d8a0:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800d8a2:	f815 9b01 	ldrb.w	r9, [r5], #1
  TRACEMS1(cinfo, 1, JTRC_SOS, n);
 800d8a6:	2269      	movs	r2, #105	; 0x69
 800d8a8:	6823      	ldr	r3, [r4, #0]
 800d8aa:	2101      	movs	r1, #1
 800d8ac:	4620      	mov	r0, r4
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800d8ae:	3e01      	subs	r6, #1
  TRACEMS1(cinfo, 1, JTRC_SOS, n);
 800d8b0:	e9c3 2905 	strd	r2, r9, [r3, #20]
 800d8b4:	685b      	ldr	r3, [r3, #4]
 800d8b6:	4798      	blx	r3
  if (length != (n * 2 + 6) || n > MAX_COMPS_IN_SCAN ||
 800d8b8:	f109 0303 	add.w	r3, r9, #3
 800d8bc:	ebb8 0f43 	cmp.w	r8, r3, lsl #1
 800d8c0:	d108      	bne.n	800d8d4 <read_markers+0x23c>
 800d8c2:	f1b9 0f04 	cmp.w	r9, #4
 800d8c6:	dc05      	bgt.n	800d8d4 <read_markers+0x23c>
 800d8c8:	f1b9 0f00 	cmp.w	r9, #0
 800d8cc:	d108      	bne.n	800d8e0 <read_markers+0x248>
      (n == 0 && !cinfo->progressive_mode))
 800d8ce:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800d8d2:	b92b      	cbnz	r3, 800d8e0 <read_markers+0x248>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800d8d4:	6823      	ldr	r3, [r4, #0]
 800d8d6:	220c      	movs	r2, #12
 800d8d8:	4620      	mov	r0, r4
 800d8da:	615a      	str	r2, [r3, #20]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	4798      	blx	r3
  cinfo->comps_in_scan = n;
 800d8e0:	f504 73aa 	add.w	r3, r4, #340	; 0x154
  for (i = 0; i < n; i++) {
 800d8e4:	f04f 0a00 	mov.w	sl, #0
  cinfo->comps_in_scan = n;
 800d8e8:	f8c4 9150 	str.w	r9, [r4, #336]	; 0x150
  for (i = 0; i < n; i++) {
 800d8ec:	9301      	str	r3, [sp, #4]
 800d8ee:	45d1      	cmp	r9, sl
 800d8f0:	dc5a      	bgt.n	800d9a8 <read_markers+0x310>
  INPUT_BYTE(cinfo, c, return FALSE);
 800d8f2:	b93e      	cbnz	r6, 800d904 <read_markers+0x26c>
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	4620      	mov	r0, r4
 800d8f8:	4798      	blx	r3
 800d8fa:	2800      	cmp	r0, #0
 800d8fc:	f43f af5a 	beq.w	800d7b4 <read_markers+0x11c>
 800d900:	e9d7 5600 	ldrd	r5, r6, [r7]
 800d904:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, c, return FALSE);
 800d906:	3e01      	subs	r6, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800d908:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
  INPUT_BYTE(cinfo, c, return FALSE);
 800d90c:	f000 809a 	beq.w	800da44 <read_markers+0x3ac>
  INPUT_BYTE(cinfo, c, return FALSE);
 800d910:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800d912:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, c, return FALSE);
 800d914:	3e01      	subs	r6, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800d916:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
  INPUT_BYTE(cinfo, c, return FALSE);
 800d91a:	f000 809c 	beq.w	800da56 <read_markers+0x3be>
  INPUT_BYTE(cinfo, c, return FALSE);
 800d91e:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800d920:	f815 3b01 	ldrb.w	r3, [r5], #1
  TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
 800d924:	2101      	movs	r1, #1
 800d926:	4620      	mov	r0, r4
  INPUT_BYTE(cinfo, c, return FALSE);
 800d928:	3e01      	subs	r6, #1
  cinfo->Ah = (c >> 4) & 15;
 800d92a:	111a      	asrs	r2, r3, #4
  cinfo->Al = (c     ) & 15;
 800d92c:	f003 030f 	and.w	r3, r3, #15
  cinfo->Ah = (c >> 4) & 15;
 800d930:	f8c4 21a0 	str.w	r2, [r4, #416]	; 0x1a0
  cinfo->Al = (c     ) & 15;
 800d934:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
  TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
 800d938:	f8d4 2198 	ldr.w	r2, [r4, #408]	; 0x198
 800d93c:	6823      	ldr	r3, [r4, #0]
 800d93e:	619a      	str	r2, [r3, #24]
 800d940:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
 800d944:	61da      	str	r2, [r3, #28]
 800d946:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
 800d94a:	621a      	str	r2, [r3, #32]
 800d94c:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
 800d950:	625a      	str	r2, [r3, #36]	; 0x24
 800d952:	226b      	movs	r2, #107	; 0x6b
 800d954:	615a      	str	r2, [r3, #20]
 800d956:	685b      	ldr	r3, [r3, #4]
 800d958:	4798      	blx	r3
  cinfo->marker->next_restart_num = 0;
 800d95a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800d95e:	2200      	movs	r2, #0
 800d960:	615a      	str	r2, [r3, #20]
  if (n) cinfo->input_scan_number++;
 800d962:	f1b9 0f00 	cmp.w	r9, #0
 800d966:	d004      	beq.n	800d972 <read_markers+0x2da>
 800d968:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800d96c:	3301      	adds	r3, #1
 800d96e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      cinfo->unread_marker = 0;	/* processed the marker */
 800d972:	2300      	movs	r3, #0
      return JPEG_REACHED_SOS;
 800d974:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800d976:	e9c7 5600 	strd	r5, r6, [r7]
      cinfo->unread_marker = 0;	/* processed the marker */
 800d97a:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
}
 800d97e:	b005      	add	sp, #20
 800d980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	4620      	mov	r0, r4
 800d988:	4798      	blx	r3
 800d98a:	2800      	cmp	r0, #0
 800d98c:	f43f af12 	beq.w	800d7b4 <read_markers+0x11c>
 800d990:	e9d7 5600 	ldrd	r5, r6, [r7]
 800d994:	e780      	b.n	800d898 <read_markers+0x200>
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	4620      	mov	r0, r4
 800d99a:	4798      	blx	r3
 800d99c:	2800      	cmp	r0, #0
 800d99e:	f43f af09 	beq.w	800d7b4 <read_markers+0x11c>
 800d9a2:	e9d7 5600 	ldrd	r5, r6, [r7]
 800d9a6:	e77c      	b.n	800d8a2 <read_markers+0x20a>
    INPUT_BYTE(cinfo, cc, return FALSE);
 800d9a8:	b93e      	cbnz	r6, 800d9ba <read_markers+0x322>
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	4620      	mov	r0, r4
 800d9ae:	4798      	blx	r3
 800d9b0:	2800      	cmp	r0, #0
 800d9b2:	f43f aeff 	beq.w	800d7b4 <read_markers+0x11c>
 800d9b6:	e9d7 5600 	ldrd	r5, r6, [r7]
    INPUT_BYTE(cinfo, c, return FALSE);
 800d9ba:	3e01      	subs	r6, #1
    INPUT_BYTE(cinfo, cc, return FALSE);
 800d9bc:	f895 b000 	ldrb.w	fp, [r5]
    INPUT_BYTE(cinfo, c, return FALSE);
 800d9c0:	d02f      	beq.n	800da22 <read_markers+0x38a>
    INPUT_BYTE(cinfo, cc, return FALSE);
 800d9c2:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, c, return FALSE);
 800d9c4:	3e01      	subs	r6, #1
 800d9c6:	f815 3b01 	ldrb.w	r3, [r5], #1
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d9ca:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
 800d9ce:	2000      	movs	r0, #0
 800d9d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d9d2:	4290      	cmp	r0, r2
 800d9d4:	db2e      	blt.n	800da34 <read_markers+0x39c>
    ERREXIT1(cinfo, JERR_BAD_COMPONENT_ID, cc);
 800d9d6:	6821      	ldr	r1, [r4, #0]
 800d9d8:	4620      	mov	r0, r4
 800d9da:	9302      	str	r3, [sp, #8]
 800d9dc:	2304      	movs	r3, #4
 800d9de:	e9c1 3b05 	strd	r3, fp, [r1, #20]
 800d9e2:	6809      	ldr	r1, [r1, #0]
 800d9e4:	4788      	blx	r1
 800d9e6:	9b02      	ldr	r3, [sp, #8]
    cinfo->cur_comp_info[i] = compptr;
 800d9e8:	9a01      	ldr	r2, [sp, #4]
    compptr->dc_tbl_no = (c >> 4) & 15;
 800d9ea:	1119      	asrs	r1, r3, #4
    compptr->ac_tbl_no = (c     ) & 15;
 800d9ec:	f003 030f 	and.w	r3, r3, #15
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800d9f0:	4620      	mov	r0, r4
    cinfo->cur_comp_info[i] = compptr;
 800d9f2:	f842 8b04 	str.w	r8, [r2], #4
  for (i = 0; i < n; i++) {
 800d9f6:	f10a 0a01 	add.w	sl, sl, #1
    compptr->dc_tbl_no = (c >> 4) & 15;
 800d9fa:	f8c8 1014 	str.w	r1, [r8, #20]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800d9fe:	6821      	ldr	r1, [r4, #0]
    compptr->ac_tbl_no = (c     ) & 15;
 800da00:	f8c8 3018 	str.w	r3, [r8, #24]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800da04:	f8c1 b018 	str.w	fp, [r1, #24]
 800da08:	f8d8 3014 	ldr.w	r3, [r8, #20]
    cinfo->cur_comp_info[i] = compptr;
 800da0c:	9201      	str	r2, [sp, #4]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800da0e:	61cb      	str	r3, [r1, #28]
 800da10:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800da14:	620b      	str	r3, [r1, #32]
 800da16:	236a      	movs	r3, #106	; 0x6a
 800da18:	614b      	str	r3, [r1, #20]
 800da1a:	684b      	ldr	r3, [r1, #4]
 800da1c:	2101      	movs	r1, #1
 800da1e:	4798      	blx	r3
  for (i = 0; i < n; i++) {
 800da20:	e765      	b.n	800d8ee <read_markers+0x256>
    INPUT_BYTE(cinfo, c, return FALSE);
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	4620      	mov	r0, r4
 800da26:	4798      	blx	r3
 800da28:	2800      	cmp	r0, #0
 800da2a:	f43f aec3 	beq.w	800d7b4 <read_markers+0x11c>
 800da2e:	e9d7 5600 	ldrd	r5, r6, [r7]
 800da32:	e7c7      	b.n	800d9c4 <read_markers+0x32c>
      if (cc == compptr->component_id)
 800da34:	f8d8 1000 	ldr.w	r1, [r8]
 800da38:	458b      	cmp	fp, r1
 800da3a:	d0d5      	beq.n	800d9e8 <read_markers+0x350>
	 ci++, compptr++) {
 800da3c:	3001      	adds	r0, #1
 800da3e:	f108 0858 	add.w	r8, r8, #88	; 0x58
 800da42:	e7c6      	b.n	800d9d2 <read_markers+0x33a>
  INPUT_BYTE(cinfo, c, return FALSE);
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	4620      	mov	r0, r4
 800da48:	4798      	blx	r3
 800da4a:	2800      	cmp	r0, #0
 800da4c:	f43f aeb2 	beq.w	800d7b4 <read_markers+0x11c>
 800da50:	e9d7 5600 	ldrd	r5, r6, [r7]
 800da54:	e75d      	b.n	800d912 <read_markers+0x27a>
  INPUT_BYTE(cinfo, c, return FALSE);
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	4620      	mov	r0, r4
 800da5a:	4798      	blx	r3
 800da5c:	2800      	cmp	r0, #0
 800da5e:	f43f aea9 	beq.w	800d7b4 <read_markers+0x11c>
 800da62:	e9d7 5600 	ldrd	r5, r6, [r7]
 800da66:	e75b      	b.n	800d920 <read_markers+0x288>
      TRACEMS(cinfo, 1, JTRC_EOI);
 800da68:	6823      	ldr	r3, [r4, #0]
 800da6a:	2257      	movs	r2, #87	; 0x57
 800da6c:	4620      	mov	r0, r4
 800da6e:	2101      	movs	r1, #1
 800da70:	615a      	str	r2, [r3, #20]
 800da72:	685b      	ldr	r3, [r3, #4]
 800da74:	4798      	blx	r3
      cinfo->unread_marker = 0;	/* processed the marker */
 800da76:	2300      	movs	r3, #0
      return JPEG_REACHED_EOI;
 800da78:	2002      	movs	r0, #2
      cinfo->unread_marker = 0;	/* processed the marker */
 800da7a:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
      return JPEG_REACHED_EOI;
 800da7e:	e77e      	b.n	800d97e <read_markers+0x2e6>
  INPUT_VARS(cinfo);
 800da80:	69a7      	ldr	r7, [r4, #24]
 800da82:	687e      	ldr	r6, [r7, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800da84:	b1e6      	cbz	r6, 800dac0 <read_markers+0x428>
  INPUT_VARS(cinfo);
 800da86:	683d      	ldr	r5, [r7, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800da88:	f895 9000 	ldrb.w	r9, [r5]
 800da8c:	3e01      	subs	r6, #1
 800da8e:	ea4f 2909 	mov.w	r9, r9, lsl #8
 800da92:	d01e      	beq.n	800dad2 <read_markers+0x43a>
 800da94:	3501      	adds	r5, #1
 800da96:	f815 3b01 	ldrb.w	r3, [r5], #1
 800da9a:	3e01      	subs	r6, #1
      ERREXIT1(cinfo, JERR_DAC_INDEX, index);
 800da9c:	f04f 0b1d 	mov.w	fp, #29
  INPUT_2BYTES(cinfo, length, return FALSE);
 800daa0:	4499      	add	r9, r3
  length -= 2;
 800daa2:	f1a9 0902 	sub.w	r9, r9, #2
  while (length > 0) {
 800daa6:	f1b9 0f00 	cmp.w	r9, #0
 800daaa:	dc1b      	bgt.n	800dae4 <read_markers+0x44c>
  if (length != 0)
 800daac:	d005      	beq.n	800daba <read_markers+0x422>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800daae:	6823      	ldr	r3, [r4, #0]
 800dab0:	220c      	movs	r2, #12
 800dab2:	4620      	mov	r0, r4
 800dab4:	615a      	str	r2, [r3, #20]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	4798      	blx	r3
  INPUT_SYNC(cinfo);
 800daba:	603d      	str	r5, [r7, #0]
  INPUT_SYNC(cinfo);
 800dabc:	607e      	str	r6, [r7, #4]
  return TRUE;
 800dabe:	e6ae      	b.n	800d81e <read_markers+0x186>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	4620      	mov	r0, r4
 800dac4:	4798      	blx	r3
 800dac6:	2800      	cmp	r0, #0
 800dac8:	f43f ae74 	beq.w	800d7b4 <read_markers+0x11c>
 800dacc:	e9d7 5600 	ldrd	r5, r6, [r7]
 800dad0:	e7da      	b.n	800da88 <read_markers+0x3f0>
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	4620      	mov	r0, r4
 800dad6:	4798      	blx	r3
 800dad8:	2800      	cmp	r0, #0
 800dada:	f43f ae6b 	beq.w	800d7b4 <read_markers+0x11c>
 800dade:	e9d7 5600 	ldrd	r5, r6, [r7]
 800dae2:	e7d8      	b.n	800da96 <read_markers+0x3fe>
    INPUT_BYTE(cinfo, index, return FALSE);
 800dae4:	b93e      	cbnz	r6, 800daf6 <read_markers+0x45e>
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	4620      	mov	r0, r4
 800daea:	4798      	blx	r3
 800daec:	2800      	cmp	r0, #0
 800daee:	f43f ae61 	beq.w	800d7b4 <read_markers+0x11c>
 800daf2:	e9d7 5600 	ldrd	r5, r6, [r7]
    INPUT_BYTE(cinfo, val, return FALSE);
 800daf6:	3e01      	subs	r6, #1
    INPUT_BYTE(cinfo, index, return FALSE);
 800daf8:	f895 8000 	ldrb.w	r8, [r5]
    INPUT_BYTE(cinfo, val, return FALSE);
 800dafc:	d01f      	beq.n	800db3e <read_markers+0x4a6>
    INPUT_BYTE(cinfo, index, return FALSE);
 800dafe:	3501      	adds	r5, #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800db00:	6822      	ldr	r2, [r4, #0]
 800db02:	2351      	movs	r3, #81	; 0x51
    INPUT_BYTE(cinfo, val, return FALSE);
 800db04:	f815 ab01 	ldrb.w	sl, [r5], #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800db08:	2101      	movs	r1, #1
 800db0a:	4620      	mov	r0, r4
    INPUT_BYTE(cinfo, val, return FALSE);
 800db0c:	3e01      	subs	r6, #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800db0e:	f8c2 a01c 	str.w	sl, [r2, #28]
    length -= 2;
 800db12:	f1a9 0902 	sub.w	r9, r9, #2
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800db16:	e9c2 3805 	strd	r3, r8, [r2, #20]
 800db1a:	6852      	ldr	r2, [r2, #4]
 800db1c:	4790      	blx	r2
    if (index < 0 || index >= (2*NUM_ARITH_TBLS))
 800db1e:	f1b8 0f1f 	cmp.w	r8, #31
 800db22:	d905      	bls.n	800db30 <read_markers+0x498>
      ERREXIT1(cinfo, JERR_DAC_INDEX, index);
 800db24:	6822      	ldr	r2, [r4, #0]
 800db26:	4620      	mov	r0, r4
 800db28:	e9c2 b805 	strd	fp, r8, [r2, #20]
 800db2c:	6812      	ldr	r2, [r2, #0]
 800db2e:	4790      	blx	r2
    if (index >= NUM_ARITH_TBLS) { /* define AC table */
 800db30:	f1b8 0f0f 	cmp.w	r8, #15
 800db34:	44a0      	add	r8, r4
 800db36:	dd0b      	ble.n	800db50 <read_markers+0x4b8>
      cinfo->arith_ac_K[index-NUM_ARITH_TBLS] = (UINT8) val;
 800db38:	f888 a0f8 	strb.w	sl, [r8, #248]	; 0xf8
 800db3c:	e7b3      	b.n	800daa6 <read_markers+0x40e>
    INPUT_BYTE(cinfo, val, return FALSE);
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	4620      	mov	r0, r4
 800db42:	4798      	blx	r3
 800db44:	2800      	cmp	r0, #0
 800db46:	f43f ae35 	beq.w	800d7b4 <read_markers+0x11c>
 800db4a:	e9d7 5600 	ldrd	r5, r6, [r7]
 800db4e:	e7d7      	b.n	800db00 <read_markers+0x468>
      cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
 800db50:	f00a 010f 	and.w	r1, sl, #15
      cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
 800db54:	ea4f 121a 	mov.w	r2, sl, lsr #4
      if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
 800db58:	4291      	cmp	r1, r2
      cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
 800db5a:	f888 10e8 	strb.w	r1, [r8, #232]	; 0xe8
      cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
 800db5e:	f888 20f8 	strb.w	r2, [r8, #248]	; 0xf8
      if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
 800db62:	d9a0      	bls.n	800daa6 <read_markers+0x40e>
	ERREXIT1(cinfo, JERR_DAC_VALUE, val);
 800db64:	6822      	ldr	r2, [r4, #0]
 800db66:	211e      	movs	r1, #30
 800db68:	4620      	mov	r0, r4
 800db6a:	6813      	ldr	r3, [r2, #0]
 800db6c:	e9c2 1a05 	strd	r1, sl, [r2, #20]
 800db70:	4798      	blx	r3
 800db72:	e798      	b.n	800daa6 <read_markers+0x40e>
      if (! get_dht(cinfo))
 800db74:	4620      	mov	r0, r4
 800db76:	f7ff fc85 	bl	800d484 <get_dht>
 800db7a:	e65a      	b.n	800d832 <read_markers+0x19a>
  INPUT_VARS(cinfo);
 800db7c:	69a6      	ldr	r6, [r4, #24]
 800db7e:	6873      	ldr	r3, [r6, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800db80:	b1db      	cbz	r3, 800dbba <read_markers+0x522>
  INPUT_VARS(cinfo);
 800db82:	6835      	ldr	r5, [r6, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800db84:	f895 8000 	ldrb.w	r8, [r5]
 800db88:	3b01      	subs	r3, #1
 800db8a:	ea4f 2708 	mov.w	r7, r8, lsl #8
 800db8e:	d01d      	beq.n	800dbcc <read_markers+0x534>
 800db90:	3501      	adds	r5, #1
 800db92:	f815 8b01 	ldrb.w	r8, [r5], #1
 800db96:	f103 3aff 	add.w	sl, r3, #4294967295
 800db9a:	44b8      	add	r8, r7
  length -= 2;
 800db9c:	f1a8 0802 	sub.w	r8, r8, #2
  while (length > 0) {
 800dba0:	f1b8 0f00 	cmp.w	r8, #0
 800dba4:	dc1b      	bgt.n	800dbde <read_markers+0x546>
  if (length != 0)
 800dba6:	d005      	beq.n	800dbb4 <read_markers+0x51c>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800dba8:	6822      	ldr	r2, [r4, #0]
 800dbaa:	210c      	movs	r1, #12
 800dbac:	4620      	mov	r0, r4
 800dbae:	6151      	str	r1, [r2, #20]
 800dbb0:	6812      	ldr	r2, [r2, #0]
 800dbb2:	4790      	blx	r2
  INPUT_SYNC(cinfo);
 800dbb4:	e9c6 5a00 	strd	r5, sl, [r6]
  return TRUE;
 800dbb8:	e631      	b.n	800d81e <read_markers+0x186>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800dbba:	68f3      	ldr	r3, [r6, #12]
 800dbbc:	4620      	mov	r0, r4
 800dbbe:	4798      	blx	r3
 800dbc0:	2800      	cmp	r0, #0
 800dbc2:	f43f adf7 	beq.w	800d7b4 <read_markers+0x11c>
 800dbc6:	e9d6 5300 	ldrd	r5, r3, [r6]
 800dbca:	e7db      	b.n	800db84 <read_markers+0x4ec>
 800dbcc:	68f3      	ldr	r3, [r6, #12]
 800dbce:	4620      	mov	r0, r4
 800dbd0:	4798      	blx	r3
 800dbd2:	2800      	cmp	r0, #0
 800dbd4:	f43f adee 	beq.w	800d7b4 <read_markers+0x11c>
 800dbd8:	e9d6 5300 	ldrd	r5, r3, [r6]
 800dbdc:	e7d9      	b.n	800db92 <read_markers+0x4fa>
    length--;
 800dbde:	f108 38ff 	add.w	r8, r8, #4294967295
    INPUT_BYTE(cinfo, n, return FALSE);
 800dbe2:	f1ba 0f00 	cmp.w	sl, #0
 800dbe6:	d107      	bne.n	800dbf8 <read_markers+0x560>
 800dbe8:	68f3      	ldr	r3, [r6, #12]
 800dbea:	4620      	mov	r0, r4
 800dbec:	4798      	blx	r3
 800dbee:	2800      	cmp	r0, #0
 800dbf0:	f43f ade0 	beq.w	800d7b4 <read_markers+0x11c>
 800dbf4:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800dbf8:	f815 9b01 	ldrb.w	r9, [r5], #1
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800dbfc:	2153      	movs	r1, #83	; 0x53
 800dbfe:	6822      	ldr	r2, [r4, #0]
 800dc00:	4620      	mov	r0, r4
    prec = n >> 4;
 800dc02:	ea4f 1329 	mov.w	r3, r9, asr #4
 800dc06:	f009 070f 	and.w	r7, r9, #15
    INPUT_BYTE(cinfo, n, return FALSE);
 800dc0a:	f10a 3aff 	add.w	sl, sl, #4294967295
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800dc0e:	61d3      	str	r3, [r2, #28]
    prec = n >> 4;
 800dc10:	9301      	str	r3, [sp, #4]
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800dc12:	e9c2 1705 	strd	r1, r7, [r2, #20]
 800dc16:	6852      	ldr	r2, [r2, #4]
 800dc18:	2101      	movs	r1, #1
 800dc1a:	4790      	blx	r2
    if (n >= NUM_QUANT_TBLS)
 800dc1c:	f019 0f0c 	tst.w	r9, #12
 800dc20:	d006      	beq.n	800dc30 <read_markers+0x598>
      ERREXIT1(cinfo, JERR_DQT_INDEX, n);
 800dc22:	6822      	ldr	r2, [r4, #0]
 800dc24:	2120      	movs	r1, #32
 800dc26:	4620      	mov	r0, r4
 800dc28:	e9c2 1705 	strd	r1, r7, [r2, #20]
 800dc2c:	6812      	ldr	r2, [r2, #0]
 800dc2e:	4790      	blx	r2
    if (cinfo->quant_tbl_ptrs[n] == NULL)
 800dc30:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800dc34:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800dc38:	b922      	cbnz	r2, 800dc44 <read_markers+0x5ac>
      cinfo->quant_tbl_ptrs[n] = jpeg_alloc_quant_table((j_common_ptr) cinfo);
 800dc3a:	4620      	mov	r0, r4
 800dc3c:	f7fb f938 	bl	8008eb0 <jpeg_alloc_quant_table>
 800dc40:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
    if (prec) {
 800dc44:	9b01      	ldr	r3, [sp, #4]
    quant_ptr = cinfo->quant_tbl_ptrs[n];
 800dc46:	f8d7 b0a4 	ldr.w	fp, [r7, #164]	; 0xa4
    if (prec) {
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d057      	beq.n	800dcfe <read_markers+0x666>
      if (length < DCTSIZE2 * 2) {
 800dc4e:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
 800dc52:	dc6c      	bgt.n	800dd2e <read_markers+0x696>
 800dc54:	f1ab 0202 	sub.w	r2, fp, #2
 800dc58:	f10b 017e 	add.w	r1, fp, #126	; 0x7e
	  quant_ptr->quantval[i] = 1;
 800dc5c:	2001      	movs	r0, #1
 800dc5e:	f822 0f02 	strh.w	r0, [r2, #2]!
	for (i = 0; i < DCTSIZE2; i++) {
 800dc62:	4291      	cmp	r1, r2
 800dc64:	d1fb      	bne.n	800dc5e <read_markers+0x5c6>
	count = length >> 1;
 800dc66:	ea4f 0968 	mov.w	r9, r8, asr #1
    switch (count) {
 800dc6a:	f1b9 0f19 	cmp.w	r9, #25
 800dc6e:	d062      	beq.n	800dd36 <read_markers+0x69e>
 800dc70:	dc53      	bgt.n	800dd1a <read_markers+0x682>
 800dc72:	f1b9 0f09 	cmp.w	r9, #9
 800dc76:	d060      	beq.n	800dd3a <read_markers+0x6a2>
 800dc78:	f1b9 0f10 	cmp.w	r9, #16
 800dc7c:	d05f      	beq.n	800dd3e <read_markers+0x6a6>
    default:    natural_order = jpeg_natural_order;  break;
 800dc7e:	4f85      	ldr	r7, [pc, #532]	; (800de94 <read_markers+0x7fc>)
 800dc80:	4a85      	ldr	r2, [pc, #532]	; (800de98 <read_markers+0x800>)
 800dc82:	f1b9 0f04 	cmp.w	r9, #4
 800dc86:	bf18      	it	ne
 800dc88:	4617      	movne	r7, r2
    for (i = 0; i < count; i++) {
 800dc8a:	eb07 0389 	add.w	r3, r7, r9, lsl #2
 800dc8e:	9302      	str	r3, [sp, #8]
 800dc90:	9b02      	ldr	r3, [sp, #8]
 800dc92:	42bb      	cmp	r3, r7
 800dc94:	d157      	bne.n	800dd46 <read_markers+0x6ae>
    if (cinfo->err->trace_level >= 2) {
 800dc96:	6822      	ldr	r2, [r4, #0]
 800dc98:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800dc9a:	2a01      	cmp	r2, #1
 800dc9c:	dd26      	ble.n	800dcec <read_markers+0x654>
 800dc9e:	f10b 0380 	add.w	r3, fp, #128	; 0x80
	TRACEMS8(cinfo, 2, JTRC_QUANTVALS,
 800dca2:	275f      	movs	r7, #95	; 0x5f
 800dca4:	f8bb 1000 	ldrh.w	r1, [fp]
 800dca8:	4620      	mov	r0, r4
 800dcaa:	6822      	ldr	r2, [r4, #0]
 800dcac:	f10b 0b10 	add.w	fp, fp, #16
 800dcb0:	9302      	str	r3, [sp, #8]
 800dcb2:	6191      	str	r1, [r2, #24]
 800dcb4:	f83b 1c0e 	ldrh.w	r1, [fp, #-14]
 800dcb8:	61d1      	str	r1, [r2, #28]
 800dcba:	f83b 1c0c 	ldrh.w	r1, [fp, #-12]
 800dcbe:	6211      	str	r1, [r2, #32]
 800dcc0:	f83b 1c0a 	ldrh.w	r1, [fp, #-10]
 800dcc4:	6251      	str	r1, [r2, #36]	; 0x24
 800dcc6:	f83b 1c08 	ldrh.w	r1, [fp, #-8]
 800dcca:	6291      	str	r1, [r2, #40]	; 0x28
 800dccc:	f83b 1c06 	ldrh.w	r1, [fp, #-6]
 800dcd0:	62d1      	str	r1, [r2, #44]	; 0x2c
 800dcd2:	f83b 1c04 	ldrh.w	r1, [fp, #-4]
 800dcd6:	6311      	str	r1, [r2, #48]	; 0x30
 800dcd8:	f83b 1c02 	ldrh.w	r1, [fp, #-2]
 800dcdc:	6157      	str	r7, [r2, #20]
 800dcde:	6351      	str	r1, [r2, #52]	; 0x34
 800dce0:	2102      	movs	r1, #2
 800dce2:	6852      	ldr	r2, [r2, #4]
 800dce4:	4790      	blx	r2
      for (i = 0; i < DCTSIZE2; i += 8) {
 800dce6:	9b02      	ldr	r3, [sp, #8]
 800dce8:	455b      	cmp	r3, fp
 800dcea:	d1db      	bne.n	800dca4 <read_markers+0x60c>
    if (prec) length -= count;
 800dcec:	9b01      	ldr	r3, [sp, #4]
    length -= count;
 800dcee:	eba8 0809 	sub.w	r8, r8, r9
    if (prec) length -= count;
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	f43f af54 	beq.w	800dba0 <read_markers+0x508>
 800dcf8:	eba8 0809 	sub.w	r8, r8, r9
 800dcfc:	e750      	b.n	800dba0 <read_markers+0x508>
      if (length < DCTSIZE2) {
 800dcfe:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 800dd02:	dc14      	bgt.n	800dd2e <read_markers+0x696>
 800dd04:	f1ab 0202 	sub.w	r2, fp, #2
 800dd08:	f10b 017e 	add.w	r1, fp, #126	; 0x7e
	  quant_ptr->quantval[i] = 1;
 800dd0c:	2001      	movs	r0, #1
 800dd0e:	f822 0f02 	strh.w	r0, [r2, #2]!
	for (i = 0; i < DCTSIZE2; i++) {
 800dd12:	4291      	cmp	r1, r2
 800dd14:	d1fb      	bne.n	800dd0e <read_markers+0x676>
 800dd16:	46c1      	mov	r9, r8
 800dd18:	e7a7      	b.n	800dc6a <read_markers+0x5d2>
    switch (count) {
 800dd1a:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
 800dd1e:	d010      	beq.n	800dd42 <read_markers+0x6aa>
    default:    natural_order = jpeg_natural_order;  break;
 800dd20:	4f5d      	ldr	r7, [pc, #372]	; (800de98 <read_markers+0x800>)
 800dd22:	4b5e      	ldr	r3, [pc, #376]	; (800de9c <read_markers+0x804>)
 800dd24:	f1b9 0f31 	cmp.w	r9, #49	; 0x31
 800dd28:	bf08      	it	eq
 800dd2a:	461f      	moveq	r7, r3
 800dd2c:	e7ad      	b.n	800dc8a <read_markers+0x5f2>
	count = DCTSIZE2;
 800dd2e:	f04f 0940 	mov.w	r9, #64	; 0x40
    default:    natural_order = jpeg_natural_order;  break;
 800dd32:	4f59      	ldr	r7, [pc, #356]	; (800de98 <read_markers+0x800>)
 800dd34:	e7a9      	b.n	800dc8a <read_markers+0x5f2>
    case (5*5): natural_order = jpeg_natural_order5; break;
 800dd36:	4f5a      	ldr	r7, [pc, #360]	; (800dea0 <read_markers+0x808>)
 800dd38:	e7a7      	b.n	800dc8a <read_markers+0x5f2>
    case (3*3): natural_order = jpeg_natural_order3; break;
 800dd3a:	4f5a      	ldr	r7, [pc, #360]	; (800dea4 <read_markers+0x80c>)
 800dd3c:	e7a5      	b.n	800dc8a <read_markers+0x5f2>
    case (4*4): natural_order = jpeg_natural_order4; break;
 800dd3e:	4f5a      	ldr	r7, [pc, #360]	; (800dea8 <read_markers+0x810>)
 800dd40:	e7a3      	b.n	800dc8a <read_markers+0x5f2>
    case (6*6): natural_order = jpeg_natural_order6; break;
 800dd42:	4f5a      	ldr	r7, [pc, #360]	; (800deac <read_markers+0x814>)
 800dd44:	e7a1      	b.n	800dc8a <read_markers+0x5f2>
      if (prec)
 800dd46:	9b01      	ldr	r3, [sp, #4]
 800dd48:	b333      	cbz	r3, 800dd98 <read_markers+0x700>
	INPUT_2BYTES(cinfo, tmp, return FALSE);
 800dd4a:	f1ba 0f00 	cmp.w	sl, #0
 800dd4e:	d107      	bne.n	800dd60 <read_markers+0x6c8>
 800dd50:	68f3      	ldr	r3, [r6, #12]
 800dd52:	4620      	mov	r0, r4
 800dd54:	4798      	blx	r3
 800dd56:	2800      	cmp	r0, #0
 800dd58:	f43f ad2c 	beq.w	800d7b4 <read_markers+0x11c>
 800dd5c:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800dd60:	782a      	ldrb	r2, [r5, #0]
 800dd62:	f1ba 0301 	subs.w	r3, sl, #1
 800dd66:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800dd6a:	d00a      	beq.n	800dd82 <read_markers+0x6ea>
 800dd6c:	3501      	adds	r5, #1
 800dd6e:	f815 1b01 	ldrb.w	r1, [r5], #1
 800dd72:	f103 3aff 	add.w	sl, r3, #4294967295
 800dd76:	440a      	add	r2, r1
      quant_ptr->quantval[natural_order[i]] = (UINT16) tmp;
 800dd78:	f857 1b04 	ldr.w	r1, [r7], #4
 800dd7c:	f82b 2011 	strh.w	r2, [fp, r1, lsl #1]
    for (i = 0; i < count; i++) {
 800dd80:	e786      	b.n	800dc90 <read_markers+0x5f8>
	INPUT_2BYTES(cinfo, tmp, return FALSE);
 800dd82:	68f3      	ldr	r3, [r6, #12]
 800dd84:	4620      	mov	r0, r4
 800dd86:	9203      	str	r2, [sp, #12]
 800dd88:	4798      	blx	r3
 800dd8a:	2800      	cmp	r0, #0
 800dd8c:	f43f ad12 	beq.w	800d7b4 <read_markers+0x11c>
 800dd90:	9a03      	ldr	r2, [sp, #12]
 800dd92:	e9d6 5300 	ldrd	r5, r3, [r6]
 800dd96:	e7ea      	b.n	800dd6e <read_markers+0x6d6>
	INPUT_BYTE(cinfo, tmp, return FALSE);
 800dd98:	f1ba 0f00 	cmp.w	sl, #0
 800dd9c:	d107      	bne.n	800ddae <read_markers+0x716>
 800dd9e:	68f3      	ldr	r3, [r6, #12]
 800dda0:	4620      	mov	r0, r4
 800dda2:	4798      	blx	r3
 800dda4:	2800      	cmp	r0, #0
 800dda6:	f43f ad05 	beq.w	800d7b4 <read_markers+0x11c>
 800ddaa:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800ddae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ddb2:	f815 2b01 	ldrb.w	r2, [r5], #1
 800ddb6:	e7df      	b.n	800dd78 <read_markers+0x6e0>
  INPUT_VARS(cinfo);
 800ddb8:	69a7      	ldr	r7, [r4, #24]
 800ddba:	687b      	ldr	r3, [r7, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800ddbc:	b353      	cbz	r3, 800de14 <read_markers+0x77c>
  INPUT_VARS(cinfo);
 800ddbe:	683d      	ldr	r5, [r7, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800ddc0:	782a      	ldrb	r2, [r5, #0]
 800ddc2:	3b01      	subs	r3, #1
 800ddc4:	ea4f 2802 	mov.w	r8, r2, lsl #8
 800ddc8:	d02d      	beq.n	800de26 <read_markers+0x78e>
 800ddca:	3501      	adds	r5, #1
 800ddcc:	782a      	ldrb	r2, [r5, #0]
 800ddce:	1e5e      	subs	r6, r3, #1
 800ddd0:	4442      	add	r2, r8
  if (length != 4)
 800ddd2:	2a04      	cmp	r2, #4
 800ddd4:	d005      	beq.n	800dde2 <read_markers+0x74a>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800ddd6:	6823      	ldr	r3, [r4, #0]
 800ddd8:	220c      	movs	r2, #12
 800ddda:	4620      	mov	r0, r4
 800dddc:	615a      	str	r2, [r3, #20]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	4798      	blx	r3
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800dde2:	b34e      	cbz	r6, 800de38 <read_markers+0x7a0>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800dde4:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800dde6:	f895 8000 	ldrb.w	r8, [r5]
 800ddea:	3e01      	subs	r6, #1
 800ddec:	ea4f 2908 	mov.w	r9, r8, lsl #8
 800ddf0:	d02b      	beq.n	800de4a <read_markers+0x7b2>
 800ddf2:	3501      	adds	r5, #1
 800ddf4:	f815 8b01 	ldrb.w	r8, [r5], #1
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800ddf8:	2254      	movs	r2, #84	; 0x54
 800ddfa:	6823      	ldr	r3, [r4, #0]
 800ddfc:	2101      	movs	r1, #1
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800ddfe:	44c8      	add	r8, r9
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800de00:	4620      	mov	r0, r4
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800de02:	3e01      	subs	r6, #1
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800de04:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800de08:	685b      	ldr	r3, [r3, #4]
 800de0a:	4798      	blx	r3
  cinfo->restart_interval = tmp;
 800de0c:	f8c4 8118 	str.w	r8, [r4, #280]	; 0x118
  INPUT_SYNC(cinfo);
 800de10:	603d      	str	r5, [r7, #0]
 800de12:	e653      	b.n	800dabc <read_markers+0x424>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	4620      	mov	r0, r4
 800de18:	4798      	blx	r3
 800de1a:	2800      	cmp	r0, #0
 800de1c:	f43f acca 	beq.w	800d7b4 <read_markers+0x11c>
 800de20:	e9d7 5300 	ldrd	r5, r3, [r7]
 800de24:	e7cc      	b.n	800ddc0 <read_markers+0x728>
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	4620      	mov	r0, r4
 800de2a:	4798      	blx	r3
 800de2c:	2800      	cmp	r0, #0
 800de2e:	f43f acc1 	beq.w	800d7b4 <read_markers+0x11c>
 800de32:	e9d7 5300 	ldrd	r5, r3, [r7]
 800de36:	e7c9      	b.n	800ddcc <read_markers+0x734>
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	4620      	mov	r0, r4
 800de3c:	4798      	blx	r3
 800de3e:	2800      	cmp	r0, #0
 800de40:	f43f acb8 	beq.w	800d7b4 <read_markers+0x11c>
 800de44:	e9d7 5600 	ldrd	r5, r6, [r7]
 800de48:	e7cd      	b.n	800dde6 <read_markers+0x74e>
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	4620      	mov	r0, r4
 800de4e:	4798      	blx	r3
 800de50:	2800      	cmp	r0, #0
 800de52:	f43f acaf 	beq.w	800d7b4 <read_markers+0x11c>
 800de56:	e9d7 5600 	ldrd	r5, r6, [r7]
 800de5a:	e7cb      	b.n	800ddf4 <read_markers+0x75c>
      if (! (*((my_marker_ptr) cinfo->marker)->process_APPn[
 800de5c:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
 800de60:	3bd8      	subs	r3, #216	; 0xd8
 800de62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de66:	4620      	mov	r0, r4
 800de68:	4798      	blx	r3
 800de6a:	e4e2      	b.n	800d832 <read_markers+0x19a>
      if (! (*((my_marker_ptr) cinfo->marker)->process_COM) (cinfo))
 800de6c:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800de70:	69db      	ldr	r3, [r3, #28]
 800de72:	e7f8      	b.n	800de66 <read_markers+0x7ce>
      TRACEMS1(cinfo, 1, JTRC_PARMLESS_MARKER, cinfo->unread_marker);
 800de74:	6822      	ldr	r2, [r4, #0]
 800de76:	215e      	movs	r1, #94	; 0x5e
 800de78:	4620      	mov	r0, r4
 800de7a:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800de7e:	6853      	ldr	r3, [r2, #4]
 800de80:	2101      	movs	r1, #1
 800de82:	4798      	blx	r3
      break;
 800de84:	e4cb      	b.n	800d81e <read_markers+0x186>
      if (! skip_variable(cinfo))
 800de86:	4620      	mov	r0, r4
 800de88:	f7ff fa6c 	bl	800d364 <skip_variable>
 800de8c:	e4d1      	b.n	800d832 <read_markers+0x19a>
      ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800de8e:	6822      	ldr	r2, [r4, #0]
 800de90:	2146      	movs	r1, #70	; 0x46
 800de92:	e4df      	b.n	800d854 <read_markers+0x1bc>
 800de94:	0802c510 	.word	0x0802c510
 800de98:	0802c3d0 	.word	0x0802c3d0
 800de9c:	0802c7b8 	.word	0x0802c7b8
 800dea0:	0802c644 	.word	0x0802c644
 800dea4:	0802c560 	.word	0x0802c560
 800dea8:	0802c5c4 	.word	0x0802c5c4
 800deac:	0802c6e8 	.word	0x0802c6e8

0800deb0 <examine_app14>:
{
 800deb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (datalen >= APP14_DATA_LEN &&
 800deb4:	2a0b      	cmp	r2, #11
 800deb6:	6804      	ldr	r4, [r0, #0]
{
 800deb8:	4605      	mov	r5, r0
  if (datalen >= APP14_DATA_LEN &&
 800deba:	6866      	ldr	r6, [r4, #4]
 800debc:	d92b      	bls.n	800df16 <examine_app14+0x66>
 800debe:	780f      	ldrb	r7, [r1, #0]
 800dec0:	2f41      	cmp	r7, #65	; 0x41
 800dec2:	d128      	bne.n	800df16 <examine_app14+0x66>
      GETJOCTET(data[0]) == 0x41 &&
 800dec4:	784f      	ldrb	r7, [r1, #1]
 800dec6:	2f64      	cmp	r7, #100	; 0x64
 800dec8:	d125      	bne.n	800df16 <examine_app14+0x66>
      GETJOCTET(data[1]) == 0x64 &&
 800deca:	788f      	ldrb	r7, [r1, #2]
 800decc:	2f6f      	cmp	r7, #111	; 0x6f
 800dece:	d122      	bne.n	800df16 <examine_app14+0x66>
      GETJOCTET(data[2]) == 0x6F &&
 800ded0:	78cf      	ldrb	r7, [r1, #3]
 800ded2:	2f62      	cmp	r7, #98	; 0x62
 800ded4:	d11f      	bne.n	800df16 <examine_app14+0x66>
      GETJOCTET(data[3]) == 0x62 &&
 800ded6:	790f      	ldrb	r7, [r1, #4]
 800ded8:	2f65      	cmp	r7, #101	; 0x65
 800deda:	d11c      	bne.n	800df16 <examine_app14+0x66>
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
 800dedc:	79cb      	ldrb	r3, [r1, #7]
 800dede:	7a0a      	ldrb	r2, [r1, #8]
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800dee0:	7a4f      	ldrb	r7, [r1, #9]
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
 800dee2:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800dee6:	7a8b      	ldrb	r3, [r1, #10]
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800dee8:	f891 c005 	ldrb.w	ip, [r1, #5]
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800deec:	eb03 2307 	add.w	r3, r3, r7, lsl #8
    transform = GETJOCTET(data[11]);
 800def0:	7acf      	ldrb	r7, [r1, #11]
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800def2:	7989      	ldrb	r1, [r1, #6]
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800def4:	e9c4 3708 	strd	r3, r7, [r4, #32]
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800def8:	eb01 210c 	add.w	r1, r1, ip, lsl #8
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800defc:	234e      	movs	r3, #78	; 0x4e
 800defe:	e9c4 1206 	strd	r1, r2, [r4, #24]
 800df02:	6163      	str	r3, [r4, #20]
 800df04:	2101      	movs	r1, #1
 800df06:	47b0      	blx	r6
    cinfo->saw_Adobe_marker = TRUE;
 800df08:	2301      	movs	r3, #1
    cinfo->Adobe_transform = (UINT8) transform;
 800df0a:	f885 712c 	strb.w	r7, [r5, #300]	; 0x12c
    cinfo->saw_Adobe_marker = TRUE;
 800df0e:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
}
 800df12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
 800df16:	2150      	movs	r1, #80	; 0x50
 800df18:	441a      	add	r2, r3
 800df1a:	4628      	mov	r0, r5
 800df1c:	4633      	mov	r3, r6
 800df1e:	6161      	str	r1, [r4, #20]
 800df20:	2101      	movs	r1, #1
 800df22:	61a2      	str	r2, [r4, #24]
}
 800df24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
 800df28:	4718      	bx	r3

0800df2a <get_interesting_appn>:
{
 800df2a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  INPUT_VARS(cinfo);
 800df2e:	6987      	ldr	r7, [r0, #24]
{
 800df30:	4681      	mov	r9, r0
  INPUT_VARS(cinfo);
 800df32:	687a      	ldr	r2, [r7, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800df34:	b3a2      	cbz	r2, 800dfa0 <get_interesting_appn+0x76>
  INPUT_VARS(cinfo);
 800df36:	683c      	ldr	r4, [r7, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800df38:	7825      	ldrb	r5, [r4, #0]
 800df3a:	3a01      	subs	r2, #1
 800df3c:	ea4f 2605 	mov.w	r6, r5, lsl #8
 800df40:	d038      	beq.n	800dfb4 <get_interesting_appn+0x8a>
 800df42:	3401      	adds	r4, #1
 800df44:	f814 5b01 	ldrb.w	r5, [r4], #1
 800df48:	f102 38ff 	add.w	r8, r2, #4294967295
 800df4c:	4435      	add	r5, r6
  length -= 2;
 800df4e:	3d02      	subs	r5, #2
  if (length >= APPN_DATA_LEN)
 800df50:	2d0d      	cmp	r5, #13
 800df52:	dc37      	bgt.n	800dfc4 <get_interesting_appn+0x9a>
  else if (length > 0)
 800df54:	2d00      	cmp	r5, #0
 800df56:	dd38      	ble.n	800dfca <get_interesting_appn+0xa0>
 800df58:	46aa      	mov	sl, r5
  for (i = 0; i < numtoread; i++)
 800df5a:	2600      	movs	r6, #0
    INPUT_BYTE(cinfo, b[i], return FALSE);
 800df5c:	f1b8 0f00 	cmp.w	r8, #0
 800df60:	d105      	bne.n	800df6e <get_interesting_appn+0x44>
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	4648      	mov	r0, r9
 800df66:	4798      	blx	r3
 800df68:	b1e8      	cbz	r0, 800dfa6 <get_interesting_appn+0x7c>
 800df6a:	e9d7 4800 	ldrd	r4, r8, [r7]
 800df6e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800df72:	f108 38ff 	add.w	r8, r8, #4294967295
 800df76:	f80d 3006 	strb.w	r3, [sp, r6]
  for (i = 0; i < numtoread; i++)
 800df7a:	3601      	adds	r6, #1
 800df7c:	45b2      	cmp	sl, r6
 800df7e:	d1ed      	bne.n	800df5c <get_interesting_appn+0x32>
  switch (cinfo->unread_marker) {
 800df80:	f8d9 21b4 	ldr.w	r2, [r9, #436]	; 0x1b4
  length -= numtoread;
 800df84:	1bad      	subs	r5, r5, r6
  switch (cinfo->unread_marker) {
 800df86:	2ae0      	cmp	r2, #224	; 0xe0
 800df88:	d021      	beq.n	800dfce <get_interesting_appn+0xa4>
 800df8a:	2aee      	cmp	r2, #238	; 0xee
 800df8c:	d031      	beq.n	800dff2 <get_interesting_appn+0xc8>
    ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800df8e:	f8d9 3000 	ldr.w	r3, [r9]
 800df92:	2146      	movs	r1, #70	; 0x46
 800df94:	4648      	mov	r0, r9
 800df96:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	4798      	blx	r3
    break;
 800df9e:	e01c      	b.n	800dfda <get_interesting_appn+0xb0>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	4798      	blx	r3
 800dfa4:	b918      	cbnz	r0, 800dfae <get_interesting_appn+0x84>
 800dfa6:	2000      	movs	r0, #0
}
 800dfa8:	b004      	add	sp, #16
 800dfaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800dfae:	e9d7 4200 	ldrd	r4, r2, [r7]
 800dfb2:	e7c1      	b.n	800df38 <get_interesting_appn+0xe>
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	4648      	mov	r0, r9
 800dfb8:	4798      	blx	r3
 800dfba:	2800      	cmp	r0, #0
 800dfbc:	d0f3      	beq.n	800dfa6 <get_interesting_appn+0x7c>
 800dfbe:	e9d7 4200 	ldrd	r4, r2, [r7]
 800dfc2:	e7bf      	b.n	800df44 <get_interesting_appn+0x1a>
    numtoread = APPN_DATA_LEN;
 800dfc4:	f04f 0a0e 	mov.w	sl, #14
 800dfc8:	e7c7      	b.n	800df5a <get_interesting_appn+0x30>
    numtoread = 0;
 800dfca:	2600      	movs	r6, #0
 800dfcc:	e7d8      	b.n	800df80 <get_interesting_appn+0x56>
    examine_app0(cinfo, (JOCTET FAR *) b, numtoread, length);
 800dfce:	462b      	mov	r3, r5
 800dfd0:	4632      	mov	r2, r6
 800dfd2:	4669      	mov	r1, sp
 800dfd4:	4648      	mov	r0, r9
 800dfd6:	f7ff f924 	bl	800d222 <examine_app0>
  if (length > 0)
 800dfda:	2d00      	cmp	r5, #0
  INPUT_SYNC(cinfo);
 800dfdc:	e9c7 4800 	strd	r4, r8, [r7]
  if (length > 0)
 800dfe0:	dd05      	ble.n	800dfee <get_interesting_appn+0xc4>
    (*cinfo->src->skip_input_data) (cinfo, (long) length);
 800dfe2:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800dfe6:	4629      	mov	r1, r5
 800dfe8:	4648      	mov	r0, r9
 800dfea:	691b      	ldr	r3, [r3, #16]
 800dfec:	4798      	blx	r3
  return TRUE;
 800dfee:	2001      	movs	r0, #1
 800dff0:	e7da      	b.n	800dfa8 <get_interesting_appn+0x7e>
    examine_app14(cinfo, (JOCTET FAR *) b, numtoread, length);
 800dff2:	462b      	mov	r3, r5
 800dff4:	4632      	mov	r2, r6
 800dff6:	4669      	mov	r1, sp
 800dff8:	4648      	mov	r0, r9
 800dffa:	f7ff ff59 	bl	800deb0 <examine_app14>
    break;
 800dffe:	e7ec      	b.n	800dfda <get_interesting_appn+0xb0>

0800e000 <read_restart_marker>:
  if (cinfo->unread_marker == 0) {
 800e000:	f8d0 31b4 	ldr.w	r3, [r0, #436]	; 0x1b4
{
 800e004:	b510      	push	{r4, lr}
 800e006:	4604      	mov	r4, r0
  if (cinfo->unread_marker == 0) {
 800e008:	b1e3      	cbz	r3, 800e044 <read_restart_marker+0x44>
      ((int) M_RST0 + cinfo->marker->next_restart_num)) {
 800e00a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
  if (cinfo->unread_marker ==
 800e00e:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
      ((int) M_RST0 + cinfo->marker->next_restart_num)) {
 800e012:	6959      	ldr	r1, [r3, #20]
 800e014:	f101 03d0 	add.w	r3, r1, #208	; 0xd0
  if (cinfo->unread_marker ==
 800e018:	429a      	cmp	r2, r3
 800e01a:	d119      	bne.n	800e050 <read_restart_marker+0x50>
    TRACEMS1(cinfo, 3, JTRC_RST, cinfo->marker->next_restart_num);
 800e01c:	6823      	ldr	r3, [r4, #0]
 800e01e:	2264      	movs	r2, #100	; 0x64
 800e020:	4620      	mov	r0, r4
 800e022:	e9c3 2105 	strd	r2, r1, [r3, #20]
 800e026:	685b      	ldr	r3, [r3, #4]
 800e028:	2103      	movs	r1, #3
 800e02a:	4798      	blx	r3
    cinfo->unread_marker = 0;
 800e02c:	2300      	movs	r3, #0
 800e02e:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
  cinfo->marker->next_restart_num = (cinfo->marker->next_restart_num + 1) & 7;
 800e032:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
 800e036:	2001      	movs	r0, #1
 800e038:	6953      	ldr	r3, [r2, #20]
 800e03a:	3301      	adds	r3, #1
 800e03c:	f003 0307 	and.w	r3, r3, #7
 800e040:	6153      	str	r3, [r2, #20]
  return TRUE;
 800e042:	e004      	b.n	800e04e <read_restart_marker+0x4e>
    if (! next_marker(cinfo))
 800e044:	f7ff f9c9 	bl	800d3da <next_marker>
 800e048:	2800      	cmp	r0, #0
 800e04a:	d1de      	bne.n	800e00a <read_restart_marker+0xa>
      return FALSE;
 800e04c:	2000      	movs	r0, #0
}
 800e04e:	bd10      	pop	{r4, pc}
    if (! (*cinfo->src->resync_to_restart) (cinfo,
 800e050:	69a3      	ldr	r3, [r4, #24]
 800e052:	4620      	mov	r0, r4
 800e054:	695b      	ldr	r3, [r3, #20]
 800e056:	4798      	blx	r3
 800e058:	2800      	cmp	r0, #0
 800e05a:	d1ea      	bne.n	800e032 <read_restart_marker+0x32>
 800e05c:	e7f6      	b.n	800e04c <read_restart_marker+0x4c>

0800e05e <jpeg_resync_to_restart>:
{
 800e05e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e062:	460f      	mov	r7, r1
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800e064:	6803      	ldr	r3, [r0, #0]
  int marker = cinfo->unread_marker;
 800e066:	f8d0 51b4 	ldr.w	r5, [r0, #436]	; 0x1b4
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800e06a:	227c      	movs	r2, #124	; 0x7c
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800e06c:	f107 0801 	add.w	r8, r7, #1
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800e070:	61d9      	str	r1, [r3, #28]
 800e072:	f04f 31ff 	mov.w	r1, #4294967295
{
 800e076:	4606      	mov	r6, r0
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800e078:	f008 0807 	and.w	r8, r8, #7
 800e07c:	f108 08d0 	add.w	r8, r8, #208	; 0xd0
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800e080:	e9c3 2505 	strd	r2, r5, [r3, #20]
 800e084:	685b      	ldr	r3, [r3, #4]
 800e086:	4798      	blx	r3
    if (marker < (int) M_SOF0)
 800e088:	2dbf      	cmp	r5, #191	; 0xbf
 800e08a:	dd2e      	ble.n	800e0ea <jpeg_resync_to_restart+0x8c>
    else if (marker < (int) M_RST0 || marker > (int) M_RST7)
 800e08c:	f1a5 03d0 	sub.w	r3, r5, #208	; 0xd0
 800e090:	2b07      	cmp	r3, #7
 800e092:	d828      	bhi.n	800e0e6 <jpeg_resync_to_restart+0x88>
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800e094:	4545      	cmp	r5, r8
 800e096:	d026      	beq.n	800e0e6 <jpeg_resync_to_restart+0x88>
	  marker == ((int) M_RST0 + ((desired+2) & 7)))
 800e098:	1cbb      	adds	r3, r7, #2
 800e09a:	f003 0307 	and.w	r3, r3, #7
 800e09e:	33d0      	adds	r3, #208	; 0xd0
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800e0a0:	429d      	cmp	r5, r3
 800e0a2:	d020      	beq.n	800e0e6 <jpeg_resync_to_restart+0x88>
      else if (marker == ((int) M_RST0 + ((desired-1) & 7)) ||
 800e0a4:	1e7b      	subs	r3, r7, #1
 800e0a6:	f003 0307 	and.w	r3, r3, #7
 800e0aa:	33d0      	adds	r3, #208	; 0xd0
 800e0ac:	429d      	cmp	r5, r3
 800e0ae:	d01c      	beq.n	800e0ea <jpeg_resync_to_restart+0x8c>
	       marker == ((int) M_RST0 + ((desired-2) & 7)))
 800e0b0:	1ebc      	subs	r4, r7, #2
 800e0b2:	f004 0407 	and.w	r4, r4, #7
 800e0b6:	34d0      	adds	r4, #208	; 0xd0
	action = 2;		/* a prior restart, so advance */
 800e0b8:	42a5      	cmp	r5, r4
 800e0ba:	bf14      	ite	ne
 800e0bc:	2401      	movne	r4, #1
 800e0be:	2402      	moveq	r4, #2
    TRACEMS2(cinfo, 4, JTRC_RECOVERY_ACTION, marker, action);
 800e0c0:	6833      	ldr	r3, [r6, #0]
 800e0c2:	2263      	movs	r2, #99	; 0x63
 800e0c4:	2104      	movs	r1, #4
 800e0c6:	4630      	mov	r0, r6
 800e0c8:	61dc      	str	r4, [r3, #28]
 800e0ca:	e9c3 2505 	strd	r2, r5, [r3, #20]
 800e0ce:	685b      	ldr	r3, [r3, #4]
 800e0d0:	4798      	blx	r3
    switch (action) {
 800e0d2:	2c02      	cmp	r4, #2
 800e0d4:	d00b      	beq.n	800e0ee <jpeg_resync_to_restart+0x90>
 800e0d6:	2c03      	cmp	r4, #3
 800e0d8:	d002      	beq.n	800e0e0 <jpeg_resync_to_restart+0x82>
      cinfo->unread_marker = 0;
 800e0da:	2300      	movs	r3, #0
 800e0dc:	f8c6 31b4 	str.w	r3, [r6, #436]	; 0x1b4
    switch (action) {
 800e0e0:	2001      	movs	r0, #1
}
 800e0e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      action = 3;		/* valid non-restart marker */
 800e0e6:	2403      	movs	r4, #3
 800e0e8:	e7ea      	b.n	800e0c0 <jpeg_resync_to_restart+0x62>
	action = 2;		/* a prior restart, so advance */
 800e0ea:	2402      	movs	r4, #2
 800e0ec:	e7e8      	b.n	800e0c0 <jpeg_resync_to_restart+0x62>
      if (! next_marker(cinfo))
 800e0ee:	4630      	mov	r0, r6
 800e0f0:	f7ff f973 	bl	800d3da <next_marker>
 800e0f4:	2800      	cmp	r0, #0
 800e0f6:	d0f4      	beq.n	800e0e2 <jpeg_resync_to_restart+0x84>
      marker = cinfo->unread_marker;
 800e0f8:	f8d6 51b4 	ldr.w	r5, [r6, #436]	; 0x1b4
      break;
 800e0fc:	e7c4      	b.n	800e088 <jpeg_resync_to_restart+0x2a>
	...

0800e100 <jinit_marker_reader>:
 * This is called only once, when the decompression object is created.
 */

GLOBAL(void)
jinit_marker_reader (j_decompress_ptr cinfo)
{
 800e100:	b538      	push	{r3, r4, r5, lr}
  my_marker_ptr marker;
  int i;

  /* Create subobject in permanent pool */
  marker = (my_marker_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800e102:	6843      	ldr	r3, [r0, #4]
 800e104:	22ac      	movs	r2, #172	; 0xac
 800e106:	2100      	movs	r1, #0
{
 800e108:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	4798      	blx	r3
				SIZEOF(my_marker_reader));
  cinfo->marker = (struct jpeg_marker_reader *) marker;
  /* Initialize public method pointers */
  marker->pub.reset_marker_reader = reset_marker_reader;
 800e10e:	4b0e      	ldr	r3, [pc, #56]	; (800e148 <jinit_marker_reader+0x48>)
  cinfo->marker = (struct jpeg_marker_reader *) marker;
 800e110:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
  /* Initialize COM/APPn processing.
   * By default, we examine and then discard APP0 and APP14,
   * but simply discard COM and all other APPn.
   */
  marker->process_COM = skip_variable;
  marker->length_limit_COM = 0;
 800e114:	2200      	movs	r2, #0
  marker->pub.reset_marker_reader = reset_marker_reader;
 800e116:	6003      	str	r3, [r0, #0]
  marker->pub.read_markers = read_markers;
 800e118:	f100 0560 	add.w	r5, r0, #96	; 0x60
 800e11c:	4b0b      	ldr	r3, [pc, #44]	; (800e14c <jinit_marker_reader+0x4c>)
  marker->process_COM = skip_variable;
 800e11e:	490c      	ldr	r1, [pc, #48]	; (800e150 <jinit_marker_reader+0x50>)
  marker->pub.read_markers = read_markers;
 800e120:	6043      	str	r3, [r0, #4]
  marker->pub.read_restart_marker = read_restart_marker;
 800e122:	4b0c      	ldr	r3, [pc, #48]	; (800e154 <jinit_marker_reader+0x54>)
  marker->process_COM = skip_variable;
 800e124:	61c1      	str	r1, [r0, #28]
  marker->pub.read_restart_marker = read_restart_marker;
 800e126:	6083      	str	r3, [r0, #8]
  marker->length_limit_COM = 0;
 800e128:	f100 0320 	add.w	r3, r0, #32
 800e12c:	6602      	str	r2, [r0, #96]	; 0x60
  for (i = 0; i < 16; i++) {
    marker->process_APPn[i] = skip_variable;
 800e12e:	f843 1b04 	str.w	r1, [r3], #4
  for (i = 0; i < 16; i++) {
 800e132:	42ab      	cmp	r3, r5
    marker->length_limit_APPn[i] = 0;
 800e134:	641a      	str	r2, [r3, #64]	; 0x40
  for (i = 0; i < 16; i++) {
 800e136:	d1fa      	bne.n	800e12e <jinit_marker_reader+0x2e>
  }
  marker->process_APPn[0] = get_interesting_appn;
 800e138:	4b07      	ldr	r3, [pc, #28]	; (800e158 <jinit_marker_reader+0x58>)
 800e13a:	6203      	str	r3, [r0, #32]
  marker->process_APPn[14] = get_interesting_appn;
 800e13c:	6583      	str	r3, [r0, #88]	; 0x58
  /* Reset marker processing state */
  reset_marker_reader(cinfo);
 800e13e:	4620      	mov	r0, r4
}
 800e140:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  reset_marker_reader(cinfo);
 800e144:	f7ff b98f 	b.w	800d466 <reset_marker_reader>
 800e148:	0800d467 	.word	0x0800d467
 800e14c:	0800d699 	.word	0x0800d699
 800e150:	0800d365 	.word	0x0800d365
 800e154:	0800e001 	.word	0x0800e001
 800e158:	0800df2b 	.word	0x0800df2b

0800e15c <prepare_for_output_pass>:
 * (In the latter case, jdapistd.c will crank the pass to completion.)
 */

METHODDEF(void)
prepare_for_output_pass (j_decompress_ptr cinfo)
{
 800e15c:	b538      	push	{r3, r4, r5, lr}
  my_master_ptr master = (my_master_ptr) cinfo->master;
 800e15e:	f8d0 51b8 	ldr.w	r5, [r0, #440]	; 0x1b8
{
 800e162:	4604      	mov	r4, r0

  if (master->pub.is_dummy_pass) {
 800e164:	68ab      	ldr	r3, [r5, #8]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d02a      	beq.n	800e1c0 <prepare_for_output_pass+0x64>
#ifdef QUANT_2PASS_SUPPORTED
    /* Final pass of 2-pass quantization */
    master->pub.is_dummy_pass = FALSE;
 800e16a:	2100      	movs	r1, #0
    (*cinfo->cquantize->start_pass) (cinfo, FALSE);
 800e16c:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
    master->pub.is_dummy_pass = FALSE;
 800e170:	60a9      	str	r1, [r5, #8]
    (*cinfo->cquantize->start_pass) (cinfo, FALSE);
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	4798      	blx	r3
    (*cinfo->post->start_pass) (cinfo, JBUF_CRANK_DEST);
 800e176:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800e17a:	2102      	movs	r1, #2
 800e17c:	4620      	mov	r0, r4
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	4798      	blx	r3
    (*cinfo->main->start_pass) (cinfo, JBUF_CRANK_DEST);
 800e182:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 800e186:	2102      	movs	r1, #2
 800e188:	681b      	ldr	r3, [r3, #0]
      (*cinfo->upsample->start_pass) (cinfo);
      if (cinfo->quantize_colors)
	(*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
      (*cinfo->post->start_pass) (cinfo,
	    (master->pub.is_dummy_pass ? JBUF_SAVE_AND_PASS : JBUF_PASS_THRU));
      (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
 800e18a:	4620      	mov	r0, r4
 800e18c:	4798      	blx	r3
    }
  }

  /* Set up progress monitor's pass info if present */
  if (cinfo->progress != NULL) {
 800e18e:	68a2      	ldr	r2, [r4, #8]
 800e190:	b1aa      	cbz	r2, 800e1be <prepare_for_output_pass+0x62>
    cinfo->progress->completed_passes = master->pass_number;
    cinfo->progress->total_passes = master->pass_number +
				    (master->pub.is_dummy_pass ? 2 : 1);
 800e192:	68a9      	ldr	r1, [r5, #8]
    cinfo->progress->completed_passes = master->pass_number;
 800e194:	68eb      	ldr	r3, [r5, #12]
				    (master->pub.is_dummy_pass ? 2 : 1);
 800e196:	2900      	cmp	r1, #0
    cinfo->progress->completed_passes = master->pass_number;
 800e198:	60d3      	str	r3, [r2, #12]
				    (master->pub.is_dummy_pass ? 2 : 1);
 800e19a:	bf14      	ite	ne
 800e19c:	2102      	movne	r1, #2
 800e19e:	2101      	moveq	r1, #1
    cinfo->progress->total_passes = master->pass_number +
 800e1a0:	440b      	add	r3, r1
    /* In buffered-image mode, we assume one more output pass if EOI not
     * yet reached, but no more passes if EOI has been reached.
     */
    if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached) {
 800e1a2:	6c21      	ldr	r1, [r4, #64]	; 0x40
    cinfo->progress->total_passes = master->pass_number +
 800e1a4:	6113      	str	r3, [r2, #16]
    if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached) {
 800e1a6:	b151      	cbz	r1, 800e1be <prepare_for_output_pass+0x62>
 800e1a8:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
 800e1ac:	6949      	ldr	r1, [r1, #20]
 800e1ae:	b931      	cbnz	r1, 800e1be <prepare_for_output_pass+0x62>
      cinfo->progress->total_passes += (cinfo->enable_2pass_quant ? 2 : 1);
 800e1b0:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800e1b2:	2900      	cmp	r1, #0
 800e1b4:	bf14      	ite	ne
 800e1b6:	2102      	movne	r1, #2
 800e1b8:	2101      	moveq	r1, #1
 800e1ba:	440b      	add	r3, r1
 800e1bc:	6113      	str	r3, [r2, #16]
    }
  }
}
 800e1be:	bd38      	pop	{r3, r4, r5, pc}
    if (cinfo->quantize_colors && cinfo->colormap == NULL) {
 800e1c0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800e1c2:	b16b      	cbz	r3, 800e1e0 <prepare_for_output_pass+0x84>
 800e1c4:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800e1c8:	b953      	cbnz	r3, 800e1e0 <prepare_for_output_pass+0x84>
      if (cinfo->two_pass_quantize && cinfo->enable_2pass_quant) {
 800e1ca:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d037      	beq.n	800e240 <prepare_for_output_pass+0xe4>
 800e1d0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d034      	beq.n	800e240 <prepare_for_output_pass+0xe4>
	cinfo->cquantize = master->quantizer_2pass;
 800e1d6:	69ab      	ldr	r3, [r5, #24]
 800e1d8:	f8c0 31e0 	str.w	r3, [r0, #480]	; 0x1e0
	master->pub.is_dummy_pass = TRUE;
 800e1dc:	2301      	movs	r3, #1
 800e1de:	60ab      	str	r3, [r5, #8]
    (*cinfo->idct->start_pass) (cinfo);
 800e1e0:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 800e1e4:	4620      	mov	r0, r4
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	4798      	blx	r3
    (*cinfo->coef->start_output_pass) (cinfo);
 800e1ea:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 800e1ee:	4620      	mov	r0, r4
 800e1f0:	689b      	ldr	r3, [r3, #8]
 800e1f2:	4798      	blx	r3
    if (! cinfo->raw_data_out) {
 800e1f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d1c9      	bne.n	800e18e <prepare_for_output_pass+0x32>
      if (! master->using_merged_upsample)
 800e1fa:	692b      	ldr	r3, [r5, #16]
 800e1fc:	b923      	cbnz	r3, 800e208 <prepare_for_output_pass+0xac>
	(*cinfo->cconvert->start_pass) (cinfo);
 800e1fe:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
 800e202:	4620      	mov	r0, r4
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	4798      	blx	r3
      (*cinfo->upsample->start_pass) (cinfo);
 800e208:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
 800e20c:	4620      	mov	r0, r4
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	4798      	blx	r3
      if (cinfo->quantize_colors)
 800e212:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800e214:	b12b      	cbz	r3, 800e222 <prepare_for_output_pass+0xc6>
	(*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
 800e216:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800e21a:	4620      	mov	r0, r4
 800e21c:	68a9      	ldr	r1, [r5, #8]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	4798      	blx	r3
      (*cinfo->post->start_pass) (cinfo,
 800e222:	68aa      	ldr	r2, [r5, #8]
 800e224:	4620      	mov	r0, r4
 800e226:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800e22a:	2a00      	cmp	r2, #0
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	bf14      	ite	ne
 800e230:	2103      	movne	r1, #3
 800e232:	2100      	moveq	r1, #0
 800e234:	4798      	blx	r3
      (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
 800e236:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 800e23a:	2100      	movs	r1, #0
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	e7a4      	b.n	800e18a <prepare_for_output_pass+0x2e>
      } else if (cinfo->enable_1pass_quant) {
 800e240:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e242:	b11b      	cbz	r3, 800e24c <prepare_for_output_pass+0xf0>
	cinfo->cquantize = master->quantizer_1pass;
 800e244:	696b      	ldr	r3, [r5, #20]
 800e246:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
 800e24a:	e7c9      	b.n	800e1e0 <prepare_for_output_pass+0x84>
	ERREXIT(cinfo, JERR_MODE_CHANGE);
 800e24c:	6823      	ldr	r3, [r4, #0]
 800e24e:	222f      	movs	r2, #47	; 0x2f
 800e250:	4620      	mov	r0, r4
 800e252:	615a      	str	r2, [r3, #20]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	4798      	blx	r3
 800e258:	e7c2      	b.n	800e1e0 <prepare_for_output_pass+0x84>

0800e25a <finish_output_pass>:
METHODDEF(void)
finish_output_pass (j_decompress_ptr cinfo)
{
  my_master_ptr master = (my_master_ptr) cinfo->master;

  if (cinfo->quantize_colors)
 800e25a:	6d42      	ldr	r2, [r0, #84]	; 0x54
{
 800e25c:	b510      	push	{r4, lr}
  my_master_ptr master = (my_master_ptr) cinfo->master;
 800e25e:	f8d0 41b8 	ldr.w	r4, [r0, #440]	; 0x1b8
  if (cinfo->quantize_colors)
 800e262:	b11a      	cbz	r2, 800e26c <finish_output_pass+0x12>
    (*cinfo->cquantize->finish_pass) (cinfo);
 800e264:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 800e268:	689b      	ldr	r3, [r3, #8]
 800e26a:	4798      	blx	r3
  master->pass_number++;
 800e26c:	68e3      	ldr	r3, [r4, #12]
 800e26e:	3301      	adds	r3, #1
 800e270:	60e3      	str	r3, [r4, #12]
}
 800e272:	bd10      	pop	{r4, pc}

0800e274 <use_merged_upsample>:
  if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
 800e274:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
 800e276:	b510      	push	{r4, lr}
  if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d143      	bne.n	800e304 <use_merged_upsample+0x90>
 800e27c:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
 800e280:	2a00      	cmp	r2, #0
 800e282:	d141      	bne.n	800e308 <use_merged_upsample+0x94>
  if (cinfo->jpeg_color_space != JCS_YCbCr || cinfo->num_components != 3 ||
 800e284:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800e288:	2b03      	cmp	r3, #3
 800e28a:	d139      	bne.n	800e300 <use_merged_upsample+0x8c>
 800e28c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e28e:	2b03      	cmp	r3, #3
 800e290:	d136      	bne.n	800e300 <use_merged_upsample+0x8c>
 800e292:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800e296:	2b02      	cmp	r3, #2
 800e298:	d132      	bne.n	800e300 <use_merged_upsample+0x8c>
      cinfo->out_color_space != JCS_RGB ||
 800e29a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800e29c:	2b03      	cmp	r3, #3
 800e29e:	d12f      	bne.n	800e300 <use_merged_upsample+0x8c>
  if (cinfo->comp_info[0].h_samp_factor != 2 ||
 800e2a0:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 800e2a4:	6899      	ldr	r1, [r3, #8]
 800e2a6:	2902      	cmp	r1, #2
 800e2a8:	d12a      	bne.n	800e300 <use_merged_upsample+0x8c>
 800e2aa:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800e2ac:	2901      	cmp	r1, #1
 800e2ae:	d127      	bne.n	800e300 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].h_samp_factor != 1 ||
 800e2b0:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800e2b4:	2901      	cmp	r1, #1
 800e2b6:	d123      	bne.n	800e300 <use_merged_upsample+0x8c>
      cinfo->comp_info[2].h_samp_factor != 1 ||
 800e2b8:	68d9      	ldr	r1, [r3, #12]
 800e2ba:	2902      	cmp	r1, #2
 800e2bc:	dc20      	bgt.n	800e300 <use_merged_upsample+0x8c>
      cinfo->comp_info[0].v_samp_factor >  2 ||
 800e2be:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800e2c0:	2901      	cmp	r1, #1
 800e2c2:	d11d      	bne.n	800e300 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].v_samp_factor != 1 ||
 800e2c4:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800e2c8:	2901      	cmp	r1, #1
 800e2ca:	d119      	bne.n	800e300 <use_merged_upsample+0x8c>
  if (cinfo->comp_info[0].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800e2cc:	f8d0 4140 	ldr.w	r4, [r0, #320]	; 0x140
 800e2d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e2d2:	42a1      	cmp	r1, r4
 800e2d4:	d114      	bne.n	800e300 <use_merged_upsample+0x8c>
 800e2d6:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800e2d8:	42a1      	cmp	r1, r4
 800e2da:	d111      	bne.n	800e300 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800e2dc:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
 800e2e0:	42a1      	cmp	r1, r4
 800e2e2:	d10d      	bne.n	800e300 <use_merged_upsample+0x8c>
      cinfo->comp_info[0].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800e2e4:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
      cinfo->comp_info[2].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800e2e8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800e2ea:	4281      	cmp	r1, r0
 800e2ec:	d108      	bne.n	800e300 <use_merged_upsample+0x8c>
      cinfo->comp_info[0].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800e2ee:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800e2f2:	4281      	cmp	r1, r0
 800e2f4:	d104      	bne.n	800e300 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800e2f6:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800e2fa:	1a53      	subs	r3, r2, r1
 800e2fc:	425a      	negs	r2, r3
 800e2fe:	415a      	adcs	r2, r3
}
 800e300:	4610      	mov	r0, r2
 800e302:	bd10      	pop	{r4, pc}
    return FALSE;
 800e304:	2200      	movs	r2, #0
 800e306:	e7fb      	b.n	800e300 <use_merged_upsample+0x8c>
 800e308:	461a      	mov	r2, r3
 800e30a:	e7f9      	b.n	800e300 <use_merged_upsample+0x8c>

0800e30c <jpeg_calc_output_dimensions>:
  if (cinfo->global_state != DSTATE_READY)
 800e30c:	6942      	ldr	r2, [r0, #20]
 800e30e:	2aca      	cmp	r2, #202	; 0xca
{
 800e310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e314:	4604      	mov	r4, r0
  if (cinfo->global_state != DSTATE_READY)
 800e316:	d005      	beq.n	800e324 <jpeg_calc_output_dimensions+0x18>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800e318:	6803      	ldr	r3, [r0, #0]
 800e31a:	2115      	movs	r1, #21
 800e31c:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	4798      	blx	r3
  jpeg_core_output_dimensions(cinfo);
 800e324:	4620      	mov	r0, r4
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e326:	2600      	movs	r6, #0
  jpeg_core_output_dimensions(cinfo);
 800e328:	f7fe fb06 	bl	800c938 <jpeg_core_output_dimensions>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e32c:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
 800e330:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 800e334:	462b      	mov	r3, r5
 800e336:	45b4      	cmp	ip, r6
 800e338:	dd6b      	ble.n	800e412 <jpeg_calc_output_dimensions+0x106>
 800e33a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    int ssize = 1;
 800e33c:	2101      	movs	r1, #1
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 800e33e:	f8d4 8140 	ldr.w	r8, [r4, #320]	; 0x140
 800e342:	2a00      	cmp	r2, #0
 800e344:	bf14      	ite	ne
 800e346:	2708      	movne	r7, #8
 800e348:	2704      	moveq	r7, #4
 800e34a:	e00a      	b.n	800e362 <jpeg_calc_output_dimensions+0x56>
	   (cinfo->max_h_samp_factor % (compptr->h_samp_factor * ssize * 2)) == 0) {
 800e34c:	689a      	ldr	r2, [r3, #8]
 800e34e:	f8d4 9138 	ldr.w	r9, [r4, #312]	; 0x138
 800e352:	434a      	muls	r2, r1
 800e354:	0052      	lsls	r2, r2, #1
 800e356:	fb99 fef2 	sdiv	lr, r9, r2
 800e35a:	fb02 921e 	mls	r2, r2, lr, r9
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800e35e:	b922      	cbnz	r2, 800e36a <jpeg_calc_output_dimensions+0x5e>
      ssize = ssize * 2;
 800e360:	0049      	lsls	r1, r1, #1
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 800e362:	fb01 f008 	mul.w	r0, r1, r8
 800e366:	42b8      	cmp	r0, r7
 800e368:	ddf0      	ble.n	800e34c <jpeg_calc_output_dimensions+0x40>
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size * ssize;
 800e36a:	6258      	str	r0, [r3, #36]	; 0x24
    ssize = 1;
 800e36c:	f04f 0e01 	mov.w	lr, #1
    while (cinfo->min_DCT_v_scaled_size * ssize <=
 800e370:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144
 800e374:	fb0e f108 	mul.w	r1, lr, r8
 800e378:	42b9      	cmp	r1, r7
 800e37a:	dd0b      	ble.n	800e394 <jpeg_calc_output_dimensions+0x88>
    if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
 800e37c:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
    compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size * ssize;
 800e380:	6299      	str	r1, [r3, #40]	; 0x28
    if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
 800e382:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800e386:	dc14      	bgt.n	800e3b2 <jpeg_calc_output_dimensions+0xa6>
    else if (compptr->DCT_v_scaled_size > compptr->DCT_h_scaled_size * 2)
 800e388:	0042      	lsls	r2, r0, #1
 800e38a:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
	compptr->DCT_v_scaled_size = compptr->DCT_h_scaled_size * 2;
 800e38e:	bfc8      	it	gt
 800e390:	629a      	strgt	r2, [r3, #40]	; 0x28
 800e392:	e00f      	b.n	800e3b4 <jpeg_calc_output_dimensions+0xa8>
	   (cinfo->max_v_samp_factor % (compptr->v_samp_factor * ssize * 2)) == 0) {
 800e394:	68da      	ldr	r2, [r3, #12]
 800e396:	f8d4 a13c 	ldr.w	sl, [r4, #316]	; 0x13c
 800e39a:	fb02 f20e 	mul.w	r2, r2, lr
 800e39e:	0052      	lsls	r2, r2, #1
 800e3a0:	fb9a f9f2 	sdiv	r9, sl, r2
 800e3a4:	fb02 a219 	mls	r2, r2, r9, sl
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800e3a8:	2a00      	cmp	r2, #0
 800e3aa:	d1e7      	bne.n	800e37c <jpeg_calc_output_dimensions+0x70>
      ssize = ssize * 2;
 800e3ac:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800e3b0:	e7e0      	b.n	800e374 <jpeg_calc_output_dimensions+0x68>
	compptr->DCT_h_scaled_size = compptr->DCT_v_scaled_size * 2;
 800e3b2:	625a      	str	r2, [r3, #36]	; 0x24
       ci++, compptr++) {
 800e3b4:	3601      	adds	r6, #1
 800e3b6:	3358      	adds	r3, #88	; 0x58
 800e3b8:	e7bd      	b.n	800e336 <jpeg_calc_output_dimensions+0x2a>
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800e3ba:	68ab      	ldr	r3, [r5, #8]
       ci++, compptr++) {
 800e3bc:	3601      	adds	r6, #1
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800e3be:	6a68      	ldr	r0, [r5, #36]	; 0x24
       ci++, compptr++) {
 800e3c0:	3558      	adds	r5, #88	; 0x58
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800e3c2:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
 800e3c6:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800e3ca:	4358      	muls	r0, r3
      jdiv_round_up((long) cinfo->image_width *
 800e3cc:	69e3      	ldr	r3, [r4, #28]
 800e3ce:	4351      	muls	r1, r2
 800e3d0:	4358      	muls	r0, r3
 800e3d2:	f007 febb 	bl	801614c <jdiv_round_up>
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800e3d6:	f855 3c4c 	ldr.w	r3, [r5, #-76]
    compptr->downsampled_width = (JDIMENSION)
 800e3da:	f845 0c2c 	str.w	r0, [r5, #-44]
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800e3de:	f855 0c30 	ldr.w	r0, [r5, #-48]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800e3e2:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 800e3e6:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800e3ea:	4358      	muls	r0, r3
      jdiv_round_up((long) cinfo->image_height *
 800e3ec:	6a23      	ldr	r3, [r4, #32]
 800e3ee:	4351      	muls	r1, r2
 800e3f0:	4358      	muls	r0, r3
 800e3f2:	f007 feab 	bl	801614c <jdiv_round_up>
    compptr->downsampled_height = (JDIMENSION)
 800e3f6:	f845 0c28 	str.w	r0, [r5, #-40]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e3fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e3fc:	42b2      	cmp	r2, r6
 800e3fe:	dcdc      	bgt.n	800e3ba <jpeg_calc_output_dimensions+0xae>
  switch (cinfo->out_color_space) {
 800e400:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 800e404:	2b03      	cmp	r3, #3
 800e406:	d806      	bhi.n	800e416 <jpeg_calc_output_dimensions+0x10a>
 800e408:	2b01      	cmp	r3, #1
 800e40a:	d809      	bhi.n	800e420 <jpeg_calc_output_dimensions+0x114>
 800e40c:	d009      	beq.n	800e422 <jpeg_calc_output_dimensions+0x116>
    cinfo->out_color_components = cinfo->num_components;
 800e40e:	67a2      	str	r2, [r4, #120]	; 0x78
    break;
 800e410:	e008      	b.n	800e424 <jpeg_calc_output_dimensions+0x118>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e412:	2600      	movs	r6, #0
 800e414:	e7f1      	b.n	800e3fa <jpeg_calc_output_dimensions+0xee>
  switch (cinfo->out_color_space) {
 800e416:	3b04      	subs	r3, #4
 800e418:	2b01      	cmp	r3, #1
 800e41a:	d8f8      	bhi.n	800e40e <jpeg_calc_output_dimensions+0x102>
    cinfo->out_color_components = 4;
 800e41c:	2304      	movs	r3, #4
 800e41e:	e000      	b.n	800e422 <jpeg_calc_output_dimensions+0x116>
    cinfo->out_color_components = RGB_PIXELSIZE;
 800e420:	2303      	movs	r3, #3
    cinfo->out_color_components = 4;
 800e422:	67a3      	str	r3, [r4, #120]	; 0x78
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 800e424:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800e426:	b95b      	cbnz	r3, 800e440 <jpeg_calc_output_dimensions+0x134>
 800e428:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  if (use_merged_upsample(cinfo))
 800e42a:	4620      	mov	r0, r4
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 800e42c:	67e3      	str	r3, [r4, #124]	; 0x7c
  if (use_merged_upsample(cinfo))
 800e42e:	f7ff ff21 	bl	800e274 <use_merged_upsample>
 800e432:	b138      	cbz	r0, 800e444 <jpeg_calc_output_dimensions+0x138>
    cinfo->rec_outbuf_height = cinfo->max_v_samp_factor;
 800e434:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 800e438:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 800e43c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 800e440:	2301      	movs	r3, #1
 800e442:	e7f2      	b.n	800e42a <jpeg_calc_output_dimensions+0x11e>
    cinfo->rec_outbuf_height = 1;
 800e444:	2301      	movs	r3, #1
 800e446:	e7f7      	b.n	800e438 <jpeg_calc_output_dimensions+0x12c>

0800e448 <jinit_master_decompress>:
 * This is performed at the start of jpeg_start_decompress.
 */

GLOBAL(void)
jinit_master_decompress (j_decompress_ptr cinfo)
{
 800e448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_master_ptr master;

  master = (my_master_ptr)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e44a:	6843      	ldr	r3, [r0, #4]
 800e44c:	221c      	movs	r2, #28
 800e44e:	2101      	movs	r1, #1
{
 800e450:	4604      	mov	r4, r0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e452:	681b      	ldr	r3, [r3, #0]
				  SIZEOF(my_decomp_master));
  cinfo->master = (struct jpeg_decomp_master *) master;
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
  master->pub.finish_output_pass = finish_output_pass;

  master->pub.is_dummy_pass = FALSE;
 800e454:	2700      	movs	r7, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e456:	4798      	blx	r3
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
 800e458:	4b6e      	ldr	r3, [pc, #440]	; (800e614 <jinit_master_decompress+0x1cc>)
  cinfo->master = (struct jpeg_decomp_master *) master;
 800e45a:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e45e:	4605      	mov	r5, r0
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
 800e460:	6003      	str	r3, [r0, #0]
  master->pub.finish_output_pass = finish_output_pass;
 800e462:	4b6d      	ldr	r3, [pc, #436]	; (800e618 <jinit_master_decompress+0x1d0>)
  master->pub.is_dummy_pass = FALSE;
 800e464:	6087      	str	r7, [r0, #8]
  master->pub.finish_output_pass = finish_output_pass;
 800e466:	6043      	str	r3, [r0, #4]
  jpeg_calc_output_dimensions(cinfo);
 800e468:	4620      	mov	r0, r4
 800e46a:	f7ff ff4f 	bl	800e30c <jpeg_calc_output_dimensions>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e46e:	6863      	ldr	r3, [r4, #4]
 800e470:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 800e474:	2101      	movs	r1, #1
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	4620      	mov	r0, r4
 800e47a:	4798      	blx	r3
  table += (MAXJSAMPLE+1);	/* allow negative subscripts of simple table */
 800e47c:	f500 7380 	add.w	r3, r0, #256	; 0x100
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e480:	4606      	mov	r6, r0
  MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
 800e482:	4639      	mov	r1, r7
  cinfo->sample_range_limit = table;
 800e484:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
  MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
 800e488:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e48c:	f019 f84a 	bl	8027524 <memset>
  for (i = 0; i <= MAXJSAMPLE; i++)
 800e490:	f106 03ff 	add.w	r3, r6, #255	; 0xff
 800e494:	4639      	mov	r1, r7
    table[i] = (JSAMPLE) i;
 800e496:	f803 1f01 	strb.w	r1, [r3, #1]!
  for (i = 0; i <= MAXJSAMPLE; i++)
 800e49a:	3101      	adds	r1, #1
 800e49c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800e4a0:	d1f9      	bne.n	800e496 <jinit_master_decompress+0x4e>
  for (i = CENTERJSAMPLE; i < 2*(MAXJSAMPLE+1); i++)
 800e4a2:	f206 13ff 	addw	r3, r6, #511	; 0x1ff
 800e4a6:	f206 327f 	addw	r2, r6, #895	; 0x37f
    table[i] = MAXJSAMPLE;
 800e4aa:	21ff      	movs	r1, #255	; 0xff
 800e4ac:	f803 1f01 	strb.w	r1, [r3, #1]!
  for (i = CENTERJSAMPLE; i < 2*(MAXJSAMPLE+1); i++)
 800e4b0:	429a      	cmp	r2, r3
 800e4b2:	d1fb      	bne.n	800e4ac <jinit_master_decompress+0x64>
  MEMZERO(table + (2 * (MAXJSAMPLE+1)),
 800e4b4:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800e4b8:	2100      	movs	r1, #0
 800e4ba:	f506 7060 	add.w	r0, r6, #896	; 0x380
 800e4be:	f019 f831 	bl	8027524 <memset>
  MEMCOPY(table + (4 * (MAXJSAMPLE+1) - CENTERJSAMPLE),
 800e4c2:	f506 60a0 	add.w	r0, r6, #1280	; 0x500
  master->pass_number = 0;
 800e4c6:	2600      	movs	r6, #0
  MEMCOPY(table + (4 * (MAXJSAMPLE+1) - CENTERJSAMPLE),
 800e4c8:	2280      	movs	r2, #128	; 0x80
 800e4ca:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
 800e4ce:	f019 f81b 	bl	8027508 <memcpy>
  master->using_merged_upsample = use_merged_upsample(cinfo);
 800e4d2:	4620      	mov	r0, r4
  master->pass_number = 0;
 800e4d4:	60ee      	str	r6, [r5, #12]
  master->using_merged_upsample = use_merged_upsample(cinfo);
 800e4d6:	f7ff fecd 	bl	800e274 <use_merged_upsample>
  if (! cinfo->quantize_colors || ! cinfo->buffered_image) {
 800e4da:	6d63      	ldr	r3, [r4, #84]	; 0x54
  master->quantizer_2pass = NULL;
 800e4dc:	61ae      	str	r6, [r5, #24]
  master->quantizer_1pass = NULL;
 800e4de:	e9c5 0604 	strd	r0, r6, [r5, #16]
  if (! cinfo->quantize_colors || ! cinfo->buffered_image) {
 800e4e2:	b1b3      	cbz	r3, 800e512 <jinit_master_decompress+0xca>
 800e4e4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e4e6:	b1a2      	cbz	r2, 800e512 <jinit_master_decompress+0xca>
    if (cinfo->raw_data_out)
 800e4e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d166      	bne.n	800e5bc <jinit_master_decompress+0x174>
    if (cinfo->out_color_components != 3) {
 800e4ee:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800e4f0:	2b03      	cmp	r3, #3
 800e4f2:	f04f 0301 	mov.w	r3, #1
 800e4f6:	d068      	beq.n	800e5ca <jinit_master_decompress+0x182>
      cinfo->enable_1pass_quant = TRUE;
 800e4f8:	6663      	str	r3, [r4, #100]	; 0x64
      cinfo->enable_external_quant = FALSE;
 800e4fa:	2300      	movs	r3, #0
      cinfo->enable_2pass_quant = FALSE;
 800e4fc:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
      cinfo->colormap = NULL;
 800e500:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      jinit_1pass_quantizer(cinfo);
 800e504:	4620      	mov	r0, r4
 800e506:	f006 ff2d 	bl	8015364 <jinit_1pass_quantizer>
      master->quantizer_1pass = cinfo->cquantize;
 800e50a:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800e50e:	616b      	str	r3, [r5, #20]
 800e510:	e062      	b.n	800e5d8 <jinit_master_decompress+0x190>
    cinfo->enable_external_quant = FALSE;
 800e512:	e9c4 6619 	strd	r6, r6, [r4, #100]	; 0x64
    cinfo->enable_2pass_quant = FALSE;
 800e516:	66e6      	str	r6, [r4, #108]	; 0x6c
  if (cinfo->quantize_colors) {
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d1e5      	bne.n	800e4e8 <jinit_master_decompress+0xa0>
  if (! cinfo->raw_data_out) {
 800e51c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e51e:	b94b      	cbnz	r3, 800e534 <jinit_master_decompress+0xec>
    if (master->using_merged_upsample) {
 800e520:	692b      	ldr	r3, [r5, #16]
      jinit_merged_upsampler(cinfo); /* does color conversion too */
 800e522:	4620      	mov	r0, r4
    if (master->using_merged_upsample) {
 800e524:	2b00      	cmp	r3, #0
 800e526:	d069      	beq.n	800e5fc <jinit_master_decompress+0x1b4>
      jinit_merged_upsampler(cinfo); /* does color conversion too */
 800e528:	f000 fa1c 	bl	800e964 <jinit_merged_upsampler>
    jinit_d_post_controller(cinfo, cinfo->enable_2pass_quant);
 800e52c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800e52e:	4620      	mov	r0, r4
 800e530:	f000 fb98 	bl	800ec64 <jinit_d_post_controller>
  jinit_inverse_dct(cinfo);
 800e534:	4620      	mov	r0, r4
 800e536:	f7fc fdad 	bl	800b094 <jinit_inverse_dct>
  if (cinfo->arith_code)
 800e53a:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    jinit_arith_decoder(cinfo);
 800e53e:	4620      	mov	r0, r4
  if (cinfo->arith_code)
 800e540:	2b00      	cmp	r3, #0
 800e542:	d061      	beq.n	800e608 <jinit_master_decompress+0x1c0>
    jinit_arith_decoder(cinfo);
 800e544:	f7fb fc06 	bl	8009d54 <jinit_arith_decoder>
  use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
 800e548:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800e54c:	691b      	ldr	r3, [r3, #16]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d15d      	bne.n	800e60e <jinit_master_decompress+0x1c6>
 800e552:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e554:	3900      	subs	r1, #0
 800e556:	bf18      	it	ne
 800e558:	2101      	movne	r1, #1
  jinit_d_coef_controller(cinfo, use_c_buffer);
 800e55a:	4620      	mov	r0, r4
 800e55c:	f7fc f8fc 	bl	800a758 <jinit_d_coef_controller>
  if (! cinfo->raw_data_out)
 800e560:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e562:	b911      	cbnz	r1, 800e56a <jinit_master_decompress+0x122>
    jinit_d_main_controller(cinfo, FALSE /* never need full buffer here */);
 800e564:	4620      	mov	r0, r4
 800e566:	f7fe fcaf 	bl	800cec8 <jinit_d_main_controller>
  (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);
 800e56a:	6863      	ldr	r3, [r4, #4]
 800e56c:	4620      	mov	r0, r4
 800e56e:	699b      	ldr	r3, [r3, #24]
 800e570:	4798      	blx	r3
  (*cinfo->inputctl->start_input_pass) (cinfo);
 800e572:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800e576:	4620      	mov	r0, r4
 800e578:	689b      	ldr	r3, [r3, #8]
 800e57a:	4798      	blx	r3
  if (cinfo->progress != NULL && ! cinfo->buffered_image &&
 800e57c:	68a2      	ldr	r2, [r4, #8]
 800e57e:	b1e2      	cbz	r2, 800e5ba <jinit_master_decompress+0x172>
 800e580:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e582:	b9d3      	cbnz	r3, 800e5ba <jinit_master_decompress+0x172>
      cinfo->inputctl->has_multiple_scans) {
 800e584:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
  if (cinfo->progress != NULL && ! cinfo->buffered_image &&
 800e588:	691b      	ldr	r3, [r3, #16]
 800e58a:	b1b3      	cbz	r3, 800e5ba <jinit_master_decompress+0x172>
    if (cinfo->progressive_mode) {
 800e58c:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
 800e590:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e592:	b111      	cbz	r1, 800e59a <jinit_master_decompress+0x152>
      nscans = 2 + 3 * cinfo->num_components;
 800e594:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e598:	3302      	adds	r3, #2
    cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
 800e59a:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
    cinfo->progress->pass_counter = 0L;
 800e59e:	2100      	movs	r1, #0
    cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
 800e5a0:	4343      	muls	r3, r0
    cinfo->progress->pass_counter = 0L;
 800e5a2:	6051      	str	r1, [r2, #4]
    cinfo->progress->completed_passes = 0;
 800e5a4:	e9c2 3102 	strd	r3, r1, [r2, #8]
    cinfo->progress->total_passes = (cinfo->enable_2pass_quant ? 3 : 2);
 800e5a8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800e5aa:	428b      	cmp	r3, r1
 800e5ac:	bf14      	ite	ne
 800e5ae:	2303      	movne	r3, #3
 800e5b0:	2302      	moveq	r3, #2
 800e5b2:	6113      	str	r3, [r2, #16]
    master->pass_number++;
 800e5b4:	68eb      	ldr	r3, [r5, #12]
 800e5b6:	3301      	adds	r3, #1
 800e5b8:	60eb      	str	r3, [r5, #12]

  master_selection(cinfo);
}
 800e5ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ERREXIT(cinfo, JERR_NOTIMPL);
 800e5bc:	6823      	ldr	r3, [r4, #0]
 800e5be:	2230      	movs	r2, #48	; 0x30
 800e5c0:	4620      	mov	r0, r4
 800e5c2:	615a      	str	r2, [r3, #20]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	4798      	blx	r3
 800e5c8:	e791      	b.n	800e4ee <jinit_master_decompress+0xa6>
    } else if (cinfo->colormap != NULL) {
 800e5ca:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 800e5ce:	b17a      	cbz	r2, 800e5f0 <jinit_master_decompress+0x1a8>
      cinfo->enable_external_quant = TRUE;
 800e5d0:	66a3      	str	r3, [r4, #104]	; 0x68
    if (cinfo->enable_1pass_quant) {
 800e5d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d195      	bne.n	800e504 <jinit_master_decompress+0xbc>
    if (cinfo->enable_2pass_quant || cinfo->enable_external_quant) {
 800e5d8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800e5da:	b913      	cbnz	r3, 800e5e2 <jinit_master_decompress+0x19a>
 800e5dc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d09c      	beq.n	800e51c <jinit_master_decompress+0xd4>
      jinit_2pass_quantizer(cinfo);
 800e5e2:	4620      	mov	r0, r4
 800e5e4:	f007 fd46 	bl	8016074 <jinit_2pass_quantizer>
      master->quantizer_2pass = cinfo->cquantize;
 800e5e8:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800e5ec:	61ab      	str	r3, [r5, #24]
 800e5ee:	e795      	b.n	800e51c <jinit_master_decompress+0xd4>
    } else if (cinfo->two_pass_quantize) {
 800e5f0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800e5f2:	b10a      	cbz	r2, 800e5f8 <jinit_master_decompress+0x1b0>
      cinfo->enable_2pass_quant = TRUE;
 800e5f4:	66e3      	str	r3, [r4, #108]	; 0x6c
 800e5f6:	e7ec      	b.n	800e5d2 <jinit_master_decompress+0x18a>
      cinfo->enable_1pass_quant = TRUE;
 800e5f8:	6663      	str	r3, [r4, #100]	; 0x64
 800e5fa:	e783      	b.n	800e504 <jinit_master_decompress+0xbc>
      jinit_color_deconverter(cinfo);
 800e5fc:	f7fc fad2 	bl	800aba4 <jinit_color_deconverter>
      jinit_upsampler(cinfo);
 800e600:	4620      	mov	r0, r4
 800e602:	f000 fc51 	bl	800eea8 <jinit_upsampler>
 800e606:	e791      	b.n	800e52c <jinit_master_decompress+0xe4>
    jinit_huff_decoder(cinfo);
 800e608:	f7fd fedc 	bl	800c3c4 <jinit_huff_decoder>
 800e60c:	e79c      	b.n	800e548 <jinit_master_decompress+0x100>
  use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
 800e60e:	2101      	movs	r1, #1
 800e610:	e7a3      	b.n	800e55a <jinit_master_decompress+0x112>
 800e612:	bf00      	nop
 800e614:	0800e15d 	.word	0x0800e15d
 800e618:	0800e25b 	.word	0x0800e25b

0800e61c <start_pass_merged_upsample>:
 */

METHODDEF(void)
start_pass_merged_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800e61c:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8

  /* Mark the spare buffer empty */
  upsample->spare_full = FALSE;
 800e620:	2200      	movs	r2, #0
 800e622:	625a      	str	r2, [r3, #36]	; 0x24
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
 800e624:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800e626:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800e628:	4770      	bx	lr

0800e62a <merged_1v_upsample>:
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
/* 1:1 vertical sampling case: much easier, never need a spare row. */
{
 800e62a:	b570      	push	{r4, r5, r6, lr}
 800e62c:	9d05      	ldr	r5, [sp, #20]
 800e62e:	4614      	mov	r4, r2
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Just do the upsampling. */
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
 800e630:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
			 output_buf + *out_row_ctr);
 800e634:	682a      	ldr	r2, [r5, #0]
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
 800e636:	68de      	ldr	r6, [r3, #12]
 800e638:	9b04      	ldr	r3, [sp, #16]
 800e63a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800e63e:	6822      	ldr	r2, [r4, #0]
 800e640:	47b0      	blx	r6
  /* Adjust counts */
  (*out_row_ctr)++;
 800e642:	682b      	ldr	r3, [r5, #0]
 800e644:	3301      	adds	r3, #1
 800e646:	602b      	str	r3, [r5, #0]
  (*in_row_group_ctr)++;
 800e648:	6823      	ldr	r3, [r4, #0]
 800e64a:	3301      	adds	r3, #1
 800e64c:	6023      	str	r3, [r4, #0]
}
 800e64e:	bd70      	pop	{r4, r5, r6, pc}

0800e650 <h2v1_merged_upsample>:

METHODDEF(void)
h2v1_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
 800e650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800e654:	f8d0 51d8 	ldr.w	r5, [r0, #472]	; 0x1d8
{
 800e658:	b087      	sub	sp, #28
  SHIFT_TEMPS

  inptr0 = input_buf[0][in_row_group_ctr];
  inptr1 = input_buf[1][in_row_group_ctr];
  inptr2 = input_buf[2][in_row_group_ctr];
  outptr = output_buf[0];
 800e65a:	f8d3 c000 	ldr.w	ip, [r3]
  int * Crrtab = upsample->Cr_r_tab;
 800e65e:	692e      	ldr	r6, [r5, #16]
  INT32 * Cbgtab = upsample->Cb_g_tab;
 800e660:	f8d5 801c 	ldr.w	r8, [r5, #28]
 800e664:	4663      	mov	r3, ip
  int * Crrtab = upsample->Cr_r_tab;
 800e666:	9600      	str	r6, [sp, #0]
  int * Cbbtab = upsample->Cb_b_tab;
 800e668:	696e      	ldr	r6, [r5, #20]
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800e66a:	f8d0 414c 	ldr.w	r4, [r0, #332]	; 0x14c
  int * Cbbtab = upsample->Cb_b_tab;
 800e66e:	9601      	str	r6, [sp, #4]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800e670:	69ae      	ldr	r6, [r5, #24]
  inptr0 = input_buf[0][in_row_group_ctr];
 800e672:	680d      	ldr	r5, [r1, #0]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800e674:	9602      	str	r6, [sp, #8]
  inptr0 = input_buf[0][in_row_group_ctr];
 800e676:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 800e67a:	9503      	str	r5, [sp, #12]
  inptr1 = input_buf[1][in_row_group_ctr];
 800e67c:	684d      	ldr	r5, [r1, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 800e67e:	6889      	ldr	r1, [r1, #8]
  inptr1 = input_buf[1][in_row_group_ctr];
 800e680:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
  inptr2 = input_buf[2][in_row_group_ctr];
 800e684:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800e688:	9903      	ldr	r1, [sp, #12]
 800e68a:	9204      	str	r2, [sp, #16]
  /* Loop for each pair of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800e68c:	6f02      	ldr	r2, [r0, #112]	; 0x70
  inptr2 = input_buf[2][in_row_group_ctr];
 800e68e:	f8dd 9010 	ldr.w	r9, [sp, #16]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800e692:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 800e696:	eb05 0252 	add.w	r2, r5, r2, lsr #1
 800e69a:	9205      	str	r2, [sp, #20]
 800e69c:	9a05      	ldr	r2, [sp, #20]
 800e69e:	3306      	adds	r3, #6
 800e6a0:	3102      	adds	r1, #2
 800e6a2:	4295      	cmp	r5, r2
 800e6a4:	d128      	bne.n	800e6f8 <h2v1_merged_upsample+0xa8>
 800e6a6:	2306      	movs	r3, #6
    outptr[RGB_GREEN] = range_limit[y + cgreen];
    outptr[RGB_BLUE] =  range_limit[y + cblue];
    outptr += RGB_PIXELSIZE;
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
 800e6a8:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800e6aa:	fb03 f30e 	mul.w	r3, r3, lr
 800e6ae:	07d2      	lsls	r2, r2, #31
 800e6b0:	eb0c 0103 	add.w	r1, ip, r3
 800e6b4:	d51d      	bpl.n	800e6f2 <h2v1_merged_upsample+0xa2>
    cb = GETJSAMPLE(*inptr1);
    cr = GETJSAMPLE(*inptr2);
    cred = Crrtab[cr];
 800e6b6:	9a04      	ldr	r2, [sp, #16]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800e6b8:	9802      	ldr	r0, [sp, #8]
    cred = Crrtab[cr];
 800e6ba:	f812 600e 	ldrb.w	r6, [r2, lr]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800e6be:	782a      	ldrb	r2, [r5, #0]
 800e6c0:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 800e6c4:	f858 5022 	ldr.w	r5, [r8, r2, lsl #2]
    cblue = Cbbtab[cb];
    y  = GETJSAMPLE(*inptr0);
    outptr[RGB_RED] =   range_limit[y + cred];
 800e6c8:	9f00      	ldr	r7, [sp, #0]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800e6ca:	4428      	add	r0, r5
    cblue = Cbbtab[cb];
 800e6cc:	9d01      	ldr	r5, [sp, #4]
    outptr[RGB_RED] =   range_limit[y + cred];
 800e6ce:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
    cblue = Cbbtab[cb];
 800e6d2:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800e6d6:	eb04 4020 	add.w	r0, r4, r0, asr #16
    y  = GETJSAMPLE(*inptr0);
 800e6da:	9a03      	ldr	r2, [sp, #12]
 800e6dc:	f812 201e 	ldrb.w	r2, [r2, lr, lsl #1]
    outptr[RGB_RED] =   range_limit[y + cred];
 800e6e0:	18a7      	adds	r7, r4, r2
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800e6e2:	442c      	add	r4, r5
    outptr[RGB_RED] =   range_limit[y + cred];
 800e6e4:	5dbe      	ldrb	r6, [r7, r6]
 800e6e6:	708e      	strb	r6, [r1, #2]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800e6e8:	5c80      	ldrb	r0, [r0, r2]
 800e6ea:	7048      	strb	r0, [r1, #1]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800e6ec:	5ca2      	ldrb	r2, [r4, r2]
 800e6ee:	f80c 2003 	strb.w	r2, [ip, r3]
  }
}
 800e6f2:	b007      	add	sp, #28
 800e6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cred = Crrtab[cr];
 800e6f8:	f819 ab01 	ldrb.w	sl, [r9], #1
 800e6fc:	9a00      	ldr	r2, [sp, #0]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800e6fe:	f815 6b01 	ldrb.w	r6, [r5], #1
    cred = Crrtab[cr];
 800e702:	f852 b02a 	ldr.w	fp, [r2, sl, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800e706:	9a02      	ldr	r2, [sp, #8]
 800e708:	f858 7026 	ldr.w	r7, [r8, r6, lsl #2]
 800e70c:	f852 202a 	ldr.w	r2, [r2, sl, lsl #2]
    y  = GETJSAMPLE(*inptr0++);
 800e710:	f811 ac02 	ldrb.w	sl, [r1, #-2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800e714:	443a      	add	r2, r7
    cblue = Cbbtab[cb];
 800e716:	9f01      	ldr	r7, [sp, #4]
 800e718:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
    outptr[RGB_RED] =   range_limit[y + cred];
 800e71c:	eb0b 0704 	add.w	r7, fp, r4
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800e720:	eb04 4222 	add.w	r2, r4, r2, asr #16
    outptr[RGB_RED] =   range_limit[y + cred];
 800e724:	f817 b00a 	ldrb.w	fp, [r7, sl]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800e728:	4426      	add	r6, r4
    outptr[RGB_RED] =   range_limit[y + cred];
 800e72a:	f803 bc04 	strb.w	fp, [r3, #-4]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800e72e:	f812 b00a 	ldrb.w	fp, [r2, sl]
 800e732:	f803 bc05 	strb.w	fp, [r3, #-5]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800e736:	f816 a00a 	ldrb.w	sl, [r6, sl]
 800e73a:	f803 ac06 	strb.w	sl, [r3, #-6]
    y  = GETJSAMPLE(*inptr0++);
 800e73e:	f811 ac01 	ldrb.w	sl, [r1, #-1]
    outptr[RGB_RED] =   range_limit[y + cred];
 800e742:	f817 700a 	ldrb.w	r7, [r7, sl]
 800e746:	f803 7c01 	strb.w	r7, [r3, #-1]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800e74a:	f812 200a 	ldrb.w	r2, [r2, sl]
 800e74e:	f803 2c02 	strb.w	r2, [r3, #-2]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800e752:	f816 200a 	ldrb.w	r2, [r6, sl]
 800e756:	f803 2c03 	strb.w	r2, [r3, #-3]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800e75a:	e79f      	b.n	800e69c <h2v1_merged_upsample+0x4c>

0800e75c <h2v2_merged_upsample>:

METHODDEF(void)
h2v2_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
 800e75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800e760:	f8d0 51d8 	ldr.w	r5, [r0, #472]	; 0x1d8
{
 800e764:	b08b      	sub	sp, #44	; 0x2c
  int cb, cr;
  register JSAMPROW outptr0, outptr1;
  JSAMPROW inptr00, inptr01, inptr1, inptr2;
  JDIMENSION col;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800e766:	f8d0 414c 	ldr.w	r4, [r0, #332]	; 0x14c
  int * Crrtab = upsample->Cr_r_tab;
 800e76a:	692e      	ldr	r6, [r5, #16]
  int * Cbbtab = upsample->Cb_b_tab;
  INT32 * Crgtab = upsample->Cr_g_tab;
  INT32 * Cbgtab = upsample->Cb_g_tab;
 800e76c:	f8d5 a01c 	ldr.w	sl, [r5, #28]
  int * Crrtab = upsample->Cr_r_tab;
 800e770:	9603      	str	r6, [sp, #12]
  int * Cbbtab = upsample->Cb_b_tab;
 800e772:	696e      	ldr	r6, [r5, #20]
 800e774:	9604      	str	r6, [sp, #16]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800e776:	69ae      	ldr	r6, [r5, #24]
  SHIFT_TEMPS

  inptr00 = input_buf[0][in_row_group_ctr*2];
 800e778:	680d      	ldr	r5, [r1, #0]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800e77a:	9605      	str	r6, [sp, #20]
  inptr00 = input_buf[0][in_row_group_ctr*2];
 800e77c:	f855 6032 	ldr.w	r6, [r5, r2, lsl #3]
  inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
 800e780:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 800e784:	686d      	ldr	r5, [r5, #4]
 800e786:	46b6      	mov	lr, r6
  inptr00 = input_buf[0][in_row_group_ctr*2];
 800e788:	9606      	str	r6, [sp, #24]
  inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
 800e78a:	9507      	str	r5, [sp, #28]
  inptr1 = input_buf[1][in_row_group_ctr];
 800e78c:	684d      	ldr	r5, [r1, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 800e78e:	6889      	ldr	r1, [r1, #8]
  inptr1 = input_buf[1][in_row_group_ctr];
 800e790:	f855 8022 	ldr.w	r8, [r5, r2, lsl #2]
  inptr2 = input_buf[2][in_row_group_ctr];
 800e794:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  outptr0 = output_buf[0];
  outptr1 = output_buf[1];
  /* Loop for each group of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800e798:	6f01      	ldr	r1, [r0, #112]	; 0x70
  inptr2 = input_buf[2][in_row_group_ctr];
 800e79a:	9208      	str	r2, [sp, #32]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800e79c:	084f      	lsrs	r7, r1, #1
  outptr0 = output_buf[0];
 800e79e:	681a      	ldr	r2, [r3, #0]
 800e7a0:	eb08 0151 	add.w	r1, r8, r1, lsr #1
  outptr1 = output_buf[1];
 800e7a4:	685b      	ldr	r3, [r3, #4]
 800e7a6:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800e7aa:	9109      	str	r1, [sp, #36]	; 0x24
  inptr2 = input_buf[2][in_row_group_ctr];
 800e7ac:	9908      	ldr	r1, [sp, #32]
  outptr0 = output_buf[0];
 800e7ae:	9200      	str	r2, [sp, #0]
  outptr1 = output_buf[1];
 800e7b0:	9301      	str	r3, [sp, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 800e7b2:	9102      	str	r1, [sp, #8]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800e7b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e7b6:	3206      	adds	r2, #6
 800e7b8:	3306      	adds	r3, #6
 800e7ba:	f10e 0e02 	add.w	lr, lr, #2
 800e7be:	4588      	cmp	r8, r1
 800e7c0:	f10c 0c02 	add.w	ip, ip, #2
 800e7c4:	d13a      	bne.n	800e83c <h2v2_merged_upsample+0xe0>
 800e7c6:	2306      	movs	r3, #6
 800e7c8:	9a00      	ldr	r2, [sp, #0]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
    outptr1 += RGB_PIXELSIZE;
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
 800e7ca:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800e7cc:	437b      	muls	r3, r7
 800e7ce:	07c0      	lsls	r0, r0, #31
 800e7d0:	eb02 0103 	add.w	r1, r2, r3
 800e7d4:	9a01      	ldr	r2, [sp, #4]
 800e7d6:	441a      	add	r2, r3
 800e7d8:	d52d      	bpl.n	800e836 <h2v2_merged_upsample+0xda>
    cb = GETJSAMPLE(*inptr1);
    cr = GETJSAMPLE(*inptr2);
    cred = Crrtab[cr];
 800e7da:	9808      	ldr	r0, [sp, #32]
 800e7dc:	9d03      	ldr	r5, [sp, #12]
 800e7de:	5dc0      	ldrb	r0, [r0, r7]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800e7e0:	f898 6000 	ldrb.w	r6, [r8]
    cred = Crrtab[cr];
 800e7e4:	f855 e020 	ldr.w	lr, [r5, r0, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800e7e8:	9d05      	ldr	r5, [sp, #20]
 800e7ea:	f85a c026 	ldr.w	ip, [sl, r6, lsl #2]
 800e7ee:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
    cblue = Cbbtab[cb];
    y  = GETJSAMPLE(*inptr00);
    outptr0[RGB_RED] =   range_limit[y + cred];
 800e7f2:	eb0e 0504 	add.w	r5, lr, r4
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800e7f6:	4484      	add	ip, r0
    cblue = Cbbtab[cb];
 800e7f8:	9804      	ldr	r0, [sp, #16]
 800e7fa:	f850 6026 	ldr.w	r6, [r0, r6, lsl #2]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800e7fe:	eb04 4c2c 	add.w	ip, r4, ip, asr #16
    y  = GETJSAMPLE(*inptr00);
 800e802:	9806      	ldr	r0, [sp, #24]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800e804:	4434      	add	r4, r6
    y  = GETJSAMPLE(*inptr00);
 800e806:	f810 0017 	ldrb.w	r0, [r0, r7, lsl #1]
    outptr0[RGB_RED] =   range_limit[y + cred];
 800e80a:	f815 e000 	ldrb.w	lr, [r5, r0]
 800e80e:	f881 e002 	strb.w	lr, [r1, #2]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800e812:	f81c e000 	ldrb.w	lr, [ip, r0]
 800e816:	f881 e001 	strb.w	lr, [r1, #1]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800e81a:	5c21      	ldrb	r1, [r4, r0]
 800e81c:	9800      	ldr	r0, [sp, #0]
 800e81e:	54c1      	strb	r1, [r0, r3]
    y  = GETJSAMPLE(*inptr01);
 800e820:	9907      	ldr	r1, [sp, #28]
 800e822:	f811 1017 	ldrb.w	r1, [r1, r7, lsl #1]
    outptr1[RGB_RED] =   range_limit[y + cred];
 800e826:	5c68      	ldrb	r0, [r5, r1]
 800e828:	7090      	strb	r0, [r2, #2]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 800e82a:	f81c 0001 	ldrb.w	r0, [ip, r1]
 800e82e:	7050      	strb	r0, [r2, #1]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 800e830:	5c62      	ldrb	r2, [r4, r1]
 800e832:	9901      	ldr	r1, [sp, #4]
 800e834:	54ca      	strb	r2, [r1, r3]
  }
}
 800e836:	b00b      	add	sp, #44	; 0x2c
 800e838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cred = Crrtab[cr];
 800e83c:	9902      	ldr	r1, [sp, #8]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800e83e:	f818 5b01 	ldrb.w	r5, [r8], #1
    cred = Crrtab[cr];
 800e842:	f811 9b01 	ldrb.w	r9, [r1], #1
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800e846:	f85a 6025 	ldr.w	r6, [sl, r5, lsl #2]
    cred = Crrtab[cr];
 800e84a:	9102      	str	r1, [sp, #8]
 800e84c:	9903      	ldr	r1, [sp, #12]
 800e84e:	f851 b029 	ldr.w	fp, [r1, r9, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800e852:	9905      	ldr	r1, [sp, #20]
 800e854:	f851 1029 	ldr.w	r1, [r1, r9, lsl #2]
    y  = GETJSAMPLE(*inptr00++);
 800e858:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800e85c:	4431      	add	r1, r6
    cblue = Cbbtab[cb];
 800e85e:	9e04      	ldr	r6, [sp, #16]
 800e860:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    outptr0[RGB_RED] =   range_limit[y + cred];
 800e864:	eb0b 0604 	add.w	r6, fp, r4
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800e868:	eb04 4121 	add.w	r1, r4, r1, asr #16
    outptr0[RGB_RED] =   range_limit[y + cred];
 800e86c:	f816 b009 	ldrb.w	fp, [r6, r9]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800e870:	4425      	add	r5, r4
    outptr0[RGB_RED] =   range_limit[y + cred];
 800e872:	f802 bc04 	strb.w	fp, [r2, #-4]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800e876:	f811 b009 	ldrb.w	fp, [r1, r9]
 800e87a:	f802 bc05 	strb.w	fp, [r2, #-5]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800e87e:	f815 9009 	ldrb.w	r9, [r5, r9]
 800e882:	f802 9c06 	strb.w	r9, [r2, #-6]
    y  = GETJSAMPLE(*inptr00++);
 800e886:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
    outptr0[RGB_RED] =   range_limit[y + cred];
 800e88a:	f816 b009 	ldrb.w	fp, [r6, r9]
 800e88e:	f802 bc01 	strb.w	fp, [r2, #-1]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800e892:	f811 b009 	ldrb.w	fp, [r1, r9]
 800e896:	f802 bc02 	strb.w	fp, [r2, #-2]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800e89a:	f815 9009 	ldrb.w	r9, [r5, r9]
 800e89e:	f802 9c03 	strb.w	r9, [r2, #-3]
    y  = GETJSAMPLE(*inptr01++);
 800e8a2:	f81c 9c02 	ldrb.w	r9, [ip, #-2]
    outptr1[RGB_RED] =   range_limit[y + cred];
 800e8a6:	f816 b009 	ldrb.w	fp, [r6, r9]
 800e8aa:	f803 bc04 	strb.w	fp, [r3, #-4]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 800e8ae:	f811 b009 	ldrb.w	fp, [r1, r9]
 800e8b2:	f803 bc05 	strb.w	fp, [r3, #-5]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 800e8b6:	f815 9009 	ldrb.w	r9, [r5, r9]
 800e8ba:	f803 9c06 	strb.w	r9, [r3, #-6]
    y  = GETJSAMPLE(*inptr01++);
 800e8be:	f81c 9c01 	ldrb.w	r9, [ip, #-1]
    outptr1[RGB_RED] =   range_limit[y + cred];
 800e8c2:	f816 6009 	ldrb.w	r6, [r6, r9]
 800e8c6:	f803 6c01 	strb.w	r6, [r3, #-1]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 800e8ca:	f811 1009 	ldrb.w	r1, [r1, r9]
 800e8ce:	f803 1c02 	strb.w	r1, [r3, #-2]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 800e8d2:	f815 1009 	ldrb.w	r1, [r5, r9]
 800e8d6:	f803 1c03 	strb.w	r1, [r3, #-3]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800e8da:	e76b      	b.n	800e7b4 <h2v2_merged_upsample+0x58>

0800e8dc <merged_2v_upsample>:
{
 800e8dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800e8e0:	f8d0 41d8 	ldr.w	r4, [r0, #472]	; 0x1d8
{
 800e8e4:	4616      	mov	r6, r2
 800e8e6:	e9dd c80a 	ldrd	ip, r8, [sp, #40]	; 0x28
  if (upsample->spare_full) {
 800e8ea:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e8ec:	f8d8 3000 	ldr.w	r3, [r8]
 800e8f0:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 800e8f4:	b1dd      	cbz	r5, 800e92e <merged_2v_upsample+0x52>
    jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
 800e8f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e8f8:	2501      	movs	r5, #1
 800e8fa:	f104 0020 	add.w	r0, r4, #32
 800e8fe:	9301      	str	r3, [sp, #4]
 800e900:	2300      	movs	r3, #0
 800e902:	9500      	str	r5, [sp, #0]
 800e904:	4619      	mov	r1, r3
 800e906:	f007 fc2e 	bl	8016166 <jcopy_sample_rows>
    upsample->spare_full = FALSE;
 800e90a:	2300      	movs	r3, #0
 800e90c:	6263      	str	r3, [r4, #36]	; 0x24
  *out_row_ctr += num_rows;
 800e90e:	f8d8 3000 	ldr.w	r3, [r8]
 800e912:	442b      	add	r3, r5
 800e914:	f8c8 3000 	str.w	r3, [r8]
  upsample->rows_to_go -= num_rows;
 800e918:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e91a:	1b5d      	subs	r5, r3, r5
  if (! upsample->spare_full)
 800e91c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  upsample->rows_to_go -= num_rows;
 800e91e:	62e5      	str	r5, [r4, #44]	; 0x2c
  if (! upsample->spare_full)
 800e920:	b913      	cbnz	r3, 800e928 <merged_2v_upsample+0x4c>
    (*in_row_group_ctr)++;
 800e922:	6833      	ldr	r3, [r6, #0]
 800e924:	3301      	adds	r3, #1
 800e926:	6033      	str	r3, [r6, #0]
}
 800e928:	b004      	add	sp, #16
 800e92a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (num_rows > upsample->rows_to_go)
 800e92e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    out_rows_avail -= *out_row_ctr;
 800e930:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    num_rows = 2;
 800e932:	2f02      	cmp	r7, #2
    out_rows_avail -= *out_row_ctr;
 800e934:	eba5 0503 	sub.w	r5, r5, r3
    work_ptrs[0] = output_buf[*out_row_ctr];
 800e938:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
    num_rows = 2;
 800e93c:	bf28      	it	cs
 800e93e:	2702      	movcs	r7, #2
    work_ptrs[0] = output_buf[*out_row_ctr];
 800e940:	9302      	str	r3, [sp, #8]
 800e942:	42bd      	cmp	r5, r7
 800e944:	bf28      	it	cs
 800e946:	463d      	movcs	r5, r7
    (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
 800e948:	68e7      	ldr	r7, [r4, #12]
    if (num_rows > 1) {
 800e94a:	2d02      	cmp	r5, #2
      work_ptrs[1] = upsample->spare_row;
 800e94c:	bf17      	itett	ne
 800e94e:	6a23      	ldrne	r3, [r4, #32]
      work_ptrs[1] = output_buf[*out_row_ctr + 1];
 800e950:	6853      	ldreq	r3, [r2, #4]
      work_ptrs[1] = upsample->spare_row;
 800e952:	9303      	strne	r3, [sp, #12]
      upsample->spare_full = TRUE;
 800e954:	2301      	movne	r3, #1
      work_ptrs[1] = output_buf[*out_row_ctr + 1];
 800e956:	bf0c      	ite	eq
 800e958:	9303      	streq	r3, [sp, #12]
      upsample->spare_full = TRUE;
 800e95a:	6263      	strne	r3, [r4, #36]	; 0x24
    (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
 800e95c:	ab02      	add	r3, sp, #8
 800e95e:	6832      	ldr	r2, [r6, #0]
 800e960:	47b8      	blx	r7
 800e962:	e7d4      	b.n	800e90e <merged_2v_upsample+0x32>

0800e964 <jinit_merged_upsampler>:
jinit_merged_upsampler (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e964:	6843      	ldr	r3, [r0, #4]
 800e966:	2230      	movs	r2, #48	; 0x30
 800e968:	2101      	movs	r1, #1
 800e96a:	681b      	ldr	r3, [r3, #0]
{
 800e96c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e970:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e972:	4798      	blx	r3
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_merged_upsample;
 800e974:	4b37      	ldr	r3, [pc, #220]	; (800ea54 <jinit_merged_upsampler+0xf0>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e976:	4605      	mov	r5, r0
  upsample->pub.need_context_rows = FALSE;

  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 800e978:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800e97a:	6fa2      	ldr	r2, [r4, #120]	; 0x78
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
 800e97c:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 800e980:	434a      	muls	r2, r1

  if (cinfo->max_v_samp_factor == 2) {
 800e982:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
  upsample->pub.start_pass = start_pass_merged_upsample;
 800e986:	6003      	str	r3, [r0, #0]
  upsample->pub.need_context_rows = FALSE;
 800e988:	2300      	movs	r3, #0
  if (cinfo->max_v_samp_factor == 2) {
 800e98a:	2902      	cmp	r1, #2
  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 800e98c:	6282      	str	r2, [r0, #40]	; 0x28
  upsample->pub.need_context_rows = FALSE;
 800e98e:	6083      	str	r3, [r0, #8]
  if (cinfo->max_v_samp_factor == 2) {
 800e990:	d15a      	bne.n	800ea48 <jinit_merged_upsampler+0xe4>
    upsample->pub.upsample = merged_2v_upsample;
 800e992:	4b31      	ldr	r3, [pc, #196]	; (800ea58 <jinit_merged_upsampler+0xf4>)
    upsample->upmethod = h2v2_merged_upsample;
    /* Allocate a spare row buffer */
    upsample->spare_row = (JSAMPROW)
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e994:	2101      	movs	r1, #1
    upsample->pub.upsample = merged_2v_upsample;
 800e996:	6043      	str	r3, [r0, #4]
    upsample->upmethod = h2v2_merged_upsample;
 800e998:	4b30      	ldr	r3, [pc, #192]	; (800ea5c <jinit_merged_upsampler+0xf8>)
 800e99a:	60c3      	str	r3, [r0, #12]
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e99c:	4620      	mov	r0, r4
 800e99e:	6863      	ldr	r3, [r4, #4]
 800e9a0:	685b      	ldr	r3, [r3, #4]
 800e9a2:	4798      	blx	r3
    upsample->spare_row = (JSAMPROW)
 800e9a4:	6228      	str	r0, [r5, #32]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e9a6:	6863      	ldr	r3, [r4, #4]
 800e9a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e9ac:	2101      	movs	r1, #1
 800e9ae:	4620      	mov	r0, r4
 800e9b0:	681b      	ldr	r3, [r3, #0]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800e9b2:	f8d4 51d8 	ldr.w	r5, [r4, #472]	; 0x1d8
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e9b6:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e9b8:	6863      	ldr	r3, [r4, #4]
 800e9ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
  upsample->Cr_r_tab = (int *)
 800e9be:	6128      	str	r0, [r5, #16]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e9c0:	2101      	movs	r1, #1
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	4620      	mov	r0, r4
 800e9c6:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e9c8:	6863      	ldr	r3, [r4, #4]
  upsample->Cb_b_tab = (int *)
 800e9ca:	6168      	str	r0, [r5, #20]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e9cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	2101      	movs	r1, #1
 800e9d4:	4620      	mov	r0, r4
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800e9d6:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800ea74 <jinit_merged_upsampler+0x110>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e9da:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e9dc:	6863      	ldr	r3, [r4, #4]
  upsample->Cr_g_tab = (INT32 *)
 800e9de:	61a8      	str	r0, [r5, #24]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e9e0:	2101      	movs	r1, #1
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	4620      	mov	r0, r4
 800e9e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800e9ea:	4f1d      	ldr	r7, [pc, #116]	; (800ea60 <jinit_merged_upsampler+0xfc>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e9ec:	4798      	blx	r3
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800e9ee:	69ac      	ldr	r4, [r5, #24]
  upsample->Cb_g_tab = (INT32 *)
 800e9f0:	61e8      	str	r0, [r5, #28]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800e9f2:	2300      	movs	r3, #0
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800e9f4:	f8df e080 	ldr.w	lr, [pc, #128]	; 800ea78 <jinit_merged_upsampler+0x114>
    upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800e9f8:	491a      	ldr	r1, [pc, #104]	; (800ea64 <jinit_merged_upsampler+0x100>)
    upsample->Cb_b_tab[i] = (int)
 800e9fa:	e9d5 c604 	ldrd	ip, r6, [r5, #16]
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800e9fe:	4d1a      	ldr	r5, [pc, #104]	; (800ea68 <jinit_merged_upsampler+0x104>)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800ea00:	fb08 e203 	mla	r2, r8, r3, lr
 800ea04:	1412      	asrs	r2, r2, #16
    upsample->Cr_r_tab[i] = (int)
 800ea06:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800ea0a:	fb07 f203 	mul.w	r2, r7, r3
 800ea0e:	f5a2 0262 	sub.w	r2, r2, #14811136	; 0xe20000
 800ea12:	f5a2 42a2 	sub.w	r2, r2, #20736	; 0x5100
 800ea16:	1412      	asrs	r2, r2, #16
    upsample->Cb_b_tab[i] = (int)
 800ea18:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800ea1c:	fb05 f203 	mul.w	r2, r5, r3
 800ea20:	f502 02b6 	add.w	r2, r2, #5963776	; 0x5b0000
 800ea24:	f502 42d2 	add.w	r2, r2, #26880	; 0x6900
 800ea28:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800ea2c:	fb01 f203 	mul.w	r2, r1, r3
 800ea30:	f502 1232 	add.w	r2, r2, #2916352	; 0x2c8000
 800ea34:	f502 6250 	add.w	r2, r2, #3328	; 0xd00
 800ea38:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800ea3c:	3301      	adds	r3, #1
 800ea3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea42:	d1dd      	bne.n	800ea00 <jinit_merged_upsampler+0x9c>
    /* No spare row needed */
    upsample->spare_row = NULL;
  }

  build_ycc_rgb_table(cinfo);
}
 800ea44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    upsample->pub.upsample = merged_1v_upsample;
 800ea48:	4a08      	ldr	r2, [pc, #32]	; (800ea6c <jinit_merged_upsampler+0x108>)
    upsample->spare_row = NULL;
 800ea4a:	6203      	str	r3, [r0, #32]
    upsample->pub.upsample = merged_1v_upsample;
 800ea4c:	6042      	str	r2, [r0, #4]
    upsample->upmethod = h2v1_merged_upsample;
 800ea4e:	4a08      	ldr	r2, [pc, #32]	; (800ea70 <jinit_merged_upsampler+0x10c>)
 800ea50:	60c2      	str	r2, [r0, #12]
    upsample->spare_row = NULL;
 800ea52:	e7a8      	b.n	800e9a6 <jinit_merged_upsampler+0x42>
 800ea54:	0800e61d 	.word	0x0800e61d
 800ea58:	0800e8dd 	.word	0x0800e8dd
 800ea5c:	0800e75d 	.word	0x0800e75d
 800ea60:	0001c5a2 	.word	0x0001c5a2
 800ea64:	ffffa7e6 	.word	0xffffa7e6
 800ea68:	ffff492e 	.word	0xffff492e
 800ea6c:	0800e62b 	.word	0x0800e62b
 800ea70:	0800e651 	.word	0x0800e651
 800ea74:	000166e9 	.word	0x000166e9
 800ea78:	ff4d0b80 	.word	0xff4d0b80

0800ea7c <start_pass_dpost>:
METHODDEF(void)
start_pass_dpost (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
  my_post_ptr post = (my_post_ptr) cinfo->post;

  switch (pass_mode) {
 800ea7c:	2902      	cmp	r1, #2
{
 800ea7e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800ea80:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
  switch (pass_mode) {
 800ea84:	d023      	beq.n	800eace <start_pass_dpost+0x52>
 800ea86:	2903      	cmp	r1, #3
 800ea88:	d019      	beq.n	800eabe <start_pass_dpost+0x42>
 800ea8a:	2900      	cmp	r1, #0
 800ea8c:	d128      	bne.n	800eae0 <start_pass_dpost+0x64>
  case JBUF_PASS_THRU:
    if (cinfo->quantize_colors) {
 800ea8e:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800ea90:	b182      	cbz	r2, 800eab4 <start_pass_dpost+0x38>
      /* Single-pass processing with color quantization. */
      post->pub.post_process_data = post_process_1pass;
 800ea92:	4a16      	ldr	r2, [pc, #88]	; (800eaec <start_pass_dpost+0x70>)
 800ea94:	6062      	str	r2, [r4, #4]
      /* We could be doing buffered-image output before starting a 2-pass
       * color quantization; in that case, jinit_d_post_controller did not
       * allocate a strip buffer.  Use the virtual-array buffer as workspace.
       */
      if (post->buffer == NULL) {
 800ea96:	68e2      	ldr	r2, [r4, #12]
 800ea98:	b93a      	cbnz	r2, 800eaaa <start_pass_dpost+0x2e>
	post->buffer = (*cinfo->mem->access_virt_sarray)
 800ea9a:	6843      	ldr	r3, [r0, #4]
 800ea9c:	2101      	movs	r1, #1
 800ea9e:	9100      	str	r1, [sp, #0]
 800eaa0:	69dd      	ldr	r5, [r3, #28]
 800eaa2:	68a1      	ldr	r1, [r4, #8]
 800eaa4:	6923      	ldr	r3, [r4, #16]
 800eaa6:	47a8      	blx	r5
 800eaa8:	60e0      	str	r0, [r4, #12]
#endif /* QUANT_2PASS_SUPPORTED */
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    break;
  }
  post->starting_row = post->next_row = 0;
 800eaaa:	2300      	movs	r3, #0
 800eaac:	e9c4 3305 	strd	r3, r3, [r4, #20]
}
 800eab0:	b003      	add	sp, #12
 800eab2:	bd30      	pop	{r4, r5, pc}
      post->pub.post_process_data = cinfo->upsample->upsample;
 800eab4:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
 800eab8:	685b      	ldr	r3, [r3, #4]
    post->pub.post_process_data = post_process_prepass;
 800eaba:	6063      	str	r3, [r4, #4]
    break;
 800eabc:	e7f5      	b.n	800eaaa <start_pass_dpost+0x2e>
    if (post->whole_image == NULL)
 800eabe:	68a2      	ldr	r2, [r4, #8]
 800eac0:	b91a      	cbnz	r2, 800eaca <start_pass_dpost+0x4e>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800eac2:	6803      	ldr	r3, [r0, #0]
 800eac4:	6159      	str	r1, [r3, #20]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	4798      	blx	r3
    post->pub.post_process_data = post_process_prepass;
 800eaca:	4b09      	ldr	r3, [pc, #36]	; (800eaf0 <start_pass_dpost+0x74>)
 800eacc:	e7f5      	b.n	800eaba <start_pass_dpost+0x3e>
    if (post->whole_image == NULL)
 800eace:	68a2      	ldr	r2, [r4, #8]
 800ead0:	b922      	cbnz	r2, 800eadc <start_pass_dpost+0x60>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800ead2:	6803      	ldr	r3, [r0, #0]
 800ead4:	2203      	movs	r2, #3
 800ead6:	615a      	str	r2, [r3, #20]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	4798      	blx	r3
    post->pub.post_process_data = post_process_2pass;
 800eadc:	4b05      	ldr	r3, [pc, #20]	; (800eaf4 <start_pass_dpost+0x78>)
 800eade:	e7ec      	b.n	800eaba <start_pass_dpost+0x3e>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800eae0:	6803      	ldr	r3, [r0, #0]
 800eae2:	2203      	movs	r2, #3
 800eae4:	615a      	str	r2, [r3, #20]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	4798      	blx	r3
    break;
 800eaea:	e7de      	b.n	800eaaa <start_pass_dpost+0x2e>
 800eaec:	0800eaf9 	.word	0x0800eaf9
 800eaf0:	0800eb59 	.word	0x0800eb59
 800eaf4:	0800ebe7 	.word	0x0800ebe7

0800eaf8 <post_process_1pass>:
post_process_1pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
 800eaf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eafc:	b088      	sub	sp, #32
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800eafe:	f8d0 81c4 	ldr.w	r8, [r0, #452]	; 0x1c4
{
 800eb02:	4604      	mov	r4, r0
 800eb04:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  JDIMENSION num_rows, max_rows;

  /* Fill the buffer, but not more than what we can dump out in one go. */
  /* Note we rely on the upsampler to detect bottom of image. */
  max_rows = out_rows_avail - *out_row_ctr;
 800eb06:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800eb08:	682f      	ldr	r7, [r5, #0]
 800eb0a:	1bf6      	subs	r6, r6, r7
  if (max_rows > post->strip_height)
    max_rows = post->strip_height;
  num_rows = 0;
 800eb0c:	2700      	movs	r7, #0
 800eb0e:	9707      	str	r7, [sp, #28]
  (*cinfo->upsample->upsample) (cinfo,
 800eb10:	f8d0 71d8 	ldr.w	r7, [r0, #472]	; 0x1d8
 800eb14:	9705      	str	r7, [sp, #20]
 800eb16:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800eb1a:	42be      	cmp	r6, r7
 800eb1c:	bf94      	ite	ls
 800eb1e:	9602      	strls	r6, [sp, #8]
 800eb20:	9702      	strhi	r7, [sp, #8]
 800eb22:	ae07      	add	r6, sp, #28
 800eb24:	9601      	str	r6, [sp, #4]
 800eb26:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800eb2a:	9600      	str	r6, [sp, #0]
 800eb2c:	9e05      	ldr	r6, [sp, #20]
 800eb2e:	6876      	ldr	r6, [r6, #4]
 800eb30:	47b0      	blx	r6
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &num_rows, max_rows);
  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
		post->buffer, output_buf + *out_row_ctr, (int) num_rows);
 800eb32:	6829      	ldr	r1, [r5, #0]
  (*cinfo->cquantize->color_quantize) (cinfo,
 800eb34:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800eb38:	4620      	mov	r0, r4
 800eb3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eb3c:	685e      	ldr	r6, [r3, #4]
 800eb3e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800eb42:	9b07      	ldr	r3, [sp, #28]
 800eb44:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800eb48:	47b0      	blx	r6
  *out_row_ctr += num_rows;
 800eb4a:	682b      	ldr	r3, [r5, #0]
 800eb4c:	9a07      	ldr	r2, [sp, #28]
 800eb4e:	4413      	add	r3, r2
 800eb50:	602b      	str	r3, [r5, #0]
}
 800eb52:	b008      	add	sp, #32
 800eb54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800eb58 <post_process_prepass>:
post_process_prepass (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		      JDIMENSION in_row_groups_avail,
		      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		      JDIMENSION out_rows_avail)
{
 800eb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800eb5c:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
{
 800eb60:	b085      	sub	sp, #20
 800eb62:	469a      	mov	sl, r3
 800eb64:	4605      	mov	r5, r0
  JDIMENSION old_next_row, num_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
 800eb66:	69a3      	ldr	r3, [r4, #24]
{
 800eb68:	460e      	mov	r6, r1
 800eb6a:	4691      	mov	r9, r2
 800eb6c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
  if (post->next_row == 0) {
 800eb70:	b943      	cbnz	r3, 800eb84 <post_process_prepass+0x2c>
    post->buffer = (*cinfo->mem->access_virt_sarray)
 800eb72:	6843      	ldr	r3, [r0, #4]
 800eb74:	2201      	movs	r2, #1
 800eb76:	9200      	str	r2, [sp, #0]
 800eb78:	69df      	ldr	r7, [r3, #28]
 800eb7a:	68a1      	ldr	r1, [r4, #8]
 800eb7c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800eb80:	47b8      	blx	r7
 800eb82:	60e0      	str	r0, [r4, #12]
	 post->starting_row, post->strip_height, TRUE);
  }

  /* Upsample some data (up to a strip height's worth). */
  old_next_row = post->next_row;
  (*cinfo->upsample->upsample) (cinfo,
 800eb84:	6922      	ldr	r2, [r4, #16]
 800eb86:	4631      	mov	r1, r6
  old_next_row = post->next_row;
 800eb88:	69a7      	ldr	r7, [r4, #24]
  (*cinfo->upsample->upsample) (cinfo,
 800eb8a:	4628      	mov	r0, r5
 800eb8c:	9202      	str	r2, [sp, #8]
 800eb8e:	f104 0218 	add.w	r2, r4, #24
 800eb92:	f8d5 31d8 	ldr.w	r3, [r5, #472]	; 0x1d8
 800eb96:	9201      	str	r2, [sp, #4]
 800eb98:	68e2      	ldr	r2, [r4, #12]
 800eb9a:	9200      	str	r2, [sp, #0]
 800eb9c:	464a      	mov	r2, r9
 800eb9e:	f8d3 b004 	ldr.w	fp, [r3, #4]
 800eba2:	4653      	mov	r3, sl
 800eba4:	47d8      	blx	fp
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &post->next_row, post->strip_height);

  /* Allow quantizer to scan new data.  No data is emitted, */
  /* but we advance out_row_ctr so outer loop can tell when we're done. */
  if (post->next_row > old_next_row) {
 800eba6:	69a6      	ldr	r6, [r4, #24]
 800eba8:	42be      	cmp	r6, r7
 800ebaa:	d910      	bls.n	800ebce <post_process_prepass+0x76>
    num_rows = post->next_row - old_next_row;
    (*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
 800ebac:	f8d5 31e0 	ldr.w	r3, [r5, #480]	; 0x1e0
    num_rows = post->next_row - old_next_row;
 800ebb0:	1bf6      	subs	r6, r6, r7
    (*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
 800ebb2:	68e1      	ldr	r1, [r4, #12]
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800ebba:	4628      	mov	r0, r5
 800ebbc:	4633      	mov	r3, r6
 800ebbe:	eb01 0187 	add.w	r1, r1, r7, lsl #2
 800ebc2:	47c8      	blx	r9
					 (JSAMPARRAY) NULL, (int) num_rows);
    *out_row_ctr += num_rows;
 800ebc4:	f8d8 3000 	ldr.w	r3, [r8]
 800ebc8:	4433      	add	r3, r6
 800ebca:	f8c8 3000 	str.w	r3, [r8]
  }

  /* Advance if we filled the strip. */
  if (post->next_row >= post->strip_height) {
 800ebce:	6922      	ldr	r2, [r4, #16]
 800ebd0:	69a3      	ldr	r3, [r4, #24]
 800ebd2:	4293      	cmp	r3, r2
 800ebd4:	d304      	bcc.n	800ebe0 <post_process_prepass+0x88>
    post->starting_row += post->strip_height;
 800ebd6:	6963      	ldr	r3, [r4, #20]
 800ebd8:	4413      	add	r3, r2
 800ebda:	6163      	str	r3, [r4, #20]
    post->next_row = 0;
 800ebdc:	2300      	movs	r3, #0
 800ebde:	61a3      	str	r3, [r4, #24]
  }
}
 800ebe0:	b005      	add	sp, #20
 800ebe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ebe6 <post_process_2pass>:
post_process_2pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
 800ebe6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800ebea:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
{
 800ebee:	4607      	mov	r7, r0
 800ebf0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  JDIMENSION num_rows, max_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
 800ebf2:	69a3      	ldr	r3, [r4, #24]
 800ebf4:	b93b      	cbnz	r3, 800ec06 <post_process_2pass+0x20>
    post->buffer = (*cinfo->mem->access_virt_sarray)
 800ebf6:	6842      	ldr	r2, [r0, #4]
 800ebf8:	9300      	str	r3, [sp, #0]
 800ebfa:	69d5      	ldr	r5, [r2, #28]
 800ebfc:	68a1      	ldr	r1, [r4, #8]
 800ebfe:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800ec02:	47a8      	blx	r5
 800ec04:	60e0      	str	r0, [r4, #12]
  num_rows = post->strip_height - post->next_row; /* available in strip */
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
  if (num_rows > max_rows)
    num_rows = max_rows;
  /* We have to check bottom of image here, can't depend on upsampler. */
  max_rows = cinfo->output_height - post->starting_row;
 800ec06:	6963      	ldr	r3, [r4, #20]
 800ec08:	6f7d      	ldr	r5, [r7, #116]	; 0x74
  num_rows = post->strip_height - post->next_row; /* available in strip */
 800ec0a:	69a1      	ldr	r1, [r4, #24]
  max_rows = cinfo->output_height - post->starting_row;
 800ec0c:	1aed      	subs	r5, r5, r3
  num_rows = post->strip_height - post->next_row; /* available in strip */
 800ec0e:	6923      	ldr	r3, [r4, #16]
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
 800ec10:	6832      	ldr	r2, [r6, #0]
  num_rows = post->strip_height - post->next_row; /* available in strip */
 800ec12:	1a5b      	subs	r3, r3, r1
  if (num_rows > max_rows)
    num_rows = max_rows;

  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
 800ec14:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ec16:	429d      	cmp	r5, r3
 800ec18:	bf28      	it	cs
 800ec1a:	461d      	movcs	r5, r3
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
 800ec1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ec1e:	1a9b      	subs	r3, r3, r2
  (*cinfo->cquantize->color_quantize) (cinfo,
 800ec20:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ec24:	429d      	cmp	r5, r3
 800ec26:	bf28      	it	cs
 800ec28:	461d      	movcs	r5, r3
 800ec2a:	68e3      	ldr	r3, [r4, #12]
 800ec2c:	9303      	str	r3, [sp, #12]
 800ec2e:	9803      	ldr	r0, [sp, #12]
 800ec30:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800ec34:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ec38:	4638      	mov	r0, r7
 800ec3a:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800ec3e:	462b      	mov	r3, r5
 800ec40:	47c0      	blx	r8
		post->buffer + post->next_row, output_buf + *out_row_ctr,
		(int) num_rows);
  *out_row_ctr += num_rows;
 800ec42:	6833      	ldr	r3, [r6, #0]
 800ec44:	442b      	add	r3, r5
 800ec46:	6033      	str	r3, [r6, #0]

  /* Advance if we filled the strip. */
  post->next_row += num_rows;
 800ec48:	69a3      	ldr	r3, [r4, #24]
  if (post->next_row >= post->strip_height) {
 800ec4a:	6922      	ldr	r2, [r4, #16]
  post->next_row += num_rows;
 800ec4c:	441d      	add	r5, r3
  if (post->next_row >= post->strip_height) {
 800ec4e:	4295      	cmp	r5, r2
  post->next_row += num_rows;
 800ec50:	61a5      	str	r5, [r4, #24]
  if (post->next_row >= post->strip_height) {
 800ec52:	d304      	bcc.n	800ec5e <post_process_2pass+0x78>
    post->starting_row += post->strip_height;
 800ec54:	6963      	ldr	r3, [r4, #20]
 800ec56:	4413      	add	r3, r2
 800ec58:	6163      	str	r3, [r4, #20]
    post->next_row = 0;
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	61a3      	str	r3, [r4, #24]
  }
}
 800ec5e:	b004      	add	sp, #16
 800ec60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ec64 <jinit_d_post_controller>:
jinit_d_post_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_post_ptr post;

  post = (my_post_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ec64:	6843      	ldr	r3, [r0, #4]
 800ec66:	221c      	movs	r2, #28
{
 800ec68:	b5f0      	push	{r4, r5, r6, r7, lr}
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ec6a:	681b      	ldr	r3, [r3, #0]
{
 800ec6c:	b085      	sub	sp, #20
 800ec6e:	460f      	mov	r7, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ec70:	2101      	movs	r1, #1
{
 800ec72:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ec74:	4798      	blx	r3
				SIZEOF(my_post_controller));
  cinfo->post = (struct jpeg_d_post_controller *) post;
  post->pub.start_pass = start_pass_dpost;
 800ec76:	4b15      	ldr	r3, [pc, #84]	; (800eccc <jinit_d_post_controller+0x68>)
  post->whole_image = NULL;	/* flag for no virtual arrays */
 800ec78:	2600      	movs	r6, #0
  cinfo->post = (struct jpeg_d_post_controller *) post;
 800ec7a:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ec7e:	4605      	mov	r5, r0
  post->pub.start_pass = start_pass_dpost;
 800ec80:	6003      	str	r3, [r0, #0]
  post->buffer = NULL;		/* flag for no strip buffer */

  /* Create the quantization buffer, if needed */
  if (cinfo->quantize_colors) {
 800ec82:	6d63      	ldr	r3, [r4, #84]	; 0x54
  post->buffer = NULL;		/* flag for no strip buffer */
 800ec84:	e9c0 6602 	strd	r6, r6, [r0, #8]
  if (cinfo->quantize_colors) {
 800ec88:	b1bb      	cbz	r3, 800ecba <jinit_d_post_controller+0x56>
    /* The buffer strip height is max_v_samp_factor, which is typically
     * an efficient number of rows for upsampling to return.
     * (In the presence of output rescaling, we might want to be smarter?)
     */
    post->strip_height = (JDIMENSION) cinfo->max_v_samp_factor;
 800ec8a:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 800ec8e:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800ec90:	6103      	str	r3, [r0, #16]
    if (need_full_buffer) {
 800ec92:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800ec94:	6861      	ldr	r1, [r4, #4]
 800ec96:	4342      	muls	r2, r0
 800ec98:	b18f      	cbz	r7, 800ecbe <jinit_d_post_controller+0x5a>
      /* Two-pass color quantization: need full-image storage. */
      /* We round up the number of rows to a multiple of the strip height. */
#ifdef QUANT_2PASS_SUPPORTED
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800ec9a:	690f      	ldr	r7, [r1, #16]
	((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
	 cinfo->output_width * cinfo->out_color_components,
	 (JDIMENSION) jround_up((long) cinfo->output_height,
 800ec9c:	4619      	mov	r1, r3
 800ec9e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800eca0:	9203      	str	r2, [sp, #12]
 800eca2:	f007 fa58 	bl	8016156 <jround_up>
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800eca6:	692b      	ldr	r3, [r5, #16]
 800eca8:	2101      	movs	r1, #1
 800ecaa:	9a03      	ldr	r2, [sp, #12]
 800ecac:	e9cd 0300 	strd	r0, r3, [sp]
 800ecb0:	4613      	mov	r3, r2
 800ecb2:	4620      	mov	r0, r4
 800ecb4:	4632      	mov	r2, r6
 800ecb6:	47b8      	blx	r7
 800ecb8:	60a8      	str	r0, [r5, #8]
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 cinfo->output_width * cinfo->out_color_components,
	 post->strip_height);
    }
  }
}
 800ecba:	b005      	add	sp, #20
 800ecbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      post->buffer = (*cinfo->mem->alloc_sarray)
 800ecbe:	688e      	ldr	r6, [r1, #8]
 800ecc0:	4620      	mov	r0, r4
 800ecc2:	2101      	movs	r1, #1
 800ecc4:	47b0      	blx	r6
 800ecc6:	60e8      	str	r0, [r5, #12]
}
 800ecc8:	e7f7      	b.n	800ecba <jinit_d_post_controller+0x56>
 800ecca:	bf00      	nop
 800eccc:	0800ea7d 	.word	0x0800ea7d

0800ecd0 <start_pass_upsample>:
start_pass_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Mark the conversion buffer empty */
  upsample->next_row_out = cinfo->max_v_samp_factor;
 800ecd0:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800ecd4:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
  upsample->next_row_out = cinfo->max_v_samp_factor;
 800ecd8:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
 800ecda:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800ecdc:	661a      	str	r2, [r3, #96]	; 0x60
}
 800ecde:	4770      	bx	lr

0800ece0 <sep_upsample>:
sep_upsample (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
	      JDIMENSION in_row_groups_avail,
	      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
	      JDIMENSION out_rows_avail)
{
 800ece0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ece4:	b085      	sub	sp, #20
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800ece6:	f8d0 41d8 	ldr.w	r4, [r0, #472]	; 0x1d8
{
 800ecea:	4615      	mov	r5, r2
 800ecec:	4683      	mov	fp, r0
 800ecee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ecf0:	4688      	mov	r8, r1
  int ci;
  jpeg_component_info * compptr;
  JDIMENSION num_rows;

  /* Fill the conversion buffer, if it's empty */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 800ecf2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
{
 800ecf4:	9302      	str	r3, [sp, #8]
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 800ecf6:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
 800ecfa:	429a      	cmp	r2, r3
 800ecfc:	db10      	blt.n	800ed20 <sep_upsample+0x40>
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ecfe:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 800ed02:	2600      	movs	r6, #0
 800ed04:	f04f 0a58 	mov.w	sl, #88	; 0x58
 800ed08:	9303      	str	r3, [sp, #12]
 800ed0a:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800ed0e:	9a03      	ldr	r2, [sp, #12]
 800ed10:	fb0a 2106 	mla	r1, sl, r6, r2
 800ed14:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
 800ed18:	42b2      	cmp	r2, r6
 800ed1a:	dc32      	bgt.n	800ed82 <sep_upsample+0xa2>
       */
      (*upsample->methods[ci]) (cinfo, compptr,
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
	upsample->color_buf + ci);
    }
    upsample->next_row_out = 0;
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	65e3      	str	r3, [r4, #92]	; 0x5c
   * in case the image height is not a multiple of max_v_samp_factor:
   */
  if (num_rows > upsample->rows_to_go) 
    num_rows = upsample->rows_to_go;
  /* And not more than what the client can accept: */
  out_rows_avail -= *out_row_ctr;
 800ed20:	9b02      	ldr	r3, [sp, #8]
  if (num_rows > out_rows_avail)
    num_rows = out_rows_avail;

  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 800ed22:	4658      	mov	r0, fp
  num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
 800ed24:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800ed26:	f8db 613c 	ldr.w	r6, [fp, #316]	; 0x13c
  out_rows_avail -= *out_row_ctr;
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	9910      	ldr	r1, [sp, #64]	; 0x40
  num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
 800ed2e:	eba6 0c02 	sub.w	ip, r6, r2
  out_rows_avail -= *out_row_ctr;
 800ed32:	1ace      	subs	r6, r1, r3
 800ed34:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800ed36:	428e      	cmp	r6, r1
 800ed38:	bf28      	it	cs
 800ed3a:	460e      	movcs	r6, r1
  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 800ed3c:	f8db 11dc 	ldr.w	r1, [fp, #476]	; 0x1dc
 800ed40:	4566      	cmp	r6, ip
 800ed42:	bf28      	it	cs
 800ed44:	4666      	movcs	r6, ip
 800ed46:	9600      	str	r6, [sp, #0]
 800ed48:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800ed4c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ed4e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ed52:	f104 010c 	add.w	r1, r4, #12
 800ed56:	47c0      	blx	r8
				     (JDIMENSION) upsample->next_row_out,
				     output_buf + *out_row_ctr,
				     (int) num_rows);

  /* Adjust counts */
  *out_row_ctr += num_rows;
 800ed58:	9b02      	ldr	r3, [sp, #8]
 800ed5a:	9a02      	ldr	r2, [sp, #8]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	4433      	add	r3, r6
 800ed60:	6013      	str	r3, [r2, #0]
  upsample->rows_to_go -= num_rows;
 800ed62:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800ed64:	1b9b      	subs	r3, r3, r6
 800ed66:	6623      	str	r3, [r4, #96]	; 0x60
  upsample->next_row_out += num_rows;
 800ed68:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800ed6a:	441e      	add	r6, r3
  /* When the buffer is emptied, declare this input row group consumed */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor)
 800ed6c:	f8db 313c 	ldr.w	r3, [fp, #316]	; 0x13c
 800ed70:	429e      	cmp	r6, r3
  upsample->next_row_out += num_rows;
 800ed72:	65e6      	str	r6, [r4, #92]	; 0x5c
    (*in_row_group_ctr)++;
 800ed74:	bfa2      	ittt	ge
 800ed76:	682b      	ldrge	r3, [r5, #0]
 800ed78:	3301      	addge	r3, #1
 800ed7a:	602b      	strge	r3, [r5, #0]
}
 800ed7c:	b005      	add	sp, #20
 800ed7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
 800ed82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed84:	f103 0904 	add.w	r9, r3, #4
 800ed88:	6828      	ldr	r0, [r5, #0]
 800ed8a:	4342      	muls	r2, r0
      (*upsample->methods[ci]) (cinfo, compptr,
 800ed8c:	f853 0928 	ldr.w	r0, [r3], #-40
 800ed90:	4607      	mov	r7, r0
 800ed92:	f858 0026 	ldr.w	r0, [r8, r6, lsl #2]
	 ci++, compptr++) {
 800ed96:	3601      	adds	r6, #1
      (*upsample->methods[ci]) (cinfo, compptr,
 800ed98:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ed9c:	4658      	mov	r0, fp
 800ed9e:	47b8      	blx	r7
	 ci++, compptr++) {
 800eda0:	464b      	mov	r3, r9
 800eda2:	e7b4      	b.n	800ed0e <sep_upsample+0x2e>

0800eda4 <fullsize_upsample>:

METHODDEF(void)
fullsize_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		   JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = input_data;
 800eda4:	601a      	str	r2, [r3, #0]
}
 800eda6:	4770      	bx	lr

0800eda8 <noop_upsample>:

METHODDEF(void)
noop_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = NULL;	/* safety check */
 800eda8:	2200      	movs	r2, #0
 800edaa:	601a      	str	r2, [r3, #0]
}
 800edac:	4770      	bx	lr

0800edae <h2v1_upsample>:
 */

METHODDEF(void)
h2v1_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 800edae:	b5f0      	push	{r4, r5, r6, r7, lr}
  JSAMPARRAY output_data = *output_data_ptr;
 800edb0:	681f      	ldr	r7, [r3, #0]
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int outrow;

  for (outrow = 0; outrow < cinfo->max_v_samp_factor; outrow++) {
 800edb2:	2300      	movs	r3, #0
 800edb4:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
 800edb8:	4299      	cmp	r1, r3
 800edba:	dc00      	bgt.n	800edbe <h2v1_upsample+0x10>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      *outptr++ = invalue;
      *outptr++ = invalue;
    }
  }
}
 800edbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    outptr = output_data[outrow];
 800edbe:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
    outend = outptr + cinfo->output_width;
 800edc2:	6f04      	ldr	r4, [r0, #112]	; 0x70
    inptr = input_data[outrow];
 800edc4:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    outend = outptr + cinfo->output_width;
 800edc8:	440c      	add	r4, r1
    while (outptr < outend) {
 800edca:	42a1      	cmp	r1, r4
 800edcc:	d301      	bcc.n	800edd2 <h2v1_upsample+0x24>
  for (outrow = 0; outrow < cinfo->max_v_samp_factor; outrow++) {
 800edce:	3301      	adds	r3, #1
 800edd0:	e7f0      	b.n	800edb4 <h2v1_upsample+0x6>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 800edd2:	f815 6b01 	ldrb.w	r6, [r5], #1
      *outptr++ = invalue;
 800edd6:	f801 6b02 	strb.w	r6, [r1], #2
      *outptr++ = invalue;
 800edda:	f801 6c01 	strb.w	r6, [r1, #-1]
 800edde:	e7f4      	b.n	800edca <h2v1_upsample+0x1c>

0800ede0 <int_upsample>:
{
 800ede0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800ede4:	f8d0 41d8 	ldr.w	r4, [r0, #472]	; 0x1d8
{
 800ede8:	4605      	mov	r5, r0
  JSAMPARRAY output_data = *output_data_ptr;
 800edea:	6818      	ldr	r0, [r3, #0]
  h_expand = upsample->h_expand[compptr->component_index];
 800edec:	1f16      	subs	r6, r2, #4
 800edee:	684b      	ldr	r3, [r1, #4]
 800edf0:	4423      	add	r3, r4
  inrow = outrow = 0;
 800edf2:	2400      	movs	r4, #0
  v_expand = upsample->v_expand[compptr->component_index];
 800edf4:	f893 8096 	ldrb.w	r8, [r3, #150]	; 0x96
  h_expand = upsample->h_expand[compptr->component_index];
 800edf8:	f893 708c 	ldrb.w	r7, [r3, #140]	; 0x8c
      jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800edfc:	f108 39ff 	add.w	r9, r8, #4294967295
  while (outrow < cinfo->max_v_samp_factor) {
 800ee00:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
 800ee04:	42a3      	cmp	r3, r4
 800ee06:	dc02      	bgt.n	800ee0e <int_upsample+0x2e>
}
 800ee08:	b004      	add	sp, #16
 800ee0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    outptr = output_data[outrow];
 800ee0e:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
    outend = outptr + cinfo->output_width;
 800ee12:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    inptr = input_data[inrow];
 800ee14:	f856 ef04 	ldr.w	lr, [r6, #4]!
    outend = outptr + cinfo->output_width;
 800ee18:	19d9      	adds	r1, r3, r7
 800ee1a:	441a      	add	r2, r3
    while (outptr < outend) {
 800ee1c:	4293      	cmp	r3, r2
 800ee1e:	d30e      	bcc.n	800ee3e <int_upsample+0x5e>
    if (v_expand > 1) {
 800ee20:	f1b8 0f01 	cmp.w	r8, #1
 800ee24:	dd09      	ble.n	800ee3a <int_upsample+0x5a>
      jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800ee26:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800ee28:	4602      	mov	r2, r0
 800ee2a:	4621      	mov	r1, r4
 800ee2c:	9003      	str	r0, [sp, #12]
 800ee2e:	e9cd 9300 	strd	r9, r3, [sp]
 800ee32:	1c63      	adds	r3, r4, #1
 800ee34:	f007 f997 	bl	8016166 <jcopy_sample_rows>
 800ee38:	9803      	ldr	r0, [sp, #12]
    outrow += v_expand;
 800ee3a:	4444      	add	r4, r8
 800ee3c:	e7e0      	b.n	800ee00 <int_upsample+0x20>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 800ee3e:	f81e ab01 	ldrb.w	sl, [lr], #1
      for (h = h_expand; h > 0; h--) {
 800ee42:	469c      	mov	ip, r3
 800ee44:	458c      	cmp	ip, r1
 800ee46:	d102      	bne.n	800ee4e <int_upsample+0x6e>
 800ee48:	443b      	add	r3, r7
 800ee4a:	4439      	add	r1, r7
 800ee4c:	e7e6      	b.n	800ee1c <int_upsample+0x3c>
	*outptr++ = invalue;
 800ee4e:	f80c ab01 	strb.w	sl, [ip], #1
      for (h = h_expand; h > 0; h--) {
 800ee52:	e7f7      	b.n	800ee44 <int_upsample+0x64>

0800ee54 <h2v2_upsample>:
 */

METHODDEF(void)
h2v2_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 800ee54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ee58:	4605      	mov	r5, r0
 800ee5a:	4617      	mov	r7, r2
  JSAMPARRAY output_data = *output_data_ptr;
 800ee5c:	681e      	ldr	r6, [r3, #0]
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int inrow, outrow;

  inrow = outrow = 0;
 800ee5e:	2400      	movs	r4, #0
    while (outptr < outend) {
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      *outptr++ = invalue;
      *outptr++ = invalue;
    }
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800ee60:	f04f 0801 	mov.w	r8, #1
  while (outrow < cinfo->max_v_samp_factor) {
 800ee64:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
 800ee68:	42a3      	cmp	r3, r4
 800ee6a:	dc02      	bgt.n	800ee72 <h2v2_upsample+0x1e>
		      1, cinfo->output_width);
    inrow++;
    outrow += 2;
  }
}
 800ee6c:	b002      	add	sp, #8
 800ee6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    outptr = output_data[outrow];
 800ee72:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
    outend = outptr + cinfo->output_width;
 800ee76:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    inptr = input_data[inrow];
 800ee78:	f857 1014 	ldr.w	r1, [r7, r4, lsl #1]
    outend = outptr + cinfo->output_width;
 800ee7c:	441a      	add	r2, r3
    while (outptr < outend) {
 800ee7e:	4293      	cmp	r3, r2
 800ee80:	d30a      	bcc.n	800ee98 <h2v2_upsample+0x44>
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800ee82:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800ee84:	4621      	mov	r1, r4
 800ee86:	4632      	mov	r2, r6
 800ee88:	4630      	mov	r0, r6
 800ee8a:	e9cd 8300 	strd	r8, r3, [sp]
 800ee8e:	1c63      	adds	r3, r4, #1
    outrow += 2;
 800ee90:	3402      	adds	r4, #2
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800ee92:	f007 f968 	bl	8016166 <jcopy_sample_rows>
    outrow += 2;
 800ee96:	e7e5      	b.n	800ee64 <h2v2_upsample+0x10>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 800ee98:	f811 0b01 	ldrb.w	r0, [r1], #1
      *outptr++ = invalue;
 800ee9c:	f803 0b02 	strb.w	r0, [r3], #2
      *outptr++ = invalue;
 800eea0:	f803 0c01 	strb.w	r0, [r3, #-1]
 800eea4:	e7eb      	b.n	800ee7e <h2v2_upsample+0x2a>
	...

0800eea8 <jinit_upsampler>:
 * Module initialization routine for upsampling.
 */

GLOBAL(void)
jinit_upsampler (j_decompress_ptr cinfo)
{
 800eea8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  jpeg_component_info * compptr;
  boolean need_buffer;
  int h_in_group, v_in_group, h_out_group, v_out_group;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800eeac:	6843      	ldr	r3, [r0, #4]
 800eeae:	22a0      	movs	r2, #160	; 0xa0
 800eeb0:	2101      	movs	r1, #1
{
 800eeb2:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	4798      	blx	r3
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_upsample;
 800eeb8:	4b3f      	ldr	r3, [pc, #252]	; (800efb8 <jinit_upsampler+0x110>)
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
 800eeba:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800eebe:	4605      	mov	r5, r0
  upsample->pub.start_pass = start_pass_upsample;
 800eec0:	6003      	str	r3, [r0, #0]
  upsample->pub.upsample = sep_upsample;
 800eec2:	4b3e      	ldr	r3, [pc, #248]	; (800efbc <jinit_upsampler+0x114>)
 800eec4:	6043      	str	r3, [r0, #4]
  upsample->pub.need_context_rows = FALSE; /* until we find out differently */
 800eec6:	2300      	movs	r3, #0
 800eec8:	6083      	str	r3, [r0, #8]

  if (cinfo->CCIR601_sampling)	/* this isn't supported */
 800eeca:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800eece:	b12b      	cbz	r3, 800eedc <jinit_upsampler+0x34>
    ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);
 800eed0:	6823      	ldr	r3, [r4, #0]
 800eed2:	221a      	movs	r2, #26
 800eed4:	4620      	mov	r0, r4
 800eed6:	615a      	str	r2, [r3, #20]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	4798      	blx	r3

  /* Verify we can handle the sampling factors, select per-component methods,
   * and create storage as needed.
   */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800eedc:	f105 060c 	add.w	r6, r5, #12
 800eee0:	f105 088c 	add.w	r8, r5, #140	; 0x8c
 800eee4:	f1c5 25ff 	rsb	r5, r5, #4278255360	; 0xff00ff00
 800eee8:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
      /* Special case for 2h2v upsampling */
      upsample->methods[ci] = h2v2_upsample;
    } else if ((h_out_group % h_in_group) == 0 &&
	       (v_out_group % v_in_group) == 0) {
      /* Generic integral-factors upsampling method */
      upsample->methods[ci] = int_upsample;
 800eeec:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 800efcc <jinit_upsampler+0x124>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800eef0:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
      upsample->methods[ci] = h2v2_upsample;
 800eef4:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800efd0 <jinit_upsampler+0x128>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800eef8:	3574      	adds	r5, #116	; 0x74
 800eefa:	eb05 0308 	add.w	r3, r5, r8
 800eefe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ef00:	429a      	cmp	r2, r3
 800ef02:	dc01      	bgt.n	800ef08 <jinit_upsampler+0x60>
	 (JDIMENSION) jround_up((long) cinfo->output_width,
				(long) cinfo->max_h_samp_factor),
	 (JDIMENSION) cinfo->max_v_samp_factor);
    }
  }
}
 800ef04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800ef08:	68f8      	ldr	r0, [r7, #12]
 800ef0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 800ef0c:	f8d7 c008 	ldr.w	ip, [r7, #8]
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800ef10:	4343      	muls	r3, r0
 800ef12:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 800ef16:	f8d7 e024 	ldr.w	lr, [r7, #36]	; 0x24
		 cinfo->min_DCT_h_scaled_size;
 800ef1a:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800ef1e:	fb93 f3f0 	sdiv	r3, r3, r0
    v_out_group = cinfo->max_v_samp_factor;
 800ef22:	e9d4 b04e 	ldrd	fp, r0, [r4, #312]	; 0x138
    upsample->rowgroup_height[ci] = v_in_group; /* save for use later */
 800ef26:	65b3      	str	r3, [r6, #88]	; 0x58
    if (! compptr->component_needed) {
 800ef28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ef2a:	b932      	cbnz	r2, 800ef3a <jinit_upsampler+0x92>
      upsample->methods[ci] = noop_upsample;
 800ef2c:	4b24      	ldr	r3, [pc, #144]	; (800efc0 <jinit_upsampler+0x118>)
      upsample->methods[ci] = fullsize_upsample;
 800ef2e:	62b3      	str	r3, [r6, #40]	; 0x28
       ci++, compptr++) {
 800ef30:	3758      	adds	r7, #88	; 0x58
 800ef32:	3604      	adds	r6, #4
 800ef34:	f108 0801 	add.w	r8, r8, #1
 800ef38:	e7df      	b.n	800eefa <jinit_upsampler+0x52>
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 800ef3a:	fb0e f20c 	mul.w	r2, lr, ip
 800ef3e:	fb92 f1f1 	sdiv	r1, r2, r1
    } else if (h_in_group == h_out_group && v_in_group == v_out_group) {
 800ef42:	4559      	cmp	r1, fp
 800ef44:	d103      	bne.n	800ef4e <jinit_upsampler+0xa6>
 800ef46:	4283      	cmp	r3, r0
 800ef48:	d101      	bne.n	800ef4e <jinit_upsampler+0xa6>
      upsample->methods[ci] = fullsize_upsample;
 800ef4a:	4b1e      	ldr	r3, [pc, #120]	; (800efc4 <jinit_upsampler+0x11c>)
 800ef4c:	e7ef      	b.n	800ef2e <jinit_upsampler+0x86>
    } else if (h_in_group * 2 == h_out_group &&
 800ef4e:	ebbb 0f41 	cmp.w	fp, r1, lsl #1
 800ef52:	d119      	bne.n	800ef88 <jinit_upsampler+0xe0>
 800ef54:	4283      	cmp	r3, r0
 800ef56:	d111      	bne.n	800ef7c <jinit_upsampler+0xd4>
      upsample->methods[ci] = h2v1_upsample;
 800ef58:	4b1b      	ldr	r3, [pc, #108]	; (800efc8 <jinit_upsampler+0x120>)
 800ef5a:	62b3      	str	r3, [r6, #40]	; 0x28
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800ef5c:	6863      	ldr	r3, [r4, #4]
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 800ef5e:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 800ef62:	6f20      	ldr	r0, [r4, #112]	; 0x70
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800ef64:	f8d3 b008 	ldr.w	fp, [r3, #8]
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 800ef68:	f007 f8f5 	bl	8016156 <jround_up>
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800ef6c:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 800ef70:	4602      	mov	r2, r0
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800ef72:	2101      	movs	r1, #1
 800ef74:	4620      	mov	r0, r4
 800ef76:	47d8      	blx	fp
 800ef78:	6030      	str	r0, [r6, #0]
 800ef7a:	e7d9      	b.n	800ef30 <jinit_upsampler+0x88>
    } else if (h_in_group * 2 == h_out_group &&
 800ef7c:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
 800ef80:	d102      	bne.n	800ef88 <jinit_upsampler+0xe0>
      upsample->methods[ci] = h2v2_upsample;
 800ef82:	f8c6 a028 	str.w	sl, [r6, #40]	; 0x28
    if (need_buffer) {
 800ef86:	e7e9      	b.n	800ef5c <jinit_upsampler+0xb4>
    } else if ((h_out_group % h_in_group) == 0 &&
 800ef88:	fb9b f2f1 	sdiv	r2, fp, r1
 800ef8c:	fb01 b112 	mls	r1, r1, r2, fp
 800ef90:	b959      	cbnz	r1, 800efaa <jinit_upsampler+0x102>
	       (v_out_group % v_in_group) == 0) {
 800ef92:	fb90 f1f3 	sdiv	r1, r0, r3
 800ef96:	fb03 0311 	mls	r3, r3, r1, r0
    } else if ((h_out_group % h_in_group) == 0 &&
 800ef9a:	b933      	cbnz	r3, 800efaa <jinit_upsampler+0x102>
      upsample->methods[ci] = int_upsample;
 800ef9c:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
      upsample->h_expand[ci] = (UINT8) (h_out_group / h_in_group);
 800efa0:	f888 2000 	strb.w	r2, [r8]
      upsample->v_expand[ci] = (UINT8) (v_out_group / v_in_group);
 800efa4:	f888 100a 	strb.w	r1, [r8, #10]
    if (need_buffer) {
 800efa8:	e7d8      	b.n	800ef5c <jinit_upsampler+0xb4>
      ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
 800efaa:	6823      	ldr	r3, [r4, #0]
 800efac:	2227      	movs	r2, #39	; 0x27
 800efae:	4620      	mov	r0, r4
 800efb0:	615a      	str	r2, [r3, #20]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	4798      	blx	r3
    if (need_buffer) {
 800efb6:	e7d1      	b.n	800ef5c <jinit_upsampler+0xb4>
 800efb8:	0800ecd1 	.word	0x0800ecd1
 800efbc:	0800ece1 	.word	0x0800ece1
 800efc0:	0800eda9 	.word	0x0800eda9
 800efc4:	0800eda5 	.word	0x0800eda5
 800efc8:	0800edaf 	.word	0x0800edaf
 800efcc:	0800ede1 	.word	0x0800ede1
 800efd0:	0800ee55 	.word	0x0800ee55

0800efd4 <output_message>:
 * not just not use this routine.
 */

METHODDEF(void)
output_message (j_common_ptr cinfo)
{
 800efd4:	b500      	push	{lr}
  char buffer[JMSG_LENGTH_MAX];

  /* Create the message */
  (*cinfo->err->format_message) (cinfo, buffer);
 800efd6:	6803      	ldr	r3, [r0, #0]
{
 800efd8:	b0b3      	sub	sp, #204	; 0xcc
  (*cinfo->err->format_message) (cinfo, buffer);
 800efda:	68db      	ldr	r3, [r3, #12]
 800efdc:	4669      	mov	r1, sp
 800efde:	4798      	blx	r3
#else
  /* Send it to stderr, adding a newline */
//  fprintf(stderr, "%s\n", buffer);
//  printf( "%s\n", buffer);
#endif
}
 800efe0:	b033      	add	sp, #204	; 0xcc
 800efe2:	f85d fb04 	ldr.w	pc, [sp], #4

0800efe6 <emit_message>:
METHODDEF(void)
emit_message (j_common_ptr cinfo, int msg_level)
{
  struct jpeg_error_mgr * err = cinfo->err;

  if (msg_level < 0) {
 800efe6:	2900      	cmp	r1, #0
{
 800efe8:	4603      	mov	r3, r0
 800efea:	b510      	push	{r4, lr}
  struct jpeg_error_mgr * err = cinfo->err;
 800efec:	6804      	ldr	r4, [r0, #0]
  if (msg_level < 0) {
 800efee:	da0b      	bge.n	800f008 <emit_message+0x22>
    /* It's a warning message.  Since corrupt files may generate many warnings,
     * the policy implemented here is to show only the first warning,
     * unless trace_level >= 3.
     */
    if (err->num_warnings == 0 || err->trace_level >= 3)
 800eff0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800eff2:	b112      	cbz	r2, 800effa <emit_message+0x14>
 800eff4:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800eff6:	2a02      	cmp	r2, #2
 800eff8:	dd02      	ble.n	800f000 <emit_message+0x1a>
      (*err->output_message) (cinfo);
 800effa:	68a2      	ldr	r2, [r4, #8]
 800effc:	4618      	mov	r0, r3
 800effe:	4790      	blx	r2
    /* Always count warnings in num_warnings. */
    err->num_warnings++;
 800f000:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800f002:	3301      	adds	r3, #1
 800f004:	66e3      	str	r3, [r4, #108]	; 0x6c
  } else {
    /* It's a trace message.  Show it if trace_level >= msg_level. */
    if (err->trace_level >= msg_level)
      (*err->output_message) (cinfo);
  }
}
 800f006:	bd10      	pop	{r4, pc}
    if (err->trace_level >= msg_level)
 800f008:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800f00a:	428b      	cmp	r3, r1
 800f00c:	dbfb      	blt.n	800f006 <emit_message+0x20>
      (*err->output_message) (cinfo);
 800f00e:	68a3      	ldr	r3, [r4, #8]
}
 800f010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (*err->output_message) (cinfo);
 800f014:	4718      	bx	r3

0800f016 <reset_error_mgr>:
 */

METHODDEF(void)
reset_error_mgr (j_common_ptr cinfo)
{
  cinfo->err->num_warnings = 0;
 800f016:	6803      	ldr	r3, [r0, #0]
 800f018:	2200      	movs	r2, #0
 800f01a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* trace_level is not reset since it is an application-supplied parameter */
  cinfo->err->msg_code = 0;	/* may be useful as a flag for "no error" */
 800f01c:	615a      	str	r2, [r3, #20]
}
 800f01e:	4770      	bx	lr

0800f020 <format_message>:
{
 800f020:	4603      	mov	r3, r0
 800f022:	4608      	mov	r0, r1
  struct jpeg_error_mgr * err = cinfo->err;
 800f024:	681a      	ldr	r2, [r3, #0]
  int msg_code = err->msg_code;
 800f026:	6953      	ldr	r3, [r2, #20]
  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
 800f028:	2b00      	cmp	r3, #0
{
 800f02a:	b530      	push	{r4, r5, lr}
 800f02c:	b087      	sub	sp, #28
  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
 800f02e:	dd1f      	ble.n	800f070 <format_message+0x50>
 800f030:	6f51      	ldr	r1, [r2, #116]	; 0x74
 800f032:	4299      	cmp	r1, r3
 800f034:	db1c      	blt.n	800f070 <format_message+0x50>
    msgtext = err->jpeg_message_table[msg_code];
 800f036:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800f038:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  if (msgtext == NULL) {
 800f03c:	b911      	cbnz	r1, 800f044 <format_message+0x24>
    err->msg_parm.i[0] = msg_code;
 800f03e:	6193      	str	r3, [r2, #24]
    msgtext = err->jpeg_message_table[0];
 800f040:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800f042:	6819      	ldr	r1, [r3, #0]
  msgptr = msgtext;
 800f044:	460b      	mov	r3, r1
  while ((ch = *msgptr++) != '\0') {
 800f046:	f813 4b01 	ldrb.w	r4, [r3], #1
 800f04a:	b9fc      	cbnz	r4, 800f08c <format_message+0x6c>
    sprintf(buffer, msgtext,
 800f04c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800f04e:	9305      	str	r3, [sp, #20]
 800f050:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800f052:	9304      	str	r3, [sp, #16]
 800f054:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800f056:	9303      	str	r3, [sp, #12]
 800f058:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800f05a:	9302      	str	r3, [sp, #8]
 800f05c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800f05e:	9301      	str	r3, [sp, #4]
 800f060:	6a13      	ldr	r3, [r2, #32]
 800f062:	9300      	str	r3, [sp, #0]
 800f064:	e9d2 2306 	ldrd	r2, r3, [r2, #24]
 800f068:	f018 fe50 	bl	8027d0c <siprintf>
}
 800f06c:	b007      	add	sp, #28
 800f06e:	bd30      	pop	{r4, r5, pc}
  } else if (err->addon_message_table != NULL &&
 800f070:	6f94      	ldr	r4, [r2, #120]	; 0x78
 800f072:	2c00      	cmp	r4, #0
 800f074:	d0e3      	beq.n	800f03e <format_message+0x1e>
	     msg_code >= err->first_addon_message &&
 800f076:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
  } else if (err->addon_message_table != NULL &&
 800f078:	4299      	cmp	r1, r3
 800f07a:	dce0      	bgt.n	800f03e <format_message+0x1e>
	     msg_code >= err->first_addon_message &&
 800f07c:	f8d2 5080 	ldr.w	r5, [r2, #128]	; 0x80
 800f080:	429d      	cmp	r5, r3
 800f082:	dbdc      	blt.n	800f03e <format_message+0x1e>
    msgtext = err->addon_message_table[msg_code - err->first_addon_message];
 800f084:	1a59      	subs	r1, r3, r1
 800f086:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800f08a:	e7d7      	b.n	800f03c <format_message+0x1c>
    if (ch == '%') {
 800f08c:	2c25      	cmp	r4, #37	; 0x25
 800f08e:	d1da      	bne.n	800f046 <format_message+0x26>
      if (*msgptr == 's') isstring = TRUE;
 800f090:	781b      	ldrb	r3, [r3, #0]
 800f092:	2b73      	cmp	r3, #115	; 0x73
 800f094:	d1da      	bne.n	800f04c <format_message+0x2c>
    sprintf(buffer, msgtext, err->msg_parm.s);
 800f096:	3218      	adds	r2, #24
}
 800f098:	b007      	add	sp, #28
 800f09a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    sprintf(buffer, msgtext, err->msg_parm.s);
 800f09e:	f018 be35 	b.w	8027d0c <siprintf>

0800f0a2 <error_exit>:
  (*cinfo->err->output_message) (cinfo);
 800f0a2:	6803      	ldr	r3, [r0, #0]
{
 800f0a4:	b510      	push	{r4, lr}
 800f0a6:	4604      	mov	r4, r0
  (*cinfo->err->output_message) (cinfo);
 800f0a8:	689b      	ldr	r3, [r3, #8]
 800f0aa:	4798      	blx	r3
  jpeg_destroy(cinfo);
 800f0ac:	4620      	mov	r0, r4
}
 800f0ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  jpeg_destroy(cinfo);
 800f0b2:	f7f9 bef3 	b.w	8008e9c <jpeg_destroy>
	...

0800f0b8 <jpeg_std_error>:
 */

GLOBAL(struct jpeg_error_mgr *)
jpeg_std_error (struct jpeg_error_mgr * err)
{
  err->error_exit = error_exit;
 800f0b8:	4a0a      	ldr	r2, [pc, #40]	; (800f0e4 <jpeg_std_error+0x2c>)
  err->trace_level = 0;		/* default = no tracing */
  err->num_warnings = 0;	/* no warnings emitted yet */
  err->msg_code = 0;		/* may be useful as a flag for "no error" */

  /* Initialize message table pointers */
  err->jpeg_message_table = jpeg_std_message_table;
 800f0ba:	490b      	ldr	r1, [pc, #44]	; (800f0e8 <jpeg_std_error+0x30>)
  err->error_exit = error_exit;
 800f0bc:	6002      	str	r2, [r0, #0]
  err->emit_message = emit_message;
 800f0be:	4a0b      	ldr	r2, [pc, #44]	; (800f0ec <jpeg_std_error+0x34>)
  err->jpeg_message_table = jpeg_std_message_table;
 800f0c0:	6701      	str	r1, [r0, #112]	; 0x70
  err->last_jpeg_message = (int) JMSG_LASTMSGCODE - 1;
 800f0c2:	217e      	movs	r1, #126	; 0x7e
  err->emit_message = emit_message;
 800f0c4:	6042      	str	r2, [r0, #4]
  err->output_message = output_message;
 800f0c6:	4a0a      	ldr	r2, [pc, #40]	; (800f0f0 <jpeg_std_error+0x38>)
 800f0c8:	6082      	str	r2, [r0, #8]
  err->format_message = format_message;
 800f0ca:	4a0a      	ldr	r2, [pc, #40]	; (800f0f4 <jpeg_std_error+0x3c>)
 800f0cc:	60c2      	str	r2, [r0, #12]
  err->reset_error_mgr = reset_error_mgr;
 800f0ce:	4a0a      	ldr	r2, [pc, #40]	; (800f0f8 <jpeg_std_error+0x40>)
 800f0d0:	6102      	str	r2, [r0, #16]
  err->trace_level = 0;		/* default = no tracing */
 800f0d2:	2200      	movs	r2, #0
  err->num_warnings = 0;	/* no warnings emitted yet */
 800f0d4:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
  err->msg_code = 0;		/* may be useful as a flag for "no error" */
 800f0d8:	6142      	str	r2, [r0, #20]

  err->addon_message_table = NULL;
 800f0da:	e9c0 121d 	strd	r1, r2, [r0, #116]	; 0x74
  err->first_addon_message = 0;	/* for safety */
  err->last_addon_message = 0;
 800f0de:	e9c0 221f 	strd	r2, r2, [r0, #124]	; 0x7c

  return err;
}
 800f0e2:	4770      	bx	lr
 800f0e4:	0800f0a3 	.word	0x0800f0a3
 800f0e8:	0802c0b4 	.word	0x0802c0b4
 800f0ec:	0800efe7 	.word	0x0800efe7
 800f0f0:	0800efd5 	.word	0x0800efd5
 800f0f4:	0800f021 	.word	0x0800f021
 800f0f8:	0800f017 	.word	0x0800f017

0800f0fc <jpeg_idct_float>:

GLOBAL(void)
jpeg_idct_float (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800f0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FAST_FLOAT workspace[DCTSIZE2]; /* buffers data between passes */

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800f100:	f8d1 c054 	ldr.w	ip, [r1, #84]	; 0x54
{
 800f104:	b0c1      	sub	sp, #260	; 0x104
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 800f106:	f8d0 614c 	ldr.w	r6, [r0, #332]	; 0x14c
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800f10a:	3a02      	subs	r2, #2
 800f10c:	f10c 0a20 	add.w	sl, ip, #32
  wsptr = workspace;
 800f110:	466c      	mov	r4, sp

    tmp10 = tmp0 + tmp2;	/* phase 3 */
    tmp11 = tmp0 - tmp2;

    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800f112:	eddf 4abd 	vldr	s9, [pc, #756]	; 800f408 <jpeg_idct_float+0x30c>

    tmp7 = z11 + z13;		/* phase 5 */
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800f116:	eddf 3abd 	vldr	s7, [pc, #756]	; 800f40c <jpeg_idct_float+0x310>
 800f11a:	ed9f 4abd 	vldr	s8, [pc, #756]	; 800f410 <jpeg_idct_float+0x314>
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800f11e:	ed9f 3abd 	vldr	s6, [pc, #756]	; 800f414 <jpeg_idct_float+0x318>
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800f122:	f9b2 e012 	ldrsh.w	lr, [r2, #18]
 800f126:	3404      	adds	r4, #4
 800f128:	f9b2 9022 	ldrsh.w	r9, [r2, #34]	; 0x22
 800f12c:	f9b2 8032 	ldrsh.w	r8, [r2, #50]	; 0x32
 800f130:	f9b2 7042 	ldrsh.w	r7, [r2, #66]	; 0x42
 800f134:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 800f138:	f9b2 5062 	ldrsh.w	r5, [r2, #98]	; 0x62
 800f13c:	f9b2 0072 	ldrsh.w	r0, [r2, #114]	; 0x72
 800f140:	f932 bf02 	ldrsh.w	fp, [r2, #2]!
 800f144:	ecbc 7a01 	vldmia	ip!, {s14}
 800f148:	ee07 ba90 	vmov	s15, fp
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800f14c:	ea4e 0b09 	orr.w	fp, lr, r9
 800f150:	ea48 0b0b 	orr.w	fp, r8, fp
 800f154:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f158:	ea47 0b0b 	orr.w	fp, r7, fp
 800f15c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f160:	ea41 0b0b 	orr.w	fp, r1, fp
 800f164:	ea45 0b0b 	orr.w	fp, r5, fp
 800f168:	ea50 0b0b 	orrs.w	fp, r0, fp
 800f16c:	f040 80bf 	bne.w	800f2ee <jpeg_idct_float+0x1f2>
      wsptr[DCTSIZE*0] = dcval;
 800f170:	ed44 7a01 	vstr	s15, [r4, #-4]
      wsptr[DCTSIZE*1] = dcval;
 800f174:	edc4 7a07 	vstr	s15, [r4, #28]
      wsptr[DCTSIZE*2] = dcval;
 800f178:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 800f17c:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 800f180:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 800f184:	edc4 7a27 	vstr	s15, [r4, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 800f188:	edc4 7a2f 	vstr	s15, [r4, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 800f18c:	edc4 7a37 	vstr	s15, [r4, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800f190:	45e2      	cmp	sl, ip
 800f192:	d1c6      	bne.n	800f122 <jpeg_idct_float+0x26>
 800f194:	1f1c      	subs	r4, r3, #4
    wsptr++;
  }
  
  /* Pass 2: process rows from work array, store into output array. */

  wsptr = workspace;
 800f196:	4669      	mov	r1, sp
 800f198:	331c      	adds	r3, #28
     */
    
    /* Even part */

    /* Apply signed->unsigned and prepare float->int conversion */
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 800f19a:	eddf 2a9f 	vldr	s5, [pc, #636]	; 800f418 <jpeg_idct_float+0x31c>
    tmp10 = z5 + wsptr[4];
    tmp11 = z5 - wsptr[4];

    tmp13 = wsptr[2] + wsptr[6];
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 800f19e:	eddf 4a9a 	vldr	s9, [pc, #616]	; 800f408 <jpeg_idct_float+0x30c>

    tmp7 = z11 + z13;
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800f1a2:	ed9f 3a9a 	vldr	s6, [pc, #616]	; 800f40c <jpeg_idct_float+0x310>
 800f1a6:	ed9f 4a9a 	vldr	s8, [pc, #616]	; 800f410 <jpeg_idct_float+0x314>
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800f1aa:	eddf 3a9a 	vldr	s7, [pc, #616]	; 800f414 <jpeg_idct_float+0x318>
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 800f1ae:	edd1 5a00 	vldr	s11, [r1]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
 800f1b2:	3120      	adds	r1, #32
    tmp10 = z5 + wsptr[4];
 800f1b4:	ed51 7a04 	vldr	s15, [r1, #-16]
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 800f1b8:	ee75 5aa2 	vadd.f32	s11, s11, s5
    tmp13 = wsptr[2] + wsptr[6];
 800f1bc:	ed51 6a02 	vldr	s13, [r1, #-8]
    outptr = output_buf[ctr] + output_col;
 800f1c0:	f854 5f04 	ldr.w	r5, [r4, #4]!
 800f1c4:	9a4a      	ldr	r2, [sp, #296]	; 0x128
    tmp10 = z5 + wsptr[4];
 800f1c6:	ee37 5aa5 	vadd.f32	s10, s15, s11
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800f1ca:	9f4a      	ldr	r7, [sp, #296]	; 0x128
    tmp11 = z5 - wsptr[4];
 800f1cc:	ee75 5ae7 	vsub.f32	s11, s11, s15
    tmp13 = wsptr[2] + wsptr[6];
 800f1d0:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
    outptr = output_buf[ctr] + output_col;
 800f1d4:	18a8      	adds	r0, r5, r2
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800f1d6:	42a3      	cmp	r3, r4
    tmp13 = wsptr[2] + wsptr[6];
 800f1d8:	ee37 7aa6 	vadd.f32	s14, s15, s13
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 800f1dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f1e0:	eef0 6a47 	vmov.f32	s13, s14
    tmp0 = tmp10 + tmp13;
 800f1e4:	ee35 6a07 	vadd.f32	s12, s10, s14
    tmp3 = tmp10 - tmp13;
 800f1e8:	ee35 5a47 	vsub.f32	s10, s10, s14
    z13 = wsptr[5] + wsptr[3];
 800f1ec:	ed11 7a03 	vldr	s14, [r1, #-12]
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 800f1f0:	eed7 6aa4 	vfnms.f32	s13, s15, s9
    z13 = wsptr[5] + wsptr[3];
 800f1f4:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800f1f8:	ee37 1a27 	vadd.f32	s2, s14, s15
    z10 = wsptr[5] - wsptr[3];
 800f1fc:	ee37 7a67 	vsub.f32	s14, s14, s15
    z11 = wsptr[1] + wsptr[7];
 800f200:	ed51 7a01 	vldr	s15, [r1, #-4]
    tmp1 = tmp11 + tmp12;
 800f204:	ee75 1aa6 	vadd.f32	s3, s11, s13
    tmp2 = tmp11 - tmp12;
 800f208:	ee75 5ae6 	vsub.f32	s11, s11, s13
    z11 = wsptr[1] + wsptr[7];
 800f20c:	ed51 6a07 	vldr	s13, [r1, #-28]	; 0xffffffe4
 800f210:	ee36 2aa7 	vadd.f32	s4, s13, s15
    z12 = wsptr[1] - wsptr[7];
 800f214:	ee76 6ae7 	vsub.f32	s13, s13, s15
    tmp7 = z11 + z13;
 800f218:	ee71 0a02 	vadd.f32	s1, s2, s4
    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
 800f21c:	ee77 7a26 	vadd.f32	s15, s14, s13
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800f220:	ee23 7ac7 	vnmul.f32	s14, s7, s14
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800f224:	ee63 6a66 	vnmul.f32	s13, s6, s13
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);
 800f228:	ee32 2a41 	vsub.f32	s4, s4, s2
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800f22c:	eea7 7a84 	vfma.f32	s14, s15, s8
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800f230:	eee7 6a84 	vfma.f32	s13, s15, s8
    tmp6 = tmp12 - tmp7;
 800f234:	ee77 7a60 	vsub.f32	s15, s14, s1
    tmp5 = tmp11 - tmp6;
 800f238:	eeb0 1a67 	vmov.f32	s2, s15
 800f23c:	ee92 1a24 	vfnms.f32	s2, s4, s9
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800f240:	ee36 2a20 	vadd.f32	s4, s12, s1
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800f244:	ee36 6a60 	vsub.f32	s12, s12, s1
    tmp4 = tmp10 - tmp5;
 800f248:	ee36 7ac1 	vsub.f32	s14, s13, s2
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800f24c:	eefd 6ac2 	vcvt.s32.f32	s13, s4
 800f250:	ee16 2a90 	vmov	r2, s13
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800f254:	eefd 6ac6 	vcvt.s32.f32	s13, s12
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 800f258:	ee31 6aa7 	vadd.f32	s12, s3, s15
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800f25c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800f260:	5cb2      	ldrb	r2, [r6, r2]
 800f262:	55ea      	strb	r2, [r5, r7]
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800f264:	ee16 2a90 	vmov	r2, s13
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 800f268:	eefd 6ac6 	vcvt.s32.f32	s13, s12
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800f26c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800f270:	5cb2      	ldrb	r2, [r6, r2]
 800f272:	71c2      	strb	r2, [r0, #7]
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 800f274:	ee16 2a90 	vmov	r2, s13
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800f278:	ee71 6ae7 	vsub.f32	s13, s3, s15
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 800f27c:	f3c2 0209 	ubfx	r2, r2, #0, #10
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800f280:	eefd 7ae6 	vcvt.s32.f32	s15, s13
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 800f284:	5cb2      	ldrb	r2, [r6, r2]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800f286:	ee75 6a81 	vadd.f32	s13, s11, s2
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 800f28a:	7042      	strb	r2, [r0, #1]
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800f28c:	ee17 2a90 	vmov	r2, s15
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800f290:	eefd 7ae6 	vcvt.s32.f32	s15, s13
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800f294:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800f298:	5cb2      	ldrb	r2, [r6, r2]
 800f29a:	7182      	strb	r2, [r0, #6]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800f29c:	ee17 2a90 	vmov	r2, s15
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800f2a0:	ee75 7ac1 	vsub.f32	s15, s11, s2
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800f2a4:	f3c2 0209 	ubfx	r2, r2, #0, #10
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800f2a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800f2ac:	5cb2      	ldrb	r2, [r6, r2]
 800f2ae:	7082      	strb	r2, [r0, #2]
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800f2b0:	ee17 2a90 	vmov	r2, s15
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 800f2b4:	ee75 7a07 	vadd.f32	s15, s10, s14
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 800f2b8:	ee35 7a47 	vsub.f32	s14, s10, s14
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800f2bc:	f3c2 0209 	ubfx	r2, r2, #0, #10
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 800f2c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800f2c4:	5cb2      	ldrb	r2, [r6, r2]
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 800f2c6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800f2ca:	7142      	strb	r2, [r0, #5]
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 800f2cc:	ee17 2a90 	vmov	r2, s15
 800f2d0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800f2d4:	5cb2      	ldrb	r2, [r6, r2]
 800f2d6:	70c2      	strb	r2, [r0, #3]
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 800f2d8:	ee17 2a10 	vmov	r2, s14
 800f2dc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800f2e0:	5cb2      	ldrb	r2, [r6, r2]
 800f2e2:	7102      	strb	r2, [r0, #4]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800f2e4:	f47f af63 	bne.w	800f1ae <jpeg_idct_float+0xb2>
  }
}
 800f2e8:	b041      	add	sp, #260	; 0x104
 800f2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800f2ee:	ee06 5a90 	vmov	s13, r5
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f2f2:	ee07 9a10 	vmov	s14, r9
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800f2f6:	eddc 2a2f 	vldr	s5, [ip, #188]	; 0xbc
 800f2fa:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f2fe:	ed9c 5a0f 	vldr	s10, [ip, #60]	; 0x3c
 800f302:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800f306:	ee07 7a10 	vmov	s14, r7
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800f30a:	ed9c 1a37 	vldr	s2, [ip, #220]	; 0xdc
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800f30e:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 800f312:	ed9c 7a1f 	vldr	s14, [ip, #124]	; 0x7c
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800f316:	ee66 6aa2 	vmul.f32	s13, s13, s5
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f31a:	eddc 0a07 	vldr	s1, [ip, #28]
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 800f31e:	eef0 2a67 	vmov.f32	s5, s15
    tmp11 = tmp0 - tmp2;
 800f322:	eee5 7ac7 	vfms.f32	s15, s11, s14
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 800f326:	eee5 2a87 	vfma.f32	s5, s11, s14
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 800f32a:	eeb0 7a66 	vmov.f32	s14, s13
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800f32e:	eed6 6a05 	vfnms.f32	s13, s12, s10
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 800f332:	eea6 7a05 	vfma.f32	s14, s12, s10
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800f336:	eeb0 6a47 	vmov.f32	s12, s14
    tmp0 = tmp10 + tmp13;	/* phase 2 */
 800f33a:	ee72 1a87 	vadd.f32	s3, s5, s14
    tmp3 = tmp10 - tmp13;
 800f33e:	ee72 2ac7 	vsub.f32	s5, s5, s14
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800f342:	ee07 1a10 	vmov	s14, r1
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800f346:	ee96 6aa4 	vfnms.f32	s12, s13, s9
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800f34a:	eddc 6a27 	vldr	s13, [ip, #156]	; 0x9c
 800f34e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f352:	ee27 7a26 	vmul.f32	s14, s14, s13
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800f356:	ee06 0a90 	vmov	s13, r0
    tmp1 = tmp11 + tmp12;
 800f35a:	ee37 2a86 	vadd.f32	s4, s15, s12
    tmp2 = tmp11 - tmp12;
 800f35e:	ee37 6ac6 	vsub.f32	s12, s15, s12
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f362:	ee07 ea90 	vmov	s15, lr
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800f366:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f36a:	eef8 5ae7 	vcvt.f32.s32	s11, s15
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800f36e:	ee07 8a90 	vmov	s15, r8
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800f372:	ee66 6a81 	vmul.f32	s13, s13, s2
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800f376:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800f37a:	eddc 7a17 	vldr	s15, [ip, #92]	; 0x5c
    z13 = tmp6 + tmp5;		/* phase 6 */
 800f37e:	eeb0 1a47 	vmov.f32	s2, s14
    z10 = tmp6 - tmp5;
 800f382:	eea5 7a67 	vfms.f32	s14, s10, s15
    z13 = tmp6 + tmp5;		/* phase 6 */
 800f386:	eea5 1a27 	vfma.f32	s2, s10, s15
    z11 = tmp4 + tmp7;
 800f38a:	eef0 7a66 	vmov.f32	s15, s13
    z12 = tmp4 - tmp7;
 800f38e:	eed5 6aa0 	vfnms.f32	s13, s11, s1
    z11 = tmp4 + tmp7;
 800f392:	eee5 7aa0 	vfma.f32	s15, s11, s1
    tmp7 = z11 + z13;		/* phase 5 */
 800f396:	ee31 5a27 	vadd.f32	s10, s2, s15
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */
 800f39a:	ee77 5ac1 	vsub.f32	s11, s15, s2
    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
 800f39e:	ee77 7a26 	vadd.f32	s15, s14, s13
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800f3a2:	ee23 7a47 	vnmul.f32	s14, s6, s14
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800f3a6:	ee63 6ae6 	vnmul.f32	s13, s7, s13
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800f3aa:	eea7 7a84 	vfma.f32	s14, s15, s8
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800f3ae:	eee7 6a84 	vfma.f32	s13, s15, s8
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 800f3b2:	ee77 7a45 	vsub.f32	s15, s14, s10
    tmp5 = tmp11 - tmp6;
 800f3b6:	eeb0 7a67 	vmov.f32	s14, s15
 800f3ba:	ee95 7aa4 	vfnms.f32	s14, s11, s9
 800f3be:	eef0 5a47 	vmov.f32	s11, s14
    tmp4 = tmp10 - tmp5;
 800f3c2:	ee36 7ac7 	vsub.f32	s14, s13, s14
    wsptr[DCTSIZE*0] = tmp0 + tmp7;
 800f3c6:	ee71 6a85 	vadd.f32	s13, s3, s10
    wsptr[DCTSIZE*7] = tmp0 - tmp7;
 800f3ca:	ee71 1ac5 	vsub.f32	s3, s3, s10
    wsptr[DCTSIZE*0] = tmp0 + tmp7;
 800f3ce:	ed44 6a01 	vstr	s13, [r4, #-4]
    wsptr[DCTSIZE*1] = tmp1 + tmp6;
 800f3d2:	ee72 6a27 	vadd.f32	s13, s4, s15
    wsptr[DCTSIZE*6] = tmp1 - tmp6;
 800f3d6:	ee72 7a67 	vsub.f32	s15, s4, s15
    wsptr[DCTSIZE*7] = tmp0 - tmp7;
 800f3da:	edc4 1a37 	vstr	s3, [r4, #220]	; 0xdc
    wsptr[DCTSIZE*1] = tmp1 + tmp6;
 800f3de:	edc4 6a07 	vstr	s13, [r4, #28]
    wsptr[DCTSIZE*6] = tmp1 - tmp6;
 800f3e2:	edc4 7a2f 	vstr	s15, [r4, #188]	; 0xbc
    wsptr[DCTSIZE*2] = tmp2 + tmp5;
 800f3e6:	ee76 7a25 	vadd.f32	s15, s12, s11
    wsptr[DCTSIZE*5] = tmp2 - tmp5;
 800f3ea:	ee36 6a65 	vsub.f32	s12, s12, s11
    wsptr[DCTSIZE*2] = tmp2 + tmp5;
 800f3ee:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
    wsptr[DCTSIZE*3] = tmp3 + tmp4;
 800f3f2:	ee72 7a87 	vadd.f32	s15, s5, s14
    wsptr[DCTSIZE*4] = tmp3 - tmp4;
 800f3f6:	ee32 7ac7 	vsub.f32	s14, s5, s14
    wsptr[DCTSIZE*5] = tmp2 - tmp5;
 800f3fa:	ed84 6a27 	vstr	s12, [r4, #156]	; 0x9c
    wsptr[DCTSIZE*3] = tmp3 + tmp4;
 800f3fe:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
    wsptr[DCTSIZE*4] = tmp3 - tmp4;
 800f402:	ed84 7a1f 	vstr	s14, [r4, #124]	; 0x7c
    wsptr++;
 800f406:	e6c3      	b.n	800f190 <jpeg_idct_float+0x94>
 800f408:	3fb504f3 	.word	0x3fb504f3
 800f40c:	3f8a8bd4 	.word	0x3f8a8bd4
 800f410:	3fec835e 	.word	0x3fec835e
 800f414:	40273d75 	.word	0x40273d75
 800f418:	43008000 	.word	0x43008000

0800f41c <jpeg_idct_ifast>:

GLOBAL(void)
jpeg_idct_ifast (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800f41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f420:	b0c5      	sub	sp, #276	; 0x114
  ISHIFT_TEMPS			/* for IDESCALE */

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (IFAST_MULT_TYPE *) compptr->dct_table;
 800f422:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 800f424:	3a02      	subs	r2, #2
{
 800f426:	9302      	str	r3, [sp, #8]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800f428:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 800f42c:	f103 0880 	add.w	r8, r3, #128	; 0x80
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800f430:	f105 0320 	add.w	r3, r5, #32
 800f434:	9303      	str	r3, [sp, #12]
  wsptr = workspace;
 800f436:	ab04      	add	r3, sp, #16
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */
    
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800f438:	f9b2 0012 	ldrsh.w	r0, [r2, #18]
 800f43c:	3304      	adds	r3, #4
 800f43e:	f9b2 c022 	ldrsh.w	ip, [r2, #34]	; 0x22
 800f442:	f9b2 6032 	ldrsh.w	r6, [r2, #50]	; 0x32
 800f446:	f9b2 a042 	ldrsh.w	sl, [r2, #66]	; 0x42
 800f44a:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 800f44e:	f9b2 9062 	ldrsh.w	r9, [r2, #98]	; 0x62
 800f452:	f9b2 e072 	ldrsh.w	lr, [r2, #114]	; 0x72
 800f456:	f855 7b04 	ldr.w	r7, [r5], #4
 800f45a:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
 800f45e:	437c      	muls	r4, r7
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800f460:	ea40 070c 	orr.w	r7, r0, ip
 800f464:	4337      	orrs	r7, r6
 800f466:	ea4a 0707 	orr.w	r7, sl, r7
 800f46a:	430f      	orrs	r7, r1
 800f46c:	ea49 0707 	orr.w	r7, r9, r7
 800f470:	ea5e 0707 	orrs.w	r7, lr, r7
 800f474:	d147      	bne.n	800f506 <jpeg_idct_ifast+0xea>
	inptr[DCTSIZE*7] == 0) {
      /* AC terms all zero */
      int dcval = (int) DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);

      wsptr[DCTSIZE*0] = dcval;
 800f476:	f843 4c04 	str.w	r4, [r3, #-4]
      wsptr[DCTSIZE*1] = dcval;
 800f47a:	61dc      	str	r4, [r3, #28]
      wsptr[DCTSIZE*2] = dcval;
 800f47c:	63dc      	str	r4, [r3, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 800f47e:	65dc      	str	r4, [r3, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 800f480:	67dc      	str	r4, [r3, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 800f482:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 800f486:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 800f48a:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800f48e:	9903      	ldr	r1, [sp, #12]
 800f490:	42a9      	cmp	r1, r5
 800f492:	d1d1      	bne.n	800f438 <jpeg_idct_ifast+0x1c>
 800f494:	9b02      	ldr	r3, [sp, #8]
 800f496:	f1a3 0b04 	sub.w	fp, r3, #4
 800f49a:	331c      	adds	r3, #28
 800f49c:	9303      	str	r3, [sp, #12]
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 800f49e:	ab04      	add	r3, sp, #16
 800f4a0:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
 800f4a2:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 800f4a4:	f85b af04 	ldr.w	sl, [fp, #4]!
 800f4a8:	9a01      	ldr	r2, [sp, #4]
 800f4aa:	eb0a 0003 	add.w	r0, sl, r3
     * test takes more time than it's worth.  In that case this section
     * may be commented out.
     */
    
#ifndef NO_ZERO_ROW_TEST
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 800f4ae:	9b01      	ldr	r3, [sp, #4]
 800f4b0:	9d01      	ldr	r5, [sp, #4]
 800f4b2:	e9d3 e101 	ldrd	lr, r1, [r3, #4]
 800f4b6:	68db      	ldr	r3, [r3, #12]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800f4b8:	ea4e 0701 	orr.w	r7, lr, r1
 800f4bc:	f855 6b20 	ldr.w	r6, [r5], #32
 800f4c0:	e9d2 9404 	ldrd	r9, r4, [r2, #16]
 800f4c4:	431f      	orrs	r7, r3
 800f4c6:	9501      	str	r5, [sp, #4]
 800f4c8:	ea47 0709 	orr.w	r7, r7, r9
 800f4cc:	e9d2 c206 	ldrd	ip, r2, [r2, #24]
 800f4d0:	4327      	orrs	r7, r4
 800f4d2:	ea47 070c 	orr.w	r7, r7, ip
 800f4d6:	ea57 0502 	orrs.w	r5, r7, r2
 800f4da:	f040 8081 	bne.w	800f5e0 <jpeg_idct_ifast+0x1c4>
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
				  & RANGE_MASK];
 800f4de:	f3c6 1949 	ubfx	r9, r6, #5, #10
      
      outptr[0] = dcval;
 800f4e2:	9a4e      	ldr	r2, [sp, #312]	; 0x138
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 800f4e4:	f818 3009 	ldrb.w	r3, [r8, r9]
      outptr[0] = dcval;
 800f4e8:	f80a 3002 	strb.w	r3, [sl, r2]
      outptr[1] = dcval;
 800f4ec:	7043      	strb	r3, [r0, #1]
      outptr[2] = dcval;
 800f4ee:	7083      	strb	r3, [r0, #2]
      outptr[3] = dcval;
 800f4f0:	70c3      	strb	r3, [r0, #3]
      outptr[4] = dcval;
 800f4f2:	7103      	strb	r3, [r0, #4]
      outptr[5] = dcval;
 800f4f4:	7143      	strb	r3, [r0, #5]
      outptr[6] = dcval;
 800f4f6:	7183      	strb	r3, [r0, #6]
      outptr[7] = dcval;
 800f4f8:	71c3      	strb	r3, [r0, #7]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800f4fa:	9b03      	ldr	r3, [sp, #12]
 800f4fc:	455b      	cmp	r3, fp
 800f4fe:	d1d0      	bne.n	800f4a2 <jpeg_idct_ifast+0x86>
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}
 800f500:	b045      	add	sp, #276	; 0x114
 800f502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f506:	6bef      	ldr	r7, [r5, #60]	; 0x3c
 800f508:	fb07 fc0c 	mul.w	ip, r7, ip
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800f50c:	6fef      	ldr	r7, [r5, #124]	; 0x7c
 800f50e:	fb07 fa0a 	mul.w	sl, r7, sl
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800f512:	f8d5 70bc 	ldr.w	r7, [r5, #188]	; 0xbc
 800f516:	fb07 f709 	mul.w	r7, r7, r9
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 800f51a:	eb0a 0b04 	add.w	fp, sl, r4
    tmp11 = tmp0 - tmp2;
 800f51e:	eba4 040a 	sub.w	r4, r4, sl
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 800f522:	ebac 0907 	sub.w	r9, ip, r7
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 800f526:	eb0c 0a07 	add.w	sl, ip, r7
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 800f52a:	f44f 77b5 	mov.w	r7, #362	; 0x16a
    tmp0 = tmp10 + tmp13;	/* phase 2 */
 800f52e:	eb0b 0c0a 	add.w	ip, fp, sl
    tmp3 = tmp10 - tmp13;
 800f532:	ebab 0b0a 	sub.w	fp, fp, sl
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 800f536:	fb07 f909 	mul.w	r9, r7, r9
 800f53a:	ebca 2929 	rsb	r9, sl, r9, asr #8
    tmp1 = tmp11 + tmp12;
 800f53e:	eb04 0709 	add.w	r7, r4, r9
    tmp2 = tmp11 - tmp12;
 800f542:	eba4 0409 	sub.w	r4, r4, r9
 800f546:	9401      	str	r4, [sp, #4]
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f548:	69ec      	ldr	r4, [r5, #28]
 800f54a:	fb04 f900 	mul.w	r9, r4, r0
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800f54e:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800f550:	f240 14d9 	movw	r4, #473	; 0x1d9
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800f554:	4346      	muls	r6, r0
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800f556:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 800f55a:	4341      	muls	r1, r0
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800f55c:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
 800f560:	fb00 f00e 	mul.w	r0, r0, lr
    z13 = tmp6 + tmp5;		/* phase 6 */
 800f564:	eb06 0a01 	add.w	sl, r6, r1
    z10 = tmp6 - tmp5;
 800f568:	1b8e      	subs	r6, r1, r6
    z11 = tmp4 + tmp7;
 800f56a:	eb09 0e00 	add.w	lr, r9, r0
    z12 = tmp4 - tmp7;
 800f56e:	eba9 0000 	sub.w	r0, r9, r0
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800f572:	1831      	adds	r1, r6, r0
    tmp7 = z11 + z13;		/* phase 5 */
 800f574:	eb0a 090e 	add.w	r9, sl, lr
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 800f578:	ebae 0a0a 	sub.w	sl, lr, sl
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800f57c:	4361      	muls	r1, r4
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800f57e:	f46f 7427 	mvn.w	r4, #668	; 0x29c
 800f582:	4366      	muls	r6, r4
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 800f584:	f44f 74b5 	mov.w	r4, #362	; 0x16a
 800f588:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800f58c:	f240 1415 	movw	r4, #277	; 0x115
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800f590:	1236      	asrs	r6, r6, #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800f592:	4360      	muls	r0, r4
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800f594:	eb06 2621 	add.w	r6, r6, r1, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800f598:	1200      	asrs	r0, r0, #8
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 800f59a:	eba6 0609 	sub.w	r6, r6, r9
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800f59e:	eba0 2121 	sub.w	r1, r0, r1, asr #8
    wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
 800f5a2:	eb0c 0009 	add.w	r0, ip, r9
    tmp5 = tmp11 - tmp6;
 800f5a6:	ebc6 2a2a 	rsb	sl, r6, sl, asr #8
    wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
 800f5aa:	f843 0c04 	str.w	r0, [r3, #-4]
    wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
 800f5ae:	ebac 0009 	sub.w	r0, ip, r9
    tmp4 = tmp10 + tmp5;
 800f5b2:	4451      	add	r1, sl
    wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
 800f5b4:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
    wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
 800f5b8:	19b8      	adds	r0, r7, r6
    wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
 800f5ba:	1bbf      	subs	r7, r7, r6
    wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
 800f5bc:	61d8      	str	r0, [r3, #28]
    wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
 800f5be:	9801      	ldr	r0, [sp, #4]
    wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
 800f5c0:	f8c3 70bc 	str.w	r7, [r3, #188]	; 0xbc
    wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
 800f5c4:	4450      	add	r0, sl
 800f5c6:	63d8      	str	r0, [r3, #60]	; 0x3c
    wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
 800f5c8:	9801      	ldr	r0, [sp, #4]
 800f5ca:	eba0 040a 	sub.w	r4, r0, sl
    wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
 800f5ce:	eb0b 0001 	add.w	r0, fp, r1
    wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
 800f5d2:	ebab 0101 	sub.w	r1, fp, r1
    wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
 800f5d6:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
    wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
 800f5da:	67d8      	str	r0, [r3, #124]	; 0x7c
    wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
 800f5dc:	65d9      	str	r1, [r3, #92]	; 0x5c
    wsptr++;
 800f5de:	e756      	b.n	800f48e <jpeg_idct_ifast+0x72>
    tmp10 = ((DCTELEM) wsptr[0] + (DCTELEM) wsptr[4]);
 800f5e0:	eb09 0706 	add.w	r7, r9, r6
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 800f5e4:	f44f 75b5 	mov.w	r5, #362	; 0x16a
    tmp11 = ((DCTELEM) wsptr[0] - (DCTELEM) wsptr[4]);
 800f5e8:	eba6 0909 	sub.w	r9, r6, r9
    tmp13 = ((DCTELEM) wsptr[2] + (DCTELEM) wsptr[6]);
 800f5ec:	eb01 060c 	add.w	r6, r1, ip
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 800f5f0:	eba1 010c 	sub.w	r1, r1, ip
    tmp0 = tmp10 + tmp13;
 800f5f4:	eb07 0c06 	add.w	ip, r7, r6
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 800f5f8:	4369      	muls	r1, r5
    z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
 800f5fa:	191d      	adds	r5, r3, r4
    z10 = (DCTELEM) wsptr[5] - (DCTELEM) wsptr[3];
 800f5fc:	1ae3      	subs	r3, r4, r3
    z11 = (DCTELEM) wsptr[1] + (DCTELEM) wsptr[7];
 800f5fe:	eb0e 0402 	add.w	r4, lr, r2
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 800f602:	ebc6 2121 	rsb	r1, r6, r1, asr #8
    z12 = (DCTELEM) wsptr[1] - (DCTELEM) wsptr[7];
 800f606:	ebae 0202 	sub.w	r2, lr, r2
    tmp3 = tmp10 - tmp13;
 800f60a:	1bbe      	subs	r6, r7, r6
    z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
 800f60c:	9502      	str	r5, [sp, #8]
    tmp1 = tmp11 + tmp12;
 800f60e:	eb09 0701 	add.w	r7, r9, r1
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800f612:	eb03 0e02 	add.w	lr, r3, r2
    tmp2 = tmp11 - tmp12;
 800f616:	eba9 0101 	sub.w	r1, r9, r1
    tmp7 = z11 + z13;		/* phase 5 */
 800f61a:	eb05 0904 	add.w	r9, r5, r4
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800f61e:	f240 15d9 	movw	r5, #473	; 0x1d9
 800f622:	fb05 fe0e 	mul.w	lr, r5, lr
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800f626:	f46f 7527 	mvn.w	r5, #668	; 0x29c
 800f62a:	436b      	muls	r3, r5
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 800f62c:	9d02      	ldr	r5, [sp, #8]
 800f62e:	1b64      	subs	r4, r4, r5
 800f630:	f44f 75b5 	mov.w	r5, #362	; 0x16a
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800f634:	121b      	asrs	r3, r3, #8
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 800f636:	436c      	muls	r4, r5
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800f638:	f240 1515 	movw	r5, #277	; 0x115
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800f63c:	eb03 232e 	add.w	r3, r3, lr, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800f640:	436a      	muls	r2, r5
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 800f642:	9d4e      	ldr	r5, [sp, #312]	; 0x138
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 800f644:	eba3 0309 	sub.w	r3, r3, r9
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800f648:	1212      	asrs	r2, r2, #8
    tmp5 = tmp11 - tmp6;
 800f64a:	ebc3 2424 	rsb	r4, r3, r4, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800f64e:	eba2 2e2e 	sub.w	lr, r2, lr, asr #8
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 800f652:	eb0c 0209 	add.w	r2, ip, r9
    outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
 800f656:	ebac 0c09 	sub.w	ip, ip, r9
			    & RANGE_MASK];
 800f65a:	f3c2 1249 	ubfx	r2, r2, #5, #10
    tmp4 = tmp10 + tmp5;
 800f65e:	44a6      	add	lr, r4
			    & RANGE_MASK];
 800f660:	f3cc 1c49 	ubfx	ip, ip, #5, #10
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 800f664:	f818 2002 	ldrb.w	r2, [r8, r2]
 800f668:	f80a 2005 	strb.w	r2, [sl, r5]
    outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
 800f66c:	f818 200c 	ldrb.w	r2, [r8, ip]
 800f670:	71c2      	strb	r2, [r0, #7]
    outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 800f672:	18fa      	adds	r2, r7, r3
    outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
 800f674:	1afb      	subs	r3, r7, r3
			    & RANGE_MASK];
 800f676:	f3c2 1249 	ubfx	r2, r2, #5, #10
			    & RANGE_MASK];
 800f67a:	f3c3 1349 	ubfx	r3, r3, #5, #10
    outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 800f67e:	f818 2002 	ldrb.w	r2, [r8, r2]
 800f682:	7042      	strb	r2, [r0, #1]
    outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
 800f684:	f818 3003 	ldrb.w	r3, [r8, r3]
 800f688:	7183      	strb	r3, [r0, #6]
    outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 800f68a:	190b      	adds	r3, r1, r4
    outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
 800f68c:	1b09      	subs	r1, r1, r4
			    & RANGE_MASK];
 800f68e:	f3c3 1349 	ubfx	r3, r3, #5, #10
			    & RANGE_MASK];
 800f692:	f3c1 1149 	ubfx	r1, r1, #5, #10
    outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 800f696:	f818 3003 	ldrb.w	r3, [r8, r3]
 800f69a:	7083      	strb	r3, [r0, #2]
    outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
 800f69c:	f818 3001 	ldrb.w	r3, [r8, r1]
 800f6a0:	7143      	strb	r3, [r0, #5]
    outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 800f6a2:	eb06 030e 	add.w	r3, r6, lr
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
 800f6a6:	eba6 0e0e 	sub.w	lr, r6, lr
			    & RANGE_MASK];
 800f6aa:	f3c3 1349 	ubfx	r3, r3, #5, #10
			    & RANGE_MASK];
 800f6ae:	f3ce 1e49 	ubfx	lr, lr, #5, #10
    outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 800f6b2:	f818 3003 	ldrb.w	r3, [r8, r3]
 800f6b6:	7103      	strb	r3, [r0, #4]
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
 800f6b8:	f818 300e 	ldrb.w	r3, [r8, lr]
 800f6bc:	70c3      	strb	r3, [r0, #3]
    wsptr += DCTSIZE;		/* advance pointer to next row */
 800f6be:	e71c      	b.n	800f4fa <jpeg_idct_ifast+0xde>

0800f6c0 <jpeg_idct_islow>:

GLOBAL(void)
jpeg_idct_islow (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800f6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6c4:	b0c7      	sub	sp, #284	; 0x11c
 800f6c6:	3a02      	subs	r2, #2
 800f6c8:	9304      	str	r3, [sp, #16]
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800f6ca:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 800f6ce:	6d48      	ldr	r0, [r1, #84]	; 0x54
  wsptr = workspace;
 800f6d0:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800f6d2:	3380      	adds	r3, #128	; 0x80
 800f6d4:	9301      	str	r3, [sp, #4]
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800f6d6:	f100 0320 	add.w	r3, r0, #32
 800f6da:	9305      	str	r3, [sp, #20]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */

    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800f6dc:	f9b2 a012 	ldrsh.w	sl, [r2, #18]
 800f6e0:	3104      	adds	r1, #4
 800f6e2:	f9b2 4022 	ldrsh.w	r4, [r2, #34]	; 0x22
 800f6e6:	f9b2 c032 	ldrsh.w	ip, [r2, #50]	; 0x32
 800f6ea:	f9b2 e042 	ldrsh.w	lr, [r2, #66]	; 0x42
 800f6ee:	f9b2 8052 	ldrsh.w	r8, [r2, #82]	; 0x52
 800f6f2:	f9b2 3062 	ldrsh.w	r3, [r2, #98]	; 0x62
 800f6f6:	f9b2 9072 	ldrsh.w	r9, [r2, #114]	; 0x72
 800f6fa:	f850 7b04 	ldr.w	r7, [r0], #4
 800f6fe:	f932 5f02 	ldrsh.w	r5, [r2, #2]!
 800f702:	436f      	muls	r7, r5
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800f704:	ea4a 0504 	orr.w	r5, sl, r4
 800f708:	ea4c 0505 	orr.w	r5, ip, r5
 800f70c:	ea4e 0505 	orr.w	r5, lr, r5
 800f710:	ea48 0505 	orr.w	r5, r8, r5
 800f714:	431d      	orrs	r5, r3
 800f716:	ea59 0505 	orrs.w	r5, r9, r5
 800f71a:	d147      	bne.n	800f7ac <jpeg_idct_islow+0xec>
	inptr[DCTSIZE*7] == 0) {
      /* AC terms all zero */
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 800f71c:	00bf      	lsls	r7, r7, #2

      wsptr[DCTSIZE*0] = dcval;
 800f71e:	f841 7c04 	str.w	r7, [r1, #-4]
      wsptr[DCTSIZE*1] = dcval;
 800f722:	61cf      	str	r7, [r1, #28]
      wsptr[DCTSIZE*2] = dcval;
 800f724:	63cf      	str	r7, [r1, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 800f726:	65cf      	str	r7, [r1, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 800f728:	67cf      	str	r7, [r1, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 800f72a:	f8c1 709c 	str.w	r7, [r1, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 800f72e:	f8c1 70bc 	str.w	r7, [r1, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 800f732:	f8c1 70dc 	str.w	r7, [r1, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800f736:	9b05      	ldr	r3, [sp, #20]
 800f738:	4283      	cmp	r3, r0
 800f73a:	d1cf      	bne.n	800f6dc <jpeg_idct_islow+0x1c>
 800f73c:	9b04      	ldr	r3, [sp, #16]
 800f73e:	f1a3 0904 	sub.w	r9, r3, #4
 800f742:	331c      	adds	r3, #28
 800f744:	9305      	str	r3, [sp, #20]

  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 800f746:	ab06      	add	r3, sp, #24
 800f748:	9302      	str	r3, [sp, #8]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
 800f74a:	f859 3f04 	ldr.w	r3, [r9, #4]!
 800f74e:	9a50      	ldr	r2, [sp, #320]	; 0x140
 800f750:	9902      	ldr	r1, [sp, #8]
 800f752:	9303      	str	r3, [sp, #12]
 800f754:	4413      	add	r3, r2
     * test takes more time than it's worth.  In that case this section
     * may be commented out.
     */

#ifndef NO_ZERO_ROW_TEST
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 800f756:	9a02      	ldr	r2, [sp, #8]
 800f758:	69cd      	ldr	r5, [r1, #28]
 800f75a:	e9d1 8605 	ldrd	r8, r6, [r1, #20]
 800f75e:	e9d2 a001 	ldrd	sl, r0, [r2, #4]
 800f762:	f851 7b20 	ldr.w	r7, [r1], #32
 800f766:	e9d2 e203 	ldrd	lr, r2, [r2, #12]
 800f76a:	9102      	str	r1, [sp, #8]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800f76c:	ea4a 0100 	orr.w	r1, sl, r0
 800f770:	3710      	adds	r7, #16
 800f772:	ea41 010e 	orr.w	r1, r1, lr
 800f776:	4311      	orrs	r1, r2
 800f778:	ea41 0108 	orr.w	r1, r1, r8
 800f77c:	4331      	orrs	r1, r6
 800f77e:	4329      	orrs	r1, r5
 800f780:	f040 809a 	bne.w	800f8b8 <jpeg_idct_islow+0x1f8>
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 800f784:	9901      	ldr	r1, [sp, #4]
				  & RANGE_MASK];
 800f786:	f3c7 1249 	ubfx	r2, r7, #5, #10

      outptr[0] = dcval;
 800f78a:	9850      	ldr	r0, [sp, #320]	; 0x140
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 800f78c:	5c8a      	ldrb	r2, [r1, r2]
      outptr[0] = dcval;
 800f78e:	9903      	ldr	r1, [sp, #12]
 800f790:	540a      	strb	r2, [r1, r0]
      outptr[1] = dcval;
 800f792:	705a      	strb	r2, [r3, #1]
      outptr[2] = dcval;
 800f794:	709a      	strb	r2, [r3, #2]
      outptr[3] = dcval;
 800f796:	70da      	strb	r2, [r3, #3]
      outptr[4] = dcval;
 800f798:	711a      	strb	r2, [r3, #4]
      outptr[5] = dcval;
 800f79a:	715a      	strb	r2, [r3, #5]
      outptr[6] = dcval;
 800f79c:	719a      	strb	r2, [r3, #6]
      outptr[7] = dcval;
 800f79e:	71da      	strb	r2, [r3, #7]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800f7a0:	9b05      	ldr	r3, [sp, #20]
 800f7a2:	454b      	cmp	r3, r9
 800f7a4:	d1d1      	bne.n	800f74a <jpeg_idct_islow+0x8a>
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}
 800f7a6:	b047      	add	sp, #284	; 0x11c
 800f7a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f7ac:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800f7ae:	f8d0 50bc 	ldr.w	r5, [r0, #188]	; 0xbc
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f7b2:	4366      	muls	r6, r4
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 800f7b4:	f241 1451 	movw	r4, #4433	; 0x1151
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800f7b8:	435d      	muls	r5, r3
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 800f7ba:	1973      	adds	r3, r6, r5
 800f7bc:	4363      	muls	r3, r4
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 800f7be:	f641 047e 	movw	r4, #6270	; 0x187e
 800f7c2:	fb04 3606 	mla	r6, r4, r6, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 800f7c6:	4c7b      	ldr	r4, [pc, #492]	; (800f9b4 <jpeg_idct_islow+0x2f4>)
 800f7c8:	fb04 3505 	mla	r5, r4, r5, r3
    z2 <<= CONST_BITS;
 800f7cc:	037b      	lsls	r3, r7, #13
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800f7ce:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 800f7d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800f7d4:	fb04 f40e 	mul.w	r4, r4, lr
    tmp0 = z2 + z3;
 800f7d8:	eb03 3b44 	add.w	fp, r3, r4, lsl #13
    tmp1 = z2 - z3;
 800f7dc:	eba3 3344 	sub.w	r3, r3, r4, lsl #13
    tmp13 = tmp0 - tmp2;
 800f7e0:	ebab 0406 	sub.w	r4, fp, r6
    tmp10 = tmp0 + tmp2;
 800f7e4:	eb06 070b 	add.w	r7, r6, fp
    tmp11 = tmp1 + tmp3;
 800f7e8:	18ee      	adds	r6, r5, r3
    tmp12 = tmp1 - tmp3;
 800f7ea:	1b5b      	subs	r3, r3, r5
    tmp13 = tmp0 - tmp2;
 800f7ec:	9402      	str	r4, [sp, #8]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800f7ee:	f8d0 40dc 	ldr.w	r4, [r0, #220]	; 0xdc
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f7f2:	69c5      	ldr	r5, [r0, #28]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800f7f4:	fb04 f909 	mul.w	r9, r4, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800f7f8:	f8d0 409c 	ldr.w	r4, [r0, #156]	; 0x9c
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f7fc:	fb05 fa0a 	mul.w	sl, r5, sl
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800f800:	fb04 f808 	mul.w	r8, r4, r8
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800f804:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
    tmp12 = tmp1 - tmp3;
 800f806:	9303      	str	r3, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 800f808:	f242 53a1 	movw	r3, #9633	; 0x25a1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800f80c:	fb04 fc0c 	mul.w	ip, r4, ip
    z3 = tmp1 + tmp3;
 800f810:	eb08 0e0a 	add.w	lr, r8, sl
    z2 = tmp0 + tmp2;
 800f814:	eb09 050c 	add.w	r5, r9, ip
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 800f818:	eb05 040e 	add.w	r4, r5, lr
 800f81c:	435c      	muls	r4, r3
    z2 += z1;
 800f81e:	4b66      	ldr	r3, [pc, #408]	; (800f9b8 <jpeg_idct_islow+0x2f8>)
 800f820:	fb03 4505 	mla	r5, r3, r5, r4
    z3 += z1;
 800f824:	4b65      	ldr	r3, [pc, #404]	; (800f9bc <jpeg_idct_islow+0x2fc>)
 800f826:	fb03 440e 	mla	r4, r3, lr, r4
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 800f82a:	eb09 0e0a 	add.w	lr, r9, sl
 800f82e:	4b64      	ldr	r3, [pc, #400]	; (800f9c0 <jpeg_idct_islow+0x300>)
 800f830:	fb03 fe0e 	mul.w	lr, r3, lr
    tmp0 += z1 + z2;
 800f834:	f640 138e 	movw	r3, #2446	; 0x98e
 800f838:	eb05 0b0e 	add.w	fp, r5, lr
    tmp3 += z1 + z3;
 800f83c:	44a6      	add	lr, r4
    tmp0 += z1 + z2;
 800f83e:	fb03 b909 	mla	r9, r3, r9, fp
    tmp3 += z1 + z3;
 800f842:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 800f846:	4b5f      	ldr	r3, [pc, #380]	; (800f9c4 <jpeg_idct_islow+0x304>)
    tmp3 += z1 + z3;
 800f848:	fb0b ee0a 	mla	lr, fp, sl, lr
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 800f84c:	eb08 0a0c 	add.w	sl, r8, ip
    tmp1 += z1 + z3;
 800f850:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 800f854:	fb03 fa0a 	mul.w	sl, r3, sl
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 800f858:	9b03      	ldr	r3, [sp, #12]
    tmp2 += z1 + z2;
 800f85a:	4455      	add	r5, sl
    tmp1 += z1 + z3;
 800f85c:	4454      	add	r4, sl
    tmp2 += z1 + z2;
 800f85e:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 800f862:	fb0b 4408 	mla	r4, fp, r8, r4
    tmp2 += z1 + z2;
 800f866:	fb0a 5a0c 	mla	sl, sl, ip, r5
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 800f86a:	eb07 050e 	add.w	r5, r7, lr
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 800f86e:	eba7 0e0e 	sub.w	lr, r7, lr
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 800f872:	12ed      	asrs	r5, r5, #11
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 800f874:	ea4f 27ee 	mov.w	r7, lr, asr #11
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 800f878:	f841 5c04 	str.w	r5, [r1, #-4]
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 800f87c:	eb06 050a 	add.w	r5, r6, sl
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 800f880:	eba6 0a0a 	sub.w	sl, r6, sl
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 800f884:	f8c1 70dc 	str.w	r7, [r1, #220]	; 0xdc
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 800f888:	12ed      	asrs	r5, r5, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 800f88a:	ea4f 26ea 	mov.w	r6, sl, asr #11
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 800f88e:	61cd      	str	r5, [r1, #28]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 800f890:	191d      	adds	r5, r3, r4
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 800f892:	1b1c      	subs	r4, r3, r4
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 800f894:	9b02      	ldr	r3, [sp, #8]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 800f896:	12ed      	asrs	r5, r5, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 800f898:	f8c1 60bc 	str.w	r6, [r1, #188]	; 0xbc
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 800f89c:	444b      	add	r3, r9
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 800f89e:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 800f8a0:	63cd      	str	r5, [r1, #60]	; 0x3c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 800f8a2:	12db      	asrs	r3, r3, #11
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 800f8a4:	f8c1 409c 	str.w	r4, [r1, #156]	; 0x9c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 800f8a8:	65cb      	str	r3, [r1, #92]	; 0x5c
    wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 800f8aa:	9b02      	ldr	r3, [sp, #8]
 800f8ac:	eba3 0909 	sub.w	r9, r3, r9
 800f8b0:	ea4f 23e9 	mov.w	r3, r9, asr #11
 800f8b4:	67cb      	str	r3, [r1, #124]	; 0x7c
    wsptr++;
 800f8b6:	e73e      	b.n	800f736 <jpeg_idct_islow+0x76>
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 800f8b8:	1981      	adds	r1, r0, r6
 800f8ba:	f241 1451 	movw	r4, #4433	; 0x1151
    z3 = tmp1 + tmp3;
 800f8be:	eb0a 0c08 	add.w	ip, sl, r8
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 800f8c2:	4361      	muls	r1, r4
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 800f8c4:	f641 047e 	movw	r4, #6270	; 0x187e
 800f8c8:	fb04 1000 	mla	r0, r4, r0, r1
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 800f8cc:	4c39      	ldr	r4, [pc, #228]	; (800f9b4 <jpeg_idct_islow+0x2f4>)
 800f8ce:	fb04 1106 	mla	r1, r4, r6, r1
    tmp0 = (z2 + z3) << CONST_BITS;
 800f8d2:	19d6      	adds	r6, r2, r7
    tmp1 = (z2 - z3) << CONST_BITS;
 800f8d4:	1aba      	subs	r2, r7, r2
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 800f8d6:	f242 54a1 	movw	r4, #9633	; 0x25a1
    tmp10 = tmp0 + tmp2;
 800f8da:	eb00 3746 	add.w	r7, r0, r6, lsl #13
    tmp13 = tmp0 - tmp2;
 800f8de:	ebc0 3646 	rsb	r6, r0, r6, lsl #13
    tmp11 = tmp1 + tmp3;
 800f8e2:	eb01 3042 	add.w	r0, r1, r2, lsl #13
    tmp12 = tmp1 - tmp3;
 800f8e6:	ebc1 3242 	rsb	r2, r1, r2, lsl #13
    tmp11 = tmp1 + tmp3;
 800f8ea:	9004      	str	r0, [sp, #16]
    z2 = tmp0 + tmp2;
 800f8ec:	eb0e 0005 	add.w	r0, lr, r5
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 800f8f0:	eb00 010c 	add.w	r1, r0, ip
 800f8f4:	4361      	muls	r1, r4
    z2 += z1;
 800f8f6:	4c30      	ldr	r4, [pc, #192]	; (800f9b8 <jpeg_idct_islow+0x2f8>)
 800f8f8:	fb04 1000 	mla	r0, r4, r0, r1
    z3 += z1;
 800f8fc:	4c2f      	ldr	r4, [pc, #188]	; (800f9bc <jpeg_idct_islow+0x2fc>)
 800f8fe:	fb04 110c 	mla	r1, r4, ip, r1
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 800f902:	eb0a 0c05 	add.w	ip, sl, r5
 800f906:	4c2e      	ldr	r4, [pc, #184]	; (800f9c0 <jpeg_idct_islow+0x300>)
 800f908:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp0 += z1 + z2;
 800f90c:	f640 148e 	movw	r4, #2446	; 0x98e
 800f910:	eb00 0b0c 	add.w	fp, r0, ip
    tmp3 += z1 + z3;
 800f914:	448c      	add	ip, r1
    tmp0 += z1 + z2;
 800f916:	fb04 b505 	mla	r5, r4, r5, fp
    tmp3 += z1 + z3;
 800f91a:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 800f91e:	4c29      	ldr	r4, [pc, #164]	; (800f9c4 <jpeg_idct_islow+0x304>)
    tmp3 += z1 + z3;
 800f920:	fb0b cc0a 	mla	ip, fp, sl, ip
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 800f924:	eb0e 0a08 	add.w	sl, lr, r8
    tmp1 += z1 + z3;
 800f928:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 800f92c:	fb04 fa0a 	mul.w	sl, r4, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 800f930:	9c01      	ldr	r4, [sp, #4]
    tmp1 += z1 + z3;
 800f932:	4451      	add	r1, sl
    tmp2 += z1 + z2;
 800f934:	4450      	add	r0, sl
 800f936:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 800f93a:	fb0b 1108 	mla	r1, fp, r8, r1
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 800f93e:	eb07 080c 	add.w	r8, r7, ip
    tmp2 += z1 + z2;
 800f942:	fb0a 000e 	mla	r0, sl, lr, r0
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 800f946:	eba7 0c0c 	sub.w	ip, r7, ip
			    & RANGE_MASK];
 800f94a:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 800f94e:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 800f952:	f814 e008 	ldrb.w	lr, [r4, r8]
 800f956:	9c03      	ldr	r4, [sp, #12]
 800f958:	46a0      	mov	r8, r4
 800f95a:	9c50      	ldr	r4, [sp, #320]	; 0x140
 800f95c:	f808 e004 	strb.w	lr, [r8, r4]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 800f960:	9c01      	ldr	r4, [sp, #4]
 800f962:	f814 700c 	ldrb.w	r7, [r4, ip]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 800f966:	9c04      	ldr	r4, [sp, #16]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 800f968:	71df      	strb	r7, [r3, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 800f96a:	1827      	adds	r7, r4, r0
 800f96c:	9c01      	ldr	r4, [sp, #4]
			    & RANGE_MASK];
 800f96e:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 800f972:	5de7      	ldrb	r7, [r4, r7]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 800f974:	9c04      	ldr	r4, [sp, #16]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 800f976:	705f      	strb	r7, [r3, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 800f978:	1a20      	subs	r0, r4, r0
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 800f97a:	9c01      	ldr	r4, [sp, #4]
			    & RANGE_MASK];
 800f97c:	f3c0 4a89 	ubfx	sl, r0, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 800f980:	9801      	ldr	r0, [sp, #4]
 800f982:	f810 000a 	ldrb.w	r0, [r0, sl]
 800f986:	7198      	strb	r0, [r3, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 800f988:	1850      	adds	r0, r2, r1
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 800f98a:	1a51      	subs	r1, r2, r1
			    & RANGE_MASK];
 800f98c:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 800f990:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 800f994:	5c20      	ldrb	r0, [r4, r0]
 800f996:	7098      	strb	r0, [r3, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 800f998:	5c62      	ldrb	r2, [r4, r1]
 800f99a:	715a      	strb	r2, [r3, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 800f99c:	1972      	adds	r2, r6, r5
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 800f99e:	1b75      	subs	r5, r6, r5
			    & RANGE_MASK];
 800f9a0:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 800f9a4:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 800f9a8:	5ca2      	ldrb	r2, [r4, r2]
 800f9aa:	70da      	strb	r2, [r3, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 800f9ac:	5d62      	ldrb	r2, [r4, r5]
 800f9ae:	711a      	strb	r2, [r3, #4]
    wsptr += DCTSIZE;		/* advance pointer to next row */
 800f9b0:	e6f6      	b.n	800f7a0 <jpeg_idct_islow+0xe0>
 800f9b2:	bf00      	nop
 800f9b4:	ffffc4df 	.word	0xffffc4df
 800f9b8:	ffffc13b 	.word	0xffffc13b
 800f9bc:	fffff384 	.word	0xfffff384
 800f9c0:	ffffe333 	.word	0xffffe333
 800f9c4:	ffffadfd 	.word	0xffffadfd

0800f9c8 <jpeg_idct_7x7>:

GLOBAL(void)
jpeg_idct_7x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800f9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9cc:	b0b9      	sub	sp, #228	; 0xe4
 800f9ce:	6d4e      	ldr	r6, [r1, #84]	; 0x54
 800f9d0:	1e97      	subs	r7, r2, #2
 800f9d2:	9304      	str	r3, [sp, #16]
 800f9d4:	3e04      	subs	r6, #4
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800f9d6:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 800f9da:	f10d 0c1c 	add.w	ip, sp, #28
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800f9de:	3380      	adds	r3, #128	; 0x80
 800f9e0:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 800f9e2:	f102 030c 	add.w	r3, r2, #12
 800f9e6:	9305      	str	r3, [sp, #20]
    /* Even part */

    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f9e8:	f937 2f02 	ldrsh.w	r2, [r7, #2]!
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 800f9ec:	f640 2412 	movw	r4, #2578	; 0xa12
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f9f0:	f856 3f04 	ldr.w	r3, [r6, #4]!
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
    tmp0 = z1 + z3;
    z2 -= tmp0;
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 800f9f4:	f642 09c6 	movw	r9, #10438	; 0x28c6
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 800f9f8:	f10c 0c04 	add.w	ip, ip, #4
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f9fc:	4353      	muls	r3, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f9fe:	6c30      	ldr	r0, [r6, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800fa00:	f8d6 1080 	ldr.w	r1, [r6, #128]	; 0x80
    tmp13 <<= CONST_BITS;
 800fa04:	035b      	lsls	r3, r3, #13
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800fa06:	f8d6 20c0 	ldr.w	r2, [r6, #192]	; 0xc0
    tmp13 += ONE << (CONST_BITS-PASS1_BITS-1);
 800fa0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fa0e:	9302      	str	r3, [sp, #8]
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800fa10:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fa14:	4358      	muls	r0, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800fa16:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800fa1a:	4359      	muls	r1, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800fa1c:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 800fa20:	435a      	muls	r2, r3
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 800fa22:	f641 4337 	movw	r3, #7223	; 0x1c37
 800fa26:	eba1 0e02 	sub.w	lr, r1, r2
    tmp0 = z1 + z3;
 800fa2a:	eb00 0802 	add.w	r8, r0, r2
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 800fa2e:	fb03 fe0e 	mul.w	lr, r3, lr
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 800fa32:	1a43      	subs	r3, r0, r1
 800fa34:	fb04 f503 	mul.w	r5, r4, r3
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 800fa38:	9b02      	ldr	r3, [sp, #8]
 800fa3a:	eb0e 0405 	add.w	r4, lr, r5
 800fa3e:	441c      	add	r4, r3
 800fa40:	4b86      	ldr	r3, [pc, #536]	; (800fc5c <jpeg_idct_7x7+0x294>)
 800fa42:	fb03 4401 	mla	r4, r3, r1, r4
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 800fa46:	9b02      	ldr	r3, [sp, #8]
    z2 -= tmp0;
 800fa48:	eba1 0108 	sub.w	r1, r1, r8
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 800fa4c:	fb09 3308 	mla	r3, r9, r8, r3
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 800fa50:	f46f 791f 	mvn.w	r9, #636	; 0x27c
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 800fa54:	f642 5841 	movw	r8, #11585	; 0x2d41
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 800fa58:	fb09 3202 	mla	r2, r9, r2, r3

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fa5c:	f9b7 9010 	ldrsh.w	r9, [r7, #16]
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 800fa60:	4472      	add	r2, lr
 800fa62:	9203      	str	r2, [sp, #12]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 800fa64:	4a7e      	ldr	r2, [pc, #504]	; (800fc60 <jpeg_idct_7x7+0x298>)
 800fa66:	fb02 3300 	mla	r3, r2, r0, r3
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fa6a:	6a30      	ldr	r0, [r6, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800fa6c:	f8d6 20a0 	ldr.w	r2, [r6, #160]	; 0xa0
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 800fa70:	442b      	add	r3, r5
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fa72:	fb00 f909 	mul.w	r9, r0, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800fa76:	6e35      	ldr	r5, [r6, #96]	; 0x60
 800fa78:	f9b7 0030 	ldrsh.w	r0, [r7, #48]	; 0x30
 800fa7c:	4345      	muls	r5, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800fa7e:	f9b7 0050 	ldrsh.w	r0, [r7, #80]	; 0x50

    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 800fa82:	eb09 0e05 	add.w	lr, r9, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800fa86:	4350      	muls	r0, r2
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 800fa88:	f641 52ef 	movw	r2, #7663	; 0x1def
 800fa8c:	fb02 fb0e 	mul.w	fp, r2, lr
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 800fa90:	eba9 0e05 	sub.w	lr, r9, r5
 800fa94:	f240 5273 	movw	r2, #1395	; 0x573
    tmp0 = tmp1 - tmp2;
    tmp1 += tmp2;
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
    tmp1 += tmp2;
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 800fa98:	4481      	add	r9, r0
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 800fa9a:	4405      	add	r5, r0
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 800fa9c:	fb02 fe0e 	mul.w	lr, r2, lr
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 800faa0:	4a70      	ldr	r2, [pc, #448]	; (800fc64 <jpeg_idct_7x7+0x29c>)
    tmp0 = tmp1 - tmp2;
 800faa2:	ebab 0a0e 	sub.w	sl, fp, lr
    tmp1 += tmp2;
 800faa6:	44de      	add	lr, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 800faa8:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 800faac:	4355      	muls	r5, r2
    tmp0 += z2;
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */

    /* Final output stage */

    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800faae:	9a03      	ldr	r2, [sp, #12]
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 800fab0:	fb0b f909 	mul.w	r9, fp, r9
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 800fab4:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp1 += tmp2;
 800fab8:	44ae      	add	lr, r5
    tmp0 += z2;
 800faba:	44ca      	add	sl, r9
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 800fabc:	fb0b 9900 	mla	r9, fp, r0, r9
    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800fac0:	eb02 000a 	add.w	r0, r2, sl
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800fac4:	eba2 0a0a 	sub.w	sl, r2, sl
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 800fac8:	444d      	add	r5, r9
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800faca:	ea4f 22ea 	mov.w	r2, sl, asr #11
    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800face:	12c0      	asrs	r0, r0, #11
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800fad0:	f8cc 20a4 	str.w	r2, [ip, #164]	; 0xa4
    wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 800fad4:	eb04 020e 	add.w	r2, r4, lr
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 800fad8:	eba4 040e 	sub.w	r4, r4, lr
    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800fadc:	f84c 0c04 	str.w	r0, [ip, #-4]
    wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 800fae0:	12d2      	asrs	r2, r2, #11
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 800fae2:	12e4      	asrs	r4, r4, #11
    wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 800fae4:	f8cc 2018 	str.w	r2, [ip, #24]
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 800fae8:	195a      	adds	r2, r3, r5
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 800faea:	1b5d      	subs	r5, r3, r5
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 800faec:	9b02      	ldr	r3, [sp, #8]
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 800faee:	12d2      	asrs	r2, r2, #11
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 800faf0:	f8cc 4088 	str.w	r4, [ip, #136]	; 0x88
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 800faf4:	fb08 3101 	mla	r1, r8, r1, r3
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 800faf8:	9b05      	ldr	r3, [sp, #20]
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 800fafa:	12ed      	asrs	r5, r5, #11
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 800fafc:	f8cc 2034 	str.w	r2, [ip, #52]	; 0x34
    wsptr[7*3] = (int) RIGHT_SHIFT(tmp13, CONST_BITS-PASS1_BITS);
 800fb00:	12c9      	asrs	r1, r1, #11
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 800fb02:	42bb      	cmp	r3, r7
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 800fb04:	f8cc 506c 	str.w	r5, [ip, #108]	; 0x6c
    wsptr[7*3] = (int) RIGHT_SHIFT(tmp13, CONST_BITS-PASS1_BITS);
 800fb08:	f8cc 1050 	str.w	r1, [ip, #80]	; 0x50
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 800fb0c:	f47f af6c 	bne.w	800f9e8 <jpeg_idct_7x7+0x20>
 800fb10:	9b04      	ldr	r3, [sp, #16]
  }

  /* Pass 2: process 7 rows from work array, store into output array. */

  wsptr = workspace;
 800fb12:	a807      	add	r0, sp, #28
 800fb14:	f1a3 0904 	sub.w	r9, r3, #4
 800fb18:	3318      	adds	r3, #24
 800fb1a:	9304      	str	r3, [sp, #16]
  for (ctr = 0; ctr < 7; ctr++) {
    outptr = output_buf[ctr] + output_col;
 800fb1c:	f859 3f04 	ldr.w	r3, [r9, #4]!
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 7;		/* advance pointer to next row */
 800fb20:	301c      	adds	r0, #28
    outptr = output_buf[ctr] + output_col;
 800fb22:	9a42      	ldr	r2, [sp, #264]	; 0x108
    z3 = (INT32) wsptr[6];
 800fb24:	f850 5c04 	ldr.w	r5, [r0, #-4]
    outptr = output_buf[ctr] + output_col;
 800fb28:	189e      	adds	r6, r3, r2
 800fb2a:	9303      	str	r3, [sp, #12]
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 800fb2c:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    z1 = (INT32) wsptr[2];
 800fb30:	f850 4c14 	ldr.w	r4, [r0, #-20]
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 800fb34:	1b5a      	subs	r2, r3, r5
 800fb36:	f641 4337 	movw	r3, #7223	; 0x1c37
    tmp13 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 800fb3a:	f850 7c1c 	ldr.w	r7, [r0, #-28]
    tmp0 = z1 + z3;
 800fb3e:	eb04 0805 	add.w	r8, r4, r5
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 800fb42:	fb03 fe02 	mul.w	lr, r3, r2
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 800fb46:	f850 3c0c 	ldr.w	r3, [r0, #-12]
 800fb4a:	f640 2212 	movw	r2, #2578	; 0xa12
    tmp13 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 800fb4e:	3710      	adds	r7, #16
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 800fb50:	1ae3      	subs	r3, r4, r3
    z2 = (INT32) wsptr[3];
 800fb52:	f850 ac10 	ldr.w	sl, [r0, #-16]
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 800fb56:	fb02 fc03 	mul.w	ip, r2, r3
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 800fb5a:	f850 3c0c 	ldr.w	r3, [r0, #-12]
 800fb5e:	eb0e 010c 	add.w	r1, lr, ip
 800fb62:	461a      	mov	r2, r3
 800fb64:	4b3d      	ldr	r3, [pc, #244]	; (800fc5c <jpeg_idct_7x7+0x294>)
 800fb66:	eb01 3147 	add.w	r1, r1, r7, lsl #13
 800fb6a:	fb03 1102 	mla	r1, r3, r2, r1
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 800fb6e:	f642 03c6 	movw	r3, #10438	; 0x28c6
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 800fb72:	f46f 721f 	mvn.w	r2, #636	; 0x27c
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 800fb76:	fb03 f308 	mul.w	r3, r3, r8
 800fb7a:	eb03 3347 	add.w	r3, r3, r7, lsl #13
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 800fb7e:	fb02 3205 	mla	r2, r2, r5, r3
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 800fb82:	4d37      	ldr	r5, [pc, #220]	; (800fc60 <jpeg_idct_7x7+0x298>)
 800fb84:	fb05 3304 	mla	r3, r5, r4, r3
    z3 = (INT32) wsptr[5];
 800fb88:	f850 5c08 	ldr.w	r5, [r0, #-8]
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 800fb8c:	4472      	add	r2, lr
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 800fb8e:	4463      	add	r3, ip
    z1 = (INT32) wsptr[1];
 800fb90:	f850 cc18 	ldr.w	ip, [r0, #-24]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 800fb94:	9302      	str	r3, [sp, #8]
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 800fb96:	eb0c 040a 	add.w	r4, ip, sl
 800fb9a:	f641 53ef 	movw	r3, #7663	; 0x1def
 800fb9e:	fb03 fb04 	mul.w	fp, r3, r4
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 800fba2:	ebac 040a 	sub.w	r4, ip, sl
 800fba6:	f240 5373 	movw	r3, #1395	; 0x573
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 800fbaa:	44ac      	add	ip, r5
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 800fbac:	44aa      	add	sl, r5
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 800fbae:	435c      	muls	r4, r3
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 800fbb0:	4b2c      	ldr	r3, [pc, #176]	; (800fc64 <jpeg_idct_7x7+0x29c>)
    tmp0 = tmp1 - tmp2;
 800fbb2:	ebab 0e04 	sub.w	lr, fp, r4
    tmp1 += tmp2;
 800fbb6:	445c      	add	r4, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 800fbb8:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 800fbbc:	fb03 fa0a 	mul.w	sl, r3, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800fbc0:	9b01      	ldr	r3, [sp, #4]
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 800fbc2:	fb0b fc0c 	mul.w	ip, fp, ip
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 800fbc6:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp1 += tmp2;
 800fbca:	4454      	add	r4, sl
    tmp0 += z2;
 800fbcc:	44e6      	add	lr, ip
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 800fbce:	fb0b cc05 	mla	ip, fp, r5, ip
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800fbd2:	eb02 050e 	add.w	r5, r2, lr
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 800fbd6:	44e2      	add	sl, ip
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 800fbd8:	eba2 0e0e 	sub.w	lr, r2, lr
			    & RANGE_MASK];
 800fbdc:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 800fbe0:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800fbe4:	5d5d      	ldrb	r5, [r3, r5]
 800fbe6:	9b03      	ldr	r3, [sp, #12]
 800fbe8:	469c      	mov	ip, r3
 800fbea:	9b42      	ldr	r3, [sp, #264]	; 0x108
 800fbec:	f80c 5003 	strb.w	r5, [ip, r3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 800fbf0:	9b01      	ldr	r3, [sp, #4]
 800fbf2:	f813 200e 	ldrb.w	r2, [r3, lr]
 800fbf6:	71b2      	strb	r2, [r6, #6]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 800fbf8:	190a      	adds	r2, r1, r4
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 800fbfa:	1b09      	subs	r1, r1, r4
			    & RANGE_MASK];
 800fbfc:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 800fc00:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 800fc04:	5c9a      	ldrb	r2, [r3, r2]
 800fc06:	7072      	strb	r2, [r6, #1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 800fc08:	5c5a      	ldrb	r2, [r3, r1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 800fc0a:	9b02      	ldr	r3, [sp, #8]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 800fc0c:	7172      	strb	r2, [r6, #5]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 800fc0e:	eb03 020a 	add.w	r2, r3, sl
 800fc12:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 800fc14:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 800fc18:	5c9a      	ldrb	r2, [r3, r2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 800fc1a:	9b02      	ldr	r3, [sp, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 800fc1c:	70b2      	strb	r2, [r6, #2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 800fc1e:	eba3 0a0a 	sub.w	sl, r3, sl
 800fc22:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 800fc24:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 800fc28:	f813 300a 	ldrb.w	r3, [r3, sl]
 800fc2c:	7133      	strb	r3, [r6, #4]
    z2 -= tmp0;
 800fc2e:	f850 3c0c 	ldr.w	r3, [r0, #-12]
 800fc32:	eba3 0808 	sub.w	r8, r3, r8
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 800fc36:	f642 5341 	movw	r3, #11585	; 0x2d41
 800fc3a:	fb03 f808 	mul.w	r8, r3, r8
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
 800fc3e:	9b01      	ldr	r3, [sp, #4]
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 800fc40:	eb08 3847 	add.w	r8, r8, r7, lsl #13
			    & RANGE_MASK];
 800fc44:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
 800fc48:	f813 3008 	ldrb.w	r3, [r3, r8]
 800fc4c:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 7; ctr++) {
 800fc4e:	9b04      	ldr	r3, [sp, #16]
 800fc50:	454b      	cmp	r3, r9
 800fc52:	f47f af63 	bne.w	800fb1c <jpeg_idct_7x7+0x154>
  }
}
 800fc56:	b039      	add	sp, #228	; 0xe4
 800fc58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc5c:	ffffc515 	.word	0xffffc515
 800fc60:	ffffb0f1 	.word	0xffffb0f1
 800fc64:	ffffd3e1 	.word	0xffffd3e1

0800fc68 <jpeg_idct_6x6>:

GLOBAL(void)
jpeg_idct_6x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800fc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800fc6c:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 800fc70:	b0a7      	sub	sp, #156	; 0x9c
 800fc72:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 800fc74:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800fc76:	3080      	adds	r0, #128	; 0x80
 800fc78:	320a      	adds	r2, #10
 800fc7a:	3d04      	subs	r5, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 800fc7c:	af02      	add	r7, sp, #8
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800fc7e:	9000      	str	r0, [sp, #0]
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 800fc80:	9201      	str	r2, [sp, #4]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800fc82:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
    tmp1 = tmp0 + tmp10;
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 800fc86:	f242 7031 	movw	r0, #10033	; 0x2731
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800fc8a:	f855 1f04 	ldr.w	r1, [r5, #4]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 800fc8e:	3704      	adds	r7, #4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800fc90:	f9b6 4040 	ldrsh.w	r4, [r6, #64]	; 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800fc94:	4351      	muls	r1, r2
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800fc96:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800fc9a:	f9b6 c020 	ldrsh.w	ip, [r6, #32]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800fc9e:	4362      	muls	r2, r4
    tmp0 <<= CONST_BITS;
 800fca0:	0349      	lsls	r1, r1, #13
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 800fca2:	f241 64a1 	movw	r4, #5793	; 0x16a1
    tmp12 = tmp1 - tmp0;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800fca6:	f9b6 9030 	ldrsh.w	r9, [r6, #48]	; 0x30
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 800fcaa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800fcae:	f9b6 8050 	ldrsh.w	r8, [r6, #80]	; 0x50
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 800fcb2:	4362      	muls	r2, r4
    tmp1 = tmp0 + tmp10;
 800fcb4:	188c      	adds	r4, r1, r2
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
 800fcb6:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800fcba:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800fcbc:	fb02 f20c 	mul.w	r2, r2, ip
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fcc0:	f9b6 c010 	ldrsh.w	ip, [r6, #16]
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 800fcc4:	4342      	muls	r2, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800fcc6:	6e28      	ldr	r0, [r5, #96]	; 0x60
    tmp10 = tmp1 + tmp0;
 800fcc8:	eb04 0e02 	add.w	lr, r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800fccc:	fb00 f909 	mul.w	r9, r0, r9
    tmp12 = tmp1 - tmp0;
 800fcd0:	1aa4      	subs	r4, r4, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800fcd2:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fcd6:	6a2a      	ldr	r2, [r5, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800fcd8:	fb00 f808 	mul.w	r8, r0, r8
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 800fcdc:	f640 30b6 	movw	r0, #2998	; 0xbb6
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fce0:	fb02 f20c 	mul.w	r2, r2, ip
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 800fce4:	eba8 0b09 	sub.w	fp, r8, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 800fce8:	eb02 0c08 	add.w	ip, r2, r8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 800fcec:	eb02 0a09 	add.w	sl, r2, r9
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 800fcf0:	eba2 0209 	sub.w	r2, r2, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 800fcf4:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 800fcf8:	eba2 0808 	sub.w	r8, r2, r8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 800fcfc:	eb0c 3a4a 	add.w	sl, ip, sl, lsl #13
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 800fd00:	ea4f 0888 	mov.w	r8, r8, lsl #2

    /* Final output stage */

    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800fd04:	eb0e 020a 	add.w	r2, lr, sl
    wsptr[6*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800fd08:	ebae 0e0a 	sub.w	lr, lr, sl
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 800fd0c:	eb0c 3c4b 	add.w	ip, ip, fp, lsl #13
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800fd10:	12d2      	asrs	r2, r2, #11
 800fd12:	f847 2c04 	str.w	r2, [r7, #-4]
    wsptr[6*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800fd16:	ea4f 22ee 	mov.w	r2, lr, asr #11
 800fd1a:	677a      	str	r2, [r7, #116]	; 0x74
    wsptr[6*1] = (int) (tmp11 + tmp1);
 800fd1c:	eb08 22e1 	add.w	r2, r8, r1, asr #11
    wsptr[6*4] = (int) (tmp11 - tmp1);
 800fd20:	ebc8 21e1 	rsb	r1, r8, r1, asr #11
    wsptr[6*1] = (int) (tmp11 + tmp1);
 800fd24:	617a      	str	r2, [r7, #20]
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 800fd26:	eb04 020c 	add.w	r2, r4, ip
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 800fd2a:	eba4 0c0c 	sub.w	ip, r4, ip
    wsptr[6*4] = (int) (tmp11 - tmp1);
 800fd2e:	65f9      	str	r1, [r7, #92]	; 0x5c
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 800fd30:	12d2      	asrs	r2, r2, #11
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 800fd32:	ea4f 24ec 	mov.w	r4, ip, asr #11
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 800fd36:	62fa      	str	r2, [r7, #44]	; 0x2c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 800fd38:	9a01      	ldr	r2, [sp, #4]
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 800fd3a:	647c      	str	r4, [r7, #68]	; 0x44
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 800fd3c:	42b2      	cmp	r2, r6
 800fd3e:	d1a0      	bne.n	800fc82 <jpeg_idct_6x6+0x1a>
 800fd40:	f1a3 0e04 	sub.w	lr, r3, #4
 800fd44:	f103 0914 	add.w	r9, r3, #20
  }

  /* Pass 2: process 6 rows from work array, store into output array. */

  wsptr = workspace;
 800fd48:	a902      	add	r1, sp, #8
  for (ctr = 0; ctr < 6; ctr++) {
    outptr = output_buf[ctr] + output_col;
 800fd4a:	f85e af04 	ldr.w	sl, [lr, #4]!

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[4];
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 800fd4e:	f241 60a1 	movw	r0, #5793	; 0x16a1
    outptr = output_buf[ctr] + output_col;
 800fd52:	9b30      	ldr	r3, [sp, #192]	; 0xc0
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 800fd54:	3118      	adds	r1, #24
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 800fd56:	f851 2c08 	ldr.w	r2, [r1, #-8]
  for (ctr = 0; ctr < 6; ctr++) {
 800fd5a:	45f1      	cmp	r9, lr
    outptr = output_buf[ctr] + output_col;
 800fd5c:	eb0a 0703 	add.w	r7, sl, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 800fd60:	f851 3c18 	ldr.w	r3, [r1, #-24]
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 800fd64:	fb00 f202 	mul.w	r2, r0, r2
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 800fd68:	f851 4c10 	ldr.w	r4, [r1, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 800fd6c:	f103 0310 	add.w	r3, r3, #16
    z3 = (INT32) wsptr[5];
 800fd70:	f851 8c04 	ldr.w	r8, [r1, #-4]
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 800fd74:	f640 30b6 	movw	r0, #2998	; 0xbb6
    tmp1 = tmp0 + tmp10;
 800fd78:	eb02 3543 	add.w	r5, r2, r3, lsl #13
    tmp11 = tmp0 - tmp10 - tmp10;
 800fd7c:	ebc2 3343 	rsb	r3, r2, r3, lsl #13
 800fd80:	eba3 0302 	sub.w	r3, r3, r2
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 800fd84:	f242 7231 	movw	r2, #10033	; 0x2731
 800fd88:	fb02 f204 	mul.w	r2, r2, r4
    z1 = (INT32) wsptr[1];
 800fd8c:	f851 4c14 	ldr.w	r4, [r1, #-20]
    tmp10 = tmp1 + tmp0;
 800fd90:	eb05 0602 	add.w	r6, r5, r2
    tmp12 = tmp1 - tmp0;
 800fd94:	eba5 0202 	sub.w	r2, r5, r2
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 800fd98:	eb04 0508 	add.w	r5, r4, r8
 800fd9c:	fb00 f505 	mul.w	r5, r0, r5
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 800fda0:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 800fda4:	eb04 0c00 	add.w	ip, r4, r0
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 800fda8:	eba4 0400 	sub.w	r4, r4, r0
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 800fdac:	eba8 0b00 	sub.w	fp, r8, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800fdb0:	9800      	ldr	r0, [sp, #0]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 800fdb2:	eb05 3c4c 	add.w	ip, r5, ip, lsl #13
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 800fdb6:	eba4 0808 	sub.w	r8, r4, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 800fdba:	eb05 354b 	add.w	r5, r5, fp, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800fdbe:	eb06 040c 	add.w	r4, r6, ip
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 800fdc2:	eba6 060c 	sub.w	r6, r6, ip
			    & RANGE_MASK];
 800fdc6:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 800fdca:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800fdce:	5d04      	ldrb	r4, [r0, r4]
 800fdd0:	9830      	ldr	r0, [sp, #192]	; 0xc0
 800fdd2:	f80a 4000 	strb.w	r4, [sl, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 800fdd6:	9800      	ldr	r0, [sp, #0]
 800fdd8:	5d84      	ldrb	r4, [r0, r6]
 800fdda:	717c      	strb	r4, [r7, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 800fddc:	eb03 3448 	add.w	r4, r3, r8, lsl #13
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 800fde0:	eba3 3848 	sub.w	r8, r3, r8, lsl #13
			    & RANGE_MASK];
 800fde4:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 800fde8:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 800fdec:	5d04      	ldrb	r4, [r0, r4]
 800fdee:	707c      	strb	r4, [r7, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 800fdf0:	f810 3008 	ldrb.w	r3, [r0, r8]
 800fdf4:	713b      	strb	r3, [r7, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 800fdf6:	eb02 0305 	add.w	r3, r2, r5
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 800fdfa:	eba2 0505 	sub.w	r5, r2, r5
			    & RANGE_MASK];
 800fdfe:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 800fe02:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 800fe06:	5cc3      	ldrb	r3, [r0, r3]
 800fe08:	70bb      	strb	r3, [r7, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 800fe0a:	5d43      	ldrb	r3, [r0, r5]
 800fe0c:	70fb      	strb	r3, [r7, #3]
  for (ctr = 0; ctr < 6; ctr++) {
 800fe0e:	d19c      	bne.n	800fd4a <jpeg_idct_6x6+0xe2>
  }
}
 800fe10:	b027      	add	sp, #156	; 0x9c
 800fe12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800fe18 <jpeg_idct_5x5>:

GLOBAL(void)
jpeg_idct_5x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800fe18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800fe1c:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 800fe20:	b09d      	sub	sp, #116	; 0x74
 800fe22:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 800fe24:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800fe26:	3080      	adds	r0, #128	; 0x80
 800fe28:	3208      	adds	r2, #8
 800fe2a:	3d04      	subs	r5, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 800fe2c:	af03      	add	r7, sp, #12
    tmp12 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 800fe2e:	f641 1e4c 	movw	lr, #6476	; 0x194c
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 800fe32:	f44f 6c35 	mov.w	ip, #2896	; 0xb50
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800fe36:	9000      	str	r0, [sp, #0]
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 800fe38:	9201      	str	r2, [sp, #4]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800fe3a:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 800fe3e:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800fe40:	f855 2f04 	ldr.w	r2, [r5, #4]!
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800fe44:	f9b6 4020 	ldrsh.w	r4, [r6, #32]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800fe48:	434a      	muls	r2, r1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800fe4a:	6c29      	ldr	r1, [r5, #64]	; 0x40
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800fe4c:	f9b6 9040 	ldrsh.w	r9, [r6, #64]	; 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800fe50:	4361      	muls	r1, r4
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800fe52:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
    tmp11 = z3 - z1;
    tmp12 -= z2 << 2;

    /* Odd part */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fe56:	6a28      	ldr	r0, [r5, #32]
    tmp12 <<= CONST_BITS;
 800fe58:	0352      	lsls	r2, r2, #13
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800fe5a:	fb04 f909 	mul.w	r9, r4, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fe5e:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
 800fe62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800fe66:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 800fe6a:	eb01 0409 	add.w	r4, r1, r9
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 800fe6e:	eba1 0109 	sub.w	r1, r1, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fe72:	fb00 fa0a 	mul.w	sl, r0, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800fe76:	6e28      	ldr	r0, [r5, #96]	; 0x60
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 800fe78:	fb0c f101 	mul.w	r1, ip, r1
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 800fe7c:	fb0e f804 	mul.w	r8, lr, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800fe80:	fb00 fb0b 	mul.w	fp, r0, fp
    z3 = tmp12 + z2;
 800fe84:	1854      	adds	r4, r2, r1

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 800fe86:	f641 209a 	movw	r0, #6810	; 0x1a9a
    tmp12 -= z2 << 2;
 800fe8a:	eba2 0281 	sub.w	r2, r2, r1, lsl #2
    tmp10 = z3 + z1;
 800fe8e:	eb08 0904 	add.w	r9, r8, r4
    tmp11 = z3 - z1;
 800fe92:	eba4 0408 	sub.w	r4, r4, r8
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 800fe96:	eb0a 080b 	add.w	r8, sl, fp

    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
    wsptr[5*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 800fe9a:	12d2      	asrs	r2, r2, #11
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 800fe9c:	fb00 f808 	mul.w	r8, r0, r8
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 800fea0:	f241 0071 	movw	r0, #4209	; 0x1071
    wsptr[5*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 800fea4:	627a      	str	r2, [r7, #36]	; 0x24
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 800fea6:	fb00 8a0a 	mla	sl, r0, sl, r8
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 800feaa:	483b      	ldr	r0, [pc, #236]	; (800ff98 <jpeg_idct_5x5+0x180>)
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 800feac:	9a01      	ldr	r2, [sp, #4]
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 800feae:	fb00 880b 	mla	r8, r0, fp, r8
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800feb2:	eb09 0b0a 	add.w	fp, r9, sl
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800feb6:	eba9 0a0a 	sub.w	sl, r9, sl
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 800feba:	42b2      	cmp	r2, r6
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 800febc:	eb04 0908 	add.w	r9, r4, r8
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 800fec0:	eba4 0808 	sub.w	r8, r4, r8
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800fec4:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800fec8:	ea4f 2aea 	mov.w	sl, sl, asr #11
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 800fecc:	ea4f 29e9 	mov.w	r9, r9, asr #11
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800fed0:	f847 bc04 	str.w	fp, [r7, #-4]
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 800fed4:	ea4f 24e8 	mov.w	r4, r8, asr #11
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800fed8:	f8c7 a04c 	str.w	sl, [r7, #76]	; 0x4c
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 800fedc:	f8c7 9010 	str.w	r9, [r7, #16]
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 800fee0:	63bc      	str	r4, [r7, #56]	; 0x38
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 800fee2:	d1aa      	bne.n	800fe3a <jpeg_idct_5x5+0x22>
 800fee4:	f1a3 0e04 	sub.w	lr, r3, #4
  }

  /* Pass 2: process 5 rows from work array, store into output array. */

  wsptr = workspace;
 800fee8:	a903      	add	r1, sp, #12
 800feea:	3310      	adds	r3, #16
    /* Add fudge factor here for final descale. */
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp12 <<= CONST_BITS;
    tmp0 = (INT32) wsptr[2];
    tmp1 = (INT32) wsptr[4];
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 800feec:	f641 1a4c 	movw	sl, #6476	; 0x194c
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 800fef0:	f44f 6935 	mov.w	r9, #2896	; 0xb50
 800fef4:	9301      	str	r3, [sp, #4]
    outptr = output_buf[ctr] + output_col;
 800fef6:	f85e 8f04 	ldr.w	r8, [lr, #4]!
    /* Odd part */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 800fefa:	f641 209a 	movw	r0, #6810	; 0x1a9a
    outptr = output_buf[ctr] + output_col;
 800fefe:	9b26      	ldr	r3, [sp, #152]	; 0x98
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 5;		/* advance pointer to next row */
 800ff00:	3114      	adds	r1, #20
    tmp1 = (INT32) wsptr[4];
 800ff02:	f851 4c04 	ldr.w	r4, [r1, #-4]
    outptr = output_buf[ctr] + output_col;
 800ff06:	eb08 0703 	add.w	r7, r8, r3
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 800ff0a:	f851 3c14 	ldr.w	r3, [r1, #-20]
    z3 = (INT32) wsptr[3];
 800ff0e:	f851 bc08 	ldr.w	fp, [r1, #-8]
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 800ff12:	f103 0c10 	add.w	ip, r3, #16
    tmp0 = (INT32) wsptr[2];
 800ff16:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    z2 = (INT32) wsptr[1];
 800ff1a:	f851 6c10 	ldr.w	r6, [r1, #-16]
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 800ff1e:	191a      	adds	r2, r3, r4
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 800ff20:	1b1b      	subs	r3, r3, r4
 800ff22:	fb09 f303 	mul.w	r3, r9, r3
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 800ff26:	fb0a f202 	mul.w	r2, sl, r2
    z3 = tmp12 + z2;
 800ff2a:	eb03 354c 	add.w	r5, r3, ip, lsl #13
    tmp12 -= z2 << 2;
 800ff2e:	009b      	lsls	r3, r3, #2
    tmp10 = z3 + z1;
 800ff30:	1954      	adds	r4, r2, r5
    tmp11 = z3 - z1;
 800ff32:	1aaa      	subs	r2, r5, r2
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 800ff34:	eb06 050b 	add.w	r5, r6, fp
    tmp12 -= z2 << 2;
 800ff38:	ebc3 3c4c 	rsb	ip, r3, ip, lsl #13
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 800ff3c:	4345      	muls	r5, r0
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 800ff3e:	f241 0071 	movw	r0, #4209	; 0x1071
			    & RANGE_MASK];
 800ff42:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 800ff46:	fb00 5606 	mla	r6, r0, r6, r5
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 800ff4a:	4813      	ldr	r0, [pc, #76]	; (800ff98 <jpeg_idct_5x5+0x180>)
 800ff4c:	fb00 550b 	mla	r5, r0, fp, r5
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800ff50:	eb04 0b06 	add.w	fp, r4, r6
 800ff54:	9800      	ldr	r0, [sp, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 800ff56:	1ba4      	subs	r4, r4, r6
			    & RANGE_MASK];
 800ff58:	f3cb 4b89 	ubfx	fp, fp, #18, #10
			    & RANGE_MASK];
 800ff5c:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800ff60:	f810 b00b 	ldrb.w	fp, [r0, fp]
 800ff64:	9826      	ldr	r0, [sp, #152]	; 0x98
 800ff66:	f808 b000 	strb.w	fp, [r8, r0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 800ff6a:	9800      	ldr	r0, [sp, #0]
 800ff6c:	5d04      	ldrb	r4, [r0, r4]
 800ff6e:	713c      	strb	r4, [r7, #4]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 800ff70:	1954      	adds	r4, r2, r5
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 800ff72:	1b52      	subs	r2, r2, r5
			    & RANGE_MASK];
 800ff74:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 800ff78:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 800ff7c:	5d04      	ldrb	r4, [r0, r4]
 800ff7e:	707c      	strb	r4, [r7, #1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 800ff80:	5c82      	ldrb	r2, [r0, r2]
 800ff82:	70fa      	strb	r2, [r7, #3]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 800ff84:	f810 300c 	ldrb.w	r3, [r0, ip]
 800ff88:	70bb      	strb	r3, [r7, #2]
  for (ctr = 0; ctr < 5; ctr++) {
 800ff8a:	9b01      	ldr	r3, [sp, #4]
 800ff8c:	4573      	cmp	r3, lr
 800ff8e:	d1b2      	bne.n	800fef6 <jpeg_idct_5x5+0xde>
  }
}
 800ff90:	b01d      	add	sp, #116	; 0x74
 800ff92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff96:	bf00      	nop
 800ff98:	ffffba5c 	.word	0xffffba5c

0800ff9c <jpeg_idct_4x4>:

GLOBAL(void)
jpeg_idct_4x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800ff9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800ffa0:	f8d0 614c 	ldr.w	r6, [r0, #332]	; 0x14c
{
 800ffa4:	b093      	sub	sp, #76	; 0x4c
 800ffa6:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 800ffa8:	1e97      	subs	r7, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800ffaa:	f106 0080 	add.w	r0, r6, #128	; 0x80
 800ffae:	3206      	adds	r2, #6
 800ffb0:	3d04      	subs	r5, #4
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 800ffb2:	f241 1851 	movw	r8, #4433	; 0x1151
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800ffb6:	9001      	str	r0, [sp, #4]
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 800ffb8:	f641 0e7e 	movw	lr, #6270	; 0x187e
  wsptr = workspace;
 800ffbc:	a802      	add	r0, sp, #8
		       CONST_BITS-PASS1_BITS);
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 800ffbe:	f8df c104 	ldr.w	ip, [pc, #260]	; 80100c4 <jpeg_idct_4x4+0x128>
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800ffc2:	f937 1f02 	ldrsh.w	r1, [r7, #2]!
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 800ffc6:	3004      	adds	r0, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800ffc8:	f855 4f04 	ldr.w	r4, [r5, #4]!
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800ffcc:	f9b7 a010 	ldrsh.w	sl, [r7, #16]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 800ffd0:	42ba      	cmp	r2, r7
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800ffd2:	fb04 f401 	mul.w	r4, r4, r1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800ffd6:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 800ffd8:	f9b7 1020 	ldrsh.w	r1, [r7, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800ffdc:	f9b7 b030 	ldrsh.w	fp, [r7, #48]	; 0x30
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800ffe0:	fb06 f101 	mul.w	r1, r6, r1
    tmp10 = (tmp0 + tmp2) << PASS1_BITS;
 800ffe4:	eb04 0901 	add.w	r9, r4, r1
    tmp12 = (tmp0 - tmp2) << PASS1_BITS;
 800ffe8:	eba4 0401 	sub.w	r4, r4, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800ffec:	6a29      	ldr	r1, [r5, #32]
 800ffee:	fb01 fa0a 	mul.w	sl, r1, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800fff2:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800fff4:	fb01 f10b 	mul.w	r1, r1, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 800fff8:	eb0a 0b01 	add.w	fp, sl, r1
 800fffc:	fb08 fb0b 	mul.w	fp, r8, fp
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010000:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8010004:	fb0e ba0a 	mla	sl, lr, sl, fp
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8010008:	fb0c bb01 	mla	fp, ip, r1, fp
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 801000c:	ea4f 2aea 	mov.w	sl, sl, asr #11
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8010010:	ea4f 2beb 	mov.w	fp, fp, asr #11
		       CONST_BITS-PASS1_BITS);

    /* Final output stage */

    wsptr[4*0] = (int) (tmp10 + tmp0);
 8010014:	eb0a 0189 	add.w	r1, sl, r9, lsl #2
 8010018:	f840 1c04 	str.w	r1, [r0, #-4]
    wsptr[4*3] = (int) (tmp10 - tmp0);
 801001c:	ebca 0189 	rsb	r1, sl, r9, lsl #2
 8010020:	62c1      	str	r1, [r0, #44]	; 0x2c
    wsptr[4*1] = (int) (tmp12 + tmp2);
 8010022:	eb0b 0184 	add.w	r1, fp, r4, lsl #2
    wsptr[4*2] = (int) (tmp12 - tmp2);
 8010026:	ebcb 0484 	rsb	r4, fp, r4, lsl #2
    wsptr[4*1] = (int) (tmp12 + tmp2);
 801002a:	60c1      	str	r1, [r0, #12]
    wsptr[4*2] = (int) (tmp12 - tmp2);
 801002c:	61c4      	str	r4, [r0, #28]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 801002e:	d1c8      	bne.n	800ffc2 <jpeg_idct_4x4+0x26>
 8010030:	1f1d      	subs	r5, r3, #4
 8010032:	f103 0c0c 	add.w	ip, r3, #12
  }

  /* Pass 2: process 4 rows from work array, store into output array. */

  wsptr = workspace;
 8010036:	ac02      	add	r4, sp, #8
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8010038:	f241 1951 	movw	r9, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 801003c:	f641 087e 	movw	r8, #6270	; 0x187e
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8010040:	f8df e080 	ldr.w	lr, [pc, #128]	; 80100c4 <jpeg_idct_4x4+0x128>
    outptr = output_buf[ctr] + output_col;
 8010044:	f855 3f04 	ldr.w	r3, [r5, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 4;		/* advance pointer to next row */
 8010048:	3410      	adds	r4, #16
    outptr = output_buf[ctr] + output_col;
 801004a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801004c:	f854 0c10 	ldr.w	r0, [r4, #-16]
  for (ctr = 0; ctr < 4; ctr++) {
 8010050:	45ac      	cmp	ip, r5
    outptr = output_buf[ctr] + output_col;
 8010052:	eb03 0702 	add.w	r7, r3, r2
    z3 = (INT32) wsptr[3];
 8010056:	f854 bc04 	ldr.w	fp, [r4, #-4]
    tmp2 = (INT32) wsptr[2];
 801005a:	f854 2c08 	ldr.w	r2, [r4, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801005e:	f100 0010 	add.w	r0, r0, #16
    z2 = (INT32) wsptr[1];
 8010062:	f854 1c0c 	ldr.w	r1, [r4, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8010066:	eb00 0a02 	add.w	sl, r0, r2
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 801006a:	eba0 0002 	sub.w	r0, r0, r2
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 801006e:	eb01 020b 	add.w	r2, r1, fp
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010072:	9e01      	ldr	r6, [sp, #4]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8010074:	fb09 f202 	mul.w	r2, r9, r2
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8010078:	fb08 2101 	mla	r1, r8, r1, r2
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 801007c:	fb0e 220b 	mla	r2, lr, fp, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010080:	eb01 3b4a 	add.w	fp, r1, sl, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010084:	ebc1 314a 	rsb	r1, r1, sl, lsl #13
			    & RANGE_MASK];
 8010088:	f3cb 4b89 	ubfx	fp, fp, #18, #10
			    & RANGE_MASK];
 801008c:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010090:	f816 b00b 	ldrb.w	fp, [r6, fp]
 8010094:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8010096:	f803 b006 	strb.w	fp, [r3, r6]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801009a:	9b01      	ldr	r3, [sp, #4]
 801009c:	5c5b      	ldrb	r3, [r3, r1]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801009e:	9901      	ldr	r1, [sp, #4]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80100a0:	70fb      	strb	r3, [r7, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80100a2:	eb02 3340 	add.w	r3, r2, r0, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80100a6:	ebc2 3240 	rsb	r2, r2, r0, lsl #13
			    & RANGE_MASK];
 80100aa:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 80100ae:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80100b2:	5ccb      	ldrb	r3, [r1, r3]
 80100b4:	707b      	strb	r3, [r7, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80100b6:	5c8b      	ldrb	r3, [r1, r2]
 80100b8:	70bb      	strb	r3, [r7, #2]
  for (ctr = 0; ctr < 4; ctr++) {
 80100ba:	d1c3      	bne.n	8010044 <jpeg_idct_4x4+0xa8>
  }
}
 80100bc:	b013      	add	sp, #76	; 0x4c
 80100be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100c2:	bf00      	nop
 80100c4:	ffffc4df 	.word	0xffffc4df

080100c8 <jpeg_idct_3x3>:

GLOBAL(void)
jpeg_idct_3x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80100c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100cc:	b08b      	sub	sp, #44	; 0x2c
  INT32 tmp0, tmp2, tmp10, tmp12;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80100ce:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 80100d2:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80100d4:	f1a2 0802 	sub.w	r8, r2, #2

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 80100d8:	ac01      	add	r4, sp, #4
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80100da:	f100 0e80 	add.w	lr, r0, #128	; 0x80
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 80100de:	f1a1 0c04 	sub.w	ip, r1, #4
 80100e2:	3204      	adds	r2, #4
 80100e4:	4620      	mov	r0, r4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 80100e6:	f241 6aa1 	movw	sl, #5793	; 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 80100ea:	f242 7931 	movw	r9, #10033	; 0x2731
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80100ee:	f938 5f02 	ldrsh.w	r5, [r8, #2]!
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 80100f2:	3404      	adds	r4, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80100f4:	f85c 1f04 	ldr.w	r1, [ip, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80100f8:	f9b8 6020 	ldrsh.w	r6, [r8, #32]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 80100fc:	4542      	cmp	r2, r8
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80100fe:	fb01 f105 	mul.w	r1, r1, r5
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010102:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010106:	f9b8 b010 	ldrsh.w	fp, [r8, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801010a:	fb05 f506 	mul.w	r5, r5, r6
    tmp0 <<= CONST_BITS;
 801010e:	ea4f 3141 	mov.w	r1, r1, lsl #13
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010112:	f8dc 7020 	ldr.w	r7, [ip, #32]
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010116:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 801011a:	fb0a f505 	mul.w	r5, sl, r5
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801011e:	fb07 f70b 	mul.w	r7, r7, fp
    tmp10 = tmp0 + tmp12;
 8010122:	eb01 0605 	add.w	r6, r1, r5
    tmp2 = tmp0 - tmp12 - tmp12;
 8010126:	eba1 0145 	sub.w	r1, r1, r5, lsl #1
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 801012a:	fb09 f707 	mul.w	r7, r9, r7

    /* Final output stage */

    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[3*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 801012e:	ea4f 21e1 	mov.w	r1, r1, asr #11
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010132:	eb06 0b07 	add.w	fp, r6, r7
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010136:	eba6 0707 	sub.w	r7, r6, r7
    wsptr[3*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 801013a:	60a1      	str	r1, [r4, #8]
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801013c:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010140:	ea4f 27e7 	mov.w	r7, r7, asr #11
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010144:	f844 bc04 	str.w	fp, [r4, #-4]
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010148:	6167      	str	r7, [r4, #20]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 801014a:	d1d0      	bne.n	80100ee <jpeg_idct_3x3+0x26>
 801014c:	1f1d      	subs	r5, r3, #4

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[2];
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 801014e:	f241 6ca1 	movw	ip, #5793	; 0x16a1
 8010152:	3308      	adds	r3, #8
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = (INT32) wsptr[1];
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8010154:	f242 7b31 	movw	fp, #10033	; 0x2731
    outptr = output_buf[ctr] + output_col;
 8010158:	f855 9f04 	ldr.w	r9, [r5, #4]!
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 3;		/* advance pointer to next row */
 801015c:	300c      	adds	r0, #12
    outptr = output_buf[ctr] + output_col;
 801015e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8010160:	f850 1c04 	ldr.w	r1, [r0, #-4]
  for (ctr = 0; ctr < 3; ctr++) {
 8010164:	42ab      	cmp	r3, r5
    outptr = output_buf[ctr] + output_col;
 8010166:	eb09 0602 	add.w	r6, r9, r2
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801016a:	f850 2c0c 	ldr.w	r2, [r0, #-12]
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 801016e:	fb0c f101 	mul.w	r1, ip, r1
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8010172:	f850 4c08 	ldr.w	r4, [r0, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010176:	f102 0210 	add.w	r2, r2, #16
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801017a:	9f14      	ldr	r7, [sp, #80]	; 0x50
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 801017c:	fb0b f404 	mul.w	r4, fp, r4
    tmp10 = tmp0 + tmp12;
 8010180:	eb01 3842 	add.w	r8, r1, r2, lsl #13
    tmp2 = tmp0 - tmp12 - tmp12;
 8010184:	ebc1 3242 	rsb	r2, r1, r2, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010188:	eb08 0a04 	add.w	sl, r8, r4
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801018c:	eba8 0804 	sub.w	r8, r8, r4
    tmp2 = tmp0 - tmp12 - tmp12;
 8010190:	eba2 0201 	sub.w	r2, r2, r1
			    & RANGE_MASK];
 8010194:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 8010198:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 801019c:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80101a0:	f81e a00a 	ldrb.w	sl, [lr, sl]
 80101a4:	f809 a007 	strb.w	sl, [r9, r7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80101a8:	f81e 4008 	ldrb.w	r4, [lr, r8]
 80101ac:	70b4      	strb	r4, [r6, #2]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 80101ae:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80101b2:	7072      	strb	r2, [r6, #1]
  for (ctr = 0; ctr < 3; ctr++) {
 80101b4:	d1d0      	bne.n	8010158 <jpeg_idct_3x3+0x90>
  }
}
 80101b6:	b00b      	add	sp, #44	; 0x2c
 80101b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080101bc <jpeg_idct_2x2>:

GLOBAL(void)
jpeg_idct_2x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80101bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* Pass 1: process columns from input. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 80101be:	6d4f      	ldr	r7, [r1, #84]	; 0x54
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80101c0:	f8d0 514c 	ldr.w	r5, [r0, #332]	; 0x14c

  /* Column 0 */
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80101c4:	6839      	ldr	r1, [r7, #0]
 80101c6:	f9b2 0000 	ldrsh.w	r0, [r2]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80101ca:	3580      	adds	r5, #128	; 0x80
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80101cc:	6a3c      	ldr	r4, [r7, #32]
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80101ce:	4341      	muls	r1, r0
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80101d0:	f9b2 0010 	ldrsh.w	r0, [r2, #16]

  tmp0 = tmp4 + tmp5;
  tmp2 = tmp4 - tmp5;

  /* Column 1 */
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 80101d4:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80101d8:	4344      	muls	r4, r0
  tmp4 += ONE << 2;
 80101da:	3104      	adds	r1, #4
{
 80101dc:	9e05      	ldr	r6, [sp, #20]
  tmp0 = tmp4 + tmp5;
 80101de:	1860      	adds	r0, r4, r1
  tmp2 = tmp4 - tmp5;
 80101e0:	1b09      	subs	r1, r1, r4
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 80101e2:	687c      	ldr	r4, [r7, #4]
 80101e4:	fb04 f40c 	mul.w	r4, r4, ip
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1+1], quantptr[DCTSIZE*1+1]);
 80101e8:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 80101ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101ee:	fb02 f20c 	mul.w	r2, r2, ip
  tmp3 = tmp4 - tmp5;

  /* Pass 2: process 2 rows, store into output array. */

  /* Row 0 */
  outptr = output_buf[0] + output_col;
 80101f2:	f8d3 c000 	ldr.w	ip, [r3]
  tmp1 = tmp4 + tmp5;
 80101f6:	18a7      	adds	r7, r4, r2
  tmp3 = tmp4 - tmp5;
 80101f8:	1aa2      	subs	r2, r4, r2
  outptr = output_buf[0] + output_col;
 80101fa:	eb0c 0e06 	add.w	lr, ip, r6

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 80101fe:	19c4      	adds	r4, r0, r7
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 8010200:	1bc0      	subs	r0, r0, r7
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 8010202:	f3c4 04c9 	ubfx	r4, r4, #3, #10
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 8010206:	f3c0 00c9 	ubfx	r0, r0, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 801020a:	5d2c      	ldrb	r4, [r5, r4]
 801020c:	f80c 4006 	strb.w	r4, [ip, r6]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 8010210:	5c28      	ldrb	r0, [r5, r0]
 8010212:	f88e 0001 	strb.w	r0, [lr, #1]

  /* Row 1 */
  outptr = output_buf[1] + output_col;
 8010216:	6858      	ldr	r0, [r3, #4]

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 8010218:	188b      	adds	r3, r1, r2
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 801021a:	1a89      	subs	r1, r1, r2
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 801021c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
  outptr = output_buf[1] + output_col;
 8010220:	1984      	adds	r4, r0, r6
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 8010222:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 8010226:	5ceb      	ldrb	r3, [r5, r3]
 8010228:	5583      	strb	r3, [r0, r6]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 801022a:	5c6b      	ldrb	r3, [r5, r1]
 801022c:	7063      	strb	r3, [r4, #1]
}
 801022e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010230 <jpeg_idct_1x1>:

GLOBAL(void)
jpeg_idct_1x1 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010230:	b510      	push	{r4, lr}
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* 1x1 is trivial: just take the DC coefficient divided by 8. */
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  dcval = DEQUANTIZE(coef_block[0], quantptr[0]);
 8010232:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8010234:	f9b2 1000 	ldrsh.w	r1, [r2]
 8010238:	6822      	ldr	r2, [r4, #0]
 801023a:	434a      	muls	r2, r1
  dcval = (int) DESCALE((INT32) dcval, 3);

  output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
 801023c:	f8d0 114c 	ldr.w	r1, [r0, #332]	; 0x14c
  dcval = (int) DESCALE((INT32) dcval, 3);
 8010240:	3204      	adds	r2, #4
  output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
 8010242:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8010246:	440a      	add	r2, r1
 8010248:	f892 1080 	ldrb.w	r1, [r2, #128]	; 0x80
 801024c:	681a      	ldr	r2, [r3, #0]
 801024e:	9b02      	ldr	r3, [sp, #8]
 8010250:	54d1      	strb	r1, [r2, r3]
}
 8010252:	bd10      	pop	{r4, pc}

08010254 <jpeg_idct_9x9>:

GLOBAL(void)
jpeg_idct_9x9 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010258:	b0d1      	sub	sp, #324	; 0x144
 801025a:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 801025c:	f1a2 0802 	sub.w	r8, r2, #2
 8010260:	9306      	str	r3, [sp, #24]
 8010262:	3c04      	subs	r4, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010264:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8010268:	a808      	add	r0, sp, #32
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801026a:	f103 0a80 	add.w	sl, r3, #128	; 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801026e:	f102 030e 	add.w	r3, r2, #14
 8010272:	9307      	str	r3, [sp, #28]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010274:	f938 3f02 	ldrsh.w	r3, [r8, #2]!

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8010278:	f241 66a1 	movw	r6, #5793	; 0x16a1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801027c:	f854 5f04 	ldr.w	r5, [r4, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010280:	3004      	adds	r0, #4
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010282:	f9b8 9040 	ldrsh.w	r9, [r8, #64]	; 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010286:	435d      	muls	r5, r3
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010288:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801028a:	f9b8 3020 	ldrsh.w	r3, [r8, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801028e:	f9b8 1060 	ldrsh.w	r1, [r8, #96]	; 0x60
    tmp0 <<= CONST_BITS;
 8010292:	036d      	lsls	r5, r5, #13
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010294:	435a      	muls	r2, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010296:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 801029a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
    tmp13 = tmp1 - tmp2 + tmp3;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801029e:	f9b8 7030 	ldrsh.w	r7, [r8, #48]	; 0x30
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80102a2:	fb03 f909 	mul.w	r9, r3, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80102a6:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80102aa:	f9b8 c050 	ldrsh.w	ip, [r8, #80]	; 0x50
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80102ae:	434b      	muls	r3, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80102b0:	f9b8 e070 	ldrsh.w	lr, [r8, #112]	; 0x70
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 80102b4:	4373      	muls	r3, r6
    tmp1 = tmp0 + tmp3;
 80102b6:	18e9      	adds	r1, r5, r3
    tmp2 = tmp0 - tmp3 - tmp3;
 80102b8:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
 80102bc:	9300      	str	r3, [sp, #0]
    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 80102be:	eba2 0309 	sub.w	r3, r2, r9
 80102c2:	4373      	muls	r3, r6
 80102c4:	9301      	str	r3, [sp, #4]
    tmp11 = tmp2 + tmp0;
 80102c6:	e9dd 3500 	ldrd	r3, r5, [sp]
 80102ca:	195e      	adds	r6, r3, r5
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 80102cc:	eb02 0309 	add.w	r3, r2, r9
 80102d0:	f642 2587 	movw	r5, #10887	; 0x2a87
 80102d4:	436b      	muls	r3, r5
    tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
 80102d6:	f242 25ab 	movw	r5, #8875	; 0x22ab
 80102da:	436a      	muls	r2, r5
    tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
 80102dc:	f240 75dc 	movw	r5, #2012	; 0x7dc
 80102e0:	fb05 f909 	mul.w	r9, r5, r9
    tmp10 = tmp1 + tmp0 - tmp3;
 80102e4:	18cd      	adds	r5, r1, r3
    tmp12 = tmp1 - tmp0 + tmp2;
 80102e6:	1acb      	subs	r3, r1, r3
    tmp10 = tmp1 + tmp0 - tmp3;
 80102e8:	eba5 0509 	sub.w	r5, r5, r9
    tmp12 = tmp1 - tmp0 + tmp2;
 80102ec:	4413      	add	r3, r2
    tmp13 = tmp1 - tmp2 + tmp3;
 80102ee:	1a8a      	subs	r2, r1, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80102f0:	6a21      	ldr	r1, [r4, #32]
    tmp13 = tmp1 - tmp2 + tmp3;
 80102f2:	444a      	add	r2, r9
    tmp12 = tmp1 - tmp0 + tmp2;
 80102f4:	9302      	str	r3, [sp, #8]

    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 80102f6:	4b8d      	ldr	r3, [pc, #564]	; (801052c <jpeg_idct_9x9+0x2d8>)
    tmp13 = tmp1 - tmp2 + tmp3;
 80102f8:	9203      	str	r2, [sp, #12]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80102fa:	f9b8 2010 	ldrsh.w	r2, [r8, #16]
 80102fe:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010300:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8010302:	437a      	muls	r2, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010304:	f8d4 70a0 	ldr.w	r7, [r4, #160]	; 0xa0
 8010308:	fb07 fc0c 	mul.w	ip, r7, ip
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801030c:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 8010310:	435a      	muls	r2, r3

    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8010312:	f641 5317 	movw	r3, #7447	; 0x1d17
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010316:	fb07 f70e 	mul.w	r7, r7, lr
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 801031a:	eb01 0b0c 	add.w	fp, r1, ip
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 801031e:	eb01 0907 	add.w	r9, r1, r7
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8010322:	fb03 fb0b 	mul.w	fp, r3, fp
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8010326:	f640 737a 	movw	r3, #3962	; 0xf7a
    tmp0 = tmp2 + tmp3 - z2;
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
    tmp2 += z2 - tmp1;
    tmp3 += z2 + tmp1;
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 801032a:	eba1 010c 	sub.w	r1, r1, ip
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 801032e:	fb03 f909 	mul.w	r9, r3, r9
    tmp0 = tmp2 + tmp3 - z2;
 8010332:	eb0b 0e09 	add.w	lr, fp, r9
 8010336:	ebae 0302 	sub.w	r3, lr, r2
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 801033a:	ebac 0e07 	sub.w	lr, ip, r7
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 801033e:	1bcf      	subs	r7, r1, r7
    tmp0 = tmp2 + tmp3 - z2;
 8010340:	9304      	str	r3, [sp, #16]
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8010342:	f642 4391 	movw	r3, #11409	; 0x2c91
 8010346:	fb03 f30e 	mul.w	r3, r3, lr
    tmp2 += z2 - tmp1;
 801034a:	eba2 0e03 	sub.w	lr, r2, r3
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 801034e:	9305      	str	r3, [sp, #20]
    tmp3 += z2 + tmp1;
 8010350:	441a      	add	r2, r3
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010352:	f242 7331 	movw	r3, #10033	; 0x2731
    tmp2 += z2 - tmp1;
 8010356:	44de      	add	lr, fp
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010358:	435f      	muls	r7, r3

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801035a:	9b04      	ldr	r3, [sp, #16]
    tmp3 += z2 + tmp1;
 801035c:	444a      	add	r2, r9
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801035e:	18e9      	adds	r1, r5, r3
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010360:	1aed      	subs	r5, r5, r3
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010362:	9b02      	ldr	r3, [sp, #8]
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010364:	12c9      	asrs	r1, r1, #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010366:	12ed      	asrs	r5, r5, #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010368:	f840 1c04 	str.w	r1, [r0, #-4]
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 801036c:	19f1      	adds	r1, r6, r7
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 801036e:	1bf6      	subs	r6, r6, r7
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010370:	f8c0 50fc 	str.w	r5, [r0, #252]	; 0xfc
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010374:	12c9      	asrs	r1, r1, #11
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8010376:	12f6      	asrs	r6, r6, #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010378:	61c1      	str	r1, [r0, #28]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 801037a:	eb03 010e 	add.w	r1, r3, lr
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 801037e:	eba3 0e0e 	sub.w	lr, r3, lr
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8010382:	f8c0 60dc 	str.w	r6, [r0, #220]	; 0xdc
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010386:	12c9      	asrs	r1, r1, #11
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010388:	ea4f 23ee 	mov.w	r3, lr, asr #11
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 801038c:	63c1      	str	r1, [r0, #60]	; 0x3c
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 801038e:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp13 + tmp3, CONST_BITS-PASS1_BITS);
 8010392:	9b03      	ldr	r3, [sp, #12]
 8010394:	4413      	add	r3, r2
 8010396:	12db      	asrs	r3, r3, #11
 8010398:	65c3      	str	r3, [r0, #92]	; 0x5c
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp13 - tmp3, CONST_BITS-PASS1_BITS);
 801039a:	9b03      	ldr	r3, [sp, #12]
 801039c:	1a9a      	subs	r2, r3, r2
 801039e:	12d2      	asrs	r2, r2, #11
 80103a0:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
    tmp14 = tmp2 - tmp0 - tmp0;
 80103a4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80103a8:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp14, CONST_BITS-PASS1_BITS);
 80103ac:	12db      	asrs	r3, r3, #11
 80103ae:	67c3      	str	r3, [r0, #124]	; 0x7c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80103b0:	9b07      	ldr	r3, [sp, #28]
 80103b2:	4543      	cmp	r3, r8
 80103b4:	f47f af5e 	bne.w	8010274 <jpeg_idct_9x9+0x20>
 80103b8:	9b06      	ldr	r3, [sp, #24]
  }

  /* Pass 2: process 9 rows from work array, store into output array. */

  wsptr = workspace;
 80103ba:	aa08      	add	r2, sp, #32
 80103bc:	3b04      	subs	r3, #4
 80103be:	9300      	str	r3, [sp, #0]
 80103c0:	9b06      	ldr	r3, [sp, #24]
 80103c2:	3320      	adds	r3, #32
 80103c4:	9306      	str	r3, [sp, #24]
  for (ctr = 0; ctr < 9; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80103c6:	9b00      	ldr	r3, [sp, #0]

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[4];
    z3 = (INT32) wsptr[6];

    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 80103c8:	f241 6ca1 	movw	ip, #5793	; 0x16a1
    z2 = (INT32) wsptr[4];
 80103cc:	6915      	ldr	r5, [r2, #16]
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 80103ce:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 80103d0:	4619      	mov	r1, r3
    z4 = (INT32) wsptr[7];
 80103d2:	f852 9c04 	ldr.w	r9, [r2, #-4]
    outptr = output_buf[ctr] + output_col;
 80103d6:	f851 3f04 	ldr.w	r3, [r1, #4]!
 80103da:	9305      	str	r3, [sp, #20]
 80103dc:	9b05      	ldr	r3, [sp, #20]
 80103de:	9100      	str	r1, [sp, #0]
 80103e0:	995a      	ldr	r1, [sp, #360]	; 0x168
 80103e2:	185c      	adds	r4, r3, r1
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80103e4:	f852 3c20 	ldr.w	r3, [r2, #-32]
    z1 = (INT32) wsptr[2];
 80103e8:	f852 1c18 	ldr.w	r1, [r2, #-24]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80103ec:	f103 0610 	add.w	r6, r3, #16
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 80103f0:	f852 3c08 	ldr.w	r3, [r2, #-8]
 80103f4:	fb0c f703 	mul.w	r7, ip, r3
    tmp2 = tmp0 - tmp3 - tmp3;
 80103f8:	ebc7 3346 	rsb	r3, r7, r6, lsl #13
    tmp1 = tmp0 + tmp3;
 80103fc:	eb07 3046 	add.w	r0, r7, r6, lsl #13
    tmp2 = tmp0 - tmp3 - tmp3;
 8010400:	1bdb      	subs	r3, r3, r7
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 8010402:	f642 2787 	movw	r7, #10887	; 0x2a87
    tmp2 = tmp0 - tmp3 - tmp3;
 8010406:	9301      	str	r3, [sp, #4]
    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 8010408:	1b4b      	subs	r3, r1, r5
 801040a:	fb0c f303 	mul.w	r3, ip, r3
 801040e:	9302      	str	r3, [sp, #8]
    tmp11 = tmp2 + tmp0;
 8010410:	e9dd 3601 	ldrd	r3, r6, [sp, #4]
 8010414:	199e      	adds	r6, r3, r6
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 8010416:	194b      	adds	r3, r1, r5
 8010418:	437b      	muls	r3, r7
    tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
 801041a:	f242 27ab 	movw	r7, #8875	; 0x22ab
 801041e:	4379      	muls	r1, r7
    tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
 8010420:	f240 77dc 	movw	r7, #2012	; 0x7dc
 8010424:	fb07 fe05 	mul.w	lr, r7, r5
    tmp10 = tmp1 + tmp0 - tmp3;
 8010428:	18c5      	adds	r5, r0, r3
    tmp12 = tmp1 - tmp0 + tmp2;
 801042a:	1ac3      	subs	r3, r0, r3
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 801042c:	4f3f      	ldr	r7, [pc, #252]	; (801052c <jpeg_idct_9x9+0x2d8>)
    tmp10 = tmp1 + tmp0 - tmp3;
 801042e:	eba5 050e 	sub.w	r5, r5, lr
    tmp12 = tmp1 - tmp0 + tmp2;
 8010432:	440b      	add	r3, r1
    tmp13 = tmp1 - tmp2 + tmp3;
 8010434:	1a41      	subs	r1, r0, r1
    z1 = (INT32) wsptr[1];
 8010436:	f852 0c1c 	ldr.w	r0, [r2, #-28]
    tmp13 = tmp1 - tmp2 + tmp3;
 801043a:	4471      	add	r1, lr
    tmp12 = tmp1 - tmp0 + tmp2;
 801043c:	9303      	str	r3, [sp, #12]
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 801043e:	f641 5317 	movw	r3, #7447	; 0x1d17
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8010442:	eb00 0e09 	add.w	lr, r0, r9
    tmp13 = tmp1 - tmp2 + tmp3;
 8010446:	9104      	str	r1, [sp, #16]
    z2 = (INT32) wsptr[3];
 8010448:	f852 1c14 	ldr.w	r1, [r2, #-20]
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 801044c:	4379      	muls	r1, r7
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 801044e:	f852 7c0c 	ldr.w	r7, [r2, #-12]
 8010452:	eb00 0b07 	add.w	fp, r0, r7
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8010456:	eba7 0809 	sub.w	r8, r7, r9
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 801045a:	fb03 fb0b 	mul.w	fp, r3, fp
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 801045e:	f640 737a 	movw	r3, #3962	; 0xf7a
 8010462:	fb03 fe0e 	mul.w	lr, r3, lr
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8010466:	f642 4391 	movw	r3, #11409	; 0x2c91
    tmp0 = tmp2 + tmp3 - z2;
 801046a:	eb0b 0c0e 	add.w	ip, fp, lr
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 801046e:	fb03 f808 	mul.w	r8, r3, r8
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010472:	f852 3c0c 	ldr.w	r3, [r2, #-12]
    tmp0 = tmp2 + tmp3 - z2;
 8010476:	ebac 0c01 	sub.w	ip, ip, r1
    tmp2 += z2 - tmp1;
 801047a:	eba1 0708 	sub.w	r7, r1, r8
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 801047e:	1ac0      	subs	r0, r0, r3
 8010480:	f242 7331 	movw	r3, #10033	; 0x2731
    tmp3 += z2 + tmp1;
 8010484:	4441      	add	r1, r8
    tmp2 += z2 - tmp1;
 8010486:	445f      	add	r7, fp
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010488:	eba0 0909 	sub.w	r9, r0, r9
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801048c:	eb05 000c 	add.w	r0, r5, ip
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010490:	eba5 050c 	sub.w	r5, r5, ip
    tmp3 += z2 + tmp1;
 8010494:	4471      	add	r1, lr
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010496:	fb03 f909 	mul.w	r9, r3, r9
			    & RANGE_MASK];
 801049a:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801049e:	9b05      	ldr	r3, [sp, #20]
			    & RANGE_MASK];
 80104a0:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80104a4:	f81a 0000 	ldrb.w	r0, [sl, r0]
 80104a8:	469e      	mov	lr, r3
 80104aa:	9b5a      	ldr	r3, [sp, #360]	; 0x168
 80104ac:	f80e 0003 	strb.w	r0, [lr, r3]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80104b0:	f81a 0005 	ldrb.w	r0, [sl, r5]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80104b4:	9b03      	ldr	r3, [sp, #12]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80104b6:	7220      	strb	r0, [r4, #8]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 80104b8:	eb06 0009 	add.w	r0, r6, r9
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80104bc:	eba6 0609 	sub.w	r6, r6, r9
			    & RANGE_MASK];
 80104c0:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 80104c4:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 80104c8:	f81a 0000 	ldrb.w	r0, [sl, r0]
 80104cc:	7060      	strb	r0, [r4, #1]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80104ce:	f81a 0006 	ldrb.w	r0, [sl, r6]
 80104d2:	71e0      	strb	r0, [r4, #7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80104d4:	19d8      	adds	r0, r3, r7
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80104d6:	1bdf      	subs	r7, r3, r7
			    & RANGE_MASK];
 80104d8:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 80104dc:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80104e0:	f81a 0000 	ldrb.w	r0, [sl, r0]
 80104e4:	70a0      	strb	r0, [r4, #2]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80104e6:	f81a 3007 	ldrb.w	r3, [sl, r7]
 80104ea:	71a3      	strb	r3, [r4, #6]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp3,
 80104ec:	9b04      	ldr	r3, [sp, #16]
 80104ee:	440b      	add	r3, r1
			    & RANGE_MASK];
 80104f0:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp3,
 80104f4:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80104f8:	70e3      	strb	r3, [r4, #3]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 80104fa:	9b04      	ldr	r3, [sp, #16]
 80104fc:	1a59      	subs	r1, r3, r1
			    & RANGE_MASK];
 80104fe:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 8010502:	f81a 3001 	ldrb.w	r3, [sl, r1]
 8010506:	7163      	strb	r3, [r4, #5]
    tmp14 = tmp2 - tmp0 - tmp0;
 8010508:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 801050c:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
  for (ctr = 0; ctr < 9; ctr++) {
 8010510:	9900      	ldr	r1, [sp, #0]
			    & RANGE_MASK];
 8010512:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp14,
 8010516:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801051a:	7123      	strb	r3, [r4, #4]
  for (ctr = 0; ctr < 9; ctr++) {
 801051c:	9b06      	ldr	r3, [sp, #24]
 801051e:	428b      	cmp	r3, r1
 8010520:	f47f af51 	bne.w	80103c6 <jpeg_idct_9x9+0x172>
  }
}
 8010524:	b051      	add	sp, #324	; 0x144
 8010526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801052a:	bf00      	nop
 801052c:	ffffd8cf 	.word	0xffffd8cf

08010530 <jpeg_idct_10x10>:

GLOBAL(void)
jpeg_idct_10x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4, z5;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010534:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8010538:	b0d7      	sub	sp, #348	; 0x15c
 801053a:	6d49      	ldr	r1, [r1, #84]	; 0x54
 801053c:	f1a2 0c02 	sub.w	ip, r2, #2
 8010540:	9303      	str	r3, [sp, #12]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010542:	3080      	adds	r0, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010544:	f102 030e 	add.w	r3, r2, #14
 8010548:	3904      	subs	r1, #4
  wsptr = workspace;
 801054a:	aa06      	add	r2, sp, #24
 801054c:	9305      	str	r3, [sp, #20]
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801054e:	f93c ef02 	ldrsh.w	lr, [ip, #2]!

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8010552:	f241 0671 	movw	r6, #4209	; 0x1071
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010556:	f851 3f04 	ldr.w	r3, [r1, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801055a:	3204      	adds	r2, #4
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801055c:	f9bc 4040 	ldrsh.w	r4, [ip, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010560:	fb03 fe0e 	mul.w	lr, r3, lr
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010564:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010568:	f9bc b020 	ldrsh.w	fp, [ip, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801056c:	4363      	muls	r3, r4
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 801056e:	f242 449d 	movw	r4, #9373	; 0x249d
    z3 <<= CONST_BITS;
 8010572:	ea4f 3e4e 	mov.w	lr, lr, lsl #13
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010576:	f9bc 9060 	ldrsh.w	r9, [ip, #96]	; 0x60
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 801057a:	fb04 f503 	mul.w	r5, r4, r3
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 801057e:	f640 54fc 	movw	r4, #3580	; 0xdfc
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010582:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8010586:	4363      	muls	r3, r4
    tmp10 = z3 + z1;
 8010588:	eb0e 0a05 	add.w	sl, lr, r5
    tmp11 = z3 - z2;
 801058c:	ebae 0403 	sub.w	r4, lr, r3
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8010590:	1aeb      	subs	r3, r5, r3
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8010592:	f641 259a 	movw	r5, #6810	; 0x1a9a
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8010596:	ebae 0343 	sub.w	r3, lr, r3, lsl #1

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801059a:	f9bc e050 	ldrsh.w	lr, [ip, #80]	; 0x50
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 801059e:	9304      	str	r3, [sp, #16]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80105a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80105a2:	fb03 fb0b 	mul.w	fp, r3, fp
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80105a6:	f8d1 30c0 	ldr.w	r3, [r1, #192]	; 0xc0
 80105aa:	fb03 f309 	mul.w	r3, r3, r9
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 80105ae:	eb0b 0903 	add.w	r9, fp, r3
 80105b2:	fb05 f509 	mul.w	r5, r5, r9
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 80105b6:	fb06 5b0b 	mla	fp, r6, fp, r5
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 80105ba:	4ea4      	ldr	r6, [pc, #656]	; (801084c <jpeg_idct_10x10+0x31c>)
 80105bc:	fb06 5903 	mla	r9, r6, r3, r5
    tmp20 = tmp10 + tmp12;
 80105c0:	eb0a 030b 	add.w	r3, sl, fp
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80105c4:	6a0d      	ldr	r5, [r1, #32]
    tmp24 = tmp10 - tmp12;
 80105c6:	ebaa 0b0b 	sub.w	fp, sl, fp
    tmp20 = tmp10 + tmp12;
 80105ca:	9300      	str	r3, [sp, #0]
    tmp23 = tmp11 - tmp13;
 80105cc:	eba4 0309 	sub.w	r3, r4, r9
    tmp21 = tmp11 + tmp13;
 80105d0:	eb04 0709 	add.w	r7, r4, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80105d4:	f9bc 4030 	ldrsh.w	r4, [ip, #48]	; 0x30
    tmp23 = tmp11 - tmp13;
 80105d8:	9301      	str	r3, [sp, #4]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80105da:	f9bc 3010 	ldrsh.w	r3, [ip, #16]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80105de:	f9bc 6070 	ldrsh.w	r6, [ip, #112]	; 0x70
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80105e2:	435d      	muls	r5, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80105e4:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 80105e6:	4363      	muls	r3, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80105e8:	f8d1 40a0 	ldr.w	r4, [r1, #160]	; 0xa0
 80105ec:	fb04 fe0e 	mul.w	lr, r4, lr
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80105f0:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
 80105f4:	4374      	muls	r4, r6

    tmp11 = z2 + z4;
 80105f6:	eb03 0904 	add.w	r9, r3, r4
    tmp13 = z2 - z4;
 80105fa:	1b1b      	subs	r3, r3, r4

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 80105fc:	f640 14e3 	movw	r4, #2531	; 0x9e3
 8010600:	435c      	muls	r4, r3
 8010602:	9402      	str	r4, [sp, #8]
    z5 = z3 << CONST_BITS;

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8010604:	f641 646f 	movw	r4, #7791	; 0x1e6f
 8010608:	fb04 f609 	mul.w	r6, r4, r9
    z4 = z5 + tmp12;
 801060c:	9c02      	ldr	r4, [sp, #8]
 801060e:	eb04 3a4e 	add.w	sl, r4, lr, lsl #13

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8010612:	f642 44b3 	movw	r4, #11443	; 0x2cb3
 8010616:	fb04 6805 	mla	r8, r4, r5, r6
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 801061a:	f240 7414 	movw	r4, #1812	; 0x714
 801061e:	436c      	muls	r4, r5
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8010620:	44d0      	add	r8, sl
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8010622:	1ba6      	subs	r6, r4, r6

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8010624:	9c02      	ldr	r4, [sp, #8]
 8010626:	ebc4 344e 	rsb	r4, r4, lr, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 801062a:	44b2      	add	sl, r6
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 801062c:	f241 26cf 	movw	r6, #4815	; 0x12cf
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8010630:	eba4 3403 	sub.w	r4, r4, r3, lsl #12

    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8010634:	1aeb      	subs	r3, r5, r3
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8010636:	fb06 f909 	mul.w	r9, r6, r9

    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801063a:	f642 0653 	movw	r6, #10323	; 0x2853
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 801063e:	eba3 0e0e 	sub.w	lr, r3, lr
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8010642:	f241 438c 	movw	r3, #5260	; 0x148c
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8010646:	436e      	muls	r6, r5
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8010648:	435d      	muls	r5, r3

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801064a:	9b00      	ldr	r3, [sp, #0]
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801064c:	eba6 0609 	sub.w	r6, r6, r9
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8010650:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8010654:	4443      	add	r3, r8
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8010656:	eba5 0909 	sub.w	r9, r5, r9
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801065a:	1b36      	subs	r6, r6, r4
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801065c:	12db      	asrs	r3, r3, #11
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801065e:	444c      	add	r4, r9
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8010660:	f842 3c04 	str.w	r3, [r2, #-4]
    wsptr[8*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8010664:	9b00      	ldr	r3, [sp, #0]
 8010666:	eba3 0308 	sub.w	r3, r3, r8
 801066a:	12db      	asrs	r3, r3, #11
 801066c:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8010670:	19bb      	adds	r3, r7, r6
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8010672:	1bbf      	subs	r7, r7, r6
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8010674:	12db      	asrs	r3, r3, #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8010676:	12ff      	asrs	r7, r7, #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8010678:	61d3      	str	r3, [r2, #28]
    wsptr[8*2] = (int) (tmp22 + tmp12);
 801067a:	9b04      	ldr	r3, [sp, #16]
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801067c:	f8c2 70fc 	str.w	r7, [r2, #252]	; 0xfc
    wsptr[8*2] = (int) (tmp22 + tmp12);
 8010680:	eb0e 23e3 	add.w	r3, lr, r3, asr #11
 8010684:	63d3      	str	r3, [r2, #60]	; 0x3c
    wsptr[8*7] = (int) (tmp22 - tmp12);
 8010686:	9b04      	ldr	r3, [sp, #16]
 8010688:	ebce 23e3 	rsb	r3, lr, r3, asr #11
 801068c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8010690:	9b01      	ldr	r3, [sp, #4]
 8010692:	4423      	add	r3, r4
 8010694:	12db      	asrs	r3, r3, #11
 8010696:	65d3      	str	r3, [r2, #92]	; 0x5c
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8010698:	9b01      	ldr	r3, [sp, #4]
 801069a:	1b1c      	subs	r4, r3, r4
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801069c:	eb0b 030a 	add.w	r3, fp, sl
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80106a0:	ebab 0a0a 	sub.w	sl, fp, sl
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80106a4:	12db      	asrs	r3, r3, #11
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80106a6:	12e4      	asrs	r4, r4, #11
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80106a8:	67d3      	str	r3, [r2, #124]	; 0x7c
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80106aa:	ea4f 26ea 	mov.w	r6, sl, asr #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80106ae:	9b05      	ldr	r3, [sp, #20]
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80106b0:	f8c2 40bc 	str.w	r4, [r2, #188]	; 0xbc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80106b4:	4563      	cmp	r3, ip
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80106b6:	f8c2 609c 	str.w	r6, [r2, #156]	; 0x9c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80106ba:	f47f af48 	bne.w	801054e <jpeg_idct_10x10+0x1e>
 80106be:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 10 rows from work array, store into output array. */

  wsptr = workspace;
 80106c0:	aa06      	add	r2, sp, #24
 80106c2:	3b04      	subs	r3, #4
 80106c4:	9300      	str	r3, [sp, #0]
 80106c6:	9b03      	ldr	r3, [sp, #12]
 80106c8:	3324      	adds	r3, #36	; 0x24
 80106ca:	9304      	str	r3, [sp, #16]
  for (ctr = 0; ctr < 10; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80106cc:	9b00      	ldr	r3, [sp, #0]
    /* Add fudge factor here for final descale. */
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    z3 <<= CONST_BITS;
    z4 = (INT32) wsptr[4];
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 80106ce:	f640 56fc 	movw	r6, #3580	; 0xdfc
    z4 = (INT32) wsptr[4];
 80106d2:	6915      	ldr	r5, [r2, #16]
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 80106d4:	f242 449d 	movw	r4, #9373	; 0x249d
    outptr = output_buf[ctr] + output_col;
 80106d8:	4619      	mov	r1, r3
    tmp21 = tmp11 + tmp13;
    tmp23 = tmp11 - tmp13;

    /* Odd part */

    z1 = (INT32) wsptr[1];
 80106da:	f8d2 c004 	ldr.w	ip, [r2, #4]
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 80106de:	436c      	muls	r4, r5
			    & RANGE_MASK];
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 80106e0:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 80106e2:	f851 3f04 	ldr.w	r3, [r1, #4]!
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 80106e6:	fb06 f805 	mul.w	r8, r6, r5
    z2 = (INT32) wsptr[2];
 80106ea:	f852 6c18 	ldr.w	r6, [r2, #-24]
    outptr = output_buf[ctr] + output_col;
 80106ee:	9303      	str	r3, [sp, #12]
 80106f0:	9b03      	ldr	r3, [sp, #12]
 80106f2:	9100      	str	r1, [sp, #0]
 80106f4:	9960      	ldr	r1, [sp, #384]	; 0x180
    z3 = (INT32) wsptr[6];
 80106f6:	f852 5c08 	ldr.w	r5, [r2, #-8]
    outptr = output_buf[ctr] + output_col;
 80106fa:	1859      	adds	r1, r3, r1
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80106fc:	f852 3c20 	ldr.w	r3, [r2, #-32]
 8010700:	3310      	adds	r3, #16
    tmp11 = z3 - z2;
 8010702:	ebc8 3943 	rsb	r9, r8, r3, lsl #13
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8010706:	eba4 0808 	sub.w	r8, r4, r8
    tmp10 = z3 + z1;
 801070a:	eb04 3b43 	add.w	fp, r4, r3, lsl #13
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 801070e:	1974      	adds	r4, r6, r5
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8010710:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8010714:	ebc8 3343 	rsb	r3, r8, r3, lsl #13
 8010718:	9301      	str	r3, [sp, #4]
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 801071a:	f641 239a 	movw	r3, #6810	; 0x1a9a
 801071e:	4363      	muls	r3, r4
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8010720:	f241 0471 	movw	r4, #4209	; 0x1071
 8010724:	fb04 3a06 	mla	sl, r4, r6, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 8010728:	4c48      	ldr	r4, [pc, #288]	; (801084c <jpeg_idct_10x10+0x31c>)
 801072a:	fb04 3405 	mla	r4, r4, r5, r3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 801072e:	f641 656f 	movw	r5, #7791	; 0x1e6f
    tmp20 = tmp10 + tmp12;
 8010732:	eb0b 070a 	add.w	r7, fp, sl
    tmp24 = tmp10 - tmp12;
 8010736:	ebab 0b0a 	sub.w	fp, fp, sl
    tmp23 = tmp11 - tmp13;
 801073a:	eba9 0304 	sub.w	r3, r9, r4
    tmp21 = tmp11 + tmp13;
 801073e:	eb09 0604 	add.w	r6, r9, r4
    z2 = (INT32) wsptr[3];
 8010742:	f852 4c14 	ldr.w	r4, [r2, #-20]
    tmp23 = tmp11 - tmp13;
 8010746:	9302      	str	r3, [sp, #8]
    z4 = (INT32) wsptr[7];
 8010748:	f852 3c04 	ldr.w	r3, [r2, #-4]
    tmp11 = z2 + z4;
 801074c:	eb04 0903 	add.w	r9, r4, r3
    tmp13 = z2 - z4;
 8010750:	1ae3      	subs	r3, r4, r3
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8010752:	f640 14e3 	movw	r4, #2531	; 0x9e3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8010756:	fb05 f809 	mul.w	r8, r5, r9
    z4 = z3 + tmp12;
 801075a:	f852 5c0c 	ldr.w	r5, [r2, #-12]
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 801075e:	435c      	muls	r4, r3
    z4 = z3 + tmp12;
 8010760:	eb04 3a45 	add.w	sl, r4, r5, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8010764:	f642 45b3 	movw	r5, #11443	; 0x2cb3
 8010768:	fb05 8e0c 	mla	lr, r5, ip, r8
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 801076c:	f240 7514 	movw	r5, #1812	; 0x714
 8010770:	fb05 f50c 	mul.w	r5, r5, ip
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8010774:	44d6      	add	lr, sl
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8010776:	eba5 0508 	sub.w	r5, r5, r8
 801077a:	44aa      	add	sl, r5
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 801077c:	f241 25cf 	movw	r5, #4815	; 0x12cf
 8010780:	fb05 f909 	mul.w	r9, r5, r9
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8010784:	f852 5c0c 	ldr.w	r5, [r2, #-12]
 8010788:	ebc4 3445 	rsb	r4, r4, r5, lsl #13
 801078c:	eba4 3403 	sub.w	r4, r4, r3, lsl #12
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8010790:	ebac 0303 	sub.w	r3, ip, r3
 8010794:	035b      	lsls	r3, r3, #13
 8010796:	eba3 3845 	sub.w	r8, r3, r5, lsl #13
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801079a:	f241 438c 	movw	r3, #5260	; 0x148c
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801079e:	f642 0553 	movw	r5, #10323	; 0x2853
 80107a2:	fb05 f50c 	mul.w	r5, r5, ip
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80107a6:	fb03 fc0c 	mul.w	ip, r3, ip
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80107aa:	eb07 030e 	add.w	r3, r7, lr
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80107ae:	eba5 0509 	sub.w	r5, r5, r9
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80107b2:	eba7 070e 	sub.w	r7, r7, lr
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80107b6:	ebac 0909 	sub.w	r9, ip, r9
			    & RANGE_MASK];
 80107ba:	f3c3 4389 	ubfx	r3, r3, #18, #10
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80107be:	1b2d      	subs	r5, r5, r4
			    & RANGE_MASK];
 80107c0:	f3c7 4789 	ubfx	r7, r7, #18, #10
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80107c4:	444c      	add	r4, r9
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80107c6:	f810 9003 	ldrb.w	r9, [r0, r3]
 80107ca:	9b03      	ldr	r3, [sp, #12]
 80107cc:	469c      	mov	ip, r3
 80107ce:	9b60      	ldr	r3, [sp, #384]	; 0x180
 80107d0:	f80c 9003 	strb.w	r9, [ip, r3]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80107d4:	5dc3      	ldrb	r3, [r0, r7]
 80107d6:	724b      	strb	r3, [r1, #9]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80107d8:	1973      	adds	r3, r6, r5
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80107da:	1b76      	subs	r6, r6, r5
			    & RANGE_MASK];
 80107dc:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 80107e0:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80107e4:	5cc3      	ldrb	r3, [r0, r3]
 80107e6:	704b      	strb	r3, [r1, #1]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80107e8:	5d83      	ldrb	r3, [r0, r6]
 80107ea:	720b      	strb	r3, [r1, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80107ec:	9b01      	ldr	r3, [sp, #4]
 80107ee:	4443      	add	r3, r8
			    & RANGE_MASK];
 80107f0:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80107f4:	5cc3      	ldrb	r3, [r0, r3]
 80107f6:	708b      	strb	r3, [r1, #2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80107f8:	9b01      	ldr	r3, [sp, #4]
 80107fa:	eba3 0808 	sub.w	r8, r3, r8
			    & RANGE_MASK];
 80107fe:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8010802:	f810 3008 	ldrb.w	r3, [r0, r8]
 8010806:	71cb      	strb	r3, [r1, #7]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8010808:	9b02      	ldr	r3, [sp, #8]
 801080a:	4423      	add	r3, r4
			    & RANGE_MASK];
 801080c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8010810:	5cc3      	ldrb	r3, [r0, r3]
 8010812:	70cb      	strb	r3, [r1, #3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8010814:	9b02      	ldr	r3, [sp, #8]
 8010816:	1b1c      	subs	r4, r3, r4
			    & RANGE_MASK];
 8010818:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801081c:	5d03      	ldrb	r3, [r0, r4]
 801081e:	718b      	strb	r3, [r1, #6]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8010820:	eb0b 030a 	add.w	r3, fp, sl
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8010824:	ebab 0a0a 	sub.w	sl, fp, sl
			    & RANGE_MASK];
 8010828:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 801082c:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8010830:	5cc3      	ldrb	r3, [r0, r3]
 8010832:	710b      	strb	r3, [r1, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8010834:	f810 300a 	ldrb.w	r3, [r0, sl]
 8010838:	714b      	strb	r3, [r1, #5]
  for (ctr = 0; ctr < 10; ctr++) {
 801083a:	9b04      	ldr	r3, [sp, #16]
 801083c:	9900      	ldr	r1, [sp, #0]
 801083e:	428b      	cmp	r3, r1
 8010840:	f47f af44 	bne.w	80106cc <jpeg_idct_10x10+0x19c>
  }
}
 8010844:	b057      	add	sp, #348	; 0x15c
 8010846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801084a:	bf00      	nop
 801084c:	ffffba5c 	.word	0xffffba5c

08010850 <jpeg_idct_11x11>:

GLOBAL(void)
jpeg_idct_11x11 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010854:	b0e3      	sub	sp, #396	; 0x18c
 8010856:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8010858:	f1a2 0b02 	sub.w	fp, r2, #2
 801085c:	9308      	str	r3, [sp, #32]
 801085e:	3904      	subs	r1, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010860:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8010864:	3380      	adds	r3, #128	; 0x80
 8010866:	9301      	str	r3, [sp, #4]
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010868:	f102 030e 	add.w	r3, r2, #14
 801086c:	9309      	str	r3, [sp, #36]	; 0x24
  wsptr = workspace;
 801086e:	ab0a      	add	r3, sp, #40	; 0x28
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010870:	f93b cf02 	ldrsh.w	ip, [fp, #2]!
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8010874:	f640 59c9 	movw	r9, #3529	; 0xdc9
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010878:	f851 6f04 	ldr.w	r6, [r1, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801087c:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801087e:	f9bb 2020 	ldrsh.w	r2, [fp, #32]
 8010882:	6c0c      	ldr	r4, [r1, #64]	; 0x40
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010884:	fb06 fc0c 	mul.w	ip, r6, ip
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010888:	f9bb 8040 	ldrsh.w	r8, [fp, #64]	; 0x40
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 801088c:	f245 167e 	movw	r6, #20862	; 0x517e
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010890:	4354      	muls	r4, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010892:	f9bb 5060 	ldrsh.w	r5, [fp, #96]	; 0x60
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010896:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
    tmp10 <<= CONST_BITS;
 801089a:	ea4f 3c4c 	mov.w	ip, ip, lsl #13
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801089e:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80108a2:	fb02 f208 	mul.w	r2, r2, r8

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80108a6:	f9bb e050 	ldrsh.w	lr, [fp, #80]	; 0x50
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80108aa:	4368      	muls	r0, r5
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 80108ac:	1a15      	subs	r5, r2, r0
    z4 = z1 + z3;
 80108ae:	eb04 0800 	add.w	r8, r4, r0
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 80108b2:	4375      	muls	r5, r6
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 80108b4:	1b16      	subs	r6, r2, r4
 80108b6:	fb09 f906 	mul.w	r9, r9, r6
    z4 -= z2;
 80108ba:	eba8 0602 	sub.w	r6, r8, r2
 80108be:	9602      	str	r6, [sp, #8]
    tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
 80108c0:	f50c 6680 	add.w	r6, ip, #1024	; 0x400
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 80108c4:	9f02      	ldr	r7, [sp, #8]
 80108c6:	f642 3c6c 	movw	ip, #11116	; 0x2b6c
 80108ca:	fb0c 6c07 	mla	ip, ip, r7, r6
    tmp21 = tmp20 + tmp23 + tmp25 -
 80108ce:	eb05 0709 	add.w	r7, r5, r9
 80108d2:	4ed2      	ldr	r6, [pc, #840]	; (8010c1c <jpeg_idct_11x11+0x3cc>)
 80108d4:	4467      	add	r7, ip
 80108d6:	fb06 7602 	mla	r6, r6, r2, r7
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    tmp11 = z1 + z2;
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 80108da:	f641 476a 	movw	r7, #7274	; 0x1c6a
    tmp21 = tmp20 + tmp23 + tmp25 -
 80108de:	9603      	str	r6, [sp, #12]
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 80108e0:	f244 36b5 	movw	r6, #17333	; 0x43b5
 80108e4:	fb06 c600 	mla	r6, r6, r0, ip
 80108e8:	1975      	adds	r5, r6, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80108ea:	6e0e      	ldr	r6, [r1, #96]	; 0x60
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 80108ec:	9504      	str	r5, [sp, #16]
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 80108ee:	4dcc      	ldr	r5, [pc, #816]	; (8010c20 <jpeg_idct_11x11+0x3d0>)
 80108f0:	fb05 ca04 	mla	sl, r5, r4, ip
 80108f4:	eb0a 0509 	add.w	r5, sl, r9
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 80108f8:	f241 5a74 	movw	sl, #5492	; 0x1574
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 80108fc:	9505      	str	r5, [sp, #20]
    tmp24 += tmp25;
 80108fe:	4dc9      	ldr	r5, [pc, #804]	; (8010c24 <jpeg_idct_11x11+0x3d4>)
 8010900:	fb05 c808 	mla	r8, r5, r8, ip
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 8010904:	f605 35be 	addw	r5, r5, #3006	; 0xbbe
 8010908:	fb05 8000 	mla	r0, r5, r0, r8
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801090c:	6a0d      	ldr	r5, [r1, #32]
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 801090e:	9006      	str	r0, [sp, #24]
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
 8010910:	48c5      	ldr	r0, [pc, #788]	; (8010c28 <jpeg_idct_11x11+0x3d8>)
 8010912:	4344      	muls	r4, r0
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8010914:	f643 6039 	movw	r0, #15929	; 0x3e39
 8010918:	fb00 4402 	mla	r4, r0, r2, r4
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801091c:	f9bb 0070 	ldrsh.w	r0, [fp, #112]	; 0x70
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8010920:	eb04 0208 	add.w	r2, r4, r8
 8010924:	9207      	str	r2, [sp, #28]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010926:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
 801092a:	4355      	muls	r5, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801092c:	f9bb 2030 	ldrsh.w	r2, [fp, #48]	; 0x30
 8010930:	4356      	muls	r6, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010932:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
    tmp11 = z1 + z2;
 8010936:	19ac      	adds	r4, r5, r6
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010938:	fb02 fe0e 	mul.w	lr, r2, lr
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801093c:	f8d1 20e0 	ldr.w	r2, [r1, #224]	; 0xe0
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8010940:	eb0e 0804 	add.w	r8, lr, r4
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 8010944:	437c      	muls	r4, r7
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010946:	4342      	muls	r2, r0
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
    tmp10 = tmp11 + tmp12 + tmp13 -
 8010948:	4fb8      	ldr	r7, [pc, #736]	; (8010c2c <jpeg_idct_11x11+0x3dc>)
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 801094a:	eb08 0002 	add.w	r0, r8, r2
 801094e:	f44f 684c 	mov.w	r8, #3264	; 0xcc0
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8010952:	eb05 0902 	add.w	r9, r5, r2
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8010956:	fb08 f800 	mul.w	r8, r8, r0
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 801095a:	eb05 000e 	add.w	r0, r5, lr
 801095e:	fb0a fa00 	mul.w	sl, sl, r0
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8010962:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8010966:	fb00 8909 	mla	r9, r0, r9, r8
    tmp10 = tmp11 + tmp12 + tmp13 -
 801096a:	eb04 000a 	add.w	r0, r4, sl
 801096e:	4448      	add	r0, r9
 8010970:	fb07 0505 	mla	r5, r7, r5, r0
	    MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 8010974:	eb06 000e 	add.w	r0, r6, lr
 8010978:	f2a7 77ad 	subw	r7, r7, #1965	; 0x7ad
 801097c:	fb07 8000 	mla	r0, r7, r0, r8
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8010980:	f244 2758 	movw	r7, #16984	; 0x4258
 8010984:	fb07 0706 	mla	r7, r7, r6, r0
 8010988:	4427      	add	r7, r4
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 801098a:	4ca9      	ldr	r4, [pc, #676]	; (8010c30 <jpeg_idct_11x11+0x3e0>)
 801098c:	fb04 000e 	mla	r0, r4, lr, r0
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8010990:	4ca8      	ldr	r4, [pc, #672]	; (8010c34 <jpeg_idct_11x11+0x3e4>)
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8010992:	4450      	add	r0, sl
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8010994:	eb06 0a02 	add.w	sl, r6, r2
 8010998:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp11 += z1;
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 801099c:	f244 3447 	movw	r4, #17223	; 0x4347
 80109a0:	fb04 a402 	mla	r4, r4, r2, sl
    tmp11 += z1;
 80109a4:	4457      	add	r7, sl
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 80109a6:	44a1      	add	r9, r4
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 80109a8:	f242 040b 	movw	r4, #8203	; 0x200b
 80109ac:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 80109b0:	4ca1      	ldr	r4, [pc, #644]	; (8010c38 <jpeg_idct_11x11+0x3e8>)
 80109b2:	fb04 ee06 	mla	lr, r4, r6, lr
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 80109b6:	f2a4 64f7 	subw	r4, r4, #1783	; 0x6f7
 80109ba:	fb04 ee02 	mla	lr, r4, r2, lr
	     MULTIPLY(z4, FIX(1.684843907));             /* c3+c9 */

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80109be:	9a04      	ldr	r2, [sp, #16]
 80109c0:	442a      	add	r2, r5
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 80109c2:	44f0      	add	r8, lr
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80109c4:	12d2      	asrs	r2, r2, #11
 80109c6:	f843 2c04 	str.w	r2, [r3, #-4]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80109ca:	9a04      	ldr	r2, [sp, #16]
 80109cc:	1b55      	subs	r5, r2, r5
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80109ce:	9a03      	ldr	r2, [sp, #12]
 80109d0:	443a      	add	r2, r7
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80109d2:	12ed      	asrs	r5, r5, #11
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80109d4:	12d2      	asrs	r2, r2, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80109d6:	f8c3 513c 	str.w	r5, [r3, #316]	; 0x13c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80109da:	61da      	str	r2, [r3, #28]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80109dc:	9a03      	ldr	r2, [sp, #12]
 80109de:	1bd7      	subs	r7, r2, r7
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80109e0:	9a06      	ldr	r2, [sp, #24]
 80109e2:	4402      	add	r2, r0
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80109e4:	12ff      	asrs	r7, r7, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80109e6:	12d2      	asrs	r2, r2, #11
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80109e8:	f8c3 711c 	str.w	r7, [r3, #284]	; 0x11c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80109ec:	63da      	str	r2, [r3, #60]	; 0x3c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80109ee:	9a06      	ldr	r2, [sp, #24]
 80109f0:	1a10      	subs	r0, r2, r0
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80109f2:	9a05      	ldr	r2, [sp, #20]
 80109f4:	444a      	add	r2, r9
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80109f6:	12c0      	asrs	r0, r0, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80109f8:	12d2      	asrs	r2, r2, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80109fa:	f8c3 00fc 	str.w	r0, [r3, #252]	; 0xfc
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 80109fe:	9802      	ldr	r0, [sp, #8]
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8010a00:	65da      	str	r2, [r3, #92]	; 0x5c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8010a02:	9a05      	ldr	r2, [sp, #20]
 8010a04:	eba2 0909 	sub.w	r9, r2, r9
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8010a08:	9a07      	ldr	r2, [sp, #28]
 8010a0a:	4442      	add	r2, r8
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8010a0c:	ea4f 24e9 	mov.w	r4, r9, asr #11
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8010a10:	12d2      	asrs	r2, r2, #11
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8010a12:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8010a16:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8010a18:	9a07      	ldr	r2, [sp, #28]
 8010a1a:	eba2 0808 	sub.w	r8, r2, r8
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 8010a1e:	f645 02ad 	movw	r2, #22701	; 0x58ad
 8010a22:	fb02 c210 	mls	r2, r2, r0, ip
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8010a26:	ea4f 24e8 	mov.w	r4, r8, asr #11
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25, CONST_BITS-PASS1_BITS);
 8010a2a:	12d2      	asrs	r2, r2, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8010a2c:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25, CONST_BITS-PASS1_BITS);
 8010a30:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010a34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010a36:	455a      	cmp	r2, fp
 8010a38:	f47f af1a 	bne.w	8010870 <jpeg_idct_11x11+0x20>
 8010a3c:	9b08      	ldr	r3, [sp, #32]
 8010a3e:	f1a3 0e04 	sub.w	lr, r3, #4
 8010a42:	3328      	adds	r3, #40	; 0x28
 8010a44:	9309      	str	r3, [sp, #36]	; 0x24
  }

  /* Pass 2: process 11 rows from work array, store into output array. */

  wsptr = workspace;
 8010a46:	ab0a      	add	r3, sp, #40	; 0x28
  for (ctr = 0; ctr < 11; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8010a48:	f85e 2f04 	ldr.w	r2, [lr, #4]!

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[4];
    z3 = (INT32) wsptr[6];

    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8010a4c:	f245 1c7e 	movw	ip, #20862	; 0x517e
    outptr = output_buf[ctr] + output_col;
 8010a50:	996c      	ldr	r1, [sp, #432]	; 0x1b0
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8010a52:	f640 5ac9 	movw	sl, #3529	; 0xdc9
    z3 = (INT32) wsptr[6];
 8010a56:	699c      	ldr	r4, [r3, #24]
			     & RANGE_MASK];
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8010a58:	3320      	adds	r3, #32
    outptr = output_buf[ctr] + output_col;
 8010a5a:	9208      	str	r2, [sp, #32]
 8010a5c:	440a      	add	r2, r1
    z2 = (INT32) wsptr[4];
 8010a5e:	f853 1c10 	ldr.w	r1, [r3, #-16]
    z1 = (INT32) wsptr[2];
 8010a62:	f853 5c18 	ldr.w	r5, [r3, #-24]
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8010a66:	1b08      	subs	r0, r1, r4
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010a68:	f853 7c20 	ldr.w	r7, [r3, #-32]
    z4 = z1 + z3;
 8010a6c:	eb05 0804 	add.w	r8, r5, r4
    z3 = (INT32) wsptr[5];
 8010a70:	f853 9c0c 	ldr.w	r9, [r3, #-12]
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8010a74:	fb0c fc00 	mul.w	ip, ip, r0
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8010a78:	1b48      	subs	r0, r1, r5
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010a7a:	3710      	adds	r7, #16
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8010a7c:	fb0a fa00 	mul.w	sl, sl, r0
    z4 -= z2;
 8010a80:	eba8 0001 	sub.w	r0, r8, r1
 8010a84:	9002      	str	r0, [sp, #8]
    tmp10 <<= CONST_BITS;
 8010a86:	0378      	lsls	r0, r7, #13
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 8010a88:	9e02      	ldr	r6, [sp, #8]
 8010a8a:	f642 376c 	movw	r7, #11116	; 0x2b6c
 8010a8e:	fb07 0706 	mla	r7, r7, r6, r0
    tmp21 = tmp20 + tmp23 + tmp25 -
 8010a92:	eb0c 060a 	add.w	r6, ip, sl
 8010a96:	4861      	ldr	r0, [pc, #388]	; (8010c1c <jpeg_idct_11x11+0x3cc>)
 8010a98:	443e      	add	r6, r7
 8010a9a:	fb00 6001 	mla	r0, r0, r1, r6
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 8010a9e:	f641 466a 	movw	r6, #7274	; 0x1c6a
    tmp21 = tmp20 + tmp23 + tmp25 -
 8010aa2:	9003      	str	r0, [sp, #12]
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8010aa4:	f244 30b5 	movw	r0, #17333	; 0x43b5
 8010aa8:	fb00 7004 	mla	r0, r0, r4, r7
 8010aac:	4460      	add	r0, ip
 8010aae:	9004      	str	r0, [sp, #16]
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 8010ab0:	485b      	ldr	r0, [pc, #364]	; (8010c20 <jpeg_idct_11x11+0x3d0>)
 8010ab2:	fb00 7b05 	mla	fp, r0, r5, r7
 8010ab6:	eb0b 000a 	add.w	r0, fp, sl
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 8010aba:	f241 5b74 	movw	fp, #5492	; 0x1574
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 8010abe:	9005      	str	r0, [sp, #20]
    tmp24 += tmp25;
 8010ac0:	4858      	ldr	r0, [pc, #352]	; (8010c24 <jpeg_idct_11x11+0x3d4>)
 8010ac2:	fb00 7808 	mla	r8, r0, r8, r7
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 8010ac6:	f600 30be 	addw	r0, r0, #3006	; 0xbbe
 8010aca:	fb00 8004 	mla	r0, r0, r4, r8
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8010ace:	f643 6439 	movw	r4, #15929	; 0x3e39
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 8010ad2:	9006      	str	r0, [sp, #24]
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
 8010ad4:	4854      	ldr	r0, [pc, #336]	; (8010c28 <jpeg_idct_11x11+0x3d8>)
 8010ad6:	4345      	muls	r5, r0
    z2 = (INT32) wsptr[3];
 8010ad8:	f853 0c14 	ldr.w	r0, [r3, #-20]
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8010adc:	fb04 5501 	mla	r5, r4, r1, r5
    z1 = (INT32) wsptr[1];
 8010ae0:	f853 4c1c 	ldr.w	r4, [r3, #-28]
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8010ae4:	eb05 0108 	add.w	r1, r5, r8
    tmp11 = z1 + z2;
 8010ae8:	1825      	adds	r5, r4, r0
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8010aea:	9107      	str	r1, [sp, #28]
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8010aec:	eb09 0805 	add.w	r8, r9, r5
    z4 = (INT32) wsptr[7];
 8010af0:	f853 1c04 	ldr.w	r1, [r3, #-4]
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 8010af4:	4375      	muls	r5, r6
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 8010af6:	eb04 0609 	add.w	r6, r4, r9
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8010afa:	eb08 0c01 	add.w	ip, r8, r1
 8010afe:	f44f 684c 	mov.w	r8, #3264	; 0xcc0
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 8010b02:	fb0b fb06 	mul.w	fp, fp, r6
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8010b06:	eb04 0a01 	add.w	sl, r4, r1
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8010b0a:	fb08 f80c 	mul.w	r8, r8, ip
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8010b0e:	f640 36b8 	movw	r6, #3000	; 0xbb8
    tmp10 = tmp11 + tmp12 + tmp13 -
 8010b12:	eb05 0c0b 	add.w	ip, r5, fp
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8010b16:	fb06 8a0a 	mla	sl, r6, sl, r8
    tmp10 = tmp11 + tmp12 + tmp13 -
 8010b1a:	4e44      	ldr	r6, [pc, #272]	; (8010c2c <jpeg_idct_11x11+0x3dc>)
 8010b1c:	44d4      	add	ip, sl
 8010b1e:	fb06 cc04 	mla	ip, r6, r4, ip
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 8010b22:	eb00 0409 	add.w	r4, r0, r9
 8010b26:	f2a6 76ad 	subw	r6, r6, #1965	; 0x7ad
 8010b2a:	fb06 8404 	mla	r4, r6, r4, r8
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8010b2e:	f244 2658 	movw	r6, #16984	; 0x4258
 8010b32:	fb06 4600 	mla	r6, r6, r0, r4
 8010b36:	442e      	add	r6, r5
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8010b38:	4d3d      	ldr	r5, [pc, #244]	; (8010c30 <jpeg_idct_11x11+0x3e0>)
 8010b3a:	fb05 4409 	mla	r4, r5, r9, r4
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8010b3e:	4d3d      	ldr	r5, [pc, #244]	; (8010c34 <jpeg_idct_11x11+0x3e4>)
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8010b40:	445c      	add	r4, fp
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8010b42:	eb00 0b01 	add.w	fp, r0, r1
 8010b46:	fb05 fb0b 	mul.w	fp, r5, fp
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8010b4a:	f244 3547 	movw	r5, #17223	; 0x4347
 8010b4e:	fb05 b501 	mla	r5, r5, r1, fp
    tmp11 += z1;
 8010b52:	445e      	add	r6, fp
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8010b54:	44aa      	add	sl, r5
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8010b56:	f242 050b 	movw	r5, #8203	; 0x200b
 8010b5a:	fb05 f909 	mul.w	r9, r5, r9
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8010b5e:	4d36      	ldr	r5, [pc, #216]	; (8010c38 <jpeg_idct_11x11+0x3e8>)
 8010b60:	fb05 9900 	mla	r9, r5, r0, r9
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8010b64:	f2a5 65f7 	subw	r5, r5, #1783	; 0x6f7
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8010b68:	9801      	ldr	r0, [sp, #4]
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8010b6a:	fb05 9901 	mla	r9, r5, r1, r9
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8010b6e:	9904      	ldr	r1, [sp, #16]
 8010b70:	9d6c      	ldr	r5, [sp, #432]	; 0x1b0
 8010b72:	4461      	add	r1, ip
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8010b74:	44c8      	add	r8, r9
			     & RANGE_MASK];
 8010b76:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8010b7a:	5c41      	ldrb	r1, [r0, r1]
 8010b7c:	9808      	ldr	r0, [sp, #32]
 8010b7e:	5541      	strb	r1, [r0, r5]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8010b80:	9904      	ldr	r1, [sp, #16]
 8010b82:	eba1 000c 	sub.w	r0, r1, ip
 8010b86:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 8010b88:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8010b8c:	5c09      	ldrb	r1, [r1, r0]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8010b8e:	9801      	ldr	r0, [sp, #4]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8010b90:	7291      	strb	r1, [r2, #10]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8010b92:	9903      	ldr	r1, [sp, #12]
 8010b94:	4431      	add	r1, r6
			     & RANGE_MASK];
 8010b96:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8010b9a:	5c41      	ldrb	r1, [r0, r1]
 8010b9c:	7051      	strb	r1, [r2, #1]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8010b9e:	9903      	ldr	r1, [sp, #12]
 8010ba0:	1b8e      	subs	r6, r1, r6
			     & RANGE_MASK];
 8010ba2:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8010ba6:	5d81      	ldrb	r1, [r0, r6]
 8010ba8:	7251      	strb	r1, [r2, #9]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8010baa:	9906      	ldr	r1, [sp, #24]
 8010bac:	4421      	add	r1, r4
			     & RANGE_MASK];
 8010bae:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8010bb2:	5c41      	ldrb	r1, [r0, r1]
 8010bb4:	7091      	strb	r1, [r2, #2]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8010bb6:	9906      	ldr	r1, [sp, #24]
 8010bb8:	1b0c      	subs	r4, r1, r4
			     & RANGE_MASK];
 8010bba:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8010bbe:	5d01      	ldrb	r1, [r0, r4]
 8010bc0:	7211      	strb	r1, [r2, #8]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8010bc2:	9905      	ldr	r1, [sp, #20]
 8010bc4:	4451      	add	r1, sl
			     & RANGE_MASK];
 8010bc6:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8010bca:	5c41      	ldrb	r1, [r0, r1]
 8010bcc:	70d1      	strb	r1, [r2, #3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8010bce:	9905      	ldr	r1, [sp, #20]
 8010bd0:	eba1 0a0a 	sub.w	sl, r1, sl
			     & RANGE_MASK];
 8010bd4:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8010bd8:	f810 100a 	ldrb.w	r1, [r0, sl]
 8010bdc:	71d1      	strb	r1, [r2, #7]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8010bde:	9907      	ldr	r1, [sp, #28]
 8010be0:	4441      	add	r1, r8
			     & RANGE_MASK];
 8010be2:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8010be6:	5c41      	ldrb	r1, [r0, r1]
 8010be8:	7111      	strb	r1, [r2, #4]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8010bea:	9907      	ldr	r1, [sp, #28]
 8010bec:	eba1 0808 	sub.w	r8, r1, r8
			     & RANGE_MASK];
 8010bf0:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8010bf4:	f810 1008 	ldrb.w	r1, [r0, r8]
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 8010bf8:	9802      	ldr	r0, [sp, #8]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8010bfa:	7191      	strb	r1, [r2, #6]
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 8010bfc:	f645 01ad 	movw	r1, #22701	; 0x58ad
 8010c00:	fb01 7710 	mls	r7, r1, r0, r7
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 8010c04:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 8010c06:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 8010c0a:	5dc9      	ldrb	r1, [r1, r7]
 8010c0c:	7151      	strb	r1, [r2, #5]
  for (ctr = 0; ctr < 11; ctr++) {
 8010c0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c10:	4572      	cmp	r2, lr
 8010c12:	f47f af19 	bne.w	8010a48 <jpeg_idct_11x11+0x1f8>
  }
}
 8010c16:	b063      	add	sp, #396	; 0x18c
 8010c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c1c:	ffffc5b4 	.word	0xffffc5b4
 8010c20:	ffffcf91 	.word	0xffffcf91
 8010c24:	ffffdb05 	.word	0xffffdb05
 8010c28:	ffffd37d 	.word	0xffffd37d
 8010c2c:	ffffe276 	.word	0xffffe276
 8010c30:	ffffd9da 	.word	0xffffd9da
 8010c34:	ffffc675 	.word	0xffffc675
 8010c38:	ffffd10d 	.word	0xffffd10d

08010c3c <jpeg_idct_12x12>:

GLOBAL(void)
jpeg_idct_12x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c40:	b0eb      	sub	sp, #428	; 0x1ac
 8010c42:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8010c44:	f1a2 0a02 	sub.w	sl, r2, #2
 8010c48:	9308      	str	r3, [sp, #32]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010c4a:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8010c4e:	f103 0880 	add.w	r8, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010c52:	1f0b      	subs	r3, r1, #4
 8010c54:	9300      	str	r3, [sp, #0]
 8010c56:	f102 030e 	add.w	r3, r2, #14
 8010c5a:	9309      	str	r3, [sp, #36]	; 0x24
  wsptr = workspace;
 8010c5c:	ab0a      	add	r3, sp, #40	; 0x28
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010c5e:	9900      	ldr	r1, [sp, #0]
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8010c60:	f640 09f7 	movw	r9, #2295	; 0x8f7
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010c64:	f93a 2f02 	ldrsh.w	r2, [sl, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010c68:	3304      	adds	r3, #4
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010c6a:	f851 4f04 	ldr.w	r4, [r1, #4]!
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010c6e:	f9ba b040 	ldrsh.w	fp, [sl, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010c72:	4354      	muls	r4, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010c74:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010c78:	f9ba 5060 	ldrsh.w	r5, [sl, #96]	; 0x60
 8010c7c:	f8d1 60c0 	ldr.w	r6, [r1, #192]	; 0xc0
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010c80:	fb02 fb0b 	mul.w	fp, r2, fp
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8010c84:	f242 7231 	movw	r2, #10033	; 0x2731
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010c88:	6c0f      	ldr	r7, [r1, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010c8a:	436e      	muls	r6, r5
    z3 <<= CONST_BITS;
 8010c8c:	0364      	lsls	r4, r4, #13
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8010c8e:	fb02 fb0b 	mul.w	fp, r2, fp
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010c92:	f9ba 2020 	ldrsh.w	r2, [sl, #32]
    z2 <<= CONST_BITS;
 8010c96:	0376      	lsls	r6, r6, #13
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010c98:	f504 6480 	add.w	r4, r4, #1024	; 0x400
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010c9c:	4357      	muls	r7, r2
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8010c9e:	f642 32b6 	movw	r2, #11190	; 0x2bb6
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010ca2:	9100      	str	r1, [sp, #0]
    tmp10 = z3 + z4;
 8010ca4:	eb04 000b 	add.w	r0, r4, fp
    tmp12 = z1 - z2;
 8010ca8:	ebc6 3547 	rsb	r5, r6, r7, lsl #13
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8010cac:	437a      	muls	r2, r7
    tmp11 = z3 - z4;
 8010cae:	eba4 0b0b 	sub.w	fp, r4, fp
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010cb2:	f9ba c030 	ldrsh.w	ip, [sl, #48]	; 0x30
    tmp21 = z3 + tmp12;
 8010cb6:	1961      	adds	r1, r4, r5
    tmp12 = z4 + z2;
 8010cb8:	eb02 0e06 	add.w	lr, r2, r6
    tmp12 = z4 - z1 - z2;
 8010cbc:	eba2 3247 	sub.w	r2, r2, r7, lsl #13
    tmp21 = z3 + tmp12;
 8010cc0:	9101      	str	r1, [sp, #4]
    tmp24 = z3 - tmp12;
 8010cc2:	1b61      	subs	r1, r4, r5
    tmp12 = z4 - z1 - z2;
 8010cc4:	1b96      	subs	r6, r2, r6
    tmp24 = z3 - tmp12;
 8010cc6:	9102      	str	r1, [sp, #8]
    tmp20 = tmp10 + tmp12;
 8010cc8:	eb00 010e 	add.w	r1, r0, lr
    tmp22 = tmp11 + tmp12;
 8010ccc:	eb0b 0206 	add.w	r2, fp, r6
    tmp20 = tmp10 + tmp12;
 8010cd0:	9103      	str	r1, [sp, #12]
    tmp25 = tmp10 - tmp12;
 8010cd2:	eba0 010e 	sub.w	r1, r0, lr
    tmp22 = tmp11 + tmp12;
 8010cd6:	9205      	str	r2, [sp, #20]
    tmp23 = tmp11 - tmp12;
 8010cd8:	ebab 0206 	sub.w	r2, fp, r6
    tmp25 = tmp10 - tmp12;
 8010cdc:	9104      	str	r1, [sp, #16]
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8010cde:	f641 3e8d 	movw	lr, #7053	; 0x1b8d
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010ce2:	9900      	ldr	r1, [sp, #0]
    tmp23 = tmp11 - tmp12;
 8010ce4:	9206      	str	r2, [sp, #24]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010ce6:	6e0c      	ldr	r4, [r1, #96]	; 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010ce8:	f9ba 2010 	ldrsh.w	r2, [sl, #16]
 8010cec:	6a0f      	ldr	r7, [r1, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010cee:	fb04 fc0c 	mul.w	ip, r4, ip
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010cf2:	f8d1 40a0 	ldr.w	r4, [r1, #160]	; 0xa0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010cf6:	4357      	muls	r7, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010cf8:	f9ba 2050 	ldrsh.w	r2, [sl, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010cfc:	f9ba 0070 	ldrsh.w	r0, [sl, #112]	; 0x70
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010d00:	4354      	muls	r4, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010d02:	f8d1 20e0 	ldr.w	r2, [r1, #224]	; 0xe0
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8010d06:	f642 11cf 	movw	r1, #10703	; 0x29cf
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010d0a:	4342      	muls	r2, r0
    tmp10 = z1 + z3;
 8010d0c:	193e      	adds	r6, r7, r4
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8010d0e:	fb01 fb0c 	mul.w	fp, r1, ip
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8010d12:	49af      	ldr	r1, [pc, #700]	; (8010fd0 <jpeg_idct_12x12+0x394>)
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8010d14:	1995      	adds	r5, r2, r6
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8010d16:	fb01 f00c 	mul.w	r0, r1, ip
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8010d1a:	fb0e fe05 	mul.w	lr, lr, r5
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8010d1e:	f640 055b 	movw	r5, #2139	; 0x85b
 8010d22:	fb05 e106 	mla	r1, r5, r6, lr
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8010d26:	eb0b 0501 	add.w	r5, fp, r1
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8010d2a:	9107      	str	r1, [sp, #28]
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8010d2c:	49a9      	ldr	r1, [pc, #676]	; (8010fd4 <jpeg_idct_12x12+0x398>)
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8010d2e:	ebae 0b0b 	sub.w	fp, lr, fp
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8010d32:	fb09 5907 	mla	r9, r9, r7, r5
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8010d36:	18a5      	adds	r5, r4, r2
 8010d38:	434d      	muls	r5, r1
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8010d3a:	f6a1 51db 	subw	r1, r1, #3547	; 0xddb
 8010d3e:	1946      	adds	r6, r0, r5
 8010d40:	fb01 6604 	mla	r6, r1, r4, r6
 8010d44:	9907      	ldr	r1, [sp, #28]
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */

    z1 -= z4;
    z2 -= z3;
 8010d46:	ebac 0404 	sub.w	r4, ip, r4
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8010d4a:	f241 1c51 	movw	ip, #4433	; 0x1151
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8010d4e:	440e      	add	r6, r1
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8010d50:	f243 21c6 	movw	r1, #12998	; 0x32c6
 8010d54:	fb01 bb02 	mla	fp, r1, r2, fp
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8010d58:	499f      	ldr	r1, [pc, #636]	; (8010fd8 <jpeg_idct_12x12+0x39c>)
 8010d5a:	fb01 0007 	mla	r0, r1, r7, r0
 8010d5e:	499f      	ldr	r1, [pc, #636]	; (8010fdc <jpeg_idct_12x12+0x3a0>)
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8010d60:	44ab      	add	fp, r5
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8010d62:	fb01 0002 	mla	r0, r1, r2, r0
    z1 -= z4;
 8010d66:	1aba      	subs	r2, r7, r2
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8010d68:	f201 4153 	addw	r1, r1, #1107	; 0x453
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8010d6c:	f641 077e 	movw	r7, #6270	; 0x187e
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8010d70:	1915      	adds	r5, r2, r4
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8010d72:	4470      	add	r0, lr
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8010d74:	fb0c f505 	mul.w	r5, ip, r5
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8010d78:	fb01 5404 	mla	r4, r1, r4, r5

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8010d7c:	9903      	ldr	r1, [sp, #12]
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8010d7e:	fb07 5202 	mla	r2, r7, r2, r5
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8010d82:	eb01 0709 	add.w	r7, r1, r9
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8010d86:	eba1 0909 	sub.w	r9, r1, r9
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8010d8a:	9901      	ldr	r1, [sp, #4]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8010d8c:	ea4f 25e9 	mov.w	r5, r9, asr #11
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8010d90:	12ff      	asrs	r7, r7, #11
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8010d92:	f8c3 515c 	str.w	r5, [r3, #348]	; 0x15c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8010d96:	188d      	adds	r5, r1, r2
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8010d98:	1a8a      	subs	r2, r1, r2
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8010d9a:	f843 7c04 	str.w	r7, [r3, #-4]
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8010d9e:	12ed      	asrs	r5, r5, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8010da0:	12d2      	asrs	r2, r2, #11
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8010da2:	61dd      	str	r5, [r3, #28]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8010da4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8010da8:	9a05      	ldr	r2, [sp, #20]
 8010daa:	4432      	add	r2, r6
 8010dac:	12d2      	asrs	r2, r2, #11
 8010dae:	63da      	str	r2, [r3, #60]	; 0x3c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8010db0:	9a05      	ldr	r2, [sp, #20]
 8010db2:	1b96      	subs	r6, r2, r6
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8010db4:	9a06      	ldr	r2, [sp, #24]
 8010db6:	445a      	add	r2, fp
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8010db8:	12f6      	asrs	r6, r6, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8010dba:	12d2      	asrs	r2, r2, #11
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8010dbc:	f8c3 611c 	str.w	r6, [r3, #284]	; 0x11c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8010dc0:	65da      	str	r2, [r3, #92]	; 0x5c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8010dc2:	9a06      	ldr	r2, [sp, #24]
 8010dc4:	eba2 0b0b 	sub.w	fp, r2, fp
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8010dc8:	9a02      	ldr	r2, [sp, #8]
 8010dca:	4422      	add	r2, r4
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8010dcc:	ea4f 25eb 	mov.w	r5, fp, asr #11
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8010dd0:	12d2      	asrs	r2, r2, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8010dd2:	f8c3 50fc 	str.w	r5, [r3, #252]	; 0xfc
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8010dd6:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8010dd8:	9a02      	ldr	r2, [sp, #8]
 8010dda:	1b14      	subs	r4, r2, r4
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8010ddc:	9a04      	ldr	r2, [sp, #16]
 8010dde:	4402      	add	r2, r0
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8010de0:	12e4      	asrs	r4, r4, #11
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8010de2:	12d2      	asrs	r2, r2, #11
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8010de4:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8010de8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8010dec:	9a04      	ldr	r2, [sp, #16]
 8010dee:	1a10      	subs	r0, r2, r0
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010df0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8010df2:	12c0      	asrs	r0, r0, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010df4:	4552      	cmp	r2, sl
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8010df6:	f8c3 00bc 	str.w	r0, [r3, #188]	; 0xbc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010dfa:	f47f af30 	bne.w	8010c5e <jpeg_idct_12x12+0x22>
 8010dfe:	9b08      	ldr	r3, [sp, #32]
  }

  /* Pass 2: process 12 rows from work array, store into output array. */

  wsptr = workspace;
 8010e00:	aa0a      	add	r2, sp, #40	; 0x28
 8010e02:	3b04      	subs	r3, #4
 8010e04:	9300      	str	r3, [sp, #0]
 8010e06:	9b08      	ldr	r3, [sp, #32]
 8010e08:	332c      	adds	r3, #44	; 0x2c
 8010e0a:	9309      	str	r3, [sp, #36]	; 0x24
  for (ctr = 0; ctr < 12; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8010e0c:	9b00      	ldr	r3, [sp, #0]

    tmp10 = z3 + z4;
    tmp11 = z3 - z4;

    z1 = (INT32) wsptr[2];
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8010e0e:	f642 30b6 	movw	r0, #11190	; 0x2bb6
    z4 = (INT32) wsptr[4];
 8010e12:	6915      	ldr	r5, [r2, #16]

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8010e14:	f641 3e8d 	movw	lr, #7053	; 0x1b8d
    outptr = output_buf[ctr] + output_col;
 8010e18:	4619      	mov	r1, r3
    z2 = (INT32) wsptr[6];
 8010e1a:	6996      	ldr	r6, [r2, #24]
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010e1c:	6814      	ldr	r4, [r2, #0]
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8010e1e:	f640 0af7 	movw	sl, #2295	; 0x8f7
    outptr = output_buf[ctr] + output_col;
 8010e22:	f851 3f04 	ldr.w	r3, [r1, #4]!
    z2 <<= CONST_BITS;
 8010e26:	0376      	lsls	r6, r6, #13
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010e28:	3410      	adds	r4, #16
    z1 = (INT32) wsptr[1];
 8010e2a:	f8d2 9004 	ldr.w	r9, [r2, #4]
    outptr = output_buf[ctr] + output_col;
 8010e2e:	9308      	str	r3, [sp, #32]
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8010e30:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 8010e32:	9b08      	ldr	r3, [sp, #32]
 8010e34:	9100      	str	r1, [sp, #0]
 8010e36:	9974      	ldr	r1, [sp, #464]	; 0x1d0
 8010e38:	440b      	add	r3, r1
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8010e3a:	f242 7131 	movw	r1, #10033	; 0x2731
 8010e3e:	434d      	muls	r5, r1
    z1 = (INT32) wsptr[2];
 8010e40:	f852 1c18 	ldr.w	r1, [r2, #-24]
    tmp12 = z1 - z2;
 8010e44:	ebc6 3b41 	rsb	fp, r6, r1, lsl #13
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8010e48:	4348      	muls	r0, r1
    tmp10 = z3 + z4;
 8010e4a:	eb05 3c44 	add.w	ip, r5, r4, lsl #13
    tmp21 = z3 + tmp12;
 8010e4e:	eb0b 3744 	add.w	r7, fp, r4, lsl #13
    tmp11 = z3 - z4;
 8010e52:	ebc5 3544 	rsb	r5, r5, r4, lsl #13
    tmp24 = z3 - tmp12;
 8010e56:	ebcb 3444 	rsb	r4, fp, r4, lsl #13
    tmp21 = z3 + tmp12;
 8010e5a:	9701      	str	r7, [sp, #4]
    z2 = (INT32) wsptr[3];
 8010e5c:	f852 bc14 	ldr.w	fp, [r2, #-20]
    tmp24 = z3 - tmp12;
 8010e60:	9402      	str	r4, [sp, #8]
    tmp12 = z4 + z2;
 8010e62:	1984      	adds	r4, r0, r6
    tmp12 = z4 - z1 - z2;
 8010e64:	eba0 3041 	sub.w	r0, r0, r1, lsl #13
    tmp20 = tmp10 + tmp12;
 8010e68:	eb0c 0704 	add.w	r7, ip, r4
    tmp25 = tmp10 - tmp12;
 8010e6c:	ebac 0404 	sub.w	r4, ip, r4
    tmp12 = z4 - z1 - z2;
 8010e70:	1b86      	subs	r6, r0, r6
    z4 = (INT32) wsptr[7];
 8010e72:	f852 0c04 	ldr.w	r0, [r2, #-4]
    tmp25 = tmp10 - tmp12;
 8010e76:	9404      	str	r4, [sp, #16]
    tmp22 = tmp11 + tmp12;
 8010e78:	19a9      	adds	r1, r5, r6
    z3 = (INT32) wsptr[5];
 8010e7a:	f852 4c0c 	ldr.w	r4, [r2, #-12]
    tmp20 = tmp10 + tmp12;
 8010e7e:	9703      	str	r7, [sp, #12]
    tmp22 = tmp11 + tmp12;
 8010e80:	9105      	str	r1, [sp, #20]
    tmp23 = tmp11 - tmp12;
 8010e82:	1ba9      	subs	r1, r5, r6
    tmp10 = z1 + z3;
 8010e84:	eb09 0604 	add.w	r6, r9, r4
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8010e88:	4f55      	ldr	r7, [pc, #340]	; (8010fe0 <jpeg_idct_12x12+0x3a4>)
    tmp23 = tmp11 - tmp12;
 8010e8a:	9106      	str	r1, [sp, #24]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8010e8c:	f642 11cf 	movw	r1, #10703	; 0x29cf
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8010e90:	eb00 0c06 	add.w	ip, r0, r6
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8010e94:	fb01 f50b 	mul.w	r5, r1, fp
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8010e98:	494d      	ldr	r1, [pc, #308]	; (8010fd0 <jpeg_idct_12x12+0x394>)
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8010e9a:	fb0e fc0c 	mul.w	ip, lr, ip
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8010e9e:	f640 0e5b 	movw	lr, #2139	; 0x85b
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8010ea2:	fb01 f10b 	mul.w	r1, r1, fp
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8010ea6:	fb0e ce06 	mla	lr, lr, r6, ip
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8010eaa:	eb05 060e 	add.w	r6, r5, lr
 8010eae:	fb0a 6609 	mla	r6, sl, r9, r6
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8010eb2:	eb04 0a00 	add.w	sl, r4, r0
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8010eb6:	9607      	str	r6, [sp, #28]
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8010eb8:	4e46      	ldr	r6, [pc, #280]	; (8010fd4 <jpeg_idct_12x12+0x398>)
 8010eba:	fb06 fa0a 	mul.w	sl, r6, sl
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8010ebe:	eb01 060a 	add.w	r6, r1, sl
 8010ec2:	fb07 6604 	mla	r6, r7, r4, r6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8010ec6:	4f44      	ldr	r7, [pc, #272]	; (8010fd8 <jpeg_idct_12x12+0x39c>)
    z2 -= z3;
 8010ec8:	ebab 0404 	sub.w	r4, fp, r4
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8010ecc:	f241 1b51 	movw	fp, #4433	; 0x1151
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8010ed0:	4476      	add	r6, lr
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8010ed2:	fb07 1109 	mla	r1, r7, r9, r1
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8010ed6:	ebac 0e05 	sub.w	lr, ip, r5
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8010eda:	4f40      	ldr	r7, [pc, #256]	; (8010fdc <jpeg_idct_12x12+0x3a0>)
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8010edc:	f243 25c6 	movw	r5, #12998	; 0x32c6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8010ee0:	fb07 1100 	mla	r1, r7, r0, r1
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8010ee4:	f207 4753 	addw	r7, r7, #1107	; 0x453
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8010ee8:	fb05 e500 	mla	r5, r5, r0, lr
    z1 -= z4;
 8010eec:	eba9 0000 	sub.w	r0, r9, r0
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8010ef0:	f641 097e 	movw	r9, #6270	; 0x187e
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8010ef4:	4455      	add	r5, sl
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8010ef6:	eb01 0a0c 	add.w	sl, r1, ip
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8010efa:	eb00 0c04 	add.w	ip, r0, r4
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8010efe:	9903      	ldr	r1, [sp, #12]
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8010f00:	fb0b fc0c 	mul.w	ip, fp, ip
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8010f04:	fb07 c404 	mla	r4, r7, r4, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8010f08:	9f07      	ldr	r7, [sp, #28]
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8010f0a:	fb09 c000 	mla	r0, r9, r0, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8010f0e:	eb01 0e07 	add.w	lr, r1, r7
 8010f12:	9f08      	ldr	r7, [sp, #32]
			     & RANGE_MASK];
 8010f14:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8010f18:	f818 c00e 	ldrb.w	ip, [r8, lr]
 8010f1c:	46be      	mov	lr, r7
 8010f1e:	9f74      	ldr	r7, [sp, #464]	; 0x1d0
 8010f20:	f80e c007 	strb.w	ip, [lr, r7]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8010f24:	9f07      	ldr	r7, [sp, #28]
 8010f26:	1bcf      	subs	r7, r1, r7
			     & RANGE_MASK];
 8010f28:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8010f2c:	f818 7007 	ldrb.w	r7, [r8, r7]
 8010f30:	72df      	strb	r7, [r3, #11]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8010f32:	9f01      	ldr	r7, [sp, #4]
 8010f34:	4407      	add	r7, r0
			     & RANGE_MASK];
 8010f36:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8010f3a:	f818 7007 	ldrb.w	r7, [r8, r7]
 8010f3e:	705f      	strb	r7, [r3, #1]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8010f40:	9f01      	ldr	r7, [sp, #4]
 8010f42:	1a38      	subs	r0, r7, r0
			     & RANGE_MASK];
 8010f44:	f3c0 4989 	ubfx	r9, r0, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8010f48:	f818 0009 	ldrb.w	r0, [r8, r9]
 8010f4c:	7298      	strb	r0, [r3, #10]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8010f4e:	9805      	ldr	r0, [sp, #20]
 8010f50:	4430      	add	r0, r6
			     & RANGE_MASK];
 8010f52:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8010f56:	f818 0000 	ldrb.w	r0, [r8, r0]
 8010f5a:	7098      	strb	r0, [r3, #2]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8010f5c:	9805      	ldr	r0, [sp, #20]
 8010f5e:	1b86      	subs	r6, r0, r6
			     & RANGE_MASK];
 8010f60:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8010f64:	f818 0006 	ldrb.w	r0, [r8, r6]
 8010f68:	7258      	strb	r0, [r3, #9]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8010f6a:	9806      	ldr	r0, [sp, #24]
 8010f6c:	4428      	add	r0, r5
			     & RANGE_MASK];
 8010f6e:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8010f72:	f818 0000 	ldrb.w	r0, [r8, r0]
 8010f76:	70d8      	strb	r0, [r3, #3]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8010f78:	9806      	ldr	r0, [sp, #24]
 8010f7a:	1b45      	subs	r5, r0, r5
			     & RANGE_MASK];
 8010f7c:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8010f80:	f818 0005 	ldrb.w	r0, [r8, r5]
 8010f84:	7218      	strb	r0, [r3, #8]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8010f86:	9802      	ldr	r0, [sp, #8]
 8010f88:	4420      	add	r0, r4
			     & RANGE_MASK];
 8010f8a:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8010f8e:	f818 0000 	ldrb.w	r0, [r8, r0]
 8010f92:	7118      	strb	r0, [r3, #4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8010f94:	9802      	ldr	r0, [sp, #8]
 8010f96:	1b04      	subs	r4, r0, r4
			     & RANGE_MASK];
 8010f98:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8010f9c:	f818 0004 	ldrb.w	r0, [r8, r4]
 8010fa0:	71d8      	strb	r0, [r3, #7]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8010fa2:	9804      	ldr	r0, [sp, #16]
 8010fa4:	4450      	add	r0, sl
			     & RANGE_MASK];
 8010fa6:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8010faa:	f818 0000 	ldrb.w	r0, [r8, r0]
 8010fae:	7158      	strb	r0, [r3, #5]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8010fb0:	9804      	ldr	r0, [sp, #16]
 8010fb2:	eba0 010a 	sub.w	r1, r0, sl
			     & RANGE_MASK];
 8010fb6:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8010fba:	f818 1001 	ldrb.w	r1, [r8, r1]
 8010fbe:	7199      	strb	r1, [r3, #6]
  for (ctr = 0; ctr < 12; ctr++) {
 8010fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fc2:	9900      	ldr	r1, [sp, #0]
 8010fc4:	428b      	cmp	r3, r1
 8010fc6:	f47f af21 	bne.w	8010e0c <jpeg_idct_12x12+0x1d0>
  }
}
 8010fca:	b06b      	add	sp, #428	; 0x1ac
 8010fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fd0:	ffffeeaf 	.word	0xffffeeaf
 8010fd4:	ffffde8b 	.word	0xffffde8b
 8010fd8:	ffffea5c 	.word	0xffffea5c
 8010fdc:	ffffc08c 	.word	0xffffc08c
 8010fe0:	ffffd0b0 	.word	0xffffd0b0

08010fe4 <jpeg_idct_13x13>:

GLOBAL(void)
jpeg_idct_13x13 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fe8:	b0f9      	sub	sp, #484	; 0x1e4
 8010fea:	1e95      	subs	r5, r2, #2
 8010fec:	930d      	str	r3, [sp, #52]	; 0x34
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010fee:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8010ff2:	3380      	adds	r3, #128	; 0x80
 8010ff4:	9301      	str	r3, [sp, #4]
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010ff6:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8010ff8:	f1a3 0b04 	sub.w	fp, r3, #4
 8010ffc:	f102 030e 	add.w	r3, r2, #14
 8011000:	930f      	str	r3, [sp, #60]	; 0x3c
  wsptr = workspace;
 8011002:	ab10      	add	r3, sp, #64	; 0x40
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011004:	f935 1f02 	ldrsh.w	r1, [r5, #2]!

    tmp10 = z3 + z4;
    tmp11 = z3 - z4;

    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8011008:	f240 3919 	movw	r9, #793	; 0x319
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801100c:	f85b 2f04 	ldr.w	r2, [fp, #4]!

    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 8011010:	f642 3ef1 	movw	lr, #11249	; 0x2bf1
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011014:	f9b5 0040 	ldrsh.w	r0, [r5, #64]	; 0x40
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */

    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */

    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011018:	f242 1ce0 	movw	ip, #8672	; 0x21e0
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801101c:	434a      	muls	r2, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801101e:	f8db 6040 	ldr.w	r6, [fp, #64]	; 0x40
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011022:	f9b5 1060 	ldrsh.w	r1, [r5, #96]	; 0x60
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
    tmp15 = z1 + z4;
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 8011026:	f641 6802 	movw	r8, #7682	; 0x1e02
    z1 <<= CONST_BITS;
 801102a:	0352      	lsls	r2, r2, #13
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801102c:	f8db 70e0 	ldr.w	r7, [fp, #224]	; 0xe0
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011030:	3304      	adds	r3, #4
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8011032:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011036:	9205      	str	r2, [sp, #20]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011038:	f9b5 2020 	ldrsh.w	r2, [r5, #32]
 801103c:	4356      	muls	r6, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801103e:	f8db 2080 	ldr.w	r2, [fp, #128]	; 0x80
 8011042:	4350      	muls	r0, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011044:	f8db 20c0 	ldr.w	r2, [fp, #192]	; 0xc0
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011048:	fb0c fc06 	mul.w	ip, ip, r6
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801104c:	434a      	muls	r2, r1
    tmp10 = z3 + z4;
 801104e:	1881      	adds	r1, r0, r2
    tmp11 = z3 - z4;
 8011050:	1a82      	subs	r2, r0, r2
 8011052:	9204      	str	r2, [sp, #16]
    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 8011054:	f242 42f9 	movw	r2, #9465	; 0x24f9
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8011058:	e9dd 0404 	ldrd	r0, r4, [sp, #16]
    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 801105c:	434a      	muls	r2, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 801105e:	fb09 4000 	mla	r0, r9, r0, r4
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8011062:	f640 497c 	movw	r9, #3196	; 0xc7c
    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 8011066:	fb0e 2e06 	mla	lr, lr, r6, r2
 801106a:	eb0e 0400 	add.w	r4, lr, r0
 801106e:	9406      	str	r4, [sp, #24]
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8011070:	f241 040c 	movw	r4, #4108	; 0x100c
 8011074:	4374      	muls	r4, r6
 8011076:	1aa4      	subs	r4, r4, r2
 8011078:	1822      	adds	r2, r4, r0
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 801107a:	9c04      	ldr	r4, [sp, #16]
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 801107c:	9207      	str	r2, [sp, #28]
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 801107e:	f44f 6222 	mov.w	r2, #2592	; 0xa20
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8011082:	fb09 0904 	mla	r9, r9, r4, r0
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8011086:	434a      	muls	r2, r1
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011088:	ebac 0c02 	sub.w	ip, ip, r2
 801108c:	eb0c 0009 	add.w	r0, ip, r9
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8011090:	f642 2c50 	movw	ip, #10832	; 0x2a50
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011094:	9008      	str	r0, [sp, #32]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8011096:	48d1      	ldr	r0, [pc, #836]	; (80113dc <jpeg_idct_13x13+0x3f8>)
 8011098:	fb00 2206 	mla	r2, r0, r6, r2
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 801109c:	9805      	ldr	r0, [sp, #20]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 801109e:	444a      	add	r2, r9
 80110a0:	9209      	str	r2, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
 80110a2:	f640 52f2 	movw	r2, #3570	; 0xdf2
 80110a6:	4351      	muls	r1, r2
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 80110a8:	f641 52fe 	movw	r2, #7678	; 0x1dfe
 80110ac:	4362      	muls	r2, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80110ae:	f8db 40a0 	ldr.w	r4, [fp, #160]	; 0xa0
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 80110b2:	1a12      	subs	r2, r2, r0
    tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
 80110b4:	48ca      	ldr	r0, [pc, #808]	; (80113e0 <jpeg_idct_13x13+0x3fc>)
 80110b6:	fb00 fa06 	mul.w	sl, r0, r6
 80110ba:	ebaa 0a01 	sub.w	sl, sl, r1
 80110be:	ebaa 0002 	sub.w	r0, sl, r2
 80110c2:	900a      	str	r0, [sp, #40]	; 0x28
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 80110c4:	48c7      	ldr	r0, [pc, #796]	; (80113e4 <jpeg_idct_13x13+0x400>)
 80110c6:	fb00 1106 	mla	r1, r0, r6, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80110ca:	f9b5 0030 	ldrsh.w	r0, [r5, #48]	; 0x30
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 80110ce:	1a8a      	subs	r2, r1, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80110d0:	f9b5 1010 	ldrsh.w	r1, [r5, #16]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 80110d4:	920b      	str	r2, [sp, #44]	; 0x2c
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80110d6:	f8db 2020 	ldr.w	r2, [fp, #32]
 80110da:	434a      	muls	r2, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80110dc:	f8db 1060 	ldr.w	r1, [fp, #96]	; 0x60
 80110e0:	4341      	muls	r1, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80110e2:	f9b5 0050 	ldrsh.w	r0, [r5, #80]	; 0x50
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80110e6:	9202      	str	r2, [sp, #8]
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80110e8:	4360      	muls	r0, r4
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80110ea:	f9b5 4070 	ldrsh.w	r4, [r5, #112]	; 0x70
 80110ee:	437c      	muls	r4, r7
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 80110f0:	f242 573e 	movw	r7, #9534	; 0x253e
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80110f4:	9403      	str	r4, [sp, #12]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 80110f6:	1854      	adds	r4, r2, r1
 80110f8:	fb0c f404 	mul.w	r4, ip, r4
    tmp10 = tmp11 + tmp12 + tmp13 -
	    MULTIPLY(z1, FIX(2.020082300));          /* c7+c5+c3-c1 */
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 80110fc:	f641 2ccb 	movw	ip, #6859	; 0x1acb
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8011100:	940c      	str	r4, [sp, #48]	; 0x30
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8011102:	1814      	adds	r4, r2, r0
 8011104:	4367      	muls	r7, r4
    tmp15 = z1 + z4;
 8011106:	9c03      	ldr	r4, [sp, #12]
 8011108:	eb02 0904 	add.w	r9, r2, r4
    tmp10 = tmp11 + tmp12 + tmp13 -
 801110c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 801110e:	fb08 fa09 	mul.w	sl, r8, r9
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011112:	eb04 0e07 	add.w	lr, r4, r7
 8011116:	4cb4      	ldr	r4, [pc, #720]	; (80113e8 <jpeg_idct_13x13+0x404>)
 8011118:	44d6      	add	lr, sl
 801111a:	fb04 ee02 	mla	lr, r4, r2, lr
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 801111e:	180c      	adds	r4, r1, r0
 8011120:	4ab2      	ldr	r2, [pc, #712]	; (80113ec <jpeg_idct_13x13+0x408>)
 8011122:	4354      	muls	r4, r2
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 8011124:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011126:	fb0c 4c01 	mla	ip, ip, r1, r4
 801112a:	4494      	add	ip, r2
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 801112c:	4ab0      	ldr	r2, [pc, #704]	; (80113f0 <jpeg_idct_13x13+0x40c>)
 801112e:	fb02 4400 	mla	r4, r2, r0, r4
 8011132:	19e2      	adds	r2, r4, r7
 8011134:	920e      	str	r2, [sp, #56]	; 0x38
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8011136:	9a03      	ldr	r2, [sp, #12]
 8011138:	188f      	adds	r7, r1, r2
 801113a:	4aae      	ldr	r2, [pc, #696]	; (80113f4 <jpeg_idct_13x13+0x410>)
 801113c:	437a      	muls	r2, r7
    tmp11 += tmp14;
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 801113e:	f244 6794 	movw	r7, #18068	; 0x4694
    tmp11 += tmp14;
 8011142:	4494      	add	ip, r2
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8011144:	920c      	str	r2, [sp, #48]	; 0x30
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8011146:	9a03      	ldr	r2, [sp, #12]
 8011148:	4614      	mov	r4, r2
 801114a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801114c:	fb07 2704 	mla	r7, r7, r4, r2
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8011150:	4aa9      	ldr	r2, [pc, #676]	; (80113f8 <jpeg_idct_13x13+0x414>)
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8011152:	4457      	add	r7, sl
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8011154:	eb00 0a04 	add.w	sl, r0, r4
 8011158:	fb02 fa0a 	mul.w	sl, r2, sl
    tmp12 += tmp14;
 801115c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801115e:	4452      	add	r2, sl
    tmp13 += tmp14;
 8011160:	44ba      	add	sl, r7
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 8011162:	f640 27d5 	movw	r7, #2773	; 0xad5
    tmp12 += tmp14;
 8011166:	4614      	mov	r4, r2
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8011168:	9a02      	ldr	r2, [sp, #8]
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 801116a:	fb07 f909 	mul.w	r9, r7, r9
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 801116e:	f640 2733 	movw	r7, #2611	; 0xa33
 8011172:	fb07 9202 	mla	r2, r7, r2, r9
 8011176:	4fa1      	ldr	r7, [pc, #644]	; (80113fc <jpeg_idct_13x13+0x418>)
 8011178:	fb07 2201 	mla	r2, r7, r1, r2
	    MULTIPLY(z2, FIX(0.466105296));          /* c1-c7 */
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 801117c:	1a41      	subs	r1, r0, r1
 801117e:	fb08 f801 	mul.w	r8, r8, r1
    tmp14 += z1;
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011182:	f640 414e 	movw	r1, #3150	; 0xc4e
    tmp14 += z1;
 8011186:	4442      	add	r2, r8
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011188:	fb01 8800 	mla	r8, r1, r0, r8
 801118c:	f46f 515f 	mvn.w	r1, #14272	; 0x37c0
 8011190:	9803      	ldr	r0, [sp, #12]
 8011192:	fb01 8800 	mla	r8, r1, r0, r8
	     MULTIPLY(z4, FIX(1.742345811));         /* c1+c11 */

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011196:	9906      	ldr	r1, [sp, #24]
 8011198:	4471      	add	r1, lr
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 801119a:	44c1      	add	r9, r8
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801119c:	12c9      	asrs	r1, r1, #11
 801119e:	f843 1c04 	str.w	r1, [r3, #-4]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80111a2:	9906      	ldr	r1, [sp, #24]
 80111a4:	eba1 0e0e 	sub.w	lr, r1, lr
 80111a8:	ea4f 21ee 	mov.w	r1, lr, asr #11
 80111ac:	f8c3 117c 	str.w	r1, [r3, #380]	; 0x17c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80111b0:	9908      	ldr	r1, [sp, #32]
 80111b2:	4461      	add	r1, ip
 80111b4:	12c9      	asrs	r1, r1, #11
 80111b6:	61d9      	str	r1, [r3, #28]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80111b8:	9908      	ldr	r1, [sp, #32]
 80111ba:	eba1 0c0c 	sub.w	ip, r1, ip
 80111be:	ea4f 21ec 	mov.w	r1, ip, asr #11
 80111c2:	f8c3 115c 	str.w	r1, [r3, #348]	; 0x15c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80111c6:	9907      	ldr	r1, [sp, #28]
 80111c8:	4421      	add	r1, r4
 80111ca:	12c9      	asrs	r1, r1, #11
 80111cc:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80111ce:	9907      	ldr	r1, [sp, #28]
 80111d0:	1b0c      	subs	r4, r1, r4
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80111d2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80111d4:	4451      	add	r1, sl
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80111d6:	12e4      	asrs	r4, r4, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80111d8:	12c9      	asrs	r1, r1, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80111da:	f8c3 413c 	str.w	r4, [r3, #316]	; 0x13c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80111de:	65d9      	str	r1, [r3, #92]	; 0x5c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80111e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80111e2:	eba1 0a0a 	sub.w	sl, r1, sl
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80111e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80111e8:	4411      	add	r1, r2
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80111ea:	ea4f 27ea 	mov.w	r7, sl, asr #11
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80111ee:	12c9      	asrs	r1, r1, #11
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80111f0:	f8c3 711c 	str.w	r7, [r3, #284]	; 0x11c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80111f4:	67d9      	str	r1, [r3, #124]	; 0x7c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80111f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80111f8:	1a8a      	subs	r2, r1, r2
 80111fa:	12d2      	asrs	r2, r2, #11
 80111fc:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8011200:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011202:	444a      	add	r2, r9
 8011204:	12d2      	asrs	r2, r2, #11
 8011206:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 801120a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801120c:	eba2 0909 	sub.w	r9, r2, r9
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8011210:	9a04      	ldr	r2, [sp, #16]
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8011212:	ea4f 21e9 	mov.w	r1, r9, asr #11
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8011216:	1b96      	subs	r6, r2, r6
 8011218:	f642 5241 	movw	r2, #11585	; 0x2d41
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 801121c:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8011220:	9905      	ldr	r1, [sp, #20]
 8011222:	fb02 1606 	mla	r6, r2, r6, r1
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011226:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26, CONST_BITS-PASS1_BITS);
 8011228:	12f6      	asrs	r6, r6, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801122a:	42aa      	cmp	r2, r5
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26, CONST_BITS-PASS1_BITS);
 801122c:	f8c3 60bc 	str.w	r6, [r3, #188]	; 0xbc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011230:	f47f aee8 	bne.w	8011004 <jpeg_idct_13x13+0x20>
 8011234:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  }

  /* Pass 2: process 13 rows from work array, store into output array. */

  wsptr = workspace;
 8011236:	ac10      	add	r4, sp, #64	; 0x40
 8011238:	3b04      	subs	r3, #4
 801123a:	9305      	str	r3, [sp, #20]
 801123c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801123e:	3330      	adds	r3, #48	; 0x30
 8011240:	930d      	str	r3, [sp, #52]	; 0x34
  for (ctr = 0; ctr < 13; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8011242:	9b05      	ldr	r3, [sp, #20]
    z4 = (INT32) wsptr[6];

    tmp10 = z3 + z4;
    tmp11 = z3 - z4;

    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 8011244:	f242 45f9 	movw	r5, #9465	; 0x24f9
    z3 = (INT32) wsptr[4];
 8011248:	6921      	ldr	r1, [r4, #16]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */

    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 801124a:	f642 3ef1 	movw	lr, #11249	; 0x2bf1
    outptr = output_buf[ctr] + output_col;
 801124e:	461a      	mov	r2, r3
    z2 = (INT32) wsptr[2];
 8011250:	f8d4 c008 	ldr.w	ip, [r4, #8]
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */

    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */

    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011254:	f242 17e0 	movw	r7, #8672	; 0x21e0
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8011258:	f640 497c 	movw	r9, #3196	; 0xc7c
    outptr = output_buf[ctr] + output_col;
 801125c:	f852 3f04 	ldr.w	r3, [r2, #4]!
    z2 = (INT32) wsptr[3];
    z3 = (INT32) wsptr[5];
    z4 = (INT32) wsptr[7];

    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8011260:	f242 563e 	movw	r6, #9534	; 0x253e
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011264:	fb07 f70c 	mul.w	r7, r7, ip
    tmp15 = z1 + z4;
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 8011268:	f641 6802 	movw	r8, #7682	; 0x1e02
    outptr = output_buf[ctr] + output_col;
 801126c:	930c      	str	r3, [sp, #48]	; 0x30
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 801126e:	3420      	adds	r4, #32
    outptr = output_buf[ctr] + output_col;
 8011270:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011272:	9205      	str	r2, [sp, #20]
 8011274:	9a82      	ldr	r2, [sp, #520]	; 0x208
 8011276:	4413      	add	r3, r2
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011278:	f854 2c20 	ldr.w	r2, [r4, #-32]
 801127c:	3210      	adds	r2, #16
 801127e:	9204      	str	r2, [sp, #16]
    z4 = (INT32) wsptr[6];
 8011280:	f854 2c08 	ldr.w	r2, [r4, #-8]
    tmp10 = z3 + z4;
 8011284:	1888      	adds	r0, r1, r2
    tmp11 = z3 - z4;
 8011286:	1a8a      	subs	r2, r1, r2
 8011288:	9203      	str	r2, [sp, #12]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 801128a:	f240 3219 	movw	r2, #793	; 0x319
 801128e:	9903      	ldr	r1, [sp, #12]
    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 8011290:	4345      	muls	r5, r0
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8011292:	434a      	muls	r2, r1
 8011294:	9904      	ldr	r1, [sp, #16]
    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 8011296:	fb0e 5e0c 	mla	lr, lr, ip, r5
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 801129a:	eb02 3241 	add.w	r2, r2, r1, lsl #13
    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 801129e:	eb0e 0102 	add.w	r1, lr, r2
 80112a2:	9106      	str	r1, [sp, #24]
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 80112a4:	f241 010c 	movw	r1, #4108	; 0x100c
 80112a8:	fb01 f10c 	mul.w	r1, r1, ip
 80112ac:	1b49      	subs	r1, r1, r5
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 80112ae:	9d03      	ldr	r5, [sp, #12]
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 80112b0:	4411      	add	r1, r2
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 80112b2:	fb09 2205 	mla	r2, r9, r5, r2
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 80112b6:	9107      	str	r1, [sp, #28]
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 80112b8:	f44f 6122 	mov.w	r1, #2592	; 0xa20
 80112bc:	4341      	muls	r1, r0
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 80112be:	1a7f      	subs	r7, r7, r1
 80112c0:	18bd      	adds	r5, r7, r2
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 80112c2:	f642 2750 	movw	r7, #10832	; 0x2a50
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 80112c6:	9508      	str	r5, [sp, #32]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 80112c8:	4d44      	ldr	r5, [pc, #272]	; (80113dc <jpeg_idct_13x13+0x3f8>)
 80112ca:	fb05 110c 	mla	r1, r5, ip, r1
    z3 = (INT32) wsptr[5];
 80112ce:	f854 5c0c 	ldr.w	r5, [r4, #-12]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 80112d2:	188a      	adds	r2, r1, r2
    tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
 80112d4:	f640 51f2 	movw	r1, #3570	; 0xdf2
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 80112d8:	9209      	str	r2, [sp, #36]	; 0x24
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 80112da:	f641 52fe 	movw	r2, #7678	; 0x1dfe
    tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
 80112de:	4341      	muls	r1, r0
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 80112e0:	9803      	ldr	r0, [sp, #12]
 80112e2:	4342      	muls	r2, r0
 80112e4:	9804      	ldr	r0, [sp, #16]
 80112e6:	eba2 3240 	sub.w	r2, r2, r0, lsl #13
    tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
 80112ea:	483d      	ldr	r0, [pc, #244]	; (80113e0 <jpeg_idct_13x13+0x3fc>)
 80112ec:	fb00 fa0c 	mul.w	sl, r0, ip
 80112f0:	ebaa 0a01 	sub.w	sl, sl, r1
 80112f4:	ebaa 0002 	sub.w	r0, sl, r2
 80112f8:	900a      	str	r0, [sp, #40]	; 0x28
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 80112fa:	483a      	ldr	r0, [pc, #232]	; (80113e4 <jpeg_idct_13x13+0x400>)
 80112fc:	fb00 110c 	mla	r1, r0, ip, r1
    z2 = (INT32) wsptr[3];
 8011300:	f854 0c14 	ldr.w	r0, [r4, #-20]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8011304:	1a8a      	subs	r2, r1, r2
 8011306:	920b      	str	r2, [sp, #44]	; 0x2c
    z1 = (INT32) wsptr[1];
 8011308:	f854 2c1c 	ldr.w	r2, [r4, #-28]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 801130c:	1811      	adds	r1, r2, r0
    z1 = (INT32) wsptr[1];
 801130e:	9202      	str	r2, [sp, #8]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8011310:	fb07 fb01 	mul.w	fp, r7, r1
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8011314:	1951      	adds	r1, r2, r5
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 8011316:	4f35      	ldr	r7, [pc, #212]	; (80113ec <jpeg_idct_13x13+0x408>)
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8011318:	434e      	muls	r6, r1
    tmp15 = z1 + z4;
 801131a:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801131e:	eb02 0901 	add.w	r9, r2, r1
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011322:	eb0b 0e06 	add.w	lr, fp, r6
 8011326:	4930      	ldr	r1, [pc, #192]	; (80113e8 <jpeg_idct_13x13+0x404>)
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 8011328:	fb08 fa09 	mul.w	sl, r8, r9
    tmp10 = tmp11 + tmp12 + tmp13 -
 801132c:	44d6      	add	lr, sl
 801132e:	fb01 ee02 	mla	lr, r1, r2, lr
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 8011332:	1941      	adds	r1, r0, r5
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8011334:	4a2e      	ldr	r2, [pc, #184]	; (80113f0 <jpeg_idct_13x13+0x40c>)
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 8011336:	4379      	muls	r1, r7
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 8011338:	f641 27cb 	movw	r7, #6859	; 0x1acb
 801133c:	fb07 1700 	mla	r7, r7, r0, r1
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8011340:	fb02 1105 	mla	r1, r2, r5, r1
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8011344:	f854 2c04 	ldr.w	r2, [r4, #-4]
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 8011348:	445f      	add	r7, fp
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 801134a:	eb00 0b02 	add.w	fp, r0, r2
 801134e:	4a29      	ldr	r2, [pc, #164]	; (80113f4 <jpeg_idct_13x13+0x410>)
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8011350:	4431      	add	r1, r6
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8011352:	f244 6694 	movw	r6, #18068	; 0x4694
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8011356:	fb02 fb0b 	mul.w	fp, r2, fp
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 801135a:	f854 2c04 	ldr.w	r2, [r4, #-4]
 801135e:	fb06 b602 	mla	r6, r6, r2, fp
    tmp11 += tmp14;
 8011362:	445f      	add	r7, fp
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8011364:	4456      	add	r6, sl
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8011366:	eb05 0a02 	add.w	sl, r5, r2
 801136a:	4a23      	ldr	r2, [pc, #140]	; (80113f8 <jpeg_idct_13x13+0x414>)
 801136c:	fb02 fa0a 	mul.w	sl, r2, sl
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8011370:	9a02      	ldr	r2, [sp, #8]
    tmp12 += tmp14;
 8011372:	4451      	add	r1, sl
    tmp13 += tmp14;
 8011374:	44b2      	add	sl, r6
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 8011376:	f640 26d5 	movw	r6, #2773	; 0xad5
 801137a:	fb06 f909 	mul.w	r9, r6, r9
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 801137e:	f640 2633 	movw	r6, #2611	; 0xa33
 8011382:	fb06 9202 	mla	r2, r6, r2, r9
 8011386:	4e1d      	ldr	r6, [pc, #116]	; (80113fc <jpeg_idct_13x13+0x418>)
 8011388:	fb06 2200 	mla	r2, r6, r0, r2
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 801138c:	1a28      	subs	r0, r5, r0
 801138e:	fb08 f800 	mul.w	r8, r8, r0
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011392:	f640 404e 	movw	r0, #3150	; 0xc4e
    tmp14 += z1;
 8011396:	4442      	add	r2, r8
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011398:	fb00 8805 	mla	r8, r0, r5, r8
 801139c:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80113a0:	f46f 505f 	mvn.w	r0, #14272	; 0x37c0
 80113a4:	fb00 8805 	mla	r8, r0, r5, r8
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80113a8:	9806      	ldr	r0, [sp, #24]
 80113aa:	9d01      	ldr	r5, [sp, #4]
 80113ac:	4470      	add	r0, lr
 80113ae:	9e82      	ldr	r6, [sp, #520]	; 0x208
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 80113b0:	44c1      	add	r9, r8
			     & RANGE_MASK];
 80113b2:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80113b6:	5c28      	ldrb	r0, [r5, r0]
 80113b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80113ba:	55a8      	strb	r0, [r5, r6]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80113bc:	9806      	ldr	r0, [sp, #24]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80113be:	9d01      	ldr	r5, [sp, #4]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80113c0:	eba0 0e0e 	sub.w	lr, r0, lr
 80113c4:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 80113c6:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80113ca:	f810 000e 	ldrb.w	r0, [r0, lr]
 80113ce:	7318      	strb	r0, [r3, #12]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80113d0:	9808      	ldr	r0, [sp, #32]
 80113d2:	4438      	add	r0, r7
			     & RANGE_MASK];
 80113d4:	f3c0 4089 	ubfx	r0, r0, #18, #10
 80113d8:	e012      	b.n	8011400 <jpeg_idct_13x13+0x41c>
 80113da:	bf00      	nop
 80113dc:	ffffd7ee 	.word	0xffffd7ee
 80113e0:	fffffa8c 	.word	0xfffffa8c
 80113e4:	ffffe64b 	.word	0xffffe64b
 80113e8:	ffffbf5b 	.word	0xffffbf5b
 80113ec:	fffff52b 	.word	0xfffff52b
 80113f0:	ffffcdb1 	.word	0xffffcdb1
 80113f4:	ffffdac2 	.word	0xffffdac2
 80113f8:	ffffeaf8 	.word	0xffffeaf8
 80113fc:	fffff116 	.word	0xfffff116
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011400:	5c28      	ldrb	r0, [r5, r0]
 8011402:	7058      	strb	r0, [r3, #1]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011404:	9808      	ldr	r0, [sp, #32]
 8011406:	1bc7      	subs	r7, r0, r7
			     & RANGE_MASK];
 8011408:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801140c:	5de8      	ldrb	r0, [r5, r7]
 801140e:	72d8      	strb	r0, [r3, #11]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011410:	9807      	ldr	r0, [sp, #28]
 8011412:	4408      	add	r0, r1
			     & RANGE_MASK];
 8011414:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011418:	5c28      	ldrb	r0, [r5, r0]
 801141a:	7098      	strb	r0, [r3, #2]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801141c:	9807      	ldr	r0, [sp, #28]
 801141e:	1a41      	subs	r1, r0, r1
			     & RANGE_MASK];
 8011420:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011424:	5c69      	ldrb	r1, [r5, r1]
 8011426:	7299      	strb	r1, [r3, #10]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011428:	990a      	ldr	r1, [sp, #40]	; 0x28
 801142a:	4451      	add	r1, sl
			     & RANGE_MASK];
 801142c:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011430:	5c69      	ldrb	r1, [r5, r1]
 8011432:	70d9      	strb	r1, [r3, #3]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011434:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011436:	eba1 0a0a 	sub.w	sl, r1, sl
			     & RANGE_MASK];
 801143a:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801143e:	f815 100a 	ldrb.w	r1, [r5, sl]
 8011442:	7259      	strb	r1, [r3, #9]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011444:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011446:	4411      	add	r1, r2
			     & RANGE_MASK];
 8011448:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801144c:	5c69      	ldrb	r1, [r5, r1]
 801144e:	7119      	strb	r1, [r3, #4]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011450:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011452:	1a8a      	subs	r2, r1, r2
			     & RANGE_MASK];
 8011454:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011458:	5caa      	ldrb	r2, [r5, r2]
 801145a:	721a      	strb	r2, [r3, #8]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801145c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801145e:	444a      	add	r2, r9
			     & RANGE_MASK];
 8011460:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8011464:	5caa      	ldrb	r2, [r5, r2]
 8011466:	715a      	strb	r2, [r3, #5]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8011468:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801146a:	eba2 0909 	sub.w	r9, r2, r9
			     & RANGE_MASK];
 801146e:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8011472:	f815 2009 	ldrb.w	r2, [r5, r9]
 8011476:	71da      	strb	r2, [r3, #7]
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8011478:	9a03      	ldr	r2, [sp, #12]
 801147a:	eba2 010c 	sub.w	r1, r2, ip
 801147e:	f642 5241 	movw	r2, #11585	; 0x2d41
 8011482:	434a      	muls	r2, r1
 8011484:	9904      	ldr	r1, [sp, #16]
 8011486:	eb02 3241 	add.w	r2, r2, r1, lsl #13
			     & RANGE_MASK];
 801148a:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26,
 801148e:	5caa      	ldrb	r2, [r5, r2]
 8011490:	719a      	strb	r2, [r3, #6]
  for (ctr = 0; ctr < 13; ctr++) {
 8011492:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011494:	9a05      	ldr	r2, [sp, #20]
 8011496:	4293      	cmp	r3, r2
 8011498:	f47f aed3 	bne.w	8011242 <jpeg_idct_13x13+0x25e>
  }
}
 801149c:	b079      	add	sp, #484	; 0x1e4
 801149e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114a2:	bf00      	nop

080114a4 <jpeg_idct_14x14>:

GLOBAL(void)
jpeg_idct_14x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80114a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114a8:	b0fd      	sub	sp, #500	; 0x1f4
 80114aa:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 80114ac:	f1a2 0a02 	sub.w	sl, r2, #2
 80114b0:	9309      	str	r3, [sp, #36]	; 0x24
 80114b2:	3c04      	subs	r4, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80114b4:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80114b8:	f103 0b80 	add.w	fp, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80114bc:	f102 030e 	add.w	r3, r2, #14
 80114c0:	930b      	str	r3, [sp, #44]	; 0x2c
  wsptr = workspace;
 80114c2:	ab0c      	add	r3, sp, #48	; 0x30
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80114c4:	f93a 2f02 	ldrsh.w	r2, [sl, #2]!
    z1 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 80114c8:	f642 01c6 	movw	r1, #10438	; 0x28c6
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80114cc:	f854 6f04 	ldr.w	r6, [r4, #4]!
			CONST_BITS-PASS1_BITS);

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 80114d0:	f242 3e62 	movw	lr, #9058	; 0x2362
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80114d4:	f9ba 7040 	ldrsh.w	r7, [sl, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
    tmp13 = z4 << CONST_BITS;

    tmp14 = z1 + z3;
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80114d8:	f642 28b7 	movw	r8, #10935	; 0x2ab7
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80114dc:	4356      	muls	r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80114de:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80114e2:	3304      	adds	r3, #4
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80114e4:	437a      	muls	r2, r7
    z1 <<= CONST_BITS;
 80114e6:	0376      	lsls	r6, r6, #13
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 80114e8:	f641 4737 	movw	r7, #7223	; 0x1c37
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 80114ec:	fb01 f002 	mul.w	r0, r1, r2
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 80114f0:	f640 2112 	movw	r1, #2578	; 0xa12
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 80114f4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 80114f8:	4357      	muls	r7, r2
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 80114fa:	fb01 fc02 	mul.w	ip, r1, r2
    tmp10 = z1 + z2;
 80114fe:	1835      	adds	r5, r6, r0
    tmp12 = z1 - z4;
 8011500:	1bf2      	subs	r2, r6, r7
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8011502:	4460      	add	r0, ip
    tmp11 = z1 + z3;
 8011504:	eb06 010c 	add.w	r1, r6, ip
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8011508:	1bc0      	subs	r0, r0, r7
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801150a:	f9ba 7020 	ldrsh.w	r7, [sl, #32]
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 801150e:	eba6 0040 	sub.w	r0, r6, r0, lsl #1
 8011512:	900a      	str	r0, [sp, #40]	; 0x28
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011514:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8011516:	fb00 fc07 	mul.w	ip, r0, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801151a:	f9ba 7060 	ldrsh.w	r7, [sl, #96]	; 0x60
 801151e:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 8011522:	4378      	muls	r0, r7
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8011524:	4fd2      	ldr	r7, [pc, #840]	; (8011870 <jpeg_idct_14x14+0x3cc>)
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8011526:	eb0c 0600 	add.w	r6, ip, r0
 801152a:	fb0e fe06 	mul.w	lr, lr, r6
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 801152e:	f640 06bd 	movw	r6, #2237	; 0x8bd
 8011532:	fb06 e60c 	mla	r6, r6, ip, lr
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8011536:	fb07 ee00 	mla	lr, r7, r0, lr
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 801153a:	f607 27e5 	addw	r7, r7, #2789	; 0xae5
 801153e:	4378      	muls	r0, r7
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8011540:	f241 37a3 	movw	r7, #5027	; 0x13a3
 8011544:	fb07 070c 	mla	r7, r7, ip, r0
    tmp20 = tmp10 + tmp13;
 8011548:	19a8      	adds	r0, r5, r6
 801154a:	9000      	str	r0, [sp, #0]
    tmp26 = tmp10 - tmp13;
 801154c:	1ba8      	subs	r0, r5, r6
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801154e:	6a25      	ldr	r5, [r4, #32]
    tmp26 = tmp10 - tmp13;
 8011550:	9001      	str	r0, [sp, #4]
    tmp21 = tmp11 + tmp14;
 8011552:	eb01 000e 	add.w	r0, r1, lr
    tmp25 = tmp11 - tmp14;
 8011556:	eba1 010e 	sub.w	r1, r1, lr
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801155a:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
    tmp21 = tmp11 + tmp14;
 801155e:	9002      	str	r0, [sp, #8]
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8011560:	f640 6ef2 	movw	lr, #3826	; 0xef2
    tmp25 = tmp11 - tmp14;
 8011564:	9103      	str	r1, [sp, #12]
    tmp22 = tmp12 + tmp15;
 8011566:	19d1      	adds	r1, r2, r7
    tmp24 = tmp12 - tmp15;
 8011568:	1bd2      	subs	r2, r2, r7
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801156a:	f9ba 0070 	ldrsh.w	r0, [sl, #112]	; 0x70
    tmp22 = tmp12 + tmp15;
 801156e:	9104      	str	r1, [sp, #16]
    tmp24 = tmp12 - tmp15;
 8011570:	9205      	str	r2, [sp, #20]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011572:	f9ba 2010 	ldrsh.w	r2, [sl, #16]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011576:	6e21      	ldr	r1, [r4, #96]	; 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011578:	4355      	muls	r5, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801157a:	f9ba 2030 	ldrsh.w	r2, [sl, #48]	; 0x30
 801157e:	4351      	muls	r1, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011580:	f9ba 2050 	ldrsh.w	r2, [sl, #80]	; 0x50
 8011584:	4356      	muls	r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011586:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 801158a:	4342      	muls	r2, r0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 801158c:	1868      	adds	r0, r5, r1
    tmp14 = z1 + z3;
 801158e:	19af      	adds	r7, r5, r6
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8011590:	fb08 f800 	mul.w	r8, r8, r0
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8011594:	f242 6052 	movw	r0, #9810	; 0x2652
 8011598:	fb00 f907 	mul.w	r9, r0, r7
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 801159c:	48b5      	ldr	r0, [pc, #724]	; (8011874 <jpeg_idct_14x14+0x3d0>)
 801159e:	eb08 0c09 	add.w	ip, r8, r9
 80115a2:	eb0c 3c42 	add.w	ip, ip, r2, lsl #13
 80115a6:	fb00 cc05 	mla	ip, r0, r5, ip
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 80115aa:	f641 0014 	movw	r0, #6164	; 0x1814
 80115ae:	4378      	muls	r0, r7
 80115b0:	9006      	str	r0, [sp, #24]
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 80115b2:	9f06      	ldr	r7, [sp, #24]
 80115b4:	48b0      	ldr	r0, [pc, #704]	; (8011878 <jpeg_idct_14x14+0x3d4>)
 80115b6:	fb00 7005 	mla	r0, r0, r5, r7
    z1    -= z2;
 80115ba:	1a6d      	subs	r5, r5, r1
    tmp16 += tmp15;
    z1    += z4;
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 80115bc:	198f      	adds	r7, r1, r6
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 80115be:	fb0e fe05 	mul.w	lr, lr, r5
 80115c2:	ebae 3e42 	sub.w	lr, lr, r2, lsl #13
    tmp16 += tmp15;
 80115c6:	4470      	add	r0, lr
 80115c8:	9007      	str	r0, [sp, #28]
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 80115ca:	f46f 60a2 	mvn.w	r0, #1296	; 0x510
 80115ce:	4378      	muls	r0, r7
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 80115d0:	4faa      	ldr	r7, [pc, #680]	; (801187c <jpeg_idct_14x14+0x3d8>)
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 80115d2:	eba0 3042 	sub.w	r0, r0, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 80115d6:	fb07 0701 	mla	r7, r7, r1, r0
 80115da:	44b8      	add	r8, r7
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 80115dc:	4fa8      	ldr	r7, [pc, #672]	; (8011880 <jpeg_idct_14x14+0x3dc>)
 80115de:	fb07 0006 	mla	r0, r7, r6, r0
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 80115e2:	1a77      	subs	r7, r6, r1
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 80115e4:	4448      	add	r0, r9
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 80115e6:	f642 49f8 	movw	r9, #11512	; 0x2cf8
 80115ea:	fb09 f907 	mul.w	r9, r9, r7
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 80115ee:	9008      	str	r0, [sp, #32]
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80115f0:	eb09 3742 	add.w	r7, r9, r2, lsl #13
 80115f4:	48a3      	ldr	r0, [pc, #652]	; (8011884 <jpeg_idct_14x14+0x3e0>)
    z1    += z4;
 80115f6:	442a      	add	r2, r5
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80115f8:	fb00 7706 	mla	r7, r0, r6, r7
 80115fc:	9806      	ldr	r0, [sp, #24]
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */

    tmp13 = (z1 - z3) << PASS1_BITS;
 80115fe:	1b96      	subs	r6, r2, r6

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011600:	9a00      	ldr	r2, [sp, #0]
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011602:	4407      	add	r7, r0
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8011604:	f241 5099 	movw	r0, #5529	; 0x1599
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011608:	4462      	add	r2, ip
    tmp13 = (z1 - z3) << PASS1_BITS;
 801160a:	00b6      	lsls	r6, r6, #2
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 801160c:	fb00 9101 	mla	r1, r0, r1, r9
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011610:	12d2      	asrs	r2, r2, #11
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8011612:	4471      	add	r1, lr
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011614:	f843 2c04 	str.w	r2, [r3, #-4]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011618:	9a00      	ldr	r2, [sp, #0]
 801161a:	eba2 0c0c 	sub.w	ip, r2, ip
 801161e:	ea4f 22ec 	mov.w	r2, ip, asr #11
 8011622:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011626:	9a02      	ldr	r2, [sp, #8]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011628:	9808      	ldr	r0, [sp, #32]
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801162a:	4442      	add	r2, r8
 801162c:	12d2      	asrs	r2, r2, #11
 801162e:	61da      	str	r2, [r3, #28]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011630:	9a02      	ldr	r2, [sp, #8]
 8011632:	eba2 0808 	sub.w	r8, r2, r8
 8011636:	ea4f 22e8 	mov.w	r2, r8, asr #11
 801163a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801163e:	9a04      	ldr	r2, [sp, #16]
 8011640:	4402      	add	r2, r0
 8011642:	12d2      	asrs	r2, r2, #11
 8011644:	63da      	str	r2, [r3, #60]	; 0x3c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011646:	9a04      	ldr	r2, [sp, #16]
 8011648:	1a10      	subs	r0, r2, r0
    wsptr[8*3]  = (int) (tmp23 + tmp13);
 801164a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801164c:	eb06 22e2 	add.w	r2, r6, r2, asr #11
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011650:	12c0      	asrs	r0, r0, #11
    wsptr[8*3]  = (int) (tmp23 + tmp13);
 8011652:	65da      	str	r2, [r3, #92]	; 0x5c
    wsptr[8*10] = (int) (tmp23 - tmp13);
 8011654:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011656:	f8c3 015c 	str.w	r0, [r3, #348]	; 0x15c
    wsptr[8*10] = (int) (tmp23 - tmp13);
 801165a:	ebc6 26e2 	rsb	r6, r6, r2, asr #11
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801165e:	9a05      	ldr	r2, [sp, #20]
 8011660:	443a      	add	r2, r7
    wsptr[8*10] = (int) (tmp23 - tmp13);
 8011662:	f8c3 613c 	str.w	r6, [r3, #316]	; 0x13c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011666:	12d2      	asrs	r2, r2, #11
 8011668:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801166a:	9a05      	ldr	r2, [sp, #20]
 801166c:	1bd7      	subs	r7, r2, r7
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 801166e:	9a03      	ldr	r2, [sp, #12]
 8011670:	440a      	add	r2, r1
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011672:	12ff      	asrs	r7, r7, #11
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8011674:	12d2      	asrs	r2, r2, #11
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011676:	f8c3 711c 	str.w	r7, [r3, #284]	; 0x11c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 801167a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 801167e:	9a03      	ldr	r2, [sp, #12]
 8011680:	1a51      	subs	r1, r2, r1
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8011682:	9a01      	ldr	r2, [sp, #4]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8011684:	12c9      	asrs	r1, r1, #11
 8011686:	f8c3 10fc 	str.w	r1, [r3, #252]	; 0xfc
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 801168a:	9907      	ldr	r1, [sp, #28]
 801168c:	440a      	add	r2, r1
 801168e:	12d2      	asrs	r2, r2, #11
 8011690:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8011694:	9a01      	ldr	r2, [sp, #4]
 8011696:	1a52      	subs	r2, r2, r1
 8011698:	12d2      	asrs	r2, r2, #11
 801169a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801169e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80116a0:	4552      	cmp	r2, sl
 80116a2:	f47f af0f 	bne.w	80114c4 <jpeg_idct_14x14+0x20>
 80116a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116a8:	3b04      	subs	r3, #4
 80116aa:	9301      	str	r3, [sp, #4]
 80116ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116ae:	3334      	adds	r3, #52	; 0x34
 80116b0:	930b      	str	r3, [sp, #44]	; 0x2c
  }

  /* Pass 2: process 14 rows from work array, store into output array. */

  wsptr = workspace;
 80116b2:	ab0c      	add	r3, sp, #48	; 0x30
 80116b4:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 14; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80116b6:	9b01      	ldr	r3, [sp, #4]
    /* Add fudge factor here for final descale. */
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    z1 <<= CONST_BITS;
    z4 = (INT32) wsptr[4];
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 80116b8:	f640 2012 	movw	r0, #2578	; 0xa12
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 80116bc:	f642 01c6 	movw	r1, #10438	; 0x28c6
    z2 = (INT32) wsptr[6];

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 80116c0:	4c6b      	ldr	r4, [pc, #428]	; (8011870 <jpeg_idct_14x14+0x3cc>)
    outptr = output_buf[ctr] + output_col;
 80116c2:	461a      	mov	r2, r3
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 80116c4:	f241 3ca3 	movw	ip, #5027	; 0x13a3
    z3 = (INT32) wsptr[5];
    z4 = (INT32) wsptr[7];
    z4 <<= CONST_BITS;

    tmp14 = z1 + z3;
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80116c8:	f642 29b7 	movw	r9, #10935	; 0x2ab7
    outptr = output_buf[ctr] + output_col;
 80116cc:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80116d0:	930a      	str	r3, [sp, #40]	; 0x28
 80116d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80116d4:	9201      	str	r2, [sp, #4]
 80116d6:	9a86      	ldr	r2, [sp, #536]	; 0x218
 80116d8:	189a      	adds	r2, r3, r2
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80116da:	9b00      	ldr	r3, [sp, #0]
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	f103 0810 	add.w	r8, r3, #16
    z4 = (INT32) wsptr[4];
 80116e2:	9b00      	ldr	r3, [sp, #0]
 80116e4:	691b      	ldr	r3, [r3, #16]
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 80116e6:	fb00 f503 	mul.w	r5, r0, r3
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 80116ea:	f641 4037 	movw	r0, #7223	; 0x1c37
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 80116ee:	4359      	muls	r1, r3
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 80116f0:	4358      	muls	r0, r3
    tmp11 = z1 + z3;
 80116f2:	eb05 3e48 	add.w	lr, r5, r8, lsl #13
    tmp10 = z1 + z2;
 80116f6:	eb01 3748 	add.w	r7, r1, r8, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 80116fa:	4429      	add	r1, r5
    tmp12 = z1 - z4;
 80116fc:	ebc0 3348 	rsb	r3, r0, r8, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8011700:	1a09      	subs	r1, r1, r0
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8011702:	f242 3062 	movw	r0, #9058	; 0x2362
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8011706:	0049      	lsls	r1, r1, #1
 8011708:	ebc1 3148 	rsb	r1, r1, r8, lsl #13
 801170c:	9102      	str	r1, [sp, #8]
    z1 = (INT32) wsptr[2];
 801170e:	9900      	ldr	r1, [sp, #0]
 8011710:	688d      	ldr	r5, [r1, #8]
    z2 = (INT32) wsptr[6];
 8011712:	698e      	ldr	r6, [r1, #24]
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8011714:	19a9      	adds	r1, r5, r6
 8011716:	4341      	muls	r1, r0
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8011718:	f640 00bd 	movw	r0, #2237	; 0x8bd
 801171c:	fb00 1005 	mla	r0, r0, r5, r1
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8011720:	fb04 1106 	mla	r1, r4, r6, r1
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 8011724:	f604 24e5 	addw	r4, r4, #2789	; 0xae5
 8011728:	4366      	muls	r6, r4
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 801172a:	fb0c 6505 	mla	r5, ip, r5, r6
    tmp20 = tmp10 + tmp13;
 801172e:	183e      	adds	r6, r7, r0
    tmp26 = tmp10 - tmp13;
 8011730:	1a38      	subs	r0, r7, r0
 8011732:	9003      	str	r0, [sp, #12]
    tmp21 = tmp11 + tmp14;
 8011734:	eb0e 0001 	add.w	r0, lr, r1
    tmp25 = tmp11 - tmp14;
 8011738:	ebae 0101 	sub.w	r1, lr, r1
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 801173c:	f640 6ef2 	movw	lr, #3826	; 0xef2
    tmp21 = tmp11 + tmp14;
 8011740:	9004      	str	r0, [sp, #16]
    tmp25 = tmp11 - tmp14;
 8011742:	9105      	str	r1, [sp, #20]
    tmp22 = tmp12 + tmp15;
 8011744:	1959      	adds	r1, r3, r5
    tmp24 = tmp12 - tmp15;
 8011746:	1b5b      	subs	r3, r3, r5
    z3 = (INT32) wsptr[5];
 8011748:	9800      	ldr	r0, [sp, #0]
    tmp22 = tmp12 + tmp15;
 801174a:	9106      	str	r1, [sp, #24]
    tmp24 = tmp12 - tmp15;
 801174c:	9307      	str	r3, [sp, #28]
    z2 = (INT32) wsptr[3];
 801174e:	9900      	ldr	r1, [sp, #0]
    z1 = (INT32) wsptr[1];
 8011750:	9b00      	ldr	r3, [sp, #0]
    z2 = (INT32) wsptr[3];
 8011752:	68c9      	ldr	r1, [r1, #12]
    z1 = (INT32) wsptr[1];
 8011754:	685b      	ldr	r3, [r3, #4]
    z3 = (INT32) wsptr[5];
 8011756:	f8d0 c014 	ldr.w	ip, [r0, #20]
    z4 = (INT32) wsptr[7];
 801175a:	f8d0 801c 	ldr.w	r8, [r0, #28]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 801175e:	1858      	adds	r0, r3, r1
    tmp14 = z1 + z3;
 8011760:	eb03 050c 	add.w	r5, r3, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8011764:	fb09 f900 	mul.w	r9, r9, r0
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8011768:	f242 6052 	movw	r0, #9810	; 0x2652
 801176c:	fb00 fa05 	mul.w	sl, r0, r5
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8011770:	4840      	ldr	r0, [pc, #256]	; (8011874 <jpeg_idct_14x14+0x3d0>)
 8011772:	eb09 070a 	add.w	r7, r9, sl
 8011776:	eb07 3748 	add.w	r7, r7, r8, lsl #13
 801177a:	fb00 7703 	mla	r7, r0, r3, r7
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 801177e:	f641 0014 	movw	r0, #6164	; 0x1814
 8011782:	4368      	muls	r0, r5
    tmp16 += tmp15;
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8011784:	eb01 050c 	add.w	r5, r1, ip
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8011788:	9008      	str	r0, [sp, #32]
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 801178a:	9c08      	ldr	r4, [sp, #32]
 801178c:	483a      	ldr	r0, [pc, #232]	; (8011878 <jpeg_idct_14x14+0x3d4>)
 801178e:	fb00 4003 	mla	r0, r0, r3, r4
    z1    -= z2;
 8011792:	1a5b      	subs	r3, r3, r1
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8011794:	4c39      	ldr	r4, [pc, #228]	; (801187c <jpeg_idct_14x14+0x3d8>)
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8011796:	fb0e fe03 	mul.w	lr, lr, r3
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */

    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 801179a:	eba3 030c 	sub.w	r3, r3, ip
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 801179e:	ebae 3e48 	sub.w	lr, lr, r8, lsl #13
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 80117a2:	035b      	lsls	r3, r3, #13
    tmp16 += tmp15;
 80117a4:	4470      	add	r0, lr
 80117a6:	9009      	str	r0, [sp, #36]	; 0x24
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 80117a8:	f46f 60a2 	mvn.w	r0, #1296	; 0x510
 80117ac:	4368      	muls	r0, r5
 80117ae:	eba0 3048 	sub.w	r0, r0, r8, lsl #13
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 80117b2:	fb04 0501 	mla	r5, r4, r1, r0
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 80117b6:	4c32      	ldr	r4, [pc, #200]	; (8011880 <jpeg_idct_14x14+0x3dc>)
 80117b8:	fb04 000c 	mla	r0, r4, ip, r0
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 80117bc:	44a9      	add	r9, r5
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 80117be:	ebac 0501 	sub.w	r5, ip, r1
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80117c2:	4c30      	ldr	r4, [pc, #192]	; (8011884 <jpeg_idct_14x14+0x3e0>)
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 80117c4:	4450      	add	r0, sl
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 80117c6:	f642 4af8 	movw	sl, #11512	; 0x2cf8
 80117ca:	fb0a fa05 	mul.w	sl, sl, r5
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80117ce:	eb0a 3548 	add.w	r5, sl, r8, lsl #13
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 80117d2:	eb03 3848 	add.w	r8, r3, r8, lsl #13

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80117d6:	19f3      	adds	r3, r6, r7
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80117d8:	fb04 550c 	mla	r5, r4, ip, r5
 80117dc:	9c08      	ldr	r4, [sp, #32]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80117de:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80117e2:	1bf6      	subs	r6, r6, r7
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80117e4:	4425      	add	r5, r4
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 80117e6:	f241 5499 	movw	r4, #5529	; 0x1599
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80117ea:	f81b 3003 	ldrb.w	r3, [fp, r3]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80117ee:	f3c6 4689 	ubfx	r6, r6, #18, #10
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 80117f2:	fb04 a101 	mla	r1, r4, r1, sl
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80117f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80117f8:	46a4      	mov	ip, r4
 80117fa:	9c86      	ldr	r4, [sp, #536]	; 0x218
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 80117fc:	4471      	add	r1, lr
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80117fe:	f80c 3004 	strb.w	r3, [ip, r4]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011802:	f81b 3006 	ldrb.w	r3, [fp, r6]
 8011806:	7353      	strb	r3, [r2, #13]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011808:	9b04      	ldr	r3, [sp, #16]
 801180a:	444b      	add	r3, r9
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801180c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011810:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8011814:	7053      	strb	r3, [r2, #1]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011816:	9b04      	ldr	r3, [sp, #16]
 8011818:	eba3 0909 	sub.w	r9, r3, r9
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801181c:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011820:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8011824:	7313      	strb	r3, [r2, #12]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011826:	9b06      	ldr	r3, [sp, #24]
 8011828:	4403      	add	r3, r0
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801182a:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801182e:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8011832:	7093      	strb	r3, [r2, #2]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011834:	9b06      	ldr	r3, [sp, #24]
 8011836:	1a18      	subs	r0, r3, r0
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011838:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801183c:	f81b 3000 	ldrb.w	r3, [fp, r0]
 8011840:	72d3      	strb	r3, [r2, #11]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011842:	9b02      	ldr	r3, [sp, #8]
 8011844:	4443      	add	r3, r8
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011846:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801184a:	f81b 3003 	ldrb.w	r3, [fp, r3]
 801184e:	70d3      	strb	r3, [r2, #3]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011850:	9b02      	ldr	r3, [sp, #8]
 8011852:	eba3 0808 	sub.w	r8, r3, r8
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011856:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801185a:	f81b 3008 	ldrb.w	r3, [fp, r8]
 801185e:	7293      	strb	r3, [r2, #10]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011860:	9b07      	ldr	r3, [sp, #28]
 8011862:	442b      	add	r3, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011864:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011868:	f81b 3003 	ldrb.w	r3, [fp, r3]
 801186c:	e00c      	b.n	8011888 <jpeg_idct_14x14+0x3e4>
 801186e:	bf00      	nop
 8011870:	ffffc8fc 	.word	0xffffc8fc
 8011874:	ffffdbf0 	.word	0xffffdbf0
 8011878:	ffffde0b 	.word	0xffffde0b
 801187c:	fffff26e 	.word	0xfffff26e
 8011880:	ffffb409 	.word	0xffffb409
 8011884:	ffffc9e6 	.word	0xffffc9e6
 8011888:	7113      	strb	r3, [r2, #4]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801188a:	9b07      	ldr	r3, [sp, #28]
 801188c:	1b5d      	subs	r5, r3, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801188e:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011892:	f81b 3005 	ldrb.w	r3, [fp, r5]
 8011896:	7253      	strb	r3, [r2, #9]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8011898:	9b05      	ldr	r3, [sp, #20]
 801189a:	440b      	add	r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801189c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80118a0:	f81b 3003 	ldrb.w	r3, [fp, r3]
 80118a4:	7153      	strb	r3, [r2, #5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80118a6:	9b05      	ldr	r3, [sp, #20]
 80118a8:	1a59      	subs	r1, r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80118aa:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80118ae:	f81b 3001 	ldrb.w	r3, [fp, r1]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 80118b2:	9909      	ldr	r1, [sp, #36]	; 0x24
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80118b4:	7213      	strb	r3, [r2, #8]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 80118b6:	9b03      	ldr	r3, [sp, #12]
 80118b8:	440b      	add	r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80118ba:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 80118be:	f81b 3003 	ldrb.w	r3, [fp, r3]
 80118c2:	7193      	strb	r3, [r2, #6]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 80118c4:	9b03      	ldr	r3, [sp, #12]
 80118c6:	1a58      	subs	r0, r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80118c8:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 80118cc:	f81b 3000 	ldrb.w	r3, [fp, r0]
 80118d0:	71d3      	strb	r3, [r2, #7]

    wsptr += 8;		/* advance pointer to next row */
 80118d2:	9b00      	ldr	r3, [sp, #0]
  for (ctr = 0; ctr < 14; ctr++) {
 80118d4:	9a01      	ldr	r2, [sp, #4]
    wsptr += 8;		/* advance pointer to next row */
 80118d6:	3320      	adds	r3, #32
 80118d8:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 14; ctr++) {
 80118da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80118dc:	4293      	cmp	r3, r2
 80118de:	f47f aeea 	bne.w	80116b6 <jpeg_idct_14x14+0x212>
  }
}
 80118e2:	b07d      	add	sp, #500	; 0x1f4
 80118e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080118e8 <jpeg_idct_15x15>:

GLOBAL(void)
jpeg_idct_15x15 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80118e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118ec:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 80118f0:	f1a2 0a02 	sub.w	sl, r2, #2
 80118f4:	930b      	str	r3, [sp, #44]	; 0x2c
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80118f6:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80118fa:	6d48      	ldr	r0, [r1, #84]	; 0x54
 80118fc:	f103 0b80 	add.w	fp, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011900:	1f03      	subs	r3, r0, #4
 8011902:	9300      	str	r3, [sp, #0]
 8011904:	f102 030e 	add.w	r3, r2, #14
 8011908:	930c      	str	r3, [sp, #48]	; 0x30
  wsptr = workspace;
 801190a:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801190c:	9900      	ldr	r1, [sp, #0]

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 801190e:	f640 50fc 	movw	r0, #3580	; 0xdfc
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011912:	f93a 2f02 	ldrsh.w	r2, [sl, #2]!

    z4 = z2 - z3;
    z3 += z2;
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8011916:	f642 6c13 	movw	ip, #11795	; 0x2e13
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801191a:	f851 5f04 	ldr.w	r5, [r1, #4]!
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */

    tmp25 = tmp13 - tmp10 - tmp11;
    tmp26 = tmp12 + tmp10 - tmp11 - z2;

    tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
 801191e:	f641 1e4c 	movw	lr, #6476	; 0x194c
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011922:	f9ba 6060 	ldrsh.w	r6, [sl, #96]	; 0x60
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011926:	3304      	adds	r3, #4
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011928:	6c0c      	ldr	r4, [r1, #64]	; 0x40
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801192a:	4355      	muls	r5, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801192c:	f9ba 2020 	ldrsh.w	r2, [sl, #32]
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011930:	9100      	str	r1, [sp, #0]
    z1 <<= CONST_BITS;
 8011932:	036d      	lsls	r5, r5, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011934:	4354      	muls	r4, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011936:	9a00      	ldr	r2, [sp, #0]
 8011938:	f9ba 1040 	ldrsh.w	r1, [sl, #64]	; 0x40
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 801193c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011940:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8011944:	4351      	muls	r1, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011946:	9a00      	ldr	r2, [sp, #0]
 8011948:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
 801194c:	4372      	muls	r2, r6
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 801194e:	f242 469d 	movw	r6, #9373	; 0x249d
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8011952:	fb00 f702 	mul.w	r7, r0, r2
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 8011956:	f44f 70bb 	mov.w	r0, #374	; 0x176
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 801195a:	4372      	muls	r2, r6
    tmp12 = z1 - tmp10;
 801195c:	eba5 0807 	sub.w	r8, r5, r7
    tmp13 = z1 + tmp11;
 8011960:	18ae      	adds	r6, r5, r2
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8011962:	1bd2      	subs	r2, r2, r7
    z4 = z2 - z3;
 8011964:	1a67      	subs	r7, r4, r1
    z3 += z2;
 8011966:	4421      	add	r1, r4
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8011968:	eba5 0242 	sub.w	r2, r5, r2, lsl #1
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 801196c:	fb0c f404 	mul.w	r4, ip, r4
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 8011970:	fb00 f507 	mul.w	r5, r0, r7
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8011974:	9201      	str	r2, [sp, #4]
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8011976:	f642 22ce 	movw	r2, #10958	; 0x2ace
 801197a:	434a      	muls	r2, r1
    tmp20 = tmp13 + tmp10 + tmp11;
 801197c:	eb06 0c02 	add.w	ip, r6, r2
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8011980:	eba8 0202 	sub.w	r2, r8, r2
 8011984:	442a      	add	r2, r5
    tmp20 = tmp13 + tmp10 + tmp11;
 8011986:	eb0c 0005 	add.w	r0, ip, r5
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 801198a:	f640 4cc7 	movw	ip, #3271	; 0xcc7
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 801198e:	4422      	add	r2, r4
    tmp20 = tmp13 + tmp10 + tmp11;
 8011990:	9002      	str	r0, [sp, #8]
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 8011992:	fb0c fc07 	mul.w	ip, ip, r7
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8011996:	9203      	str	r2, [sp, #12]
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 8011998:	f241 1282 	movw	r2, #4482	; 0x1182
 801199c:	434a      	muls	r2, r1
    tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
 801199e:	fb0e f101 	mul.w	r1, lr, r1
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 80119a2:	f44f 6e35 	mov.w	lr, #2896	; 0xb50
    tmp25 = tmp13 - tmp10 - tmp11;
 80119a6:	1ab5      	subs	r5, r6, r2
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 80119a8:	4442      	add	r2, r8
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 80119aa:	fb0e fe07 	mul.w	lr, lr, r7

    tmp21 = tmp12 + tmp10 + tmp11;
 80119ae:	4488      	add	r8, r1
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 80119b0:	eba2 020c 	sub.w	r2, r2, ip
    tmp24 = tmp13 - tmp10 + tmp11;
 80119b4:	1a71      	subs	r1, r6, r1
    tmp25 = tmp13 - tmp10 - tmp11;
 80119b6:	eba5 000c 	sub.w	r0, r5, ip

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80119ba:	f9ba 6050 	ldrsh.w	r6, [sl, #80]	; 0x50
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 80119be:	1b12      	subs	r2, r2, r4
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80119c0:	f9ba 4070 	ldrsh.w	r4, [sl, #112]	; 0x70
    tmp25 = tmp13 - tmp10 - tmp11;
 80119c4:	9004      	str	r0, [sp, #16]
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 80119c6:	9205      	str	r2, [sp, #20]
    tmp21 = tmp12 + tmp10 + tmp11;
 80119c8:	eb08 020e 	add.w	r2, r8, lr
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80119cc:	9800      	ldr	r0, [sp, #0]

    tmp13 = z2 - z4;
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 80119ce:	f241 0871 	movw	r8, #4209	; 0x1071
    tmp21 = tmp12 + tmp10 + tmp11;
 80119d2:	9206      	str	r2, [sp, #24]
    tmp24 = tmp13 - tmp10 + tmp11;
 80119d4:	eb01 020e 	add.w	r2, r1, lr
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80119d8:	6e05      	ldr	r5, [r0, #96]	; 0x60
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 80119da:	f641 2e9a 	movw	lr, #6810	; 0x1a9a
    tmp24 = tmp13 - tmp10 + tmp11;
 80119de:	9207      	str	r2, [sp, #28]
    tmp11 += tmp11;
 80119e0:	f44f 52b5 	mov.w	r2, #5792	; 0x16a0
 80119e4:	437a      	muls	r2, r7
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 80119e6:	f242 7731 	movw	r7, #10033	; 0x2731
    tmp11 += tmp11;
 80119ea:	9208      	str	r2, [sp, #32]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 80119ec:	9908      	ldr	r1, [sp, #32]
 80119ee:	9a01      	ldr	r2, [sp, #4]
 80119f0:	440a      	add	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80119f2:	f9ba 1010 	ldrsh.w	r1, [sl, #16]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 80119f6:	9209      	str	r2, [sp, #36]	; 0x24
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80119f8:	9a00      	ldr	r2, [sp, #0]
 80119fa:	6a12      	ldr	r2, [r2, #32]
 80119fc:	434a      	muls	r2, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80119fe:	f9ba 1030 	ldrsh.w	r1, [sl, #48]	; 0x30
 8011a02:	434d      	muls	r5, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011a04:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
 8011a08:	434e      	muls	r6, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011a0a:	f8d0 10e0 	ldr.w	r1, [r0, #224]	; 0xe0
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 8011a0e:	48d7      	ldr	r0, [pc, #860]	; (8011d6c <jpeg_idct_15x15+0x484>)
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011a10:	4361      	muls	r1, r4
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 8011a12:	437e      	muls	r6, r7
    tmp13 = z2 - z4;
 8011a14:	eba5 0c01 	sub.w	ip, r5, r1

    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
    z2 = z1 - z4;
 8011a18:	eba2 0901 	sub.w	r9, r2, r1
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 8011a1c:	eb02 040c 	add.w	r4, r2, ip
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */

    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8011a20:	fb07 f709 	mul.w	r7, r7, r9
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 8011a24:	fb0e f404 	mul.w	r4, lr, r4
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8011a28:	1bbf      	subs	r7, r7, r6
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 8011a2a:	fb00 4e0c 	mla	lr, r0, ip, r4
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 8011a2e:	48d0      	ldr	r0, [pc, #832]	; (8011d70 <jpeg_idct_15x15+0x488>)
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 8011a30:	fb08 4802 	mla	r8, r8, r2, r4
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 8011a34:	f642 5402 	movw	r4, #11522	; 0x2d02
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 8011a38:	4368      	muls	r0, r5
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8011a3a:	f644 6ca3 	movw	ip, #20131	; 0x4ea3
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 8011a3e:	fb04 6409 	mla	r4, r4, r9, r6
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8011a42:	eb02 0901 	add.w	r9, r2, r1
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 8011a46:	900a      	str	r0, [sp, #40]	; 0x28
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 8011a48:	48ca      	ldr	r0, [pc, #808]	; (8011d74 <jpeg_idct_15x15+0x48c>)
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8011a4a:	fb0c 4c01 	mla	ip, ip, r1, r4
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 8011a4e:	4345      	muls	r5, r0
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8011a50:	f200 7071 	addw	r0, r0, #1905	; 0x771
 8011a54:	fb00 4402 	mla	r4, r0, r2, r4
 8011a58:	980a      	ldr	r0, [sp, #40]	; 0x28
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8011a5a:	ebac 0c05 	sub.w	ip, ip, r5
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8011a5e:	4404      	add	r4, r0
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8011a60:	f241 2068 	movw	r0, #4712	; 0x1268
 8011a64:	fb00 f909 	mul.w	r9, r0, r9
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 8011a68:	f640 7039 	movw	r0, #3897	; 0xf39
 8011a6c:	fb00 9202 	mla	r2, r0, r2, r9
 8011a70:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011a72:	1b92      	subs	r2, r2, r6
 8011a74:	4402      	add	r2, r0
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 8011a76:	48c0      	ldr	r0, [pc, #768]	; (8011d78 <jpeg_idct_15x15+0x490>)
 8011a78:	fb00 9101 	mla	r1, r0, r1, r9
 8011a7c:	4431      	add	r1, r6
 8011a7e:	440d      	add	r5, r1

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011a80:	9902      	ldr	r1, [sp, #8]
 8011a82:	4461      	add	r1, ip
 8011a84:	12c9      	asrs	r1, r1, #11
 8011a86:	f843 1c04 	str.w	r1, [r3, #-4]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011a8a:	9902      	ldr	r1, [sp, #8]
 8011a8c:	eba1 0c0c 	sub.w	ip, r1, ip
 8011a90:	ea4f 21ec 	mov.w	r1, ip, asr #11
 8011a94:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011a98:	9906      	ldr	r1, [sp, #24]
 8011a9a:	4441      	add	r1, r8
 8011a9c:	12c9      	asrs	r1, r1, #11
 8011a9e:	61d9      	str	r1, [r3, #28]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011aa0:	9906      	ldr	r1, [sp, #24]
 8011aa2:	eba1 0808 	sub.w	r8, r1, r8
 8011aa6:	ea4f 21e8 	mov.w	r1, r8, asr #11
 8011aaa:	f8c3 119c 	str.w	r1, [r3, #412]	; 0x19c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011aae:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011ab0:	4439      	add	r1, r7
 8011ab2:	12c9      	asrs	r1, r1, #11
 8011ab4:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011ab6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011ab8:	1bcf      	subs	r7, r1, r7
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011aba:	9903      	ldr	r1, [sp, #12]
 8011abc:	4411      	add	r1, r2
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011abe:	12ff      	asrs	r7, r7, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011ac0:	12c9      	asrs	r1, r1, #11
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011ac2:	f8c3 717c 	str.w	r7, [r3, #380]	; 0x17c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011ac6:	65d9      	str	r1, [r3, #92]	; 0x5c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8011ac8:	9903      	ldr	r1, [sp, #12]
 8011aca:	1a8a      	subs	r2, r1, r2
 8011acc:	12d2      	asrs	r2, r2, #11
 8011ace:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011ad2:	9a07      	ldr	r2, [sp, #28]
 8011ad4:	4472      	add	r2, lr
 8011ad6:	12d2      	asrs	r2, r2, #11
 8011ad8:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011ada:	9a07      	ldr	r2, [sp, #28]
 8011adc:	eba2 0e0e 	sub.w	lr, r2, lr
 8011ae0:	ea4f 22ee 	mov.w	r2, lr, asr #11
 8011ae4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8011ae8:	9a04      	ldr	r2, [sp, #16]
 8011aea:	442a      	add	r2, r5
 8011aec:	12d2      	asrs	r2, r2, #11
 8011aee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8011af2:	9a04      	ldr	r2, [sp, #16]
 8011af4:	1b55      	subs	r5, r2, r5
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8011af6:	9a05      	ldr	r2, [sp, #20]
 8011af8:	4422      	add	r2, r4
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8011afa:	12ed      	asrs	r5, r5, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8011afc:	12d2      	asrs	r2, r2, #11
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8011afe:	f8c3 511c 	str.w	r5, [r3, #284]	; 0x11c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8011b02:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8011b06:	9a05      	ldr	r2, [sp, #20]
 8011b08:	1b14      	subs	r4, r2, r4
 8011b0a:	12e4      	asrs	r4, r4, #11
 8011b0c:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 8011b10:	9a01      	ldr	r2, [sp, #4]
 8011b12:	9908      	ldr	r1, [sp, #32]
 8011b14:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27, CONST_BITS-PASS1_BITS);
 8011b18:	12d2      	asrs	r2, r2, #11
 8011b1a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011b1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011b20:	4552      	cmp	r2, sl
 8011b22:	f47f aef3 	bne.w	801190c <jpeg_idct_15x15+0x24>
 8011b26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  }

  /* Pass 2: process 15 rows from work array, store into output array. */

  wsptr = workspace;
 8011b28:	ac0e      	add	r4, sp, #56	; 0x38
 8011b2a:	f1a3 0904 	sub.w	r9, r3, #4
 8011b2e:	3338      	adds	r3, #56	; 0x38
 8011b30:	930d      	str	r3, [sp, #52]	; 0x34
  for (ctr = 0; ctr < 15; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8011b32:	f859 3f04 	ldr.w	r3, [r9, #4]!

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[4];
    z4 = (INT32) wsptr[6];

    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8011b36:	f640 50fc 	movw	r0, #3580	; 0xdfc
    outptr = output_buf[ctr] + output_col;
 8011b3a:	9a90      	ldr	r2, [sp, #576]	; 0x240

    z4 = z2 - z3;
    z3 += z2;
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8011b3c:	f642 6e13 	movw	lr, #11795	; 0x2e13
    outptr = output_buf[ctr] + output_col;
 8011b40:	930c      	str	r3, [sp, #48]	; 0x30
    z4 = (INT32) wsptr[5];
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
    z4 = (INT32) wsptr[7];

    tmp13 = z2 - z4;
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 8011b42:	f641 289a 	movw	r8, #6810	; 0x1a9a
    outptr = output_buf[ctr] + output_col;
 8011b46:	4413      	add	r3, r2
    z4 = (INT32) wsptr[6];
 8011b48:	69a2      	ldr	r2, [r4, #24]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011b4a:	6827      	ldr	r7, [r4, #0]
			     & RANGE_MASK];
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8011b4c:	3420      	adds	r4, #32
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8011b4e:	fb00 fc02 	mul.w	ip, r0, r2
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 8011b52:	f242 409d 	movw	r0, #9373	; 0x249d
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011b56:	3710      	adds	r7, #16
    z2 = (INT32) wsptr[2];
 8011b58:	f854 6c18 	ldr.w	r6, [r4, #-24]
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 8011b5c:	4342      	muls	r2, r0
    z3 = (INT32) wsptr[4];
 8011b5e:	f854 1c10 	ldr.w	r1, [r4, #-16]
    tmp12 = z1 - tmp10;
 8011b62:	ebcc 3047 	rsb	r0, ip, r7, lsl #13
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8011b66:	fb0e fe06 	mul.w	lr, lr, r6
    tmp13 = z1 + tmp11;
 8011b6a:	eb02 3547 	add.w	r5, r2, r7, lsl #13
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8011b6e:	eba2 020c 	sub.w	r2, r2, ip
    z4 = z2 - z3;
 8011b72:	eba6 0c01 	sub.w	ip, r6, r1
    z3 += z2;
 8011b76:	4431      	add	r1, r6
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8011b78:	0052      	lsls	r2, r2, #1
 8011b7a:	ebc2 3247 	rsb	r2, r2, r7, lsl #13
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 8011b7e:	f44f 77bb 	mov.w	r7, #374	; 0x176
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8011b82:	9200      	str	r2, [sp, #0]
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8011b84:	f642 22ce 	movw	r2, #10958	; 0x2ace
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 8011b88:	fb07 f70c 	mul.w	r7, r7, ip
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8011b8c:	434a      	muls	r2, r1
    tmp20 = tmp13 + tmp10 + tmp11;
 8011b8e:	18ae      	adds	r6, r5, r2
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8011b90:	1a82      	subs	r2, r0, r2
 8011b92:	443a      	add	r2, r7
    tmp20 = tmp13 + tmp10 + tmp11;
 8011b94:	443e      	add	r6, r7
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8011b96:	4472      	add	r2, lr
    tmp20 = tmp13 + tmp10 + tmp11;
 8011b98:	9601      	str	r6, [sp, #4]
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 8011b9a:	f640 46c7 	movw	r6, #3271	; 0xcc7
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8011b9e:	9202      	str	r2, [sp, #8]
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 8011ba0:	f241 1282 	movw	r2, #4482	; 0x1182
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 8011ba4:	fb06 f60c 	mul.w	r6, r6, ip
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 8011ba8:	434a      	muls	r2, r1
    tmp25 = tmp13 - tmp10 - tmp11;
 8011baa:	1aaf      	subs	r7, r5, r2
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8011bac:	4402      	add	r2, r0
 8011bae:	1b92      	subs	r2, r2, r6
    tmp25 = tmp13 - tmp10 - tmp11;
 8011bb0:	1bbf      	subs	r7, r7, r6
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8011bb2:	eba2 020e 	sub.w	r2, r2, lr
    tmp25 = tmp13 - tmp10 - tmp11;
 8011bb6:	9703      	str	r7, [sp, #12]
    z2 = (INT32) wsptr[3];
 8011bb8:	f854 7c14 	ldr.w	r7, [r4, #-20]
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8011bbc:	9204      	str	r2, [sp, #16]
    tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
 8011bbe:	f641 124c 	movw	r2, #6476	; 0x194c
 8011bc2:	4351      	muls	r1, r2
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 8011bc4:	f44f 6235 	mov.w	r2, #2896	; 0xb50
    tmp21 = tmp12 + tmp10 + tmp11;
 8011bc8:	4408      	add	r0, r1
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 8011bca:	fb02 f20c 	mul.w	r2, r2, ip
    tmp24 = tmp13 - tmp10 + tmp11;
 8011bce:	1a69      	subs	r1, r5, r1
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 8011bd0:	f242 7531 	movw	r5, #10033	; 0x2731
    tmp21 = tmp12 + tmp10 + tmp11;
 8011bd4:	4410      	add	r0, r2
    tmp24 = tmp13 - tmp10 + tmp11;
 8011bd6:	188a      	adds	r2, r1, r2
    tmp21 = tmp12 + tmp10 + tmp11;
 8011bd8:	9005      	str	r0, [sp, #20]
    tmp24 = tmp13 - tmp10 + tmp11;
 8011bda:	9206      	str	r2, [sp, #24]
    tmp11 += tmp11;
 8011bdc:	f44f 52b5 	mov.w	r2, #5792	; 0x16a0
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 8011be0:	4862      	ldr	r0, [pc, #392]	; (8011d6c <jpeg_idct_15x15+0x484>)
    tmp11 += tmp11;
 8011be2:	fb02 f20c 	mul.w	r2, r2, ip
 8011be6:	9207      	str	r2, [sp, #28]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 8011be8:	9907      	ldr	r1, [sp, #28]
 8011bea:	9a00      	ldr	r2, [sp, #0]
 8011bec:	440a      	add	r2, r1
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 8011bee:	f854 1c0c 	ldr.w	r1, [r4, #-12]
 8011bf2:	fb05 fc01 	mul.w	ip, r5, r1
    z4 = (INT32) wsptr[7];
 8011bf6:	f854 1c04 	ldr.w	r1, [r4, #-4]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 8011bfa:	9208      	str	r2, [sp, #32]
    tmp13 = z2 - z4;
 8011bfc:	eba7 0e01 	sub.w	lr, r7, r1
    z1 = (INT32) wsptr[1];
 8011c00:	f854 2c1c 	ldr.w	r2, [r4, #-28]
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 8011c04:	eb02 060e 	add.w	r6, r2, lr
    z2 = z1 - z4;
 8011c08:	eba2 0a01 	sub.w	sl, r2, r1
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 8011c0c:	fb08 f606 	mul.w	r6, r8, r6
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 8011c10:	f241 0871 	movw	r8, #4209	; 0x1071
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8011c14:	fb05 f50a 	mul.w	r5, r5, sl
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 8011c18:	fb00 600e 	mla	r0, r0, lr, r6
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 8011c1c:	f642 5e02 	movw	lr, #11522	; 0x2d02
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 8011c20:	fb08 6802 	mla	r8, r8, r2, r6
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8011c24:	f644 66a3 	movw	r6, #20131	; 0x4ea3
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 8011c28:	9009      	str	r0, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8011c2a:	eba5 050c 	sub.w	r5, r5, ip
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 8011c2e:	4850      	ldr	r0, [pc, #320]	; (8011d70 <jpeg_idct_15x15+0x488>)
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 8011c30:	fb0e ce0a 	mla	lr, lr, sl, ip
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8011c34:	f241 2a68 	movw	sl, #4712	; 0x1268
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 8011c38:	4378      	muls	r0, r7
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8011c3a:	fb06 e601 	mla	r6, r6, r1, lr
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 8011c3e:	900a      	str	r0, [sp, #40]	; 0x28
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 8011c40:	484c      	ldr	r0, [pc, #304]	; (8011d74 <jpeg_idct_15x15+0x48c>)
 8011c42:	4347      	muls	r7, r0
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8011c44:	f200 7071 	addw	r0, r0, #1905	; 0x771
 8011c48:	fb00 ee02 	mla	lr, r0, r2, lr
 8011c4c:	980a      	ldr	r0, [sp, #40]	; 0x28
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8011c4e:	1bf6      	subs	r6, r6, r7
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8011c50:	4470      	add	r0, lr
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8011c52:	eb02 0e01 	add.w	lr, r2, r1
 8011c56:	fb0a fe0e 	mul.w	lr, sl, lr
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 8011c5a:	f640 7a39 	movw	sl, #3897	; 0xf39
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8011c5e:	900b      	str	r0, [sp, #44]	; 0x2c
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 8011c60:	fb0a e202 	mla	r2, sl, r2, lr
 8011c64:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011c66:	eba2 020c 	sub.w	r2, r2, ip
 8011c6a:	4402      	add	r2, r0
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 8011c6c:	4842      	ldr	r0, [pc, #264]	; (8011d78 <jpeg_idct_15x15+0x490>)
 8011c6e:	fb00 e101 	mla	r1, r0, r1, lr
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011c72:	980c      	ldr	r0, [sp, #48]	; 0x30
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 8011c74:	4461      	add	r1, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011c76:	4684      	mov	ip, r0
 8011c78:	9890      	ldr	r0, [sp, #576]	; 0x240
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 8011c7a:	440f      	add	r7, r1
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011c7c:	9901      	ldr	r1, [sp, #4]
 8011c7e:	4431      	add	r1, r6
			     & RANGE_MASK];
 8011c80:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011c84:	f81b 1001 	ldrb.w	r1, [fp, r1]
 8011c88:	f80c 1000 	strb.w	r1, [ip, r0]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011c8c:	9901      	ldr	r1, [sp, #4]
 8011c8e:	1b8e      	subs	r6, r1, r6
			     & RANGE_MASK];
 8011c90:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011c94:	f81b 1006 	ldrb.w	r1, [fp, r6]
 8011c98:	7399      	strb	r1, [r3, #14]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011c9a:	9905      	ldr	r1, [sp, #20]
 8011c9c:	4441      	add	r1, r8
			     & RANGE_MASK];
 8011c9e:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011ca2:	f81b 1001 	ldrb.w	r1, [fp, r1]
 8011ca6:	7059      	strb	r1, [r3, #1]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011ca8:	9905      	ldr	r1, [sp, #20]
 8011caa:	eba1 0008 	sub.w	r0, r1, r8
			     & RANGE_MASK];
 8011cae:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011cb2:	f81b 1000 	ldrb.w	r1, [fp, r0]
 8011cb6:	7359      	strb	r1, [r3, #13]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011cb8:	9908      	ldr	r1, [sp, #32]
 8011cba:	4429      	add	r1, r5
			     & RANGE_MASK];
 8011cbc:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011cc0:	f81b 1001 	ldrb.w	r1, [fp, r1]
 8011cc4:	7099      	strb	r1, [r3, #2]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011cc6:	9908      	ldr	r1, [sp, #32]
 8011cc8:	1b4d      	subs	r5, r1, r5
			     & RANGE_MASK];
 8011cca:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011cce:	f81b 1005 	ldrb.w	r1, [fp, r5]
 8011cd2:	7319      	strb	r1, [r3, #12]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011cd4:	9902      	ldr	r1, [sp, #8]
 8011cd6:	4411      	add	r1, r2
			     & RANGE_MASK];
 8011cd8:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011cdc:	f81b 1001 	ldrb.w	r1, [fp, r1]
 8011ce0:	70d9      	strb	r1, [r3, #3]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011ce2:	9902      	ldr	r1, [sp, #8]
 8011ce4:	1a8a      	subs	r2, r1, r2
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011ce6:	9909      	ldr	r1, [sp, #36]	; 0x24
			     & RANGE_MASK];
 8011ce8:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011cec:	f81b 2002 	ldrb.w	r2, [fp, r2]
 8011cf0:	72da      	strb	r2, [r3, #11]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011cf2:	9a06      	ldr	r2, [sp, #24]
 8011cf4:	440a      	add	r2, r1
			     & RANGE_MASK];
 8011cf6:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011cfa:	f81b 2002 	ldrb.w	r2, [fp, r2]
 8011cfe:	711a      	strb	r2, [r3, #4]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011d00:	9a06      	ldr	r2, [sp, #24]
 8011d02:	1a52      	subs	r2, r2, r1
			     & RANGE_MASK];
 8011d04:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011d08:	f81b 2002 	ldrb.w	r2, [fp, r2]
 8011d0c:	729a      	strb	r2, [r3, #10]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8011d0e:	9a03      	ldr	r2, [sp, #12]
 8011d10:	443a      	add	r2, r7
			     & RANGE_MASK];
 8011d12:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8011d16:	f81b 2002 	ldrb.w	r2, [fp, r2]
 8011d1a:	715a      	strb	r2, [r3, #5]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8011d1c:	9a03      	ldr	r2, [sp, #12]
 8011d1e:	1bd7      	subs	r7, r2, r7
			     & RANGE_MASK];
 8011d20:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8011d24:	f81b 2007 	ldrb.w	r2, [fp, r7]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8011d28:	990b      	ldr	r1, [sp, #44]	; 0x2c
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8011d2a:	725a      	strb	r2, [r3, #9]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8011d2c:	9a04      	ldr	r2, [sp, #16]
 8011d2e:	440a      	add	r2, r1
			     & RANGE_MASK];
 8011d30:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8011d34:	f81b 2002 	ldrb.w	r2, [fp, r2]
 8011d38:	719a      	strb	r2, [r3, #6]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8011d3a:	9a04      	ldr	r2, [sp, #16]
 8011d3c:	eba2 0e01 	sub.w	lr, r2, r1
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 8011d40:	9907      	ldr	r1, [sp, #28]
			     & RANGE_MASK];
 8011d42:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8011d46:	f81b 200e 	ldrb.w	r2, [fp, lr]
 8011d4a:	721a      	strb	r2, [r3, #8]
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 8011d4c:	9a00      	ldr	r2, [sp, #0]
 8011d4e:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
			     & RANGE_MASK];
 8011d52:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27,
 8011d56:	f81b 2002 	ldrb.w	r2, [fp, r2]
 8011d5a:	71da      	strb	r2, [r3, #7]
  for (ctr = 0; ctr < 15; ctr++) {
 8011d5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011d5e:	454b      	cmp	r3, r9
 8011d60:	f47f aee7 	bne.w	8011b32 <jpeg_idct_15x15+0x24a>
  }
}
 8011d64:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
 8011d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d6c:	ffffba5c 	.word	0xffffba5c
 8011d70:	ffffe566 	.word	0xffffe566
 8011d74:	ffffd4f6 	.word	0xffffd4f6
 8011d78:	ffffe42f 	.word	0xffffe42f

08011d7c <jpeg_idct_16x16>:

GLOBAL(void)
jpeg_idct_16x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d80:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8011d84:	930c      	str	r3, [sp, #48]	; 0x30
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011d86:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8011d8a:	f103 0880 	add.w	r8, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011d8e:	1e93      	subs	r3, r2, #2
 8011d90:	9300      	str	r3, [sp, #0]
 8011d92:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8011d94:	f1a3 0e04 	sub.w	lr, r3, #4
 8011d98:	f102 030e 	add.w	r3, r2, #14
 8011d9c:	930d      	str	r3, [sp, #52]	; 0x34
  wsptr = workspace;
 8011d9e:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011da0:	9900      	ldr	r1, [sp, #0]
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += 1 << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8011da2:	f642 1bcf 	movw	fp, #10703	; 0x29cf
    tmp13 = tmp0 - tmp2;

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8011da6:	f640 05d4 	movw	r5, #2260	; 0x8d4
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8011daa:	f642 4663 	movw	r6, #11363	; 0x2c63
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011dae:	f931 2f02 	ldrsh.w	r2, [r1, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011db2:	3304      	adds	r3, #4

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8011db4:	4fd7      	ldr	r7, [pc, #860]	; (8012114 <jpeg_idct_16x16+0x398>)
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011db6:	9100      	str	r1, [sp, #0]
 8011db8:	f85e 1f04 	ldr.w	r1, [lr, #4]!
 8011dbc:	4351      	muls	r1, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011dbe:	9a00      	ldr	r2, [sp, #0]
 8011dc0:	f9b2 0040 	ldrsh.w	r0, [r2, #64]	; 0x40
    tmp0 <<= CONST_BITS;
 8011dc4:	0349      	lsls	r1, r1, #13
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011dc6:	f8de 2080 	ldr.w	r2, [lr, #128]	; 0x80
    tmp0 += 1 << (CONST_BITS-PASS1_BITS-1);
 8011dca:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011dce:	4342      	muls	r2, r0
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8011dd0:	f241 1051 	movw	r0, #4433	; 0x1151
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8011dd4:	fb0b fb02 	mul.w	fp, fp, r2
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8011dd8:	4342      	muls	r2, r0
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8011dda:	f245 2003 	movw	r0, #20995	; 0x5203
    tmp10 = tmp0 + tmp1;
 8011dde:	eb01 040b 	add.w	r4, r1, fp
    tmp11 = tmp0 - tmp1;
 8011de2:	eba1 0b0b 	sub.w	fp, r1, fp
    tmp12 = tmp0 + tmp2;
 8011de6:	eb01 0902 	add.w	r9, r1, r2
    tmp13 = tmp0 - tmp2;
 8011dea:	1a89      	subs	r1, r1, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011dec:	9a00      	ldr	r2, [sp, #0]
 8011dee:	f9b2 a020 	ldrsh.w	sl, [r2, #32]
 8011df2:	f8de 2040 	ldr.w	r2, [lr, #64]	; 0x40
 8011df6:	fb02 fa0a 	mul.w	sl, r2, sl
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011dfa:	9a00      	ldr	r2, [sp, #0]
 8011dfc:	f9b2 c060 	ldrsh.w	ip, [r2, #96]	; 0x60
 8011e00:	f8de 20c0 	ldr.w	r2, [lr, #192]	; 0xc0
 8011e04:	fb02 fc0c 	mul.w	ip, r2, ip
    z3 = z1 - z2;
 8011e08:	ebaa 020c 	sub.w	r2, sl, ip
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8011e0c:	4355      	muls	r5, r2
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8011e0e:	4356      	muls	r6, r2
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8011e10:	f641 42cd 	movw	r2, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8011e14:	fb00 600c 	mla	r0, r0, ip, r6
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8011e18:	fb02 520a 	mla	r2, r2, sl, r5
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8011e1c:	fb07 6a0a 	mla	sl, r7, sl, r6
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8011e20:	4ebd      	ldr	r6, [pc, #756]	; (8012118 <jpeg_idct_16x16+0x39c>)
 8011e22:	fb06 5c0c 	mla	ip, r6, ip, r5

    tmp20 = tmp10 + tmp0;
 8011e26:	1825      	adds	r5, r4, r0
    tmp27 = tmp10 - tmp0;
 8011e28:	1a20      	subs	r0, r4, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    tmp11 = z1 + z3;

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8011e2a:	f642 364e 	movw	r6, #11086	; 0x2b4e
    tmp20 = tmp10 + tmp0;
 8011e2e:	9501      	str	r5, [sp, #4]
    tmp27 = tmp10 - tmp0;
 8011e30:	9002      	str	r0, [sp, #8]
    tmp21 = tmp12 + tmp1;
 8011e32:	eb09 0002 	add.w	r0, r9, r2
    tmp26 = tmp12 - tmp1;
 8011e36:	eba9 0202 	sub.w	r2, r9, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011e3a:	f8de 50a0 	ldr.w	r5, [lr, #160]	; 0xa0
    tmp21 = tmp12 + tmp1;
 8011e3e:	9003      	str	r0, [sp, #12]
    tmp26 = tmp12 - tmp1;
 8011e40:	9204      	str	r2, [sp, #16]
    tmp22 = tmp13 + tmp2;
 8011e42:	eb01 020a 	add.w	r2, r1, sl
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011e46:	f8de 0020 	ldr.w	r0, [lr, #32]
    tmp22 = tmp13 + tmp2;
 8011e4a:	9205      	str	r2, [sp, #20]
    tmp25 = tmp13 - tmp2;
 8011e4c:	eba1 020a 	sub.w	r2, r1, sl
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8011e50:	f241 5a55 	movw	sl, #5461	; 0x1555
    tmp25 = tmp13 - tmp2;
 8011e54:	9206      	str	r2, [sp, #24]
    tmp23 = tmp11 + tmp3;
 8011e56:	eb0b 020c 	add.w	r2, fp, ip
 8011e5a:	9207      	str	r2, [sp, #28]
    tmp24 = tmp11 - tmp3;
 8011e5c:	ebab 020c 	sub.w	r2, fp, ip
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8011e60:	f242 2cfc 	movw	ip, #8956	; 0x22fc
    tmp24 = tmp11 - tmp3;
 8011e64:	9208      	str	r2, [sp, #32]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011e66:	9a00      	ldr	r2, [sp, #0]
 8011e68:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8011e6c:	4350      	muls	r0, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011e6e:	9a00      	ldr	r2, [sp, #0]
 8011e70:	f9b2 1030 	ldrsh.w	r1, [r2, #48]	; 0x30
 8011e74:	f8de 2060 	ldr.w	r2, [lr, #96]	; 0x60
 8011e78:	434a      	muls	r2, r1
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011e7a:	9900      	ldr	r1, [sp, #0]
 8011e7c:	f9b1 1050 	ldrsh.w	r1, [r1, #80]	; 0x50
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8011e80:	eba0 0b02 	sub.w	fp, r0, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011e84:	434d      	muls	r5, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011e86:	9900      	ldr	r1, [sp, #0]
 8011e88:	f9b1 4070 	ldrsh.w	r4, [r1, #112]	; 0x70
    tmp11 = z1 + z3;
 8011e8c:	1947      	adds	r7, r0, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011e8e:	f8de 10e0 	ldr.w	r1, [lr, #224]	; 0xe0
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8011e92:	fb0a fa07 	mul.w	sl, sl, r7
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011e96:	4361      	muls	r1, r4
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8011e98:	1884      	adds	r4, r0, r2
 8011e9a:	4366      	muls	r6, r4
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8011e9c:	f242 74e9 	movw	r4, #10217	; 0x27e9
 8011ea0:	fb04 f907 	mul.w	r9, r4, r7
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8011ea4:	1844      	adds	r4, r0, r1
 8011ea6:	fb0c f404 	mul.w	r4, ip, r4
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8011eaa:	f641 4cb6 	movw	ip, #7350	; 0x1cb6
    tmp0  = tmp1 + tmp2 + tmp3 -
 8011eae:	eb06 0709 	add.w	r7, r6, r9
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8011eb2:	9409      	str	r4, [sp, #36]	; 0x24
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8011eb4:	1a44      	subs	r4, r0, r1
 8011eb6:	fb0c fc04 	mul.w	ip, ip, r4
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8011eba:	f640 5423 	movw	r4, #3363	; 0xd23
 8011ebe:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 8011ec2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8011ec4:	4427      	add	r7, r4
 8011ec6:	4c95      	ldr	r4, [pc, #596]	; (801211c <jpeg_idct_16x16+0x3a0>)
 8011ec8:	fb04 7400 	mla	r4, r4, r0, r7
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
    tmp13 = tmp10 + tmp11 + tmp12 -
 8011ecc:	4f94      	ldr	r7, [pc, #592]	; (8012120 <jpeg_idct_16x16+0x3a4>)
    tmp0  = tmp1 + tmp2 + tmp3 -
 8011ece:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 8011ed0:	eb0c 040a 	add.w	r4, ip, sl
 8011ed4:	445c      	add	r4, fp
 8011ed6:	fb07 4000 	mla	r0, r7, r0, r4
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8011eda:	f44f 648e 	mov.w	r4, #1136	; 0x470
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8011ede:	4f91      	ldr	r7, [pc, #580]	; (8012124 <jpeg_idct_16x16+0x3a8>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 8011ee0:	900b      	str	r0, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8011ee2:	1950      	adds	r0, r2, r5
 8011ee4:	4344      	muls	r4, r0
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8011ee6:	f240 204d 	movw	r0, #589	; 0x24d
 8011eea:	fb00 4002 	mla	r0, r0, r2, r4
 8011eee:	4406      	add	r6, r0
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8011ef0:	488d      	ldr	r0, [pc, #564]	; (8012128 <jpeg_idct_16x16+0x3ac>)
 8011ef2:	fb00 4405 	mla	r4, r0, r5, r4
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8011ef6:	1aa8      	subs	r0, r5, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8011ef8:	444c      	add	r4, r9
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8011efa:	f642 5909 	movw	r9, #11529	; 0x2d09
 8011efe:	fb09 f000 	mul.w	r0, r9, r0
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8011f02:	fb07 0905 	mla	r9, r7, r5, r0
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
    z2    += z4;
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
    tmp1  += z1;
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8011f06:	9f09      	ldr	r7, [sp, #36]	; 0x24
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8011f08:	44ca      	add	sl, r9
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8011f0a:	f643 791a 	movw	r9, #16154	; 0x3f1a
 8011f0e:	fb09 0902 	mla	r9, r9, r2, r0
    z2    += z4;
 8011f12:	440a      	add	r2, r1
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8011f14:	4885      	ldr	r0, [pc, #532]	; (801212c <jpeg_idct_16x16+0x3b0>)
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8011f16:	44d9      	add	r9, fp
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8011f18:	fb00 fb02 	mul.w	fp, r0, r2
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8011f1c:	f242 2018 	movw	r0, #8728	; 0x2218
 8011f20:	fb00 b001 	mla	r0, r0, r1, fp
    tmp1  += z1;
 8011f24:	445e      	add	r6, fp
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8011f26:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8011f2a:	4438      	add	r0, r7
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8011f2c:	4f80      	ldr	r7, [pc, #512]	; (8012130 <jpeg_idct_16x16+0x3b4>)
 8011f2e:	437a      	muls	r2, r7
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8011f30:	fb0b 2b01 	mla	fp, fp, r1, r2
    tmp12 += z2;
 8011f34:	444a      	add	r2, r9
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8011f36:	f46f 7959 	mvn.w	r9, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8011f3a:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8011f3c:	eb05 0b01 	add.w	fp, r5, r1
 8011f40:	444f      	add	r7, r9
    tmp2  += z2;
    tmp3  += z2;
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8011f42:	1b49      	subs	r1, r1, r5
    tmp10 += z2;
    tmp11 += z2;

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8011f44:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8011f46:	fb07 fb0b 	mul.w	fp, r7, fp
    tmp3  += z2;
 8011f4a:	eb00 090b 	add.w	r9, r0, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8011f4e:	f640 5023 	movw	r0, #3363	; 0xd23
    tmp2  += z2;
 8011f52:	445c      	add	r4, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8011f54:	4341      	muls	r1, r0
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8011f56:	9801      	ldr	r0, [sp, #4]
 8011f58:	4428      	add	r0, r5
    tmp10 += z2;
 8011f5a:	448c      	add	ip, r1
    tmp11 += z2;
 8011f5c:	4451      	add	r1, sl
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8011f5e:	12c0      	asrs	r0, r0, #11
 8011f60:	f843 0c04 	str.w	r0, [r3, #-4]
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8011f64:	9801      	ldr	r0, [sp, #4]
 8011f66:	1b47      	subs	r7, r0, r5
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8011f68:	9803      	ldr	r0, [sp, #12]
 8011f6a:	4430      	add	r0, r6
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8011f6c:	12ff      	asrs	r7, r7, #11
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8011f6e:	12c0      	asrs	r0, r0, #11
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8011f70:	f8c3 71dc 	str.w	r7, [r3, #476]	; 0x1dc
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8011f74:	61d8      	str	r0, [r3, #28]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8011f76:	9803      	ldr	r0, [sp, #12]
 8011f78:	1b86      	subs	r6, r0, r6
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8011f7a:	9805      	ldr	r0, [sp, #20]
 8011f7c:	4420      	add	r0, r4
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8011f7e:	12f6      	asrs	r6, r6, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8011f80:	12c0      	asrs	r0, r0, #11
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8011f82:	f8c3 61bc 	str.w	r6, [r3, #444]	; 0x1bc
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8011f86:	63d8      	str	r0, [r3, #60]	; 0x3c
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8011f88:	9805      	ldr	r0, [sp, #20]
 8011f8a:	1b04      	subs	r4, r0, r4
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8011f8c:	9807      	ldr	r0, [sp, #28]
 8011f8e:	4448      	add	r0, r9
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8011f90:	12e4      	asrs	r4, r4, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8011f92:	12c0      	asrs	r0, r0, #11
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8011f94:	f8c3 419c 	str.w	r4, [r3, #412]	; 0x19c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8011f98:	65d8      	str	r0, [r3, #92]	; 0x5c
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
 8011f9a:	9807      	ldr	r0, [sp, #28]
 8011f9c:	eba0 0009 	sub.w	r0, r0, r9
 8011fa0:	12c0      	asrs	r0, r0, #11
 8011fa2:	f8c3 017c 	str.w	r0, [r3, #380]	; 0x17c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
 8011fa6:	9808      	ldr	r0, [sp, #32]
 8011fa8:	4460      	add	r0, ip
 8011faa:	12c0      	asrs	r0, r0, #11
 8011fac:	67d8      	str	r0, [r3, #124]	; 0x7c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
 8011fae:	9808      	ldr	r0, [sp, #32]
 8011fb0:	eba0 0c0c 	sub.w	ip, r0, ip
 8011fb4:	ea4f 20ec 	mov.w	r0, ip, asr #11
 8011fb8:	f8c3 015c 	str.w	r0, [r3, #348]	; 0x15c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
 8011fbc:	9806      	ldr	r0, [sp, #24]
 8011fbe:	4408      	add	r0, r1
 8011fc0:	12c0      	asrs	r0, r0, #11
 8011fc2:	f8c3 009c 	str.w	r0, [r3, #156]	; 0x9c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8011fc6:	9806      	ldr	r0, [sp, #24]
 8011fc8:	1a41      	subs	r1, r0, r1
 8011fca:	12c9      	asrs	r1, r1, #11
 8011fcc:	f8c3 113c 	str.w	r1, [r3, #316]	; 0x13c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8011fd0:	9904      	ldr	r1, [sp, #16]
 8011fd2:	4411      	add	r1, r2
 8011fd4:	12c9      	asrs	r1, r1, #11
 8011fd6:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 8011fda:	9904      	ldr	r1, [sp, #16]
 8011fdc:	1a8a      	subs	r2, r1, r2
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 8011fde:	990b      	ldr	r1, [sp, #44]	; 0x2c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 8011fe0:	12d2      	asrs	r2, r2, #11
 8011fe2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 8011fe6:	9a02      	ldr	r2, [sp, #8]
 8011fe8:	440a      	add	r2, r1
 8011fea:	12d2      	asrs	r2, r2, #11
 8011fec:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8011ff0:	9a02      	ldr	r2, [sp, #8]
 8011ff2:	1a54      	subs	r4, r2, r1
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011ff4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011ff6:	9900      	ldr	r1, [sp, #0]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8011ff8:	12e4      	asrs	r4, r4, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011ffa:	428a      	cmp	r2, r1
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8011ffc:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012000:	f47f aece 	bne.w	8011da0 <jpeg_idct_16x16+0x24>
 8012004:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  }

  /* Pass 2: process 16 rows from work array, store into output array. */

  wsptr = workspace;
 8012006:	ad0e      	add	r5, sp, #56	; 0x38
 8012008:	3b04      	subs	r3, #4
 801200a:	9300      	str	r3, [sp, #0]
 801200c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801200e:	333c      	adds	r3, #60	; 0x3c
 8012010:	930d      	str	r3, [sp, #52]	; 0x34
  for (ctr = 0; ctr < 16; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8012012:	9b00      	ldr	r3, [sp, #0]
    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;

    z1 = (INT32) wsptr[4];
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8012014:	f642 1ccf 	movw	ip, #10703	; 0x29cf
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012018:	6828      	ldr	r0, [r5, #0]
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 801201a:	f241 1a51 	movw	sl, #4433	; 0x1151
    outptr = output_buf[ctr] + output_col;
 801201e:	461a      	mov	r2, r3
    tmp11 = tmp0 - tmp1;
    tmp12 = tmp0 + tmp2;
    tmp13 = tmp0 - tmp2;

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[6];
 8012020:	f8d5 e018 	ldr.w	lr, [r5, #24]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012024:	3010      	adds	r0, #16
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8012026:	f640 0bd4 	movw	fp, #2260	; 0x8d4
    outptr = output_buf[ctr] + output_col;
 801202a:	f852 3f04 	ldr.w	r3, [r2, #4]!
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 801202e:	f245 2903 	movw	r9, #20995	; 0x5203
			     & RANGE_MASK];
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8012032:	3520      	adds	r5, #32
    outptr = output_buf[ctr] + output_col;
 8012034:	930c      	str	r3, [sp, #48]	; 0x30
 8012036:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012038:	9200      	str	r2, [sp, #0]
 801203a:	9a98      	ldr	r2, [sp, #608]	; 0x260
 801203c:	1899      	adds	r1, r3, r2
    z1 = (INT32) wsptr[4];
 801203e:	f855 3c10 	ldr.w	r3, [r5, #-16]
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8012042:	fb0a fa03 	mul.w	sl, sl, r3
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8012046:	fb0c fc03 	mul.w	ip, ip, r3
    z3 = z1 - z2;
 801204a:	f855 3c18 	ldr.w	r3, [r5, #-24]
    tmp12 = tmp0 + tmp2;
 801204e:	eb0a 3640 	add.w	r6, sl, r0, lsl #13
    tmp10 = tmp0 + tmp1;
 8012052:	eb0c 3440 	add.w	r4, ip, r0, lsl #13
    z3 = z1 - z2;
 8012056:	eba3 020e 	sub.w	r2, r3, lr
    tmp11 = tmp0 - tmp1;
 801205a:	ebcc 3c40 	rsb	ip, ip, r0, lsl #13
    tmp13 = tmp0 - tmp2;
 801205e:	ebca 3040 	rsb	r0, sl, r0, lsl #13
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8012062:	f642 4a63 	movw	sl, #11363	; 0x2c63
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8012066:	fb0b fb02 	mul.w	fp, fp, r2
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 801206a:	fb0a f702 	mul.w	r7, sl, r2
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 801206e:	f641 42cd 	movw	r2, #7373	; 0x1ccd
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8012072:	469a      	mov	sl, r3
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8012074:	fb02 b203 	mla	r2, r2, r3, fp
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8012078:	4b26      	ldr	r3, [pc, #152]	; (8012114 <jpeg_idct_16x16+0x398>)
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 801207a:	fb09 790e 	mla	r9, r9, lr, r7
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 801207e:	fb03 7a0a 	mla	sl, r3, sl, r7
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8012082:	f203 23ee 	addw	r3, r3, #750	; 0x2ee
    z3 = (INT32) wsptr[5];
 8012086:	f855 7c0c 	ldr.w	r7, [r5, #-12]
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 801208a:	fb03 bb0e 	mla	fp, r3, lr, fp
    tmp20 = tmp10 + tmp0;
 801208e:	eb04 0309 	add.w	r3, r4, r9
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012092:	f242 2efc 	movw	lr, #8956	; 0x22fc
    tmp20 = tmp10 + tmp0;
 8012096:	9301      	str	r3, [sp, #4]
    tmp27 = tmp10 - tmp0;
 8012098:	eba4 0309 	sub.w	r3, r4, r9
    z1 = (INT32) wsptr[1];
 801209c:	f855 4c1c 	ldr.w	r4, [r5, #-28]
    tmp27 = tmp10 - tmp0;
 80120a0:	9302      	str	r3, [sp, #8]
    tmp21 = tmp12 + tmp1;
 80120a2:	18b3      	adds	r3, r6, r2
    tmp11 = z1 + z3;
 80120a4:	eb04 0907 	add.w	r9, r4, r7
    tmp21 = tmp12 + tmp1;
 80120a8:	9303      	str	r3, [sp, #12]
    tmp26 = tmp12 - tmp1;
 80120aa:	1ab3      	subs	r3, r6, r2
    z2 = (INT32) wsptr[3];
 80120ac:	f855 2c14 	ldr.w	r2, [r5, #-20]
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80120b0:	f642 364e 	movw	r6, #11086	; 0x2b4e
    tmp26 = tmp12 - tmp1;
 80120b4:	9304      	str	r3, [sp, #16]
    tmp22 = tmp13 + tmp2;
 80120b6:	eb00 030a 	add.w	r3, r0, sl
 80120ba:	9305      	str	r3, [sp, #20]
    tmp25 = tmp13 - tmp2;
 80120bc:	eba0 030a 	sub.w	r3, r0, sl
    z4 = (INT32) wsptr[7];
 80120c0:	f855 0c04 	ldr.w	r0, [r5, #-4]
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 80120c4:	f241 5a55 	movw	sl, #5461	; 0x1555
    tmp25 = tmp13 - tmp2;
 80120c8:	9306      	str	r3, [sp, #24]
    tmp23 = tmp11 + tmp3;
 80120ca:	eb0c 030b 	add.w	r3, ip, fp
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 80120ce:	fb0a fa09 	mul.w	sl, sl, r9
    tmp23 = tmp11 + tmp3;
 80120d2:	9307      	str	r3, [sp, #28]
    tmp24 = tmp11 - tmp3;
 80120d4:	ebac 030b 	sub.w	r3, ip, fp
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 80120d8:	f242 7be9 	movw	fp, #10217	; 0x27e9
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 80120dc:	f641 4cb6 	movw	ip, #7350	; 0x1cb6
    tmp24 = tmp11 - tmp3;
 80120e0:	9308      	str	r3, [sp, #32]
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80120e2:	18a3      	adds	r3, r4, r2
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 80120e4:	fb0b fb09 	mul.w	fp, fp, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 80120e8:	eba4 0902 	sub.w	r9, r4, r2
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80120ec:	435e      	muls	r6, r3
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 80120ee:	1823      	adds	r3, r4, r0
 80120f0:	fb0e fe03 	mul.w	lr, lr, r3
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 80120f4:	1a23      	subs	r3, r4, r0
 80120f6:	fb0c fc03 	mul.w	ip, ip, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 80120fa:	f640 5323 	movw	r3, #3363	; 0xd23
 80120fe:	fb03 f309 	mul.w	r3, r3, r9
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012102:	eb06 090b 	add.w	r9, r6, fp
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012106:	9309      	str	r3, [sp, #36]	; 0x24
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012108:	44f1      	add	r9, lr
 801210a:	4b04      	ldr	r3, [pc, #16]	; (801211c <jpeg_idct_16x16+0x3a0>)
 801210c:	fb03 9904 	mla	r9, r3, r4, r9
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012112:	e00f      	b.n	8012134 <jpeg_idct_16x16+0x3b8>
 8012114:	ffffecc2 	.word	0xffffecc2
 8012118:	ffffefb0 	.word	0xffffefb0
 801211c:	ffffb6d6 	.word	0xffffb6d6
 8012120:	ffffc542 	.word	0xffffc542
 8012124:	ffffe77a 	.word	0xffffe77a
 8012128:	ffffdbfa 	.word	0xffffdbfa
 801212c:	ffffeaab 	.word	0xffffeaab
 8012130:	ffffd817 	.word	0xffffd817
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012134:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012138:	eb0c 090a 	add.w	r9, ip, sl
 801213c:	4499      	add	r9, r3
 801213e:	4b63      	ldr	r3, [pc, #396]	; (80122cc <jpeg_idct_16x16+0x550>)
 8012140:	fb03 9404 	mla	r4, r3, r4, r9
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8012144:	f44f 698e 	mov.w	r9, #1136	; 0x470
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8012148:	4b61      	ldr	r3, [pc, #388]	; (80122d0 <jpeg_idct_16x16+0x554>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 801214a:	940b      	str	r4, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 801214c:	19d4      	adds	r4, r2, r7
 801214e:	fb09 f404 	mul.w	r4, r9, r4
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8012152:	f240 294d 	movw	r9, #589	; 0x24d
 8012156:	fb09 4902 	mla	r9, r9, r2, r4
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 801215a:	fb03 4407 	mla	r4, r3, r7, r4
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 801215e:	f503 6338 	add.w	r3, r3, #2944	; 0xb80
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8012162:	444e      	add	r6, r9
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8012164:	eba7 0902 	sub.w	r9, r7, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8012168:	445c      	add	r4, fp
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 801216a:	f642 5b09 	movw	fp, #11529	; 0x2d09
 801216e:	fb0b f909 	mul.w	r9, fp, r9
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012172:	fb03 9b07 	mla	fp, r3, r7, r9
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8012176:	9b09      	ldr	r3, [sp, #36]	; 0x24
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012178:	44da      	add	sl, fp
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 801217a:	f643 7b1a 	movw	fp, #16154	; 0x3f1a
 801217e:	fb0b 9902 	mla	r9, fp, r2, r9
    z2    += z4;
 8012182:	4402      	add	r2, r0
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8012184:	4499      	add	r9, r3
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8012186:	4b53      	ldr	r3, [pc, #332]	; (80122d4 <jpeg_idct_16x16+0x558>)
 8012188:	fb03 fb02 	mul.w	fp, r3, r2
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 801218c:	f242 2318 	movw	r3, #8728	; 0x2218
 8012190:	fb03 b300 	mla	r3, r3, r0, fp
    tmp1  += z1;
 8012194:	445e      	add	r6, fp
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012196:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 801219a:	449e      	add	lr, r3
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 801219c:	4b4e      	ldr	r3, [pc, #312]	; (80122d8 <jpeg_idct_16x16+0x55c>)
 801219e:	435a      	muls	r2, r3
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80121a0:	fb0b 2b00 	mla	fp, fp, r0, r2
    tmp12 += z2;
 80121a4:	444a      	add	r2, r9
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80121a6:	f46f 7959 	mvn.w	r9, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80121aa:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80121ac:	eb07 0b00 	add.w	fp, r7, r0
 80121b0:	444b      	add	r3, r9
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 80121b2:	1bc0      	subs	r0, r0, r7
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 80121b4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80121b6:	fb03 fb0b 	mul.w	fp, r3, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 80121ba:	f640 5323 	movw	r3, #3363	; 0xd23
 80121be:	4358      	muls	r0, r3
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 80121c0:	9b01      	ldr	r3, [sp, #4]
    tmp2  += z2;
 80121c2:	445c      	add	r4, fp
    tmp3  += z2;
 80121c4:	44de      	add	lr, fp
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 80121c6:	443b      	add	r3, r7
 80121c8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    tmp10 += z2;
 80121ca:	4484      	add	ip, r0
    tmp11 += z2;
 80121cc:	4450      	add	r0, sl
			     & RANGE_MASK];
 80121ce:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 80121d2:	46b9      	mov	r9, r7
 80121d4:	9f98      	ldr	r7, [sp, #608]	; 0x260
 80121d6:	f818 3003 	ldrb.w	r3, [r8, r3]
 80121da:	f809 3007 	strb.w	r3, [r9, r7]
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 80121de:	9b01      	ldr	r3, [sp, #4]
 80121e0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80121e2:	1bdb      	subs	r3, r3, r7
			     & RANGE_MASK];
 80121e4:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 80121e8:	f818 3003 	ldrb.w	r3, [r8, r3]
 80121ec:	73cb      	strb	r3, [r1, #15]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 80121ee:	9b03      	ldr	r3, [sp, #12]
 80121f0:	4433      	add	r3, r6
			     & RANGE_MASK];
 80121f2:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 80121f6:	f818 3003 	ldrb.w	r3, [r8, r3]
 80121fa:	704b      	strb	r3, [r1, #1]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 80121fc:	9b03      	ldr	r3, [sp, #12]
 80121fe:	1b9e      	subs	r6, r3, r6
			     & RANGE_MASK];
 8012200:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 8012204:	f818 3006 	ldrb.w	r3, [r8, r6]
 8012208:	738b      	strb	r3, [r1, #14]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 801220a:	9b05      	ldr	r3, [sp, #20]
 801220c:	4423      	add	r3, r4
			     & RANGE_MASK];
 801220e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8012212:	f818 3003 	ldrb.w	r3, [r8, r3]
 8012216:	708b      	strb	r3, [r1, #2]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8012218:	9b05      	ldr	r3, [sp, #20]
 801221a:	1b1c      	subs	r4, r3, r4
			     & RANGE_MASK];
 801221c:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8012220:	f818 3004 	ldrb.w	r3, [r8, r4]
 8012224:	734b      	strb	r3, [r1, #13]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8012226:	9b07      	ldr	r3, [sp, #28]
 8012228:	4473      	add	r3, lr
			     & RANGE_MASK];
 801222a:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 801222e:	f818 3003 	ldrb.w	r3, [r8, r3]
 8012232:	70cb      	strb	r3, [r1, #3]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8012234:	9b07      	ldr	r3, [sp, #28]
 8012236:	eba3 0e0e 	sub.w	lr, r3, lr
			     & RANGE_MASK];
 801223a:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 801223e:	f818 300e 	ldrb.w	r3, [r8, lr]
 8012242:	730b      	strb	r3, [r1, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8012244:	9b08      	ldr	r3, [sp, #32]
 8012246:	4463      	add	r3, ip
			     & RANGE_MASK];
 8012248:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 801224c:	f818 3003 	ldrb.w	r3, [r8, r3]
 8012250:	710b      	strb	r3, [r1, #4]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8012252:	9b08      	ldr	r3, [sp, #32]
 8012254:	eba3 0c0c 	sub.w	ip, r3, ip
			     & RANGE_MASK];
 8012258:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 801225c:	f818 300c 	ldrb.w	r3, [r8, ip]
 8012260:	72cb      	strb	r3, [r1, #11]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8012262:	9b06      	ldr	r3, [sp, #24]
 8012264:	4403      	add	r3, r0
			     & RANGE_MASK];
 8012266:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 801226a:	f818 3003 	ldrb.w	r3, [r8, r3]
 801226e:	714b      	strb	r3, [r1, #5]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8012270:	9b06      	ldr	r3, [sp, #24]
 8012272:	1a18      	subs	r0, r3, r0
			     & RANGE_MASK];
 8012274:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8012278:	f818 3000 	ldrb.w	r3, [r8, r0]
 801227c:	728b      	strb	r3, [r1, #10]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 801227e:	9b04      	ldr	r3, [sp, #16]
 8012280:	4413      	add	r3, r2
			     & RANGE_MASK];
 8012282:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8012286:	f818 3003 	ldrb.w	r3, [r8, r3]
 801228a:	718b      	strb	r3, [r1, #6]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 801228c:	9b04      	ldr	r3, [sp, #16]
 801228e:	1a9a      	subs	r2, r3, r2
			     & RANGE_MASK];
 8012290:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8012294:	f818 3002 	ldrb.w	r3, [r8, r2]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8012298:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 801229a:	724b      	strb	r3, [r1, #9]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 801229c:	9b02      	ldr	r3, [sp, #8]
 801229e:	4413      	add	r3, r2
			     & RANGE_MASK];
 80122a0:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 80122a4:	f818 3003 	ldrb.w	r3, [r8, r3]
 80122a8:	71cb      	strb	r3, [r1, #7]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 80122aa:	9b02      	ldr	r3, [sp, #8]
 80122ac:	1a9c      	subs	r4, r3, r2
  for (ctr = 0; ctr < 16; ctr++) {
 80122ae:	9a00      	ldr	r2, [sp, #0]
			     & RANGE_MASK];
 80122b0:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 80122b4:	f818 3004 	ldrb.w	r3, [r8, r4]
 80122b8:	720b      	strb	r3, [r1, #8]
  for (ctr = 0; ctr < 16; ctr++) {
 80122ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80122bc:	4293      	cmp	r3, r2
 80122be:	f47f aea8 	bne.w	8012012 <jpeg_idct_16x16+0x296>
  }
}
 80122c2:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80122c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122ca:	bf00      	nop
 80122cc:	ffffc542 	.word	0xffffc542
 80122d0:	ffffdbfa 	.word	0xffffdbfa
 80122d4:	ffffeaab 	.word	0xffffeaab
 80122d8:	ffffd817 	.word	0xffffd817

080122dc <jpeg_idct_16x8>:

GLOBAL(void)
jpeg_idct_16x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80122dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122e0:	b0cf      	sub	sp, #316	; 0x13c
 80122e2:	3a02      	subs	r2, #2
 80122e4:	9304      	str	r3, [sp, #16]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80122e6:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 80122ea:	6d48      	ldr	r0, [r1, #84]	; 0x54
  wsptr = workspace;
 80122ec:	a90e      	add	r1, sp, #56	; 0x38
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80122ee:	f103 0880 	add.w	r8, r3, #128	; 0x80
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 80122f2:	f100 0320 	add.w	r3, r0, #32
 80122f6:	9305      	str	r3, [sp, #20]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */
    
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 80122f8:	f9b2 3052 	ldrsh.w	r3, [r2, #82]	; 0x52
 80122fc:	3104      	adds	r1, #4
 80122fe:	f9b2 a012 	ldrsh.w	sl, [r2, #18]
 8012302:	f9b2 4022 	ldrsh.w	r4, [r2, #34]	; 0x22
 8012306:	f9b2 c032 	ldrsh.w	ip, [r2, #50]	; 0x32
 801230a:	f9b2 e042 	ldrsh.w	lr, [r2, #66]	; 0x42
 801230e:	f9b2 9072 	ldrsh.w	r9, [r2, #114]	; 0x72
 8012312:	9303      	str	r3, [sp, #12]
 8012314:	f850 7b04 	ldr.w	r7, [r0], #4
 8012318:	f9b2 3062 	ldrsh.w	r3, [r2, #98]	; 0x62
 801231c:	f932 5f02 	ldrsh.w	r5, [r2, #2]!
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8012320:	9e03      	ldr	r6, [sp, #12]
 8012322:	436f      	muls	r7, r5
 8012324:	ea4a 0504 	orr.w	r5, sl, r4
 8012328:	ea4c 0505 	orr.w	r5, ip, r5
 801232c:	ea4e 0505 	orr.w	r5, lr, r5
 8012330:	4335      	orrs	r5, r6
 8012332:	431d      	orrs	r5, r3
 8012334:	ea59 0505 	orrs.w	r5, r9, r5
 8012338:	f040 8161 	bne.w	80125fe <jpeg_idct_16x8+0x322>
	inptr[DCTSIZE*7] == 0) {
      /* AC terms all zero */
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 801233c:	00bf      	lsls	r7, r7, #2
      
      wsptr[DCTSIZE*0] = dcval;
 801233e:	f841 7c04 	str.w	r7, [r1, #-4]
      wsptr[DCTSIZE*1] = dcval;
 8012342:	61cf      	str	r7, [r1, #28]
      wsptr[DCTSIZE*2] = dcval;
 8012344:	63cf      	str	r7, [r1, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 8012346:	65cf      	str	r7, [r1, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 8012348:	67cf      	str	r7, [r1, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 801234a:	f8c1 709c 	str.w	r7, [r1, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 801234e:	f8c1 70bc 	str.w	r7, [r1, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 8012352:	f8c1 70dc 	str.w	r7, [r1, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8012356:	9b05      	ldr	r3, [sp, #20]
 8012358:	4283      	cmp	r3, r0
 801235a:	d1cd      	bne.n	80122f8 <jpeg_idct_16x8+0x1c>
 801235c:	9b04      	ldr	r3, [sp, #16]
  }

  /* Pass 2: process 8 rows from work array, store into output array.
   * 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
   */
  wsptr = workspace;
 801235e:	ad0e      	add	r5, sp, #56	; 0x38
 8012360:	3b04      	subs	r3, #4
 8012362:	9300      	str	r3, [sp, #0]
 8012364:	9b04      	ldr	r3, [sp, #16]
 8012366:	331c      	adds	r3, #28
 8012368:	930d      	str	r3, [sp, #52]	; 0x34
  for (ctr = 0; ctr < 8; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801236a:	9b00      	ldr	r3, [sp, #0]
    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;

    z1 = (INT32) wsptr[4];
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 801236c:	f642 1ccf 	movw	ip, #10703	; 0x29cf
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012370:	6828      	ldr	r0, [r5, #0]
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8012372:	f241 1a51 	movw	sl, #4433	; 0x1151
    outptr = output_buf[ctr] + output_col;
 8012376:	461a      	mov	r2, r3
    tmp11 = tmp0 - tmp1;
    tmp12 = tmp0 + tmp2;
    tmp13 = tmp0 - tmp2;

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[6];
 8012378:	f8d5 e018 	ldr.w	lr, [r5, #24]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801237c:	3010      	adds	r0, #16
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 801237e:	f640 0bd4 	movw	fp, #2260	; 0x8d4
    outptr = output_buf[ctr] + output_col;
 8012382:	f852 3f04 	ldr.w	r3, [r2, #4]!
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8012386:	f245 2903 	movw	r9, #20995	; 0x5203
			     & RANGE_MASK];
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 801238a:	3520      	adds	r5, #32
    outptr = output_buf[ctr] + output_col;
 801238c:	930c      	str	r3, [sp, #48]	; 0x30
 801238e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012390:	9200      	str	r2, [sp, #0]
 8012392:	9a58      	ldr	r2, [sp, #352]	; 0x160
 8012394:	1899      	adds	r1, r3, r2
    z1 = (INT32) wsptr[4];
 8012396:	f855 3c10 	ldr.w	r3, [r5, #-16]
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 801239a:	fb0a fa03 	mul.w	sl, sl, r3
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 801239e:	fb0c fc03 	mul.w	ip, ip, r3
    z3 = z1 - z2;
 80123a2:	f855 3c18 	ldr.w	r3, [r5, #-24]
    tmp12 = tmp0 + tmp2;
 80123a6:	eb0a 3640 	add.w	r6, sl, r0, lsl #13
    tmp10 = tmp0 + tmp1;
 80123aa:	eb0c 3440 	add.w	r4, ip, r0, lsl #13
    z3 = z1 - z2;
 80123ae:	eba3 020e 	sub.w	r2, r3, lr
    tmp11 = tmp0 - tmp1;
 80123b2:	ebcc 3c40 	rsb	ip, ip, r0, lsl #13
    tmp13 = tmp0 - tmp2;
 80123b6:	ebca 3040 	rsb	r0, sl, r0, lsl #13
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 80123ba:	f642 4a63 	movw	sl, #11363	; 0x2c63
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 80123be:	fb0b fb02 	mul.w	fp, fp, r2
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 80123c2:	fb0a f702 	mul.w	r7, sl, r2
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 80123c6:	f641 42cd 	movw	r2, #7373	; 0x1ccd
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 80123ca:	469a      	mov	sl, r3
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 80123cc:	fb02 b203 	mla	r2, r2, r3, fp
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 80123d0:	4bcf      	ldr	r3, [pc, #828]	; (8012710 <jpeg_idct_16x8+0x434>)
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 80123d2:	fb09 790e 	mla	r9, r9, lr, r7
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 80123d6:	fb03 7a0a 	mla	sl, r3, sl, r7
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 80123da:	f203 23ee 	addw	r3, r3, #750	; 0x2ee
    z3 = (INT32) wsptr[5];
 80123de:	f855 7c0c 	ldr.w	r7, [r5, #-12]
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 80123e2:	fb03 bb0e 	mla	fp, r3, lr, fp
    tmp20 = tmp10 + tmp0;
 80123e6:	eb04 0309 	add.w	r3, r4, r9
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 80123ea:	f242 2efc 	movw	lr, #8956	; 0x22fc
    tmp20 = tmp10 + tmp0;
 80123ee:	9301      	str	r3, [sp, #4]
    tmp27 = tmp10 - tmp0;
 80123f0:	eba4 0309 	sub.w	r3, r4, r9
    z1 = (INT32) wsptr[1];
 80123f4:	f855 4c1c 	ldr.w	r4, [r5, #-28]
    tmp27 = tmp10 - tmp0;
 80123f8:	9302      	str	r3, [sp, #8]
    tmp21 = tmp12 + tmp1;
 80123fa:	18b3      	adds	r3, r6, r2
    tmp11 = z1 + z3;
 80123fc:	eb04 0907 	add.w	r9, r4, r7
    tmp21 = tmp12 + tmp1;
 8012400:	9303      	str	r3, [sp, #12]
    tmp26 = tmp12 - tmp1;
 8012402:	1ab3      	subs	r3, r6, r2
    z2 = (INT32) wsptr[3];
 8012404:	f855 2c14 	ldr.w	r2, [r5, #-20]
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012408:	f642 364e 	movw	r6, #11086	; 0x2b4e
    tmp26 = tmp12 - tmp1;
 801240c:	9304      	str	r3, [sp, #16]
    tmp22 = tmp13 + tmp2;
 801240e:	eb00 030a 	add.w	r3, r0, sl
 8012412:	9305      	str	r3, [sp, #20]
    tmp25 = tmp13 - tmp2;
 8012414:	eba0 030a 	sub.w	r3, r0, sl
    z4 = (INT32) wsptr[7];
 8012418:	f855 0c04 	ldr.w	r0, [r5, #-4]
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 801241c:	f241 5a55 	movw	sl, #5461	; 0x1555
    tmp25 = tmp13 - tmp2;
 8012420:	9306      	str	r3, [sp, #24]
    tmp23 = tmp11 + tmp3;
 8012422:	eb0c 030b 	add.w	r3, ip, fp
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8012426:	fb0a fa09 	mul.w	sl, sl, r9
    tmp23 = tmp11 + tmp3;
 801242a:	9307      	str	r3, [sp, #28]
    tmp24 = tmp11 - tmp3;
 801242c:	ebac 030b 	sub.w	r3, ip, fp
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8012430:	f242 7be9 	movw	fp, #10217	; 0x27e9
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8012434:	f641 4cb6 	movw	ip, #7350	; 0x1cb6
    tmp24 = tmp11 - tmp3;
 8012438:	9308      	str	r3, [sp, #32]
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 801243a:	18a3      	adds	r3, r4, r2
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 801243c:	fb0b fb09 	mul.w	fp, fp, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012440:	eba4 0902 	sub.w	r9, r4, r2
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012444:	435e      	muls	r6, r3
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012446:	1823      	adds	r3, r4, r0
 8012448:	fb0e fe03 	mul.w	lr, lr, r3
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 801244c:	1a23      	subs	r3, r4, r0
 801244e:	fb0c fc03 	mul.w	ip, ip, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012452:	f640 5323 	movw	r3, #3363	; 0xd23
 8012456:	fb03 f309 	mul.w	r3, r3, r9
    tmp0  = tmp1 + tmp2 + tmp3 -
 801245a:	eb06 090b 	add.w	r9, r6, fp
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 801245e:	9309      	str	r3, [sp, #36]	; 0x24
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012460:	44f1      	add	r9, lr
 8012462:	4bac      	ldr	r3, [pc, #688]	; (8012714 <jpeg_idct_16x8+0x438>)
 8012464:	fb03 9904 	mla	r9, r3, r4, r9
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012468:	9b09      	ldr	r3, [sp, #36]	; 0x24
    tmp0  = tmp1 + tmp2 + tmp3 -
 801246a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 801246e:	eb0c 090a 	add.w	r9, ip, sl
 8012472:	4499      	add	r9, r3
 8012474:	4ba8      	ldr	r3, [pc, #672]	; (8012718 <jpeg_idct_16x8+0x43c>)
 8012476:	fb03 9404 	mla	r4, r3, r4, r9
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 801247a:	f44f 698e 	mov.w	r9, #1136	; 0x470
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 801247e:	4ba7      	ldr	r3, [pc, #668]	; (801271c <jpeg_idct_16x8+0x440>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012480:	940b      	str	r4, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8012482:	19d4      	adds	r4, r2, r7
 8012484:	fb09 f404 	mul.w	r4, r9, r4
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8012488:	f240 294d 	movw	r9, #589	; 0x24d
 801248c:	fb09 4902 	mla	r9, r9, r2, r4
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8012490:	fb03 4407 	mla	r4, r3, r7, r4
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012494:	f503 6338 	add.w	r3, r3, #2944	; 0xb80
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8012498:	444e      	add	r6, r9
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 801249a:	eba7 0902 	sub.w	r9, r7, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 801249e:	445c      	add	r4, fp
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 80124a0:	f642 5b09 	movw	fp, #11529	; 0x2d09
 80124a4:	fb0b f909 	mul.w	r9, fp, r9
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 80124a8:	fb03 9b07 	mla	fp, r3, r7, r9
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 80124ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 80124ae:	44da      	add	sl, fp
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 80124b0:	f643 7b1a 	movw	fp, #16154	; 0x3f1a
 80124b4:	fb0b 9902 	mla	r9, fp, r2, r9
    z2    += z4;
 80124b8:	4402      	add	r2, r0
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 80124ba:	4499      	add	r9, r3
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 80124bc:	4b98      	ldr	r3, [pc, #608]	; (8012720 <jpeg_idct_16x8+0x444>)
 80124be:	fb03 fb02 	mul.w	fp, r3, r2
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80124c2:	f242 2318 	movw	r3, #8728	; 0x2218
 80124c6:	fb03 b300 	mla	r3, r3, r0, fp
    tmp1  += z1;
 80124ca:	445e      	add	r6, fp
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80124cc:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80124d0:	449e      	add	lr, r3
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 80124d2:	4b94      	ldr	r3, [pc, #592]	; (8012724 <jpeg_idct_16x8+0x448>)
 80124d4:	435a      	muls	r2, r3
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80124d6:	fb0b 2b00 	mla	fp, fp, r0, r2
    tmp12 += z2;
 80124da:	444a      	add	r2, r9
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80124dc:	f46f 7959 	mvn.w	r9, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80124e0:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80124e2:	eb07 0b00 	add.w	fp, r7, r0
 80124e6:	444b      	add	r3, r9
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 80124e8:	1bc0      	subs	r0, r0, r7
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 80124ea:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80124ec:	fb03 fb0b 	mul.w	fp, r3, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 80124f0:	f640 5323 	movw	r3, #3363	; 0xd23
 80124f4:	4358      	muls	r0, r3
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 80124f6:	9b01      	ldr	r3, [sp, #4]
    tmp2  += z2;
 80124f8:	445c      	add	r4, fp
    tmp3  += z2;
 80124fa:	44de      	add	lr, fp
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 80124fc:	443b      	add	r3, r7
 80124fe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    tmp10 += z2;
 8012500:	4484      	add	ip, r0
    tmp11 += z2;
 8012502:	4450      	add	r0, sl
			     & RANGE_MASK];
 8012504:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012508:	46b9      	mov	r9, r7
 801250a:	9f58      	ldr	r7, [sp, #352]	; 0x160
 801250c:	f818 3003 	ldrb.w	r3, [r8, r3]
 8012510:	f809 3007 	strb.w	r3, [r9, r7]
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 8012514:	9b01      	ldr	r3, [sp, #4]
 8012516:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8012518:	1bdb      	subs	r3, r3, r7
			     & RANGE_MASK];
 801251a:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 801251e:	f818 3003 	ldrb.w	r3, [r8, r3]
 8012522:	73cb      	strb	r3, [r1, #15]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8012524:	9b03      	ldr	r3, [sp, #12]
 8012526:	4433      	add	r3, r6
			     & RANGE_MASK];
 8012528:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 801252c:	f818 3003 	ldrb.w	r3, [r8, r3]
 8012530:	704b      	strb	r3, [r1, #1]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 8012532:	9b03      	ldr	r3, [sp, #12]
 8012534:	1b9e      	subs	r6, r3, r6
			     & RANGE_MASK];
 8012536:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 801253a:	f818 3006 	ldrb.w	r3, [r8, r6]
 801253e:	738b      	strb	r3, [r1, #14]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8012540:	9b05      	ldr	r3, [sp, #20]
 8012542:	4423      	add	r3, r4
			     & RANGE_MASK];
 8012544:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8012548:	f818 3003 	ldrb.w	r3, [r8, r3]
 801254c:	708b      	strb	r3, [r1, #2]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 801254e:	9b05      	ldr	r3, [sp, #20]
 8012550:	1b1c      	subs	r4, r3, r4
			     & RANGE_MASK];
 8012552:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8012556:	f818 3004 	ldrb.w	r3, [r8, r4]
 801255a:	734b      	strb	r3, [r1, #13]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 801255c:	9b07      	ldr	r3, [sp, #28]
 801255e:	4473      	add	r3, lr
			     & RANGE_MASK];
 8012560:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8012564:	f818 3003 	ldrb.w	r3, [r8, r3]
 8012568:	70cb      	strb	r3, [r1, #3]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 801256a:	9b07      	ldr	r3, [sp, #28]
 801256c:	eba3 0e0e 	sub.w	lr, r3, lr
			     & RANGE_MASK];
 8012570:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8012574:	f818 300e 	ldrb.w	r3, [r8, lr]
 8012578:	730b      	strb	r3, [r1, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 801257a:	9b08      	ldr	r3, [sp, #32]
 801257c:	4463      	add	r3, ip
			     & RANGE_MASK];
 801257e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8012582:	f818 3003 	ldrb.w	r3, [r8, r3]
 8012586:	710b      	strb	r3, [r1, #4]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8012588:	9b08      	ldr	r3, [sp, #32]
 801258a:	eba3 0c0c 	sub.w	ip, r3, ip
			     & RANGE_MASK];
 801258e:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8012592:	f818 300c 	ldrb.w	r3, [r8, ip]
 8012596:	72cb      	strb	r3, [r1, #11]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8012598:	9b06      	ldr	r3, [sp, #24]
 801259a:	4403      	add	r3, r0
			     & RANGE_MASK];
 801259c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 80125a0:	f818 3003 	ldrb.w	r3, [r8, r3]
 80125a4:	714b      	strb	r3, [r1, #5]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 80125a6:	9b06      	ldr	r3, [sp, #24]
 80125a8:	1a18      	subs	r0, r3, r0
			     & RANGE_MASK];
 80125aa:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 80125ae:	f818 3000 	ldrb.w	r3, [r8, r0]
 80125b2:	728b      	strb	r3, [r1, #10]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 80125b4:	9b04      	ldr	r3, [sp, #16]
 80125b6:	4413      	add	r3, r2
			     & RANGE_MASK];
 80125b8:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 80125bc:	f818 3003 	ldrb.w	r3, [r8, r3]
 80125c0:	718b      	strb	r3, [r1, #6]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 80125c2:	9b04      	ldr	r3, [sp, #16]
 80125c4:	1a9a      	subs	r2, r3, r2
			     & RANGE_MASK];
 80125c6:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 80125ca:	f818 3002 	ldrb.w	r3, [r8, r2]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 80125ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 80125d0:	724b      	strb	r3, [r1, #9]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 80125d2:	9b02      	ldr	r3, [sp, #8]
 80125d4:	4413      	add	r3, r2
			     & RANGE_MASK];
 80125d6:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 80125da:	f818 3003 	ldrb.w	r3, [r8, r3]
 80125de:	71cb      	strb	r3, [r1, #7]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 80125e0:	9b02      	ldr	r3, [sp, #8]
 80125e2:	1a9c      	subs	r4, r3, r2
  for (ctr = 0; ctr < 8; ctr++) {
 80125e4:	9a00      	ldr	r2, [sp, #0]
			     & RANGE_MASK];
 80125e6:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 80125ea:	f818 3004 	ldrb.w	r3, [r8, r4]
 80125ee:	720b      	strb	r3, [r1, #8]
  for (ctr = 0; ctr < 8; ctr++) {
 80125f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80125f2:	4293      	cmp	r3, r2
 80125f4:	f47f aeb9 	bne.w	801236a <jpeg_idct_16x8+0x8e>
  }
}
 80125f8:	b04f      	add	sp, #316	; 0x13c
 80125fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80125fe:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012600:	f8d0 50bc 	ldr.w	r5, [r0, #188]	; 0xbc
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012604:	4366      	muls	r6, r4
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8012606:	f241 1451 	movw	r4, #4433	; 0x1151
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801260a:	435d      	muls	r5, r3
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 801260c:	1973      	adds	r3, r6, r5
 801260e:	4363      	muls	r3, r4
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8012610:	f641 047e 	movw	r4, #6270	; 0x187e
 8012614:	fb04 3606 	mla	r6, r4, r6, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8012618:	4c43      	ldr	r4, [pc, #268]	; (8012728 <jpeg_idct_16x8+0x44c>)
 801261a:	fb04 3505 	mla	r5, r4, r5, r3
    z2 <<= CONST_BITS;
 801261e:	037b      	lsls	r3, r7, #13
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012620:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 8012622:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012626:	fb04 f40e 	mul.w	r4, r4, lr
    tmp0 = z2 + z3;
 801262a:	eb03 3b44 	add.w	fp, r3, r4, lsl #13
    tmp1 = z2 - z3;
 801262e:	eba3 3344 	sub.w	r3, r3, r4, lsl #13
    tmp13 = tmp0 - tmp2;
 8012632:	ebab 0406 	sub.w	r4, fp, r6
    tmp10 = tmp0 + tmp2;
 8012636:	eb06 070b 	add.w	r7, r6, fp
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801263a:	9e03      	ldr	r6, [sp, #12]
    tmp13 = tmp0 - tmp2;
 801263c:	9400      	str	r4, [sp, #0]
    tmp11 = tmp1 + tmp3;
 801263e:	18ec      	adds	r4, r5, r3
    tmp12 = tmp1 - tmp3;
 8012640:	1b5b      	subs	r3, r3, r5
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012642:	69c5      	ldr	r5, [r0, #28]
    tmp11 = tmp1 + tmp3;
 8012644:	9401      	str	r4, [sp, #4]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012646:	f8d0 40dc 	ldr.w	r4, [r0, #220]	; 0xdc
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801264a:	fb05 fa0a 	mul.w	sl, r5, sl
    tmp12 = tmp1 - tmp3;
 801264e:	9302      	str	r3, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8012650:	f242 53a1 	movw	r3, #9633	; 0x25a1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012654:	fb04 f909 	mul.w	r9, r4, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012658:	f8d0 409c 	ldr.w	r4, [r0, #156]	; 0x9c
 801265c:	4366      	muls	r6, r4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801265e:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8012660:	fb04 fc0c 	mul.w	ip, r4, ip
    z3 = tmp1 + tmp3;
 8012664:	eb06 0e0a 	add.w	lr, r6, sl
    z2 = tmp0 + tmp2;
 8012668:	eb09 050c 	add.w	r5, r9, ip
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 801266c:	eb05 040e 	add.w	r4, r5, lr
 8012670:	435c      	muls	r4, r3
    z2 += z1;
 8012672:	4b2e      	ldr	r3, [pc, #184]	; (801272c <jpeg_idct_16x8+0x450>)
 8012674:	fb03 4505 	mla	r5, r3, r5, r4
    z3 += z1;
 8012678:	4b2d      	ldr	r3, [pc, #180]	; (8012730 <jpeg_idct_16x8+0x454>)
 801267a:	fb03 440e 	mla	r4, r3, lr, r4
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 801267e:	eb09 0e0a 	add.w	lr, r9, sl
 8012682:	4b2c      	ldr	r3, [pc, #176]	; (8012734 <jpeg_idct_16x8+0x458>)
 8012684:	fb03 fe0e 	mul.w	lr, r3, lr
    tmp0 += z1 + z2;
 8012688:	f640 138e 	movw	r3, #2446	; 0x98e
 801268c:	eb05 0b0e 	add.w	fp, r5, lr
    tmp3 += z1 + z3;
 8012690:	44a6      	add	lr, r4
    tmp0 += z1 + z2;
 8012692:	fb03 b909 	mla	r9, r3, r9, fp
    tmp3 += z1 + z3;
 8012696:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801269a:	4b27      	ldr	r3, [pc, #156]	; (8012738 <jpeg_idct_16x8+0x45c>)
    tmp3 += z1 + z3;
 801269c:	fb0b ee0a 	mla	lr, fp, sl, lr
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80126a0:	eb06 0a0c 	add.w	sl, r6, ip
    tmp1 += z1 + z3;
 80126a4:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80126a8:	fb03 fa0a 	mul.w	sl, r3, sl
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 80126ac:	9b01      	ldr	r3, [sp, #4]
    tmp2 += z1 + z2;
 80126ae:	4455      	add	r5, sl
    tmp1 += z1 + z3;
 80126b0:	4454      	add	r4, sl
    tmp2 += z1 + z2;
 80126b2:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 80126b6:	fb0b 4406 	mla	r4, fp, r6, r4
    tmp2 += z1 + z2;
 80126ba:	fb0a 5a0c 	mla	sl, sl, ip, r5
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 80126be:	eb07 050e 	add.w	r5, r7, lr
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 80126c2:	eba7 0e0e 	sub.w	lr, r7, lr
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 80126c6:	12ed      	asrs	r5, r5, #11
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 80126c8:	ea4f 27ee 	mov.w	r7, lr, asr #11
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 80126cc:	f841 5c04 	str.w	r5, [r1, #-4]
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 80126d0:	eb03 050a 	add.w	r5, r3, sl
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 80126d4:	eba3 0a0a 	sub.w	sl, r3, sl
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80126d8:	9b02      	ldr	r3, [sp, #8]
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 80126da:	12ed      	asrs	r5, r5, #11
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 80126dc:	f8c1 70dc 	str.w	r7, [r1, #220]	; 0xdc
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 80126e0:	ea4f 26ea 	mov.w	r6, sl, asr #11
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 80126e4:	61cd      	str	r5, [r1, #28]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80126e6:	191d      	adds	r5, r3, r4
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 80126e8:	1b1c      	subs	r4, r3, r4
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 80126ea:	9b00      	ldr	r3, [sp, #0]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80126ec:	12ed      	asrs	r5, r5, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 80126ee:	f8c1 60bc 	str.w	r6, [r1, #188]	; 0xbc
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 80126f2:	444b      	add	r3, r9
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 80126f4:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80126f6:	63cd      	str	r5, [r1, #60]	; 0x3c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 80126f8:	12db      	asrs	r3, r3, #11
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 80126fa:	f8c1 409c 	str.w	r4, [r1, #156]	; 0x9c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 80126fe:	65cb      	str	r3, [r1, #92]	; 0x5c
    wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 8012700:	9b00      	ldr	r3, [sp, #0]
 8012702:	eba3 0909 	sub.w	r9, r3, r9
 8012706:	ea4f 26e9 	mov.w	r6, r9, asr #11
 801270a:	67ce      	str	r6, [r1, #124]	; 0x7c
    wsptr++;
 801270c:	e623      	b.n	8012356 <jpeg_idct_16x8+0x7a>
 801270e:	bf00      	nop
 8012710:	ffffecc2 	.word	0xffffecc2
 8012714:	ffffb6d6 	.word	0xffffb6d6
 8012718:	ffffc542 	.word	0xffffc542
 801271c:	ffffdbfa 	.word	0xffffdbfa
 8012720:	ffffeaab 	.word	0xffffeaab
 8012724:	ffffd817 	.word	0xffffd817
 8012728:	ffffc4df 	.word	0xffffc4df
 801272c:	ffffc13b 	.word	0xffffc13b
 8012730:	fffff384 	.word	0xfffff384
 8012734:	ffffe333 	.word	0xffffe333
 8012738:	ffffadfd 	.word	0xffffadfd

0801273c <jpeg_idct_14x7>:

GLOBAL(void)
jpeg_idct_14x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801273c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012740:	b0c5      	sub	sp, #276	; 0x114
 8012742:	6d4f      	ldr	r7, [r1, #84]	; 0x54
 8012744:	f1a2 0c02 	sub.w	ip, r2, #2
 8012748:	320e      	adds	r2, #14
 801274a:	9302      	str	r3, [sp, #8]
 801274c:	3f04      	subs	r7, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801274e:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
  /* Pass 1: process columns from input, store into work array.
   * 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8012752:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 8012756:	9204      	str	r2, [sp, #16]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012758:	3380      	adds	r3, #128	; 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
    /* Even part */

    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801275a:	f93c 1f02 	ldrsh.w	r1, [ip, #2]!
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 801275e:	f640 2512 	movw	r5, #2578	; 0xa12
    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012762:	f857 2f04 	ldr.w	r2, [r7, #4]!
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
    tmp10 = z1 + z3;
    z2 -= tmp10;
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8012766:	f642 0ac6 	movw	sl, #10438	; 0x28c6
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801276a:	f10e 0e04 	add.w	lr, lr, #4
    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801276e:	434a      	muls	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012770:	6c3c      	ldr	r4, [r7, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012772:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
    tmp23 <<= CONST_BITS;
 8012776:	0352      	lsls	r2, r2, #13
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012778:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
    tmp23 += ONE << (CONST_BITS-PASS1_BITS-1);
 801277c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012780:	9200      	str	r2, [sp, #0]
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012782:	f9bc 2020 	ldrsh.w	r2, [ip, #32]
 8012786:	4354      	muls	r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012788:	f9bc 2040 	ldrsh.w	r2, [ip, #64]	; 0x40
 801278c:	4350      	muls	r0, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801278e:	f9bc 2060 	ldrsh.w	r2, [ip, #96]	; 0x60
 8012792:	4351      	muls	r1, r2
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8012794:	f641 4237 	movw	r2, #7223	; 0x1c37
 8012798:	eba0 0801 	sub.w	r8, r0, r1
 801279c:	fb02 f808 	mul.w	r8, r2, r8
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 80127a0:	1a22      	subs	r2, r4, r0
 80127a2:	fb05 f602 	mul.w	r6, r5, r2
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 80127a6:	9a00      	ldr	r2, [sp, #0]
 80127a8:	eb08 0506 	add.w	r5, r8, r6
 80127ac:	4415      	add	r5, r2
 80127ae:	4abb      	ldr	r2, [pc, #748]	; (8012a9c <jpeg_idct_14x7+0x360>)
 80127b0:	fb02 5500 	mla	r5, r2, r0, r5
    tmp10 = z1 + z3;
 80127b4:	1862      	adds	r2, r4, r1
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 80127b6:	4691      	mov	r9, r2
    tmp10 = z1 + z3;
 80127b8:	9203      	str	r2, [sp, #12]
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 80127ba:	9a00      	ldr	r2, [sp, #0]
 80127bc:	fb0a 2209 	mla	r2, sl, r9, r2
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 80127c0:	f46f 791f 	mvn.w	r9, #636	; 0x27c
 80127c4:	fb09 2101 	mla	r1, r9, r1, r2
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80127c8:	f9bc 9010 	ldrsh.w	r9, [ip, #16]
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 80127cc:	4441      	add	r1, r8
 80127ce:	9101      	str	r1, [sp, #4]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 80127d0:	49b3      	ldr	r1, [pc, #716]	; (8012aa0 <jpeg_idct_14x7+0x364>)
 80127d2:	fb01 2204 	mla	r2, r1, r4, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80127d6:	6a3c      	ldr	r4, [r7, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80127d8:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 80127dc:	4432      	add	r2, r6
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80127de:	fb04 f909 	mul.w	r9, r4, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80127e2:	6e3e      	ldr	r6, [r7, #96]	; 0x60
 80127e4:	f9bc 4030 	ldrsh.w	r4, [ip, #48]	; 0x30
 80127e8:	4366      	muls	r6, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80127ea:	f9bc 4050 	ldrsh.w	r4, [ip, #80]	; 0x50

    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 80127ee:	eb09 0806 	add.w	r8, r9, r6
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80127f2:	434c      	muls	r4, r1
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 80127f4:	f641 51ef 	movw	r1, #7663	; 0x1def
 80127f8:	fb01 fb08 	mul.w	fp, r1, r8
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 80127fc:	eba9 0806 	sub.w	r8, r9, r6
 8012800:	f240 5173 	movw	r1, #1395	; 0x573
    tmp10 = tmp11 - tmp12;
    tmp11 += tmp12;
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
    tmp11 += tmp12;
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8012804:	44a1      	add	r9, r4
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8012806:	4426      	add	r6, r4
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8012808:	fb01 f808 	mul.w	r8, r1, r8
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 801280c:	49a5      	ldr	r1, [pc, #660]	; (8012aa4 <jpeg_idct_14x7+0x368>)
    tmp10 = tmp11 - tmp12;
 801280e:	ebab 0a08 	sub.w	sl, fp, r8
    tmp11 += tmp12;
 8012812:	44d8      	add	r8, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8012814:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8012818:	434e      	muls	r6, r1
    tmp10 += z2;
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801281a:	9901      	ldr	r1, [sp, #4]
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 801281c:	fb0b f909 	mul.w	r9, fp, r9
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8012820:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp11 += tmp12;
 8012824:	44b0      	add	r8, r6
    tmp10 += z2;
 8012826:	44ca      	add	sl, r9
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8012828:	fb0b 9904 	mla	r9, fp, r4, r9
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801282c:	eb01 040a 	add.w	r4, r1, sl
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8012830:	eba1 0a0a 	sub.w	sl, r1, sl
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8012834:	444e      	add	r6, r9
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8012836:	ea4f 21ea 	mov.w	r1, sl, asr #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801283a:	12e4      	asrs	r4, r4, #11
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801283c:	f8ce 10bc 	str.w	r1, [lr, #188]	; 0xbc
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8012840:	eb05 0108 	add.w	r1, r5, r8
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8012844:	eba5 0508 	sub.w	r5, r5, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012848:	f84e 4c04 	str.w	r4, [lr, #-4]
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801284c:	12c9      	asrs	r1, r1, #11
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801284e:	12ed      	asrs	r5, r5, #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8012850:	f8ce 101c 	str.w	r1, [lr, #28]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012854:	1991      	adds	r1, r2, r6
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012856:	1b96      	subs	r6, r2, r6
    z2 -= tmp10;
 8012858:	9a03      	ldr	r2, [sp, #12]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801285a:	12c9      	asrs	r1, r1, #11
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801285c:	f8ce 509c 	str.w	r5, [lr, #156]	; 0x9c
    z2 -= tmp10;
 8012860:	1a80      	subs	r0, r0, r2
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8012862:	f642 5241 	movw	r2, #11585	; 0x2d41
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012866:	f8ce 103c 	str.w	r1, [lr, #60]	; 0x3c
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801286a:	12f6      	asrs	r6, r6, #11
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 801286c:	9900      	ldr	r1, [sp, #0]
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801286e:	f8ce 607c 	str.w	r6, [lr, #124]	; 0x7c
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8012872:	fb02 1000 	mla	r0, r2, r0, r1
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012876:	9a04      	ldr	r2, [sp, #16]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23, CONST_BITS-PASS1_BITS);
 8012878:	12c0      	asrs	r0, r0, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801287a:	4562      	cmp	r2, ip
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23, CONST_BITS-PASS1_BITS);
 801287c:	f8ce 005c 	str.w	r0, [lr, #92]	; 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012880:	f47f af6b 	bne.w	801275a <jpeg_idct_14x7+0x1e>
 8012884:	9a02      	ldr	r2, [sp, #8]
  }

  /* Pass 2: process 7 rows from work array, store into output array.
   * 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
   */
  wsptr = workspace;
 8012886:	ad0c      	add	r5, sp, #48	; 0x30
 8012888:	3a04      	subs	r2, #4
 801288a:	9200      	str	r2, [sp, #0]
 801288c:	9a02      	ldr	r2, [sp, #8]
 801288e:	3218      	adds	r2, #24
 8012890:	920b      	str	r2, [sp, #44]	; 0x2c
  for (ctr = 0; ctr < 7; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8012892:	9a00      	ldr	r2, [sp, #0]
    /* Add fudge factor here for final descale. */
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    z1 <<= CONST_BITS;
    z4 = (INT32) wsptr[4];
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8012894:	f640 2412 	movw	r4, #2578	; 0xa12
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8012898:	f642 00c6 	movw	r0, #10438	; 0x28c6
    tmp12 = z1 - z4;

    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[6];
 801289c:	69af      	ldr	r7, [r5, #24]
    outptr = output_buf[ctr] + output_col;
 801289e:	4611      	mov	r1, r2

    tmp14 = z1 + z3;
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 80128a0:	f641 0b14 	movw	fp, #6164	; 0x1814
			     & RANGE_MASK];
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 80128a4:	3520      	adds	r5, #32
    outptr = output_buf[ctr] + output_col;
 80128a6:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80128aa:	920a      	str	r2, [sp, #40]	; 0x28
 80128ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80128ae:	9100      	str	r1, [sp, #0]
 80128b0:	994e      	ldr	r1, [sp, #312]	; 0x138
 80128b2:	1851      	adds	r1, r2, r1
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80128b4:	f855 2c20 	ldr.w	r2, [r5, #-32]
 80128b8:	f102 0810 	add.w	r8, r2, #16
    z4 = (INT32) wsptr[4];
 80128bc:	f855 2c10 	ldr.w	r2, [r5, #-16]
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 80128c0:	fb04 f602 	mul.w	r6, r4, r2
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 80128c4:	f641 4437 	movw	r4, #7223	; 0x1c37
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 80128c8:	4350      	muls	r0, r2
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 80128ca:	4354      	muls	r4, r2
    tmp11 = z1 + z3;
 80128cc:	eb06 3e48 	add.w	lr, r6, r8, lsl #13
    tmp10 = z1 + z2;
 80128d0:	eb00 3c48 	add.w	ip, r0, r8, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 80128d4:	4430      	add	r0, r6
    z1 = (INT32) wsptr[2];
 80128d6:	f855 6c18 	ldr.w	r6, [r5, #-24]
    tmp12 = z1 - z4;
 80128da:	ebc4 3948 	rsb	r9, r4, r8, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 80128de:	1b00      	subs	r0, r0, r4
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 80128e0:	f242 3462 	movw	r4, #9058	; 0x2362
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 80128e4:	4a70      	ldr	r2, [pc, #448]	; (8012aa8 <jpeg_idct_14x7+0x36c>)
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 80128e6:	0040      	lsls	r0, r0, #1
 80128e8:	ebc0 3048 	rsb	r0, r0, r8, lsl #13
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 80128ec:	f241 38a3 	movw	r8, #5027	; 0x13a3
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 80128f0:	9001      	str	r0, [sp, #4]
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 80128f2:	19f0      	adds	r0, r6, r7
 80128f4:	4360      	muls	r0, r4
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 80128f6:	f640 04bd 	movw	r4, #2237	; 0x8bd
 80128fa:	fb04 0406 	mla	r4, r4, r6, r0
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 80128fe:	fb02 0007 	mla	r0, r2, r7, r0
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 8012902:	f602 22e5 	addw	r2, r2, #2789	; 0xae5
 8012906:	4357      	muls	r7, r2
    tmp20 = tmp10 + tmp13;
 8012908:	eb0c 0204 	add.w	r2, ip, r4
 801290c:	9202      	str	r2, [sp, #8]
    tmp26 = tmp10 - tmp13;
 801290e:	ebac 0204 	sub.w	r2, ip, r4
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8012912:	fb08 7606 	mla	r6, r8, r6, r7
    z3 = (INT32) wsptr[5];
 8012916:	f855 cc0c 	ldr.w	ip, [r5, #-12]
    tmp26 = tmp10 - tmp13;
 801291a:	9203      	str	r2, [sp, #12]
    tmp21 = tmp11 + tmp14;
 801291c:	eb0e 0200 	add.w	r2, lr, r0
    z4 = (INT32) wsptr[7];
 8012920:	f855 8c04 	ldr.w	r8, [r5, #-4]
    tmp21 = tmp11 + tmp14;
 8012924:	9204      	str	r2, [sp, #16]
    tmp25 = tmp11 - tmp14;
 8012926:	ebae 0200 	sub.w	r2, lr, r0
    z2 = (INT32) wsptr[3];
 801292a:	f855 0c14 	ldr.w	r0, [r5, #-20]
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 801292e:	f640 6ef2 	movw	lr, #3826	; 0xef2
    tmp25 = tmp11 - tmp14;
 8012932:	9205      	str	r2, [sp, #20]
    tmp22 = tmp12 + tmp15;
 8012934:	eb09 0206 	add.w	r2, r9, r6
 8012938:	9206      	str	r2, [sp, #24]
    tmp24 = tmp12 - tmp15;
 801293a:	eba9 0206 	sub.w	r2, r9, r6
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 801293e:	f642 29b7 	movw	r9, #10935	; 0x2ab7
    tmp24 = tmp12 - tmp15;
 8012942:	9207      	str	r2, [sp, #28]
    z1 = (INT32) wsptr[1];
 8012944:	f855 2c1c 	ldr.w	r2, [r5, #-28]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8012948:	1814      	adds	r4, r2, r0
    tmp14 = z1 + z3;
 801294a:	eb02 060c 	add.w	r6, r2, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 801294e:	fb09 f904 	mul.w	r9, r9, r4
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8012952:	f242 6452 	movw	r4, #9810	; 0x2652
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8012956:	fb0b fb06 	mul.w	fp, fp, r6
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 801295a:	fb04 fa06 	mul.w	sl, r4, r6
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 801295e:	4c53      	ldr	r4, [pc, #332]	; (8012aac <jpeg_idct_14x7+0x370>)
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8012960:	eb00 060c 	add.w	r6, r0, ip
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8012964:	eb09 070a 	add.w	r7, r9, sl
 8012968:	eb07 3748 	add.w	r7, r7, r8, lsl #13
 801296c:	fb04 7702 	mla	r7, r4, r2, r7
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8012970:	f204 241b 	addw	r4, r4, #539	; 0x21b
 8012974:	fb04 b402 	mla	r4, r4, r2, fp
    z1    -= z2;
 8012978:	1a12      	subs	r2, r2, r0
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 801297a:	fb0e fe02 	mul.w	lr, lr, r2
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 801297e:	eba2 020c 	sub.w	r2, r2, ip
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8012982:	ebae 3e48 	sub.w	lr, lr, r8, lsl #13
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8012986:	0352      	lsls	r2, r2, #13
    tmp16 += tmp15;
 8012988:	4474      	add	r4, lr
 801298a:	9408      	str	r4, [sp, #32]
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 801298c:	f46f 64a2 	mvn.w	r4, #1296	; 0x510
 8012990:	4374      	muls	r4, r6
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8012992:	4e47      	ldr	r6, [pc, #284]	; (8012ab0 <jpeg_idct_14x7+0x374>)
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8012994:	eba4 3448 	sub.w	r4, r4, r8, lsl #13
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8012998:	fb06 4600 	mla	r6, r6, r0, r4
 801299c:	44b1      	add	r9, r6
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 801299e:	4e45      	ldr	r6, [pc, #276]	; (8012ab4 <jpeg_idct_14x7+0x378>)
 80129a0:	fb06 440c 	mla	r4, r6, ip, r4
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 80129a4:	ebac 0600 	sub.w	r6, ip, r0
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 80129a8:	4454      	add	r4, sl
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 80129aa:	f642 4af8 	movw	sl, #11512	; 0x2cf8
 80129ae:	fb0a fa06 	mul.w	sl, sl, r6
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 80129b2:	9409      	str	r4, [sp, #36]	; 0x24
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80129b4:	eb0a 3648 	add.w	r6, sl, r8, lsl #13
 80129b8:	4c3f      	ldr	r4, [pc, #252]	; (8012ab8 <jpeg_idct_14x7+0x37c>)
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 80129ba:	eb02 3848 	add.w	r8, r2, r8, lsl #13
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80129be:	9a02      	ldr	r2, [sp, #8]
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80129c0:	fb04 660c 	mla	r6, r4, ip, r6
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80129c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80129c6:	443a      	add	r2, r7
 80129c8:	46a4      	mov	ip, r4
 80129ca:	9c4e      	ldr	r4, [sp, #312]	; 0x138
			     & RANGE_MASK];
 80129cc:	f3c2 4289 	ubfx	r2, r2, #18, #10
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80129d0:	445e      	add	r6, fp
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 80129d2:	f241 5b99 	movw	fp, #5529	; 0x1599
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80129d6:	5c9a      	ldrb	r2, [r3, r2]
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 80129d8:	fb0b a000 	mla	r0, fp, r0, sl
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80129dc:	f80c 2004 	strb.w	r2, [ip, r4]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80129e0:	9a02      	ldr	r2, [sp, #8]
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 80129e2:	4470      	add	r0, lr
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80129e4:	1bd7      	subs	r7, r2, r7
			     & RANGE_MASK];
 80129e6:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80129ea:	5dda      	ldrb	r2, [r3, r7]
 80129ec:	734a      	strb	r2, [r1, #13]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80129ee:	9a04      	ldr	r2, [sp, #16]
 80129f0:	444a      	add	r2, r9
			     & RANGE_MASK];
 80129f2:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80129f6:	5c9a      	ldrb	r2, [r3, r2]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80129f8:	9c09      	ldr	r4, [sp, #36]	; 0x24
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80129fa:	704a      	strb	r2, [r1, #1]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80129fc:	9a04      	ldr	r2, [sp, #16]
 80129fe:	eba2 0909 	sub.w	r9, r2, r9
			     & RANGE_MASK];
 8012a02:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012a06:	f813 2009 	ldrb.w	r2, [r3, r9]
 8012a0a:	730a      	strb	r2, [r1, #12]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012a0c:	9a06      	ldr	r2, [sp, #24]
 8012a0e:	4422      	add	r2, r4
			     & RANGE_MASK];
 8012a10:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012a14:	5c9a      	ldrb	r2, [r3, r2]
 8012a16:	708a      	strb	r2, [r1, #2]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012a18:	9a06      	ldr	r2, [sp, #24]
 8012a1a:	1b14      	subs	r4, r2, r4
			     & RANGE_MASK];
 8012a1c:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012a20:	5d1a      	ldrb	r2, [r3, r4]
 8012a22:	72ca      	strb	r2, [r1, #11]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012a24:	9a01      	ldr	r2, [sp, #4]
 8012a26:	4442      	add	r2, r8
			     & RANGE_MASK];
 8012a28:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012a2c:	5c9a      	ldrb	r2, [r3, r2]
 8012a2e:	70ca      	strb	r2, [r1, #3]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012a30:	9a01      	ldr	r2, [sp, #4]
 8012a32:	eba2 0808 	sub.w	r8, r2, r8
			     & RANGE_MASK];
 8012a36:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012a3a:	f813 2008 	ldrb.w	r2, [r3, r8]
 8012a3e:	728a      	strb	r2, [r1, #10]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012a40:	9a07      	ldr	r2, [sp, #28]
 8012a42:	4432      	add	r2, r6
			     & RANGE_MASK];
 8012a44:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012a48:	5c9a      	ldrb	r2, [r3, r2]
 8012a4a:	710a      	strb	r2, [r1, #4]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012a4c:	9a07      	ldr	r2, [sp, #28]
 8012a4e:	1b96      	subs	r6, r2, r6
			     & RANGE_MASK];
 8012a50:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012a54:	5d9a      	ldrb	r2, [r3, r6]
 8012a56:	724a      	strb	r2, [r1, #9]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8012a58:	9a05      	ldr	r2, [sp, #20]
 8012a5a:	4402      	add	r2, r0
			     & RANGE_MASK];
 8012a5c:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8012a60:	5c9a      	ldrb	r2, [r3, r2]
 8012a62:	714a      	strb	r2, [r1, #5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8012a64:	9a05      	ldr	r2, [sp, #20]
 8012a66:	1a10      	subs	r0, r2, r0
			     & RANGE_MASK];
 8012a68:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8012a6c:	5c1a      	ldrb	r2, [r3, r0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8012a6e:	9808      	ldr	r0, [sp, #32]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8012a70:	720a      	strb	r2, [r1, #8]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8012a72:	9a03      	ldr	r2, [sp, #12]
 8012a74:	4402      	add	r2, r0
			     & RANGE_MASK];
 8012a76:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8012a7a:	5c9a      	ldrb	r2, [r3, r2]
 8012a7c:	718a      	strb	r2, [r1, #6]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8012a7e:	9a03      	ldr	r2, [sp, #12]
 8012a80:	1a14      	subs	r4, r2, r0
			     & RANGE_MASK];
 8012a82:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8012a86:	5d1a      	ldrb	r2, [r3, r4]
 8012a88:	71ca      	strb	r2, [r1, #7]
  for (ctr = 0; ctr < 7; ctr++) {
 8012a8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012a8c:	9900      	ldr	r1, [sp, #0]
 8012a8e:	428a      	cmp	r2, r1
 8012a90:	f47f aeff 	bne.w	8012892 <jpeg_idct_14x7+0x156>
  }
}
 8012a94:	b045      	add	sp, #276	; 0x114
 8012a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a9a:	bf00      	nop
 8012a9c:	ffffc515 	.word	0xffffc515
 8012aa0:	ffffb0f1 	.word	0xffffb0f1
 8012aa4:	ffffd3e1 	.word	0xffffd3e1
 8012aa8:	ffffc8fc 	.word	0xffffc8fc
 8012aac:	ffffdbf0 	.word	0xffffdbf0
 8012ab0:	fffff26e 	.word	0xfffff26e
 8012ab4:	ffffb409 	.word	0xffffb409
 8012ab8:	ffffc9e6 	.word	0xffffc9e6

08012abc <jpeg_idct_12x6>:

GLOBAL(void)
jpeg_idct_12x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012ac0:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8012ac4:	b0bb      	sub	sp, #236	; 0xec
 8012ac6:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8012ac8:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012aca:	3080      	adds	r0, #128	; 0x80
 8012acc:	320e      	adds	r2, #14
 8012ace:	3d04      	subs	r5, #4
  /* Pass 1: process columns from input, store into work array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8012ad0:	af0a      	add	r7, sp, #40	; 0x28
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012ad2:	9000      	str	r0, [sp, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012ad4:	9201      	str	r2, [sp, #4]
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012ad6:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
    tmp11 = tmp10 + tmp20;
    tmp21 = RIGHT_SHIFT(tmp10 - tmp20 - tmp20, CONST_BITS-PASS1_BITS);
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 8012ada:	f242 7031 	movw	r0, #10033	; 0x2731
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012ade:	f855 1f04 	ldr.w	r1, [r5, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012ae2:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012ae4:	f9b6 4040 	ldrsh.w	r4, [r6, #64]	; 0x40
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012ae8:	4351      	muls	r1, r2
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012aea:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012aee:	f9b6 c020 	ldrsh.w	ip, [r6, #32]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012af2:	4362      	muls	r2, r4
    tmp10 <<= CONST_BITS;
 8012af4:	0349      	lsls	r1, r1, #13
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8012af6:	f241 64a1 	movw	r4, #5793	; 0x16a1
    tmp22 = tmp11 - tmp10;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012afa:	f9b6 9030 	ldrsh.w	r9, [r6, #48]	; 0x30
    tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
 8012afe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012b02:	f9b6 8050 	ldrsh.w	r8, [r6, #80]	; 0x50
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8012b06:	4362      	muls	r2, r4
    tmp11 = tmp10 + tmp20;
 8012b08:	188c      	adds	r4, r1, r2
    tmp21 = RIGHT_SHIFT(tmp10 - tmp20 - tmp20, CONST_BITS-PASS1_BITS);
 8012b0a:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012b0e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8012b10:	fb02 f20c 	mul.w	r2, r2, ip
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012b14:	f9b6 c010 	ldrsh.w	ip, [r6, #16]
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 8012b18:	4342      	muls	r2, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012b1a:	6e28      	ldr	r0, [r5, #96]	; 0x60
    tmp20 = tmp11 + tmp10;
 8012b1c:	eb04 0e02 	add.w	lr, r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012b20:	fb00 f909 	mul.w	r9, r0, r9
    tmp22 = tmp11 - tmp10;
 8012b24:	1aa4      	subs	r4, r4, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012b26:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012b2a:	6a2a      	ldr	r2, [r5, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012b2c:	fb00 f808 	mul.w	r8, r0, r8
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8012b30:	f640 30b6 	movw	r0, #2998	; 0xbb6
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012b34:	fb02 f20c 	mul.w	r2, r2, ip
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8012b38:	eba8 0b09 	sub.w	fp, r8, r9
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8012b3c:	eb02 0c08 	add.w	ip, r2, r8
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 8012b40:	eb02 0a09 	add.w	sl, r2, r9
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 8012b44:	eba2 0209 	sub.w	r2, r2, r9
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8012b48:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 8012b4c:	eba2 0808 	sub.w	r8, r2, r8
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 8012b50:	eb0c 3a4a 	add.w	sl, ip, sl, lsl #13
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 8012b54:	ea4f 0888 	mov.w	r8, r8, lsl #2

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012b58:	eb0e 020a 	add.w	r2, lr, sl
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8012b5c:	ebae 0e0a 	sub.w	lr, lr, sl
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8012b60:	eb0c 3c4b 	add.w	ip, ip, fp, lsl #13
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012b64:	12d2      	asrs	r2, r2, #11
 8012b66:	f847 2c04 	str.w	r2, [r7, #-4]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8012b6a:	ea4f 22ee 	mov.w	r2, lr, asr #11
 8012b6e:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
    wsptr[8*1] = (int) (tmp21 + tmp11);
 8012b72:	eb08 22e1 	add.w	r2, r8, r1, asr #11
    wsptr[8*4] = (int) (tmp21 - tmp11);
 8012b76:	ebc8 21e1 	rsb	r1, r8, r1, asr #11
    wsptr[8*1] = (int) (tmp21 + tmp11);
 8012b7a:	61fa      	str	r2, [r7, #28]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012b7c:	eb04 020c 	add.w	r2, r4, ip
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012b80:	eba4 0c0c 	sub.w	ip, r4, ip
    wsptr[8*4] = (int) (tmp21 - tmp11);
 8012b84:	67f9      	str	r1, [r7, #124]	; 0x7c
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012b86:	12d2      	asrs	r2, r2, #11
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012b88:	ea4f 24ec 	mov.w	r4, ip, asr #11
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012b8c:	63fa      	str	r2, [r7, #60]	; 0x3c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012b8e:	9a01      	ldr	r2, [sp, #4]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012b90:	65fc      	str	r4, [r7, #92]	; 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012b92:	42b2      	cmp	r2, r6
 8012b94:	d19f      	bne.n	8012ad6 <jpeg_idct_12x6+0x1a>
 8012b96:	1f1a      	subs	r2, r3, #4
 8012b98:	3314      	adds	r3, #20
 8012b9a:	9201      	str	r2, [sp, #4]
  }

  /* Pass 2: process 6 rows from work array, store into output array.
   * 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
   */
  wsptr = workspace;
 8012b9c:	aa0a      	add	r2, sp, #40	; 0x28
 8012b9e:	9309      	str	r3, [sp, #36]	; 0x24
  for (ctr = 0; ctr < 6; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8012ba0:	9b01      	ldr	r3, [sp, #4]

    tmp10 = z3 + z4;
    tmp11 = z3 - z4;

    z1 = (INT32) wsptr[2];
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8012ba2:	f642 30b6 	movw	r0, #11190	; 0x2bb6
    z4 = (INT32) wsptr[4];
 8012ba6:	6916      	ldr	r6, [r2, #16]

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8012ba8:	f641 3e8d 	movw	lr, #7053	; 0x1b8d
    outptr = output_buf[ctr] + output_col;
 8012bac:	4619      	mov	r1, r3
    z2 = (INT32) wsptr[6];
 8012bae:	6997      	ldr	r7, [r2, #24]
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012bb0:	6815      	ldr	r5, [r2, #0]
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8012bb2:	f640 08f7 	movw	r8, #2295	; 0x8f7
    outptr = output_buf[ctr] + output_col;
 8012bb6:	f851 3f04 	ldr.w	r3, [r1, #4]!
    z2 <<= CONST_BITS;
 8012bba:	037f      	lsls	r7, r7, #13
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012bbc:	3510      	adds	r5, #16
    z1 = (INT32) wsptr[1];
 8012bbe:	f8d2 9004 	ldr.w	r9, [r2, #4]
    outptr = output_buf[ctr] + output_col;
 8012bc2:	9308      	str	r3, [sp, #32]
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8012bc4:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 8012bc6:	9b08      	ldr	r3, [sp, #32]
 8012bc8:	9101      	str	r1, [sp, #4]
 8012bca:	9944      	ldr	r1, [sp, #272]	; 0x110
 8012bcc:	440b      	add	r3, r1
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8012bce:	f242 7131 	movw	r1, #10033	; 0x2731
 8012bd2:	434e      	muls	r6, r1
    z1 = (INT32) wsptr[2];
 8012bd4:	f852 1c18 	ldr.w	r1, [r2, #-24]
    tmp12 = z1 - z2;
 8012bd8:	ebc7 3b41 	rsb	fp, r7, r1, lsl #13
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8012bdc:	fb00 f401 	mul.w	r4, r0, r1
    tmp10 = z3 + z4;
 8012be0:	eb06 3c45 	add.w	ip, r6, r5, lsl #13
    tmp21 = z3 + tmp12;
 8012be4:	eb0b 3045 	add.w	r0, fp, r5, lsl #13
    tmp11 = z3 - z4;
 8012be8:	ebc6 3645 	rsb	r6, r6, r5, lsl #13
    tmp21 = z3 + tmp12;
 8012bec:	9002      	str	r0, [sp, #8]
    tmp24 = z3 - tmp12;
 8012bee:	ebcb 3045 	rsb	r0, fp, r5, lsl #13
    tmp12 = z4 + z2;
 8012bf2:	19e5      	adds	r5, r4, r7
    tmp12 = z4 - z1 - z2;
 8012bf4:	eba4 3441 	sub.w	r4, r4, r1, lsl #13
    tmp24 = z3 - tmp12;
 8012bf8:	9003      	str	r0, [sp, #12]
    tmp12 = z4 - z1 - z2;
 8012bfa:	1be7      	subs	r7, r4, r7
    tmp20 = tmp10 + tmp12;
 8012bfc:	eb0c 0005 	add.w	r0, ip, r5
    z4 = (INT32) wsptr[7];
 8012c00:	f852 4c04 	ldr.w	r4, [r2, #-4]
    tmp22 = tmp11 + tmp12;
 8012c04:	19f1      	adds	r1, r6, r7
    tmp20 = tmp10 + tmp12;
 8012c06:	9004      	str	r0, [sp, #16]
    tmp25 = tmp10 - tmp12;
 8012c08:	ebac 0005 	sub.w	r0, ip, r5
    z3 = (INT32) wsptr[5];
 8012c0c:	f852 5c0c 	ldr.w	r5, [r2, #-12]
    tmp22 = tmp11 + tmp12;
 8012c10:	9106      	str	r1, [sp, #24]
    tmp23 = tmp11 - tmp12;
 8012c12:	1bf1      	subs	r1, r6, r7
    tmp10 = z1 + z3;
 8012c14:	eb09 0705 	add.w	r7, r9, r5
    z2 = (INT32) wsptr[3];
 8012c18:	f852 bc14 	ldr.w	fp, [r2, #-20]
    tmp23 = tmp11 - tmp12;
 8012c1c:	9107      	str	r1, [sp, #28]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8012c1e:	f642 11cf 	movw	r1, #10703	; 0x29cf
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8012c22:	eb04 0c07 	add.w	ip, r4, r7
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8012c26:	eb05 0a04 	add.w	sl, r5, r4
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8012c2a:	fb01 f60b 	mul.w	r6, r1, fp
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8012c2e:	4950      	ldr	r1, [pc, #320]	; (8012d70 <jpeg_idct_12x6+0x2b4>)
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8012c30:	fb0e fc0c 	mul.w	ip, lr, ip
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8012c34:	f640 0e5b 	movw	lr, #2139	; 0x85b
    tmp25 = tmp10 - tmp12;
 8012c38:	9005      	str	r0, [sp, #20]
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8012c3a:	fb0e ce07 	mla	lr, lr, r7, ip
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8012c3e:	484d      	ldr	r0, [pc, #308]	; (8012d74 <jpeg_idct_12x6+0x2b8>)
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8012c40:	fb01 f10b 	mul.w	r1, r1, fp
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8012c44:	eb06 070e 	add.w	r7, r6, lr
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8012c48:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8012c4c:	f6a0 50db 	subw	r0, r0, #3547	; 0xddb
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8012c50:	fb08 7809 	mla	r8, r8, r9, r7
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8012c54:	eb01 070a 	add.w	r7, r1, sl
 8012c58:	fb00 7705 	mla	r7, r0, r5, r7
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8012c5c:	4846      	ldr	r0, [pc, #280]	; (8012d78 <jpeg_idct_12x6+0x2bc>)
    z2 -= z3;
 8012c5e:	ebab 0505 	sub.w	r5, fp, r5
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8012c62:	f241 1b51 	movw	fp, #4433	; 0x1151
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8012c66:	4477      	add	r7, lr
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8012c68:	fb00 1109 	mla	r1, r0, r9, r1
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8012c6c:	ebac 0e06 	sub.w	lr, ip, r6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8012c70:	4842      	ldr	r0, [pc, #264]	; (8012d7c <jpeg_idct_12x6+0x2c0>)
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8012c72:	f243 26c6 	movw	r6, #12998	; 0x32c6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8012c76:	fb00 1104 	mla	r1, r0, r4, r1
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8012c7a:	f200 4053 	addw	r0, r0, #1107	; 0x453
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8012c7e:	fb06 e604 	mla	r6, r6, r4, lr
    z1 -= z4;
 8012c82:	eba9 0404 	sub.w	r4, r9, r4
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8012c86:	4461      	add	r1, ip
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8012c88:	f641 097e 	movw	r9, #6270	; 0x187e
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8012c8c:	eb04 0c05 	add.w	ip, r4, r5
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8012c90:	4456      	add	r6, sl
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8012c92:	fb0b fc0c 	mul.w	ip, fp, ip
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8012c96:	fb00 c505 	mla	r5, r0, r5, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012c9a:	9804      	ldr	r0, [sp, #16]
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8012c9c:	fb09 c404 	mla	r4, r9, r4, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012ca0:	eb00 0e08 	add.w	lr, r0, r8
 8012ca4:	9800      	ldr	r0, [sp, #0]
			     & RANGE_MASK];
 8012ca6:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012caa:	f810 c00e 	ldrb.w	ip, [r0, lr]
 8012cae:	9808      	ldr	r0, [sp, #32]
 8012cb0:	4686      	mov	lr, r0
 8012cb2:	9844      	ldr	r0, [sp, #272]	; 0x110
 8012cb4:	f80e c000 	strb.w	ip, [lr, r0]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8012cb8:	9804      	ldr	r0, [sp, #16]
 8012cba:	eba0 0808 	sub.w	r8, r0, r8
 8012cbe:	9800      	ldr	r0, [sp, #0]
			     & RANGE_MASK];
 8012cc0:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8012cc4:	f810 c008 	ldrb.w	ip, [r0, r8]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012cc8:	9802      	ldr	r0, [sp, #8]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8012cca:	f883 c00b 	strb.w	ip, [r3, #11]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012cce:	eb00 0c04 	add.w	ip, r0, r4
 8012cd2:	9800      	ldr	r0, [sp, #0]
			     & RANGE_MASK];
 8012cd4:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012cd8:	f810 c00c 	ldrb.w	ip, [r0, ip]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012cdc:	9802      	ldr	r0, [sp, #8]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012cde:	f883 c001 	strb.w	ip, [r3, #1]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012ce2:	1b04      	subs	r4, r0, r4
 8012ce4:	9800      	ldr	r0, [sp, #0]
			     & RANGE_MASK];
 8012ce6:	f3c4 4989 	ubfx	r9, r4, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012cea:	f810 4009 	ldrb.w	r4, [r0, r9]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012cee:	9806      	ldr	r0, [sp, #24]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012cf0:	729c      	strb	r4, [r3, #10]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012cf2:	19c4      	adds	r4, r0, r7
 8012cf4:	9800      	ldr	r0, [sp, #0]
			     & RANGE_MASK];
 8012cf6:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012cfa:	5d04      	ldrb	r4, [r0, r4]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012cfc:	9806      	ldr	r0, [sp, #24]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012cfe:	709c      	strb	r4, [r3, #2]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012d00:	1bc7      	subs	r7, r0, r7
 8012d02:	9800      	ldr	r0, [sp, #0]
			     & RANGE_MASK];
 8012d04:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012d08:	5dc4      	ldrb	r4, [r0, r7]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012d0a:	9807      	ldr	r0, [sp, #28]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012d0c:	725c      	strb	r4, [r3, #9]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012d0e:	1984      	adds	r4, r0, r6
 8012d10:	9800      	ldr	r0, [sp, #0]
			     & RANGE_MASK];
 8012d12:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012d16:	5d04      	ldrb	r4, [r0, r4]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012d18:	9807      	ldr	r0, [sp, #28]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012d1a:	70dc      	strb	r4, [r3, #3]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012d1c:	1b86      	subs	r6, r0, r6
 8012d1e:	9800      	ldr	r0, [sp, #0]
			     & RANGE_MASK];
 8012d20:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012d24:	5d84      	ldrb	r4, [r0, r6]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012d26:	9803      	ldr	r0, [sp, #12]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012d28:	721c      	strb	r4, [r3, #8]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012d2a:	1944      	adds	r4, r0, r5
 8012d2c:	9800      	ldr	r0, [sp, #0]
			     & RANGE_MASK];
 8012d2e:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012d32:	5d04      	ldrb	r4, [r0, r4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012d34:	9803      	ldr	r0, [sp, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012d36:	711c      	strb	r4, [r3, #4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012d38:	1b45      	subs	r5, r0, r5
 8012d3a:	9800      	ldr	r0, [sp, #0]
			     & RANGE_MASK];
 8012d3c:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012d40:	5d44      	ldrb	r4, [r0, r5]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8012d42:	9805      	ldr	r0, [sp, #20]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012d44:	71dc      	strb	r4, [r3, #7]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8012d46:	1844      	adds	r4, r0, r1
 8012d48:	9800      	ldr	r0, [sp, #0]
			     & RANGE_MASK];
 8012d4a:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8012d4e:	5d04      	ldrb	r4, [r0, r4]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8012d50:	9805      	ldr	r0, [sp, #20]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8012d52:	715c      	strb	r4, [r3, #5]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8012d54:	1a41      	subs	r1, r0, r1
 8012d56:	9800      	ldr	r0, [sp, #0]
			     & RANGE_MASK];
 8012d58:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8012d5c:	5c41      	ldrb	r1, [r0, r1]
 8012d5e:	7199      	strb	r1, [r3, #6]
  for (ctr = 0; ctr < 6; ctr++) {
 8012d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d62:	9901      	ldr	r1, [sp, #4]
 8012d64:	428b      	cmp	r3, r1
 8012d66:	f47f af1b 	bne.w	8012ba0 <jpeg_idct_12x6+0xe4>
  }
}
 8012d6a:	b03b      	add	sp, #236	; 0xec
 8012d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d70:	ffffeeaf 	.word	0xffffeeaf
 8012d74:	ffffde8b 	.word	0xffffde8b
 8012d78:	ffffea5c 	.word	0xffffea5c
 8012d7c:	ffffc08c 	.word	0xffffc08c

08012d80 <jpeg_idct_10x5>:

GLOBAL(void)
jpeg_idct_10x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012d84:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8012d88:	b0af      	sub	sp, #188	; 0xbc
 8012d8a:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8012d8c:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012d8e:	3080      	adds	r0, #128	; 0x80
   * 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012d90:	320e      	adds	r2, #14
 8012d92:	3d04      	subs	r5, #4
  wsptr = workspace;
 8012d94:	af06      	add	r7, sp, #24
    tmp12 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8012d96:	f641 1e4c 	movw	lr, #6476	; 0x194c
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8012d9a:	f44f 6c35 	mov.w	ip, #2896	; 0xb50
{
 8012d9e:	9302      	str	r3, [sp, #8]
 8012da0:	9201      	str	r2, [sp, #4]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012da2:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012da6:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012da8:	f855 2f04 	ldr.w	r2, [r5, #4]!
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012dac:	f9b6 4020 	ldrsh.w	r4, [r6, #32]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012db0:	434a      	muls	r2, r1
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012db2:	6c29      	ldr	r1, [r5, #64]	; 0x40
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012db4:	f9b6 9040 	ldrsh.w	r9, [r6, #64]	; 0x40
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012db8:	4361      	muls	r1, r4
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012dba:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
    tmp11 = z3 - z1;
    tmp12 -= z2 << 2;

    /* Odd part */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012dbe:	6a2b      	ldr	r3, [r5, #32]
    tmp12 <<= CONST_BITS;
 8012dc0:	0352      	lsls	r2, r2, #13
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012dc2:	fb04 f909 	mul.w	r9, r4, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012dc6:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
 8012dca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012dce:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8012dd2:	eb01 0409 	add.w	r4, r1, r9
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8012dd6:	eba1 0109 	sub.w	r1, r1, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012dda:	fb03 fa0a 	mul.w	sl, r3, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012dde:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8012de0:	fb0c f101 	mul.w	r1, ip, r1
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8012de4:	fb0e f804 	mul.w	r8, lr, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012de8:	fb03 fb0b 	mul.w	fp, r3, fp
    z3 = tmp12 + z2;
 8012dec:	1854      	adds	r4, r2, r1

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8012dee:	f641 239a 	movw	r3, #6810	; 0x1a9a
    tmp12 -= z2 << 2;
 8012df2:	eba2 0281 	sub.w	r2, r2, r1, lsl #2
    tmp10 = z3 + z1;
 8012df6:	eb08 0904 	add.w	r9, r8, r4
    tmp11 = z3 - z1;
 8012dfa:	eba4 0408 	sub.w	r4, r4, r8
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8012dfe:	eb0a 080b 	add.w	r8, sl, fp

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8012e02:	12d2      	asrs	r2, r2, #11
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8012e04:	fb03 f808 	mul.w	r8, r3, r8
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 8012e08:	f241 0371 	movw	r3, #4209	; 0x1071
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8012e0c:	63fa      	str	r2, [r7, #60]	; 0x3c
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 8012e0e:	fb03 8a0a 	mla	sl, r3, sl, r8
    tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 8012e12:	4b71      	ldr	r3, [pc, #452]	; (8012fd8 <jpeg_idct_10x5+0x258>)
 8012e14:	fb03 880b 	mla	r8, r3, fp, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 8012e18:	eb09 0b0a 	add.w	fp, r9, sl
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012e1c:	9b01      	ldr	r3, [sp, #4]
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 8012e1e:	eba9 0a0a 	sub.w	sl, r9, sl
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 8012e22:	eb04 0908 	add.w	r9, r4, r8
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 8012e26:	eba4 0808 	sub.w	r8, r4, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 8012e2a:	ea4f 2beb 	mov.w	fp, fp, asr #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012e2e:	42b3      	cmp	r3, r6
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 8012e30:	ea4f 2aea 	mov.w	sl, sl, asr #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 8012e34:	ea4f 29e9 	mov.w	r9, r9, asr #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 8012e38:	f847 bc04 	str.w	fp, [r7, #-4]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 8012e3c:	ea4f 24e8 	mov.w	r4, r8, asr #11
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 8012e40:	f8c7 a07c 	str.w	sl, [r7, #124]	; 0x7c
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 8012e44:	f8c7 901c 	str.w	r9, [r7, #28]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 8012e48:	65fc      	str	r4, [r7, #92]	; 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012e4a:	d1aa      	bne.n	8012da2 <jpeg_idct_10x5+0x22>
 8012e4c:	9b02      	ldr	r3, [sp, #8]
  }

  /* Pass 2: process 5 rows from work array, store into output array.
   * 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
   */
  wsptr = workspace;
 8012e4e:	aa06      	add	r2, sp, #24
 8012e50:	3b04      	subs	r3, #4
 8012e52:	9301      	str	r3, [sp, #4]
 8012e54:	9b02      	ldr	r3, [sp, #8]
 8012e56:	3310      	adds	r3, #16
 8012e58:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < 5; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8012e5a:	9b01      	ldr	r3, [sp, #4]
    /* Add fudge factor here for final descale. */
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    z3 <<= CONST_BITS;
    z4 = (INT32) wsptr[4];
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8012e5c:	f640 56fc 	movw	r6, #3580	; 0xdfc
    z4 = (INT32) wsptr[4];
 8012e60:	6915      	ldr	r5, [r2, #16]
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8012e62:	f242 449d 	movw	r4, #9373	; 0x249d
    outptr = output_buf[ctr] + output_col;
 8012e66:	4619      	mov	r1, r3
    tmp21 = tmp11 + tmp13;
    tmp23 = tmp11 - tmp13;

    /* Odd part */

    z1 = (INT32) wsptr[1];
 8012e68:	f8d2 c004 	ldr.w	ip, [r2, #4]
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8012e6c:	436c      	muls	r4, r5
			    & RANGE_MASK];
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8012e6e:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 8012e70:	f851 3f04 	ldr.w	r3, [r1, #4]!
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8012e74:	fb06 f805 	mul.w	r8, r6, r5
    z2 = (INT32) wsptr[2];
 8012e78:	f852 6c18 	ldr.w	r6, [r2, #-24]
    outptr = output_buf[ctr] + output_col;
 8012e7c:	9304      	str	r3, [sp, #16]
 8012e7e:	9b04      	ldr	r3, [sp, #16]
 8012e80:	9101      	str	r1, [sp, #4]
 8012e82:	9938      	ldr	r1, [sp, #224]	; 0xe0
    z3 = (INT32) wsptr[6];
 8012e84:	f852 5c08 	ldr.w	r5, [r2, #-8]
    outptr = output_buf[ctr] + output_col;
 8012e88:	1859      	adds	r1, r3, r1
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012e8a:	f852 3c20 	ldr.w	r3, [r2, #-32]
 8012e8e:	3310      	adds	r3, #16
    tmp11 = z3 - z2;
 8012e90:	ebc8 3943 	rsb	r9, r8, r3, lsl #13
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8012e94:	eba4 0808 	sub.w	r8, r4, r8
    tmp10 = z3 + z1;
 8012e98:	eb04 3b43 	add.w	fp, r4, r3, lsl #13
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8012e9c:	1974      	adds	r4, r6, r5
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8012e9e:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8012ea2:	ebc8 3343 	rsb	r3, r8, r3, lsl #13
 8012ea6:	9302      	str	r3, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8012ea8:	f641 239a 	movw	r3, #6810	; 0x1a9a
 8012eac:	4363      	muls	r3, r4
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8012eae:	f241 0471 	movw	r4, #4209	; 0x1071
 8012eb2:	fb04 3a06 	mla	sl, r4, r6, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 8012eb6:	4c48      	ldr	r4, [pc, #288]	; (8012fd8 <jpeg_idct_10x5+0x258>)
 8012eb8:	fb04 3405 	mla	r4, r4, r5, r3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8012ebc:	f641 656f 	movw	r5, #7791	; 0x1e6f
    tmp20 = tmp10 + tmp12;
 8012ec0:	eb0b 070a 	add.w	r7, fp, sl
    tmp24 = tmp10 - tmp12;
 8012ec4:	ebab 0b0a 	sub.w	fp, fp, sl
    tmp23 = tmp11 - tmp13;
 8012ec8:	eba9 0304 	sub.w	r3, r9, r4
    tmp21 = tmp11 + tmp13;
 8012ecc:	eb09 0604 	add.w	r6, r9, r4
    z2 = (INT32) wsptr[3];
 8012ed0:	f852 4c14 	ldr.w	r4, [r2, #-20]
    tmp23 = tmp11 - tmp13;
 8012ed4:	9303      	str	r3, [sp, #12]
    z4 = (INT32) wsptr[7];
 8012ed6:	f852 3c04 	ldr.w	r3, [r2, #-4]
    tmp11 = z2 + z4;
 8012eda:	eb04 0903 	add.w	r9, r4, r3
    tmp13 = z2 - z4;
 8012ede:	1ae3      	subs	r3, r4, r3
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8012ee0:	f640 14e3 	movw	r4, #2531	; 0x9e3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8012ee4:	fb05 f809 	mul.w	r8, r5, r9
    z4 = z3 + tmp12;
 8012ee8:	f852 5c0c 	ldr.w	r5, [r2, #-12]
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8012eec:	435c      	muls	r4, r3
    z4 = z3 + tmp12;
 8012eee:	eb04 3a45 	add.w	sl, r4, r5, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8012ef2:	f642 45b3 	movw	r5, #11443	; 0x2cb3
 8012ef6:	fb05 8e0c 	mla	lr, r5, ip, r8
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8012efa:	f240 7514 	movw	r5, #1812	; 0x714
 8012efe:	fb05 f50c 	mul.w	r5, r5, ip
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8012f02:	44d6      	add	lr, sl
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8012f04:	eba5 0508 	sub.w	r5, r5, r8
 8012f08:	44aa      	add	sl, r5
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8012f0a:	f241 25cf 	movw	r5, #4815	; 0x12cf
 8012f0e:	fb05 f909 	mul.w	r9, r5, r9
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8012f12:	f852 5c0c 	ldr.w	r5, [r2, #-12]
 8012f16:	ebc4 3445 	rsb	r4, r4, r5, lsl #13
 8012f1a:	eba4 3403 	sub.w	r4, r4, r3, lsl #12
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8012f1e:	ebac 0303 	sub.w	r3, ip, r3
 8012f22:	035b      	lsls	r3, r3, #13
 8012f24:	eba3 3845 	sub.w	r8, r3, r5, lsl #13
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8012f28:	f241 438c 	movw	r3, #5260	; 0x148c
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8012f2c:	f642 0553 	movw	r5, #10323	; 0x2853
 8012f30:	fb05 f50c 	mul.w	r5, r5, ip
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8012f34:	fb03 fc0c 	mul.w	ip, r3, ip
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012f38:	eb07 030e 	add.w	r3, r7, lr
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8012f3c:	eba5 0509 	sub.w	r5, r5, r9
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8012f40:	eba7 070e 	sub.w	r7, r7, lr
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8012f44:	ebac 0909 	sub.w	r9, ip, r9
			    & RANGE_MASK];
 8012f48:	f3c3 4389 	ubfx	r3, r3, #18, #10
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8012f4c:	1b2d      	subs	r5, r5, r4
			    & RANGE_MASK];
 8012f4e:	f3c7 4789 	ubfx	r7, r7, #18, #10
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8012f52:	444c      	add	r4, r9
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012f54:	f810 9003 	ldrb.w	r9, [r0, r3]
 8012f58:	9b04      	ldr	r3, [sp, #16]
 8012f5a:	469c      	mov	ip, r3
 8012f5c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8012f5e:	f80c 9003 	strb.w	r9, [ip, r3]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8012f62:	5dc3      	ldrb	r3, [r0, r7]
 8012f64:	724b      	strb	r3, [r1, #9]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012f66:	1973      	adds	r3, r6, r5
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012f68:	1b76      	subs	r6, r6, r5
			    & RANGE_MASK];
 8012f6a:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 8012f6e:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012f72:	5cc3      	ldrb	r3, [r0, r3]
 8012f74:	704b      	strb	r3, [r1, #1]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012f76:	5d83      	ldrb	r3, [r0, r6]
 8012f78:	720b      	strb	r3, [r1, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012f7a:	9b02      	ldr	r3, [sp, #8]
 8012f7c:	4443      	add	r3, r8
			    & RANGE_MASK];
 8012f7e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012f82:	5cc3      	ldrb	r3, [r0, r3]
 8012f84:	708b      	strb	r3, [r1, #2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012f86:	9b02      	ldr	r3, [sp, #8]
 8012f88:	eba3 0808 	sub.w	r8, r3, r8
			    & RANGE_MASK];
 8012f8c:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012f90:	f810 3008 	ldrb.w	r3, [r0, r8]
 8012f94:	71cb      	strb	r3, [r1, #7]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012f96:	9b03      	ldr	r3, [sp, #12]
 8012f98:	4423      	add	r3, r4
			    & RANGE_MASK];
 8012f9a:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012f9e:	5cc3      	ldrb	r3, [r0, r3]
 8012fa0:	70cb      	strb	r3, [r1, #3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012fa2:	9b03      	ldr	r3, [sp, #12]
 8012fa4:	1b1c      	subs	r4, r3, r4
			    & RANGE_MASK];
 8012fa6:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012faa:	5d03      	ldrb	r3, [r0, r4]
 8012fac:	718b      	strb	r3, [r1, #6]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012fae:	eb0b 030a 	add.w	r3, fp, sl
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012fb2:	ebab 0a0a 	sub.w	sl, fp, sl
			    & RANGE_MASK];
 8012fb6:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 8012fba:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012fbe:	5cc3      	ldrb	r3, [r0, r3]
 8012fc0:	710b      	strb	r3, [r1, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012fc2:	f810 300a 	ldrb.w	r3, [r0, sl]
 8012fc6:	714b      	strb	r3, [r1, #5]
  for (ctr = 0; ctr < 5; ctr++) {
 8012fc8:	9b05      	ldr	r3, [sp, #20]
 8012fca:	9901      	ldr	r1, [sp, #4]
 8012fcc:	428b      	cmp	r3, r1
 8012fce:	f47f af44 	bne.w	8012e5a <jpeg_idct_10x5+0xda>
  }
}
 8012fd2:	b02f      	add	sp, #188	; 0xbc
 8012fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fd8:	ffffba5c 	.word	0xffffba5c

08012fdc <jpeg_idct_8x4>:

GLOBAL(void)
jpeg_idct_8x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fe0:	b0a5      	sub	sp, #148	; 0x94
 8012fe2:	6d4e      	ldr	r6, [r1, #84]	; 0x54
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012fe4:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 8012fe8:	1e97      	subs	r7, r2, #2
  /* Pass 1: process columns from input, store into work array.
   * 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8012fea:	ac04      	add	r4, sp, #16
 8012fec:	320e      	adds	r2, #14
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012fee:	f100 0c80 	add.w	ip, r0, #128	; 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012ff2:	3e04      	subs	r6, #4
 8012ff4:	4621      	mov	r1, r4
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 8012ff6:	f241 1851 	movw	r8, #4433	; 0x1151
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8012ffa:	f641 0e7e 	movw	lr, #6270	; 0x187e
 8012ffe:	9200      	str	r2, [sp, #0]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013000:	f937 0f02 	ldrsh.w	r0, [r7, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013004:	3404      	adds	r4, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013006:	f856 5f04 	ldr.w	r5, [r6, #4]!
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801300a:	f9b7 a010 	ldrsh.w	sl, [r7, #16]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801300e:	4345      	muls	r5, r0
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013010:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8013012:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013016:	f9b7 b030 	ldrsh.w	fp, [r7, #48]	; 0x30
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801301a:	4350      	muls	r0, r2
		       CONST_BITS-PASS1_BITS);
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 801301c:	4a65      	ldr	r2, [pc, #404]	; (80131b4 <jpeg_idct_8x4+0x1d8>)
    tmp10 = (tmp0 + tmp2) << PASS1_BITS;
 801301e:	eb05 0900 	add.w	r9, r5, r0
    tmp12 = (tmp0 - tmp2) << PASS1_BITS;
 8013022:	1a2d      	subs	r5, r5, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013024:	6a30      	ldr	r0, [r6, #32]
 8013026:	fb00 fa0a 	mul.w	sl, r0, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801302a:	6e30      	ldr	r0, [r6, #96]	; 0x60
 801302c:	fb00 f00b 	mul.w	r0, r0, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 8013030:	eb0a 0b00 	add.w	fp, sl, r0
 8013034:	fb08 fb0b 	mul.w	fp, r8, fp
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8013038:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 801303c:	fb0e ba0a 	mla	sl, lr, sl, fp
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8013040:	fb02 bb00 	mla	fp, r2, r0, fp
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013044:	9a00      	ldr	r2, [sp, #0]
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8013046:	ea4f 2aea 	mov.w	sl, sl, asr #11
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 801304a:	ea4f 2beb 	mov.w	fp, fp, asr #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801304e:	42ba      	cmp	r2, r7
		       CONST_BITS-PASS1_BITS);

    /* Final output stage */

    wsptr[8*0] = (int) (tmp10 + tmp0);
 8013050:	eb0a 0089 	add.w	r0, sl, r9, lsl #2
 8013054:	f844 0c04 	str.w	r0, [r4, #-4]
    wsptr[8*3] = (int) (tmp10 - tmp0);
 8013058:	ebca 0089 	rsb	r0, sl, r9, lsl #2
 801305c:	65e0      	str	r0, [r4, #92]	; 0x5c
    wsptr[8*1] = (int) (tmp12 + tmp2);
 801305e:	eb0b 0085 	add.w	r0, fp, r5, lsl #2
    wsptr[8*2] = (int) (tmp12 - tmp2);
 8013062:	ebcb 0585 	rsb	r5, fp, r5, lsl #2
    wsptr[8*1] = (int) (tmp12 + tmp2);
 8013066:	61e0      	str	r0, [r4, #28]
    wsptr[8*2] = (int) (tmp12 - tmp2);
 8013068:	63e5      	str	r5, [r4, #60]	; 0x3c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801306a:	d1c9      	bne.n	8013000 <jpeg_idct_8x4+0x24>
 801306c:	f1a3 0804 	sub.w	r8, r3, #4
 8013070:	330c      	adds	r3, #12
 8013072:	9303      	str	r3, [sp, #12]
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
  for (ctr = 0; ctr < 4; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8013074:	f858 3f04 	ldr.w	r3, [r8, #4]!
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
 8013078:	3120      	adds	r1, #32
    outptr = output_buf[ctr] + output_col;
 801307a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    z2 = (INT32) wsptr[2];
 801307c:	f851 4c18 	ldr.w	r4, [r1, #-24]
    outptr = output_buf[ctr] + output_col;
 8013080:	1898      	adds	r0, r3, r2
 8013082:	9302      	str	r3, [sp, #8]
    z3 = (INT32) wsptr[6];
 8013084:	f851 3c08 	ldr.w	r3, [r1, #-8]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8013088:	f241 1251 	movw	r2, #4433	; 0x1151
    tmp1 = (INT32) wsptr[5];
 801308c:	f851 ec0c 	ldr.w	lr, [r1, #-12]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8013090:	eb04 0b03 	add.w	fp, r4, r3
    tmp3 = (INT32) wsptr[1];
 8013094:	f851 9c1c 	ldr.w	r9, [r1, #-28]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8013098:	fb02 fb0b 	mul.w	fp, r2, fp
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 801309c:	f641 027e 	movw	r2, #6270	; 0x187e
    z3 = tmp1 + tmp3;
 80130a0:	eb0e 0709 	add.w	r7, lr, r9
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 80130a4:	fb02 b404 	mla	r4, r2, r4, fp
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 80130a8:	4a42      	ldr	r2, [pc, #264]	; (80131b4 <jpeg_idct_8x4+0x1d8>)
 80130aa:	fb02 bb03 	mla	fp, r2, r3, fp
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80130ae:	f851 2c20 	ldr.w	r2, [r1, #-32]
    z3 = (INT32) wsptr[4];
 80130b2:	f851 3c10 	ldr.w	r3, [r1, #-16]
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80130b6:	3210      	adds	r2, #16
    tmp0 = (z2 + z3) << CONST_BITS;
 80130b8:	18d5      	adds	r5, r2, r3
    tmp1 = (z2 - z3) << CONST_BITS;
 80130ba:	1ad2      	subs	r2, r2, r3
    tmp13 = tmp0 - tmp2;
 80130bc:	ebc4 3345 	rsb	r3, r4, r5, lsl #13
    tmp10 = tmp0 + tmp2;
 80130c0:	eb04 3645 	add.w	r6, r4, r5, lsl #13
    tmp0 = (INT32) wsptr[7];
 80130c4:	f851 4c04 	ldr.w	r4, [r1, #-4]
    tmp13 = tmp0 - tmp2;
 80130c8:	9300      	str	r3, [sp, #0]
    tmp11 = tmp1 + tmp3;
 80130ca:	eb0b 3342 	add.w	r3, fp, r2, lsl #13
    tmp12 = tmp1 - tmp3;
 80130ce:	ebcb 3b42 	rsb	fp, fp, r2, lsl #13
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 80130d2:	f242 55a1 	movw	r5, #9633	; 0x25a1
    tmp11 = tmp1 + tmp3;
 80130d6:	9301      	str	r3, [sp, #4]
    z2 = tmp0 + tmp2;
 80130d8:	f851 3c14 	ldr.w	r3, [r1, #-20]
 80130dc:	18e2      	adds	r2, r4, r3
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 80130de:	19d3      	adds	r3, r2, r7
 80130e0:	436b      	muls	r3, r5
    z2 += z1;
 80130e2:	4d35      	ldr	r5, [pc, #212]	; (80131b8 <jpeg_idct_8x4+0x1dc>)
 80130e4:	fb05 3202 	mla	r2, r5, r2, r3
    z3 += z1;
 80130e8:	4d34      	ldr	r5, [pc, #208]	; (80131bc <jpeg_idct_8x4+0x1e0>)
 80130ea:	fb05 3307 	mla	r3, r5, r7, r3
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 80130ee:	eb04 0709 	add.w	r7, r4, r9
 80130f2:	4d33      	ldr	r5, [pc, #204]	; (80131c0 <jpeg_idct_8x4+0x1e4>)
 80130f4:	436f      	muls	r7, r5
    tmp0 += z1 + z2;
 80130f6:	f640 158e 	movw	r5, #2446	; 0x98e
 80130fa:	eb02 0a07 	add.w	sl, r2, r7
    tmp3 += z1 + z3;
 80130fe:	441f      	add	r7, r3
    tmp0 += z1 + z2;
 8013100:	fb05 a404 	mla	r4, r5, r4, sl
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013104:	f851 5c14 	ldr.w	r5, [r1, #-20]
    tmp3 += z1 + z3;
 8013108:	f243 0a0b 	movw	sl, #12299	; 0x300b
 801310c:	fb0a 7709 	mla	r7, sl, r9, r7
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013110:	eb0e 0905 	add.w	r9, lr, r5
 8013114:	4d2b      	ldr	r5, [pc, #172]	; (80131c4 <jpeg_idct_8x4+0x1e8>)
    tmp1 += z1 + z3;
 8013116:	f244 1ab3 	movw	sl, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801311a:	fb05 f909 	mul.w	r9, r5, r9
    tmp2 += z1 + z2;
 801311e:	f851 5c14 	ldr.w	r5, [r1, #-20]
    tmp1 += z1 + z3;
 8013122:	444b      	add	r3, r9
    tmp2 += z1 + z2;
 8013124:	444a      	add	r2, r9
 8013126:	f246 2954 	movw	r9, #25172	; 0x6254
    tmp1 += z1 + z3;
 801312a:	fb0a 330e 	mla	r3, sl, lr, r3
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801312e:	eb06 0e07 	add.w	lr, r6, r7
    tmp2 += z1 + z2;
 8013132:	fb09 2205 	mla	r2, r9, r5, r2
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8013136:	1bf7      	subs	r7, r6, r7
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013138:	9d02      	ldr	r5, [sp, #8]
			    & RANGE_MASK];
 801313a:	f3ce 4e89 	ubfx	lr, lr, #18, #10
			    & RANGE_MASK];
 801313e:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013142:	f81c e00e 	ldrb.w	lr, [ip, lr]
 8013146:	46a9      	mov	r9, r5
 8013148:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 801314a:	f809 e005 	strb.w	lr, [r9, r5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 801314e:	9d01      	ldr	r5, [sp, #4]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8013150:	f81c 6007 	ldrb.w	r6, [ip, r7]
 8013154:	71c6      	strb	r6, [r0, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8013156:	18ae      	adds	r6, r5, r2
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8013158:	1aaa      	subs	r2, r5, r2
			    & RANGE_MASK];
 801315a:	f3c6 4689 	ubfx	r6, r6, #18, #10
			    & RANGE_MASK];
 801315e:	f3c2 4989 	ubfx	r9, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8013162:	f81c 6006 	ldrb.w	r6, [ip, r6]
 8013166:	7046      	strb	r6, [r0, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8013168:	f81c 2009 	ldrb.w	r2, [ip, r9]
 801316c:	7182      	strb	r2, [r0, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 801316e:	eb0b 0203 	add.w	r2, fp, r3
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8013172:	ebab 0303 	sub.w	r3, fp, r3
			    & RANGE_MASK];
 8013176:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 801317a:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 801317e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8013182:	7082      	strb	r2, [r0, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8013184:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8013188:	7143      	strb	r3, [r0, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 801318a:	9b00      	ldr	r3, [sp, #0]
 801318c:	4423      	add	r3, r4
			    & RANGE_MASK];
 801318e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8013192:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8013196:	70c3      	strb	r3, [r0, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8013198:	9b00      	ldr	r3, [sp, #0]
 801319a:	1b1c      	subs	r4, r3, r4
			    & RANGE_MASK];
 801319c:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 80131a0:	f81c 3004 	ldrb.w	r3, [ip, r4]
 80131a4:	7103      	strb	r3, [r0, #4]
  for (ctr = 0; ctr < 4; ctr++) {
 80131a6:	9b03      	ldr	r3, [sp, #12]
 80131a8:	4543      	cmp	r3, r8
 80131aa:	f47f af63 	bne.w	8013074 <jpeg_idct_8x4+0x98>
  }
}
 80131ae:	b025      	add	sp, #148	; 0x94
 80131b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131b4:	ffffc4df 	.word	0xffffc4df
 80131b8:	ffffc13b 	.word	0xffffc13b
 80131bc:	fffff384 	.word	0xfffff384
 80131c0:	ffffe333 	.word	0xffffe333
 80131c4:	ffffadfd 	.word	0xffffadfd

080131c8 <jpeg_idct_6x3>:

GLOBAL(void)
jpeg_idct_6x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80131c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131cc:	b095      	sub	sp, #84	; 0x54
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80131ce:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 80131d2:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80131d4:	f1a2 0e02 	sub.w	lr, r2, #2
  /* Pass 1: process columns from input, store into work array.
   * 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 80131d8:	ad02      	add	r5, sp, #8
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80131da:	3080      	adds	r0, #128	; 0x80
 80131dc:	f102 040a 	add.w	r4, r2, #10
 80131e0:	f1a1 0c04 	sub.w	ip, r1, #4
 80131e4:	462a      	mov	r2, r5
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 80131e6:	f241 69a1 	movw	r9, #5793	; 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 80131ea:	f242 7831 	movw	r8, #10033	; 0x2731
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80131ee:	9001      	str	r0, [sp, #4]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80131f0:	f93e 6f02 	ldrsh.w	r6, [lr, #2]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80131f4:	3504      	adds	r5, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80131f6:	f85c 1f04 	ldr.w	r1, [ip, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80131fa:	f9be 7020 	ldrsh.w	r7, [lr, #32]
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80131fe:	4574      	cmp	r4, lr
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013200:	fb01 f106 	mul.w	r1, r1, r6
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013204:	f8dc 6040 	ldr.w	r6, [ip, #64]	; 0x40
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013208:	f9be a010 	ldrsh.w	sl, [lr, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801320c:	fb06 f607 	mul.w	r6, r6, r7
    tmp0 <<= CONST_BITS;
 8013210:	ea4f 3141 	mov.w	r1, r1, lsl #13
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013214:	f8dc 0020 	ldr.w	r0, [ip, #32]
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8013218:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 801321c:	fb09 f606 	mul.w	r6, r9, r6
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013220:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp10 = tmp0 + tmp12;
 8013224:	eb01 0706 	add.w	r7, r1, r6
    tmp2 = tmp0 - tmp12 - tmp12;
 8013228:	eba1 0146 	sub.w	r1, r1, r6, lsl #1
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 801322c:	fb08 fa0a 	mul.w	sl, r8, sl

    /* Final output stage */

    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[6*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8013230:	ea4f 21e1 	mov.w	r1, r1, asr #11
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8013234:	eb07 0b0a 	add.w	fp, r7, sl
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8013238:	eba7 070a 	sub.w	r7, r7, sl
    wsptr[6*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 801323c:	6169      	str	r1, [r5, #20]
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801323e:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8013242:	ea4f 27e7 	mov.w	r7, r7, asr #11
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8013246:	f845 bc04 	str.w	fp, [r5, #-4]
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 801324a:	62ef      	str	r7, [r5, #44]	; 0x2c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 801324c:	d1d0      	bne.n	80131f0 <jpeg_idct_6x3+0x28>
 801324e:	f1a3 0e04 	sub.w	lr, r3, #4
 8013252:	f103 0908 	add.w	r9, r3, #8
  /* Pass 2: process 3 rows from work array, store into output array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  wsptr = workspace;
  for (ctr = 0; ctr < 3; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8013256:	f85e af04 	ldr.w	sl, [lr, #4]!

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[4];
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 801325a:	f241 60a1 	movw	r0, #5793	; 0x16a1
    outptr = output_buf[ctr] + output_col;
 801325e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 8013260:	3218      	adds	r2, #24
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8013262:	f852 1c08 	ldr.w	r1, [r2, #-8]
  for (ctr = 0; ctr < 3; ctr++) {
 8013266:	45f1      	cmp	r9, lr
    outptr = output_buf[ctr] + output_col;
 8013268:	eb0a 0703 	add.w	r7, sl, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801326c:	f852 3c18 	ldr.w	r3, [r2, #-24]
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8013270:	fb00 f101 	mul.w	r1, r0, r1
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8013274:	f852 4c10 	ldr.w	r4, [r2, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013278:	f103 0310 	add.w	r3, r3, #16
    z3 = (INT32) wsptr[5];
 801327c:	f852 8c04 	ldr.w	r8, [r2, #-4]
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8013280:	f640 30b6 	movw	r0, #2998	; 0xbb6
    tmp1 = tmp0 + tmp10;
 8013284:	eb01 3543 	add.w	r5, r1, r3, lsl #13
    tmp11 = tmp0 - tmp10 - tmp10;
 8013288:	ebc1 3343 	rsb	r3, r1, r3, lsl #13
 801328c:	eba3 0301 	sub.w	r3, r3, r1
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8013290:	f242 7131 	movw	r1, #10033	; 0x2731
 8013294:	fb01 f104 	mul.w	r1, r1, r4
    z1 = (INT32) wsptr[1];
 8013298:	f852 4c14 	ldr.w	r4, [r2, #-20]
    tmp10 = tmp1 + tmp0;
 801329c:	eb05 0601 	add.w	r6, r5, r1
    tmp12 = tmp1 - tmp0;
 80132a0:	eba5 0101 	sub.w	r1, r5, r1
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80132a4:	eb04 0508 	add.w	r5, r4, r8
 80132a8:	fb00 f505 	mul.w	r5, r0, r5
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 80132ac:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 80132b0:	eb04 0c00 	add.w	ip, r4, r0
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 80132b4:	eba4 0400 	sub.w	r4, r4, r0
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 80132b8:	eba8 0b00 	sub.w	fp, r8, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80132bc:	9801      	ldr	r0, [sp, #4]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 80132be:	eb05 3c4c 	add.w	ip, r5, ip, lsl #13
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 80132c2:	eba4 0808 	sub.w	r8, r4, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 80132c6:	eb05 354b 	add.w	r5, r5, fp, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80132ca:	eb06 040c 	add.w	r4, r6, ip
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80132ce:	eba6 060c 	sub.w	r6, r6, ip
			    & RANGE_MASK];
 80132d2:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 80132d6:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80132da:	5d04      	ldrb	r4, [r0, r4]
 80132dc:	981e      	ldr	r0, [sp, #120]	; 0x78
 80132de:	f80a 4000 	strb.w	r4, [sl, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80132e2:	9801      	ldr	r0, [sp, #4]
 80132e4:	5d84      	ldrb	r4, [r0, r6]
 80132e6:	717c      	strb	r4, [r7, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 80132e8:	eb03 3448 	add.w	r4, r3, r8, lsl #13
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80132ec:	eba3 3848 	sub.w	r8, r3, r8, lsl #13
			    & RANGE_MASK];
 80132f0:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 80132f4:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 80132f8:	5d04      	ldrb	r4, [r0, r4]
 80132fa:	707c      	strb	r4, [r7, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80132fc:	f810 3008 	ldrb.w	r3, [r0, r8]
 8013300:	713b      	strb	r3, [r7, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8013302:	eb01 0305 	add.w	r3, r1, r5
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8013306:	eba1 0505 	sub.w	r5, r1, r5
			    & RANGE_MASK];
 801330a:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 801330e:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8013312:	5cc3      	ldrb	r3, [r0, r3]
 8013314:	70bb      	strb	r3, [r7, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8013316:	5d43      	ldrb	r3, [r0, r5]
 8013318:	70fb      	strb	r3, [r7, #3]
  for (ctr = 0; ctr < 3; ctr++) {
 801331a:	d19c      	bne.n	8013256 <jpeg_idct_6x3+0x8e>
  }
}
 801331c:	b015      	add	sp, #84	; 0x54
 801331e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08013324 <jpeg_idct_4x2>:

GLOBAL(void)
jpeg_idct_4x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013328:	b08b      	sub	sp, #44	; 0x2c
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  INT32 * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801332a:	f8d0 514c 	ldr.w	r5, [r0, #332]	; 0x14c
 801332e:	6d4e      	ldr	r6, [r1, #84]	; 0x54
 8013330:	1e97      	subs	r7, r2, #2
 8013332:	f10d 0c08 	add.w	ip, sp, #8
 8013336:	3580      	adds	r5, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8013338:	3e04      	subs	r6, #4
 801333a:	3206      	adds	r2, #6
 801333c:	4660      	mov	r0, ip
{
 801333e:	9301      	str	r3, [sp, #4]
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013340:	f937 4f02 	ldrsh.w	r4, [r7, #2]!
 8013344:	f856 1f04 	ldr.w	r1, [r6, #4]!

    /* Odd part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013348:	f9b7 e010 	ldrsh.w	lr, [r7, #16]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 801334c:	42ba      	cmp	r2, r7
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801334e:	fb01 f104 	mul.w	r1, r1, r4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013352:	6a34      	ldr	r4, [r6, #32]
 8013354:	fb04 f40e 	mul.w	r4, r4, lr

    /* Final output stage */

    wsptr[4*0] = tmp10 + tmp0;
 8013358:	eb01 0e04 	add.w	lr, r1, r4
    wsptr[4*1] = tmp10 - tmp0;
 801335c:	eba1 0104 	sub.w	r1, r1, r4
    wsptr[4*0] = tmp10 + tmp0;
 8013360:	f84c eb04 	str.w	lr, [ip], #4
    wsptr[4*1] = tmp10 - tmp0;
 8013364:	f8cc 100c 	str.w	r1, [ip, #12]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8013368:	d1ea      	bne.n	8013340 <jpeg_idct_4x2+0x1c>
 801336a:	9b01      	ldr	r3, [sp, #4]
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = wsptr[1];
    z3 = wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 801336c:	f241 1a51 	movw	sl, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8013370:	f641 097e 	movw	r9, #6270	; 0x187e
 8013374:	f1a3 0c04 	sub.w	ip, r3, #4
    outptr = output_buf[ctr] + output_col;
 8013378:	46e0      	mov	r8, ip
 801337a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801337c:	f85c ef04 	ldr.w	lr, [ip, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+3)
			    & RANGE_MASK];

    wsptr += 4;		/* advance pointer to next row */
 8013380:	3010      	adds	r0, #16
    tmp0 = wsptr[0] + (ONE << 2);
 8013382:	f850 4c10 	ldr.w	r4, [r0, #-16]
    outptr = output_buf[ctr] + output_col;
 8013386:	eb0e 0602 	add.w	r6, lr, r2
    z3 = wsptr[3];
 801338a:	f850 7c04 	ldr.w	r7, [r0, #-4]
    tmp2 = wsptr[2];
 801338e:	f850 2c08 	ldr.w	r2, [r0, #-8]
    tmp0 = wsptr[0] + (ONE << 2);
 8013392:	3404      	adds	r4, #4
    z2 = wsptr[1];
 8013394:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8013398:	eb04 0b02 	add.w	fp, r4, r2
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 801339c:	1aa4      	subs	r4, r4, r2
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 801339e:	19ca      	adds	r2, r1, r7
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 80133a0:	4b13      	ldr	r3, [pc, #76]	; (80133f0 <jpeg_idct_4x2+0xcc>)
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 80133a2:	fb0a f202 	mul.w	r2, sl, r2
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 80133a6:	fb09 2101 	mla	r1, r9, r1, r2
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 80133aa:	fb03 2207 	mla	r2, r3, r7, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80133ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80133b0:	eb01 374b 	add.w	r7, r1, fp, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80133b4:	ebc1 314b 	rsb	r1, r1, fp, lsl #13
			    & RANGE_MASK];
 80133b8:	f3c7 4709 	ubfx	r7, r7, #16, #10
			    & RANGE_MASK];
 80133bc:	f3c1 4109 	ubfx	r1, r1, #16, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80133c0:	5def      	ldrb	r7, [r5, r7]
 80133c2:	f80e 7003 	strb.w	r7, [lr, r3]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80133c6:	5c69      	ldrb	r1, [r5, r1]
  for (ctr = 0; ctr < 2; ctr++) {
 80133c8:	9b01      	ldr	r3, [sp, #4]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80133ca:	70f1      	strb	r1, [r6, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80133cc:	eb02 3144 	add.w	r1, r2, r4, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80133d0:	ebc2 3244 	rsb	r2, r2, r4, lsl #13
  for (ctr = 0; ctr < 2; ctr++) {
 80133d4:	4543      	cmp	r3, r8
			    & RANGE_MASK];
 80133d6:	f3c1 4109 	ubfx	r1, r1, #16, #10
			    & RANGE_MASK];
 80133da:	f3c2 4209 	ubfx	r2, r2, #16, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80133de:	5c69      	ldrb	r1, [r5, r1]
 80133e0:	7071      	strb	r1, [r6, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80133e2:	5caa      	ldrb	r2, [r5, r2]
 80133e4:	70b2      	strb	r2, [r6, #2]
  for (ctr = 0; ctr < 2; ctr++) {
 80133e6:	d1c7      	bne.n	8013378 <jpeg_idct_4x2+0x54>
  }
}
 80133e8:	b00b      	add	sp, #44	; 0x2c
 80133ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133ee:	bf00      	nop
 80133f0:	ffffc4df 	.word	0xffffc4df

080133f4 <jpeg_idct_2x1>:

  /* Pass 1: empty. */

  /* Pass 2: process 1 row from input, store into output array. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 80133f4:	6d49      	ldr	r1, [r1, #84]	; 0x54
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80133f6:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 80133fa:	b5f0      	push	{r4, r5, r6, r7, lr}
  outptr = output_buf[0] + output_col;

  /* Even part */

  tmp10 = DEQUANTIZE(coef_block[0], quantptr[0]);
 80133fc:	f9b2 7000 	ldrsh.w	r7, [r2]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013400:	3080      	adds	r0, #128	; 0x80
  outptr = output_buf[0] + output_col;
 8013402:	681d      	ldr	r5, [r3, #0]
  tmp10 = DEQUANTIZE(coef_block[0], quantptr[0]);
 8013404:	680b      	ldr	r3, [r1, #0]
{
 8013406:	9c05      	ldr	r4, [sp, #20]
  tmp10 = DEQUANTIZE(coef_block[0], quantptr[0]);
 8013408:	437b      	muls	r3, r7
  /* Add fudge factor here for final descale. */
  tmp10 += ONE << 2;

  /* Odd part */

  tmp0 = DEQUANTIZE(coef_block[1], quantptr[1]);
 801340a:	f9b2 7002 	ldrsh.w	r7, [r2, #2]
 801340e:	684a      	ldr	r2, [r1, #4]
  outptr = output_buf[0] + output_col;
 8013410:	192e      	adds	r6, r5, r4
  tmp10 += ONE << 2;
 8013412:	3304      	adds	r3, #4
  tmp0 = DEQUANTIZE(coef_block[1], quantptr[1]);
 8013414:	437a      	muls	r2, r7

  /* Final output stage */

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 8013416:	1899      	adds	r1, r3, r2
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 8013418:	1a9b      	subs	r3, r3, r2
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 801341a:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 801341e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 8013422:	5c41      	ldrb	r1, [r0, r1]
 8013424:	5529      	strb	r1, [r5, r4]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 8013426:	5cc3      	ldrb	r3, [r0, r3]
 8013428:	7073      	strb	r3, [r6, #1]
}
 801342a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801342c <jpeg_idct_8x16>:

GLOBAL(void)
jpeg_idct_8x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801342c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013430:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8013434:	930c      	str	r3, [sp, #48]	; 0x30
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013436:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 801343a:	3380      	adds	r3, #128	; 0x80
 801343c:	9301      	str	r3, [sp, #4]
   * 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801343e:	1e93      	subs	r3, r2, #2
 8013440:	9300      	str	r3, [sp, #0]
 8013442:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8013444:	f1a3 0804 	sub.w	r8, r3, #4
 8013448:	f102 030e 	add.w	r3, r2, #14
 801344c:	930d      	str	r3, [sp, #52]	; 0x34
  wsptr = workspace;
 801344e:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013450:	9900      	ldr	r1, [sp, #0]
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8013452:	f642 1bcf 	movw	fp, #10703	; 0x29cf
    tmp13 = tmp0 - tmp2;

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8013456:	f640 05d4 	movw	r5, #2260	; 0x8d4
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 801345a:	f642 4663 	movw	r6, #11363	; 0x2c63
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801345e:	f931 2f02 	ldrsh.w	r2, [r1, #2]!

    tmp11 = z1 + z3;

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8013462:	f242 2efc 	movw	lr, #8956	; 0x22fc
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8013466:	4fd9      	ldr	r7, [pc, #868]	; (80137cc <jpeg_idct_8x16+0x3a0>)
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013468:	3304      	adds	r3, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801346a:	9100      	str	r1, [sp, #0]
 801346c:	f858 1f04 	ldr.w	r1, [r8, #4]!
 8013470:	4351      	muls	r1, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013472:	9a00      	ldr	r2, [sp, #0]
 8013474:	f9b2 0040 	ldrsh.w	r0, [r2, #64]	; 0x40
    tmp0 <<= CONST_BITS;
 8013478:	0349      	lsls	r1, r1, #13
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801347a:	f8d8 2080 	ldr.w	r2, [r8, #128]	; 0x80
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 801347e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013482:	4342      	muls	r2, r0
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8013484:	f241 1051 	movw	r0, #4433	; 0x1151
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8013488:	fb0b fb02 	mul.w	fp, fp, r2
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 801348c:	4342      	muls	r2, r0
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 801348e:	f245 2003 	movw	r0, #20995	; 0x5203
    tmp10 = tmp0 + tmp1;
 8013492:	eb01 040b 	add.w	r4, r1, fp
    tmp11 = tmp0 - tmp1;
 8013496:	eba1 0b0b 	sub.w	fp, r1, fp
    tmp12 = tmp0 + tmp2;
 801349a:	eb01 0902 	add.w	r9, r1, r2
    tmp13 = tmp0 - tmp2;
 801349e:	1a89      	subs	r1, r1, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80134a0:	9a00      	ldr	r2, [sp, #0]
 80134a2:	f9b2 a020 	ldrsh.w	sl, [r2, #32]
 80134a6:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 80134aa:	fb02 fa0a 	mul.w	sl, r2, sl
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80134ae:	9a00      	ldr	r2, [sp, #0]
 80134b0:	f9b2 c060 	ldrsh.w	ip, [r2, #96]	; 0x60
 80134b4:	f8d8 20c0 	ldr.w	r2, [r8, #192]	; 0xc0
 80134b8:	fb02 fc0c 	mul.w	ip, r2, ip
    z3 = z1 - z2;
 80134bc:	ebaa 020c 	sub.w	r2, sl, ip
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 80134c0:	4355      	muls	r5, r2
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 80134c2:	4356      	muls	r6, r2
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 80134c4:	f641 42cd 	movw	r2, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 80134c8:	fb00 600c 	mla	r0, r0, ip, r6
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 80134cc:	fb02 520a 	mla	r2, r2, sl, r5
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 80134d0:	fb07 6a0a 	mla	sl, r7, sl, r6
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 80134d4:	4ebe      	ldr	r6, [pc, #760]	; (80137d0 <jpeg_idct_8x16+0x3a4>)
 80134d6:	fb06 5c0c 	mla	ip, r6, ip, r5
    tmp20 = tmp10 + tmp0;
 80134da:	1825      	adds	r5, r4, r0
    tmp27 = tmp10 - tmp0;
 80134dc:	1a20      	subs	r0, r4, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80134de:	f642 364e 	movw	r6, #11086	; 0x2b4e
    tmp20 = tmp10 + tmp0;
 80134e2:	9502      	str	r5, [sp, #8]
    tmp27 = tmp10 - tmp0;
 80134e4:	9003      	str	r0, [sp, #12]
    tmp21 = tmp12 + tmp1;
 80134e6:	eb09 0002 	add.w	r0, r9, r2
    tmp26 = tmp12 - tmp1;
 80134ea:	eba9 0202 	sub.w	r2, r9, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80134ee:	f8d8 50a0 	ldr.w	r5, [r8, #160]	; 0xa0
    tmp21 = tmp12 + tmp1;
 80134f2:	9004      	str	r0, [sp, #16]
    tmp26 = tmp12 - tmp1;
 80134f4:	9205      	str	r2, [sp, #20]
    tmp22 = tmp13 + tmp2;
 80134f6:	eb01 020a 	add.w	r2, r1, sl
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80134fa:	f8d8 0020 	ldr.w	r0, [r8, #32]
    tmp22 = tmp13 + tmp2;
 80134fe:	9206      	str	r2, [sp, #24]
    tmp25 = tmp13 - tmp2;
 8013500:	eba1 020a 	sub.w	r2, r1, sl
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8013504:	f241 5a55 	movw	sl, #5461	; 0x1555
    tmp25 = tmp13 - tmp2;
 8013508:	9207      	str	r2, [sp, #28]
    tmp23 = tmp11 + tmp3;
 801350a:	eb0b 020c 	add.w	r2, fp, ip
 801350e:	9208      	str	r2, [sp, #32]
    tmp24 = tmp11 - tmp3;
 8013510:	ebab 020c 	sub.w	r2, fp, ip
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8013514:	f641 4cb6 	movw	ip, #7350	; 0x1cb6
    tmp24 = tmp11 - tmp3;
 8013518:	9209      	str	r2, [sp, #36]	; 0x24
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801351a:	9a00      	ldr	r2, [sp, #0]
 801351c:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8013520:	4350      	muls	r0, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013522:	9a00      	ldr	r2, [sp, #0]
 8013524:	f9b2 1030 	ldrsh.w	r1, [r2, #48]	; 0x30
 8013528:	f8d8 2060 	ldr.w	r2, [r8, #96]	; 0x60
 801352c:	434a      	muls	r2, r1
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801352e:	9900      	ldr	r1, [sp, #0]
 8013530:	f9b1 1050 	ldrsh.w	r1, [r1, #80]	; 0x50
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8013534:	eba0 0b02 	sub.w	fp, r0, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013538:	434d      	muls	r5, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801353a:	9900      	ldr	r1, [sp, #0]
 801353c:	f9b1 4070 	ldrsh.w	r4, [r1, #112]	; 0x70
    tmp11 = z1 + z3;
 8013540:	1947      	adds	r7, r0, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013542:	f8d8 10e0 	ldr.w	r1, [r8, #224]	; 0xe0
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8013546:	fb0a fa07 	mul.w	sl, sl, r7
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801354a:	4361      	muls	r1, r4
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 801354c:	1884      	adds	r4, r0, r2
 801354e:	4366      	muls	r6, r4
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8013550:	f242 74e9 	movw	r4, #10217	; 0x27e9
 8013554:	fb04 f907 	mul.w	r9, r4, r7
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8013558:	1844      	adds	r4, r0, r1
 801355a:	fb0e fe04 	mul.w	lr, lr, r4
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 801355e:	1a44      	subs	r4, r0, r1
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013560:	eb06 0709 	add.w	r7, r6, r9
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8013564:	fb0c fc04 	mul.w	ip, ip, r4
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8013568:	f640 5423 	movw	r4, #3363	; 0xd23
    tmp0  = tmp1 + tmp2 + tmp3 -
 801356c:	4477      	add	r7, lr
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 801356e:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013572:	4c98      	ldr	r4, [pc, #608]	; (80137d4 <jpeg_idct_8x16+0x3a8>)
 8013574:	fb04 7400 	mla	r4, r4, r0, r7
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
    tmp13 = tmp10 + tmp11 + tmp12 -
 8013578:	4f97      	ldr	r7, [pc, #604]	; (80137d8 <jpeg_idct_8x16+0x3ac>)
    tmp0  = tmp1 + tmp2 + tmp3 -
 801357a:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 801357c:	eb0c 040a 	add.w	r4, ip, sl
 8013580:	445c      	add	r4, fp
 8013582:	fb07 4000 	mla	r0, r7, r0, r4
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8013586:	f44f 648e 	mov.w	r4, #1136	; 0x470
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 801358a:	4f94      	ldr	r7, [pc, #592]	; (80137dc <jpeg_idct_8x16+0x3b0>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 801358c:	900b      	str	r0, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 801358e:	1950      	adds	r0, r2, r5
 8013590:	4344      	muls	r4, r0
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8013592:	f240 204d 	movw	r0, #589	; 0x24d
 8013596:	fb00 4002 	mla	r0, r0, r2, r4
 801359a:	4406      	add	r6, r0
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 801359c:	4890      	ldr	r0, [pc, #576]	; (80137e0 <jpeg_idct_8x16+0x3b4>)
 801359e:	fb00 4405 	mla	r4, r0, r5, r4
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 80135a2:	1aa8      	subs	r0, r5, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 80135a4:	444c      	add	r4, r9
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 80135a6:	f642 5909 	movw	r9, #11529	; 0x2d09
 80135aa:	fb09 f000 	mul.w	r0, r9, r0
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 80135ae:	fb07 0905 	mla	r9, r7, r5, r0
    tmp1  += z1;
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
    tmp12 += z2;
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80135b2:	f46f 7759 	mvn.w	r7, #868	; 0x364
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 80135b6:	44ca      	add	sl, r9
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 80135b8:	f643 791a 	movw	r9, #16154	; 0x3f1a
 80135bc:	fb09 0902 	mla	r9, r9, r2, r0
    z2    += z4;
 80135c0:	440a      	add	r2, r1
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 80135c2:	4888      	ldr	r0, [pc, #544]	; (80137e4 <jpeg_idct_8x16+0x3b8>)
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 80135c4:	44d9      	add	r9, fp
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 80135c6:	fb00 fb02 	mul.w	fp, r0, r2
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80135ca:	f242 2018 	movw	r0, #8728	; 0x2218
 80135ce:	fb00 b001 	mla	r0, r0, r1, fp
    tmp1  += z1;
 80135d2:	445e      	add	r6, fp
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80135d4:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80135d8:	4486      	add	lr, r0
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 80135da:	4883      	ldr	r0, [pc, #524]	; (80137e8 <jpeg_idct_8x16+0x3bc>)
 80135dc:	4342      	muls	r2, r0
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80135de:	4438      	add	r0, r7
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80135e0:	fb0b 2b01 	mla	fp, fp, r1, r2
    tmp12 += z2;
 80135e4:	444a      	add	r2, r9
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80135e6:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80135e8:	eb05 0b01 	add.w	fp, r5, r1
    tmp2  += z2;
    tmp3  += z2;
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 80135ec:	1b49      	subs	r1, r1, r5
    tmp10 += z2;
    tmp11 += z2;

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 80135ee:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80135f0:	fb00 fb0b 	mul.w	fp, r0, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 80135f4:	f640 5023 	movw	r0, #3363	; 0xd23
 80135f8:	4341      	muls	r1, r0
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 80135fa:	9802      	ldr	r0, [sp, #8]
    tmp2  += z2;
 80135fc:	445c      	add	r4, fp
    tmp3  += z2;
 80135fe:	44de      	add	lr, fp
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8013600:	4428      	add	r0, r5
    tmp10 += z2;
 8013602:	448c      	add	ip, r1
    tmp11 += z2;
 8013604:	4451      	add	r1, sl
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8013606:	12c0      	asrs	r0, r0, #11
 8013608:	f843 0c04 	str.w	r0, [r3, #-4]
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 801360c:	9802      	ldr	r0, [sp, #8]
 801360e:	1b47      	subs	r7, r0, r5
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8013610:	9804      	ldr	r0, [sp, #16]
 8013612:	4430      	add	r0, r6
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8013614:	12ff      	asrs	r7, r7, #11
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8013616:	12c0      	asrs	r0, r0, #11
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8013618:	f8c3 71dc 	str.w	r7, [r3, #476]	; 0x1dc
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 801361c:	61d8      	str	r0, [r3, #28]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 801361e:	9804      	ldr	r0, [sp, #16]
 8013620:	1b86      	subs	r6, r0, r6
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8013622:	9806      	ldr	r0, [sp, #24]
 8013624:	4420      	add	r0, r4
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8013626:	12f6      	asrs	r6, r6, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8013628:	12c0      	asrs	r0, r0, #11
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 801362a:	f8c3 61bc 	str.w	r6, [r3, #444]	; 0x1bc
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 801362e:	63d8      	str	r0, [r3, #60]	; 0x3c
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8013630:	9806      	ldr	r0, [sp, #24]
 8013632:	1b04      	subs	r4, r0, r4
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8013634:	9808      	ldr	r0, [sp, #32]
 8013636:	4470      	add	r0, lr
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8013638:	12e4      	asrs	r4, r4, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 801363a:	12c0      	asrs	r0, r0, #11
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 801363c:	f8c3 419c 	str.w	r4, [r3, #412]	; 0x19c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8013640:	65d8      	str	r0, [r3, #92]	; 0x5c
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
 8013642:	9808      	ldr	r0, [sp, #32]
 8013644:	eba0 0e0e 	sub.w	lr, r0, lr
 8013648:	ea4f 20ee 	mov.w	r0, lr, asr #11
 801364c:	f8c3 017c 	str.w	r0, [r3, #380]	; 0x17c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
 8013650:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013652:	4460      	add	r0, ip
 8013654:	12c0      	asrs	r0, r0, #11
 8013656:	67d8      	str	r0, [r3, #124]	; 0x7c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
 8013658:	9809      	ldr	r0, [sp, #36]	; 0x24
 801365a:	eba0 0c0c 	sub.w	ip, r0, ip
 801365e:	ea4f 20ec 	mov.w	r0, ip, asr #11
 8013662:	f8c3 015c 	str.w	r0, [r3, #348]	; 0x15c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
 8013666:	9807      	ldr	r0, [sp, #28]
 8013668:	4408      	add	r0, r1
 801366a:	12c0      	asrs	r0, r0, #11
 801366c:	f8c3 009c 	str.w	r0, [r3, #156]	; 0x9c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8013670:	9807      	ldr	r0, [sp, #28]
 8013672:	1a41      	subs	r1, r0, r1
 8013674:	12c9      	asrs	r1, r1, #11
 8013676:	f8c3 113c 	str.w	r1, [r3, #316]	; 0x13c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 801367a:	9905      	ldr	r1, [sp, #20]
 801367c:	4411      	add	r1, r2
 801367e:	12c9      	asrs	r1, r1, #11
 8013680:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 8013684:	9905      	ldr	r1, [sp, #20]
 8013686:	1a8a      	subs	r2, r1, r2
 8013688:	12d2      	asrs	r2, r2, #11
 801368a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 801368e:	9a03      	ldr	r2, [sp, #12]
 8013690:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013692:	440a      	add	r2, r1
 8013694:	12d2      	asrs	r2, r2, #11
 8013696:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 801369a:	9a03      	ldr	r2, [sp, #12]
 801369c:	1a54      	subs	r4, r2, r1
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801369e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80136a0:	9900      	ldr	r1, [sp, #0]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 80136a2:	12e4      	asrs	r4, r4, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80136a4:	428a      	cmp	r2, r1
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 80136a6:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80136aa:	f47f aed1 	bne.w	8013450 <jpeg_idct_8x16+0x24>
 80136ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 80136b0:	aa0e      	add	r2, sp, #56	; 0x38
 80136b2:	f1a3 0904 	sub.w	r9, r3, #4
 80136b6:	333c      	adds	r3, #60	; 0x3c
 80136b8:	9304      	str	r3, [sp, #16]
    /* The rotator is sqrt(2)*c(-6). */
    
    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80136ba:	f241 1351 	movw	r3, #4433	; 0x1151
 80136be:	9305      	str	r3, [sp, #20]
    outptr = output_buf[ctr] + output_col;
 80136c0:	f859 3f04 	ldr.w	r3, [r9, #4]!
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
 80136c4:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 80136c6:	9998      	ldr	r1, [sp, #608]	; 0x260
    z2 = (INT32) wsptr[2];
 80136c8:	f852 5c18 	ldr.w	r5, [r2, #-24]
    outptr = output_buf[ctr] + output_col;
 80136cc:	185c      	adds	r4, r3, r1
    z3 = (INT32) wsptr[6];
 80136ce:	f852 1c08 	ldr.w	r1, [r2, #-8]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80136d2:	9805      	ldr	r0, [sp, #20]
    outptr = output_buf[ctr] + output_col;
 80136d4:	9303      	str	r3, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80136d6:	186b      	adds	r3, r5, r1
    z3 = (INT32) wsptr[4];
 80136d8:	f852 6c10 	ldr.w	r6, [r2, #-16]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80136dc:	4343      	muls	r3, r0
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 80136de:	f641 007e 	movw	r0, #6270	; 0x187e
    tmp1 = (INT32) wsptr[5];
 80136e2:	f852 8c0c 	ldr.w	r8, [r2, #-12]
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 80136e6:	fb00 3505 	mla	r5, r0, r5, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 80136ea:	4840      	ldr	r0, [pc, #256]	; (80137ec <jpeg_idct_8x16+0x3c0>)
    tmp2 = (INT32) wsptr[3];
 80136ec:	f852 ec14 	ldr.w	lr, [r2, #-20]
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 80136f0:	fb00 3301 	mla	r3, r0, r1, r3
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80136f4:	f852 1c20 	ldr.w	r1, [r2, #-32]
    tmp3 = (INT32) wsptr[1];
 80136f8:	f852 ac1c 	ldr.w	sl, [r2, #-28]
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80136fc:	3110      	adds	r1, #16
    z3 = tmp1 + tmp3;
 80136fe:	eb08 0c0a 	add.w	ip, r8, sl
    tmp0 = (z2 + z3) << CONST_BITS;
 8013702:	1988      	adds	r0, r1, r6
    tmp1 = (z2 - z3) << CONST_BITS;
 8013704:	1b89      	subs	r1, r1, r6
    tmp10 = tmp0 + tmp2;
 8013706:	eb05 3740 	add.w	r7, r5, r0, lsl #13
    tmp13 = tmp0 - tmp2;
 801370a:	ebc5 3040 	rsb	r0, r5, r0, lsl #13
    tmp0 = (INT32) wsptr[7];
 801370e:	f852 5c04 	ldr.w	r5, [r2, #-4]
    tmp11 = tmp1 + tmp3;
 8013712:	eb03 3641 	add.w	r6, r3, r1, lsl #13
    tmp13 = tmp0 - tmp2;
 8013716:	9000      	str	r0, [sp, #0]
    tmp12 = tmp1 - tmp3;
 8013718:	ebc3 3341 	rsb	r3, r3, r1, lsl #13
    z2 = tmp0 + tmp2;
 801371c:	eb05 000e 	add.w	r0, r5, lr
    tmp12 = tmp1 - tmp3;
 8013720:	9302      	str	r3, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8013722:	f242 53a1 	movw	r3, #9633	; 0x25a1
 8013726:	eb00 010c 	add.w	r1, r0, ip
 801372a:	4359      	muls	r1, r3
    z2 += z1;
 801372c:	4b30      	ldr	r3, [pc, #192]	; (80137f0 <jpeg_idct_8x16+0x3c4>)
 801372e:	fb03 1000 	mla	r0, r3, r0, r1
    z3 += z1;
 8013732:	4b30      	ldr	r3, [pc, #192]	; (80137f4 <jpeg_idct_8x16+0x3c8>)
 8013734:	fb03 110c 	mla	r1, r3, ip, r1
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8013738:	eb05 0c0a 	add.w	ip, r5, sl
 801373c:	4b2e      	ldr	r3, [pc, #184]	; (80137f8 <jpeg_idct_8x16+0x3cc>)
 801373e:	fb03 fc0c 	mul.w	ip, r3, ip
    tmp0 += z1 + z2;
 8013742:	f640 138e 	movw	r3, #2446	; 0x98e
 8013746:	eb00 0b0c 	add.w	fp, r0, ip
    tmp3 += z1 + z3;
 801374a:	448c      	add	ip, r1
    tmp0 += z1 + z2;
 801374c:	fb03 b505 	mla	r5, r3, r5, fp
    tmp3 += z1 + z3;
 8013750:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013754:	4b29      	ldr	r3, [pc, #164]	; (80137fc <jpeg_idct_8x16+0x3d0>)
    tmp3 += z1 + z3;
 8013756:	fb0b cc0a 	mla	ip, fp, sl, ip
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801375a:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 801375e:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013762:	fb03 fa0a 	mul.w	sl, r3, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013766:	9b01      	ldr	r3, [sp, #4]
    tmp1 += z1 + z3;
 8013768:	4451      	add	r1, sl
    tmp2 += z1 + z2;
 801376a:	4450      	add	r0, sl
 801376c:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 8013770:	fb0b 1108 	mla	r1, fp, r8, r1
    tmp2 += z1 + z2;
 8013774:	fb0a 000e 	mla	r0, sl, lr, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013778:	eb07 0e0c 	add.w	lr, r7, ip
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 801377c:	eba7 0c0c 	sub.w	ip, r7, ip
			    & RANGE_MASK];
 8013780:	f3ce 4e89 	ubfx	lr, lr, #18, #10
			    & RANGE_MASK];
 8013784:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013788:	f813 e00e 	ldrb.w	lr, [r3, lr]
 801378c:	9b03      	ldr	r3, [sp, #12]
 801378e:	4698      	mov	r8, r3
 8013790:	9b98      	ldr	r3, [sp, #608]	; 0x260
 8013792:	f808 e003 	strb.w	lr, [r8, r3]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8013796:	9b01      	ldr	r3, [sp, #4]
 8013798:	f813 700c 	ldrb.w	r7, [r3, ip]
 801379c:	71e7      	strb	r7, [r4, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 801379e:	1837      	adds	r7, r6, r0
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 80137a0:	1a30      	subs	r0, r6, r0
			    & RANGE_MASK];
 80137a2:	f3c7 4789 	ubfx	r7, r7, #18, #10
			    & RANGE_MASK];
 80137a6:	f3c0 4a89 	ubfx	sl, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 80137aa:	5ddf      	ldrb	r7, [r3, r7]
 80137ac:	7067      	strb	r7, [r4, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 80137ae:	f813 000a 	ldrb.w	r0, [r3, sl]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 80137b2:	9b02      	ldr	r3, [sp, #8]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 80137b4:	71a0      	strb	r0, [r4, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 80137b6:	1858      	adds	r0, r3, r1
 80137b8:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 80137ba:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 80137be:	5c18      	ldrb	r0, [r3, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 80137c0:	9b02      	ldr	r3, [sp, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 80137c2:	70a0      	strb	r0, [r4, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 80137c4:	1a59      	subs	r1, r3, r1
 80137c6:	9b01      	ldr	r3, [sp, #4]
 80137c8:	e01a      	b.n	8013800 <jpeg_idct_8x16+0x3d4>
 80137ca:	bf00      	nop
 80137cc:	ffffecc2 	.word	0xffffecc2
 80137d0:	ffffefb0 	.word	0xffffefb0
 80137d4:	ffffb6d6 	.word	0xffffb6d6
 80137d8:	ffffc542 	.word	0xffffc542
 80137dc:	ffffe77a 	.word	0xffffe77a
 80137e0:	ffffdbfa 	.word	0xffffdbfa
 80137e4:	ffffeaab 	.word	0xffffeaab
 80137e8:	ffffd817 	.word	0xffffd817
 80137ec:	ffffc4df 	.word	0xffffc4df
 80137f0:	ffffc13b 	.word	0xffffc13b
 80137f4:	fffff384 	.word	0xfffff384
 80137f8:	ffffe333 	.word	0xffffe333
 80137fc:	ffffadfd 	.word	0xffffadfd
			    & RANGE_MASK];
 8013800:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8013804:	5c5b      	ldrb	r3, [r3, r1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8013806:	9901      	ldr	r1, [sp, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8013808:	7163      	strb	r3, [r4, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 801380a:	9b00      	ldr	r3, [sp, #0]
 801380c:	442b      	add	r3, r5
			    & RANGE_MASK];
 801380e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8013812:	5ccb      	ldrb	r3, [r1, r3]
 8013814:	70e3      	strb	r3, [r4, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8013816:	9b00      	ldr	r3, [sp, #0]
 8013818:	1b5d      	subs	r5, r3, r5
			    & RANGE_MASK];
 801381a:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 801381e:	5d4b      	ldrb	r3, [r1, r5]
 8013820:	7123      	strb	r3, [r4, #4]
  for (ctr = 0; ctr < 16; ctr++) {
 8013822:	9b04      	ldr	r3, [sp, #16]
 8013824:	454b      	cmp	r3, r9
 8013826:	f47f af4b 	bne.w	80136c0 <jpeg_idct_8x16+0x294>
  }
}
 801382a:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 801382e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013832:	bf00      	nop

08013834 <jpeg_idct_7x14>:

GLOBAL(void)
jpeg_idct_7x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013838:	b0ef      	sub	sp, #444	; 0x1bc
 801383a:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 801383c:	f1a2 0b02 	sub.w	fp, r2, #2
 8013840:	9309      	str	r3, [sp, #36]	; 0x24
 8013842:	3c04      	subs	r4, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013844:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8013848:	3380      	adds	r3, #128	; 0x80
 801384a:	9300      	str	r3, [sp, #0]
   * 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 801384c:	f102 030c 	add.w	r3, r2, #12
 8013850:	930b      	str	r3, [sp, #44]	; 0x2c
  wsptr = workspace;
 8013852:	ab0c      	add	r3, sp, #48	; 0x30
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013854:	f93b 2f02 	ldrsh.w	r2, [fp, #2]!
			CONST_BITS-PASS1_BITS);

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8013858:	f242 3862 	movw	r8, #9058	; 0x2362
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801385c:	f854 6f04 	ldr.w	r6, [r4, #4]!
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
    tmp13 = z4 << CONST_BITS;

    tmp14 = z1 + z3;
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8013860:	f642 29b7 	movw	r9, #10935	; 0x2ab7
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013864:	f9bb 0040 	ldrsh.w	r0, [fp, #64]	; 0x40
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8013868:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801386a:	4356      	muls	r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801386c:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8013870:	4350      	muls	r0, r2
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8013872:	f642 02c6 	movw	r2, #10438	; 0x28c6
    z1 <<= CONST_BITS;
 8013876:	0376      	lsls	r6, r6, #13
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8013878:	fb02 f700 	mul.w	r7, r2, r0
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 801387c:	f640 2212 	movw	r2, #2578	; 0xa12
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8013880:	f506 6680 	add.w	r6, r6, #1024	; 0x400
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8013884:	fb02 fc00 	mul.w	ip, r2, r0
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8013888:	f641 4237 	movw	r2, #7223	; 0x1c37
    tmp10 = z1 + z2;
 801388c:	19f5      	adds	r5, r6, r7
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 801388e:	4350      	muls	r0, r2
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8013890:	4467      	add	r7, ip
    tmp11 = z1 + z3;
 8013892:	eb06 010c 	add.w	r1, r6, ip
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8013896:	1a3f      	subs	r7, r7, r0
    tmp12 = z1 - z4;
 8013898:	1a32      	subs	r2, r6, r0
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 801389a:	eba6 0047 	sub.w	r0, r6, r7, lsl #1
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801389e:	f9bb 7020 	ldrsh.w	r7, [fp, #32]
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 80138a2:	900a      	str	r0, [sp, #40]	; 0x28
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80138a4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80138a6:	fb00 fc07 	mul.w	ip, r0, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80138aa:	f9bb 7060 	ldrsh.w	r7, [fp, #96]	; 0x60
 80138ae:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 80138b2:	4378      	muls	r0, r7
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 80138b4:	4fb3      	ldr	r7, [pc, #716]	; (8013b84 <jpeg_idct_7x14+0x350>)
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 80138b6:	eb0c 0600 	add.w	r6, ip, r0
 80138ba:	fb08 f806 	mul.w	r8, r8, r6
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 80138be:	f640 06bd 	movw	r6, #2237	; 0x8bd
 80138c2:	fb06 860c 	mla	r6, r6, ip, r8
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 80138c6:	fb07 8800 	mla	r8, r7, r0, r8
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 80138ca:	f607 27e5 	addw	r7, r7, #2789	; 0xae5
 80138ce:	4378      	muls	r0, r7
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 80138d0:	f241 37a3 	movw	r7, #5027	; 0x13a3
 80138d4:	fb07 070c 	mla	r7, r7, ip, r0
    tmp26 = tmp10 - tmp13;
 80138d8:	1ba8      	subs	r0, r5, r6
    tmp20 = tmp10 + tmp13;
 80138da:	eb05 0c06 	add.w	ip, r5, r6
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80138de:	6a25      	ldr	r5, [r4, #32]
    tmp26 = tmp10 - tmp13;
 80138e0:	9001      	str	r0, [sp, #4]
    tmp21 = tmp11 + tmp14;
 80138e2:	eb01 0008 	add.w	r0, r1, r8
    tmp25 = tmp11 - tmp14;
 80138e6:	eba1 0108 	sub.w	r1, r1, r8
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80138ea:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
    tmp21 = tmp11 + tmp14;
 80138ee:	9002      	str	r0, [sp, #8]
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 80138f0:	f640 68f2 	movw	r8, #3826	; 0xef2
    tmp25 = tmp11 - tmp14;
 80138f4:	9103      	str	r1, [sp, #12]
    tmp22 = tmp12 + tmp15;
 80138f6:	19d1      	adds	r1, r2, r7
    tmp24 = tmp12 - tmp15;
 80138f8:	1bd2      	subs	r2, r2, r7
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80138fa:	f9bb 0070 	ldrsh.w	r0, [fp, #112]	; 0x70
    tmp22 = tmp12 + tmp15;
 80138fe:	9104      	str	r1, [sp, #16]
    tmp24 = tmp12 - tmp15;
 8013900:	9205      	str	r2, [sp, #20]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013902:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013906:	6e21      	ldr	r1, [r4, #96]	; 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013908:	4355      	muls	r5, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801390a:	f9bb 2030 	ldrsh.w	r2, [fp, #48]	; 0x30
 801390e:	4351      	muls	r1, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013910:	f9bb 2050 	ldrsh.w	r2, [fp, #80]	; 0x50
 8013914:	4356      	muls	r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013916:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 801391a:	4342      	muls	r2, r0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 801391c:	1868      	adds	r0, r5, r1
    tmp14 = z1 + z3;
 801391e:	19af      	adds	r7, r5, r6
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8013920:	fb09 f900 	mul.w	r9, r9, r0
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8013924:	f242 6052 	movw	r0, #9810	; 0x2652
 8013928:	fb00 fa07 	mul.w	sl, r0, r7
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 801392c:	4896      	ldr	r0, [pc, #600]	; (8013b88 <jpeg_idct_7x14+0x354>)
 801392e:	eb09 0e0a 	add.w	lr, r9, sl
 8013932:	eb0e 3e42 	add.w	lr, lr, r2, lsl #13
 8013936:	fb00 ee05 	mla	lr, r0, r5, lr
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 801393a:	f641 0014 	movw	r0, #6164	; 0x1814
 801393e:	4378      	muls	r0, r7
 8013940:	9006      	str	r0, [sp, #24]
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8013942:	9f06      	ldr	r7, [sp, #24]
 8013944:	4891      	ldr	r0, [pc, #580]	; (8013b8c <jpeg_idct_7x14+0x358>)
 8013946:	fb00 7005 	mla	r0, r0, r5, r7
    z1    -= z2;
 801394a:	1a6d      	subs	r5, r5, r1
    tmp16 += tmp15;
    z1    += z4;
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 801394c:	198f      	adds	r7, r1, r6
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 801394e:	fb08 f805 	mul.w	r8, r8, r5
 8013952:	eba8 3842 	sub.w	r8, r8, r2, lsl #13
    tmp16 += tmp15;
 8013956:	4440      	add	r0, r8
 8013958:	9007      	str	r0, [sp, #28]
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 801395a:	f46f 60a2 	mvn.w	r0, #1296	; 0x510
 801395e:	4378      	muls	r0, r7
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8013960:	4f8b      	ldr	r7, [pc, #556]	; (8013b90 <jpeg_idct_7x14+0x35c>)
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 8013962:	eba0 3042 	sub.w	r0, r0, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8013966:	fb07 0701 	mla	r7, r7, r1, r0
 801396a:	44b9      	add	r9, r7
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 801396c:	4f89      	ldr	r7, [pc, #548]	; (8013b94 <jpeg_idct_7x14+0x360>)
 801396e:	fb07 0006 	mla	r0, r7, r6, r0
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8013972:	1a77      	subs	r7, r6, r1
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8013974:	4450      	add	r0, sl
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8013976:	f642 4af8 	movw	sl, #11512	; 0x2cf8
 801397a:	fb0a fa07 	mul.w	sl, sl, r7
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 801397e:	9008      	str	r0, [sp, #32]
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013980:	eb0a 3742 	add.w	r7, sl, r2, lsl #13
 8013984:	4884      	ldr	r0, [pc, #528]	; (8013b98 <jpeg_idct_7x14+0x364>)
    z1    += z4;
 8013986:	442a      	add	r2, r5
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013988:	fb00 7706 	mla	r7, r0, r6, r7
 801398c:	9806      	ldr	r0, [sp, #24]
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */

    tmp13 = (z1 - z3) << PASS1_BITS;
 801398e:	1b96      	subs	r6, r2, r6

    /* Final output stage */

    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013990:	eb0c 020e 	add.w	r2, ip, lr
    wsptr[7*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013994:	ebac 0c0e 	sub.w	ip, ip, lr
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013998:	4407      	add	r7, r0
    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801399a:	12d2      	asrs	r2, r2, #11
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 801399c:	f241 5099 	movw	r0, #5529	; 0x1599
    tmp13 = (z1 - z3) << PASS1_BITS;
 80139a0:	00b6      	lsls	r6, r6, #2
    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80139a2:	f843 2c04 	str.w	r2, [r3, #-4]
    wsptr[7*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80139a6:	ea4f 22ec 	mov.w	r2, ip, asr #11
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 80139aa:	fb00 a101 	mla	r1, r0, r1, sl
    wsptr[7*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80139ae:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    wsptr[7*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80139b2:	9a02      	ldr	r2, [sp, #8]
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 80139b4:	4441      	add	r1, r8
    wsptr[7*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80139b6:	444a      	add	r2, r9
 80139b8:	12d2      	asrs	r2, r2, #11
 80139ba:	619a      	str	r2, [r3, #24]
    wsptr[7*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80139bc:	9a02      	ldr	r2, [sp, #8]
 80139be:	eba2 0909 	sub.w	r9, r2, r9
 80139c2:	ea4f 22e9 	mov.w	r2, r9, asr #11
 80139c6:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    wsptr[7*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80139ca:	9808      	ldr	r0, [sp, #32]
 80139cc:	9a04      	ldr	r2, [sp, #16]
 80139ce:	4402      	add	r2, r0
 80139d0:	12d2      	asrs	r2, r2, #11
 80139d2:	635a      	str	r2, [r3, #52]	; 0x34
    wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80139d4:	9a04      	ldr	r2, [sp, #16]
 80139d6:	1a10      	subs	r0, r2, r0
    wsptr[7*3]  = (int) (tmp23 + tmp13);
 80139d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80139da:	eb06 22e2 	add.w	r2, r6, r2, asr #11
    wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80139de:	12c0      	asrs	r0, r0, #11
    wsptr[7*3]  = (int) (tmp23 + tmp13);
 80139e0:	651a      	str	r2, [r3, #80]	; 0x50
    wsptr[7*10] = (int) (tmp23 - tmp13);
 80139e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80139e4:	f8c3 0130 	str.w	r0, [r3, #304]	; 0x130
    wsptr[7*10] = (int) (tmp23 - tmp13);
 80139e8:	ebc6 26e2 	rsb	r6, r6, r2, asr #11
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80139ec:	9a05      	ldr	r2, [sp, #20]
 80139ee:	443a      	add	r2, r7
    wsptr[7*10] = (int) (tmp23 - tmp13);
 80139f0:	f8c3 6114 	str.w	r6, [r3, #276]	; 0x114
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80139f4:	12d2      	asrs	r2, r2, #11
 80139f6:	66da      	str	r2, [r3, #108]	; 0x6c
    wsptr[7*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80139f8:	9a05      	ldr	r2, [sp, #20]
 80139fa:	1bd7      	subs	r7, r2, r7
    wsptr[7*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80139fc:	9a03      	ldr	r2, [sp, #12]
 80139fe:	440a      	add	r2, r1
    wsptr[7*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8013a00:	12ff      	asrs	r7, r7, #11
    wsptr[7*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8013a02:	12d2      	asrs	r2, r2, #11
    wsptr[7*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8013a04:	f8c3 70f8 	str.w	r7, [r3, #248]	; 0xf8
    wsptr[7*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8013a08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8013a0c:	9a03      	ldr	r2, [sp, #12]
 8013a0e:	1a51      	subs	r1, r2, r1
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8013a10:	9a01      	ldr	r2, [sp, #4]
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8013a12:	12c9      	asrs	r1, r1, #11
 8013a14:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8013a18:	9907      	ldr	r1, [sp, #28]
 8013a1a:	440a      	add	r2, r1
 8013a1c:	12d2      	asrs	r2, r2, #11
 8013a1e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    wsptr[7*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8013a22:	9a01      	ldr	r2, [sp, #4]
 8013a24:	1a52      	subs	r2, r2, r1
 8013a26:	12d2      	asrs	r2, r2, #11
 8013a28:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8013a2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013a2e:	455a      	cmp	r2, fp
 8013a30:	f47f af10 	bne.w	8013854 <jpeg_idct_7x14+0x20>
 8013a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
  }

  /* Pass 2: process 14 rows from work array, store into output array.
   * 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
   */
  wsptr = workspace;
 8013a36:	a80c      	add	r0, sp, #48	; 0x30
 8013a38:	f1a3 0904 	sub.w	r9, r3, #4
 8013a3c:	3334      	adds	r3, #52	; 0x34
 8013a3e:	9303      	str	r3, [sp, #12]

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[4];
    z3 = (INT32) wsptr[6];

    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8013a40:	f641 4337 	movw	r3, #7223	; 0x1c37
 8013a44:	9304      	str	r3, [sp, #16]
    outptr = output_buf[ctr] + output_col;
 8013a46:	f859 3f04 	ldr.w	r3, [r9, #4]!
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 7;		/* advance pointer to next row */
 8013a4a:	301c      	adds	r0, #28
    outptr = output_buf[ctr] + output_col;
 8013a4c:	9a78      	ldr	r2, [sp, #480]	; 0x1e0
    z3 = (INT32) wsptr[6];
 8013a4e:	f850 5c04 	ldr.w	r5, [r0, #-4]
    outptr = output_buf[ctr] + output_col;
 8013a52:	189e      	adds	r6, r3, r2
 8013a54:	9302      	str	r3, [sp, #8]
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8013a56:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    z1 = (INT32) wsptr[2];
 8013a5a:	f850 4c14 	ldr.w	r4, [r0, #-20]
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8013a5e:	1b5a      	subs	r2, r3, r5
 8013a60:	9b04      	ldr	r3, [sp, #16]
    tmp23 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013a62:	f850 7c1c 	ldr.w	r7, [r0, #-28]
    tmp10 = z1 + z3;
 8013a66:	eb04 0805 	add.w	r8, r4, r5
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8013a6a:	fb03 fe02 	mul.w	lr, r3, r2
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8013a6e:	f850 3c0c 	ldr.w	r3, [r0, #-12]
 8013a72:	f640 2212 	movw	r2, #2578	; 0xa12
    tmp23 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013a76:	3710      	adds	r7, #16
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8013a78:	1ae3      	subs	r3, r4, r3
    z2 = (INT32) wsptr[3];
 8013a7a:	f850 ac10 	ldr.w	sl, [r0, #-16]
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8013a7e:	fb02 fc03 	mul.w	ip, r2, r3
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8013a82:	f850 3c0c 	ldr.w	r3, [r0, #-12]
 8013a86:	eb0e 010c 	add.w	r1, lr, ip
 8013a8a:	461a      	mov	r2, r3
 8013a8c:	4b43      	ldr	r3, [pc, #268]	; (8013b9c <jpeg_idct_7x14+0x368>)
 8013a8e:	eb01 3147 	add.w	r1, r1, r7, lsl #13
 8013a92:	fb03 1102 	mla	r1, r3, r2, r1
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8013a96:	f642 03c6 	movw	r3, #10438	; 0x28c6
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8013a9a:	f46f 721f 	mvn.w	r2, #636	; 0x27c
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8013a9e:	fb03 f308 	mul.w	r3, r3, r8
 8013aa2:	eb03 3347 	add.w	r3, r3, r7, lsl #13
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8013aa6:	fb02 3205 	mla	r2, r2, r5, r3
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8013aaa:	4d3d      	ldr	r5, [pc, #244]	; (8013ba0 <jpeg_idct_7x14+0x36c>)
 8013aac:	fb05 3304 	mla	r3, r5, r4, r3
    z3 = (INT32) wsptr[5];
 8013ab0:	f850 5c08 	ldr.w	r5, [r0, #-8]
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8013ab4:	4472      	add	r2, lr
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8013ab6:	4463      	add	r3, ip
    z1 = (INT32) wsptr[1];
 8013ab8:	f850 cc18 	ldr.w	ip, [r0, #-24]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8013abc:	9301      	str	r3, [sp, #4]
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8013abe:	eb0c 040a 	add.w	r4, ip, sl
 8013ac2:	f641 53ef 	movw	r3, #7663	; 0x1def
 8013ac6:	fb03 fb04 	mul.w	fp, r3, r4
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8013aca:	ebac 040a 	sub.w	r4, ip, sl
 8013ace:	f240 5373 	movw	r3, #1395	; 0x573
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8013ad2:	44ac      	add	ip, r5
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8013ad4:	44aa      	add	sl, r5
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8013ad6:	435c      	muls	r4, r3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8013ad8:	4b32      	ldr	r3, [pc, #200]	; (8013ba4 <jpeg_idct_7x14+0x370>)
    tmp10 = tmp11 - tmp12;
 8013ada:	ebab 0e04 	sub.w	lr, fp, r4
    tmp11 += tmp12;
 8013ade:	445c      	add	r4, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8013ae0:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8013ae4:	fb03 fa0a 	mul.w	sl, r3, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013ae8:	9b00      	ldr	r3, [sp, #0]
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8013aea:	fb0b fc0c 	mul.w	ip, fp, ip
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8013aee:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp11 += tmp12;
 8013af2:	4454      	add	r4, sl
    tmp10 += z2;
 8013af4:	44e6      	add	lr, ip
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8013af6:	fb0b cc05 	mla	ip, fp, r5, ip
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013afa:	eb02 050e 	add.w	r5, r2, lr
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8013afe:	44e2      	add	sl, ip
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013b00:	eba2 0e0e 	sub.w	lr, r2, lr
			    & RANGE_MASK];
 8013b04:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 8013b08:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013b0c:	5d5d      	ldrb	r5, [r3, r5]
 8013b0e:	9b02      	ldr	r3, [sp, #8]
 8013b10:	469c      	mov	ip, r3
 8013b12:	9b78      	ldr	r3, [sp, #480]	; 0x1e0
 8013b14:	f80c 5003 	strb.w	r5, [ip, r3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013b18:	9b00      	ldr	r3, [sp, #0]
 8013b1a:	f813 200e 	ldrb.w	r2, [r3, lr]
 8013b1e:	71b2      	strb	r2, [r6, #6]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013b20:	190a      	adds	r2, r1, r4
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013b22:	1b09      	subs	r1, r1, r4
			    & RANGE_MASK];
 8013b24:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 8013b28:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013b2c:	5c9a      	ldrb	r2, [r3, r2]
 8013b2e:	7072      	strb	r2, [r6, #1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013b30:	5c5a      	ldrb	r2, [r3, r1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013b32:	9b01      	ldr	r3, [sp, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013b34:	7172      	strb	r2, [r6, #5]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013b36:	eb03 020a 	add.w	r2, r3, sl
 8013b3a:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8013b3c:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013b40:	5c9a      	ldrb	r2, [r3, r2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013b42:	9b01      	ldr	r3, [sp, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013b44:	70b2      	strb	r2, [r6, #2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013b46:	eba3 0a0a 	sub.w	sl, r3, sl
 8013b4a:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8013b4c:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013b50:	f813 300a 	ldrb.w	r3, [r3, sl]
 8013b54:	7133      	strb	r3, [r6, #4]
    z2 -= tmp10;
 8013b56:	f850 3c0c 	ldr.w	r3, [r0, #-12]
 8013b5a:	eba3 0808 	sub.w	r8, r3, r8
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8013b5e:	f642 5341 	movw	r3, #11585	; 0x2d41
 8013b62:	fb03 f808 	mul.w	r8, r3, r8
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
 8013b66:	9b00      	ldr	r3, [sp, #0]
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8013b68:	eb08 3847 	add.w	r8, r8, r7, lsl #13
			    & RANGE_MASK];
 8013b6c:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
 8013b70:	f813 3008 	ldrb.w	r3, [r3, r8]
 8013b74:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 14; ctr++) {
 8013b76:	9b03      	ldr	r3, [sp, #12]
 8013b78:	454b      	cmp	r3, r9
 8013b7a:	f47f af64 	bne.w	8013a46 <jpeg_idct_7x14+0x212>
  }
}
 8013b7e:	b06f      	add	sp, #444	; 0x1bc
 8013b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b84:	ffffc8fc 	.word	0xffffc8fc
 8013b88:	ffffdbf0 	.word	0xffffdbf0
 8013b8c:	ffffde0b 	.word	0xffffde0b
 8013b90:	fffff26e 	.word	0xfffff26e
 8013b94:	ffffb409 	.word	0xffffb409
 8013b98:	ffffc9e6 	.word	0xffffc9e6
 8013b9c:	ffffc515 	.word	0xffffc515
 8013ba0:	ffffb0f1 	.word	0xffffb0f1
 8013ba4:	ffffd3e1 	.word	0xffffd3e1

08013ba8 <jpeg_idct_6x12>:

GLOBAL(void)
jpeg_idct_6x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bac:	b0d3      	sub	sp, #332	; 0x14c
 8013bae:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8013bb0:	f1a2 0a02 	sub.w	sl, r2, #2
 8013bb4:	9308      	str	r3, [sp, #32]
 8013bb6:	3904      	subs	r1, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013bb8:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8013bbc:	3380      	adds	r3, #128	; 0x80
 8013bbe:	9300      	str	r3, [sp, #0]
   * 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8013bc0:	f102 030a 	add.w	r3, r2, #10
 8013bc4:	9309      	str	r3, [sp, #36]	; 0x24
  wsptr = workspace;
 8013bc6:	ab0a      	add	r3, sp, #40	; 0x28
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013bc8:	f93a ef02 	ldrsh.w	lr, [sl, #2]!

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8013bcc:	f641 398d 	movw	r9, #7053	; 0x1b8d
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013bd0:	f851 2f04 	ldr.w	r2, [r1, #4]!
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8013bd4:	f640 0bf7 	movw	fp, #2295	; 0x8f7
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013bd8:	f9ba 4060 	ldrsh.w	r4, [sl, #96]	; 0x60
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8013bdc:	3304      	adds	r3, #4
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013bde:	fb02 fe0e 	mul.w	lr, r2, lr
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013be2:	f8d1 5080 	ldr.w	r5, [r1, #128]	; 0x80
 8013be6:	f9ba 2040 	ldrsh.w	r2, [sl, #64]	; 0x40
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013bea:	f9ba c020 	ldrsh.w	ip, [sl, #32]
    z3 <<= CONST_BITS;
 8013bee:	ea4f 3e4e 	mov.w	lr, lr, lsl #13
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013bf2:	4355      	muls	r5, r2
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8013bf4:	f242 7231 	movw	r2, #10033	; 0x2731
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013bf8:	f8d1 60c0 	ldr.w	r6, [r1, #192]	; 0xc0
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 8013bfc:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8013c00:	4355      	muls	r5, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013c02:	6c0a      	ldr	r2, [r1, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013c04:	4366      	muls	r6, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013c06:	fb02 fc0c 	mul.w	ip, r2, ip
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8013c0a:	f642 32b6 	movw	r2, #11190	; 0x2bb6
    z2 <<= CONST_BITS;
 8013c0e:	0376      	lsls	r6, r6, #13
    tmp10 = z3 + z4;
 8013c10:	eb0e 0005 	add.w	r0, lr, r5
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8013c14:	fb02 f20c 	mul.w	r2, r2, ip
    tmp11 = z3 - z4;
 8013c18:	ebae 0505 	sub.w	r5, lr, r5
    tmp12 = z1 - z2;
 8013c1c:	ebc6 344c 	rsb	r4, r6, ip, lsl #13
    tmp12 = z4 + z2;
 8013c20:	eb02 0806 	add.w	r8, r2, r6
    tmp12 = z4 - z1 - z2;
 8013c24:	eba2 324c 	sub.w	r2, r2, ip, lsl #13
    tmp21 = z3 + tmp12;
 8013c28:	eb0e 0704 	add.w	r7, lr, r4
    tmp24 = z3 - tmp12;
 8013c2c:	ebae 0404 	sub.w	r4, lr, r4
    tmp12 = z4 - z1 - z2;
 8013c30:	1b96      	subs	r6, r2, r6
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013c32:	f9ba c010 	ldrsh.w	ip, [sl, #16]
    tmp24 = z3 - tmp12;
 8013c36:	9402      	str	r4, [sp, #8]
    tmp20 = tmp10 + tmp12;
 8013c38:	eb00 0408 	add.w	r4, r0, r8
    tmp22 = tmp11 + tmp12;
 8013c3c:	19aa      	adds	r2, r5, r6
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013c3e:	f9ba e030 	ldrsh.w	lr, [sl, #48]	; 0x30
    tmp20 = tmp10 + tmp12;
 8013c42:	9403      	str	r4, [sp, #12]
    tmp25 = tmp10 - tmp12;
 8013c44:	eba0 0008 	sub.w	r0, r0, r8
    tmp22 = tmp11 + tmp12;
 8013c48:	9205      	str	r2, [sp, #20]
    tmp23 = tmp11 - tmp12;
 8013c4a:	1baa      	subs	r2, r5, r6
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013c4c:	6e0c      	ldr	r4, [r1, #96]	; 0x60
    tmp23 = tmp11 - tmp12;
 8013c4e:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013c50:	6a0a      	ldr	r2, [r1, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013c52:	fb04 fe0e 	mul.w	lr, r4, lr
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013c56:	f8d1 40a0 	ldr.w	r4, [r1, #160]	; 0xa0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013c5a:	fb02 fc0c 	mul.w	ip, r2, ip
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013c5e:	f9ba 2050 	ldrsh.w	r2, [sl, #80]	; 0x50
    tmp25 = tmp10 - tmp12;
 8013c62:	9004      	str	r0, [sp, #16]
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013c64:	4354      	muls	r4, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013c66:	f9ba 0070 	ldrsh.w	r0, [sl, #112]	; 0x70
 8013c6a:	f8d1 20e0 	ldr.w	r2, [r1, #224]	; 0xe0
    tmp10 = z1 + z3;
 8013c6e:	eb0c 0604 	add.w	r6, ip, r4
    tmp21 = z3 + tmp12;
 8013c72:	9701      	str	r7, [sp, #4]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013c74:	4342      	muls	r2, r0
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8013c76:	f642 10cf 	movw	r0, #10703	; 0x29cf
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8013c7a:	4f76      	ldr	r7, [pc, #472]	; (8013e54 <jpeg_idct_6x12+0x2ac>)
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8013c7c:	eb02 0806 	add.w	r8, r2, r6
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8013c80:	fb00 f50e 	mul.w	r5, r0, lr
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8013c84:	4874      	ldr	r0, [pc, #464]	; (8013e58 <jpeg_idct_6x12+0x2b0>)
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8013c86:	fb09 f808 	mul.w	r8, r9, r8
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8013c8a:	f640 095b 	movw	r9, #2139	; 0x85b
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8013c8e:	fb00 f00e 	mul.w	r0, r0, lr
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8013c92:	fb09 8906 	mla	r9, r9, r6, r8
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8013c96:	eb05 0609 	add.w	r6, r5, r9
 8013c9a:	fb0b 660c 	mla	r6, fp, ip, r6
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8013c9e:	eb04 0b02 	add.w	fp, r4, r2
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8013ca2:	9607      	str	r6, [sp, #28]
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8013ca4:	4e6d      	ldr	r6, [pc, #436]	; (8013e5c <jpeg_idct_6x12+0x2b4>)
 8013ca6:	fb06 fb0b 	mul.w	fp, r6, fp
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8013caa:	eb00 060b 	add.w	r6, r0, fp
 8013cae:	fb07 6604 	mla	r6, r7, r4, r6
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8013cb2:	4f6b      	ldr	r7, [pc, #428]	; (8013e60 <jpeg_idct_6x12+0x2b8>)
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */

    z1 -= z4;
    z2 -= z3;
 8013cb4:	ebae 0404 	sub.w	r4, lr, r4
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8013cb8:	f241 1e51 	movw	lr, #4433	; 0x1151
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8013cbc:	444e      	add	r6, r9
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8013cbe:	fb07 000c 	mla	r0, r7, ip, r0
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8013cc2:	eba8 0905 	sub.w	r9, r8, r5
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8013cc6:	4f67      	ldr	r7, [pc, #412]	; (8013e64 <jpeg_idct_6x12+0x2bc>)
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8013cc8:	f243 25c6 	movw	r5, #12998	; 0x32c6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8013ccc:	fb07 0002 	mla	r0, r7, r2, r0
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8013cd0:	f207 4753 	addw	r7, r7, #1107	; 0x453
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8013cd4:	fb05 9502 	mla	r5, r5, r2, r9
    z1 -= z4;
 8013cd8:	ebac 0202 	sub.w	r2, ip, r2
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8013cdc:	4440      	add	r0, r8
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8013cde:	f641 0c7e 	movw	ip, #6270	; 0x187e
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8013ce2:	eb02 0804 	add.w	r8, r2, r4
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8013ce6:	445d      	add	r5, fp
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8013ce8:	fb0e f808 	mul.w	r8, lr, r8
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8013cec:	fb07 8e04 	mla	lr, r7, r4, r8

    /* Final output stage */

    wsptr[6*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013cf0:	9f03      	ldr	r7, [sp, #12]
 8013cf2:	9c07      	ldr	r4, [sp, #28]
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8013cf4:	fb0c 8202 	mla	r2, ip, r2, r8
    wsptr[6*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013cf8:	443c      	add	r4, r7
 8013cfa:	12e4      	asrs	r4, r4, #11
 8013cfc:	f843 4c04 	str.w	r4, [r3, #-4]
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013d00:	9c07      	ldr	r4, [sp, #28]
 8013d02:	1b3f      	subs	r7, r7, r4
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8013d04:	9c01      	ldr	r4, [sp, #4]
 8013d06:	4414      	add	r4, r2
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013d08:	12ff      	asrs	r7, r7, #11
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8013d0a:	12e4      	asrs	r4, r4, #11
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013d0c:	f8c3 7104 	str.w	r7, [r3, #260]	; 0x104
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8013d10:	615c      	str	r4, [r3, #20]
    wsptr[6*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8013d12:	9c01      	ldr	r4, [sp, #4]
 8013d14:	1aa2      	subs	r2, r4, r2
 8013d16:	12d2      	asrs	r2, r2, #11
 8013d18:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    wsptr[6*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013d1c:	9a05      	ldr	r2, [sp, #20]
 8013d1e:	4432      	add	r2, r6
 8013d20:	12d2      	asrs	r2, r2, #11
 8013d22:	62da      	str	r2, [r3, #44]	; 0x2c
    wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013d24:	9a05      	ldr	r2, [sp, #20]
 8013d26:	1b96      	subs	r6, r2, r6
    wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8013d28:	9a06      	ldr	r2, [sp, #24]
 8013d2a:	442a      	add	r2, r5
    wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013d2c:	12f6      	asrs	r6, r6, #11
    wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8013d2e:	12d2      	asrs	r2, r2, #11
    wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013d30:	f8c3 60d4 	str.w	r6, [r3, #212]	; 0xd4
    wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8013d34:	645a      	str	r2, [r3, #68]	; 0x44
    wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8013d36:	9a06      	ldr	r2, [sp, #24]
 8013d38:	1b55      	subs	r5, r2, r5
    wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8013d3a:	9a02      	ldr	r2, [sp, #8]
 8013d3c:	4472      	add	r2, lr
    wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8013d3e:	12ed      	asrs	r5, r5, #11
    wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8013d40:	12d2      	asrs	r2, r2, #11
    wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8013d42:	f8c3 50bc 	str.w	r5, [r3, #188]	; 0xbc
    wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8013d46:	65da      	str	r2, [r3, #92]	; 0x5c
    wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8013d48:	9a02      	ldr	r2, [sp, #8]
 8013d4a:	eba2 040e 	sub.w	r4, r2, lr
    wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8013d4e:	9a04      	ldr	r2, [sp, #16]
 8013d50:	4402      	add	r2, r0
    wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8013d52:	12e4      	asrs	r4, r4, #11
    wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8013d54:	12d2      	asrs	r2, r2, #11
    wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8013d56:	f8c3 40a4 	str.w	r4, [r3, #164]	; 0xa4
    wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8013d5a:	675a      	str	r2, [r3, #116]	; 0x74
    wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8013d5c:	9a04      	ldr	r2, [sp, #16]
 8013d5e:	1a10      	subs	r0, r2, r0
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8013d60:	9a09      	ldr	r2, [sp, #36]	; 0x24
    wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8013d62:	12c0      	asrs	r0, r0, #11
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8013d64:	4552      	cmp	r2, sl
    wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8013d66:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8013d6a:	f47f af2d 	bne.w	8013bc8 <jpeg_idct_6x12+0x20>
 8013d6e:	9b08      	ldr	r3, [sp, #32]
  }

  /* Pass 2: process 12 rows from work array, store into output array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  wsptr = workspace;
 8013d70:	a90a      	add	r1, sp, #40	; 0x28

    /* Add fudge factor here for final descale. */
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp10 <<= CONST_BITS;
    tmp12 = (INT32) wsptr[4];
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8013d72:	f241 6ba1 	movw	fp, #5793	; 0x16a1
 8013d76:	f1a3 0c04 	sub.w	ip, r3, #4
 8013d7a:	f103 082c 	add.w	r8, r3, #44	; 0x2c
    outptr = output_buf[ctr] + output_col;
 8013d7e:	f85c 9f04 	ldr.w	r9, [ip, #4]!
    /* Odd part */

    z1 = (INT32) wsptr[1];
    z2 = (INT32) wsptr[3];
    z3 = (INT32) wsptr[5];
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8013d82:	f640 37b6 	movw	r7, #2998	; 0xbb6
    outptr = output_buf[ctr] + output_col;
 8013d86:	9b5c      	ldr	r3, [sp, #368]	; 0x170
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 8013d88:	3118      	adds	r1, #24
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8013d8a:	f851 2c08 	ldr.w	r2, [r1, #-8]
  for (ctr = 0; ctr < 12; ctr++) {
 8013d8e:	45e0      	cmp	r8, ip
    outptr = output_buf[ctr] + output_col;
 8013d90:	eb09 0603 	add.w	r6, r9, r3
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013d94:	f851 3c18 	ldr.w	r3, [r1, #-24]
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8013d98:	fb0b f202 	mul.w	r2, fp, r2
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 8013d9c:	f851 0c10 	ldr.w	r0, [r1, #-16]
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013da0:	f103 0310 	add.w	r3, r3, #16
    z3 = (INT32) wsptr[5];
 8013da4:	f851 ec04 	ldr.w	lr, [r1, #-4]
    tmp11 = tmp10 + tmp20;
 8013da8:	eb02 3443 	add.w	r4, r2, r3, lsl #13
    tmp21 = tmp10 - tmp20 - tmp20;
 8013dac:	ebc2 3343 	rsb	r3, r2, r3, lsl #13
 8013db0:	eba3 0302 	sub.w	r3, r3, r2
 8013db4:	9301      	str	r3, [sp, #4]
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 8013db6:	f242 7331 	movw	r3, #10033	; 0x2731
 8013dba:	fb03 f200 	mul.w	r2, r3, r0
    z1 = (INT32) wsptr[1];
 8013dbe:	f851 0c14 	ldr.w	r0, [r1, #-20]
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8013dc2:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    tmp20 = tmp11 + tmp10;
 8013dc6:	eb04 0502 	add.w	r5, r4, r2
    tmp22 = tmp11 - tmp10;
 8013dca:	eba4 0202 	sub.w	r2, r4, r2
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8013dce:	eb00 040e 	add.w	r4, r0, lr
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8013dd2:	ebae 0a03 	sub.w	sl, lr, r3
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8013dd6:	fb07 f404 	mul.w	r4, r7, r4
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 8013dda:	f851 7c0c 	ldr.w	r7, [r1, #-12]
 8013dde:	4407      	add	r7, r0
    tmp11 = (z1 - z2 - z3) << CONST_BITS;
 8013de0:	eba0 0003 	sub.w	r0, r0, r3
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013de4:	9b00      	ldr	r3, [sp, #0]
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 8013de6:	eb04 3747 	add.w	r7, r4, r7, lsl #13
    tmp11 = (z1 - z2 - z3) << CONST_BITS;
 8013dea:	eba0 0e0e 	sub.w	lr, r0, lr
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8013dee:	eb04 344a 	add.w	r4, r4, sl, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013df2:	eb05 0007 	add.w	r0, r5, r7
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013df6:	eba5 0507 	sub.w	r5, r5, r7
			    & RANGE_MASK];
 8013dfa:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 8013dfe:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013e02:	5c18      	ldrb	r0, [r3, r0]
 8013e04:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 8013e06:	f809 0003 	strb.w	r0, [r9, r3]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013e0a:	9b00      	ldr	r3, [sp, #0]
 8013e0c:	5d58      	ldrb	r0, [r3, r5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013e0e:	9b01      	ldr	r3, [sp, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013e10:	7170      	strb	r0, [r6, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013e12:	eb03 304e 	add.w	r0, r3, lr, lsl #13
 8013e16:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8013e18:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013e1c:	5c18      	ldrb	r0, [r3, r0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013e1e:	9b01      	ldr	r3, [sp, #4]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013e20:	7070      	strb	r0, [r6, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013e22:	eba3 3e4e 	sub.w	lr, r3, lr, lsl #13
 8013e26:	9b00      	ldr	r3, [sp, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013e28:	9800      	ldr	r0, [sp, #0]
			    & RANGE_MASK];
 8013e2a:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013e2e:	f813 300e 	ldrb.w	r3, [r3, lr]
 8013e32:	7133      	strb	r3, [r6, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013e34:	eb02 0304 	add.w	r3, r2, r4
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013e38:	eba2 0404 	sub.w	r4, r2, r4
			    & RANGE_MASK];
 8013e3c:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 8013e40:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013e44:	5cc3      	ldrb	r3, [r0, r3]
 8013e46:	70b3      	strb	r3, [r6, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013e48:	5d03      	ldrb	r3, [r0, r4]
 8013e4a:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 12; ctr++) {
 8013e4c:	d197      	bne.n	8013d7e <jpeg_idct_6x12+0x1d6>
  }
}
 8013e4e:	b053      	add	sp, #332	; 0x14c
 8013e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e54:	ffffd0b0 	.word	0xffffd0b0
 8013e58:	ffffeeaf 	.word	0xffffeeaf
 8013e5c:	ffffde8b 	.word	0xffffde8b
 8013e60:	ffffea5c 	.word	0xffffea5c
 8013e64:	ffffc08c 	.word	0xffffc08c

08013e68 <jpeg_idct_5x10>:

GLOBAL(void)
jpeg_idct_5x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e6c:	b0b9      	sub	sp, #228	; 0xe4
 8013e6e:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8013e70:	9303      	str	r3, [sp, #12]
 8013e72:	3904      	subs	r1, #4
  INT32 z1, z2, z3, z4, z5;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013e74:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8013e78:	1e90      	subs	r0, r2, #2
 8013e7a:	3380      	adds	r3, #128	; 0x80
 8013e7c:	9300      	str	r3, [sp, #0]
   * 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8013e7e:	f102 0308 	add.w	r3, r2, #8
  wsptr = workspace;
 8013e82:	aa06      	add	r2, sp, #24
 8013e84:	9305      	str	r3, [sp, #20]
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013e86:	f930 ef02 	ldrsh.w	lr, [r0, #2]!
			CONST_BITS-PASS1_BITS);

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8013e8a:	f641 269a 	movw	r6, #6810	; 0x1a9a
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013e8e:	f851 3f04 	ldr.w	r3, [r1, #4]!
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8013e92:	3204      	adds	r2, #4
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013e94:	f9b0 4040 	ldrsh.w	r4, [r0, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013e98:	fb03 fe0e 	mul.w	lr, r3, lr
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013e9c:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013ea0:	f9b0 b020 	ldrsh.w	fp, [r0, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013ea4:	4363      	muls	r3, r4
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8013ea6:	f242 449d 	movw	r4, #9373	; 0x249d
    z3 <<= CONST_BITS;
 8013eaa:	ea4f 3e4e 	mov.w	lr, lr, lsl #13
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8013eae:	fb04 f503 	mul.w	r5, r4, r3
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8013eb2:	f640 54fc 	movw	r4, #3580	; 0xdfc
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 8013eb6:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8013eba:	4363      	muls	r3, r4
    tmp10 = z3 + z1;
 8013ebc:	eb0e 0a05 	add.w	sl, lr, r5
    tmp11 = z3 - z2;
 8013ec0:	ebae 0403 	sub.w	r4, lr, r3
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8013ec4:	1aeb      	subs	r3, r5, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013ec6:	f9b0 5060 	ldrsh.w	r5, [r0, #96]	; 0x60
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8013eca:	ebae 0343 	sub.w	r3, lr, r3, lsl #1

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013ece:	f9b0 e050 	ldrsh.w	lr, [r0, #80]	; 0x50
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8013ed2:	9304      	str	r3, [sp, #16]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013ed4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013ed6:	fb03 fb0b 	mul.w	fp, r3, fp
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013eda:	f8d1 30c0 	ldr.w	r3, [r1, #192]	; 0xc0
 8013ede:	436b      	muls	r3, r5
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8013ee0:	eb0b 0503 	add.w	r5, fp, r3
 8013ee4:	4375      	muls	r5, r6
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8013ee6:	f241 0671 	movw	r6, #4209	; 0x1071
 8013eea:	fb06 5b0b 	mla	fp, r6, fp, r5
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 8013eee:	4e6c      	ldr	r6, [pc, #432]	; (80140a0 <jpeg_idct_5x10+0x238>)
 8013ef0:	fb06 5303 	mla	r3, r6, r3, r5
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013ef4:	6a0d      	ldr	r5, [r1, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013ef6:	f9b0 6070 	ldrsh.w	r6, [r0, #112]	; 0x70
    tmp20 = tmp10 + tmp12;
 8013efa:	eb0a 0c0b 	add.w	ip, sl, fp
    tmp21 = tmp11 + tmp13;
 8013efe:	18e7      	adds	r7, r4, r3
    tmp23 = tmp11 - tmp13;
 8013f00:	1ae3      	subs	r3, r4, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013f02:	f9b0 4030 	ldrsh.w	r4, [r0, #48]	; 0x30
    tmp24 = tmp10 - tmp12;
 8013f06:	ebaa 0b0b 	sub.w	fp, sl, fp
    tmp23 = tmp11 - tmp13;
 8013f0a:	9301      	str	r3, [sp, #4]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013f0c:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 8013f10:	435d      	muls	r5, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013f12:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 8013f14:	4363      	muls	r3, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013f16:	f8d1 40a0 	ldr.w	r4, [r1, #160]	; 0xa0
 8013f1a:	fb04 fe0e 	mul.w	lr, r4, lr
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013f1e:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
 8013f22:	4374      	muls	r4, r6

    tmp11 = z2 + z4;
 8013f24:	eb03 0904 	add.w	r9, r3, r4
    tmp13 = z2 - z4;
 8013f28:	1b1b      	subs	r3, r3, r4

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8013f2a:	f640 14e3 	movw	r4, #2531	; 0x9e3
 8013f2e:	435c      	muls	r4, r3
 8013f30:	9402      	str	r4, [sp, #8]
    z5 = z3 << CONST_BITS;

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8013f32:	f641 646f 	movw	r4, #7791	; 0x1e6f
 8013f36:	fb04 f609 	mul.w	r6, r4, r9
    z4 = z5 + tmp12;
 8013f3a:	9c02      	ldr	r4, [sp, #8]
 8013f3c:	eb04 3a4e 	add.w	sl, r4, lr, lsl #13

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8013f40:	f642 44b3 	movw	r4, #11443	; 0x2cb3
 8013f44:	fb04 6805 	mla	r8, r4, r5, r6
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8013f48:	f240 7414 	movw	r4, #1812	; 0x714
 8013f4c:	436c      	muls	r4, r5
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8013f4e:	44d0      	add	r8, sl
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8013f50:	1ba6      	subs	r6, r4, r6

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8013f52:	9c02      	ldr	r4, [sp, #8]
 8013f54:	ebc4 344e 	rsb	r4, r4, lr, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8013f58:	44b2      	add	sl, r6
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8013f5a:	f241 26cf 	movw	r6, #4815	; 0x12cf
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8013f5e:	eba4 3403 	sub.w	r4, r4, r3, lsl #12

    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8013f62:	1aeb      	subs	r3, r5, r3
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8013f64:	fb06 f909 	mul.w	r9, r6, r9

    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8013f68:	f642 0653 	movw	r6, #10323	; 0x2853
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8013f6c:	eba3 0e0e 	sub.w	lr, r3, lr
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8013f70:	f241 438c 	movw	r3, #5260	; 0x148c
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8013f74:	436e      	muls	r6, r5
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8013f76:	435d      	muls	r5, r3

    /* Final output stage */

    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013f78:	eb0c 0308 	add.w	r3, ip, r8
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8013f7c:	eba6 0609 	sub.w	r6, r6, r9
    wsptr[5*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013f80:	ebac 0c08 	sub.w	ip, ip, r8
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013f84:	12db      	asrs	r3, r3, #11
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8013f86:	eba5 0909 	sub.w	r9, r5, r9
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8013f8a:	1b36      	subs	r6, r6, r4
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8013f8c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013f90:	f842 3c04 	str.w	r3, [r2, #-4]
    wsptr[5*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013f94:	ea4f 23ec 	mov.w	r3, ip, asr #11
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8013f98:	444c      	add	r4, r9
    wsptr[5*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013f9a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8013f9e:	19bb      	adds	r3, r7, r6
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8013fa0:	1bbf      	subs	r7, r7, r6
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8013fa2:	12db      	asrs	r3, r3, #11
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8013fa4:	12ff      	asrs	r7, r7, #11
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8013fa6:	6113      	str	r3, [r2, #16]
    wsptr[5*2] = (int) (tmp22 + tmp12);
 8013fa8:	9b04      	ldr	r3, [sp, #16]
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8013faa:	f8c2 709c 	str.w	r7, [r2, #156]	; 0x9c
    wsptr[5*2] = (int) (tmp22 + tmp12);
 8013fae:	eb0e 23e3 	add.w	r3, lr, r3, asr #11
 8013fb2:	6253      	str	r3, [r2, #36]	; 0x24
    wsptr[5*7] = (int) (tmp22 - tmp12);
 8013fb4:	9b04      	ldr	r3, [sp, #16]
 8013fb6:	ebce 23e3 	rsb	r3, lr, r3, asr #11
 8013fba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8013fbe:	9b01      	ldr	r3, [sp, #4]
 8013fc0:	4423      	add	r3, r4
 8013fc2:	12db      	asrs	r3, r3, #11
 8013fc4:	6393      	str	r3, [r2, #56]	; 0x38
    wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8013fc6:	9b01      	ldr	r3, [sp, #4]
 8013fc8:	1b1c      	subs	r4, r3, r4
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8013fca:	eb0b 030a 	add.w	r3, fp, sl
    wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8013fce:	ebab 0a0a 	sub.w	sl, fp, sl
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8013fd2:	12db      	asrs	r3, r3, #11
    wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8013fd4:	12e4      	asrs	r4, r4, #11
    wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8013fd6:	ea4f 26ea 	mov.w	r6, sl, asr #11
    wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8013fda:	6754      	str	r4, [r2, #116]	; 0x74
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8013fdc:	64d3      	str	r3, [r2, #76]	; 0x4c
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8013fde:	9b05      	ldr	r3, [sp, #20]
    wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8013fe0:	6616      	str	r6, [r2, #96]	; 0x60
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8013fe2:	4283      	cmp	r3, r0
 8013fe4:	f47f af4f 	bne.w	8013e86 <jpeg_idct_5x10+0x1e>
 8013fe8:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 10 rows from work array, store into output array.
   * 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
   */
  wsptr = workspace;
 8013fea:	a906      	add	r1, sp, #24
    /* Add fudge factor here for final descale. */
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp12 <<= CONST_BITS;
    tmp13 = (INT32) wsptr[2];
    tmp14 = (INT32) wsptr[4];
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8013fec:	f641 1a4c 	movw	sl, #6476	; 0x194c
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8013ff0:	f44f 6935 	mov.w	r9, #2896	; 0xb50
 8013ff4:	f1a3 0c04 	sub.w	ip, r3, #4
    /* Odd part */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8013ff8:	f641 289a 	movw	r8, #6810	; 0x1a9a
 8013ffc:	3324      	adds	r3, #36	; 0x24
 8013ffe:	9302      	str	r3, [sp, #8]
    outptr = output_buf[ctr] + output_col;
 8014000:	f85c ef04 	ldr.w	lr, [ip, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 5;		/* advance pointer to next row */
 8014004:	3114      	adds	r1, #20
    outptr = output_buf[ctr] + output_col;
 8014006:	9b42      	ldr	r3, [sp, #264]	; 0x108
    tmp14 = (INT32) wsptr[4];
 8014008:	f851 0c04 	ldr.w	r0, [r1, #-4]
    outptr = output_buf[ctr] + output_col;
 801400c:	eb0e 0603 	add.w	r6, lr, r3
    tmp13 = (INT32) wsptr[2];
 8014010:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014014:	f851 7c14 	ldr.w	r7, [r1, #-20]
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8014018:	181a      	adds	r2, r3, r0
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 801401a:	1a1b      	subs	r3, r3, r0
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801401c:	3710      	adds	r7, #16
    z3 = (INT32) wsptr[3];
 801401e:	f851 bc08 	ldr.w	fp, [r1, #-8]
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8014022:	fb09 f303 	mul.w	r3, r9, r3
    z2 = (INT32) wsptr[1];
 8014026:	f851 5c10 	ldr.w	r5, [r1, #-16]
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 801402a:	fb0a f202 	mul.w	r2, sl, r2
    z3 = tmp12 + z2;
 801402e:	eb03 3447 	add.w	r4, r3, r7, lsl #13
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8014032:	9301      	str	r3, [sp, #4]
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 8014034:	f241 0371 	movw	r3, #4209	; 0x1071
    tmp10 = z3 + z1;
 8014038:	1910      	adds	r0, r2, r4
    tmp11 = z3 - z1;
 801403a:	1aa2      	subs	r2, r4, r2
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 801403c:	eb05 040b 	add.w	r4, r5, fp
 8014040:	fb08 f404 	mul.w	r4, r8, r4
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 8014044:	fb03 4505 	mla	r5, r3, r5, r4
    tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 8014048:	4b15      	ldr	r3, [pc, #84]	; (80140a0 <jpeg_idct_5x10+0x238>)
 801404a:	fb03 440b 	mla	r4, r3, fp, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp13,
 801404e:	eb00 0b05 	add.w	fp, r0, r5
 8014052:	9b00      	ldr	r3, [sp, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp13,
 8014054:	1b40      	subs	r0, r0, r5
			    & RANGE_MASK];
 8014056:	f3cb 4b89 	ubfx	fp, fp, #18, #10
			    & RANGE_MASK];
 801405a:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp13,
 801405e:	f813 b00b 	ldrb.w	fp, [r3, fp]
 8014062:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8014064:	f80e b003 	strb.w	fp, [lr, r3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp13,
 8014068:	9b00      	ldr	r3, [sp, #0]
 801406a:	5c18      	ldrb	r0, [r3, r0]
 801406c:	7130      	strb	r0, [r6, #4]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp14,
 801406e:	1910      	adds	r0, r2, r4
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 8014070:	1b12      	subs	r2, r2, r4
			    & RANGE_MASK];
 8014072:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 8014076:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp14,
 801407a:	5c18      	ldrb	r0, [r3, r0]
 801407c:	7070      	strb	r0, [r6, #1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 801407e:	5c9a      	ldrb	r2, [r3, r2]
    tmp12 -= z2 << 2;
 8014080:	9b01      	ldr	r3, [sp, #4]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 8014082:	70f2      	strb	r2, [r6, #3]
    tmp12 -= z2 << 2;
 8014084:	009b      	lsls	r3, r3, #2
 8014086:	ebc3 3747 	rsb	r7, r3, r7, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 801408a:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 801408c:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 8014090:	5ddb      	ldrb	r3, [r3, r7]
 8014092:	70b3      	strb	r3, [r6, #2]
  for (ctr = 0; ctr < 10; ctr++) {
 8014094:	9b02      	ldr	r3, [sp, #8]
 8014096:	4563      	cmp	r3, ip
 8014098:	d1b2      	bne.n	8014000 <jpeg_idct_5x10+0x198>
  }
}
 801409a:	b039      	add	sp, #228	; 0xe4
 801409c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140a0:	ffffba5c 	.word	0xffffba5c

080140a4 <jpeg_idct_4x8>:

GLOBAL(void)
jpeg_idct_4x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80140a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140a8:	b0a7      	sub	sp, #156	; 0x9c
 80140aa:	3a02      	subs	r2, #2
 80140ac:	9304      	str	r3, [sp, #16]
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80140ae:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 80140b2:	6d48      	ldr	r0, [r1, #84]	; 0x54
  wsptr = workspace;
 80140b4:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80140b6:	3380      	adds	r3, #128	; 0x80
 80140b8:	9301      	str	r3, [sp, #4]
  for (ctr = 4; ctr > 0; ctr--) {
 80140ba:	f100 0310 	add.w	r3, r0, #16
 80140be:	9305      	str	r3, [sp, #20]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */

    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 80140c0:	f9b2 a012 	ldrsh.w	sl, [r2, #18]
 80140c4:	3104      	adds	r1, #4
 80140c6:	f9b2 4022 	ldrsh.w	r4, [r2, #34]	; 0x22
 80140ca:	f9b2 c032 	ldrsh.w	ip, [r2, #50]	; 0x32
 80140ce:	f9b2 e042 	ldrsh.w	lr, [r2, #66]	; 0x42
 80140d2:	f9b2 8052 	ldrsh.w	r8, [r2, #82]	; 0x52
 80140d6:	f9b2 3062 	ldrsh.w	r3, [r2, #98]	; 0x62
 80140da:	f9b2 9072 	ldrsh.w	r9, [r2, #114]	; 0x72
 80140de:	f850 7b04 	ldr.w	r7, [r0], #4
 80140e2:	f932 5f02 	ldrsh.w	r5, [r2, #2]!
 80140e6:	436f      	muls	r7, r5
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 80140e8:	ea4a 0504 	orr.w	r5, sl, r4
 80140ec:	ea4c 0505 	orr.w	r5, ip, r5
 80140f0:	ea4e 0505 	orr.w	r5, lr, r5
 80140f4:	ea48 0505 	orr.w	r5, r8, r5
 80140f8:	431d      	orrs	r5, r3
 80140fa:	ea59 0505 	orrs.w	r5, r9, r5
 80140fe:	d155      	bne.n	80141ac <jpeg_idct_4x8+0x108>
	inptr[DCTSIZE*7] == 0) {
      /* AC terms all zero */
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8014100:	00bf      	lsls	r7, r7, #2

      wsptr[4*0] = dcval;
 8014102:	f841 7c04 	str.w	r7, [r1, #-4]
      wsptr[4*1] = dcval;
 8014106:	60cf      	str	r7, [r1, #12]
      wsptr[4*2] = dcval;
 8014108:	61cf      	str	r7, [r1, #28]
      wsptr[4*3] = dcval;
 801410a:	62cf      	str	r7, [r1, #44]	; 0x2c
      wsptr[4*4] = dcval;
 801410c:	63cf      	str	r7, [r1, #60]	; 0x3c
      wsptr[4*5] = dcval;
 801410e:	64cf      	str	r7, [r1, #76]	; 0x4c
      wsptr[4*6] = dcval;
 8014110:	65cf      	str	r7, [r1, #92]	; 0x5c
      wsptr[4*7] = dcval;
 8014112:	66cf      	str	r7, [r1, #108]	; 0x6c
  for (ctr = 4; ctr > 0; ctr--) {
 8014114:	9b05      	ldr	r3, [sp, #20]
 8014116:	4283      	cmp	r3, r0
 8014118:	d1d2      	bne.n	80140c0 <jpeg_idct_4x8+0x1c>
 801411a:	9b04      	ldr	r3, [sp, #16]
  }

  /* Pass 2: process 8 rows from work array, store into output array.
   * 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
   */
  wsptr = workspace;
 801411c:	ac06      	add	r4, sp, #24
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 801411e:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8014122:	f641 0e7e 	movw	lr, #6270	; 0x187e
 8014126:	1f1d      	subs	r5, r3, #4
 8014128:	f103 0b1c 	add.w	fp, r3, #28
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 801412c:	f8df c184 	ldr.w	ip, [pc, #388]	; 80142b4 <jpeg_idct_4x8+0x210>
    outptr = output_buf[ctr] + output_col;
 8014130:	f855 7f04 	ldr.w	r7, [r5, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    
    wsptr += 4;		/* advance pointer to next row */
 8014134:	3410      	adds	r4, #16
    outptr = output_buf[ctr] + output_col;
 8014136:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014138:	f854 0c10 	ldr.w	r0, [r4, #-16]
  for (ctr = 0; ctr < 8; ctr++) {
 801413c:	45ab      	cmp	fp, r5
    outptr = output_buf[ctr] + output_col;
 801413e:	eb07 0602 	add.w	r6, r7, r2
    z3 = (INT32) wsptr[3];
 8014142:	f854 ac04 	ldr.w	sl, [r4, #-4]
    tmp2 = (INT32) wsptr[2];
 8014146:	f854 2c08 	ldr.w	r2, [r4, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801414a:	f100 0010 	add.w	r0, r0, #16
    z2 = (INT32) wsptr[1];
 801414e:	f854 1c0c 	ldr.w	r1, [r4, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8014152:	eb00 0902 	add.w	r9, r0, r2
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8014156:	eba0 0002 	sub.w	r0, r0, r2
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 801415a:	eb01 020a 	add.w	r2, r1, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801415e:	9b01      	ldr	r3, [sp, #4]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8014160:	fb08 f202 	mul.w	r2, r8, r2
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8014164:	fb0e 2101 	mla	r1, lr, r1, r2
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8014168:	fb0c 220a 	mla	r2, ip, sl, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801416c:	eb01 3a49 	add.w	sl, r1, r9, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014170:	ebc1 3149 	rsb	r1, r1, r9, lsl #13
			    & RANGE_MASK];
 8014174:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 8014178:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801417c:	f813 a00a 	ldrb.w	sl, [r3, sl]
 8014180:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8014182:	f807 a003 	strb.w	sl, [r7, r3]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014186:	9b01      	ldr	r3, [sp, #4]
 8014188:	5c59      	ldrb	r1, [r3, r1]
 801418a:	70f1      	strb	r1, [r6, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801418c:	eb02 3140 	add.w	r1, r2, r0, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8014190:	ebc2 3240 	rsb	r2, r2, r0, lsl #13
			    & RANGE_MASK];
 8014194:	f3c1 4189 	ubfx	r1, r1, #18, #10
			    & RANGE_MASK];
 8014198:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801419c:	5c59      	ldrb	r1, [r3, r1]
 801419e:	7071      	strb	r1, [r6, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80141a0:	5c9a      	ldrb	r2, [r3, r2]
 80141a2:	70b2      	strb	r2, [r6, #2]
  for (ctr = 0; ctr < 8; ctr++) {
 80141a4:	d1c4      	bne.n	8014130 <jpeg_idct_4x8+0x8c>
  }
}
 80141a6:	b027      	add	sp, #156	; 0x9c
 80141a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80141ac:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80141ae:	f8d0 50bc 	ldr.w	r5, [r0, #188]	; 0xbc
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80141b2:	4366      	muls	r6, r4
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80141b4:	f241 1451 	movw	r4, #4433	; 0x1151
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80141b8:	435d      	muls	r5, r3
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80141ba:	1973      	adds	r3, r6, r5
 80141bc:	4363      	muls	r3, r4
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 80141be:	f641 047e 	movw	r4, #6270	; 0x187e
 80141c2:	fb04 3606 	mla	r6, r4, r6, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 80141c6:	4c3b      	ldr	r4, [pc, #236]	; (80142b4 <jpeg_idct_4x8+0x210>)
 80141c8:	fb04 3505 	mla	r5, r4, r5, r3
    z2 <<= CONST_BITS;
 80141cc:	037b      	lsls	r3, r7, #13
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80141ce:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 80141d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80141d4:	fb04 f40e 	mul.w	r4, r4, lr
    tmp0 = z2 + z3;
 80141d8:	eb03 3b44 	add.w	fp, r3, r4, lsl #13
    tmp1 = z2 - z3;
 80141dc:	eba3 3344 	sub.w	r3, r3, r4, lsl #13
    tmp13 = tmp0 - tmp2;
 80141e0:	ebab 0406 	sub.w	r4, fp, r6
    tmp10 = tmp0 + tmp2;
 80141e4:	eb06 070b 	add.w	r7, r6, fp
    tmp11 = tmp1 + tmp3;
 80141e8:	18ee      	adds	r6, r5, r3
    tmp12 = tmp1 - tmp3;
 80141ea:	1b5b      	subs	r3, r3, r5
    tmp13 = tmp0 - tmp2;
 80141ec:	9402      	str	r4, [sp, #8]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80141ee:	f8d0 40dc 	ldr.w	r4, [r0, #220]	; 0xdc
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80141f2:	69c5      	ldr	r5, [r0, #28]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80141f4:	fb04 f909 	mul.w	r9, r4, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80141f8:	f8d0 409c 	ldr.w	r4, [r0, #156]	; 0x9c
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80141fc:	fb05 fa0a 	mul.w	sl, r5, sl
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014200:	fb04 f808 	mul.w	r8, r4, r8
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014204:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
    tmp12 = tmp1 - tmp3;
 8014206:	9303      	str	r3, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8014208:	f242 53a1 	movw	r3, #9633	; 0x25a1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801420c:	fb04 fc0c 	mul.w	ip, r4, ip
    z3 = tmp1 + tmp3;
 8014210:	eb08 0e0a 	add.w	lr, r8, sl
    z2 = tmp0 + tmp2;
 8014214:	eb09 050c 	add.w	r5, r9, ip
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8014218:	eb05 040e 	add.w	r4, r5, lr
 801421c:	435c      	muls	r4, r3
    z2 += z1;
 801421e:	4b26      	ldr	r3, [pc, #152]	; (80142b8 <jpeg_idct_4x8+0x214>)
 8014220:	fb03 4505 	mla	r5, r3, r5, r4
    z3 += z1;
 8014224:	4b25      	ldr	r3, [pc, #148]	; (80142bc <jpeg_idct_4x8+0x218>)
 8014226:	fb03 440e 	mla	r4, r3, lr, r4
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 801422a:	eb09 0e0a 	add.w	lr, r9, sl
 801422e:	4b24      	ldr	r3, [pc, #144]	; (80142c0 <jpeg_idct_4x8+0x21c>)
 8014230:	fb03 fe0e 	mul.w	lr, r3, lr
    tmp0 += z1 + z2;
 8014234:	f640 138e 	movw	r3, #2446	; 0x98e
 8014238:	eb05 0b0e 	add.w	fp, r5, lr
    tmp3 += z1 + z3;
 801423c:	44a6      	add	lr, r4
    tmp0 += z1 + z2;
 801423e:	fb03 b909 	mla	r9, r3, r9, fp
    tmp3 += z1 + z3;
 8014242:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8014246:	4b1f      	ldr	r3, [pc, #124]	; (80142c4 <jpeg_idct_4x8+0x220>)
    tmp3 += z1 + z3;
 8014248:	fb0b ee0a 	mla	lr, fp, sl, lr
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801424c:	eb08 0a0c 	add.w	sl, r8, ip
    tmp1 += z1 + z3;
 8014250:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8014254:	fb03 fa0a 	mul.w	sl, r3, sl
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8014258:	9b03      	ldr	r3, [sp, #12]
    tmp2 += z1 + z2;
 801425a:	4455      	add	r5, sl
    tmp1 += z1 + z3;
 801425c:	4454      	add	r4, sl
    tmp2 += z1 + z2;
 801425e:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 8014262:	fb0b 4408 	mla	r4, fp, r8, r4
    tmp2 += z1 + z2;
 8014266:	fb0a 5a0c 	mla	sl, sl, ip, r5
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 801426a:	eb07 050e 	add.w	r5, r7, lr
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 801426e:	eba7 0e0e 	sub.w	lr, r7, lr
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8014272:	12ed      	asrs	r5, r5, #11
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8014274:	ea4f 27ee 	mov.w	r7, lr, asr #11
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8014278:	f841 5c04 	str.w	r5, [r1, #-4]
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 801427c:	eb06 050a 	add.w	r5, r6, sl
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8014280:	eba6 0a0a 	sub.w	sl, r6, sl
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8014284:	66cf      	str	r7, [r1, #108]	; 0x6c
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8014286:	12ed      	asrs	r5, r5, #11
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8014288:	ea4f 26ea 	mov.w	r6, sl, asr #11
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 801428c:	60cd      	str	r5, [r1, #12]
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 801428e:	191d      	adds	r5, r3, r4
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8014290:	1b1c      	subs	r4, r3, r4
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8014292:	9b02      	ldr	r3, [sp, #8]
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8014294:	12ed      	asrs	r5, r5, #11
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8014296:	65ce      	str	r6, [r1, #92]	; 0x5c
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8014298:	444b      	add	r3, r9
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 801429a:	12e4      	asrs	r4, r4, #11
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 801429c:	61cd      	str	r5, [r1, #28]
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 801429e:	12db      	asrs	r3, r3, #11
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 80142a0:	64cc      	str	r4, [r1, #76]	; 0x4c
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 80142a2:	62cb      	str	r3, [r1, #44]	; 0x2c
    wsptr[4*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 80142a4:	9b02      	ldr	r3, [sp, #8]
 80142a6:	eba3 0909 	sub.w	r9, r3, r9
 80142aa:	ea4f 23e9 	mov.w	r3, r9, asr #11
 80142ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    wsptr++;
 80142b0:	e730      	b.n	8014114 <jpeg_idct_4x8+0x70>
 80142b2:	bf00      	nop
 80142b4:	ffffc4df 	.word	0xffffc4df
 80142b8:	ffffc13b 	.word	0xffffc13b
 80142bc:	fffff384 	.word	0xfffff384
 80142c0:	ffffe333 	.word	0xffffe333
 80142c4:	ffffadfd 	.word	0xffffadfd

080142c8 <jpeg_idct_3x6>:

GLOBAL(void)
jpeg_idct_3x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80142c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80142cc:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 80142d0:	b095      	sub	sp, #84	; 0x54
 80142d2:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 80142d4:	1e95      	subs	r5, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80142d6:	f100 0e80 	add.w	lr, r0, #128	; 0x80
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 80142da:	3204      	adds	r2, #4
 80142dc:	3c04      	subs	r4, #4
  wsptr = workspace;
 80142de:	ae02      	add	r6, sp, #8
{
 80142e0:	9300      	str	r3, [sp, #0]
 80142e2:	9201      	str	r2, [sp, #4]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80142e4:	f935 2f02 	ldrsh.w	r2, [r5, #2]!
    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80142e8:	f640 33b6 	movw	r3, #2998	; 0xbb6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80142ec:	f854 1f04 	ldr.w	r1, [r4, #4]!
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 80142f0:	3604      	adds	r6, #4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80142f2:	f9b5 0040 	ldrsh.w	r0, [r5, #64]	; 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80142f6:	4351      	muls	r1, r2
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80142f8:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80142fc:	f9b5 7020 	ldrsh.w	r7, [r5, #32]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014300:	4342      	muls	r2, r0
    tmp0 <<= CONST_BITS;
 8014302:	0349      	lsls	r1, r1, #13
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8014304:	f241 60a1 	movw	r0, #5793	; 0x16a1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014308:	f9b5 9030 	ldrsh.w	r9, [r5, #48]	; 0x30
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 801430c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014310:	f9b5 8050 	ldrsh.w	r8, [r5, #80]	; 0x50
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8014314:	4342      	muls	r2, r0
    tmp1 = tmp0 + tmp10;
 8014316:	1888      	adds	r0, r1, r2
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
 8014318:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801431c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801431e:	437a      	muls	r2, r7
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8014320:	f242 7731 	movw	r7, #10033	; 0x2731
 8014324:	437a      	muls	r2, r7
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014326:	f9b5 7010 	ldrsh.w	r7, [r5, #16]
    tmp10 = tmp1 + tmp0;
 801432a:	eb00 0c02 	add.w	ip, r0, r2
    tmp12 = tmp1 - tmp0;
 801432e:	1a80      	subs	r0, r0, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014330:	6a22      	ldr	r2, [r4, #32]
 8014332:	437a      	muls	r2, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014334:	6e27      	ldr	r7, [r4, #96]	; 0x60
 8014336:	fb07 f909 	mul.w	r9, r7, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801433a:	f8d4 70a0 	ldr.w	r7, [r4, #160]	; 0xa0
 801433e:	fb07 f808 	mul.w	r8, r7, r8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8014342:	eb02 0a09 	add.w	sl, r2, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014346:	eb02 0708 	add.w	r7, r2, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 801434a:	eba8 0b09 	sub.w	fp, r8, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 801434e:	435f      	muls	r7, r3
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8014350:	9b01      	ldr	r3, [sp, #4]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8014352:	eb07 3a4a 	add.w	sl, r7, sl, lsl #13
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8014356:	42ab      	cmp	r3, r5
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8014358:	eb07 3b4b 	add.w	fp, r7, fp, lsl #13
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 801435c:	eba2 0709 	sub.w	r7, r2, r9

    /* Final output stage */

    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8014360:	eb0c 020a 	add.w	r2, ip, sl
    wsptr[3*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8014364:	ebac 0c0a 	sub.w	ip, ip, sl
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8014368:	eba7 0808 	sub.w	r8, r7, r8
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801436c:	ea4f 22e2 	mov.w	r2, r2, asr #11
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8014370:	ea4f 0888 	mov.w	r8, r8, lsl #2
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8014374:	f846 2c04 	str.w	r2, [r6, #-4]
    wsptr[3*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8014378:	ea4f 22ec 	mov.w	r2, ip, asr #11
 801437c:	63b2      	str	r2, [r6, #56]	; 0x38
    wsptr[3*1] = (int) (tmp11 + tmp1);
 801437e:	eb08 22e1 	add.w	r2, r8, r1, asr #11
    wsptr[3*4] = (int) (tmp11 - tmp1);
 8014382:	ebc8 21e1 	rsb	r1, r8, r1, asr #11
    wsptr[3*1] = (int) (tmp11 + tmp1);
 8014386:	60b2      	str	r2, [r6, #8]
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8014388:	eb00 020b 	add.w	r2, r0, fp
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 801438c:	eba0 0b0b 	sub.w	fp, r0, fp
    wsptr[3*4] = (int) (tmp11 - tmp1);
 8014390:	62f1      	str	r1, [r6, #44]	; 0x2c
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8014392:	ea4f 22e2 	mov.w	r2, r2, asr #11
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8014396:	ea4f 20eb 	mov.w	r0, fp, asr #11
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 801439a:	6172      	str	r2, [r6, #20]
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 801439c:	6230      	str	r0, [r6, #32]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 801439e:	d1a1      	bne.n	80142e4 <jpeg_idct_3x6+0x1c>
 80143a0:	9b00      	ldr	r3, [sp, #0]
  }

  /* Pass 2: process 6 rows from work array, store into output array.
   * 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
   */
  wsptr = workspace;
 80143a2:	a902      	add	r1, sp, #8

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[2];
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 80143a4:	f241 6ca1 	movw	ip, #5793	; 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = (INT32) wsptr[1];
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 80143a8:	f242 7b31 	movw	fp, #10033	; 0x2731
 80143ac:	1f1d      	subs	r5, r3, #4
 80143ae:	3314      	adds	r3, #20
    outptr = output_buf[ctr] + output_col;
 80143b0:	f855 9f04 	ldr.w	r9, [r5, #4]!
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 3;		/* advance pointer to next row */
 80143b4:	310c      	adds	r1, #12
    outptr = output_buf[ctr] + output_col;
 80143b6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 80143b8:	f851 0c04 	ldr.w	r0, [r1, #-4]
  for (ctr = 0; ctr < 6; ctr++) {
 80143bc:	42ab      	cmp	r3, r5
    outptr = output_buf[ctr] + output_col;
 80143be:	eb09 0602 	add.w	r6, r9, r2
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80143c2:	f851 2c0c 	ldr.w	r2, [r1, #-12]
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 80143c6:	fb0c f000 	mul.w	r0, ip, r0
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 80143ca:	f851 4c08 	ldr.w	r4, [r1, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80143ce:	f102 0210 	add.w	r2, r2, #16
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80143d2:	9f1e      	ldr	r7, [sp, #120]	; 0x78
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 80143d4:	fb0b f404 	mul.w	r4, fp, r4
    tmp10 = tmp0 + tmp12;
 80143d8:	eb00 3842 	add.w	r8, r0, r2, lsl #13
    tmp2 = tmp0 - tmp12 - tmp12;
 80143dc:	ebc0 3242 	rsb	r2, r0, r2, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80143e0:	eb08 0a04 	add.w	sl, r8, r4
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80143e4:	eba8 0804 	sub.w	r8, r8, r4
    tmp2 = tmp0 - tmp12 - tmp12;
 80143e8:	eba2 0200 	sub.w	r2, r2, r0
			    & RANGE_MASK];
 80143ec:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 80143f0:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 80143f4:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80143f8:	f81e a00a 	ldrb.w	sl, [lr, sl]
 80143fc:	f809 a007 	strb.w	sl, [r9, r7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014400:	f81e 4008 	ldrb.w	r4, [lr, r8]
 8014404:	70b4      	strb	r4, [r6, #2]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 8014406:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801440a:	7072      	strb	r2, [r6, #1]
  for (ctr = 0; ctr < 6; ctr++) {
 801440c:	d1d0      	bne.n	80143b0 <jpeg_idct_3x6+0xe8>
  }
}
 801440e:	b015      	add	sp, #84	; 0x54
 8014410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014414 <jpeg_idct_2x4>:

GLOBAL(void)
jpeg_idct_2x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  INT32 * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014418:	f8d0 714c 	ldr.w	r7, [r0, #332]	; 0x14c
{
 801441c:	b08b      	sub	sp, #44	; 0x2c
 801441e:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8014420:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014422:	f107 0080 	add.w	r0, r7, #128	; 0x80
   * 4-point IDCT kernel,
   * cK represents sqrt(2) * cos(K*pi/16) [refers to 8-point IDCT].
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8014426:	ad02      	add	r5, sp, #8
 8014428:	3c04      	subs	r4, #4
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 801442a:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 801442e:	f641 0e7e 	movw	lr, #6270	; 0x187e
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014432:	9001      	str	r0, [sp, #4]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014434:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8014438:	46b4      	mov	ip, r6
 801443a:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 801443e:	3504      	adds	r5, #4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014440:	6c27      	ldr	r7, [r4, #64]	; 0x40
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 8014442:	4562      	cmp	r2, ip
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014444:	fb00 f001 	mul.w	r0, r0, r1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014448:	f9b6 1020 	ldrsh.w	r1, [r6, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801444c:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014450:	fb07 f101 	mul.w	r1, r7, r1
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014454:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8014458:	4f22      	ldr	r7, [pc, #136]	; (80144e4 <jpeg_idct_2x4+0xd0>)
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 801445a:	eb00 0901 	add.w	r9, r0, r1
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 801445e:	eba0 0001 	sub.w	r0, r0, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014462:	6a21      	ldr	r1, [r4, #32]
 8014464:	fb01 fa0a 	mul.w	sl, r1, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014468:	6e21      	ldr	r1, [r4, #96]	; 0x60
 801446a:	fb01 f10b 	mul.w	r1, r1, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 801446e:	eb0a 0b01 	add.w	fp, sl, r1
 8014472:	fb08 fb0b 	mul.w	fp, r8, fp
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8014476:	fb0e ba0a 	mla	sl, lr, sl, fp
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 801447a:	fb07 bb01 	mla	fp, r7, r1, fp

    /* Final output stage */

    wsptr[2*0] = tmp10 + tmp0;
 801447e:	eb0a 3149 	add.w	r1, sl, r9, lsl #13
 8014482:	f845 1c04 	str.w	r1, [r5, #-4]
    wsptr[2*3] = tmp10 - tmp0;
 8014486:	ebca 3149 	rsb	r1, sl, r9, lsl #13
 801448a:	6169      	str	r1, [r5, #20]
    wsptr[2*1] = tmp12 + tmp2;
 801448c:	eb0b 3140 	add.w	r1, fp, r0, lsl #13
    wsptr[2*2] = tmp12 - tmp2;
 8014490:	ebcb 3040 	rsb	r0, fp, r0, lsl #13
    wsptr[2*1] = tmp12 + tmp2;
 8014494:	6069      	str	r1, [r5, #4]
    wsptr[2*2] = tmp12 - tmp2;
 8014496:	60e8      	str	r0, [r5, #12]
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 8014498:	d1cc      	bne.n	8014434 <jpeg_idct_2x4+0x20>
 801449a:	1f18      	subs	r0, r3, #4
  }

  /* Pass 2: process 4 rows from work array, store into output array. */

  wsptr = workspace;
 801449c:	a902      	add	r1, sp, #8
 801449e:	330c      	adds	r3, #12
  for (ctr = 0; ctr < 4; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80144a0:	f850 6f04 	ldr.w	r6, [r0, #4]!
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
			    & RANGE_MASK];

    wsptr += 2;		/* advance pointer to next row */
 80144a4:	3108      	adds	r1, #8
    outptr = output_buf[ctr] + output_col;
 80144a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
    tmp0 = wsptr[1];
 80144a8:	f851 5c04 	ldr.w	r5, [r1, #-4]
  for (ctr = 0; ctr < 4; ctr++) {
 80144ac:	4283      	cmp	r3, r0
    outptr = output_buf[ctr] + output_col;
 80144ae:	eb06 0c02 	add.w	ip, r6, r2
    tmp10 = wsptr[0] + (ONE << (CONST_BITS+2));
 80144b2:	f851 2c08 	ldr.w	r2, [r1, #-8]
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 80144b6:	9f01      	ldr	r7, [sp, #4]
    tmp10 = wsptr[0] + (ONE << (CONST_BITS+2));
 80144b8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 80144bc:	eb02 0405 	add.w	r4, r2, r5
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
 80144c0:	eba2 0205 	sub.w	r2, r2, r5
			    & RANGE_MASK];
 80144c4:	f3c4 4409 	ubfx	r4, r4, #16, #10
			    & RANGE_MASK];
 80144c8:	f3c2 4209 	ubfx	r2, r2, #16, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 80144cc:	5d3c      	ldrb	r4, [r7, r4]
 80144ce:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80144d0:	55f4      	strb	r4, [r6, r7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
 80144d2:	9c01      	ldr	r4, [sp, #4]
 80144d4:	5ca2      	ldrb	r2, [r4, r2]
 80144d6:	f88c 2001 	strb.w	r2, [ip, #1]
  for (ctr = 0; ctr < 4; ctr++) {
 80144da:	d1e1      	bne.n	80144a0 <jpeg_idct_2x4+0x8c>
  }
}
 80144dc:	b00b      	add	sp, #44	; 0x2c
 80144de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144e2:	bf00      	nop
 80144e4:	ffffc4df 	.word	0xffffc4df

080144e8 <jpeg_idct_1x2>:

GLOBAL(void)
jpeg_idct_1x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80144e8:	b570      	push	{r4, r5, r6, lr}
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* Process 1 column from input, store into output array. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 80144ea:	6d4c      	ldr	r4, [r1, #84]	; 0x54

  /* Even part */
    
  tmp10 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80144ec:	f9b2 6000 	ldrsh.w	r6, [r2]
 80144f0:	6821      	ldr	r1, [r4, #0]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80144f2:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
  tmp10 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80144f6:	4371      	muls	r1, r6
  /* Add fudge factor here for final descale. */
  tmp10 += ONE << 2;

  /* Odd part */

  tmp0 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80144f8:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 80144fc:	6a22      	ldr	r2, [r4, #32]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80144fe:	3080      	adds	r0, #128	; 0x80
  tmp10 += ONE << 2;
 8014500:	3104      	adds	r1, #4
{
 8014502:	9d04      	ldr	r5, [sp, #16]
  tmp0 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014504:	4372      	muls	r2, r6

  /* Final output stage */

  output_buf[0][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3)
 8014506:	188c      	adds	r4, r1, r2
					  & RANGE_MASK];
  output_buf[1][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3)
 8014508:	1a89      	subs	r1, r1, r2
					  & RANGE_MASK];
 801450a:	f3c4 04c9 	ubfx	r4, r4, #3, #10
					  & RANGE_MASK];
 801450e:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  output_buf[0][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3)
 8014512:	5d06      	ldrb	r6, [r0, r4]
 8014514:	681c      	ldr	r4, [r3, #0]
 8014516:	5566      	strb	r6, [r4, r5]
  output_buf[1][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3)
 8014518:	5c42      	ldrb	r2, [r0, r1]
 801451a:	685b      	ldr	r3, [r3, #4]
 801451c:	555a      	strb	r2, [r3, r5]
}
 801451e:	bd70      	pop	{r4, r5, r6, pc}

08014520 <out_of_memory>:
/* If we compiled MEM_STATS support, report alloc requests before dying */
{
#ifdef MEM_STATS
  cinfo->err->trace_level = 2;	/* force self_destruct to report stats */
#endif
  ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, which);
 8014520:	6803      	ldr	r3, [r0, #0]
 8014522:	2238      	movs	r2, #56	; 0x38
 8014524:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	4718      	bx	r3

0801452c <do_barray_io>:
do_barray_io (j_common_ptr cinfo, jvirt_barray_ptr ptr, boolean writing)
/* Do backing store read or write of a virtual coefficient-block array */
{
  long bytesperrow, file_offset, byte_count, rows, thisrow, i;

  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
 801452c:	688b      	ldr	r3, [r1, #8]
{
 801452e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
 8014532:	ea4f 18c3 	mov.w	r8, r3, lsl #7
  file_offset = ptr->cur_start_row * bytesperrow;
 8014536:	698b      	ldr	r3, [r1, #24]
{
 8014538:	b085      	sub	sp, #20
 801453a:	4681      	mov	r9, r0
 801453c:	460c      	mov	r4, r1
 801453e:	4692      	mov	sl, r2
  file_offset = ptr->cur_start_row * bytesperrow;
 8014540:	fb03 f708 	mul.w	r7, r3, r8
  /* Loop to read or write each allocation chunk in mem_buffer */
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8014544:	2600      	movs	r6, #0
 8014546:	f101 0b30 	add.w	fp, r1, #48	; 0x30
 801454a:	6922      	ldr	r2, [r4, #16]
 801454c:	42b2      	cmp	r2, r6
 801454e:	dc02      	bgt.n	8014556 <do_barray_io+0x2a>
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
					   (void FAR *) ptr->mem_buffer[i],
					   file_offset, byte_count);
    file_offset += byte_count;
  }
}
 8014550:	b005      	add	sp, #20
 8014552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8014556:	1b92      	subs	r2, r2, r6
 8014558:	6961      	ldr	r1, [r4, #20]
    thisrow = (long) ptr->cur_start_row + i;
 801455a:	69a0      	ldr	r0, [r4, #24]
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 801455c:	428a      	cmp	r2, r1
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 801455e:	6863      	ldr	r3, [r4, #4]
    thisrow = (long) ptr->cur_start_row + i;
 8014560:	eb06 0500 	add.w	r5, r6, r0
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8014564:	bfa8      	it	ge
 8014566:	460a      	movge	r2, r1
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8014568:	69e1      	ldr	r1, [r4, #28]
 801456a:	1b49      	subs	r1, r1, r5
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 801456c:	1b5d      	subs	r5, r3, r5
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 801456e:	428a      	cmp	r2, r1
 8014570:	bfa8      	it	ge
 8014572:	460a      	movge	r2, r1
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8014574:	42aa      	cmp	r2, r5
 8014576:	bfa8      	it	ge
 8014578:	462a      	movge	r2, r5
    if (rows <= 0)		/* this chunk might be past end of file! */
 801457a:	2a00      	cmp	r2, #0
 801457c:	dde8      	ble.n	8014550 <do_barray_io+0x24>
    byte_count = rows * bytesperrow;
 801457e:	fb02 f308 	mul.w	r3, r2, r8
 8014582:	6822      	ldr	r2, [r4, #0]
 8014584:	9303      	str	r3, [sp, #12]
    if (writing)
 8014586:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 801458a:	f1ba 0f00 	cmp.w	sl, #0
 801458e:	d00a      	beq.n	80145a6 <do_barray_io+0x7a>
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8014590:	9300      	str	r3, [sp, #0]
 8014592:	4659      	mov	r1, fp
 8014594:	463b      	mov	r3, r7
 8014596:	4648      	mov	r0, r9
 8014598:	6b65      	ldr	r5, [r4, #52]	; 0x34
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 801459a:	47a8      	blx	r5
    file_offset += byte_count;
 801459c:	9b03      	ldr	r3, [sp, #12]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801459e:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 80145a0:	441f      	add	r7, r3
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80145a2:	4416      	add	r6, r2
 80145a4:	e7d1      	b.n	801454a <do_barray_io+0x1e>
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 80145a6:	9b03      	ldr	r3, [sp, #12]
 80145a8:	4659      	mov	r1, fp
 80145aa:	4648      	mov	r0, r9
 80145ac:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80145ae:	9300      	str	r3, [sp, #0]
 80145b0:	463b      	mov	r3, r7
 80145b2:	e7f2      	b.n	801459a <do_barray_io+0x6e>

080145b4 <alloc_small>:
{
 80145b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 80145b8:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 80145bc:	4606      	mov	r6, r0
 80145be:	460d      	mov	r5, r1
 80145c0:	4614      	mov	r4, r2
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 80145c2:	429a      	cmp	r2, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 80145c4:	6847      	ldr	r7, [r0, #4]
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 80145c6:	d902      	bls.n	80145ce <alloc_small+0x1a>
    out_of_memory(cinfo, 1);	/* request exceeds malloc's ability */
 80145c8:	2101      	movs	r1, #1
 80145ca:	f7ff ffa9 	bl	8014520 <out_of_memory>
  if (odd_bytes > 0)
 80145ce:	f014 0307 	ands.w	r3, r4, #7
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 80145d2:	bf1c      	itt	ne
 80145d4:	3408      	addne	r4, #8
 80145d6:	1ae4      	subne	r4, r4, r3
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 80145d8:	2d01      	cmp	r5, #1
 80145da:	d906      	bls.n	80145ea <alloc_small+0x36>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 80145dc:	6833      	ldr	r3, [r6, #0]
 80145de:	220f      	movs	r2, #15
 80145e0:	4630      	mov	r0, r6
 80145e2:	e9c3 2505 	strd	r2, r5, [r3, #20]
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	4798      	blx	r3
  hdr_ptr = mem->small_list[pool_id];
 80145ea:	eb07 0885 	add.w	r8, r7, r5, lsl #2
  prev_hdr_ptr = NULL;
 80145ee:	f04f 0a00 	mov.w	sl, #0
  hdr_ptr = mem->small_list[pool_id];
 80145f2:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
  while (hdr_ptr != NULL) {
 80145f6:	b9e8      	cbnz	r0, 8014634 <alloc_small+0x80>
    min_request = sizeofobject + SIZEOF(small_pool_hdr);
 80145f8:	f104 0910 	add.w	r9, r4, #16
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 80145fc:	f1ba 0f00 	cmp.w	sl, #0
 8014600:	d11e      	bne.n	8014640 <alloc_small+0x8c>
      slop = first_pool_slop[pool_id];
 8014602:	4b1d      	ldr	r3, [pc, #116]	; (8014678 <alloc_small+0xc4>)
      slop = extra_pool_slop[pool_id];
 8014604:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    if (slop > (size_t) (MAX_ALLOC_CHUNK-min_request))
 8014608:	f5c9 3580 	rsb	r5, r9, #65536	; 0x10000
 801460c:	429d      	cmp	r5, r3
 801460e:	bf28      	it	cs
 8014610:	461d      	movcs	r5, r3
      hdr_ptr = (small_pool_ptr) jpeg_get_small(cinfo, min_request + slop);
 8014612:	eb05 0b09 	add.w	fp, r5, r9
 8014616:	4630      	mov	r0, r6
 8014618:	4659      	mov	r1, fp
 801461a:	f000 fbcf 	bl	8014dbc <jpeg_get_small>
      if (hdr_ptr != NULL)
 801461e:	b988      	cbnz	r0, 8014644 <alloc_small+0x90>
      if (slop < MIN_SLOP)	/* give up when it gets real small */
 8014620:	2d63      	cmp	r5, #99	; 0x63
      slop /= 2;
 8014622:	ea4f 0b55 	mov.w	fp, r5, lsr #1
      if (slop < MIN_SLOP)	/* give up when it gets real small */
 8014626:	d803      	bhi.n	8014630 <alloc_small+0x7c>
	out_of_memory(cinfo, 2); /* jpeg_get_small failed */
 8014628:	2102      	movs	r1, #2
 801462a:	4630      	mov	r0, r6
 801462c:	f7ff ff78 	bl	8014520 <out_of_memory>
    hdr_ptr = hdr_ptr->hdr.next;
 8014630:	465d      	mov	r5, fp
 8014632:	e7ee      	b.n	8014612 <alloc_small+0x5e>
    if (hdr_ptr->hdr.bytes_left >= sizeofobject)
 8014634:	6883      	ldr	r3, [r0, #8]
 8014636:	42a3      	cmp	r3, r4
 8014638:	d211      	bcs.n	801465e <alloc_small+0xaa>
    hdr_ptr = hdr_ptr->hdr.next;
 801463a:	4682      	mov	sl, r0
 801463c:	6800      	ldr	r0, [r0, #0]
 801463e:	e7da      	b.n	80145f6 <alloc_small+0x42>
      slop = extra_pool_slop[pool_id];
 8014640:	4b0e      	ldr	r3, [pc, #56]	; (801467c <alloc_small+0xc8>)
 8014642:	e7df      	b.n	8014604 <alloc_small+0x50>
    mem->total_space_allocated += min_request + slop;
 8014644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 8014646:	4425      	add	r5, r4
    mem->total_space_allocated += min_request + slop;
 8014648:	445b      	add	r3, fp
 801464a:	64fb      	str	r3, [r7, #76]	; 0x4c
    hdr_ptr->hdr.next = NULL;
 801464c:	2300      	movs	r3, #0
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 801464e:	6085      	str	r5, [r0, #8]
    hdr_ptr->hdr.bytes_used = 0;
 8014650:	e9c0 3300 	strd	r3, r3, [r0]
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 8014654:	f1ba 0f00 	cmp.w	sl, #0
 8014658:	d10b      	bne.n	8014672 <alloc_small+0xbe>
      mem->small_list[pool_id] = hdr_ptr;
 801465a:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 801465e:	6843      	ldr	r3, [r0, #4]
  hdr_ptr->hdr.bytes_used += sizeofobject;
 8014660:	191a      	adds	r2, r3, r4
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 8014662:	3310      	adds	r3, #16
  hdr_ptr->hdr.bytes_used += sizeofobject;
 8014664:	6042      	str	r2, [r0, #4]
  hdr_ptr->hdr.bytes_left -= sizeofobject;
 8014666:	6882      	ldr	r2, [r0, #8]
 8014668:	1b12      	subs	r2, r2, r4
 801466a:	6082      	str	r2, [r0, #8]
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 801466c:	4418      	add	r0, r3
}
 801466e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      prev_hdr_ptr->hdr.next = hdr_ptr;
 8014672:	f8ca 0000 	str.w	r0, [sl]
 8014676:	e7f2      	b.n	801465e <alloc_small+0xaa>
 8014678:	0802c2bc 	.word	0x0802c2bc
 801467c:	0802c2b4 	.word	0x0802c2b4

08014680 <request_virt_barray>:
  if (pool_id != JPOOL_IMAGE)
 8014680:	2901      	cmp	r1, #1
{
 8014682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014686:	4604      	mov	r4, r0
 8014688:	460d      	mov	r5, r1
 801468a:	4616      	mov	r6, r2
 801468c:	461f      	mov	r7, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 801468e:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (pool_id != JPOOL_IMAGE)
 8014692:	d005      	beq.n	80146a0 <request_virt_barray+0x20>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8014694:	6803      	ldr	r3, [r0, #0]
 8014696:	220f      	movs	r2, #15
 8014698:	e9c3 2105 	strd	r2, r1, [r3, #20]
 801469c:	681b      	ldr	r3, [r3, #0]
 801469e:	4798      	blx	r3
  result = (jvirt_barray_ptr) alloc_small(cinfo, pool_id,
 80146a0:	223c      	movs	r2, #60	; 0x3c
 80146a2:	4629      	mov	r1, r5
 80146a4:	4620      	mov	r0, r4
 80146a6:	f7ff ff85 	bl	80145b4 <alloc_small>
  result->mem_buffer = NULL;	/* marks array not yet realized */
 80146aa:	2300      	movs	r3, #0
  result->rows_in_array = numrows;
 80146ac:	9a06      	ldr	r2, [sp, #24]
  result->mem_buffer = NULL;	/* marks array not yet realized */
 80146ae:	6003      	str	r3, [r0, #0]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 80146b0:	6283      	str	r3, [r0, #40]	; 0x28
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 80146b2:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
  result->pre_zero = pre_zero;
 80146b6:	6206      	str	r6, [r0, #32]
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 80146b8:	62c3      	str	r3, [r0, #44]	; 0x2c
  result->blocksperrow = blocksperrow;
 80146ba:	e9c0 2701 	strd	r2, r7, [r0, #4]
  result->maxaccess = maxaccess;
 80146be:	9a07      	ldr	r2, [sp, #28]
 80146c0:	60c2      	str	r2, [r0, #12]
  mem->virt_barray_list = result;
 80146c2:	f8c8 0048 	str.w	r0, [r8, #72]	; 0x48
}
 80146c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080146ca <request_virt_sarray>:
  if (pool_id != JPOOL_IMAGE)
 80146ca:	2901      	cmp	r1, #1
{
 80146cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146d0:	4604      	mov	r4, r0
 80146d2:	460d      	mov	r5, r1
 80146d4:	4616      	mov	r6, r2
 80146d6:	461f      	mov	r7, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 80146d8:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (pool_id != JPOOL_IMAGE)
 80146dc:	d005      	beq.n	80146ea <request_virt_sarray+0x20>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 80146de:	6803      	ldr	r3, [r0, #0]
 80146e0:	220f      	movs	r2, #15
 80146e2:	e9c3 2105 	strd	r2, r1, [r3, #20]
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	4798      	blx	r3
  result = (jvirt_sarray_ptr) alloc_small(cinfo, pool_id,
 80146ea:	223c      	movs	r2, #60	; 0x3c
 80146ec:	4629      	mov	r1, r5
 80146ee:	4620      	mov	r0, r4
 80146f0:	f7ff ff60 	bl	80145b4 <alloc_small>
  result->mem_buffer = NULL;	/* marks array not yet realized */
 80146f4:	2300      	movs	r3, #0
  result->rows_in_array = numrows;
 80146f6:	9a06      	ldr	r2, [sp, #24]
  result->mem_buffer = NULL;	/* marks array not yet realized */
 80146f8:	6003      	str	r3, [r0, #0]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 80146fa:	6283      	str	r3, [r0, #40]	; 0x28
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 80146fc:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
  result->pre_zero = pre_zero;
 8014700:	6206      	str	r6, [r0, #32]
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 8014702:	62c3      	str	r3, [r0, #44]	; 0x2c
  result->samplesperrow = samplesperrow;
 8014704:	e9c0 2701 	strd	r2, r7, [r0, #4]
  result->maxaccess = maxaccess;
 8014708:	9a07      	ldr	r2, [sp, #28]
 801470a:	60c2      	str	r2, [r0, #12]
  mem->virt_sarray_list = result;
 801470c:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
}
 8014710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014714 <free_pool>:
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  small_pool_ptr shdr_ptr;
  large_pool_ptr lhdr_ptr;
  size_t space_freed;

  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8014714:	2901      	cmp	r1, #1
{
 8014716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801471a:	4606      	mov	r6, r0
 801471c:	4688      	mov	r8, r1
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 801471e:	6845      	ldr	r5, [r0, #4]
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8014720:	d910      	bls.n	8014744 <free_pool+0x30>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8014722:	6803      	ldr	r3, [r0, #0]
 8014724:	220f      	movs	r2, #15
 8014726:	e9c3 2105 	strd	r2, r1, [r3, #20]
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	4798      	blx	r3
    }
    mem->virt_barray_list = NULL;
  }

  /* Release large objects */
  lhdr_ptr = mem->large_list[pool_id];
 801472e:	eb05 0488 	add.w	r4, r5, r8, lsl #2
  mem->large_list[pool_id] = NULL;
 8014732:	2200      	movs	r2, #0
  lhdr_ptr = mem->large_list[pool_id];
 8014734:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  mem->large_list[pool_id] = NULL;
 8014736:	63e2      	str	r2, [r4, #60]	; 0x3c

  while (lhdr_ptr != NULL) {
 8014738:	bb0b      	cbnz	r3, 801477e <free_pool+0x6a>
    mem->total_space_allocated -= space_freed;
    lhdr_ptr = next_lhdr_ptr;
  }

  /* Release small objects */
  shdr_ptr = mem->small_list[pool_id];
 801473a:	6b61      	ldr	r1, [r4, #52]	; 0x34
  mem->small_list[pool_id] = NULL;
 801473c:	6363      	str	r3, [r4, #52]	; 0x34

  while (shdr_ptr != NULL) {
 801473e:	bb69      	cbnz	r1, 801479c <free_pool+0x88>
		  SIZEOF(small_pool_hdr);
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
    mem->total_space_allocated -= space_freed;
    shdr_ptr = next_shdr_ptr;
  }
}
 8014740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pool_id == JPOOL_IMAGE) {
 8014744:	d1f3      	bne.n	801472e <free_pool+0x1a>
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8014746:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 8014748:	2700      	movs	r7, #0
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 801474a:	b924      	cbnz	r4, 8014756 <free_pool+0x42>
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 801474c:	6caf      	ldr	r7, [r5, #72]	; 0x48
    mem->virt_sarray_list = NULL;
 801474e:	646c      	str	r4, [r5, #68]	; 0x44
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8014750:	b95f      	cbnz	r7, 801476a <free_pool+0x56>
    mem->virt_barray_list = NULL;
 8014752:	64af      	str	r7, [r5, #72]	; 0x48
 8014754:	e7eb      	b.n	801472e <free_pool+0x1a>
      if (sptr->b_s_open) {	/* there may be no backing store */
 8014756:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014758:	b12b      	cbz	r3, 8014766 <free_pool+0x52>
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 801475a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801475c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8014760:	4630      	mov	r0, r6
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 8014762:	62a7      	str	r7, [r4, #40]	; 0x28
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 8014764:	4798      	blx	r3
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8014766:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8014768:	e7ef      	b.n	801474a <free_pool+0x36>
      if (bptr->b_s_open) {	/* there may be no backing store */
 801476a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801476c:	b12b      	cbz	r3, 801477a <free_pool+0x66>
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 801476e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014770:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8014774:	4630      	mov	r0, r6
	bptr->b_s_open = FALSE;	/* prevent recursive close if error */
 8014776:	62bc      	str	r4, [r7, #40]	; 0x28
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 8014778:	4798      	blx	r3
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 801477a:	6aff      	ldr	r7, [r7, #44]	; 0x2c
 801477c:	e7e8      	b.n	8014750 <free_pool+0x3c>
    space_freed = lhdr_ptr->hdr.bytes_used +
 801477e:	689a      	ldr	r2, [r3, #8]
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
 8014780:	4619      	mov	r1, r3
 8014782:	4630      	mov	r0, r6
    space_freed = lhdr_ptr->hdr.bytes_used +
 8014784:	e9d3 8700 	ldrd	r8, r7, [r3]
 8014788:	4417      	add	r7, r2
 801478a:	3710      	adds	r7, #16
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
 801478c:	463a      	mov	r2, r7
 801478e:	f000 fb1e 	bl	8014dce <jpeg_free_large>
    mem->total_space_allocated -= space_freed;
 8014792:	6cea      	ldr	r2, [r5, #76]	; 0x4c
    lhdr_ptr = next_lhdr_ptr;
 8014794:	4643      	mov	r3, r8
    mem->total_space_allocated -= space_freed;
 8014796:	1bd2      	subs	r2, r2, r7
 8014798:	64ea      	str	r2, [r5, #76]	; 0x4c
    lhdr_ptr = next_lhdr_ptr;
 801479a:	e7cd      	b.n	8014738 <free_pool+0x24>
    space_freed = shdr_ptr->hdr.bytes_used +
 801479c:	688a      	ldr	r2, [r1, #8]
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
 801479e:	4630      	mov	r0, r6
    space_freed = shdr_ptr->hdr.bytes_used +
 80147a0:	e9d1 7400 	ldrd	r7, r4, [r1]
 80147a4:	4414      	add	r4, r2
 80147a6:	3410      	adds	r4, #16
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
 80147a8:	4622      	mov	r2, r4
 80147aa:	f000 fb0a 	bl	8014dc2 <jpeg_free_small>
    mem->total_space_allocated -= space_freed;
 80147ae:	6cea      	ldr	r2, [r5, #76]	; 0x4c
    shdr_ptr = next_shdr_ptr;
 80147b0:	4639      	mov	r1, r7
    mem->total_space_allocated -= space_freed;
 80147b2:	1b12      	subs	r2, r2, r4
 80147b4:	64ea      	str	r2, [r5, #76]	; 0x4c
    shdr_ptr = next_shdr_ptr;
 80147b6:	e7c2      	b.n	801473e <free_pool+0x2a>

080147b8 <self_destruct>:
 * Note that this cannot be called unless cinfo->mem is non-NULL.
 */

METHODDEF(void)
self_destruct (j_common_ptr cinfo)
{
 80147b8:	b510      	push	{r4, lr}
 80147ba:	4604      	mov	r4, r0
  /* Close all backing store, release all memory.
   * Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    free_pool(cinfo, pool);
 80147bc:	2101      	movs	r1, #1
 80147be:	f7ff ffa9 	bl	8014714 <free_pool>
 80147c2:	2100      	movs	r1, #0
 80147c4:	4620      	mov	r0, r4
 80147c6:	f7ff ffa5 	bl	8014714 <free_pool>
  }

  /* Release the memory manager control block too. */
  jpeg_free_small(cinfo, (void *) cinfo->mem, SIZEOF(my_memory_mgr));
 80147ca:	4620      	mov	r0, r4
 80147cc:	6861      	ldr	r1, [r4, #4]
 80147ce:	2254      	movs	r2, #84	; 0x54
 80147d0:	f000 faf7 	bl	8014dc2 <jpeg_free_small>
  cinfo->mem = NULL;		/* ensures I will be called only once */
 80147d4:	2300      	movs	r3, #0

  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
 80147d6:	4620      	mov	r0, r4
  cinfo->mem = NULL;		/* ensures I will be called only once */
 80147d8:	6063      	str	r3, [r4, #4]
}
 80147da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
 80147de:	f000 bb02 	b.w	8014de6 <jpeg_mem_term>

080147e2 <access_virt_barray>:
{
 80147e2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  JDIMENSION end_row = start_row + num_rows;
 80147e6:	18d7      	adds	r7, r2, r3
{
 80147e8:	4615      	mov	r5, r2
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 80147ea:	684a      	ldr	r2, [r1, #4]
{
 80147ec:	460c      	mov	r4, r1
 80147ee:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 80147f2:	42ba      	cmp	r2, r7
 80147f4:	d304      	bcc.n	8014800 <access_virt_barray+0x1e>
 80147f6:	68ca      	ldr	r2, [r1, #12]
 80147f8:	429a      	cmp	r2, r3
 80147fa:	d301      	bcc.n	8014800 <access_virt_barray+0x1e>
 80147fc:	680b      	ldr	r3, [r1, #0]
 80147fe:	b933      	cbnz	r3, 801480e <access_virt_barray+0x2c>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8014800:	6803      	ldr	r3, [r0, #0]
 8014802:	2217      	movs	r2, #23
 8014804:	9001      	str	r0, [sp, #4]
 8014806:	615a      	str	r2, [r3, #20]
 8014808:	681b      	ldr	r3, [r3, #0]
 801480a:	4798      	blx	r3
 801480c:	9801      	ldr	r0, [sp, #4]
  if (start_row < ptr->cur_start_row ||
 801480e:	69a3      	ldr	r3, [r4, #24]
 8014810:	42ab      	cmp	r3, r5
 8014812:	d803      	bhi.n	801481c <access_virt_barray+0x3a>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 8014814:	6922      	ldr	r2, [r4, #16]
 8014816:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 8014818:	42bb      	cmp	r3, r7
 801481a:	d221      	bcs.n	8014860 <access_virt_barray+0x7e>
    if (! ptr->b_s_open)
 801481c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801481e:	b933      	cbnz	r3, 801482e <access_virt_barray+0x4c>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 8014820:	6803      	ldr	r3, [r0, #0]
 8014822:	2247      	movs	r2, #71	; 0x47
 8014824:	9001      	str	r0, [sp, #4]
 8014826:	615a      	str	r2, [r3, #20]
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	4798      	blx	r3
 801482c:	9801      	ldr	r0, [sp, #4]
    if (ptr->dirty) {
 801482e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014830:	b13b      	cbz	r3, 8014842 <access_virt_barray+0x60>
      do_barray_io(cinfo, ptr, TRUE);
 8014832:	2201      	movs	r2, #1
 8014834:	4621      	mov	r1, r4
 8014836:	9001      	str	r0, [sp, #4]
 8014838:	f7ff fe78 	bl	801452c <do_barray_io>
      ptr->dirty = FALSE;
 801483c:	2300      	movs	r3, #0
 801483e:	9801      	ldr	r0, [sp, #4]
 8014840:	6263      	str	r3, [r4, #36]	; 0x24
    if (start_row > ptr->cur_start_row) {
 8014842:	69a3      	ldr	r3, [r4, #24]
    do_barray_io(cinfo, ptr, FALSE);
 8014844:	2200      	movs	r2, #0
 8014846:	4621      	mov	r1, r4
 8014848:	9001      	str	r0, [sp, #4]
    if (start_row > ptr->cur_start_row) {
 801484a:	42ab      	cmp	r3, r5
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 801484c:	bf29      	itett	cs
 801484e:	6923      	ldrcs	r3, [r4, #16]
 8014850:	462b      	movcc	r3, r5
 8014852:	1afb      	subcs	r3, r7, r3
      ptr->cur_start_row = (JDIMENSION) ltemp;
 8014854:	ea23 73e3 	biccs.w	r3, r3, r3, asr #31
 8014858:	61a3      	str	r3, [r4, #24]
    do_barray_io(cinfo, ptr, FALSE);
 801485a:	f7ff fe67 	bl	801452c <do_barray_io>
 801485e:	9801      	ldr	r0, [sp, #4]
  if (ptr->first_undef_row < end_row) {
 8014860:	69e6      	ldr	r6, [r4, #28]
 8014862:	42be      	cmp	r6, r7
 8014864:	d21c      	bcs.n	80148a0 <access_virt_barray+0xbe>
    if (ptr->first_undef_row < start_row) {
 8014866:	42ae      	cmp	r6, r5
 8014868:	d20c      	bcs.n	8014884 <access_virt_barray+0xa2>
      if (writable)		/* writer skipped over a section of array */
 801486a:	f1b8 0f00 	cmp.w	r8, #0
 801486e:	d01b      	beq.n	80148a8 <access_virt_barray+0xc6>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8014870:	6803      	ldr	r3, [r0, #0]
 8014872:	2217      	movs	r2, #23
 8014874:	9001      	str	r0, [sp, #4]
 8014876:	462e      	mov	r6, r5
 8014878:	615a      	str	r2, [r3, #20]
 801487a:	681b      	ldr	r3, [r3, #0]
 801487c:	4798      	blx	r3
    if (writable)
 801487e:	9801      	ldr	r0, [sp, #4]
      ptr->first_undef_row = end_row;
 8014880:	61e7      	str	r7, [r4, #28]
 8014882:	e002      	b.n	801488a <access_virt_barray+0xa8>
    if (writable)
 8014884:	f1b8 0f00 	cmp.w	r8, #0
 8014888:	d1fa      	bne.n	8014880 <access_virt_barray+0x9e>
    if (ptr->pre_zero) {
 801488a:	6a22      	ldr	r2, [r4, #32]
 801488c:	b1b2      	cbz	r2, 80148bc <access_virt_barray+0xda>
      size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
 801488e:	68a2      	ldr	r2, [r4, #8]
 8014890:	ea4f 19c2 	mov.w	r9, r2, lsl #7
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 8014894:	69a2      	ldr	r2, [r4, #24]
 8014896:	1ab6      	subs	r6, r6, r2
      end_row -= ptr->cur_start_row;
 8014898:	1abf      	subs	r7, r7, r2
      while (undef_row < end_row) {
 801489a:	42be      	cmp	r6, r7
 801489c:	6823      	ldr	r3, [r4, #0]
 801489e:	d305      	bcc.n	80148ac <access_virt_barray+0xca>
  if (writable)
 80148a0:	f1b8 0f00 	cmp.w	r8, #0
 80148a4:	d00f      	beq.n	80148c6 <access_virt_barray+0xe4>
 80148a6:	e00c      	b.n	80148c2 <access_virt_barray+0xe0>
 80148a8:	462e      	mov	r6, r5
 80148aa:	e7ee      	b.n	801488a <access_virt_barray+0xa8>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 80148ac:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80148b0:	464a      	mov	r2, r9
 80148b2:	2100      	movs	r1, #0
	undef_row++;
 80148b4:	3601      	adds	r6, #1
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 80148b6:	f012 fe35 	bl	8027524 <memset>
	undef_row++;
 80148ba:	e7ee      	b.n	801489a <access_virt_barray+0xb8>
      if (! writable)		/* reader looking at undefined data */
 80148bc:	f1b8 0f00 	cmp.w	r8, #0
 80148c0:	d009      	beq.n	80148d6 <access_virt_barray+0xf4>
    ptr->dirty = TRUE;
 80148c2:	2301      	movs	r3, #1
 80148c4:	6263      	str	r3, [r4, #36]	; 0x24
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 80148c6:	69a0      	ldr	r0, [r4, #24]
 80148c8:	1a2d      	subs	r5, r5, r0
 80148ca:	6820      	ldr	r0, [r4, #0]
}
 80148cc:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 80148d0:	b003      	add	sp, #12
 80148d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 80148d6:	6803      	ldr	r3, [r0, #0]
 80148d8:	2217      	movs	r2, #23
 80148da:	615a      	str	r2, [r3, #20]
 80148dc:	681b      	ldr	r3, [r3, #0]
 80148de:	4798      	blx	r3
  if (writable)
 80148e0:	e7f1      	b.n	80148c6 <access_virt_barray+0xe4>

080148e2 <alloc_large>:
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
 80148e2:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80148e6:	429a      	cmp	r2, r3
{
 80148e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148ec:	4606      	mov	r6, r0
 80148ee:	4688      	mov	r8, r1
 80148f0:	4614      	mov	r4, r2
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 80148f2:	6847      	ldr	r7, [r0, #4]
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
 80148f4:	d902      	bls.n	80148fc <alloc_large+0x1a>
    out_of_memory(cinfo, 3);	/* request exceeds malloc's ability */
 80148f6:	2103      	movs	r1, #3
 80148f8:	f7ff fe12 	bl	8014520 <out_of_memory>
  if (odd_bytes > 0)
 80148fc:	f014 0307 	ands.w	r3, r4, #7
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 8014900:	bf1c      	itt	ne
 8014902:	3408      	addne	r4, #8
 8014904:	1ae4      	subne	r4, r4, r3
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8014906:	f1b8 0f01 	cmp.w	r8, #1
 801490a:	d906      	bls.n	801491a <alloc_large+0x38>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 801490c:	6833      	ldr	r3, [r6, #0]
 801490e:	220f      	movs	r2, #15
 8014910:	4630      	mov	r0, r6
 8014912:	e9c3 2805 	strd	r2, r8, [r3, #20]
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	4798      	blx	r3
  hdr_ptr = (large_pool_ptr) jpeg_get_large(cinfo, sizeofobject +
 801491a:	f104 0110 	add.w	r1, r4, #16
 801491e:	4630      	mov	r0, r6
 8014920:	f000 fa52 	bl	8014dc8 <jpeg_get_large>
  if (hdr_ptr == NULL)
 8014924:	4605      	mov	r5, r0
 8014926:	b918      	cbnz	r0, 8014930 <alloc_large+0x4e>
    out_of_memory(cinfo, 4);	/* jpeg_get_large failed */
 8014928:	2104      	movs	r1, #4
 801492a:	4630      	mov	r0, r6
 801492c:	f7ff fdf8 	bl	8014520 <out_of_memory>
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 8014930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8014932:	f105 0010 	add.w	r0, r5, #16
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 8014936:	3310      	adds	r3, #16
 8014938:	4423      	add	r3, r4
 801493a:	64fb      	str	r3, [r7, #76]	; 0x4c
  hdr_ptr->hdr.next = mem->large_list[pool_id];
 801493c:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8014940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  hdr_ptr->hdr.bytes_used = sizeofobject;
 8014942:	e9c5 3400 	strd	r3, r4, [r5]
  hdr_ptr->hdr.bytes_left = 0;
 8014946:	2300      	movs	r3, #0
 8014948:	60ab      	str	r3, [r5, #8]
  mem->large_list[pool_id] = hdr_ptr;
 801494a:	63fd      	str	r5, [r7, #60]	; 0x3c
}
 801494c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014950 <alloc_barray>:
{
 8014950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	  ((long) blocksperrow * SIZEOF(JBLOCK));
 8014954:	01d7      	lsls	r7, r2, #7
{
 8014956:	461d      	mov	r5, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8014958:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 801495c:	4680      	mov	r8, r0
 801495e:	468a      	mov	sl, r1
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8014960:	6846      	ldr	r6, [r0, #4]
  if (ltemp <= 0)
 8014962:	429f      	cmp	r7, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8014964:	fbb3 f4f7 	udiv	r4, r3, r7
  if (ltemp <= 0)
 8014968:	d904      	bls.n	8014974 <alloc_barray+0x24>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 801496a:	6803      	ldr	r3, [r0, #0]
 801496c:	2248      	movs	r2, #72	; 0x48
 801496e:	615a      	str	r2, [r3, #20]
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	4798      	blx	r3
  if (ltemp < (long) numrows)
 8014974:	42ac      	cmp	r4, r5
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
 8014976:	ea4f 0285 	mov.w	r2, r5, lsl #2
 801497a:	4651      	mov	r1, sl
 801497c:	4640      	mov	r0, r8
  if (ltemp < (long) numrows)
 801497e:	bfa8      	it	ge
 8014980:	462c      	movge	r4, r5
  mem->last_rowsperchunk = rowsperchunk;
 8014982:	6534      	str	r4, [r6, #80]	; 0x50
  currow = 0;
 8014984:	2600      	movs	r6, #0
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
 8014986:	f7ff fe15 	bl	80145b4 <alloc_small>
 801498a:	4681      	mov	r9, r0
  while (currow < numrows) {
 801498c:	42ae      	cmp	r6, r5
 801498e:	d302      	bcc.n	8014996 <alloc_barray+0x46>
}
 8014990:	4648      	mov	r0, r9
 8014992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8014996:	1bab      	subs	r3, r5, r6
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 8014998:	4651      	mov	r1, sl
 801499a:	4640      	mov	r0, r8
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 801499c:	429c      	cmp	r4, r3
 801499e:	bf28      	it	cs
 80149a0:	461c      	movcs	r4, r3
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 80149a2:	fb04 f207 	mul.w	r2, r4, r7
 80149a6:	f7ff ff9c 	bl	80148e2 <alloc_large>
    for (i = rowsperchunk; i > 0; i--) {
 80149aa:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 80149ae:	4426      	add	r6, r4
 80149b0:	eb09 0286 	add.w	r2, r9, r6, lsl #2
 80149b4:	4293      	cmp	r3, r2
 80149b6:	d0e9      	beq.n	801498c <alloc_barray+0x3c>
      result[currow++] = workspace;
 80149b8:	f843 0b04 	str.w	r0, [r3], #4
      workspace += blocksperrow;
 80149bc:	4438      	add	r0, r7
    for (i = rowsperchunk; i > 0; i--) {
 80149be:	e7f9      	b.n	80149b4 <alloc_barray+0x64>

080149c0 <alloc_sarray>:
{
 80149c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80149c4:	461d      	mov	r5, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 80149c6:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 80149ca:	4607      	mov	r7, r0
 80149cc:	468a      	mov	sl, r1
  if (ltemp <= 0)
 80149ce:	429a      	cmp	r2, r3
{
 80149d0:	4690      	mov	r8, r2
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 80149d2:	6846      	ldr	r6, [r0, #4]
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 80149d4:	fbb3 f4f2 	udiv	r4, r3, r2
  if (ltemp <= 0)
 80149d8:	d904      	bls.n	80149e4 <alloc_sarray+0x24>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 80149da:	6803      	ldr	r3, [r0, #0]
 80149dc:	2248      	movs	r2, #72	; 0x48
 80149de:	615a      	str	r2, [r3, #20]
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	4798      	blx	r3
  if (ltemp < (long) numrows)
 80149e4:	42ac      	cmp	r4, r5
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
 80149e6:	ea4f 0285 	mov.w	r2, r5, lsl #2
 80149ea:	4651      	mov	r1, sl
 80149ec:	4638      	mov	r0, r7
  if (ltemp < (long) numrows)
 80149ee:	bfa8      	it	ge
 80149f0:	462c      	movge	r4, r5
  mem->last_rowsperchunk = rowsperchunk;
 80149f2:	6534      	str	r4, [r6, #80]	; 0x50
  currow = 0;
 80149f4:	2600      	movs	r6, #0
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
 80149f6:	f7ff fddd 	bl	80145b4 <alloc_small>
 80149fa:	4681      	mov	r9, r0
  while (currow < numrows) {
 80149fc:	42ae      	cmp	r6, r5
 80149fe:	d302      	bcc.n	8014a06 <alloc_sarray+0x46>
}
 8014a00:	4648      	mov	r0, r9
 8014a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8014a06:	1bab      	subs	r3, r5, r6
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 8014a08:	4651      	mov	r1, sl
 8014a0a:	4638      	mov	r0, r7
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8014a0c:	429c      	cmp	r4, r3
 8014a0e:	bf28      	it	cs
 8014a10:	461c      	movcs	r4, r3
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 8014a12:	fb04 f208 	mul.w	r2, r4, r8
 8014a16:	f7ff ff64 	bl	80148e2 <alloc_large>
    for (i = rowsperchunk; i > 0; i--) {
 8014a1a:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 8014a1e:	4426      	add	r6, r4
 8014a20:	eb09 0286 	add.w	r2, r9, r6, lsl #2
 8014a24:	4293      	cmp	r3, r2
 8014a26:	d0e9      	beq.n	80149fc <alloc_sarray+0x3c>
      result[currow++] = workspace;
 8014a28:	f843 0b04 	str.w	r0, [r3], #4
      workspace += samplesperrow;
 8014a2c:	4440      	add	r0, r8
    for (i = rowsperchunk; i > 0; i--) {
 8014a2e:	e7f9      	b.n	8014a24 <alloc_sarray+0x64>

08014a30 <realize_virt_arrays>:
{
 8014a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8014a34:	f8d0 8004 	ldr.w	r8, [r0, #4]
  maximum_space = 0;
 8014a38:	2500      	movs	r5, #0
{
 8014a3a:	4607      	mov	r7, r0
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8014a3c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
  space_per_minheight = 0;
 8014a40:	462e      	mov	r6, r5
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8014a42:	bb03      	cbnz	r3, 8014a86 <realize_virt_arrays+0x56>
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8014a44:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 8014a48:	bb43      	cbnz	r3, 8014a9c <realize_virt_arrays+0x6c>
  if (space_per_minheight <= 0)
 8014a4a:	2e00      	cmp	r6, #0
 8014a4c:	dd19      	ble.n	8014a82 <realize_virt_arrays+0x52>
  avail_mem = jpeg_mem_available(cinfo, space_per_minheight, maximum_space,
 8014a4e:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8014a52:	462a      	mov	r2, r5
 8014a54:	4631      	mov	r1, r6
 8014a56:	4638      	mov	r0, r7
 8014a58:	f000 f9bc 	bl	8014dd4 <jpeg_mem_available>
  if (avail_mem >= maximum_space)
 8014a5c:	4285      	cmp	r5, r0
 8014a5e:	dd2a      	ble.n	8014ab6 <realize_virt_arrays+0x86>
    max_minheights = avail_mem / space_per_minheight;
 8014a60:	fb90 f6f6 	sdiv	r6, r0, r6
 8014a64:	2e01      	cmp	r6, #1
 8014a66:	bfb8      	it	lt
 8014a68:	2601      	movlt	r6, #1
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8014a6a:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 8014a6e:	f04f 0901 	mov.w	r9, #1
      sptr->cur_start_row = 0;
 8014a72:	2500      	movs	r5, #0
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8014a74:	bb0c      	cbnz	r4, 8014aba <realize_virt_arrays+0x8a>
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8014a76:	f8d8 5048 	ldr.w	r5, [r8, #72]	; 0x48
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 8014a7a:	f04f 0901 	mov.w	r9, #1
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8014a7e:	2d00      	cmp	r5, #0
 8014a80:	d141      	bne.n	8014b06 <realize_virt_arrays+0xd6>
}
 8014a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 8014a86:	681a      	ldr	r2, [r3, #0]
 8014a88:	b932      	cbnz	r2, 8014a98 <realize_virt_arrays+0x68>
      space_per_minheight += (long) sptr->maxaccess *
 8014a8a:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
 8014a8e:	fb01 6602 	mla	r6, r1, r2, r6
      maximum_space += (long) sptr->rows_in_array *
 8014a92:	6859      	ldr	r1, [r3, #4]
 8014a94:	fb01 5502 	mla	r5, r1, r2, r5
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8014a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a9a:	e7d2      	b.n	8014a42 <realize_virt_arrays+0x12>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 8014a9c:	681a      	ldr	r2, [r3, #0]
 8014a9e:	b942      	cbnz	r2, 8014ab2 <realize_virt_arrays+0x82>
      maximum_space += (long) bptr->rows_in_array *
 8014aa0:	685a      	ldr	r2, [r3, #4]
      space_per_minheight += (long) bptr->maxaccess *
 8014aa2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8014aa6:	4341      	muls	r1, r0
      maximum_space += (long) bptr->rows_in_array *
 8014aa8:	4342      	muls	r2, r0
      space_per_minheight += (long) bptr->maxaccess *
 8014aaa:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
      maximum_space += (long) bptr->rows_in_array *
 8014aae:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8014ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ab4:	e7c8      	b.n	8014a48 <realize_virt_arrays+0x18>
    max_minheights = 1000000000L;
 8014ab6:	4e27      	ldr	r6, [pc, #156]	; (8014b54 <realize_virt_arrays+0x124>)
 8014ab8:	e7d7      	b.n	8014a6a <realize_virt_arrays+0x3a>
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 8014aba:	6823      	ldr	r3, [r4, #0]
 8014abc:	b9ab      	cbnz	r3, 8014aea <realize_virt_arrays+0xba>
      minheights = ((long) sptr->rows_in_array - 1L) / sptr->maxaccess + 1L;
 8014abe:	6862      	ldr	r2, [r4, #4]
 8014ac0:	68e1      	ldr	r1, [r4, #12]
 8014ac2:	1e53      	subs	r3, r2, #1
 8014ac4:	fbb3 f3f1 	udiv	r3, r3, r1
 8014ac8:	3301      	adds	r3, #1
      if (minheights <= max_minheights) {
 8014aca:	429e      	cmp	r6, r3
 8014acc:	db0f      	blt.n	8014aee <realize_virt_arrays+0xbe>
	sptr->rows_in_mem = sptr->rows_in_array;
 8014ace:	6122      	str	r2, [r4, #16]
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 8014ad0:	6923      	ldr	r3, [r4, #16]
 8014ad2:	2101      	movs	r1, #1
 8014ad4:	68a2      	ldr	r2, [r4, #8]
 8014ad6:	4638      	mov	r0, r7
 8014ad8:	f7ff ff72 	bl	80149c0 <alloc_sarray>
      sptr->rowsperchunk = mem->last_rowsperchunk;
 8014adc:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 8014ae0:	6020      	str	r0, [r4, #0]
      sptr->first_undef_row = 0;
 8014ae2:	61e5      	str	r5, [r4, #28]
      sptr->dirty = FALSE;
 8014ae4:	6265      	str	r5, [r4, #36]	; 0x24
      sptr->cur_start_row = 0;
 8014ae6:	e9c4 3505 	strd	r3, r5, [r4, #20]
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8014aea:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8014aec:	e7c2      	b.n	8014a74 <realize_virt_arrays+0x44>
 8014aee:	68a3      	ldr	r3, [r4, #8]
	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
 8014af0:	4371      	muls	r1, r6
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 8014af2:	4638      	mov	r0, r7
	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
 8014af4:	6121      	str	r1, [r4, #16]
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 8014af6:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8014afa:	435a      	muls	r2, r3
 8014afc:	f000 f96c 	bl	8014dd8 <jpeg_open_backing_store>
	sptr->b_s_open = TRUE;
 8014b00:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
 8014b04:	e7e4      	b.n	8014ad0 <realize_virt_arrays+0xa0>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 8014b06:	682b      	ldr	r3, [r5, #0]
 8014b08:	b9ab      	cbnz	r3, 8014b36 <realize_virt_arrays+0x106>
      minheights = ((long) bptr->rows_in_array - 1L) / bptr->maxaccess + 1L;
 8014b0a:	686a      	ldr	r2, [r5, #4]
 8014b0c:	68e9      	ldr	r1, [r5, #12]
 8014b0e:	1e53      	subs	r3, r2, #1
 8014b10:	fbb3 f3f1 	udiv	r3, r3, r1
 8014b14:	3301      	adds	r3, #1
      if (minheights <= max_minheights) {
 8014b16:	429e      	cmp	r6, r3
 8014b18:	db0f      	blt.n	8014b3a <realize_virt_arrays+0x10a>
	bptr->rows_in_mem = bptr->rows_in_array;
 8014b1a:	612a      	str	r2, [r5, #16]
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 8014b1c:	692b      	ldr	r3, [r5, #16]
 8014b1e:	2101      	movs	r1, #1
 8014b20:	68aa      	ldr	r2, [r5, #8]
 8014b22:	4638      	mov	r0, r7
 8014b24:	f7ff ff14 	bl	8014950 <alloc_barray>
      bptr->rowsperchunk = mem->last_rowsperchunk;
 8014b28:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 8014b2c:	6028      	str	r0, [r5, #0]
      bptr->first_undef_row = 0;
 8014b2e:	61ec      	str	r4, [r5, #28]
      bptr->dirty = FALSE;
 8014b30:	626c      	str	r4, [r5, #36]	; 0x24
      bptr->cur_start_row = 0;
 8014b32:	e9c5 3405 	strd	r3, r4, [r5, #20]
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8014b36:	6aed      	ldr	r5, [r5, #44]	; 0x2c
 8014b38:	e7a1      	b.n	8014a7e <realize_virt_arrays+0x4e>
 8014b3a:	68ab      	ldr	r3, [r5, #8]
	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
 8014b3c:	4371      	muls	r1, r6
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 8014b3e:	4638      	mov	r0, r7
				(long) bptr->rows_in_array *
 8014b40:	435a      	muls	r2, r3
	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
 8014b42:	6129      	str	r1, [r5, #16]
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 8014b44:	f105 0130 	add.w	r1, r5, #48	; 0x30
 8014b48:	01d2      	lsls	r2, r2, #7
 8014b4a:	f000 f945 	bl	8014dd8 <jpeg_open_backing_store>
	bptr->b_s_open = TRUE;
 8014b4e:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8014b52:	e7e3      	b.n	8014b1c <realize_virt_arrays+0xec>
 8014b54:	3b9aca00 	.word	0x3b9aca00

08014b58 <access_virt_sarray>:
{
 8014b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  JDIMENSION end_row = start_row + num_rows;
 8014b5c:	eb02 0803 	add.w	r8, r2, r3
{
 8014b60:	4615      	mov	r5, r2
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8014b62:	684a      	ldr	r2, [r1, #4]
{
 8014b64:	b087      	sub	sp, #28
 8014b66:	460c      	mov	r4, r1
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8014b68:	4542      	cmp	r2, r8
{
 8014b6a:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8014b6e:	d304      	bcc.n	8014b7a <access_virt_sarray+0x22>
 8014b70:	68ca      	ldr	r2, [r1, #12]
 8014b72:	429a      	cmp	r2, r3
 8014b74:	d301      	bcc.n	8014b7a <access_virt_sarray+0x22>
 8014b76:	680b      	ldr	r3, [r1, #0]
 8014b78:	b933      	cbnz	r3, 8014b88 <access_virt_sarray+0x30>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8014b7a:	6803      	ldr	r3, [r0, #0]
 8014b7c:	2217      	movs	r2, #23
 8014b7e:	9003      	str	r0, [sp, #12]
 8014b80:	615a      	str	r2, [r3, #20]
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	4798      	blx	r3
 8014b86:	9803      	ldr	r0, [sp, #12]
  if (start_row < ptr->cur_start_row ||
 8014b88:	69a3      	ldr	r3, [r4, #24]
 8014b8a:	42ab      	cmp	r3, r5
 8014b8c:	d80c      	bhi.n	8014ba8 <access_virt_sarray+0x50>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 8014b8e:	6922      	ldr	r2, [r4, #16]
 8014b90:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 8014b92:	4543      	cmp	r3, r8
 8014b94:	d308      	bcc.n	8014ba8 <access_virt_sarray+0x50>
  if (ptr->first_undef_row < end_row) {
 8014b96:	69e6      	ldr	r6, [r4, #28]
 8014b98:	4546      	cmp	r6, r8
 8014b9a:	f0c0 8082 	bcc.w	8014ca2 <access_virt_sarray+0x14a>
  if (writable)
 8014b9e:	f1ba 0f00 	cmp.w	sl, #0
 8014ba2:	f000 80ab 	beq.w	8014cfc <access_virt_sarray+0x1a4>
 8014ba6:	e0a7      	b.n	8014cf8 <access_virt_sarray+0x1a0>
    if (! ptr->b_s_open)
 8014ba8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014baa:	b933      	cbnz	r3, 8014bba <access_virt_sarray+0x62>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 8014bac:	6803      	ldr	r3, [r0, #0]
 8014bae:	2247      	movs	r2, #71	; 0x47
 8014bb0:	9003      	str	r0, [sp, #12]
 8014bb2:	615a      	str	r2, [r3, #20]
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	4798      	blx	r3
 8014bb8:	9803      	ldr	r0, [sp, #12]
    if (ptr->dirty) {
 8014bba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014bbc:	b17b      	cbz	r3, 8014bde <access_virt_sarray+0x86>
 8014bbe:	f8d4 b008 	ldr.w	fp, [r4, #8]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8014bc2:	f04f 0900 	mov.w	r9, #0
  file_offset = ptr->cur_start_row * bytesperrow;
 8014bc6:	69a3      	ldr	r3, [r4, #24]
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8014bc8:	f104 0130 	add.w	r1, r4, #48	; 0x30
  file_offset = ptr->cur_start_row * bytesperrow;
 8014bcc:	fb03 f30b 	mul.w	r3, r3, fp
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8014bd0:	6922      	ldr	r2, [r4, #16]
 8014bd2:	454a      	cmp	r2, r9
 8014bd4:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 8014bd8:	dc3c      	bgt.n	8014c54 <access_virt_sarray+0xfc>
      ptr->dirty = FALSE;
 8014bda:	2300      	movs	r3, #0
 8014bdc:	6263      	str	r3, [r4, #36]	; 0x24
    if (start_row > ptr->cur_start_row) {
 8014bde:	69a2      	ldr	r2, [r4, #24]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8014be0:	f04f 0900 	mov.w	r9, #0
 8014be4:	6923      	ldr	r3, [r4, #16]
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8014be6:	f104 0130 	add.w	r1, r4, #48	; 0x30
    if (start_row > ptr->cur_start_row) {
 8014bea:	42aa      	cmp	r2, r5
  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
 8014bec:	f8d4 b008 	ldr.w	fp, [r4, #8]
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 8014bf0:	bf2a      	itet	cs
 8014bf2:	eba8 0303 	subcs.w	r3, r8, r3
      ptr->cur_start_row = (JDIMENSION) ltemp;
 8014bf6:	462b      	movcc	r3, r5
 8014bf8:	ea23 73e3 	biccs.w	r3, r3, r3, asr #31
 8014bfc:	61a3      	str	r3, [r4, #24]
  file_offset = ptr->cur_start_row * bytesperrow;
 8014bfe:	fb0b f303 	mul.w	r3, fp, r3
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8014c02:	6922      	ldr	r2, [r4, #16]
 8014c04:	69e6      	ldr	r6, [r4, #28]
 8014c06:	454a      	cmp	r2, r9
 8014c08:	ddc5      	ble.n	8014b96 <access_virt_sarray+0x3e>
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8014c0a:	eba2 0209 	sub.w	r2, r2, r9
 8014c0e:	6967      	ldr	r7, [r4, #20]
 8014c10:	42ba      	cmp	r2, r7
 8014c12:	bfa8      	it	ge
 8014c14:	463a      	movge	r2, r7
    thisrow = (long) ptr->cur_start_row + i;
 8014c16:	69a7      	ldr	r7, [r4, #24]
 8014c18:	444f      	add	r7, r9
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8014c1a:	1bf6      	subs	r6, r6, r7
 8014c1c:	42b2      	cmp	r2, r6
 8014c1e:	bfa8      	it	ge
 8014c20:	4632      	movge	r2, r6
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8014c22:	6866      	ldr	r6, [r4, #4]
 8014c24:	1bf6      	subs	r6, r6, r7
 8014c26:	42b2      	cmp	r2, r6
 8014c28:	bfa8      	it	ge
 8014c2a:	4632      	movge	r2, r6
    if (rows <= 0)		/* this chunk might be past end of file! */
 8014c2c:	2a00      	cmp	r2, #0
 8014c2e:	ddb2      	ble.n	8014b96 <access_virt_sarray+0x3e>
    byte_count = rows * bytesperrow;
 8014c30:	fb02 f60b 	mul.w	r6, r2, fp
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8014c34:	6822      	ldr	r2, [r4, #0]
 8014c36:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8014c38:	9600      	str	r6, [sp, #0]
 8014c3a:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
 8014c3e:	9305      	str	r3, [sp, #20]
 8014c40:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8014c44:	47b8      	blx	r7
    file_offset += byte_count;
 8014c46:	9b05      	ldr	r3, [sp, #20]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8014c48:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 8014c4a:	4433      	add	r3, r6
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8014c4c:	4491      	add	r9, r2
 8014c4e:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
 8014c52:	e7d6      	b.n	8014c02 <access_virt_sarray+0xaa>
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8014c54:	eba2 0c09 	sub.w	ip, r2, r9
 8014c58:	6962      	ldr	r2, [r4, #20]
 8014c5a:	4562      	cmp	r2, ip
 8014c5c:	bfa8      	it	ge
 8014c5e:	4662      	movge	r2, ip
    thisrow = (long) ptr->cur_start_row + i;
 8014c60:	eb06 0c09 	add.w	ip, r6, r9
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8014c64:	6866      	ldr	r6, [r4, #4]
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8014c66:	eba7 070c 	sub.w	r7, r7, ip
 8014c6a:	42ba      	cmp	r2, r7
 8014c6c:	bfa8      	it	ge
 8014c6e:	463a      	movge	r2, r7
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8014c70:	eba6 070c 	sub.w	r7, r6, ip
 8014c74:	42ba      	cmp	r2, r7
 8014c76:	bfa8      	it	ge
 8014c78:	463a      	movge	r2, r7
    if (rows <= 0)		/* this chunk might be past end of file! */
 8014c7a:	2a00      	cmp	r2, #0
 8014c7c:	ddad      	ble.n	8014bda <access_virt_sarray+0x82>
    byte_count = rows * bytesperrow;
 8014c7e:	fb0b f702 	mul.w	r7, fp, r2
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8014c82:	6822      	ldr	r2, [r4, #0]
 8014c84:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8014c86:	9700      	str	r7, [sp, #0]
 8014c88:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
 8014c8c:	9305      	str	r3, [sp, #20]
 8014c8e:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8014c92:	47b0      	blx	r6
    file_offset += byte_count;
 8014c94:	9b05      	ldr	r3, [sp, #20]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8014c96:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 8014c98:	443b      	add	r3, r7
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8014c9a:	4491      	add	r9, r2
 8014c9c:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
 8014ca0:	e796      	b.n	8014bd0 <access_virt_sarray+0x78>
    if (ptr->first_undef_row < start_row) {
 8014ca2:	42ae      	cmp	r6, r5
 8014ca4:	d20d      	bcs.n	8014cc2 <access_virt_sarray+0x16a>
      if (writable)		/* writer skipped over a section of array */
 8014ca6:	f1ba 0f00 	cmp.w	sl, #0
 8014caa:	d020      	beq.n	8014cee <access_virt_sarray+0x196>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8014cac:	6803      	ldr	r3, [r0, #0]
 8014cae:	2217      	movs	r2, #23
 8014cb0:	9003      	str	r0, [sp, #12]
 8014cb2:	462e      	mov	r6, r5
 8014cb4:	615a      	str	r2, [r3, #20]
 8014cb6:	681b      	ldr	r3, [r3, #0]
 8014cb8:	4798      	blx	r3
    if (writable)
 8014cba:	9803      	ldr	r0, [sp, #12]
      ptr->first_undef_row = end_row;
 8014cbc:	f8c4 801c 	str.w	r8, [r4, #28]
 8014cc0:	e002      	b.n	8014cc8 <access_virt_sarray+0x170>
    if (writable)
 8014cc2:	f1ba 0f00 	cmp.w	sl, #0
 8014cc6:	d1f9      	bne.n	8014cbc <access_virt_sarray+0x164>
    if (ptr->pre_zero) {
 8014cc8:	6a22      	ldr	r2, [r4, #32]
 8014cca:	b192      	cbz	r2, 8014cf2 <access_virt_sarray+0x19a>
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 8014ccc:	69a1      	ldr	r1, [r4, #24]
      size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
 8014cce:	68a7      	ldr	r7, [r4, #8]
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 8014cd0:	1a76      	subs	r6, r6, r1
      end_row -= ptr->cur_start_row;
 8014cd2:	eba8 0801 	sub.w	r8, r8, r1
      while (undef_row < end_row) {
 8014cd6:	4546      	cmp	r6, r8
 8014cd8:	6823      	ldr	r3, [r4, #0]
 8014cda:	f4bf af60 	bcs.w	8014b9e <access_virt_sarray+0x46>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8014cde:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014ce2:	463a      	mov	r2, r7
 8014ce4:	2100      	movs	r1, #0
	undef_row++;
 8014ce6:	3601      	adds	r6, #1
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8014ce8:	f012 fc1c 	bl	8027524 <memset>
	undef_row++;
 8014cec:	e7f3      	b.n	8014cd6 <access_virt_sarray+0x17e>
 8014cee:	462e      	mov	r6, r5
 8014cf0:	e7ea      	b.n	8014cc8 <access_virt_sarray+0x170>
      if (! writable)		/* reader looking at undefined data */
 8014cf2:	f1ba 0f00 	cmp.w	sl, #0
 8014cf6:	d009      	beq.n	8014d0c <access_virt_sarray+0x1b4>
    ptr->dirty = TRUE;
 8014cf8:	2301      	movs	r3, #1
 8014cfa:	6263      	str	r3, [r4, #36]	; 0x24
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 8014cfc:	69a0      	ldr	r0, [r4, #24]
 8014cfe:	1a2d      	subs	r5, r5, r0
 8014d00:	6820      	ldr	r0, [r4, #0]
}
 8014d02:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8014d06:	b007      	add	sp, #28
 8014d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8014d0c:	6803      	ldr	r3, [r0, #0]
 8014d0e:	2217      	movs	r2, #23
 8014d10:	615a      	str	r2, [r3, #20]
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	4798      	blx	r3
  if (writable)
 8014d16:	e7f1      	b.n	8014cfc <access_virt_sarray+0x1a4>

08014d18 <jinit_memory_mgr>:
  my_mem_ptr mem;
  long max_to_use;
  int pool;
  size_t test_mac;

  cinfo->mem = NULL;		/* for safety if init fails */
 8014d18:	2300      	movs	r3, #0
{
 8014d1a:	b570      	push	{r4, r5, r6, lr}
 8014d1c:	4605      	mov	r5, r0
  cinfo->mem = NULL;		/* for safety if init fails */
 8014d1e:	6043      	str	r3, [r0, #4]
  test_mac = (size_t) MAX_ALLOC_CHUNK;
  if ((long) test_mac != MAX_ALLOC_CHUNK ||
      (MAX_ALLOC_CHUNK % SIZEOF(ALIGN_TYPE)) != 0)
    ERREXIT(cinfo, JERR_BAD_ALLOC_CHUNK);

  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
 8014d20:	f000 f85f 	bl	8014de2 <jpeg_mem_init>

  /* Attempt to allocate memory manager's control block */
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
 8014d24:	2154      	movs	r1, #84	; 0x54
  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
 8014d26:	4606      	mov	r6, r0
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
 8014d28:	4628      	mov	r0, r5
 8014d2a:	f000 f847 	bl	8014dbc <jpeg_get_small>

  if (mem == NULL) {
 8014d2e:	4604      	mov	r4, r0
 8014d30:	b948      	cbnz	r0, 8014d46 <jinit_memory_mgr+0x2e>
    jpeg_mem_term(cinfo);	/* system-dependent cleanup */
 8014d32:	4628      	mov	r0, r5
 8014d34:	f000 f857 	bl	8014de6 <jpeg_mem_term>
    ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, 0);
 8014d38:	682b      	ldr	r3, [r5, #0]
 8014d3a:	2238      	movs	r2, #56	; 0x38
 8014d3c:	4628      	mov	r0, r5
 8014d3e:	e9c3 2405 	strd	r2, r4, [r3, #20]
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	4798      	blx	r3
  }

  /* OK, fill in the method pointers */
  mem->pub.alloc_small = alloc_small;
 8014d46:	4b12      	ldr	r3, [pc, #72]	; (8014d90 <jinit_memory_mgr+0x78>)
 8014d48:	6023      	str	r3, [r4, #0]
  mem->pub.alloc_large = alloc_large;
 8014d4a:	4b12      	ldr	r3, [pc, #72]	; (8014d94 <jinit_memory_mgr+0x7c>)
 8014d4c:	6063      	str	r3, [r4, #4]
  mem->pub.alloc_sarray = alloc_sarray;
 8014d4e:	4b12      	ldr	r3, [pc, #72]	; (8014d98 <jinit_memory_mgr+0x80>)
 8014d50:	60a3      	str	r3, [r4, #8]
  mem->pub.alloc_barray = alloc_barray;
 8014d52:	4b12      	ldr	r3, [pc, #72]	; (8014d9c <jinit_memory_mgr+0x84>)
 8014d54:	60e3      	str	r3, [r4, #12]
  mem->pub.request_virt_sarray = request_virt_sarray;
 8014d56:	4b12      	ldr	r3, [pc, #72]	; (8014da0 <jinit_memory_mgr+0x88>)
 8014d58:	6123      	str	r3, [r4, #16]
  mem->pub.request_virt_barray = request_virt_barray;
 8014d5a:	4b12      	ldr	r3, [pc, #72]	; (8014da4 <jinit_memory_mgr+0x8c>)
 8014d5c:	6163      	str	r3, [r4, #20]
  mem->pub.realize_virt_arrays = realize_virt_arrays;
 8014d5e:	4b12      	ldr	r3, [pc, #72]	; (8014da8 <jinit_memory_mgr+0x90>)
 8014d60:	61a3      	str	r3, [r4, #24]
  mem->pub.access_virt_sarray = access_virt_sarray;
 8014d62:	4b12      	ldr	r3, [pc, #72]	; (8014dac <jinit_memory_mgr+0x94>)
 8014d64:	61e3      	str	r3, [r4, #28]
  mem->pub.access_virt_barray = access_virt_barray;
 8014d66:	4b12      	ldr	r3, [pc, #72]	; (8014db0 <jinit_memory_mgr+0x98>)
 8014d68:	6223      	str	r3, [r4, #32]
  mem->pub.free_pool = free_pool;
 8014d6a:	4b12      	ldr	r3, [pc, #72]	; (8014db4 <jinit_memory_mgr+0x9c>)
 8014d6c:	6263      	str	r3, [r4, #36]	; 0x24
  mem->pub.self_destruct = self_destruct;
 8014d6e:	4b12      	ldr	r3, [pc, #72]	; (8014db8 <jinit_memory_mgr+0xa0>)
 8014d70:	62a3      	str	r3, [r4, #40]	; 0x28

  /* Make MAX_ALLOC_CHUNK accessible to other modules */
  mem->pub.max_alloc_chunk = MAX_ALLOC_CHUNK;
 8014d72:	f44f 3380 	mov.w	r3, #65536	; 0x10000

  /* Initialize working state */
  mem->pub.max_memory_to_use = max_to_use;
 8014d76:	e9c4 630b 	strd	r6, r3, [r4, #44]	; 0x2c

  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    mem->small_list[pool] = NULL;
 8014d7a:	2300      	movs	r3, #0
 8014d7c:	63a3      	str	r3, [r4, #56]	; 0x38
    mem->large_list[pool] = NULL;
 8014d7e:	6423      	str	r3, [r4, #64]	; 0x40
    mem->small_list[pool] = NULL;
 8014d80:	6363      	str	r3, [r4, #52]	; 0x34
    mem->large_list[pool] = NULL;
 8014d82:	63e3      	str	r3, [r4, #60]	; 0x3c
  }
  mem->virt_sarray_list = NULL;
  mem->virt_barray_list = NULL;
 8014d84:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44

  mem->total_space_allocated = SIZEOF(my_memory_mgr);
 8014d88:	2354      	movs	r3, #84	; 0x54
 8014d8a:	64e3      	str	r3, [r4, #76]	; 0x4c

  /* Declare ourselves open for business */
  cinfo->mem = & mem->pub;
 8014d8c:	606c      	str	r4, [r5, #4]
      }
    }
  }
#endif

}
 8014d8e:	bd70      	pop	{r4, r5, r6, pc}
 8014d90:	080145b5 	.word	0x080145b5
 8014d94:	080148e3 	.word	0x080148e3
 8014d98:	080149c1 	.word	0x080149c1
 8014d9c:	08014951 	.word	0x08014951
 8014da0:	080146cb 	.word	0x080146cb
 8014da4:	08014681 	.word	0x08014681
 8014da8:	08014a31 	.word	0x08014a31
 8014dac:	08014b59 	.word	0x08014b59
 8014db0:	080147e3 	.word	0x080147e3
 8014db4:	08014715 	.word	0x08014715
 8014db8:	080147b9 	.word	0x080147b9

08014dbc <jpeg_get_small>:
 */

GLOBAL(void *)
jpeg_get_small (j_common_ptr cinfo, size_t sizeofobject)
{
  return (void *) JMALLOC(sizeofobject);
 8014dbc:	4608      	mov	r0, r1
 8014dbe:	f7f2 b85d 	b.w	8006e7c <pvPortMalloc>

08014dc2 <jpeg_free_small>:
}

GLOBAL(void)
jpeg_free_small (j_common_ptr cinfo, void * object, size_t sizeofobject)
{
  JFREE(object);
 8014dc2:	4608      	mov	r0, r1
 8014dc4:	f7f2 b8e8 	b.w	8006f98 <vPortFree>

08014dc8 <jpeg_get_large>:
 8014dc8:	4608      	mov	r0, r1
 8014dca:	f7f2 b857 	b.w	8006e7c <pvPortMalloc>

08014dce <jpeg_free_large>:
 8014dce:	4608      	mov	r0, r1
 8014dd0:	f7f2 b8e2 	b.w	8006f98 <vPortFree>

08014dd4 <jpeg_mem_available>:
GLOBAL(long)
jpeg_mem_available (j_common_ptr cinfo, long min_bytes_needed,
		    long max_bytes_needed, long already_allocated)
{
  return max_bytes_needed;
}
 8014dd4:	4610      	mov	r0, r2
 8014dd6:	4770      	bx	lr

08014dd8 <jpeg_open_backing_store>:

GLOBAL(void)
jpeg_open_backing_store (j_common_ptr cinfo, backing_store_ptr info,
			 long total_bytes_needed)
{
  ERREXIT(cinfo, JERR_NO_BACKING_STORE);
 8014dd8:	6803      	ldr	r3, [r0, #0]
 8014dda:	2233      	movs	r2, #51	; 0x33
 8014ddc:	615a      	str	r2, [r3, #20]
 8014dde:	681b      	ldr	r3, [r3, #0]
 8014de0:	4718      	bx	r3

08014de2 <jpeg_mem_init>:

GLOBAL(long)
jpeg_mem_init (j_common_ptr cinfo)
{
  return 0;			/* just set max_memory_to_use to 0 */
}
 8014de2:	2000      	movs	r0, #0
 8014de4:	4770      	bx	lr

08014de6 <jpeg_mem_term>:

GLOBAL(void)
jpeg_mem_term (j_common_ptr cinfo)
{
}
 8014de6:	4770      	bx	lr

08014de8 <color_quantize>:

METHODDEF(void)
color_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		JSAMPARRAY output_buf, int num_rows)
/* General case, no dithering */
{
 8014de8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  register int pixcode, ci;
  register JSAMPROW ptrin, ptrout;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
  register int nc = cinfo->out_color_components;
 8014dec:	f8d0 c078 	ldr.w	ip, [r0, #120]	; 0x78
{
 8014df0:	4698      	mov	r8, r3
  JSAMPARRAY colorindex = cquantize->colorindex;
 8014df2:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 8014df6:	ea2c 79ec 	bic.w	r9, ip, ip, asr #31
 8014dfa:	f8d3 e018 	ldr.w	lr, [r3, #24]
  JDIMENSION width = cinfo->output_width;
 8014dfe:	6f03      	ldr	r3, [r0, #112]	; 0x70

  for (row = 0; row < num_rows; row++) {
 8014e00:	2000      	movs	r0, #0
  JDIMENSION width = cinfo->output_width;
 8014e02:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 8014e04:	4540      	cmp	r0, r8
 8014e06:	db02      	blt.n	8014e0e <color_quantize+0x26>
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
      }
      *ptrout++ = (JSAMPLE) pixcode;
    }
  }
}
 8014e08:	b003      	add	sp, #12
 8014e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ptrout = output_buf[row];
 8014e0e:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
 8014e12:	9b01      	ldr	r3, [sp, #4]
    ptrin = input_buf[row];
 8014e14:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
    for (col = width; col > 0; col--) {
 8014e18:	eb04 0a03 	add.w	sl, r4, r3
 8014e1c:	4554      	cmp	r4, sl
 8014e1e:	d10f      	bne.n	8014e40 <color_quantize+0x58>
  for (row = 0; row < num_rows; row++) {
 8014e20:	3001      	adds	r0, #1
 8014e22:	e7ef      	b.n	8014e04 <color_quantize+0x1c>
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
 8014e24:	f815 b003 	ldrb.w	fp, [r5, r3]
 8014e28:	f85e 7023 	ldr.w	r7, [lr, r3, lsl #2]
      for (ci = 0; ci < nc; ci++) {
 8014e2c:	3301      	adds	r3, #1
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
 8014e2e:	f817 700b 	ldrb.w	r7, [r7, fp]
 8014e32:	443e      	add	r6, r7
      for (ci = 0; ci < nc; ci++) {
 8014e34:	4563      	cmp	r3, ip
 8014e36:	dbf5      	blt.n	8014e24 <color_quantize+0x3c>
 8014e38:	444d      	add	r5, r9
      *ptrout++ = (JSAMPLE) pixcode;
 8014e3a:	f804 6b01 	strb.w	r6, [r4], #1
    for (col = width; col > 0; col--) {
 8014e3e:	e7ed      	b.n	8014e1c <color_quantize+0x34>
      for (ci = 0; ci < nc; ci++) {
 8014e40:	2300      	movs	r3, #0
      pixcode = 0;
 8014e42:	461e      	mov	r6, r3
 8014e44:	e7f6      	b.n	8014e34 <color_quantize+0x4c>

08014e46 <color_quantize3>:

METHODDEF(void)
color_quantize3 (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		 JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, no dithering */
{
 8014e46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register int pixcode;
  register JSAMPROW ptrin, ptrout;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 8014e4a:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
  JSAMPROW colorindex1 = cquantize->colorindex[1];
  JSAMPROW colorindex2 = cquantize->colorindex[2];
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 8014e4e:	f8d0 9070 	ldr.w	r9, [r0, #112]	; 0x70

  for (row = 0; row < num_rows; row++) {
 8014e52:	2000      	movs	r0, #0
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 8014e54:	69a4      	ldr	r4, [r4, #24]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 8014e56:	e9d4 ce00 	ldrd	ip, lr, [r4]
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 8014e5a:	f8d4 8008 	ldr.w	r8, [r4, #8]
  for (row = 0; row < num_rows; row++) {
 8014e5e:	4298      	cmp	r0, r3
 8014e60:	db01      	blt.n	8014e66 <color_quantize3+0x20>
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
      *ptrout++ = (JSAMPLE) pixcode;
    }
  }
}
 8014e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ptrout = output_buf[row];
 8014e66:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
    for (col = width; col > 0; col--) {
 8014e6a:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 8014e6e:	eb05 0a09 	add.w	sl, r5, r9
 8014e72:	4555      	cmp	r5, sl
 8014e74:	f104 0403 	add.w	r4, r4, #3
 8014e78:	d101      	bne.n	8014e7e <color_quantize3+0x38>
  for (row = 0; row < num_rows; row++) {
 8014e7a:	3001      	adds	r0, #1
 8014e7c:	e7ef      	b.n	8014e5e <color_quantize3+0x18>
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*ptrin++)]);
 8014e7e:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 8014e82:	f81c 7006 	ldrb.w	r7, [ip, r6]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
 8014e86:	f814 6c02 	ldrb.w	r6, [r4, #-2]
 8014e8a:	f81e 6006 	ldrb.w	r6, [lr, r6]
 8014e8e:	4437      	add	r7, r6
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
 8014e90:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8014e94:	f818 6006 	ldrb.w	r6, [r8, r6]
 8014e98:	443e      	add	r6, r7
      *ptrout++ = (JSAMPLE) pixcode;
 8014e9a:	f805 6b01 	strb.w	r6, [r5], #1
    for (col = width; col > 0; col--) {
 8014e9e:	e7e8      	b.n	8014e72 <color_quantize3+0x2c>

08014ea0 <quantize3_ord_dither>:

METHODDEF(void)
quantize3_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		      JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, with ordered dithering */
{
 8014ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ea4:	469a      	mov	sl, r3
 8014ea6:	b08b      	sub	sp, #44	; 0x2c
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8014ea8:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 8014eac:	e9cd 1208 	strd	r1, r2, [sp, #32]
  register int pixcode;
  register JSAMPROW input_ptr;
  register JSAMPROW output_ptr;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 8014eb0:	699a      	ldr	r2, [r3, #24]
 8014eb2:	6811      	ldr	r1, [r2, #0]
 8014eb4:	9104      	str	r1, [sp, #16]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 8014eb6:	6851      	ldr	r1, [r2, #4]
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 8014eb8:	6892      	ldr	r2, [r2, #8]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 8014eba:	9105      	str	r1, [sp, #20]
  int row_index, col_index;	/* current indexes into dither matrix */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 8014ebc:	2100      	movs	r1, #0
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 8014ebe:	9206      	str	r2, [sp, #24]
  JDIMENSION width = cinfo->output_width;
 8014ec0:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8014ec2:	9207      	str	r2, [sp, #28]
  for (row = 0; row < num_rows; row++) {
 8014ec4:	4551      	cmp	r1, sl
 8014ec6:	db02      	blt.n	8014ece <quantize3_ord_dither+0x2e>
      col_index = (col_index + 1) & ODITHER_MASK;
    }
    row_index = (row_index + 1) & ODITHER_MASK;
    cquantize->row_index = row_index;
  }
}
 8014ec8:	b00b      	add	sp, #44	; 0x2c
 8014eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    row_index = cquantize->row_index;
 8014ece:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    output_ptr = output_buf[row];
 8014ed0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014ed2:	9c07      	ldr	r4, [sp, #28]
 8014ed4:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
    dither0 = cquantize->odither[0][row_index];
 8014ed8:	0190      	lsls	r0, r2, #6
 8014eda:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 8014ede:	9002      	str	r0, [sp, #8]
 8014ee0:	eb05 0e04 	add.w	lr, r5, r4
    col_index = 0;
 8014ee4:	2400      	movs	r4, #0
    row_index = cquantize->row_index;
 8014ee6:	9201      	str	r2, [sp, #4]
    dither2 = cquantize->odither[2][row_index];
 8014ee8:	e9d3 900e 	ldrd	r9, r0, [r3, #56]	; 0x38
 8014eec:	9003      	str	r0, [sp, #12]
    for (col = width; col > 0; col--) {
 8014eee:	9808      	ldr	r0, [sp, #32]
 8014ef0:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8014ef4:	4575      	cmp	r5, lr
 8014ef6:	f100 0003 	add.w	r0, r0, #3
 8014efa:	d106      	bne.n	8014f0a <quantize3_ord_dither+0x6a>
    row_index = (row_index + 1) & ODITHER_MASK;
 8014efc:	9a01      	ldr	r2, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 8014efe:	3101      	adds	r1, #1
    row_index = (row_index + 1) & ODITHER_MASK;
 8014f00:	3201      	adds	r2, #1
 8014f02:	f002 020f 	and.w	r2, r2, #15
    cquantize->row_index = row_index;
 8014f06:	631a      	str	r2, [r3, #48]	; 0x30
  for (row = 0; row < num_rows; row++) {
 8014f08:	e7dc      	b.n	8014ec4 <quantize3_ord_dither+0x24>
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 8014f0a:	9e02      	ldr	r6, [sp, #8]
 8014f0c:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 8014f10:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8014f14:	9a04      	ldr	r2, [sp, #16]
      col_index = (col_index + 1) & ODITHER_MASK;
 8014f16:	3401      	adds	r4, #1
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 8014f18:	f858 7006 	ldr.w	r7, [r8, r6]
 8014f1c:	4494      	add	ip, r2
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 8014f1e:	9a05      	ldr	r2, [sp, #20]
      col_index = (col_index + 1) & ODITHER_MASK;
 8014f20:	f004 040f 	and.w	r4, r4, #15
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 8014f24:	f81c b007 	ldrb.w	fp, [ip, r7]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 8014f28:	f810 cc02 	ldrb.w	ip, [r0, #-2]
 8014f2c:	f859 7006 	ldr.w	r7, [r9, r6]
 8014f30:	4494      	add	ip, r2
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 8014f32:	9a03      	ldr	r2, [sp, #12]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 8014f34:	f81c 7007 	ldrb.w	r7, [ip, r7]
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 8014f38:	5996      	ldr	r6, [r2, r6]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 8014f3a:	44bb      	add	fp, r7
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 8014f3c:	9a06      	ldr	r2, [sp, #24]
 8014f3e:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8014f42:	4417      	add	r7, r2
 8014f44:	5dbe      	ldrb	r6, [r7, r6]
 8014f46:	44b3      	add	fp, r6
      *output_ptr++ = (JSAMPLE) pixcode;
 8014f48:	f805 bb01 	strb.w	fp, [r5], #1
    for (col = width; col > 0; col--) {
 8014f4c:	e7d2      	b.n	8014ef4 <quantize3_ord_dither+0x54>

08014f4e <alloc_fs_workspace>:
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  size_t arraysize;
  int i;

  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8014f4e:	6f02      	ldr	r2, [r0, #112]	; 0x70
{
 8014f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8014f52:	3202      	adds	r2, #2
 8014f54:	f8d0 61e0 	ldr.w	r6, [r0, #480]	; 0x1e0
{
 8014f58:	4604      	mov	r4, r0
  for (i = 0; i < cinfo->out_color_components; i++) {
 8014f5a:	2700      	movs	r7, #0
  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8014f5c:	0055      	lsls	r5, r2, #1
  for (i = 0; i < cinfo->out_color_components; i++) {
 8014f5e:	3644      	adds	r6, #68	; 0x44
 8014f60:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8014f62:	42bb      	cmp	r3, r7
 8014f64:	dc00      	bgt.n	8014f68 <alloc_fs_workspace+0x1a>
    cquantize->fserrors[i] = (FSERRPTR)
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
  }
}
 8014f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 8014f68:	6863      	ldr	r3, [r4, #4]
 8014f6a:	462a      	mov	r2, r5
 8014f6c:	2101      	movs	r1, #1
 8014f6e:	4620      	mov	r0, r4
 8014f70:	685b      	ldr	r3, [r3, #4]
  for (i = 0; i < cinfo->out_color_components; i++) {
 8014f72:	3701      	adds	r7, #1
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 8014f74:	4798      	blx	r3
    cquantize->fserrors[i] = (FSERRPTR)
 8014f76:	f846 0b04 	str.w	r0, [r6], #4
  for (i = 0; i < cinfo->out_color_components; i++) {
 8014f7a:	e7f1      	b.n	8014f60 <alloc_fs_workspace+0x12>

08014f7c <finish_pass_1_quant>:

METHODDEF(void)
finish_pass_1_quant (j_decompress_ptr cinfo)
{
  /* no work in 1-pass case */
}
 8014f7c:	4770      	bx	lr

08014f7e <new_color_map_1_quant>:
 */

METHODDEF(void)
new_color_map_1_quant (j_decompress_ptr cinfo)
{
  ERREXIT(cinfo, JERR_MODE_CHANGE);
 8014f7e:	6803      	ldr	r3, [r0, #0]
 8014f80:	222f      	movs	r2, #47	; 0x2f
 8014f82:	615a      	str	r2, [r3, #20]
 8014f84:	681b      	ldr	r3, [r3, #0]
 8014f86:	4718      	bx	r3

08014f88 <quantize_fs_dither>:
{
 8014f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f8c:	b091      	sub	sp, #68	; 0x44
  JDIMENSION width = cinfo->output_width;
 8014f8e:	6f06      	ldr	r6, [r0, #112]	; 0x70
  int nc = cinfo->out_color_components;
 8014f90:	f8d0 b078 	ldr.w	fp, [r0, #120]	; 0x78
 8014f94:	4689      	mov	r9, r1
{
 8014f96:	930e      	str	r3, [sp, #56]	; 0x38
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 8014f98:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8014f9c:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 8014fa0:	930b      	str	r3, [sp, #44]	; 0x2c
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
 8014fa2:	1e73      	subs	r3, r6, #1
 8014fa4:	9304      	str	r3, [sp, #16]
 8014fa6:	fb03 f30b 	mul.w	r3, r3, fp
 8014faa:	9309      	str	r3, [sp, #36]	; 0x24
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 8014fac:	1c73      	adds	r3, r6, #1
 8014fae:	005b      	lsls	r3, r3, #1
 8014fb0:	930a      	str	r3, [sp, #40]	; 0x28
 8014fb2:	1f13      	subs	r3, r2, #4
 8014fb4:	9303      	str	r3, [sp, #12]
  for (row = 0; row < num_rows; row++) {
 8014fb6:	2300      	movs	r3, #0
 8014fb8:	9301      	str	r3, [sp, #4]
 8014fba:	9b01      	ldr	r3, [sp, #4]
 8014fbc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014fbe:	4293      	cmp	r3, r2
 8014fc0:	db02      	blt.n	8014fc8 <quantize_fs_dither+0x40>
}
 8014fc2:	b011      	add	sp, #68	; 0x44
 8014fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FMEMZERO((void FAR *) output_buf[row],
 8014fc8:	9b03      	ldr	r3, [sp, #12]
 8014fca:	4632      	mov	r2, r6
 8014fcc:	2100      	movs	r1, #0
 8014fce:	f853 0f04 	ldr.w	r0, [r3, #4]!
 8014fd2:	9303      	str	r3, [sp, #12]
 8014fd4:	f012 faa6 	bl	8027524 <memset>
    for (ci = 0; ci < nc; ci++) {
 8014fd8:	f105 0344 	add.w	r3, r5, #68	; 0x44
 8014fdc:	2000      	movs	r0, #0
 8014fde:	9306      	str	r3, [sp, #24]
	dirnc = -nc;
 8014fe0:	f1cb 0300 	rsb	r3, fp, #0
 8014fe4:	930f      	str	r3, [sp, #60]	; 0x3c
    for (ci = 0; ci < nc; ci++) {
 8014fe6:	4558      	cmp	r0, fp
 8014fe8:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8014fea:	db09      	blt.n	8015000 <quantize_fs_dither+0x78>
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 8014fec:	fab3 f383 	clz	r3, r3
 8014ff0:	f109 0904 	add.w	r9, r9, #4
 8014ff4:	095b      	lsrs	r3, r3, #5
 8014ff6:	656b      	str	r3, [r5, #84]	; 0x54
  for (row = 0; row < num_rows; row++) {
 8014ff8:	9b01      	ldr	r3, [sp, #4]
 8014ffa:	3301      	adds	r3, #1
 8014ffc:	9301      	str	r3, [sp, #4]
 8014ffe:	e7dc      	b.n	8014fba <quantize_fs_dither+0x32>
      output_ptr = output_buf[row];
 8015000:	9a03      	ldr	r2, [sp, #12]
      input_ptr = input_buf[row] + ci;
 8015002:	f8d9 1000 	ldr.w	r1, [r9]
      output_ptr = output_buf[row];
 8015006:	6814      	ldr	r4, [r2, #0]
 8015008:	9a06      	ldr	r2, [sp, #24]
      input_ptr = input_buf[row] + ci;
 801500a:	4401      	add	r1, r0
      if (cquantize->on_odd_row) {
 801500c:	f852 cb04 	ldr.w	ip, [r2], #4
 8015010:	9206      	str	r2, [sp, #24]
 8015012:	b30b      	cbz	r3, 8015058 <quantize_fs_dither+0xd0>
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
 8015014:	9b09      	ldr	r3, [sp, #36]	; 0x24
	dir = -1;
 8015016:	f04f 3eff 	mov.w	lr, #4294967295
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
 801501a:	4419      	add	r1, r3
	output_ptr += width-1;
 801501c:	9b04      	ldr	r3, [sp, #16]
 801501e:	441c      	add	r4, r3
	dirnc = -nc;
 8015020:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015022:	9308      	str	r3, [sp, #32]
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 8015024:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015026:	449c      	add	ip, r3
      colorindex_ci = cquantize->colorindex[ci];
 8015028:	69ab      	ldr	r3, [r5, #24]
      for (col = width; col > 0; col--) {
 801502a:	4667      	mov	r7, ip
 801502c:	9602      	str	r6, [sp, #8]
      colorindex_ci = cquantize->colorindex[ci];
 801502e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8015032:	930c      	str	r3, [sp, #48]	; 0x30
      colormap_ci = cquantize->sv_colormap[ci];
 8015034:	692b      	ldr	r3, [r5, #16]
 8015036:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801503a:	930d      	str	r3, [sp, #52]	; 0x34
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 801503c:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8015040:	9300      	str	r3, [sp, #0]
      belowerr = bpreverr = 0;
 8015042:	2300      	movs	r3, #0
      cur = 0;
 8015044:	4698      	mov	r8, r3
      belowerr = bpreverr = 0;
 8015046:	9307      	str	r3, [sp, #28]
      for (col = width; col > 0; col--) {
 8015048:	9a02      	ldr	r2, [sp, #8]
 801504a:	b952      	cbnz	r2, 8015062 <quantize_fs_dither+0xda>
      errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
 801504c:	9a00      	ldr	r2, [sp, #0]
    for (ci = 0; ci < nc; ci++) {
 801504e:	3001      	adds	r0, #1
      errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
 8015050:	4372      	muls	r2, r6
 8015052:	f82c 3002 	strh.w	r3, [ip, r2]
    for (ci = 0; ci < nc; ci++) {
 8015056:	e7c6      	b.n	8014fe6 <quantize_fs_dither+0x5e>
	dir = 1;
 8015058:	f04f 0e01 	mov.w	lr, #1
 801505c:	f8cd b020 	str.w	fp, [sp, #32]
 8015060:	e7e2      	b.n	8015028 <quantize_fs_dither+0xa0>
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8015062:	9a00      	ldr	r2, [sp, #0]
 8015064:	f937 a002 	ldrsh.w	sl, [r7, r2]
	cur = GETJSAMPLE(range_limit[cur]);
 8015068:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 801506a:	44d0      	add	r8, sl
	cur += GETJSAMPLE(*input_ptr);
 801506c:	f891 a000 	ldrb.w	sl, [r1]
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8015070:	f108 0808 	add.w	r8, r8, #8
	cur = GETJSAMPLE(range_limit[cur]);
 8015074:	eb02 1828 	add.w	r8, r2, r8, asr #4
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 8015078:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	cur = GETJSAMPLE(range_limit[cur]);
 801507a:	f818 a00a 	ldrb.w	sl, [r8, sl]
	*output_ptr += (JSAMPLE) pixcode;
 801507e:	f894 8000 	ldrb.w	r8, [r4]
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 8015082:	f812 200a 	ldrb.w	r2, [r2, sl]
	*output_ptr += (JSAMPLE) pixcode;
 8015086:	4490      	add	r8, r2
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 8015088:	9205      	str	r2, [sp, #20]
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 801508a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	*output_ptr += (JSAMPLE) pixcode;
 801508c:	f884 8000 	strb.w	r8, [r4]
	output_ptr += dir;	/* advance output ptr to next column */
 8015090:	4474      	add	r4, lr
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 8015092:	4690      	mov	r8, r2
 8015094:	9a05      	ldr	r2, [sp, #20]
 8015096:	f818 8002 	ldrb.w	r8, [r8, r2]
	input_ptr += dirnc;	/* advance input ptr to next column */
 801509a:	9a08      	ldr	r2, [sp, #32]
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 801509c:	ebaa 0a08 	sub.w	sl, sl, r8
	input_ptr += dirnc;	/* advance input ptr to next column */
 80150a0:	4411      	add	r1, r2
      for (col = width; col > 0; col--) {
 80150a2:	9a02      	ldr	r2, [sp, #8]
	cur += delta;		/* form error * 3 */
 80150a4:	eb0a 084a 	add.w	r8, sl, sl, lsl #1
      for (col = width; col > 0; col--) {
 80150a8:	3a01      	subs	r2, #1
	errorptr[0] = (FSERROR) (bpreverr + cur);
 80150aa:	4443      	add	r3, r8
	cur += delta;		/* form error * 5 */
 80150ac:	eb08 084a 	add.w	r8, r8, sl, lsl #1
      for (col = width; col > 0; col--) {
 80150b0:	9202      	str	r2, [sp, #8]
	errorptr[0] = (FSERROR) (bpreverr + cur);
 80150b2:	803b      	strh	r3, [r7, #0]
      for (col = width; col > 0; col--) {
 80150b4:	9a00      	ldr	r2, [sp, #0]
	bpreverr = belowerr + cur;
 80150b6:	9b07      	ldr	r3, [sp, #28]
      for (col = width; col > 0; col--) {
 80150b8:	4417      	add	r7, r2
	belowerr = bnexterr;
 80150ba:	f8cd a01c 	str.w	sl, [sp, #28]
	bpreverr = belowerr + cur;
 80150be:	4443      	add	r3, r8
	cur += delta;		/* form error * 7 */
 80150c0:	eb08 084a 	add.w	r8, r8, sl, lsl #1
      for (col = width; col > 0; col--) {
 80150c4:	e7c0      	b.n	8015048 <quantize_fs_dither+0xc0>

080150c6 <quantize_ord_dither>:
{
 80150c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150ca:	b089      	sub	sp, #36	; 0x24
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80150cc:	f8d0 71e0 	ldr.w	r7, [r0, #480]	; 0x1e0
  JDIMENSION width = cinfo->output_width;
 80150d0:	f8d0 9070 	ldr.w	r9, [r0, #112]	; 0x70
 80150d4:	1f14      	subs	r4, r2, #4
{
 80150d6:	9307      	str	r3, [sp, #28]
 80150d8:	460d      	mov	r5, r1
  int nc = cinfo->out_color_components;
 80150da:	6f83      	ldr	r3, [r0, #120]	; 0x78
  for (row = 0; row < num_rows; row++) {
 80150dc:	f04f 0800 	mov.w	r8, #0
  int nc = cinfo->out_color_components;
 80150e0:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 80150e2:	9b07      	ldr	r3, [sp, #28]
 80150e4:	4598      	cmp	r8, r3
 80150e6:	db02      	blt.n	80150ee <quantize_ord_dither+0x28>
}
 80150e8:	b009      	add	sp, #36	; 0x24
 80150ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FMEMZERO((void FAR *) output_buf[row],
 80150ee:	464a      	mov	r2, r9
 80150f0:	2100      	movs	r1, #0
 80150f2:	f854 0f04 	ldr.w	r0, [r4, #4]!
 80150f6:	f012 fa15 	bl	8027524 <memset>
    row_index = cquantize->row_index;
 80150fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    for (ci = 0; ci < nc; ci++) {
 80150fc:	f107 0e34 	add.w	lr, r7, #52	; 0x34
 8015100:	2100      	movs	r1, #0
      dither = cquantize->odither[ci][row_index];
 8015102:	019a      	lsls	r2, r3, #6
 8015104:	9203      	str	r2, [sp, #12]
    for (ci = 0; ci < nc; ci++) {
 8015106:	9a01      	ldr	r2, [sp, #4]
 8015108:	4291      	cmp	r1, r2
 801510a:	db07      	blt.n	801511c <quantize_ord_dither+0x56>
    row_index = (row_index + 1) & ODITHER_MASK;
 801510c:	3301      	adds	r3, #1
  for (row = 0; row < num_rows; row++) {
 801510e:	f108 0801 	add.w	r8, r8, #1
 8015112:	3504      	adds	r5, #4
    row_index = (row_index + 1) & ODITHER_MASK;
 8015114:	f003 030f 	and.w	r3, r3, #15
    cquantize->row_index = row_index;
 8015118:	633b      	str	r3, [r7, #48]	; 0x30
  for (row = 0; row < num_rows; row++) {
 801511a:	e7e2      	b.n	80150e2 <quantize_ord_dither+0x1c>
      input_ptr = input_buf[row] + ci;
 801511c:	682a      	ldr	r2, [r5, #0]
      col_index = 0;
 801511e:	2600      	movs	r6, #0
 8015120:	6820      	ldr	r0, [r4, #0]
      input_ptr = input_buf[row] + ci;
 8015122:	eb02 0c01 	add.w	ip, r2, r1
      colorindex_ci = cquantize->colorindex[ci];
 8015126:	69ba      	ldr	r2, [r7, #24]
 8015128:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801512c:	9205      	str	r2, [sp, #20]
      dither = cquantize->odither[ci][row_index];
 801512e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8015132:	9202      	str	r2, [sp, #8]
      for (col = width; col > 0; col--) {
 8015134:	eb09 0200 	add.w	r2, r9, r0
 8015138:	9206      	str	r2, [sp, #24]
 801513a:	9a06      	ldr	r2, [sp, #24]
 801513c:	4290      	cmp	r0, r2
 801513e:	d101      	bne.n	8015144 <quantize_ord_dither+0x7e>
    for (ci = 0; ci < nc; ci++) {
 8015140:	3101      	adds	r1, #1
 8015142:	e7e0      	b.n	8015106 <quantize_ord_dither+0x40>
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 8015144:	7802      	ldrb	r2, [r0, #0]
 8015146:	f89c a000 	ldrb.w	sl, [ip]
 801514a:	9204      	str	r2, [sp, #16]
 801514c:	9a02      	ldr	r2, [sp, #8]
 801514e:	eb02 0b86 	add.w	fp, r2, r6, lsl #2
 8015152:	9a03      	ldr	r2, [sp, #12]
	col_index = (col_index + 1) & ODITHER_MASK;
 8015154:	3601      	adds	r6, #1
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 8015156:	f85b b002 	ldr.w	fp, [fp, r2]
 801515a:	9a05      	ldr	r2, [sp, #20]
	col_index = (col_index + 1) & ODITHER_MASK;
 801515c:	f006 060f 	and.w	r6, r6, #15
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 8015160:	4492      	add	sl, r2
 8015162:	9a04      	ldr	r2, [sp, #16]
 8015164:	f81a a00b 	ldrb.w	sl, [sl, fp]
 8015168:	4452      	add	r2, sl
 801516a:	f800 2b01 	strb.w	r2, [r0], #1
	input_ptr += nc;
 801516e:	9a01      	ldr	r2, [sp, #4]
 8015170:	4494      	add	ip, r2
      for (col = width; col > 0; col--) {
 8015172:	e7e2      	b.n	801513a <quantize_ord_dither+0x74>

08015174 <create_colorindex>:
{
 8015174:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (cinfo->dither_mode == JDITHER_ORDERED) {
 8015178:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 801517c:	2101      	movs	r1, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801517e:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 8015182:	4604      	mov	r4, r0
  if (cinfo->dither_mode == JDITHER_ORDERED) {
 8015184:	2b01      	cmp	r3, #1
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8015186:	f44f 78ff 	mov.w	r8, #510	; 0x1fe
    cquantize->is_padded = FALSE;
 801518a:	bf16      	itet	ne
 801518c:	2300      	movne	r3, #0
    pad = MAXJSAMPLE*2;
 801518e:	f44f 76ff 	moveq.w	r6, #510	; 0x1fe
    pad = 0;
 8015192:	461e      	movne	r6, r3
 8015194:	61eb      	str	r3, [r5, #28]
  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 8015196:	6843      	ldr	r3, [r0, #4]
 8015198:	f506 7280 	add.w	r2, r6, #256	; 0x100
 801519c:	689f      	ldr	r7, [r3, #8]
 801519e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80151a0:	47b8      	blx	r7
  blksize = cquantize->sv_actual;
 80151a2:	f8d5 c014 	ldr.w	ip, [r5, #20]
 80151a6:	f105 0e20 	add.w	lr, r5, #32
  for (i = 0; i < cinfo->out_color_components; i++) {
 80151aa:	2300      	movs	r3, #0
  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 80151ac:	61a8      	str	r0, [r5, #24]
  for (i = 0; i < cinfo->out_color_components; i++) {
 80151ae:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80151b0:	429a      	cmp	r2, r3
 80151b2:	dc01      	bgt.n	80151b8 <create_colorindex+0x44>
}
 80151b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 80151b8:	f85e 1b04 	ldr.w	r1, [lr], #4
    blksize = blksize / nci;
 80151bc:	009f      	lsls	r7, r3, #2
 80151be:	69a8      	ldr	r0, [r5, #24]
 80151c0:	fb9c fcf1 	sdiv	ip, ip, r1
    if (pad)
 80151c4:	b126      	cbz	r6, 80151d0 <create_colorindex+0x5c>
      cquantize->colorindex[i] += MAXJSAMPLE;
 80151c6:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 80151ca:	32ff      	adds	r2, #255	; 0xff
 80151cc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    k = largest_input_value(cinfo, i, 0, nci-1);
 80151d0:	f101 39ff 	add.w	r9, r1, #4294967295
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 80151d4:	f101 0afe 	add.w	sl, r1, #254	; 0xfe
    indexptr = cquantize->colorindex[i];
 80151d8:	59c2      	ldr	r2, [r0, r7]
    val = 0;
 80151da:	2000      	movs	r0, #0
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 80151dc:	ea4f 0949 	mov.w	r9, r9, lsl #1
    for (j = 0; j <= MAXJSAMPLE; j++) {
 80151e0:	4601      	mov	r1, r0
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 80151e2:	fb9a f7f9 	sdiv	r7, sl, r9
      while (j > k)		/* advance val if past boundary */
 80151e6:	428f      	cmp	r7, r1
 80151e8:	db0a      	blt.n	8015200 <create_colorindex+0x8c>
      indexptr[j] = (JSAMPLE) (val * blksize);
 80151ea:	fb10 fb0c 	smulbb	fp, r0, ip
 80151ee:	f802 b001 	strb.w	fp, [r2, r1]
    for (j = 0; j <= MAXJSAMPLE; j++) {
 80151f2:	3101      	adds	r1, #1
 80151f4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80151f8:	d1f5      	bne.n	80151e6 <create_colorindex+0x72>
    if (pad)
 80151fa:	b93e      	cbnz	r6, 801520c <create_colorindex+0x98>
  for (i = 0; i < cinfo->out_color_components; i++) {
 80151fc:	3301      	adds	r3, #1
 80151fe:	e7d6      	b.n	80151ae <create_colorindex+0x3a>
	k = largest_input_value(cinfo, i, ++val, nci-1);
 8015200:	3001      	adds	r0, #1
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8015202:	fb08 a700 	mla	r7, r8, r0, sl
 8015206:	fb97 f7f9 	sdiv	r7, r7, r9
 801520a:	e7ec      	b.n	80151e6 <create_colorindex+0x72>
 801520c:	4611      	mov	r1, r2
 801520e:	f102 00ff 	add.w	r0, r2, #255	; 0xff
 8015212:	f1a2 07ff 	sub.w	r7, r2, #255	; 0xff
	indexptr[-j] = indexptr[0];
 8015216:	f892 9000 	ldrb.w	r9, [r2]
 801521a:	f801 9d01 	strb.w	r9, [r1, #-1]!
      for (j = 1; j <= MAXJSAMPLE; j++) {
 801521e:	42b9      	cmp	r1, r7
	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
 8015220:	f892 90ff 	ldrb.w	r9, [r2, #255]	; 0xff
 8015224:	f800 9f01 	strb.w	r9, [r0, #1]!
      for (j = 1; j <= MAXJSAMPLE; j++) {
 8015228:	d1f5      	bne.n	8015216 <create_colorindex+0xa2>
 801522a:	e7e7      	b.n	80151fc <create_colorindex+0x88>

0801522c <start_pass_1_quant>:
{
 801522c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015230:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 8015234:	4604      	mov	r4, r0
  cinfo->colormap = cquantize->sv_colormap;
 8015236:	692b      	ldr	r3, [r5, #16]
 8015238:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  cinfo->actual_number_of_colors = cquantize->sv_actual;
 801523c:	696b      	ldr	r3, [r5, #20]
 801523e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  switch (cinfo->dither_mode) {
 8015242:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8015246:	2b01      	cmp	r3, #1
 8015248:	d00b      	beq.n	8015262 <start_pass_1_quant+0x36>
 801524a:	2b02      	cmp	r3, #2
 801524c:	d05e      	beq.n	801530c <start_pass_1_quant+0xe0>
 801524e:	2b00      	cmp	r3, #0
 8015250:	d174      	bne.n	801533c <start_pass_1_quant+0x110>
    if (cinfo->out_color_components == 3)
 8015252:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8015254:	2b03      	cmp	r3, #3
      cquantize->pub.color_quantize = color_quantize3;
 8015256:	bf0c      	ite	eq
 8015258:	4b3c      	ldreq	r3, [pc, #240]	; (801534c <start_pass_1_quant+0x120>)
      cquantize->pub.color_quantize = color_quantize;
 801525a:	4b3d      	ldrne	r3, [pc, #244]	; (8015350 <start_pass_1_quant+0x124>)
 801525c:	606b      	str	r3, [r5, #4]
}
 801525e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (cinfo->out_color_components == 3)
 8015262:	6f81      	ldr	r1, [r0, #120]	; 0x78
      cquantize->pub.color_quantize = quantize_ord_dither;
 8015264:	4b3b      	ldr	r3, [pc, #236]	; (8015354 <start_pass_1_quant+0x128>)
 8015266:	4a3c      	ldr	r2, [pc, #240]	; (8015358 <start_pass_1_quant+0x12c>)
 8015268:	2903      	cmp	r1, #3
 801526a:	bf18      	it	ne
 801526c:	4613      	movne	r3, r2
 801526e:	606b      	str	r3, [r5, #4]
    cquantize->row_index = 0;	/* initialize state for ordered dither */
 8015270:	2300      	movs	r3, #0
 8015272:	632b      	str	r3, [r5, #48]	; 0x30
    if (! cquantize->is_padded)
 8015274:	69eb      	ldr	r3, [r5, #28]
 8015276:	b90b      	cbnz	r3, 801527c <start_pass_1_quant+0x50>
      create_colorindex(cinfo);
 8015278:	f7ff ff7c 	bl	8015174 <create_colorindex>
    if (cquantize->odither[0] == NULL)
 801527c:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 801527e:	2d00      	cmp	r5, #0
 8015280:	d1ed      	bne.n	801525e <start_pass_1_quant+0x32>
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015282:	f8d4 71e0 	ldr.w	r7, [r4, #480]	; 0x1e0
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015286:	f107 0820 	add.w	r8, r7, #32
 801528a:	4646      	mov	r6, r8
 801528c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801528e:	429d      	cmp	r5, r3
 8015290:	dae5      	bge.n	801525e <start_pass_1_quant+0x32>
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8015292:	f856 9b04 	ldr.w	r9, [r6], #4
    for (j = 0; j < i; j++) {
 8015296:	4642      	mov	r2, r8
 8015298:	2300      	movs	r3, #0
 801529a:	429d      	cmp	r5, r3
 801529c:	d007      	beq.n	80152ae <start_pass_1_quant+0x82>
      if (nci == cquantize->Ncolors[j]) {
 801529e:	f852 1b04 	ldr.w	r1, [r2], #4
 80152a2:	4589      	cmp	r9, r1
 80152a4:	d130      	bne.n	8015308 <start_pass_1_quant+0xdc>
	odither = cquantize->odither[j];
 80152a6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80152aa:	6b58      	ldr	r0, [r3, #52]	; 0x34
    if (odither == NULL)	/* need a new table? */
 80152ac:	bb48      	cbnz	r0, 8015302 <start_pass_1_quant+0xd6>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80152ae:	6863      	ldr	r3, [r4, #4]
 80152b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80152b4:	2101      	movs	r1, #1
 80152b6:	4620      	mov	r0, r4
 80152b8:	681b      	ldr	r3, [r3, #0]
 80152ba:	4798      	blx	r3
  den = 2 * ODITHER_CELLS * ((INT32) (ncolors - 1));
 80152bc:	f109 32ff 	add.w	r2, r9, #4294967295
 80152c0:	f100 013c 	add.w	r1, r0, #60	; 0x3c
 80152c4:	f8df c098 	ldr.w	ip, [pc, #152]	; 8015360 <start_pass_1_quant+0x134>
 80152c8:	0252      	lsls	r2, r2, #9
  for (j = 0; j < ODITHER_SIZE; j++) {
 80152ca:	f200 4a3c 	addw	sl, r0, #1084	; 0x43c
    for (k = 0; k < ODITHER_SIZE; k++) {
 80152ce:	f1a1 0e40 	sub.w	lr, r1, #64	; 0x40
    for (j = 0; j < i; j++) {
 80152d2:	46e1      	mov	r9, ip
      num = ((INT32) (ODITHER_CELLS-1 - 2*((int)base_dither_matrix[j][k])))
 80152d4:	f819 3b01 	ldrb.w	r3, [r9], #1
 80152d8:	005b      	lsls	r3, r3, #1
 80152da:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
      odither[j][k] = (int) (num<0 ? -((-num)/den) : num/den);
 80152de:	ebd3 2303 	rsbs	r3, r3, r3, lsl #8
 80152e2:	bf45      	ittet	mi
 80152e4:	425b      	negmi	r3, r3
 80152e6:	fb93 f3f2 	sdivmi	r3, r3, r2
 80152ea:	fb93 f3f2 	sdivpl	r3, r3, r2
 80152ee:	425b      	negmi	r3, r3
 80152f0:	f84e 3f04 	str.w	r3, [lr, #4]!
    for (k = 0; k < ODITHER_SIZE; k++) {
 80152f4:	458e      	cmp	lr, r1
 80152f6:	d1ed      	bne.n	80152d4 <start_pass_1_quant+0xa8>
  for (j = 0; j < ODITHER_SIZE; j++) {
 80152f8:	3140      	adds	r1, #64	; 0x40
 80152fa:	f10c 0c10 	add.w	ip, ip, #16
 80152fe:	458a      	cmp	sl, r1
 8015300:	d1e5      	bne.n	80152ce <start_pass_1_quant+0xa2>
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015302:	3501      	adds	r5, #1
    cquantize->odither[i] = odither;
 8015304:	6130      	str	r0, [r6, #16]
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015306:	e7c1      	b.n	801528c <start_pass_1_quant+0x60>
    for (j = 0; j < i; j++) {
 8015308:	3301      	adds	r3, #1
 801530a:	e7c6      	b.n	801529a <start_pass_1_quant+0x6e>
    cquantize->pub.color_quantize = quantize_fs_dither;
 801530c:	4b13      	ldr	r3, [pc, #76]	; (801535c <start_pass_1_quant+0x130>)
 801530e:	606b      	str	r3, [r5, #4]
    cquantize->on_odd_row = FALSE; /* initialize state for F-S dither */
 8015310:	2300      	movs	r3, #0
 8015312:	656b      	str	r3, [r5, #84]	; 0x54
    if (cquantize->fserrors[0] == NULL)
 8015314:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8015316:	b90b      	cbnz	r3, 801531c <start_pass_1_quant+0xf0>
      alloc_fs_workspace(cinfo);
 8015318:	f7ff fe19 	bl	8014f4e <alloc_fs_workspace>
    arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 801531c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 801531e:	3544      	adds	r5, #68	; 0x44
    for (i = 0; i < cinfo->out_color_components; i++)
 8015320:	2700      	movs	r7, #0
    arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8015322:	3202      	adds	r2, #2
 8015324:	0056      	lsls	r6, r2, #1
    for (i = 0; i < cinfo->out_color_components; i++)
 8015326:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8015328:	42bb      	cmp	r3, r7
 801532a:	dd98      	ble.n	801525e <start_pass_1_quant+0x32>
      FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 801532c:	4632      	mov	r2, r6
 801532e:	2100      	movs	r1, #0
 8015330:	f855 0b04 	ldr.w	r0, [r5], #4
    for (i = 0; i < cinfo->out_color_components; i++)
 8015334:	3701      	adds	r7, #1
      FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 8015336:	f012 f8f5 	bl	8027524 <memset>
    for (i = 0; i < cinfo->out_color_components; i++)
 801533a:	e7f4      	b.n	8015326 <start_pass_1_quant+0xfa>
    ERREXIT(cinfo, JERR_NOT_COMPILED);
 801533c:	6803      	ldr	r3, [r0, #0]
 801533e:	2231      	movs	r2, #49	; 0x31
}
 8015340:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ERREXIT(cinfo, JERR_NOT_COMPILED);
 8015344:	615a      	str	r2, [r3, #20]
 8015346:	681b      	ldr	r3, [r3, #0]
 8015348:	4718      	bx	r3
 801534a:	bf00      	nop
 801534c:	08014e47 	.word	0x08014e47
 8015350:	08014de9 	.word	0x08014de9
 8015354:	08014ea1 	.word	0x08014ea1
 8015358:	080150c7 	.word	0x080150c7
 801535c:	08014f89 	.word	0x08014f89
 8015360:	0802c2d0 	.word	0x0802c2d0

08015364 <jinit_1pass_quantizer>:
jinit_1pass_quantizer (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8015364:	6843      	ldr	r3, [r0, #4]
 8015366:	2258      	movs	r2, #88	; 0x58
 8015368:	2101      	movs	r1, #1
 801536a:	681b      	ldr	r3, [r3, #0]
{
 801536c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015370:	b085      	sub	sp, #20
 8015372:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8015374:	4798      	blx	r3
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
  cquantize->pub.start_pass = start_pass_1_quant;
 8015376:	4b69      	ldr	r3, [pc, #420]	; (801551c <jinit_1pass_quantizer+0x1b8>)
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 8015378:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
  cquantize->pub.start_pass = start_pass_1_quant;
 801537c:	6003      	str	r3, [r0, #0]
  cquantize->pub.finish_pass = finish_pass_1_quant;
 801537e:	4b68      	ldr	r3, [pc, #416]	; (8015520 <jinit_1pass_quantizer+0x1bc>)
 8015380:	6083      	str	r3, [r0, #8]
  cquantize->pub.new_color_map = new_color_map_1_quant;
 8015382:	4b68      	ldr	r3, [pc, #416]	; (8015524 <jinit_1pass_quantizer+0x1c0>)
 8015384:	60c3      	str	r3, [r0, #12]
  cquantize->fserrors[0] = NULL; /* Flag FS workspace not allocated */
 8015386:	2300      	movs	r3, #0
 8015388:	6443      	str	r3, [r0, #68]	; 0x44
  cquantize->odither[0] = NULL;	/* Also flag odither arrays not allocated */
 801538a:	6343      	str	r3, [r0, #52]	; 0x34

  /* Make sure my internal arrays won't overflow */
  if (cinfo->out_color_components > MAX_Q_COMPS)
 801538c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801538e:	2b04      	cmp	r3, #4
 8015390:	dd07      	ble.n	80153a2 <jinit_1pass_quantizer+0x3e>
    ERREXIT1(cinfo, JERR_QUANT_COMPONENTS, MAX_Q_COMPS);
 8015392:	6823      	ldr	r3, [r4, #0]
 8015394:	2039      	movs	r0, #57	; 0x39
 8015396:	2204      	movs	r2, #4
 8015398:	e9c3 0205 	strd	r0, r2, [r3, #20]
 801539c:	681b      	ldr	r3, [r3, #0]
 801539e:	4620      	mov	r0, r4
 80153a0:	4798      	blx	r3
  /* Make sure colormap indexes can be represented by JSAMPLEs */
  if (cinfo->desired_number_of_colors > (MAXJSAMPLE+1))
 80153a2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80153a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80153a8:	dd08      	ble.n	80153bc <jinit_1pass_quantizer+0x58>
 80153aa:	6823      	ldr	r3, [r4, #0]
    ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXJSAMPLE+1);
 80153ac:	213b      	movs	r1, #59	; 0x3b
 80153ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80153b2:	4620      	mov	r0, r4
 80153b4:	e9c3 1205 	strd	r1, r2, [r3, #20]
 80153b8:	681b      	ldr	r3, [r3, #0]
 80153ba:	4798      	blx	r3
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80153bc:	f8d4 61e0 	ldr.w	r6, [r4, #480]	; 0x1e0
  iroot = 1;
 80153c0:	2301      	movs	r3, #1
  int nc = cinfo->out_color_components; /* number of color components */
 80153c2:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
  total_colors = select_ncolors(cinfo, cquantize->Ncolors);
 80153c6:	f106 0720 	add.w	r7, r6, #32
  int max_colors = cinfo->desired_number_of_colors;
 80153ca:	f8d4 9060 	ldr.w	r9, [r4, #96]	; 0x60
    iroot++;
 80153ce:	469a      	mov	sl, r3
 80153d0:	3301      	adds	r3, #1
    for (i = 1; i < nc; i++)
 80153d2:	2101      	movs	r1, #1
    temp = iroot;		/* set temp = iroot ** nc */
 80153d4:	461a      	mov	r2, r3
    for (i = 1; i < nc; i++)
 80153d6:	4588      	cmp	r8, r1
 80153d8:	dc49      	bgt.n	801546e <jinit_1pass_quantizer+0x10a>
  } while (temp <= (long) max_colors); /* repeat till iroot exceeds root */
 80153da:	4591      	cmp	r9, r2
 80153dc:	daf7      	bge.n	80153ce <jinit_1pass_quantizer+0x6a>
  if (iroot < 2)
 80153de:	f1ba 0f01 	cmp.w	sl, #1
 80153e2:	d106      	bne.n	80153f2 <jinit_1pass_quantizer+0x8e>
 80153e4:	6823      	ldr	r3, [r4, #0]
    ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, (int) temp);
 80153e6:	213a      	movs	r1, #58	; 0x3a
 80153e8:	4620      	mov	r0, r4
 80153ea:	e9c3 1205 	strd	r1, r2, [r3, #20]
 80153ee:	681b      	ldr	r3, [r3, #0]
 80153f0:	4798      	blx	r3
 80153f2:	f106 021c 	add.w	r2, r6, #28
    for (i = 1; i < nc; i++)
 80153f6:	2300      	movs	r3, #0
 80153f8:	2501      	movs	r5, #1
  for (i = 0; i < nc; i++) {
 80153fa:	4598      	cmp	r8, r3
 80153fc:	dc3a      	bgt.n	8015474 <jinit_1pass_quantizer+0x110>
      j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 80153fe:	f8df e128 	ldr.w	lr, [pc, #296]	; 8015528 <jinit_1pass_quantizer+0x1c4>
    changed = FALSE;
 8015402:	2100      	movs	r1, #0
    for (i = 0; i < nc; i++) {
 8015404:	460b      	mov	r3, r1
 8015406:	4598      	cmp	r8, r3
 8015408:	dc3a      	bgt.n	8015480 <jinit_1pass_quantizer+0x11c>
  } while (changed);
 801540a:	2900      	cmp	r1, #0
 801540c:	d1f9      	bne.n	8015402 <jinit_1pass_quantizer+0x9e>
  if (cinfo->out_color_components == 3)
 801540e:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8015410:	6823      	ldr	r3, [r4, #0]
 8015412:	2903      	cmp	r1, #3
 8015414:	685a      	ldr	r2, [r3, #4]
 8015416:	d14a      	bne.n	80154ae <jinit_1pass_quantizer+0x14a>
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 8015418:	619d      	str	r5, [r3, #24]
 801541a:	6a31      	ldr	r1, [r6, #32]
 801541c:	61d9      	str	r1, [r3, #28]
 801541e:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8015420:	6219      	str	r1, [r3, #32]
 8015422:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8015424:	6259      	str	r1, [r3, #36]	; 0x24
 8015426:	2160      	movs	r1, #96	; 0x60
 8015428:	6159      	str	r1, [r3, #20]
    TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);
 801542a:	2101      	movs	r1, #1
 801542c:	4620      	mov	r0, r4
 801542e:	4790      	blx	r2
  colormap = (*cinfo->mem->alloc_sarray)
 8015430:	6863      	ldr	r3, [r4, #4]
 8015432:	462a      	mov	r2, r5
 8015434:	2101      	movs	r1, #1
 8015436:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801543a:	4620      	mov	r0, r4
 801543c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801543e:	47c0      	blx	r8
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015440:	46ae      	mov	lr, r5
 8015442:	2200      	movs	r2, #0
 8015444:	e9cd 7000 	strd	r7, r0, [sp]
 8015448:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801544a:	429a      	cmp	r2, r3
 801544c:	db33      	blt.n	80154b6 <jinit_1pass_quantizer+0x152>
  cquantize->sv_colormap = colormap;
 801544e:	9b01      	ldr	r3, [sp, #4]

  /* Create the colormap and color index table. */
  create_colormap(cinfo);
  create_colorindex(cinfo);
 8015450:	4620      	mov	r0, r4
  cquantize->sv_actual = total_colors;
 8015452:	e9c6 3504 	strd	r3, r5, [r6, #16]
  create_colorindex(cinfo);
 8015456:	f7ff fe8d 	bl	8015174 <create_colorindex>
   * We do this now since it is FAR storage and may affect the memory
   * manager's space calculations.  If the user changes to FS dither
   * mode in a later pass, we will allocate the space then, and will
   * possibly overrun the max_memory_to_use setting.
   */
  if (cinfo->dither_mode == JDITHER_FS)
 801545a:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 801545e:	2b02      	cmp	r3, #2
 8015460:	d158      	bne.n	8015514 <jinit_1pass_quantizer+0x1b0>
    alloc_fs_workspace(cinfo);
 8015462:	4620      	mov	r0, r4
}
 8015464:	b005      	add	sp, #20
 8015466:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    alloc_fs_workspace(cinfo);
 801546a:	f7ff bd70 	b.w	8014f4e <alloc_fs_workspace>
      temp *= iroot;
 801546e:	435a      	muls	r2, r3
    for (i = 1; i < nc; i++)
 8015470:	3101      	adds	r1, #1
 8015472:	e7b0      	b.n	80153d6 <jinit_1pass_quantizer+0x72>
    total_colors *= iroot;
 8015474:	fb0a f505 	mul.w	r5, sl, r5
  for (i = 0; i < nc; i++) {
 8015478:	3301      	adds	r3, #1
    Ncolors[i] = iroot;
 801547a:	f842 af04 	str.w	sl, [r2, #4]!
  for (i = 0; i < nc; i++) {
 801547e:	e7bc      	b.n	80153fa <jinit_1pass_quantizer+0x96>
      j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 8015480:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8015484:	2a02      	cmp	r2, #2
 8015486:	bf0c      	ite	eq
 8015488:	f85e 0023 	ldreq.w	r0, [lr, r3, lsl #2]
 801548c:	4618      	movne	r0, r3
      temp = total_colors / Ncolors[j];
 801548e:	f857 c020 	ldr.w	ip, [r7, r0, lsl #2]
 8015492:	fb95 f2fc 	sdiv	r2, r5, ip
      temp *= Ncolors[j]+1;	/* done in long arith to avoid oflo */
 8015496:	fb0c 2202 	mla	r2, ip, r2, r2
 801549a:	f10c 0a01 	add.w	sl, ip, #1
      if (temp > (long) max_colors)
 801549e:	4591      	cmp	r9, r2
 80154a0:	dbb3      	blt.n	801540a <jinit_1pass_quantizer+0xa6>
    for (i = 0; i < nc; i++) {
 80154a2:	3301      	adds	r3, #1
 80154a4:	4615      	mov	r5, r2
      changed = TRUE;
 80154a6:	2101      	movs	r1, #1
      Ncolors[j]++;		/* OK, apply the increment */
 80154a8:	f847 a020 	str.w	sl, [r7, r0, lsl #2]
    for (i = 0; i < nc; i++) {
 80154ac:	e7ab      	b.n	8015406 <jinit_1pass_quantizer+0xa2>
    TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);
 80154ae:	2161      	movs	r1, #97	; 0x61
 80154b0:	e9c3 1505 	strd	r1, r5, [r3, #20]
 80154b4:	e7b9      	b.n	801542a <jinit_1pass_quantizer+0xc6>
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 80154b6:	9b00      	ldr	r3, [sp, #0]
 80154b8:	f853 9b04 	ldr.w	r9, [r3], #4
      val = output_value(cinfo, i, j, nci-1);
 80154bc:	f109 3bff 	add.w	fp, r9, #4294967295
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 80154c0:	9300      	str	r3, [sp, #0]
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 80154c2:	ea4f 036b 	mov.w	r3, fp, asr #1
    blksize = blkdist / nci;
 80154c6:	fb9e f8f9 	sdiv	r8, lr, r9
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 80154ca:	9302      	str	r3, [sp, #8]
    for (j = 0; j < nci; j++) {
 80154cc:	2300      	movs	r3, #0
 80154ce:	469a      	mov	sl, r3
 80154d0:	4599      	cmp	r9, r3
 80154d2:	dc02      	bgt.n	80154da <jinit_1pass_quantizer+0x176>
  for (i = 0; i < cinfo->out_color_components; i++) {
 80154d4:	3201      	adds	r2, #1
    blkdist = blksize;		/* blksize of this color is blkdist of next */
 80154d6:	46c6      	mov	lr, r8
 80154d8:	e7b6      	b.n	8015448 <jinit_1pass_quantizer+0xe4>
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 80154da:	ebc3 2103 	rsb	r1, r3, r3, lsl #8
 80154de:	9f02      	ldr	r7, [sp, #8]
 80154e0:	4439      	add	r1, r7
 80154e2:	fb91 f1fb 	sdiv	r1, r1, fp
 80154e6:	9103      	str	r1, [sp, #12]
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 80154e8:	4651      	mov	r1, sl
 80154ea:	42a9      	cmp	r1, r5
 80154ec:	db0f      	blt.n	801550e <jinit_1pass_quantizer+0x1aa>
    for (j = 0; j < nci; j++) {
 80154ee:	3301      	adds	r3, #1
 80154f0:	44c2      	add	sl, r8
 80154f2:	e7ed      	b.n	80154d0 <jinit_1pass_quantizer+0x16c>
	  colormap[i][ptr+k] = (JSAMPLE) val;
 80154f4:	9801      	ldr	r0, [sp, #4]
 80154f6:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
 80154fa:	4467      	add	r7, ip
	for (k = 0; k < blksize; k++)
 80154fc:	f10c 0c01 	add.w	ip, ip, #1
	  colormap[i][ptr+k] = (JSAMPLE) val;
 8015500:	4638      	mov	r0, r7
 8015502:	9f03      	ldr	r7, [sp, #12]
 8015504:	5447      	strb	r7, [r0, r1]
	for (k = 0; k < blksize; k++)
 8015506:	45e0      	cmp	r8, ip
 8015508:	dcf4      	bgt.n	80154f4 <jinit_1pass_quantizer+0x190>
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 801550a:	4471      	add	r1, lr
 801550c:	e7ed      	b.n	80154ea <jinit_1pass_quantizer+0x186>
	for (k = 0; k < blksize; k++)
 801550e:	f04f 0c00 	mov.w	ip, #0
 8015512:	e7f8      	b.n	8015506 <jinit_1pass_quantizer+0x1a2>
}
 8015514:	b005      	add	sp, #20
 8015516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801551a:	bf00      	nop
 801551c:	0801522d 	.word	0x0801522d
 8015520:	08014f7d 	.word	0x08014f7d
 8015524:	08014f7f 	.word	0x08014f7f
 8015528:	0802c2c4 	.word	0x0802c2c4

0801552c <prescan_quantize>:
		  JSAMPARRAY output_buf, int num_rows)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register JSAMPROW ptr;
  register histptr histp;
  register hist3d histogram = cquantize->histogram;
 801552c:	f8d0 21e0 	ldr.w	r2, [r0, #480]	; 0x1e0
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 8015530:	f8d0 c070 	ldr.w	ip, [r0, #112]	; 0x70
{
 8015534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  register hist3d histogram = cquantize->histogram;
 8015538:	6997      	ldr	r7, [r2, #24]

  for (row = 0; row < num_rows; row++) {
 801553a:	2500      	movs	r5, #0
 801553c:	f04f 0e02 	mov.w	lr, #2
 8015540:	429d      	cmp	r5, r3
 8015542:	db01      	blt.n	8015548 <prescan_quantize+0x1c>
      if (++(*histp) <= 0)
	(*histp)--;
      ptr += 3;
    }
  }
}
 8015544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (col = width; col > 0; col--) {
 8015548:	f851 2025 	ldr.w	r2, [r1, r5, lsl #2]
 801554c:	4666      	mov	r6, ip
 801554e:	3203      	adds	r2, #3
 8015550:	b90e      	cbnz	r6, 8015556 <prescan_quantize+0x2a>
  for (row = 0; row < num_rows; row++) {
 8015552:	3501      	adds	r5, #1
 8015554:	e7f4      	b.n	8015540 <prescan_quantize+0x14>
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 8015556:	f812 4c02 	ldrb.w	r4, [r2, #-2]
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
 801555a:	f812 8c03 	ldrb.w	r8, [r2, #-3]
			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
 801555e:	f812 0c01 	ldrb.w	r0, [r2, #-1]
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 8015562:	08a4      	lsrs	r4, r4, #2
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
 8015564:	ea4f 08d8 	mov.w	r8, r8, lsr #3
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 8015568:	01a4      	lsls	r4, r4, #6
 801556a:	08c0      	lsrs	r0, r0, #3
 801556c:	f857 8028 	ldr.w	r8, [r7, r8, lsl #2]
 8015570:	fb1e 4000 	smlabb	r0, lr, r0, r4
      if (++(*histp) <= 0)
 8015574:	f838 4000 	ldrh.w	r4, [r8, r0]
 8015578:	3401      	adds	r4, #1
 801557a:	b2a4      	uxth	r4, r4
 801557c:	b10c      	cbz	r4, 8015582 <prescan_quantize+0x56>
 801557e:	f828 4000 	strh.w	r4, [r8, r0]
    for (col = width; col > 0; col--) {
 8015582:	3e01      	subs	r6, #1
 8015584:	3203      	adds	r2, #3
 8015586:	e7e3      	b.n	8015550 <prescan_quantize+0x24>

08015588 <init_error_limit>:
 */

LOCAL(void)
init_error_limit (j_decompress_ptr cinfo)
/* Allocate and fill in the error_limiter table */
{
 8015588:	b538      	push	{r3, r4, r5, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  int * table;
  int in, out;

  table = (int *) (*cinfo->mem->alloc_small)
 801558a:	6843      	ldr	r3, [r0, #4]
 801558c:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8015590:	2101      	movs	r1, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015592:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
  table = (int *) (*cinfo->mem->alloc_small)
 8015596:	681b      	ldr	r3, [r3, #0]
 8015598:	4798      	blx	r3
    ((j_common_ptr) cinfo, JPOOL_IMAGE, (MAXJSAMPLE*2+1) * SIZEOF(int));
  table += MAXJSAMPLE;		/* so can index -MAXJSAMPLE .. +MAXJSAMPLE */
 801559a:	f500 737f 	add.w	r3, r0, #1020	; 0x3fc
 801559e:	f500 717e 	add.w	r1, r0, #1016	; 0x3f8
 80155a2:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  cquantize->error_limiter = table;
 80155a6:	62a3      	str	r3, [r4, #40]	; 0x28

#define STEPSIZE ((MAXJSAMPLE+1)/16)
  /* Map errors 1:1 up to +- MAXJSAMPLE/16 */
  out = 0;
  for (in = 0; in < STEPSIZE; in++, out++) {
 80155a8:	2300      	movs	r3, #0
    table[in] = out; table[-in] = -out;
 80155aa:	425c      	negs	r4, r3
 80155ac:	f841 3f04 	str.w	r3, [r1, #4]!
  for (in = 0; in < STEPSIZE; in++, out++) {
 80155b0:	3301      	adds	r3, #1
    table[in] = out; table[-in] = -out;
 80155b2:	f842 4d04 	str.w	r4, [r2, #-4]!
  for (in = 0; in < STEPSIZE; in++, out++) {
 80155b6:	2b10      	cmp	r3, #16
 80155b8:	d1f7      	bne.n	80155aa <init_error_limit+0x22>
 80155ba:	f500 6487 	add.w	r4, r0, #1080	; 0x438
 80155be:	f500 7170 	add.w	r1, r0, #960	; 0x3c0
 80155c2:	f06f 0211 	mvn.w	r2, #17
  }
  /* Map errors 1:2 up to +- 3*MAXJSAMPLE/16 */
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
    table[in] = out; table[-in] = -out;
 80155c6:	425d      	negs	r5, r3
 80155c8:	f844 3f04 	str.w	r3, [r4, #4]!
 80155cc:	f841 5d04 	str.w	r5, [r1, #-4]!
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
 80155d0:	f002 0501 	and.w	r5, r2, #1
 80155d4:	3a01      	subs	r2, #1
 80155d6:	442b      	add	r3, r5
 80155d8:	f112 0f32 	cmn.w	r2, #50	; 0x32
 80155dc:	d1f3      	bne.n	80155c6 <init_error_limit+0x3e>
 80155de:	f500 6197 	add.w	r1, r0, #1208	; 0x4b8
 80155e2:	f500 7250 	add.w	r2, r0, #832	; 0x340
  }
  /* Clamp the rest to final out value (which is (MAXJSAMPLE+1)/8) */
  for (; in <= MAXJSAMPLE; in++) {
    table[in] = out; table[-in] = -out;
 80155e6:	425c      	negs	r4, r3
 80155e8:	f841 3f04 	str.w	r3, [r1, #4]!
 80155ec:	f842 4d04 	str.w	r4, [r2, #-4]!
  for (; in <= MAXJSAMPLE; in++) {
 80155f0:	4282      	cmp	r2, r0
 80155f2:	d1f9      	bne.n	80155e8 <init_error_limit+0x60>
  }
#undef STEPSIZE
}
 80155f4:	bd38      	pop	{r3, r4, r5, pc}

080155f6 <finish_pass2>:

METHODDEF(void)
finish_pass2 (j_decompress_ptr cinfo)
{
  /* no work */
}
 80155f6:	4770      	bx	lr

080155f8 <new_color_map_2_quant>:
new_color_map_2_quant (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;

  /* Reset the inverse color map */
  cquantize->needs_zeroed = TRUE;
 80155f8:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 80155fc:	2201      	movs	r2, #1
 80155fe:	61da      	str	r2, [r3, #28]
}
 8015600:	4770      	bx	lr
	...

08015604 <start_pass_2_quant>:
{
 8015604:	b573      	push	{r0, r1, r4, r5, r6, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015606:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 801560a:	4604      	mov	r4, r0
  if (cinfo->dither_mode != JDITHER_NONE)
 801560c:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  hist3d histogram = cquantize->histogram;
 8015610:	69ae      	ldr	r6, [r5, #24]
  if (cinfo->dither_mode != JDITHER_NONE)
 8015612:	2b00      	cmp	r3, #0
 8015614:	d050      	beq.n	80156b8 <start_pass_2_quant+0xb4>
    cinfo->dither_mode = JDITHER_FS;
 8015616:	2302      	movs	r3, #2
 8015618:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  if (is_pre_scan) {
 801561c:	b189      	cbz	r1, 8015642 <start_pass_2_quant+0x3e>
    cquantize->pub.color_quantize = prescan_quantize;
 801561e:	4b28      	ldr	r3, [pc, #160]	; (80156c0 <start_pass_2_quant+0xbc>)
 8015620:	606b      	str	r3, [r5, #4]
    cquantize->pub.finish_pass = finish_pass1;
 8015622:	4b28      	ldr	r3, [pc, #160]	; (80156c4 <start_pass_2_quant+0xc0>)
 8015624:	60ab      	str	r3, [r5, #8]
  if (cquantize->needs_zeroed) {
 8015626:	1f34      	subs	r4, r6, #4
 8015628:	367c      	adds	r6, #124	; 0x7c
      FMEMZERO((void FAR *) histogram[i],
 801562a:	f854 0f04 	ldr.w	r0, [r4, #4]!
 801562e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015632:	2100      	movs	r1, #0
 8015634:	f011 ff76 	bl	8027524 <memset>
    for (i = 0; i < HIST_C0_ELEMS; i++) {
 8015638:	42a6      	cmp	r6, r4
 801563a:	d1f6      	bne.n	801562a <start_pass_2_quant+0x26>
    cquantize->needs_zeroed = FALSE;
 801563c:	2300      	movs	r3, #0
 801563e:	61eb      	str	r3, [r5, #28]
}
 8015640:	e02f      	b.n	80156a2 <start_pass_2_quant+0x9e>
      cquantize->pub.color_quantize = pass2_fs_dither;
 8015642:	4b21      	ldr	r3, [pc, #132]	; (80156c8 <start_pass_2_quant+0xc4>)
 8015644:	606b      	str	r3, [r5, #4]
    cquantize->pub.finish_pass = finish_pass2;
 8015646:	4b21      	ldr	r3, [pc, #132]	; (80156cc <start_pass_2_quant+0xc8>)
 8015648:	60ab      	str	r3, [r5, #8]
    i = cinfo->actual_number_of_colors;
 801564a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    if (i < 1)
 801564e:	2b00      	cmp	r3, #0
 8015650:	dc29      	bgt.n	80156a6 <start_pass_2_quant+0xa2>
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 1);
 8015652:	223a      	movs	r2, #58	; 0x3a
 8015654:	6823      	ldr	r3, [r4, #0]
 8015656:	615a      	str	r2, [r3, #20]
 8015658:	2201      	movs	r2, #1
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 801565a:	619a      	str	r2, [r3, #24]
 801565c:	4620      	mov	r0, r4
 801565e:	681b      	ldr	r3, [r3, #0]
 8015660:	4798      	blx	r3
    if (cinfo->dither_mode == JDITHER_FS) {
 8015662:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8015666:	2b02      	cmp	r3, #2
 8015668:	d118      	bne.n	801569c <start_pass_2_quant+0x98>
      size_t arraysize = (size_t) ((cinfo->output_width + 2) *
 801566a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801566c:	2206      	movs	r2, #6
 801566e:	435a      	muls	r2, r3
      if (cquantize->fserrors == NULL)
 8015670:	6a2b      	ldr	r3, [r5, #32]
      size_t arraysize = (size_t) ((cinfo->output_width + 2) *
 8015672:	320c      	adds	r2, #12
      if (cquantize->fserrors == NULL)
 8015674:	b93b      	cbnz	r3, 8015686 <start_pass_2_quant+0x82>
	cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 8015676:	6863      	ldr	r3, [r4, #4]
 8015678:	2101      	movs	r1, #1
 801567a:	4620      	mov	r0, r4
 801567c:	9201      	str	r2, [sp, #4]
 801567e:	685b      	ldr	r3, [r3, #4]
 8015680:	4798      	blx	r3
 8015682:	9a01      	ldr	r2, [sp, #4]
 8015684:	6228      	str	r0, [r5, #32]
      FMEMZERO((void FAR *) cquantize->fserrors, arraysize);
 8015686:	2100      	movs	r1, #0
 8015688:	6a28      	ldr	r0, [r5, #32]
 801568a:	f011 ff4b 	bl	8027524 <memset>
      if (cquantize->error_limiter == NULL)
 801568e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8015690:	b913      	cbnz	r3, 8015698 <start_pass_2_quant+0x94>
	init_error_limit(cinfo);
 8015692:	4620      	mov	r0, r4
 8015694:	f7ff ff78 	bl	8015588 <init_error_limit>
      cquantize->on_odd_row = FALSE;
 8015698:	2300      	movs	r3, #0
 801569a:	626b      	str	r3, [r5, #36]	; 0x24
  if (cquantize->needs_zeroed) {
 801569c:	69eb      	ldr	r3, [r5, #28]
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d1c1      	bne.n	8015626 <start_pass_2_quant+0x22>
}
 80156a2:	b002      	add	sp, #8
 80156a4:	bd70      	pop	{r4, r5, r6, pc}
    if (i > MAXNUMCOLORS)
 80156a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80156aa:	ddda      	ble.n	8015662 <start_pass_2_quant+0x5e>
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 80156ac:	223b      	movs	r2, #59	; 0x3b
 80156ae:	6823      	ldr	r3, [r4, #0]
 80156b0:	615a      	str	r2, [r3, #20]
 80156b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80156b6:	e7d0      	b.n	801565a <start_pass_2_quant+0x56>
  if (is_pre_scan) {
 80156b8:	2900      	cmp	r1, #0
 80156ba:	d1b0      	bne.n	801561e <start_pass_2_quant+0x1a>
      cquantize->pub.color_quantize = pass2_no_dither;
 80156bc:	4b04      	ldr	r3, [pc, #16]	; (80156d0 <start_pass_2_quant+0xcc>)
 80156be:	e7c1      	b.n	8015644 <start_pass_2_quant+0x40>
 80156c0:	0801552d 	.word	0x0801552d
 80156c4:	08015e2f 	.word	0x08015e2f
 80156c8:	08015c2d 	.word	0x08015c2d
 80156cc:	080155f7 	.word	0x080155f7
 80156d0:	08015ba3 	.word	0x08015ba3

080156d4 <update_box.isra.0>:
update_box (j_decompress_ptr cinfo, boxptr boxp)
 80156d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  c0min = boxp->c0min;  c0max = boxp->c0max;
 80156d8:	e9d1 7b00 	ldrd	r7, fp, [r1]
  hist3d histogram = cquantize->histogram;
 80156dc:	6983      	ldr	r3, [r0, #24]
update_box (j_decompress_ptr cinfo, boxptr boxp)
 80156de:	b085      	sub	sp, #20
  if (c0max > c0min)
 80156e0:	455f      	cmp	r7, fp
  hist3d histogram = cquantize->histogram;
 80156e2:	9301      	str	r3, [sp, #4]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 80156e4:	463b      	mov	r3, r7
  c2min = boxp->c2min;  c2max = boxp->c2max;
 80156e6:	e9d1 6404 	ldrd	r6, r4, [r1, #16]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 80156ea:	e9d1 c002 	ldrd	ip, r0, [r1, #8]
  if (c0max > c0min)
 80156ee:	ea4f 0e46 	mov.w	lr, r6, lsl #1
 80156f2:	db24      	blt.n	801573e <update_box.isra.0+0x6a>
  if (c1max > c1min)
 80156f4:	4584      	cmp	ip, r0
 80156f6:	4662      	mov	r2, ip
 80156f8:	db5d      	blt.n	80157b6 <update_box.isra.0+0xe2>
  if (c2max > c2min)
 80156fa:	42a6      	cmp	r6, r4
 80156fc:	f280 80ec 	bge.w	80158d8 <update_box.isra.0+0x204>
	histp = & histogram[c0][c1min][c2];
 8015700:	0195      	lsls	r5, r2, #6
 8015702:	f06f 073f 	mvn.w	r7, #63	; 0x3f
 8015706:	46b4      	mov	ip, r6
 8015708:	9502      	str	r5, [sp, #8]
 801570a:	fb07 f502 	mul.w	r5, r7, r2
 801570e:	9503      	str	r5, [sp, #12]
 8015710:	9d02      	ldr	r5, [sp, #8]
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8015712:	469e      	mov	lr, r3
 8015714:	eb05 094c 	add.w	r9, r5, ip, lsl #1
 8015718:	9d03      	ldr	r5, [sp, #12]
 801571a:	44a9      	add	r9, r5
 801571c:	e083      	b.n	8015826 <update_box.isra.0+0x152>
	histp = & histogram[c0][c1][c2min];
 801571e:	9a01      	ldr	r2, [sp, #4]
 8015720:	eb0e 1988 	add.w	r9, lr, r8, lsl #6
 8015724:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8015728:	444a      	add	r2, r9
  c2min = boxp->c2min;  c2max = boxp->c2max;
 801572a:	46b1      	mov	r9, r6
	for (c2 = c2min; c2 <= c2max; c2++)
 801572c:	454c      	cmp	r4, r9
 801572e:	da08      	bge.n	8015742 <update_box.isra.0+0x6e>
      for (c1 = c1min; c1 <= c1max; c1++) {
 8015730:	f108 0801 	add.w	r8, r8, #1
 8015734:	4540      	cmp	r0, r8
 8015736:	daf2      	bge.n	801571e <update_box.isra.0+0x4a>
    for (c0 = c0min; c0 <= c0max; c0++)
 8015738:	3301      	adds	r3, #1
 801573a:	459b      	cmp	fp, r3
 801573c:	db0f      	blt.n	801575e <update_box.isra.0+0x8a>
  c1min = boxp->c1min;  c1max = boxp->c1max;
 801573e:	46e0      	mov	r8, ip
 8015740:	e7f8      	b.n	8015734 <update_box.isra.0+0x60>
	  if (*histp++ != 0) {
 8015742:	f832 ab02 	ldrh.w	sl, [r2], #2
 8015746:	f1ba 0f00 	cmp.w	sl, #0
 801574a:	d005      	beq.n	8015758 <update_box.isra.0+0x84>
  if (c0max > c0min)
 801574c:	459b      	cmp	fp, r3
	    boxp->c0min = c0min = c0;
 801574e:	600b      	str	r3, [r1, #0]
  if (c0max > c0min)
 8015750:	ddd0      	ble.n	80156f4 <update_box.isra.0+0x20>
  c1min = boxp->c1min;  c1max = boxp->c1max;
 8015752:	465f      	mov	r7, fp
 8015754:	46e0      	mov	r8, ip
 8015756:	e00f      	b.n	8015778 <update_box.isra.0+0xa4>
	for (c2 = c2min; c2 <= c2max; c2++)
 8015758:	f109 0901 	add.w	r9, r9, #1
 801575c:	e7e6      	b.n	801572c <update_box.isra.0+0x58>
 have_c0min:
 801575e:	463b      	mov	r3, r7
 8015760:	e7f7      	b.n	8015752 <update_box.isra.0+0x7e>
	histp = & histogram[c0][c1][c2min];
 8015762:	9a01      	ldr	r2, [sp, #4]
 8015764:	eb0e 1988 	add.w	r9, lr, r8, lsl #6
 8015768:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 801576c:	444a      	add	r2, r9
  c2min = boxp->c2min;  c2max = boxp->c2max;
 801576e:	46b1      	mov	r9, r6
	for (c2 = c2min; c2 <= c2max; c2++)
 8015770:	454c      	cmp	r4, r9
 8015772:	da07      	bge.n	8015784 <update_box.isra.0+0xb0>
      for (c1 = c1min; c1 <= c1max; c1++) {
 8015774:	f108 0801 	add.w	r8, r8, #1
 8015778:	4540      	cmp	r0, r8
 801577a:	daf2      	bge.n	8015762 <update_box.isra.0+0x8e>
    for (c0 = c0max; c0 >= c0min; c0--)
 801577c:	3f01      	subs	r7, #1
 801577e:	429f      	cmp	r7, r3
 8015780:	dbb8      	blt.n	80156f4 <update_box.isra.0+0x20>
 8015782:	e7e7      	b.n	8015754 <update_box.isra.0+0x80>
	  if (*histp++ != 0) {
 8015784:	f832 ab02 	ldrh.w	sl, [r2], #2
 8015788:	f1ba 0f00 	cmp.w	sl, #0
 801578c:	d002      	beq.n	8015794 <update_box.isra.0+0xc0>
	    goto have_c0max;
 801578e:	46bb      	mov	fp, r7
	    boxp->c0max = c0max = c0;
 8015790:	604f      	str	r7, [r1, #4]
	    goto have_c0max;
 8015792:	e7af      	b.n	80156f4 <update_box.isra.0+0x20>
	for (c2 = c2min; c2 <= c2max; c2++)
 8015794:	f109 0901 	add.w	r9, r9, #1
 8015798:	e7ea      	b.n	8015770 <update_box.isra.0+0x9c>
	histp = & histogram[c0][c1][c2min];
 801579a:	9d01      	ldr	r5, [sp, #4]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 801579c:	46b1      	mov	r9, r6
	histp = & histogram[c0][c1][c2min];
 801579e:	f855 7028 	ldr.w	r7, [r5, r8, lsl #2]
 80157a2:	4457      	add	r7, sl
	for (c2 = c2min; c2 <= c2max; c2++)
 80157a4:	454c      	cmp	r4, r9
 80157a6:	da0a      	bge.n	80157be <update_box.isra.0+0xea>
      for (c0 = c0min; c0 <= c0max; c0++) {
 80157a8:	f108 0801 	add.w	r8, r8, #1
 80157ac:	45d8      	cmp	r8, fp
 80157ae:	ddf4      	ble.n	801579a <update_box.isra.0+0xc6>
    for (c1 = c1min; c1 <= c1max; c1++)
 80157b0:	3201      	adds	r2, #1
 80157b2:	4290      	cmp	r0, r2
 80157b4:	db11      	blt.n	80157da <update_box.isra.0+0x106>
  c2min = boxp->c2min;  c2max = boxp->c2max;
 80157b6:	4698      	mov	r8, r3
	histp = & histogram[c0][c1][c2min];
 80157b8:	eb0e 1a82 	add.w	sl, lr, r2, lsl #6
 80157bc:	e7f6      	b.n	80157ac <update_box.isra.0+0xd8>
	  if (*histp++ != 0) {
 80157be:	f837 5b02 	ldrh.w	r5, [r7], #2
 80157c2:	b13d      	cbz	r5, 80157d4 <update_box.isra.0+0x100>
  if (c1max > c1min)
 80157c4:	4290      	cmp	r0, r2
	    boxp->c1min = c1min = c1;
 80157c6:	608a      	str	r2, [r1, #8]
  if (c1max > c1min)
 80157c8:	dd97      	ble.n	80156fa <update_box.isra.0+0x26>
  c2min = boxp->c2min;  c2max = boxp->c2max;
 80157ca:	4684      	mov	ip, r0
 80157cc:	4698      	mov	r8, r3
	histp = & histogram[c0][c1][c2min];
 80157ce:	eb0e 1a8c 	add.w	sl, lr, ip, lsl #6
 80157d2:	e00d      	b.n	80157f0 <update_box.isra.0+0x11c>
	for (c2 = c2min; c2 <= c2max; c2++)
 80157d4:	f109 0901 	add.w	r9, r9, #1
 80157d8:	e7e4      	b.n	80157a4 <update_box.isra.0+0xd0>
 have_c1min:
 80157da:	4662      	mov	r2, ip
 80157dc:	e7f5      	b.n	80157ca <update_box.isra.0+0xf6>
	histp = & histogram[c0][c1][c2min];
 80157de:	9d01      	ldr	r5, [sp, #4]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 80157e0:	46b1      	mov	r9, r6
	histp = & histogram[c0][c1][c2min];
 80157e2:	f855 7028 	ldr.w	r7, [r5, r8, lsl #2]
 80157e6:	4457      	add	r7, sl
	for (c2 = c2min; c2 <= c2max; c2++)
 80157e8:	454c      	cmp	r4, r9
 80157ea:	da09      	bge.n	8015800 <update_box.isra.0+0x12c>
      for (c0 = c0min; c0 <= c0max; c0++) {
 80157ec:	f108 0801 	add.w	r8, r8, #1
 80157f0:	45c3      	cmp	fp, r8
 80157f2:	daf4      	bge.n	80157de <update_box.isra.0+0x10a>
    for (c1 = c1max; c1 >= c1min; c1--)
 80157f4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80157f8:	4594      	cmp	ip, r2
 80157fa:	f6ff af7e 	blt.w	80156fa <update_box.isra.0+0x26>
 80157fe:	e7e5      	b.n	80157cc <update_box.isra.0+0xf8>
	  if (*histp++ != 0) {
 8015800:	f837 5b02 	ldrh.w	r5, [r7], #2
 8015804:	b11d      	cbz	r5, 801580e <update_box.isra.0+0x13a>
	    goto have_c1max;
 8015806:	4660      	mov	r0, ip
	    boxp->c1max = c1max = c1;
 8015808:	f8c1 c00c 	str.w	ip, [r1, #12]
	    goto have_c1max;
 801580c:	e775      	b.n	80156fa <update_box.isra.0+0x26>
	for (c2 = c2min; c2 <= c2max; c2++)
 801580e:	f109 0901 	add.w	r9, r9, #1
 8015812:	e7e9      	b.n	80157e8 <update_box.isra.0+0x114>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8015814:	9d01      	ldr	r5, [sp, #4]
 8015816:	4690      	mov	r8, r2
 8015818:	f855 702e 	ldr.w	r7, [r5, lr, lsl #2]
 801581c:	444f      	add	r7, r9
 801581e:	4580      	cmp	r8, r0
 8015820:	dd11      	ble.n	8015846 <update_box.isra.0+0x172>
      for (c0 = c0min; c0 <= c0max; c0++) {
 8015822:	f10e 0e01 	add.w	lr, lr, #1
 8015826:	45f3      	cmp	fp, lr
 8015828:	daf4      	bge.n	8015814 <update_box.isra.0+0x140>
    for (c2 = c2min; c2 <= c2max; c2++)
 801582a:	f10c 0c01 	add.w	ip, ip, #1
 801582e:	4564      	cmp	r4, ip
 8015830:	f6bf af6e 	bge.w	8015710 <update_box.isra.0+0x3c>
 have_c2min:
 8015834:	46b4      	mov	ip, r6
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8015836:	4627      	mov	r7, r4
 8015838:	9d02      	ldr	r5, [sp, #8]
 801583a:	469e      	mov	lr, r3
 801583c:	eb05 0947 	add.w	r9, r5, r7, lsl #1
 8015840:	9d03      	ldr	r5, [sp, #12]
 8015842:	44a9      	add	r9, r5
 8015844:	e035      	b.n	80158b2 <update_box.isra.0+0x1de>
	  if (*histp != 0) {
 8015846:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 801584a:	f837 a00a 	ldrh.w	sl, [r7, sl]
 801584e:	f1ba 0f00 	cmp.w	sl, #0
 8015852:	d022      	beq.n	801589a <update_box.isra.0+0x1c6>
  if (c2max > c2min)
 8015854:	4564      	cmp	r4, ip
	    boxp->c2min = c2min = c2;
 8015856:	f8c1 c010 	str.w	ip, [r1, #16]
  if (c2max > c2min)
 801585a:	dcec      	bgt.n	8015836 <update_box.isra.0+0x162>
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 801585c:	1a86      	subs	r6, r0, r2
  dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
 801585e:	ebab 0e03 	sub.w	lr, fp, r3
  dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 8015862:	eba4 070c 	sub.w	r7, r4, ip
 8015866:	9d01      	ldr	r5, [sp, #4]
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 8015868:	ea4f 08c6 	mov.w	r8, r6, lsl #3
  dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
 801586c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 8015870:	eb08 0886 	add.w	r8, r8, r6, lsl #2
  dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 8015874:	013e      	lsls	r6, r7, #4
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 8015876:	fb08 f808 	mul.w	r8, r8, r8
 801587a:	fb0e 8e0e 	mla	lr, lr, lr, r8
 801587e:	ea4f 084c 	mov.w	r8, ip, lsl #1
 8015882:	fb06 e606 	mla	r6, r6, r6, lr
 8015886:	eb05 0e83 	add.w	lr, r5, r3, lsl #2
  ccount = 0;
 801588a:	2500      	movs	r5, #0
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 801588c:	618e      	str	r6, [r1, #24]
  for (c0 = c0min; c0 <= c0max; c0++)
 801588e:	459b      	cmp	fp, r3
 8015890:	da3e      	bge.n	8015910 <update_box.isra.0+0x23c>
  boxp->colorcount = ccount;
 8015892:	61cd      	str	r5, [r1, #28]
}
 8015894:	b005      	add	sp, #20
 8015896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 801589a:	f108 0801 	add.w	r8, r8, #1
 801589e:	e7be      	b.n	801581e <update_box.isra.0+0x14a>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 80158a0:	9d01      	ldr	r5, [sp, #4]
 80158a2:	4690      	mov	r8, r2
 80158a4:	f855 602e 	ldr.w	r6, [r5, lr, lsl #2]
 80158a8:	444e      	add	r6, r9
 80158aa:	4540      	cmp	r0, r8
 80158ac:	da07      	bge.n	80158be <update_box.isra.0+0x1ea>
      for (c0 = c0min; c0 <= c0max; c0++) {
 80158ae:	f10e 0e01 	add.w	lr, lr, #1
 80158b2:	45f3      	cmp	fp, lr
 80158b4:	daf4      	bge.n	80158a0 <update_box.isra.0+0x1cc>
    for (c2 = c2max; c2 >= c2min; c2--)
 80158b6:	3f01      	subs	r7, #1
 80158b8:	4567      	cmp	r7, ip
 80158ba:	dbcf      	blt.n	801585c <update_box.isra.0+0x188>
 80158bc:	e7bc      	b.n	8015838 <update_box.isra.0+0x164>
	  if (*histp != 0) {
 80158be:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 80158c2:	f836 a00a 	ldrh.w	sl, [r6, sl]
 80158c6:	f1ba 0f00 	cmp.w	sl, #0
 80158ca:	d002      	beq.n	80158d2 <update_box.isra.0+0x1fe>
	    goto have_c2max;
 80158cc:	463c      	mov	r4, r7
	    boxp->c2max = c2max = c2;
 80158ce:	614f      	str	r7, [r1, #20]
	    goto have_c2max;
 80158d0:	e7c4      	b.n	801585c <update_box.isra.0+0x188>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 80158d2:	f108 0801 	add.w	r8, r8, #1
 80158d6:	e7e8      	b.n	80158aa <update_box.isra.0+0x1d6>
 have_c2min:
 80158d8:	46b4      	mov	ip, r6
 80158da:	e7bf      	b.n	801585c <update_box.isra.0+0x188>
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
 80158dc:	eb08 1687 	add.w	r6, r8, r7, lsl #6
 80158e0:	f1a6 0902 	sub.w	r9, r6, #2
 80158e4:	f8de 6000 	ldr.w	r6, [lr]
 80158e8:	444e      	add	r6, r9
 80158ea:	46e1      	mov	r9, ip
 80158ec:	454c      	cmp	r4, r9
 80158ee:	da06      	bge.n	80158fe <update_box.isra.0+0x22a>
    for (c1 = c1min; c1 <= c1max; c1++) {
 80158f0:	3701      	adds	r7, #1
 80158f2:	42b8      	cmp	r0, r7
 80158f4:	daf2      	bge.n	80158dc <update_box.isra.0+0x208>
  for (c0 = c0min; c0 <= c0max; c0++)
 80158f6:	3301      	adds	r3, #1
 80158f8:	f10e 0e04 	add.w	lr, lr, #4
 80158fc:	e7c7      	b.n	801588e <update_box.isra.0+0x1ba>
	if (*histp != 0) {
 80158fe:	f836 af02 	ldrh.w	sl, [r6, #2]!
 8015902:	f1ba 0f00 	cmp.w	sl, #0
 8015906:	d000      	beq.n	801590a <update_box.isra.0+0x236>
	  ccount++;
 8015908:	3501      	adds	r5, #1
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
 801590a:	f109 0901 	add.w	r9, r9, #1
 801590e:	e7ed      	b.n	80158ec <update_box.isra.0+0x218>
 8015910:	4617      	mov	r7, r2
 8015912:	e7ee      	b.n	80158f2 <update_box.isra.0+0x21e>

08015914 <fill_inverse_cmap>:
{
 8015914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015918:	f2ad 5dc4 	subw	sp, sp, #1476	; 0x5c4
  minmaxdist = 0x7FFFFFFFL;
 801591c:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
  for (i = 0; i < numcolors; i++) {
 8015920:	2500      	movs	r5, #0
{
 8015922:	930a      	str	r3, [sp, #40]	; 0x28
  hist3d histogram = cquantize->histogram;
 8015924:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 8015928:	9001      	str	r0, [sp, #4]
  c1 >>= BOX_C1_LOG;
 801592a:	10d0      	asrs	r0, r2, #3
  hist3d histogram = cquantize->histogram;
 801592c:	699b      	ldr	r3, [r3, #24]
  minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 801592e:	0140      	lsls	r0, r0, #5
  hist3d histogram = cquantize->histogram;
 8015930:	9306      	str	r3, [sp, #24]
  c2 >>= BOX_C2_LOG;
 8015932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 8015934:	f100 0a02 	add.w	sl, r0, #2
  maxc1 = minc1 + ((1 << BOX_C1_SHIFT) - (1 << C1_SHIFT));
 8015938:	301e      	adds	r0, #30
  c2 >>= BOX_C2_LOG;
 801593a:	109c      	asrs	r4, r3, #2
  int numcolors = cinfo->actual_number_of_colors;
 801593c:	9b01      	ldr	r3, [sp, #4]
  centerc1 = (minc1 + maxc1) >> 1;
 801593e:	eb0a 0b00 	add.w	fp, sl, r0
  int numcolors = cinfo->actual_number_of_colors;
 8015942:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
  minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 8015946:	0164      	lsls	r4, r4, #5
  centerc1 = (minc1 + maxc1) >> 1;
 8015948:	ea4f 0b6b 	mov.w	fp, fp, asr #1
  int numcolors = cinfo->actual_number_of_colors;
 801594c:	9302      	str	r3, [sp, #8]
  minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 801594e:	f104 0804 	add.w	r8, r4, #4
  maxc2 = minc2 + ((1 << BOX_C2_SHIFT) - (1 << C2_SHIFT));
 8015952:	341c      	adds	r4, #28
{
 8015954:	e9cd 1208 	strd	r1, r2, [sp, #32]
  c0 >>= BOX_C0_LOG;
 8015958:	1089      	asrs	r1, r1, #2
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
 801595a:	0149      	lsls	r1, r1, #5
 801595c:	f101 0904 	add.w	r9, r1, #4
  maxc0 = minc0 + ((1 << BOX_C0_SHIFT) - (1 << C0_SHIFT));
 8015960:	311c      	adds	r1, #28
  centerc0 = (minc0 + maxc0) >> 1;
 8015962:	eb09 0301 	add.w	r3, r9, r1
 8015966:	105b      	asrs	r3, r3, #1
 8015968:	9303      	str	r3, [sp, #12]
  centerc2 = (minc2 + maxc2) >> 1;
 801596a:	eb08 0304 	add.w	r3, r8, r4
 801596e:	105b      	asrs	r3, r3, #1
 8015970:	9304      	str	r3, [sp, #16]
  for (i = 0; i < numcolors; i++) {
 8015972:	9b02      	ldr	r3, [sp, #8]
 8015974:	42ab      	cmp	r3, r5
 8015976:	dc3e      	bgt.n	80159f6 <fill_inverse_cmap+0xe2>
  ncolors = 0;
 8015978:	2200      	movs	r2, #0
 801597a:	a970      	add	r1, sp, #448	; 0x1c0
      colorlist[ncolors++] = (JSAMPLE) i;
 801597c:	ac30      	add	r4, sp, #192	; 0xc0
  for (i = 0; i < numcolors; i++) {
 801597e:	4610      	mov	r0, r2
 8015980:	9b02      	ldr	r3, [sp, #8]
 8015982:	4283      	cmp	r3, r0
 8015984:	f300 8097 	bgt.w	8015ab6 <fill_inverse_cmap+0x1a2>
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 8015988:	2380      	movs	r3, #128	; 0x80
    *bptr++ = 0x7FFFFFFFL;
 801598a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 801598e:	3b01      	subs	r3, #1
    *bptr++ = 0x7FFFFFFFL;
 8015990:	f841 0b04 	str.w	r0, [r1], #4
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 8015994:	d1fb      	bne.n	801598e <fill_inverse_cmap+0x7a>
  for (i = 0; i < numcolors; i++) {
 8015996:	469b      	mov	fp, r3
 8015998:	4593      	cmp	fp, r2
 801599a:	f040 8094 	bne.w	8015ac6 <fill_inverse_cmap+0x1b2>
  c2 <<= BOX_C2_LOG;
 801599e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80159a0:	ad19      	add	r5, sp, #100	; 0x64
 80159a2:	f023 0203 	bic.w	r2, r3, #3
  c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
 80159a6:	9b08      	ldr	r3, [sp, #32]
 80159a8:	f023 0103 	bic.w	r1, r3, #3
 80159ac:	9b06      	ldr	r3, [sp, #24]
 80159ae:	eb03 0681 	add.w	r6, r3, r1, lsl #2
  c1 <<= BOX_C1_LOG;
 80159b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159b4:	f023 0307 	bic.w	r3, r3, #7
 80159b8:	4631      	mov	r1, r6
 80159ba:	019b      	lsls	r3, r3, #6
 80159bc:	3110      	adds	r1, #16
 80159be:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      cachep = & histogram[c0+ic0][c1+ic1][c2];
 80159c2:	f856 2b04 	ldr.w	r2, [r6], #4
 80159c6:	f1a5 0420 	sub.w	r4, r5, #32
 80159ca:	441a      	add	r2, r3
 80159cc:	1f20      	subs	r0, r4, #4
 80159ce:	4694      	mov	ip, r2
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 80159d0:	f810 7b01 	ldrb.w	r7, [r0], #1
 80159d4:	3701      	adds	r7, #1
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 80159d6:	42a0      	cmp	r0, r4
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 80159d8:	f82c 7b02 	strh.w	r7, [ip], #2
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 80159dc:	d1f8      	bne.n	80159d0 <fill_inverse_cmap+0xbc>
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 80159de:	1d04      	adds	r4, r0, #4
 80159e0:	3240      	adds	r2, #64	; 0x40
 80159e2:	42ac      	cmp	r4, r5
 80159e4:	d1f2      	bne.n	80159cc <fill_inverse_cmap+0xb8>
  for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
 80159e6:	42b1      	cmp	r1, r6
 80159e8:	f100 0524 	add.w	r5, r0, #36	; 0x24
 80159ec:	d1e9      	bne.n	80159c2 <fill_inverse_cmap+0xae>
}
 80159ee:	f20d 5dc4 	addw	sp, sp, #1476	; 0x5c4
 80159f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    x = GETJSAMPLE(cinfo->colormap[0][i]);
 80159f6:	9b01      	ldr	r3, [sp, #4]
 80159f8:	f8d3 7088 	ldr.w	r7, [r3, #136]	; 0x88
 80159fc:	683b      	ldr	r3, [r7, #0]
 80159fe:	5d5a      	ldrb	r2, [r3, r5]
    if (x < minc0) {
 8015a00:	4591      	cmp	r9, r2
 8015a02:	dd2a      	ble.n	8015a5a <fill_inverse_cmap+0x146>
      tdist = (x - minc0) * C0_SCALE;
 8015a04:	eba2 0c09 	sub.w	ip, r2, r9
      tdist = (x - maxc0) * C0_SCALE;
 8015a08:	1a52      	subs	r2, r2, r1
      min_dist = tdist*tdist;
 8015a0a:	fb0c fc0c 	mul.w	ip, ip, ip
      max_dist = tdist*tdist;
 8015a0e:	4352      	muls	r2, r2
    x = GETJSAMPLE(cinfo->colormap[1][i]);
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	5d5b      	ldrb	r3, [r3, r5]
    if (x < minc1) {
 8015a14:	459a      	cmp	sl, r3
 8015a16:	dd33      	ble.n	8015a80 <fill_inverse_cmap+0x16c>
      tdist = (x - minc1) * C1_SCALE;
 8015a18:	eba3 0e0a 	sub.w	lr, r3, sl
 8015a1c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
      min_dist += tdist*tdist;
 8015a20:	fb0e cc0e 	mla	ip, lr, lr, ip
	tdist = (x - maxc1) * C1_SCALE;
 8015a24:	1a1b      	subs	r3, r3, r0
	tdist = (x - minc1) * C1_SCALE;
 8015a26:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	max_dist += tdist*tdist;
 8015a2a:	fb03 2203 	mla	r2, r3, r3, r2
    x = GETJSAMPLE(cinfo->colormap[2][i]);
 8015a2e:	68bb      	ldr	r3, [r7, #8]
 8015a30:	5d5b      	ldrb	r3, [r3, r5]
    if (x < minc2) {
 8015a32:	4598      	cmp	r8, r3
 8015a34:	dd32      	ble.n	8015a9c <fill_inverse_cmap+0x188>
      tdist = (x - minc2) * C2_SCALE;
 8015a36:	eba3 0708 	sub.w	r7, r3, r8
 8015a3a:	007f      	lsls	r7, r7, #1
      min_dist += tdist*tdist;
 8015a3c:	fb07 cc07 	mla	ip, r7, r7, ip
	tdist = (x - maxc2) * C2_SCALE;
 8015a40:	1b1b      	subs	r3, r3, r4
	tdist = (x - minc2) * C2_SCALE;
 8015a42:	005b      	lsls	r3, r3, #1
	max_dist += tdist*tdist;
 8015a44:	fb03 2303 	mla	r3, r3, r3, r2
    mindist[i] = min_dist;	/* save away the results */
 8015a48:	aa70      	add	r2, sp, #448	; 0x1c0
 8015a4a:	429e      	cmp	r6, r3
 8015a4c:	f842 c025 	str.w	ip, [r2, r5, lsl #2]
  for (i = 0; i < numcolors; i++) {
 8015a50:	f105 0501 	add.w	r5, r5, #1
 8015a54:	bfa8      	it	ge
 8015a56:	461e      	movge	r6, r3
 8015a58:	e78b      	b.n	8015972 <fill_inverse_cmap+0x5e>
    } else if (x > maxc0) {
 8015a5a:	4291      	cmp	r1, r2
 8015a5c:	da06      	bge.n	8015a6c <fill_inverse_cmap+0x158>
      tdist = (x - maxc0) * C0_SCALE;
 8015a5e:	eba2 0c01 	sub.w	ip, r2, r1
      tdist = (x - minc0) * C0_SCALE;
 8015a62:	eba2 0209 	sub.w	r2, r2, r9
      min_dist = tdist*tdist;
 8015a66:	fb0c fc0c 	mul.w	ip, ip, ip
      tdist = (x - minc0) * C0_SCALE;
 8015a6a:	e7d0      	b.n	8015a0e <fill_inverse_cmap+0xfa>
      if (x <= centerc0) {
 8015a6c:	9b03      	ldr	r3, [sp, #12]
      min_dist = 0;
 8015a6e:	f04f 0c00 	mov.w	ip, #0
      if (x <= centerc0) {
 8015a72:	4293      	cmp	r3, r2
	tdist = (x - maxc0) * C0_SCALE;
 8015a74:	bfac      	ite	ge
 8015a76:	1a52      	subge	r2, r2, r1
	tdist = (x - minc0) * C0_SCALE;
 8015a78:	eba2 0209 	sublt.w	r2, r2, r9
	max_dist = tdist*tdist;
 8015a7c:	4352      	muls	r2, r2
 8015a7e:	e7c7      	b.n	8015a10 <fill_inverse_cmap+0xfc>
    } else if (x > maxc1) {
 8015a80:	4298      	cmp	r0, r3
 8015a82:	da08      	bge.n	8015a96 <fill_inverse_cmap+0x182>
      tdist = (x - maxc1) * C1_SCALE;
 8015a84:	eba3 0e00 	sub.w	lr, r3, r0
 8015a88:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
      min_dist += tdist*tdist;
 8015a8c:	fb0e cc0e 	mla	ip, lr, lr, ip
	tdist = (x - minc1) * C1_SCALE;
 8015a90:	eba3 030a 	sub.w	r3, r3, sl
 8015a94:	e7c7      	b.n	8015a26 <fill_inverse_cmap+0x112>
      if (x <= centerc1) {
 8015a96:	459b      	cmp	fp, r3
 8015a98:	dbfa      	blt.n	8015a90 <fill_inverse_cmap+0x17c>
 8015a9a:	e7c3      	b.n	8015a24 <fill_inverse_cmap+0x110>
    } else if (x > maxc2) {
 8015a9c:	429c      	cmp	r4, r3
 8015a9e:	da06      	bge.n	8015aae <fill_inverse_cmap+0x19a>
      tdist = (x - maxc2) * C2_SCALE;
 8015aa0:	1b1f      	subs	r7, r3, r4
 8015aa2:	007f      	lsls	r7, r7, #1
      min_dist += tdist*tdist;
 8015aa4:	fb07 cc07 	mla	ip, r7, r7, ip
	tdist = (x - minc2) * C2_SCALE;
 8015aa8:	eba3 0308 	sub.w	r3, r3, r8
 8015aac:	e7c9      	b.n	8015a42 <fill_inverse_cmap+0x12e>
      if (x <= centerc2) {
 8015aae:	9f04      	ldr	r7, [sp, #16]
 8015ab0:	429f      	cmp	r7, r3
 8015ab2:	dbf9      	blt.n	8015aa8 <fill_inverse_cmap+0x194>
 8015ab4:	e7c4      	b.n	8015a40 <fill_inverse_cmap+0x12c>
    if (mindist[i] <= minmaxdist)
 8015ab6:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 8015aba:	429e      	cmp	r6, r3
      colorlist[ncolors++] = (JSAMPLE) i;
 8015abc:	bfa4      	itt	ge
 8015abe:	54a0      	strbge	r0, [r4, r2]
 8015ac0:	3201      	addge	r2, #1
  for (i = 0; i < numcolors; i++) {
 8015ac2:	3001      	adds	r0, #1
 8015ac4:	e75c      	b.n	8015980 <fill_inverse_cmap+0x6c>
    icolor = GETJSAMPLE(colorlist[i]);
 8015ac6:	ab30      	add	r3, sp, #192	; 0xc0
 8015ac8:	f813 600b 	ldrb.w	r6, [r3, fp]
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 8015acc:	9b01      	ldr	r3, [sp, #4]
 8015ace:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8015ad2:	680b      	ldr	r3, [r1, #0]
 8015ad4:	5d98      	ldrb	r0, [r3, r6]
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 8015ad6:	684b      	ldr	r3, [r1, #4]
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 8015ad8:	6889      	ldr	r1, [r1, #8]
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 8015ada:	eba9 0000 	sub.w	r0, r9, r0
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 8015ade:	5d9b      	ldrb	r3, [r3, r6]
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 8015ae0:	5d89      	ldrb	r1, [r1, r6]
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 8015ae2:	ebaa 0303 	sub.w	r3, sl, r3
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 8015ae6:	eba8 0101 	sub.w	r1, r8, r1
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 8015aea:	eb03 0443 	add.w	r4, r3, r3, lsl #1
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 8015aee:	0049      	lsls	r1, r1, #1
    dist0 += inc1*inc1;
 8015af0:	4364      	muls	r4, r4
 8015af2:	fb00 4400 	mla	r4, r0, r0, r4
    inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
 8015af6:	3004      	adds	r0, #4
 8015af8:	0100      	lsls	r0, r0, #4
    dist0 += inc2*inc2;
 8015afa:	fb01 4401 	mla	r4, r1, r1, r4
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 8015afe:	3108      	adds	r1, #8
    inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
 8015b00:	900b      	str	r0, [sp, #44]	; 0x2c
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 8015b02:	2048      	movs	r0, #72	; 0x48
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 8015b04:	0149      	lsls	r1, r1, #5
    dist0 += inc2*inc2;
 8015b06:	9403      	str	r4, [sp, #12]
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 8015b08:	4343      	muls	r3, r0
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 8015b0a:	9107      	str	r1, [sp, #28]
 8015b0c:	2100      	movs	r1, #0
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 8015b0e:	f103 0090 	add.w	r0, r3, #144	; 0x90
 8015b12:	f503 6319 	add.w	r3, r3, #2448	; 0x990
 8015b16:	930f      	str	r3, [sp, #60]	; 0x3c
 8015b18:	9b07      	ldr	r3, [sp, #28]
 8015b1a:	900c      	str	r0, [sp, #48]	; 0x30
    cptr = bestcolor;
 8015b1c:	a810      	add	r0, sp, #64	; 0x40
 8015b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015b22:	9004      	str	r0, [sp, #16]
 8015b24:	930e      	str	r3, [sp, #56]	; 0x38
 8015b26:	ab70      	add	r3, sp, #448	; 0x1c0
      xx1 = inc1;
 8015b28:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015b2a:	eb03 0c01 	add.w	ip, r3, r1
 8015b2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015b30:	440b      	add	r3, r1
 8015b32:	930d      	str	r3, [sp, #52]	; 0x34
	xx2 = inc2;
 8015b34:	9b04      	ldr	r3, [sp, #16]
 8015b36:	9305      	str	r3, [sp, #20]
      xx1 = inc1;
 8015b38:	9b03      	ldr	r3, [sp, #12]
 8015b3a:	9302      	str	r3, [sp, #8]
 8015b3c:	e01c      	b.n	8015b78 <fill_inverse_cmap+0x264>
	  if (dist2 < *bptr) {
 8015b3e:	f853 7f04 	ldr.w	r7, [r3, #4]!
	  cptr++;
 8015b42:	f10e 0e01 	add.w	lr, lr, #1
	  if (dist2 < *bptr) {
 8015b46:	42a7      	cmp	r7, r4
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 8015b48:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	    *bptr = dist2;
 8015b4a:	bfc8      	it	gt
 8015b4c:	601c      	strgt	r4, [r3, #0]
	  dist2 += xx2;
 8015b4e:	442c      	add	r4, r5
	  xx2 += 2 * STEP_C2 * STEP_C2;
 8015b50:	f505 7500 	add.w	r5, r5, #512	; 0x200
	    *cptr = (JSAMPLE) icolor;
 8015b54:	bfc8      	it	gt
 8015b56:	f80e 6c01 	strbgt.w	r6, [lr, #-1]
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 8015b5a:	42bd      	cmp	r5, r7
 8015b5c:	d1ef      	bne.n	8015b3e <fill_inverse_cmap+0x22a>
 8015b5e:	9b05      	ldr	r3, [sp, #20]
 8015b60:	f10c 0c10 	add.w	ip, ip, #16
 8015b64:	3304      	adds	r3, #4
 8015b66:	9305      	str	r3, [sp, #20]
	dist1 += xx1;
 8015b68:	9b02      	ldr	r3, [sp, #8]
 8015b6a:	4403      	add	r3, r0
	xx1 += 2 * STEP_C1 * STEP_C1;
 8015b6c:	f500 7090 	add.w	r0, r0, #288	; 0x120
	dist1 += xx1;
 8015b70:	9302      	str	r3, [sp, #8]
      for (ic1 = BOX_C1_ELEMS-1; ic1 >= 0; ic1--) {
 8015b72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015b74:	4298      	cmp	r0, r3
 8015b76:	d006      	beq.n	8015b86 <fill_inverse_cmap+0x272>
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 8015b78:	f1ac 0304 	sub.w	r3, ip, #4
	xx2 = inc2;
 8015b7c:	9d07      	ldr	r5, [sp, #28]
 8015b7e:	f8dd e014 	ldr.w	lr, [sp, #20]
 8015b82:	9c02      	ldr	r4, [sp, #8]
 8015b84:	e7db      	b.n	8015b3e <fill_inverse_cmap+0x22a>
 8015b86:	9b04      	ldr	r3, [sp, #16]
 8015b88:	3180      	adds	r1, #128	; 0x80
      dist0 += xx0;
 8015b8a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8015b8c:	3320      	adds	r3, #32
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 8015b8e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8015b92:	9304      	str	r3, [sp, #16]
      dist0 += xx0;
 8015b94:	9b03      	ldr	r3, [sp, #12]
 8015b96:	4403      	add	r3, r0
 8015b98:	9303      	str	r3, [sp, #12]
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 8015b9a:	d1c4      	bne.n	8015b26 <fill_inverse_cmap+0x212>
  for (i = 0; i < numcolors; i++) {
 8015b9c:	f10b 0b01 	add.w	fp, fp, #1
 8015ba0:	e6fa      	b.n	8015998 <fill_inverse_cmap+0x84>

08015ba2 <pass2_no_dither>:
{
 8015ba2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ba6:	b087      	sub	sp, #28
 8015ba8:	4688      	mov	r8, r1
  for (row = 0; row < num_rows; row++) {
 8015baa:	2600      	movs	r6, #0
 8015bac:	f04f 0a02 	mov.w	sl, #2
{
 8015bb0:	e9cd 2303 	strd	r2, r3, [sp, #12]
  hist3d histogram = cquantize->histogram;
 8015bb4:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 8015bb8:	699b      	ldr	r3, [r3, #24]
 8015bba:	9301      	str	r3, [sp, #4]
  JDIMENSION width = cinfo->output_width;
 8015bbc:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8015bbe:	9302      	str	r3, [sp, #8]
  for (row = 0; row < num_rows; row++) {
 8015bc0:	9b04      	ldr	r3, [sp, #16]
 8015bc2:	429e      	cmp	r6, r3
 8015bc4:	db02      	blt.n	8015bcc <pass2_no_dither+0x2a>
}
 8015bc6:	b007      	add	sp, #28
 8015bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outptr = output_buf[row];
 8015bcc:	9b03      	ldr	r3, [sp, #12]
 8015bce:	f858 5026 	ldr.w	r5, [r8, r6, lsl #2]
 8015bd2:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
    for (col = width; col > 0; col--) {
 8015bd6:	9b02      	ldr	r3, [sp, #8]
 8015bd8:	3503      	adds	r5, #3
 8015bda:	eb07 0b03 	add.w	fp, r7, r3
 8015bde:	455f      	cmp	r7, fp
 8015be0:	d101      	bne.n	8015be6 <pass2_no_dither+0x44>
  for (row = 0; row < num_rows; row++) {
 8015be2:	3601      	adds	r6, #1
 8015be4:	e7ec      	b.n	8015bc0 <pass2_no_dither+0x1e>
      c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 8015be6:	f815 4c02 	ldrb.w	r4, [r5, #-2]
      c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
 8015bea:	f815 cc03 	ldrb.w	ip, [r5, #-3]
      c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 8015bee:	ea4f 0e94 	mov.w	lr, r4, lsr #2
      c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 8015bf2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
      c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
 8015bf6:	ea4f 01dc 	mov.w	r1, ip, lsr #3
      c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 8015bfa:	9a01      	ldr	r2, [sp, #4]
      cachep = & histogram[c0][c1][c2];
 8015bfc:	4674      	mov	r4, lr
      c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 8015bfe:	08db      	lsrs	r3, r3, #3
      if (*cachep == 0)
 8015c00:	f852 9021 	ldr.w	r9, [r2, r1, lsl #2]
      cachep = & histogram[c0][c1][c2];
 8015c04:	01a4      	lsls	r4, r4, #6
 8015c06:	fb1a 4403 	smlabb	r4, sl, r3, r4
      if (*cachep == 0)
 8015c0a:	f839 c004 	ldrh.w	ip, [r9, r4]
 8015c0e:	f1bc 0f00 	cmp.w	ip, #0
 8015c12:	d104      	bne.n	8015c1e <pass2_no_dither+0x7c>
	fill_inverse_cmap(cinfo, c0,c1,c2);
 8015c14:	4672      	mov	r2, lr
 8015c16:	9005      	str	r0, [sp, #20]
 8015c18:	f7ff fe7c 	bl	8015914 <fill_inverse_cmap>
 8015c1c:	9805      	ldr	r0, [sp, #20]
      *outptr++ = (JSAMPLE) (*cachep - 1);
 8015c1e:	f819 3004 	ldrb.w	r3, [r9, r4]
 8015c22:	3503      	adds	r5, #3
 8015c24:	3b01      	subs	r3, #1
 8015c26:	f807 3b01 	strb.w	r3, [r7], #1
    for (col = width; col > 0; col--) {
 8015c2a:	e7d8      	b.n	8015bde <pass2_no_dither+0x3c>

08015c2c <pass2_fs_dither>:
{
 8015c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015c30:	f8d0 b1e0 	ldr.w	fp, [r0, #480]	; 0x1e0
{
 8015c34:	b09f      	sub	sp, #124	; 0x7c
 8015c36:	931c      	str	r3, [sp, #112]	; 0x70
  hist3d histogram = cquantize->histogram;
 8015c38:	f8db 3018 	ldr.w	r3, [fp, #24]
 8015c3c:	9316      	str	r3, [sp, #88]	; 0x58
  JDIMENSION width = cinfo->output_width;
 8015c3e:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8015c40:	9305      	str	r3, [sp, #20]
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 8015c42:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8015c46:	930a      	str	r3, [sp, #40]	; 0x28
  int *error_limit = cquantize->error_limiter;
 8015c48:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
 8015c4c:	930b      	str	r3, [sp, #44]	; 0x2c
  JSAMPROW colormap0 = cinfo->colormap[0];
 8015c4e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 8015c52:	e9cd 121a 	strd	r1, r2, [sp, #104]	; 0x68
  JSAMPROW colormap0 = cinfo->colormap[0];
 8015c56:	681a      	ldr	r2, [r3, #0]
 8015c58:	9217      	str	r2, [sp, #92]	; 0x5c
  JSAMPROW colormap1 = cinfo->colormap[1];
 8015c5a:	685a      	ldr	r2, [r3, #4]
  JSAMPROW colormap2 = cinfo->colormap[2];
 8015c5c:	689b      	ldr	r3, [r3, #8]
  JSAMPROW colormap1 = cinfo->colormap[1];
 8015c5e:	9218      	str	r2, [sp, #96]	; 0x60
  JSAMPROW colormap2 = cinfo->colormap[2];
 8015c60:	9319      	str	r3, [sp, #100]	; 0x64
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8015c62:	9b05      	ldr	r3, [sp, #20]
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8015c64:	9a05      	ldr	r2, [sp, #20]
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8015c66:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015c6a:	3b03      	subs	r3, #3
 8015c6c:	9311      	str	r3, [sp, #68]	; 0x44
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8015c6e:	2306      	movs	r3, #6
 8015c70:	fb02 3303 	mla	r3, r2, r3, r3
 8015c74:	9313      	str	r3, [sp, #76]	; 0x4c
  for (row = 0; row < num_rows; row++) {
 8015c76:	2300      	movs	r3, #0
 8015c78:	9304      	str	r3, [sp, #16]
 8015c7a:	9b04      	ldr	r3, [sp, #16]
 8015c7c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015c7e:	4293      	cmp	r3, r2
 8015c80:	db02      	blt.n	8015c88 <pass2_fs_dither+0x5c>
}
 8015c82:	b01f      	add	sp, #124	; 0x7c
 8015c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr = input_buf[row];
 8015c88:	9a04      	ldr	r2, [sp, #16]
 8015c8a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c90:	9300      	str	r3, [sp, #0]
    outptr = output_buf[row];
 8015c92:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c98:	9303      	str	r3, [sp, #12]
    if (cquantize->on_odd_row) {
 8015c9a:	f8db 3020 	ldr.w	r3, [fp, #32]
 8015c9e:	9302      	str	r3, [sp, #8]
 8015ca0:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d039      	beq.n	8015d1c <pass2_fs_dither+0xf0>
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8015ca8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015caa:	9a00      	ldr	r2, [sp, #0]
 8015cac:	441a      	add	r2, r3
      outptr += width-1;
 8015cae:	9b05      	ldr	r3, [sp, #20]
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8015cb0:	9200      	str	r2, [sp, #0]
      outptr += width-1;
 8015cb2:	3b01      	subs	r3, #1
 8015cb4:	9a03      	ldr	r2, [sp, #12]
 8015cb6:	441a      	add	r2, r3
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8015cb8:	9b02      	ldr	r3, [sp, #8]
      outptr += width-1;
 8015cba:	9203      	str	r2, [sp, #12]
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8015cbc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015cbe:	4413      	add	r3, r2
      dir3 = -3;
 8015cc0:	f06f 0202 	mvn.w	r2, #2
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8015cc4:	9302      	str	r3, [sp, #8]
      cquantize->on_odd_row = FALSE; /* flip for next time */
 8015cc6:	2300      	movs	r3, #0
      dir3 = -3;
 8015cc8:	9208      	str	r2, [sp, #32]
      dir = -1;
 8015cca:	f04f 32ff 	mov.w	r2, #4294967295
 8015cce:	920f      	str	r2, [sp, #60]	; 0x3c
 8015cd0:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
    bpreverr0 = bpreverr1 = bpreverr2 = 0;
 8015cd4:	2400      	movs	r4, #0
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8015cd6:	9b08      	ldr	r3, [sp, #32]
 8015cd8:	9e02      	ldr	r6, [sp, #8]
    cur0 = cur1 = cur2 = 0;
 8015cda:	4621      	mov	r1, r4
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8015cdc:	005b      	lsls	r3, r3, #1
    cur0 = cur1 = cur2 = 0;
 8015cde:	4622      	mov	r2, r4
    belowerr0 = belowerr1 = belowerr2 = 0;
 8015ce0:	940c      	str	r4, [sp, #48]	; 0x30
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8015ce2:	9301      	str	r3, [sp, #4]
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8015ce4:	3302      	adds	r3, #2
 8015ce6:	9314      	str	r3, [sp, #80]	; 0x50
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8015ce8:	9b01      	ldr	r3, [sp, #4]
 8015cea:	3304      	adds	r3, #4
 8015cec:	9315      	str	r3, [sp, #84]	; 0x54
    for (col = width; col > 0; col--) {
 8015cee:	9b05      	ldr	r3, [sp, #20]
 8015cf0:	9309      	str	r3, [sp, #36]	; 0x24
    cur0 = cur1 = cur2 = 0;
 8015cf2:	4623      	mov	r3, r4
    bpreverr0 = bpreverr1 = bpreverr2 = 0;
 8015cf4:	e9cd 4406 	strd	r4, r4, [sp, #24]
    belowerr0 = belowerr1 = belowerr2 = 0;
 8015cf8:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    for (col = width; col > 0; col--) {
 8015cfc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8015cfe:	b995      	cbnz	r5, 8015d26 <pass2_fs_dither+0xfa>
 8015d00:	9b05      	ldr	r3, [sp, #20]
 8015d02:	9d01      	ldr	r5, [sp, #4]
    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
 8015d04:	9a02      	ldr	r2, [sp, #8]
 8015d06:	435d      	muls	r5, r3
 8015d08:	9906      	ldr	r1, [sp, #24]
 8015d0a:	9b02      	ldr	r3, [sp, #8]
 8015d0c:	5351      	strh	r1, [r2, r5]
 8015d0e:	442b      	add	r3, r5
    errorptr[1] = (FSERROR) bpreverr1;
 8015d10:	9a07      	ldr	r2, [sp, #28]
    errorptr[2] = (FSERROR) bpreverr2;
 8015d12:	809c      	strh	r4, [r3, #4]
    errorptr[1] = (FSERROR) bpreverr1;
 8015d14:	805a      	strh	r2, [r3, #2]
  for (row = 0; row < num_rows; row++) {
 8015d16:	9b04      	ldr	r3, [sp, #16]
 8015d18:	3301      	adds	r3, #1
 8015d1a:	e7ad      	b.n	8015c78 <pass2_fs_dither+0x4c>
      cquantize->on_odd_row = TRUE; /* flip for next time */
 8015d1c:	2301      	movs	r3, #1
      dir3 = 3;
 8015d1e:	2203      	movs	r2, #3
      dir = 1;
 8015d20:	930f      	str	r3, [sp, #60]	; 0x3c
      dir3 = 3;
 8015d22:	9208      	str	r2, [sp, #32]
 8015d24:	e7d4      	b.n	8015cd0 <pass2_fs_dither+0xa4>
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8015d26:	9f01      	ldr	r7, [sp, #4]
      cur0 += GETJSAMPLE(inptr[0]);
 8015d28:	9d00      	ldr	r5, [sp, #0]
 8015d2a:	19f7      	adds	r7, r6, r7
 8015d2c:	9712      	str	r7, [sp, #72]	; 0x48
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8015d2e:	9f01      	ldr	r7, [sp, #4]
 8015d30:	5ff7      	ldrsh	r7, [r6, r7]
 8015d32:	443b      	add	r3, r7
 8015d34:	f103 0708 	add.w	r7, r3, #8
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8015d38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015d3a:	5ef3      	ldrsh	r3, [r6, r3]
 8015d3c:	441a      	add	r2, r3
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8015d3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015d40:	5ef3      	ldrsh	r3, [r6, r3]
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8015d42:	3208      	adds	r2, #8
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8015d44:	440b      	add	r3, r1
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8015d46:	1112      	asrs	r2, r2, #4
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8015d48:	1139      	asrs	r1, r7, #4
      cur0 = error_limit[cur0];
 8015d4a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8015d4c:	3308      	adds	r3, #8
      cur0 = error_limit[cur0];
 8015d4e:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8015d52:	111b      	asrs	r3, r3, #4
      cur1 = error_limit[cur1];
 8015d54:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
      cur2 = error_limit[cur2];
 8015d58:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
      cur0 += GETJSAMPLE(inptr[0]);
 8015d5c:	782f      	ldrb	r7, [r5, #0]
      cur0 = GETJSAMPLE(range_limit[cur0]);
 8015d5e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8015d60:	4429      	add	r1, r5
      cur1 = GETJSAMPLE(range_limit[cur1]);
 8015d62:	442a      	add	r2, r5
      cur2 = GETJSAMPLE(range_limit[cur2]);
 8015d64:	442b      	add	r3, r5
 8015d66:	9d16      	ldr	r5, [sp, #88]	; 0x58
      cur0 = GETJSAMPLE(range_limit[cur0]);
 8015d68:	f811 a007 	ldrb.w	sl, [r1, r7]
      cur1 += GETJSAMPLE(inptr[1]);
 8015d6c:	9900      	ldr	r1, [sp, #0]
 8015d6e:	7849      	ldrb	r1, [r1, #1]
      cur1 = GETJSAMPLE(range_limit[cur1]);
 8015d70:	f812 9001 	ldrb.w	r9, [r2, r1]
      cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
 8015d74:	ea4f 01ea 	mov.w	r1, sl, asr #3
      cur2 += GETJSAMPLE(inptr[2]);
 8015d78:	9a00      	ldr	r2, [sp, #0]
 8015d7a:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8015d7e:	7892      	ldrb	r2, [r2, #2]
 8015d80:	9510      	str	r5, [sp, #64]	; 0x40
      cur2 = GETJSAMPLE(range_limit[cur2]);
 8015d82:	f813 8002 	ldrb.w	r8, [r3, r2]
      cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
 8015d86:	ea4f 02a9 	mov.w	r2, r9, asr #2
 8015d8a:	ea4f 03e8 	mov.w	r3, r8, asr #3
 8015d8e:	0197      	lsls	r7, r2, #6
 8015d90:	eb07 0743 	add.w	r7, r7, r3, lsl #1
      if (*cachep == 0)
 8015d94:	f835 c007 	ldrh.w	ip, [r5, r7]
 8015d98:	f1bc 0f00 	cmp.w	ip, #0
 8015d9c:	d103      	bne.n	8015da6 <pass2_fs_dither+0x17a>
	fill_inverse_cmap(cinfo, cur0>>C0_SHIFT,cur1>>C1_SHIFT,cur2>>C2_SHIFT);
 8015d9e:	901d      	str	r0, [sp, #116]	; 0x74
 8015da0:	f7ff fdb8 	bl	8015914 <fill_inverse_cmap>
 8015da4:	981d      	ldr	r0, [sp, #116]	; 0x74
      { register int pixcode = *cachep - 1;
 8015da6:	9b10      	ldr	r3, [sp, #64]	; 0x40
	*outptr = (JSAMPLE) pixcode;
 8015da8:	9a03      	ldr	r2, [sp, #12]
      { register int pixcode = *cachep - 1;
 8015daa:	5bdb      	ldrh	r3, [r3, r7]
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 8015dac:	9907      	ldr	r1, [sp, #28]
      { register int pixcode = *cachep - 1;
 8015dae:	3b01      	subs	r3, #1
      inptr += dir3;		/* Advance pixel pointers to next column */
 8015db0:	9d08      	ldr	r5, [sp, #32]
	*outptr = (JSAMPLE) pixcode;
 8015db2:	7013      	strb	r3, [r2, #0]
	cur0 -= GETJSAMPLE(colormap0[pixcode]);
 8015db4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015db6:	5cd2      	ldrb	r2, [r2, r3]
 8015db8:	ebaa 0a02 	sub.w	sl, sl, r2
	cur1 -= GETJSAMPLE(colormap1[pixcode]);
 8015dbc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015dbe:	5cd2      	ldrb	r2, [r2, r3]
 8015dc0:	eba9 0902 	sub.w	r9, r9, r2
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 8015dc4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015dc6:	5cd3      	ldrb	r3, [r2, r3]
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 8015dc8:	9a06      	ldr	r2, [sp, #24]
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 8015dca:	eba8 0803 	sub.w	r8, r8, r3
	cur0 += delta;		/* form error * 3 */
 8015dce:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 8015dd2:	441a      	add	r2, r3
	cur0 += delta;		/* form error * 5 */
 8015dd4:	eb03 034a 	add.w	r3, r3, sl, lsl #1
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 8015dd8:	8032      	strh	r2, [r6, #0]
	bpreverr0 = belowerr0 + cur0;
 8015dda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	belowerr0 = bnexterr;
 8015ddc:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
	bpreverr0 = belowerr0 + cur0;
 8015de0:	441a      	add	r2, r3
	cur0 += delta;		/* form error * 7 */
 8015de2:	eb03 034a 	add.w	r3, r3, sl, lsl #1
	bpreverr0 = belowerr0 + cur0;
 8015de6:	9206      	str	r2, [sp, #24]
	cur1 += delta;		/* form error * 3 */
 8015de8:	eb09 0249 	add.w	r2, r9, r9, lsl #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 8015dec:	4411      	add	r1, r2
	cur1 += delta;		/* form error * 5 */
 8015dee:	eb02 0249 	add.w	r2, r2, r9, lsl #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 8015df2:	8071      	strh	r1, [r6, #2]
	bpreverr1 = belowerr1 + cur1;
 8015df4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015df6:	4411      	add	r1, r2
	cur1 += delta;		/* form error * 7 */
 8015df8:	eb02 0249 	add.w	r2, r2, r9, lsl #1
	bpreverr1 = belowerr1 + cur1;
 8015dfc:	9107      	str	r1, [sp, #28]
	cur2 += delta;		/* form error * 3 */
 8015dfe:	eb08 0148 	add.w	r1, r8, r8, lsl #1
	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
 8015e02:	440c      	add	r4, r1
	cur2 += delta;		/* form error * 5 */
 8015e04:	eb01 0148 	add.w	r1, r1, r8, lsl #1
	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
 8015e08:	80b4      	strh	r4, [r6, #4]
      inptr += dir3;		/* Advance pixel pointers to next column */
 8015e0a:	9e00      	ldr	r6, [sp, #0]
	bpreverr2 = belowerr2 + cur2;
 8015e0c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
      inptr += dir3;		/* Advance pixel pointers to next column */
 8015e0e:	442e      	add	r6, r5
      outptr += dir;
 8015e10:	9d03      	ldr	r5, [sp, #12]
	bpreverr2 = belowerr2 + cur2;
 8015e12:	440c      	add	r4, r1
	cur2 += delta;		/* form error * 7 */
 8015e14:	eb01 0148 	add.w	r1, r1, r8, lsl #1
      inptr += dir3;		/* Advance pixel pointers to next column */
 8015e18:	9600      	str	r6, [sp, #0]
      outptr += dir;
 8015e1a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8015e1c:	4435      	add	r5, r6
    for (col = width; col > 0; col--) {
 8015e1e:	9e12      	ldr	r6, [sp, #72]	; 0x48
      outptr += dir;
 8015e20:	9503      	str	r5, [sp, #12]
    for (col = width; col > 0; col--) {
 8015e22:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8015e24:	3d01      	subs	r5, #1
	belowerr1 = bnexterr;
 8015e26:	e9cd 980d 	strd	r9, r8, [sp, #52]	; 0x34
    for (col = width; col > 0; col--) {
 8015e2a:	9509      	str	r5, [sp, #36]	; 0x24
 8015e2c:	e766      	b.n	8015cfc <pass2_fs_dither+0xd0>

08015e2e <finish_pass1>:
{
 8015e2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015e32:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 8015e36:	b08b      	sub	sp, #44	; 0x2c
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 8015e38:	2101      	movs	r1, #1
  update_box(cinfo, & boxlist[0]);
 8015e3a:	f04f 0b01 	mov.w	fp, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015e3e:	9302      	str	r3, [sp, #8]
  cinfo->colormap = cquantize->sv_colormap;
 8015e40:	691b      	ldr	r3, [r3, #16]
{
 8015e42:	9000      	str	r0, [sp, #0]
  cinfo->colormap = cquantize->sv_colormap;
 8015e44:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  select_colors(cinfo, cquantize->desired);
 8015e48:	9b02      	ldr	r3, [sp, #8]
 8015e4a:	695b      	ldr	r3, [r3, #20]
 8015e4c:	9301      	str	r3, [sp, #4]
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 8015e4e:	9a01      	ldr	r2, [sp, #4]
 8015e50:	6843      	ldr	r3, [r0, #4]
 8015e52:	0152      	lsls	r2, r2, #5
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	4798      	blx	r3
  boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 8015e58:	2300      	movs	r3, #0
 8015e5a:	221f      	movs	r2, #31
  boxlist[0].c1max = MAXJSAMPLE >> C1_SHIFT;
 8015e5c:	213f      	movs	r1, #63	; 0x3f
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 8015e5e:	4605      	mov	r5, r0
  boxlist[0].c1min = 0;
 8015e60:	6083      	str	r3, [r0, #8]
  boxlist[0].c2max = MAXJSAMPLE >> C2_SHIFT;
 8015e62:	6142      	str	r2, [r0, #20]
 8015e64:	46a8      	mov	r8, r5
  update_box(cinfo, & boxlist[0]);
 8015e66:	462e      	mov	r6, r5
  boxlist[0].c2min = 0;
 8015e68:	e9c0 1303 	strd	r1, r3, [r0, #12]
  boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 8015e6c:	e9c0 3200 	strd	r3, r2, [r0]
  update_box(cinfo, & boxlist[0]);
 8015e70:	9b00      	ldr	r3, [sp, #0]
 8015e72:	4601      	mov	r1, r0
 8015e74:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 8015e78:	f7ff fc2c 	bl	80156d4 <update_box.isra.0>
  while (numboxes < desired_colors) {
 8015e7c:	9b01      	ldr	r3, [sp, #4]
 8015e7e:	455b      	cmp	r3, fp
 8015e80:	dc24      	bgt.n	8015ecc <finish_pass1+0x9e>
 8015e82:	2100      	movs	r1, #0
  hist3d histogram = cquantize->histogram;
 8015e84:	9b00      	ldr	r3, [sp, #0]
 8015e86:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8015e8a:	699b      	ldr	r3, [r3, #24]
 8015e8c:	9303      	str	r3, [sp, #12]
  c0min = boxp->c0min;  c0max = boxp->c0max;
 8015e8e:	e9d8 7300 	ldrd	r7, r3, [r8]
 8015e92:	9304      	str	r3, [sp, #16]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 8015e94:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015e98:	9305      	str	r3, [sp, #20]
 8015e9a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015e9e:	9306      	str	r3, [sp, #24]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8015ea0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8015ea4:	9301      	str	r3, [sp, #4]
 8015ea6:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8015eaa:	9307      	str	r3, [sp, #28]
  for (c0 = c0min; c0 <= c0max; c0++)
 8015eac:	9b01      	ldr	r3, [sp, #4]
 8015eae:	005b      	lsls	r3, r3, #1
 8015eb0:	9309      	str	r3, [sp, #36]	; 0x24
  long c2total = 0;
 8015eb2:	2300      	movs	r3, #0
  long c1total = 0;
 8015eb4:	469a      	mov	sl, r3
  long c0total = 0;
 8015eb6:	4699      	mov	r9, r3
  long total = 0;
 8015eb8:	461a      	mov	r2, r3
  for (c0 = c0min; c0 <= c0max; c0++)
 8015eba:	9804      	ldr	r0, [sp, #16]
 8015ebc:	42b8      	cmp	r0, r7
 8015ebe:	f2c0 8098 	blt.w	8015ff2 <finish_pass1+0x1c4>
 8015ec2:	00f8      	lsls	r0, r7, #3
    for (c1 = c1min; c1 <= c1max; c1++) {
 8015ec4:	9e05      	ldr	r6, [sp, #20]
 8015ec6:	3004      	adds	r0, #4
 8015ec8:	9008      	str	r0, [sp, #32]
 8015eca:	e07c      	b.n	8015fc6 <finish_pass1+0x198>
    if (numboxes*2 <= desired_colors) {
 8015ecc:	9b01      	ldr	r3, [sp, #4]
 8015ece:	ebb3 0f4b 	cmp.w	r3, fp, lsl #1
 8015ed2:	db50      	blt.n	8015f76 <finish_pass1+0x148>
  boxptr which = NULL;
 8015ed4:	2100      	movs	r1, #0
 8015ed6:	462a      	mov	r2, r5
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8015ed8:	4608      	mov	r0, r1
  register long maxc = 0;
 8015eda:	460f      	mov	r7, r1
    if (boxp->colorcount > maxc && boxp->volume > 0) {
 8015edc:	69d3      	ldr	r3, [r2, #28]
 8015ede:	42bb      	cmp	r3, r7
 8015ee0:	dd04      	ble.n	8015eec <finish_pass1+0xbe>
 8015ee2:	6994      	ldr	r4, [r2, #24]
 8015ee4:	2c00      	cmp	r4, #0
 8015ee6:	bfc4      	itt	gt
 8015ee8:	4611      	movgt	r1, r2
 8015eea:	461f      	movgt	r7, r3
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8015eec:	3001      	adds	r0, #1
 8015eee:	3220      	adds	r2, #32
 8015ef0:	4583      	cmp	fp, r0
 8015ef2:	d1f3      	bne.n	8015edc <finish_pass1+0xae>
    if (b1 == NULL)		/* no splittable boxes left! */
 8015ef4:	2900      	cmp	r1, #0
 8015ef6:	d0c5      	beq.n	8015e84 <finish_pass1+0x56>
    b2->c0max = b1->c0max; b2->c1max = b1->c1max; b2->c2max = b1->c2max;
 8015ef8:	684b      	ldr	r3, [r1, #4]
 8015efa:	f106 0720 	add.w	r7, r6, #32
 8015efe:	6273      	str	r3, [r6, #36]	; 0x24
 8015f00:	68ca      	ldr	r2, [r1, #12]
 8015f02:	62f2      	str	r2, [r6, #44]	; 0x2c
 8015f04:	694a      	ldr	r2, [r1, #20]
 8015f06:	6372      	str	r2, [r6, #52]	; 0x34
    b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
 8015f08:	680a      	ldr	r2, [r1, #0]
 8015f0a:	6232      	str	r2, [r6, #32]
 8015f0c:	688a      	ldr	r2, [r1, #8]
 8015f0e:	62b2      	str	r2, [r6, #40]	; 0x28
 8015f10:	690a      	ldr	r2, [r1, #16]
 8015f12:	6332      	str	r2, [r6, #48]	; 0x30
    c0 = ((b1->c0max - b1->c0min) << C0_SHIFT) * C0_SCALE;
 8015f14:	680a      	ldr	r2, [r1, #0]
    c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
 8015f16:	e9d1 9002 	ldrd	r9, r0, [r1, #8]
    c0 = ((b1->c0max - b1->c0min) << C0_SHIFT) * C0_SCALE;
 8015f1a:	9203      	str	r2, [sp, #12]
 8015f1c:	1a9a      	subs	r2, r3, r2
 8015f1e:	ea4f 0ec2 	mov.w	lr, r2, lsl #3
    c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
 8015f22:	eba0 0209 	sub.w	r2, r0, r9
 8015f26:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
 8015f2a:	eb0c 0c82 	add.w	ip, ip, r2, lsl #2
    c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 8015f2e:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
 8015f32:	eba2 0a04 	sub.w	sl, r2, r4
 8015f36:	9404      	str	r4, [sp, #16]
    if (c2 > cmax) { cmax = c2; n = 2; }
 8015f38:	ebbc 1f0a 	cmp.w	ip, sl, lsl #4
    c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 8015f3c:	ea4f 140a 	mov.w	r4, sl, lsl #4
    if (c2 > cmax) { cmax = c2; n = 2; }
 8015f40:	f2c0 808b 	blt.w	801605a <finish_pass1+0x22c>
    if (c0 > cmax) { n = 0; }
 8015f44:	45e6      	cmp	lr, ip
 8015f46:	dd25      	ble.n	8015f94 <finish_pass1+0x166>
      lb = (b1->c0max + b1->c0min) / 2;
 8015f48:	9a03      	ldr	r2, [sp, #12]
 8015f4a:	4413      	add	r3, r2
 8015f4c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8015f50:	105b      	asrs	r3, r3, #1
      b1->c0max = lb;
 8015f52:	604b      	str	r3, [r1, #4]
      b2->c0min = lb+1;
 8015f54:	3301      	adds	r3, #1
 8015f56:	6233      	str	r3, [r6, #32]
    update_box(cinfo, b1);
 8015f58:	9b00      	ldr	r3, [sp, #0]
    numboxes++;
 8015f5a:	f10b 0b01 	add.w	fp, fp, #1
 8015f5e:	463e      	mov	r6, r7
    update_box(cinfo, b1);
 8015f60:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 8015f64:	f7ff fbb6 	bl	80156d4 <update_box.isra.0>
    update_box(cinfo, b2);
 8015f68:	9b00      	ldr	r3, [sp, #0]
 8015f6a:	4639      	mov	r1, r7
 8015f6c:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 8015f70:	f7ff fbb0 	bl	80156d4 <update_box.isra.0>
    numboxes++;
 8015f74:	e782      	b.n	8015e7c <finish_pass1+0x4e>
  boxptr which = NULL;
 8015f76:	2100      	movs	r1, #0
 8015f78:	462b      	mov	r3, r5
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8015f7a:	460a      	mov	r2, r1
  register INT32 maxv = 0;
 8015f7c:	4608      	mov	r0, r1
    if (boxp->volume > maxv) {
 8015f7e:	699f      	ldr	r7, [r3, #24]
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8015f80:	3201      	adds	r2, #1
    if (boxp->volume > maxv) {
 8015f82:	4287      	cmp	r7, r0
 8015f84:	bfc4      	itt	gt
 8015f86:	4619      	movgt	r1, r3
 8015f88:	4638      	movgt	r0, r7
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8015f8a:	4593      	cmp	fp, r2
 8015f8c:	f103 0320 	add.w	r3, r3, #32
 8015f90:	d1f5      	bne.n	8015f7e <finish_pass1+0x150>
 8015f92:	e7af      	b.n	8015ef4 <finish_pass1+0xc6>
      lb = (b1->c1max + b1->c1min) / 2;
 8015f94:	4448      	add	r0, r9
 8015f96:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8015f9a:	1040      	asrs	r0, r0, #1
      b1->c1max = lb;
 8015f9c:	60c8      	str	r0, [r1, #12]
      b2->c1min = lb+1;
 8015f9e:	3001      	adds	r0, #1
 8015fa0:	62b0      	str	r0, [r6, #40]	; 0x28
      break;
 8015fa2:	e7d9      	b.n	8015f58 <finish_pass1+0x12a>
      histp = & histogram[c0][c1][c2min];
 8015fa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015fa6:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8015faa:	9c03      	ldr	r4, [sp, #12]
 8015fac:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 8015fb0:	f10e 0e02 	add.w	lr, lr, #2
 8015fb4:	f854 5027 	ldr.w	r5, [r4, r7, lsl #2]
      for (c2 = c2min; c2 <= c2max; c2++) {
 8015fb8:	f8dd c004 	ldr.w	ip, [sp, #4]
      histp = & histogram[c0][c1][c2min];
 8015fbc:	4428      	add	r0, r5
      for (c2 = c2min; c2 <= c2max; c2++) {
 8015fbe:	9c07      	ldr	r4, [sp, #28]
 8015fc0:	4564      	cmp	r4, ip
 8015fc2:	da05      	bge.n	8015fd0 <finish_pass1+0x1a2>
    for (c1 = c1min; c1 <= c1max; c1++) {
 8015fc4:	3601      	adds	r6, #1
 8015fc6:	9806      	ldr	r0, [sp, #24]
 8015fc8:	42b0      	cmp	r0, r6
 8015fca:	daeb      	bge.n	8015fa4 <finish_pass1+0x176>
  for (c0 = c0min; c0 <= c0max; c0++)
 8015fcc:	3701      	adds	r7, #1
 8015fce:	e774      	b.n	8015eba <finish_pass1+0x8c>
	if ((count = *histp++) != 0) {
 8015fd0:	f830 5b02 	ldrh.w	r5, [r0], #2
 8015fd4:	b155      	cbz	r5, 8015fec <finish_pass1+0x1be>
	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
 8015fd6:	9c08      	ldr	r4, [sp, #32]
	  total += count;
 8015fd8:	442a      	add	r2, r5
	  c1total += ((c1 << C1_SHIFT) + ((1<<C1_SHIFT)>>1)) * count;
 8015fda:	fb0e aa05 	mla	sl, lr, r5, sl
	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
 8015fde:	fb04 9905 	mla	r9, r4, r5, r9
	  c2total += ((c2 << C2_SHIFT) + ((1<<C2_SHIFT)>>1)) * count;
 8015fe2:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 8015fe6:	3404      	adds	r4, #4
 8015fe8:	fb05 3304 	mla	r3, r5, r4, r3
      for (c2 = c2min; c2 <= c2max; c2++) {
 8015fec:	f10c 0c01 	add.w	ip, ip, #1
 8015ff0:	e7e5      	b.n	8015fbe <finish_pass1+0x190>
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 8015ff2:	eb09 0962 	add.w	r9, r9, r2, asr #1
 8015ff6:	9800      	ldr	r0, [sp, #0]
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 8015ff8:	eb0a 0a62 	add.w	sl, sl, r2, asr #1
 8015ffc:	f108 0820 	add.w	r8, r8, #32
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 8016000:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 8016004:	eb03 0362 	add.w	r3, r3, r2, asr #1
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 8016008:	fb99 f9f2 	sdiv	r9, r9, r2
 801600c:	6800      	ldr	r0, [r0, #0]
 801600e:	f800 9001 	strb.w	r9, [r0, r1]
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 8016012:	9800      	ldr	r0, [sp, #0]
 8016014:	fb9a faf2 	sdiv	sl, sl, r2
 8016018:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 801601c:	6840      	ldr	r0, [r0, #4]
 801601e:	f800 a001 	strb.w	sl, [r0, r1]
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 8016022:	9800      	ldr	r0, [sp, #0]
 8016024:	fb93 f2f2 	sdiv	r2, r3, r2
 8016028:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 801602c:	6880      	ldr	r0, [r0, #8]
 801602e:	5442      	strb	r2, [r0, r1]
  for (i = 0; i < numboxes; i++)
 8016030:	3101      	adds	r1, #1
 8016032:	4559      	cmp	r1, fp
 8016034:	f47f af26 	bne.w	8015e84 <finish_pass1+0x56>
  cinfo->actual_number_of_colors = numboxes;
 8016038:	9b00      	ldr	r3, [sp, #0]
  TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 801603a:	2262      	movs	r2, #98	; 0x62
 801603c:	9800      	ldr	r0, [sp, #0]
  cinfo->actual_number_of_colors = numboxes;
 801603e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 8016042:	681b      	ldr	r3, [r3, #0]
 8016044:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8016048:	685b      	ldr	r3, [r3, #4]
 801604a:	2101      	movs	r1, #1
 801604c:	4798      	blx	r3
  cquantize->needs_zeroed = TRUE;
 801604e:	2301      	movs	r3, #1
 8016050:	9a02      	ldr	r2, [sp, #8]
 8016052:	61d3      	str	r3, [r2, #28]
}
 8016054:	b00b      	add	sp, #44	; 0x2c
 8016056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c0 > cmax) { n = 0; }
 801605a:	45a6      	cmp	lr, r4
 801605c:	f73f af74 	bgt.w	8015f48 <finish_pass1+0x11a>
      lb = (b1->c2max + b1->c2min) / 2;
 8016060:	9b04      	ldr	r3, [sp, #16]
 8016062:	441a      	add	r2, r3
 8016064:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8016068:	1052      	asrs	r2, r2, #1
      b1->c2max = lb;
 801606a:	614a      	str	r2, [r1, #20]
      b2->c2min = lb+1;
 801606c:	3201      	adds	r2, #1
 801606e:	6332      	str	r2, [r6, #48]	; 0x30
      break;
 8016070:	e772      	b.n	8015f58 <finish_pass1+0x12a>
	...

08016074 <jinit_2pass_quantizer>:
 * Module initialization routine for 2-pass color quantization.
 */

GLOBAL(void)
jinit_2pass_quantizer (j_decompress_ptr cinfo)
{
 8016074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_cquantize_ptr cquantize;
  int i;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8016076:	6843      	ldr	r3, [r0, #4]
 8016078:	222c      	movs	r2, #44	; 0x2c
 801607a:	2101      	movs	r1, #1
{
 801607c:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 801607e:	681b      	ldr	r3, [r3, #0]
 8016080:	4798      	blx	r3
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
  cquantize->pub.start_pass = start_pass_2_quant;
 8016082:	4b30      	ldr	r3, [pc, #192]	; (8016144 <jinit_2pass_quantizer+0xd0>)
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 8016084:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8016088:	4605      	mov	r5, r0
  cquantize->pub.start_pass = start_pass_2_quant;
 801608a:	6003      	str	r3, [r0, #0]
  cquantize->pub.new_color_map = new_color_map_2_quant;
 801608c:	4b2e      	ldr	r3, [pc, #184]	; (8016148 <jinit_2pass_quantizer+0xd4>)
 801608e:	60c3      	str	r3, [r0, #12]
  cquantize->fserrors = NULL;	/* flag optional arrays not allocated */
 8016090:	2300      	movs	r3, #0
 8016092:	6203      	str	r3, [r0, #32]
  cquantize->error_limiter = NULL;
 8016094:	6283      	str	r3, [r0, #40]	; 0x28

  /* Make sure jdmaster didn't give me a case I can't handle */
  if (cinfo->out_color_components != 3)
 8016096:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8016098:	2b03      	cmp	r3, #3
 801609a:	d005      	beq.n	80160a8 <jinit_2pass_quantizer+0x34>
    ERREXIT(cinfo, JERR_NOTIMPL);
 801609c:	6823      	ldr	r3, [r4, #0]
 801609e:	2230      	movs	r2, #48	; 0x30
 80160a0:	4620      	mov	r0, r4
 80160a2:	615a      	str	r2, [r3, #20]
 80160a4:	681b      	ldr	r3, [r3, #0]
 80160a6:	4798      	blx	r3

  /* Allocate the histogram/inverse colormap storage */
  cquantize->histogram = (hist3d) (*cinfo->mem->alloc_small)
 80160a8:	6863      	ldr	r3, [r4, #4]
 80160aa:	2600      	movs	r6, #0
 80160ac:	2280      	movs	r2, #128	; 0x80
 80160ae:	2101      	movs	r1, #1
 80160b0:	681b      	ldr	r3, [r3, #0]
 80160b2:	4620      	mov	r0, r4
 80160b4:	4798      	blx	r3
 80160b6:	61a8      	str	r0, [r5, #24]
    ((j_common_ptr) cinfo, JPOOL_IMAGE, HIST_C0_ELEMS * SIZEOF(hist2d));
  for (i = 0; i < HIST_C0_ELEMS; i++) {
    cquantize->histogram[i] = (hist2d) (*cinfo->mem->alloc_large)
 80160b8:	6863      	ldr	r3, [r4, #4]
 80160ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80160be:	69af      	ldr	r7, [r5, #24]
 80160c0:	2101      	movs	r1, #1
 80160c2:	685b      	ldr	r3, [r3, #4]
 80160c4:	4620      	mov	r0, r4
 80160c6:	4798      	blx	r3
 80160c8:	51b8      	str	r0, [r7, r6]
  for (i = 0; i < HIST_C0_ELEMS; i++) {
 80160ca:	3604      	adds	r6, #4
 80160cc:	2e80      	cmp	r6, #128	; 0x80
 80160ce:	d1f3      	bne.n	80160b8 <jinit_2pass_quantizer+0x44>
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
  }
  cquantize->needs_zeroed = TRUE; /* histogram is garbage now */
 80160d0:	2301      	movs	r3, #1
 80160d2:	61eb      	str	r3, [r5, #28]

  /* Allocate storage for the completed colormap, if required.
   * We do this now since it is FAR storage and may affect
   * the memory manager's space calculations.
   */
  if (cinfo->enable_2pass_quant) {
 80160d4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d031      	beq.n	801613e <jinit_2pass_quantizer+0xca>
    /* Make sure color count is acceptable */
    int desired = cinfo->desired_number_of_colors;
 80160da:	6e26      	ldr	r6, [r4, #96]	; 0x60
    /* Lower bound on # of colors ... somewhat arbitrary as long as > 0 */
    if (desired < 8)
 80160dc:	2e07      	cmp	r6, #7
 80160de:	dc25      	bgt.n	801612c <jinit_2pass_quantizer+0xb8>
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 8);
 80160e0:	223a      	movs	r2, #58	; 0x3a
 80160e2:	6823      	ldr	r3, [r4, #0]
 80160e4:	615a      	str	r2, [r3, #20]
 80160e6:	2208      	movs	r2, #8
    /* Make sure colormap indexes can be represented by JSAMPLEs */
    if (desired > MAXNUMCOLORS)
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 80160e8:	619a      	str	r2, [r3, #24]
 80160ea:	4620      	mov	r0, r4
 80160ec:	681b      	ldr	r3, [r3, #0]
 80160ee:	4798      	blx	r3
    cquantize->sv_colormap = (*cinfo->mem->alloc_sarray)
 80160f0:	6863      	ldr	r3, [r4, #4]
 80160f2:	4632      	mov	r2, r6
 80160f4:	2101      	movs	r1, #1
 80160f6:	4620      	mov	r0, r4
 80160f8:	689f      	ldr	r7, [r3, #8]
 80160fa:	2303      	movs	r3, #3
 80160fc:	47b8      	blx	r7
      ((j_common_ptr) cinfo,JPOOL_IMAGE, (JDIMENSION) desired, (JDIMENSION) 3);
    cquantize->desired = desired;
 80160fe:	e9c5 0604 	strd	r0, r6, [r5, #16]
  } else
    cquantize->sv_colormap = NULL;

  /* Only F-S dithering or no dithering is supported. */
  /* If user asks for ordered dither, give him F-S. */
  if (cinfo->dither_mode != JDITHER_NONE)
 8016102:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8016106:	b1e3      	cbz	r3, 8016142 <jinit_2pass_quantizer+0xce>
    cinfo->dither_mode = JDITHER_FS;
 8016108:	2302      	movs	r3, #2
   * This isn't really needed until pass 2, but again it is FAR storage.
   * Although we will cope with a later change in dither_mode,
   * we do not promise to honor max_memory_to_use if dither_mode changes.
   */
  if (cinfo->dither_mode == JDITHER_FS) {
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 801610a:	2206      	movs	r2, #6
 801610c:	4620      	mov	r0, r4
 801610e:	2101      	movs	r1, #1
    cinfo->dither_mode = JDITHER_FS;
 8016110:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 8016114:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016116:	435a      	muls	r2, r3
 8016118:	6863      	ldr	r3, [r4, #4]
 801611a:	320c      	adds	r2, #12
 801611c:	685b      	ldr	r3, [r3, #4]
 801611e:	4798      	blx	r3
 8016120:	6228      	str	r0, [r5, #32]
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       (size_t) ((cinfo->output_width + 2) * (3 * SIZEOF(FSERROR))));
    /* Might as well create the error-limiting table too. */
    init_error_limit(cinfo);
 8016122:	4620      	mov	r0, r4
  }
}
 8016124:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    init_error_limit(cinfo);
 8016128:	f7ff ba2e 	b.w	8015588 <init_error_limit>
    if (desired > MAXNUMCOLORS)
 801612c:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8016130:	ddde      	ble.n	80160f0 <jinit_2pass_quantizer+0x7c>
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 8016132:	223b      	movs	r2, #59	; 0x3b
 8016134:	6823      	ldr	r3, [r4, #0]
 8016136:	615a      	str	r2, [r3, #20]
 8016138:	f44f 7280 	mov.w	r2, #256	; 0x100
 801613c:	e7d4      	b.n	80160e8 <jinit_2pass_quantizer+0x74>
    cquantize->sv_colormap = NULL;
 801613e:	612b      	str	r3, [r5, #16]
 8016140:	e7df      	b.n	8016102 <jinit_2pass_quantizer+0x8e>
}
 8016142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016144:	08015605 	.word	0x08015605
 8016148:	080155f9 	.word	0x080155f9

0801614c <jdiv_round_up>:
GLOBAL(long)
jdiv_round_up (long a, long b)
/* Compute a/b rounded up to next integer, ie, ceil(a/b) */
/* Assumes a >= 0, b > 0 */
{
  return (a + b - 1L) / b;
 801614c:	1843      	adds	r3, r0, r1
 801614e:	3b01      	subs	r3, #1
}
 8016150:	fb93 f0f1 	sdiv	r0, r3, r1
 8016154:	4770      	bx	lr

08016156 <jround_up>:
GLOBAL(long)
jround_up (long a, long b)
/* Compute a rounded up to next multiple of b, ie, ceil(a/b)*b */
/* Assumes a >= 0, b > 0 */
{
  a += b - 1L;
 8016156:	1e4b      	subs	r3, r1, #1
 8016158:	4418      	add	r0, r3
  return a - (a % b);
 801615a:	fb90 f3f1 	sdiv	r3, r0, r1
 801615e:	fb01 0113 	mls	r1, r1, r3, r0
}
 8016162:	1a40      	subs	r0, r0, r1
 8016164:	4770      	bx	lr

08016166 <jcopy_sample_rows>:
/* Copy some rows of samples from one place to another.
 * num_rows rows are copied from input_array[source_row++]
 * to output_array[dest_row++]; these areas may overlap for duplication.
 * The source and destination arrays must be at least as wide as num_cols.
 */
{
 8016166:	b570      	push	{r4, r5, r6, lr}
 8016168:	9e04      	ldr	r6, [sp, #16]
#else
  register JDIMENSION count;
#endif
  register int row;

  input_array += source_row;
 801616a:	eb00 0481 	add.w	r4, r0, r1, lsl #2
  output_array += dest_row;
 801616e:	eb02 0583 	add.w	r5, r2, r3, lsl #2

  for (row = num_rows; row > 0; row--) {
 8016172:	2e00      	cmp	r6, #0
 8016174:	dc00      	bgt.n	8016178 <jcopy_sample_rows+0x12>
#else
    for (count = num_cols; count > 0; count--)
      *outptr++ = *inptr++;	/* needn't bother with GETJSAMPLE() here */
#endif
  }
}
 8016176:	bd70      	pop	{r4, r5, r6, pc}
    FMEMCOPY(outptr, inptr, count);
 8016178:	9a05      	ldr	r2, [sp, #20]
  for (row = num_rows; row > 0; row--) {
 801617a:	3e01      	subs	r6, #1
    FMEMCOPY(outptr, inptr, count);
 801617c:	f854 1b04 	ldr.w	r1, [r4], #4
 8016180:	f855 0b04 	ldr.w	r0, [r5], #4
 8016184:	f011 f9c0 	bl	8027508 <memcpy>
  for (row = num_rows; row > 0; row--) {
 8016188:	e7f3      	b.n	8016172 <jcopy_sample_rows+0xc>

0801618a <jcopy_block_row>:

GLOBAL(void)
jcopy_block_row (JBLOCKROW input_row, JBLOCKROW output_row,
		 JDIMENSION num_blocks)
/* Copy a row of coefficient blocks from one place to another. */
{
 801618a:	460b      	mov	r3, r1
#ifdef FMEMCOPY
  FMEMCOPY(output_row, input_row, num_blocks * (DCTSIZE2 * SIZEOF(JCOEF)));
 801618c:	01d2      	lsls	r2, r2, #7
 801618e:	4601      	mov	r1, r0
 8016190:	4618      	mov	r0, r3
 8016192:	f011 b9b9 	b.w	8027508 <memcpy>

08016196 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8016196:	8880      	ldrh	r0, [r0, #4]
 8016198:	4770      	bx	lr

0801619a <_ZN8touchgfx17AbstractPartition5clearEv>:
 801619a:	2300      	movs	r3, #0
 801619c:	8083      	strh	r3, [r0, #4]
 801619e:	4770      	bx	lr

080161a0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 80161a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161a2:	6803      	ldr	r3, [r0, #0]
 80161a4:	460e      	mov	r6, r1
 80161a6:	2100      	movs	r1, #0
 80161a8:	4605      	mov	r5, r0
 80161aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161ac:	4798      	blx	r3
 80161ae:	4604      	mov	r4, r0
 80161b0:	682b      	ldr	r3, [r5, #0]
 80161b2:	4628      	mov	r0, r5
 80161b4:	1b34      	subs	r4, r6, r4
 80161b6:	6a1b      	ldr	r3, [r3, #32]
 80161b8:	b2a4      	uxth	r4, r4
 80161ba:	4798      	blx	r3
 80161bc:	88ab      	ldrh	r3, [r5, #4]
 80161be:	fbb4 f4f0 	udiv	r4, r4, r0
 80161c2:	42a3      	cmp	r3, r4
 80161c4:	d805      	bhi.n	80161d2 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 80161c6:	4b0e      	ldr	r3, [pc, #56]	; (8016200 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 80161c8:	211e      	movs	r1, #30
 80161ca:	4a0e      	ldr	r2, [pc, #56]	; (8016204 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80161cc:	480e      	ldr	r0, [pc, #56]	; (8016208 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 80161ce:	f011 f919 	bl	8027404 <__assert_func>
 80161d2:	682b      	ldr	r3, [r5, #0]
 80161d4:	2100      	movs	r1, #0
 80161d6:	4628      	mov	r0, r5
 80161d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161da:	4798      	blx	r3
 80161dc:	682b      	ldr	r3, [r5, #0]
 80161de:	4607      	mov	r7, r0
 80161e0:	4628      	mov	r0, r5
 80161e2:	6a1b      	ldr	r3, [r3, #32]
 80161e4:	4798      	blx	r3
 80161e6:	1bf3      	subs	r3, r6, r7
 80161e8:	b29b      	uxth	r3, r3
 80161ea:	fbb3 f2f0 	udiv	r2, r3, r0
 80161ee:	fb02 3010 	mls	r0, r2, r0, r3
 80161f2:	b118      	cbz	r0, 80161fc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 80161f4:	4b05      	ldr	r3, [pc, #20]	; (801620c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 80161f6:	211f      	movs	r1, #31
 80161f8:	4a02      	ldr	r2, [pc, #8]	; (8016204 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80161fa:	e7e7      	b.n	80161cc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 80161fc:	4620      	mov	r0, r4
 80161fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016200:	0802c8bc 	.word	0x0802c8bc
 8016204:	0802ca2a 	.word	0x0802ca2a
 8016208:	0802c8d1 	.word	0x0802c8d1
 801620c:	0802c8ff 	.word	0x0802c8ff

08016210 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8016210:	b538      	push	{r3, r4, r5, lr}
 8016212:	6803      	ldr	r3, [r0, #0]
 8016214:	460d      	mov	r5, r1
 8016216:	4604      	mov	r4, r0
 8016218:	6a1b      	ldr	r3, [r3, #32]
 801621a:	4798      	blx	r3
 801621c:	4285      	cmp	r5, r0
 801621e:	d905      	bls.n	801622c <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8016220:	4b0c      	ldr	r3, [pc, #48]	; (8016254 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8016222:	2130      	movs	r1, #48	; 0x30
 8016224:	4a0c      	ldr	r2, [pc, #48]	; (8016258 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8016226:	480d      	ldr	r0, [pc, #52]	; (801625c <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8016228:	f011 f8ec 	bl	8027404 <__assert_func>
 801622c:	6823      	ldr	r3, [r4, #0]
 801622e:	4620      	mov	r0, r4
 8016230:	88a5      	ldrh	r5, [r4, #4]
 8016232:	69db      	ldr	r3, [r3, #28]
 8016234:	4798      	blx	r3
 8016236:	4285      	cmp	r5, r0
 8016238:	d303      	bcc.n	8016242 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 801623a:	4b09      	ldr	r3, [pc, #36]	; (8016260 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 801623c:	2131      	movs	r1, #49	; 0x31
 801623e:	4a06      	ldr	r2, [pc, #24]	; (8016258 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8016240:	e7f1      	b.n	8016226 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8016242:	6823      	ldr	r3, [r4, #0]
 8016244:	4620      	mov	r0, r4
 8016246:	88a1      	ldrh	r1, [r4, #4]
 8016248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801624a:	4798      	blx	r3
 801624c:	88a3      	ldrh	r3, [r4, #4]
 801624e:	3301      	adds	r3, #1
 8016250:	80a3      	strh	r3, [r4, #4]
 8016252:	bd38      	pop	{r3, r4, r5, pc}
 8016254:	0802c979 	.word	0x0802c979
 8016258:	0802ca6d 	.word	0x0802ca6d
 801625c:	0802c8d1 	.word	0x0802c8d1
 8016260:	0802c990 	.word	0x0802c990

08016264 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8016264:	b570      	push	{r4, r5, r6, lr}
 8016266:	6803      	ldr	r3, [r0, #0]
 8016268:	4616      	mov	r6, r2
 801626a:	4604      	mov	r4, r0
 801626c:	460d      	mov	r5, r1
 801626e:	6a1b      	ldr	r3, [r3, #32]
 8016270:	4798      	blx	r3
 8016272:	4286      	cmp	r6, r0
 8016274:	d905      	bls.n	8016282 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8016276:	4b06      	ldr	r3, [pc, #24]	; (8016290 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8016278:	213a      	movs	r1, #58	; 0x3a
 801627a:	4a06      	ldr	r2, [pc, #24]	; (8016294 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 801627c:	4806      	ldr	r0, [pc, #24]	; (8016298 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 801627e:	f011 f8c1 	bl	8027404 <__assert_func>
 8016282:	6823      	ldr	r3, [r4, #0]
 8016284:	4629      	mov	r1, r5
 8016286:	4620      	mov	r0, r4
 8016288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801628a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801628e:	4718      	bx	r3
 8016290:	0802c979 	.word	0x0802c979
 8016294:	0802c9e0 	.word	0x0802c9e0
 8016298:	0802c8d1 	.word	0x0802c8d1

0801629c <_ZN8touchgfx17AbstractPartitionD1Ev>:
 801629c:	4770      	bx	lr
	...

080162a0 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80162a0:	4a02      	ldr	r2, [pc, #8]	; (80162ac <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80162a2:	6002      	str	r2, [r0, #0]
 80162a4:	2200      	movs	r2, #0
 80162a6:	8082      	strh	r2, [r0, #4]
 80162a8:	4770      	bx	lr
 80162aa:	bf00      	nop
 80162ac:	0802c9b4 	.word	0x0802c9b4

080162b0 <_ZN8touchgfx9Container13getFirstChildEv>:
 80162b0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80162b2:	4770      	bx	lr

080162b4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80162b4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80162b6:	2000      	movs	r0, #0
 80162b8:	b12b      	cbz	r3, 80162c6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80162ba:	b920      	cbnz	r0, 80162c6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80162bc:	1a5a      	subs	r2, r3, r1
 80162be:	699b      	ldr	r3, [r3, #24]
 80162c0:	4250      	negs	r0, r2
 80162c2:	4150      	adcs	r0, r2
 80162c4:	e7f8      	b.n	80162b8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80162c6:	4770      	bx	lr

080162c8 <_ZN8touchgfx9Container9removeAllEv>:
 80162c8:	2200      	movs	r2, #0
 80162ca:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80162cc:	b123      	cbz	r3, 80162d8 <_ZN8touchgfx9Container9removeAllEv+0x10>
 80162ce:	6999      	ldr	r1, [r3, #24]
 80162d0:	6281      	str	r1, [r0, #40]	; 0x28
 80162d2:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80162d6:	e7f8      	b.n	80162ca <_ZN8touchgfx9Container9removeAllEv+0x2>
 80162d8:	4770      	bx	lr

080162da <_ZN8touchgfx9Container6unlinkEv>:
 80162da:	2300      	movs	r3, #0
 80162dc:	6283      	str	r3, [r0, #40]	; 0x28
 80162de:	4770      	bx	lr

080162e0 <_ZNK8touchgfx9Container12getSolidRectEv>:
 80162e0:	2200      	movs	r2, #0
 80162e2:	8002      	strh	r2, [r0, #0]
 80162e4:	8042      	strh	r2, [r0, #2]
 80162e6:	8082      	strh	r2, [r0, #4]
 80162e8:	80c2      	strh	r2, [r0, #6]
 80162ea:	4770      	bx	lr

080162ec <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 80162ec:	b570      	push	{r4, r5, r6, lr}
 80162ee:	460d      	mov	r5, r1
 80162f0:	4616      	mov	r6, r2
 80162f2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80162f4:	b13c      	cbz	r4, 8016306 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 80162f6:	6823      	ldr	r3, [r4, #0]
 80162f8:	4620      	mov	r0, r4
 80162fa:	4632      	mov	r2, r6
 80162fc:	4629      	mov	r1, r5
 80162fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016300:	4798      	blx	r3
 8016302:	69a4      	ldr	r4, [r4, #24]
 8016304:	e7f6      	b.n	80162f4 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8016306:	bd70      	pop	{r4, r5, r6, pc}

08016308 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8016308:	b538      	push	{r3, r4, r5, lr}
 801630a:	460d      	mov	r5, r1
 801630c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801630e:	b134      	cbz	r4, 801631e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8016310:	682b      	ldr	r3, [r5, #0]
 8016312:	4621      	mov	r1, r4
 8016314:	4628      	mov	r0, r5
 8016316:	689b      	ldr	r3, [r3, #8]
 8016318:	4798      	blx	r3
 801631a:	69a4      	ldr	r4, [r4, #24]
 801631c:	e7f7      	b.n	801630e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 801631e:	bd38      	pop	{r3, r4, r5, pc}

08016320 <_ZN8touchgfx9ContainerD1Ev>:
 8016320:	4770      	bx	lr

08016322 <_ZN8touchgfx9ContainerD0Ev>:
 8016322:	b510      	push	{r4, lr}
 8016324:	4604      	mov	r4, r0
 8016326:	212c      	movs	r1, #44	; 0x2c
 8016328:	f011 f83e 	bl	80273a8 <_ZdlPvj>
 801632c:	4620      	mov	r0, r4
 801632e:	bd10      	pop	{r4, pc}

08016330 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8016330:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016332:	b19b      	cbz	r3, 801635c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8016334:	428b      	cmp	r3, r1
 8016336:	d109      	bne.n	801634c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8016338:	699a      	ldr	r2, [r3, #24]
 801633a:	2100      	movs	r1, #0
 801633c:	6159      	str	r1, [r3, #20]
 801633e:	6282      	str	r2, [r0, #40]	; 0x28
 8016340:	b902      	cbnz	r2, 8016344 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8016342:	4770      	bx	lr
 8016344:	6199      	str	r1, [r3, #24]
 8016346:	4770      	bx	lr
 8016348:	4613      	mov	r3, r2
 801634a:	b13a      	cbz	r2, 801635c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801634c:	699a      	ldr	r2, [r3, #24]
 801634e:	428a      	cmp	r2, r1
 8016350:	d1fa      	bne.n	8016348 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8016352:	698a      	ldr	r2, [r1, #24]
 8016354:	619a      	str	r2, [r3, #24]
 8016356:	2300      	movs	r3, #0
 8016358:	e9c1 3305 	strd	r3, r3, [r1, #20]
 801635c:	4770      	bx	lr

0801635e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 801635e:	b410      	push	{r4}
 8016360:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016362:	4604      	mov	r4, r0
 8016364:	b92b      	cbnz	r3, 8016372 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8016366:	6803      	ldr	r3, [r0, #0]
 8016368:	4611      	mov	r1, r2
 801636a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801636e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016370:	4718      	bx	r3
 8016372:	b941      	cbnz	r1, 8016386 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8016374:	6193      	str	r3, [r2, #24]
 8016376:	6282      	str	r2, [r0, #40]	; 0x28
 8016378:	6154      	str	r4, [r2, #20]
 801637a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801637e:	4770      	bx	lr
 8016380:	4603      	mov	r3, r0
 8016382:	2800      	cmp	r0, #0
 8016384:	d0f9      	beq.n	801637a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8016386:	4299      	cmp	r1, r3
 8016388:	6998      	ldr	r0, [r3, #24]
 801638a:	d1f9      	bne.n	8016380 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 801638c:	6190      	str	r0, [r2, #24]
 801638e:	618a      	str	r2, [r1, #24]
 8016390:	e7f2      	b.n	8016378 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08016394 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8016394:	4288      	cmp	r0, r1
 8016396:	b508      	push	{r3, lr}
 8016398:	d105      	bne.n	80163a6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 801639a:	4b11      	ldr	r3, [pc, #68]	; (80163e0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 801639c:	2123      	movs	r1, #35	; 0x23
 801639e:	4a11      	ldr	r2, [pc, #68]	; (80163e4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80163a0:	4811      	ldr	r0, [pc, #68]	; (80163e8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 80163a2:	f011 f82f 	bl	8027404 <__assert_func>
 80163a6:	694b      	ldr	r3, [r1, #20]
 80163a8:	b11b      	cbz	r3, 80163b2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 80163aa:	4b10      	ldr	r3, [pc, #64]	; (80163ec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 80163ac:	2124      	movs	r1, #36	; 0x24
 80163ae:	4a0d      	ldr	r2, [pc, #52]	; (80163e4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80163b0:	e7f6      	b.n	80163a0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80163b2:	e9c1 0305 	strd	r0, r3, [r1, #20]
 80163b6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80163b8:	b913      	cbnz	r3, 80163c0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 80163ba:	6281      	str	r1, [r0, #40]	; 0x28
 80163bc:	bd08      	pop	{r3, pc}
 80163be:	4613      	mov	r3, r2
 80163c0:	699a      	ldr	r2, [r3, #24]
 80163c2:	b12a      	cbz	r2, 80163d0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 80163c4:	428b      	cmp	r3, r1
 80163c6:	d1fa      	bne.n	80163be <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 80163c8:	4b09      	ldr	r3, [pc, #36]	; (80163f0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 80163ca:	2135      	movs	r1, #53	; 0x35
 80163cc:	4a05      	ldr	r2, [pc, #20]	; (80163e4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80163ce:	e7e7      	b.n	80163a0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80163d0:	428b      	cmp	r3, r1
 80163d2:	d103      	bne.n	80163dc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 80163d4:	4b06      	ldr	r3, [pc, #24]	; (80163f0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 80163d6:	2138      	movs	r1, #56	; 0x38
 80163d8:	4a02      	ldr	r2, [pc, #8]	; (80163e4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80163da:	e7e1      	b.n	80163a0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80163dc:	6199      	str	r1, [r3, #24]
 80163de:	e7ed      	b.n	80163bc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 80163e0:	0802caab 	.word	0x0802caab
 80163e4:	0802cc00 	.word	0x0802cc00
 80163e8:	0802cad7 	.word	0x0802cad7
 80163ec:	0802cb0a 	.word	0x0802cb0a
 80163f0:	0802cb40 	.word	0x0802cb40

080163f4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80163f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163f8:	461f      	mov	r7, r3
 80163fa:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80163fe:	460d      	mov	r5, r1
 8016400:	4616      	mov	r6, r2
 8016402:	b103      	cbz	r3, 8016406 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8016404:	6038      	str	r0, [r7, #0]
 8016406:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016408:	b314      	cbz	r4, 8016450 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 801640a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801640e:	b1eb      	cbz	r3, 801644c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016410:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8016414:	428d      	cmp	r5, r1
 8016416:	db19      	blt.n	801644c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016418:	b289      	uxth	r1, r1
 801641a:	8923      	ldrh	r3, [r4, #8]
 801641c:	440b      	add	r3, r1
 801641e:	b21b      	sxth	r3, r3
 8016420:	429d      	cmp	r5, r3
 8016422:	da13      	bge.n	801644c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016424:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8016428:	4296      	cmp	r6, r2
 801642a:	db0f      	blt.n	801644c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801642c:	b292      	uxth	r2, r2
 801642e:	8963      	ldrh	r3, [r4, #10]
 8016430:	4413      	add	r3, r2
 8016432:	b21b      	sxth	r3, r3
 8016434:	429e      	cmp	r6, r3
 8016436:	da09      	bge.n	801644c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016438:	6823      	ldr	r3, [r4, #0]
 801643a:	1ab2      	subs	r2, r6, r2
 801643c:	1a69      	subs	r1, r5, r1
 801643e:	4620      	mov	r0, r4
 8016440:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8016444:	b212      	sxth	r2, r2
 8016446:	463b      	mov	r3, r7
 8016448:	b209      	sxth	r1, r1
 801644a:	47c0      	blx	r8
 801644c:	69a4      	ldr	r4, [r4, #24]
 801644e:	e7db      	b.n	8016408 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8016450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016454 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8016454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016458:	4c6d      	ldr	r4, [pc, #436]	; (8016610 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 801645a:	b0a1      	sub	sp, #132	; 0x84
 801645c:	4606      	mov	r6, r0
 801645e:	6824      	ldr	r4, [r4, #0]
 8016460:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8016462:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8016466:	2400      	movs	r4, #0
 8016468:	9303      	str	r3, [sp, #12]
 801646a:	802c      	strh	r4, [r5, #0]
 801646c:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 801646e:	802c      	strh	r4, [r5, #0]
 8016470:	601c      	str	r4, [r3, #0]
 8016472:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8016476:	f7ff ffbd 	bl	80163f4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801647a:	f1b9 0f03 	cmp.w	r9, #3
 801647e:	f340 80c1 	ble.w	8016604 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8016482:	4631      	mov	r1, r6
 8016484:	a80c      	add	r0, sp, #48	; 0x30
 8016486:	f003 fb43 	bl	8019b10 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801648a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801648e:	9306      	str	r3, [sp, #24]
 8016490:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8016494:	9307      	str	r3, [sp, #28]
 8016496:	9b03      	ldr	r3, [sp, #12]
 8016498:	f8d3 a000 	ldr.w	sl, [r3]
 801649c:	f1ba 0f00 	cmp.w	sl, #0
 80164a0:	f000 80b3 	beq.w	801660a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 80164a4:	4651      	mov	r1, sl
 80164a6:	a810      	add	r0, sp, #64	; 0x40
 80164a8:	f003 fb32 	bl	8019b10 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80164ac:	2002      	movs	r0, #2
 80164ae:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 80164b2:	9b01      	ldr	r3, [sp, #4]
 80164b4:	9a06      	ldr	r2, [sp, #24]
 80164b6:	fb91 f1f0 	sdiv	r1, r1, r0
 80164ba:	189d      	adds	r5, r3, r2
 80164bc:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 80164c0:	9a07      	ldr	r2, [sp, #28]
 80164c2:	4419      	add	r1, r3
 80164c4:	9b02      	ldr	r3, [sp, #8]
 80164c6:	4413      	add	r3, r2
 80164c8:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 80164cc:	1a6d      	subs	r5, r5, r1
 80164ce:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80164d2:	fb92 f2f0 	sdiv	r2, r2, r0
 80164d6:	440a      	add	r2, r1
 80164d8:	1a9b      	subs	r3, r3, r2
 80164da:	435b      	muls	r3, r3
 80164dc:	fb05 3505 	mla	r5, r5, r5, r3
 80164e0:	4f4c      	ldr	r7, [pc, #304]	; (8016614 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 80164e2:	ac10      	add	r4, sp, #64	; 0x40
 80164e4:	f1b9 0f0c 	cmp.w	r9, #12
 80164e8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80164ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80164ec:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80164ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80164f0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80164f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80164f4:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80164f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80164fc:	f04f 0303 	mov.w	r3, #3
 8016500:	bfd8      	it	le
 8016502:	f109 32ff 	addle.w	r2, r9, #4294967295
 8016506:	f04f 0400 	mov.w	r4, #0
 801650a:	f8cd 9000 	str.w	r9, [sp]
 801650e:	bfcc      	ite	gt
 8016510:	4698      	movgt	r8, r3
 8016512:	fb92 f8f3 	sdivle	r8, r2, r3
 8016516:	1c63      	adds	r3, r4, #1
 8016518:	aa10      	add	r2, sp, #64	; 0x40
 801651a:	f004 0401 	and.w	r4, r4, #1
 801651e:	f04f 0b00 	mov.w	fp, #0
 8016522:	9308      	str	r3, [sp, #32]
 8016524:	9b00      	ldr	r3, [sp, #0]
 8016526:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 801652a:	fb93 f3f8 	sdiv	r3, r3, r8
 801652e:	3404      	adds	r4, #4
 8016530:	b29b      	uxth	r3, r3
 8016532:	9304      	str	r3, [sp, #16]
 8016534:	9a04      	ldr	r2, [sp, #16]
 8016536:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801653a:	fb13 f302 	smulbb	r3, r3, r2
 801653e:	9a01      	ldr	r2, [sp, #4]
 8016540:	b29b      	uxth	r3, r3
 8016542:	1899      	adds	r1, r3, r2
 8016544:	9305      	str	r3, [sp, #20]
 8016546:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801654a:	b209      	sxth	r1, r1
 801654c:	4299      	cmp	r1, r3
 801654e:	db4d      	blt.n	80165ec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8016550:	8932      	ldrh	r2, [r6, #8]
 8016552:	4413      	add	r3, r2
 8016554:	b21b      	sxth	r3, r3
 8016556:	4299      	cmp	r1, r3
 8016558:	da48      	bge.n	80165ec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801655a:	9b04      	ldr	r3, [sp, #16]
 801655c:	6827      	ldr	r7, [r4, #0]
 801655e:	fb17 f703 	smulbb	r7, r7, r3
 8016562:	9b02      	ldr	r3, [sp, #8]
 8016564:	b2bf      	uxth	r7, r7
 8016566:	18fa      	adds	r2, r7, r3
 8016568:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801656c:	b212      	sxth	r2, r2
 801656e:	429a      	cmp	r2, r3
 8016570:	db3c      	blt.n	80165ec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8016572:	8970      	ldrh	r0, [r6, #10]
 8016574:	4403      	add	r3, r0
 8016576:	b21b      	sxth	r3, r3
 8016578:	429a      	cmp	r2, r3
 801657a:	da37      	bge.n	80165ec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801657c:	2300      	movs	r3, #0
 801657e:	4630      	mov	r0, r6
 8016580:	930b      	str	r3, [sp, #44]	; 0x2c
 8016582:	ab0b      	add	r3, sp, #44	; 0x2c
 8016584:	f7ff ff36 	bl	80163f4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8016588:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801658a:	b37a      	cbz	r2, 80165ec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801658c:	4552      	cmp	r2, sl
 801658e:	d02d      	beq.n	80165ec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8016590:	4611      	mov	r1, r2
 8016592:	a80e      	add	r0, sp, #56	; 0x38
 8016594:	9209      	str	r2, [sp, #36]	; 0x24
 8016596:	f003 fabb 	bl	8019b10 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801659a:	f04f 0e02 	mov.w	lr, #2
 801659e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 80165a2:	9a06      	ldr	r2, [sp, #24]
 80165a4:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 80165a8:	9b01      	ldr	r3, [sp, #4]
 80165aa:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 80165ae:	4413      	add	r3, r2
 80165b0:	9a07      	ldr	r2, [sp, #28]
 80165b2:	fb91 f1fe 	sdiv	r1, r1, lr
 80165b6:	fb9c fcfe 	sdiv	ip, ip, lr
 80165ba:	4401      	add	r1, r0
 80165bc:	1a58      	subs	r0, r3, r1
 80165be:	9b02      	ldr	r3, [sp, #8]
 80165c0:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 80165c4:	4413      	add	r3, r2
 80165c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80165c8:	448c      	add	ip, r1
 80165ca:	eba3 030c 	sub.w	r3, r3, ip
 80165ce:	435b      	muls	r3, r3
 80165d0:	fb00 3300 	mla	r3, r0, r0, r3
 80165d4:	42ab      	cmp	r3, r5
 80165d6:	d208      	bcs.n	80165ea <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 80165d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80165da:	461d      	mov	r5, r3
 80165dc:	9803      	ldr	r0, [sp, #12]
 80165de:	6001      	str	r1, [r0, #0]
 80165e0:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80165e2:	9805      	ldr	r0, [sp, #20]
 80165e4:	8008      	strh	r0, [r1, #0]
 80165e6:	992b      	ldr	r1, [sp, #172]	; 0xac
 80165e8:	800f      	strh	r7, [r1, #0]
 80165ea:	4692      	mov	sl, r2
 80165ec:	f10b 0b01 	add.w	fp, fp, #1
 80165f0:	3408      	adds	r4, #8
 80165f2:	f1bb 0f04 	cmp.w	fp, #4
 80165f6:	d19d      	bne.n	8016534 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 80165f8:	9b00      	ldr	r3, [sp, #0]
 80165fa:	9c08      	ldr	r4, [sp, #32]
 80165fc:	444b      	add	r3, r9
 80165fe:	4544      	cmp	r4, r8
 8016600:	9300      	str	r3, [sp, #0]
 8016602:	d188      	bne.n	8016516 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8016604:	b021      	add	sp, #132	; 0x84
 8016606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801660a:	f04f 35ff 	mov.w	r5, #4294967295
 801660e:	e767      	b.n	80164e0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8016610:	20014be4 	.word	0x20014be4
 8016614:	080288c0 	.word	0x080288c0

08016618 <_ZN8touchgfx4RectaNERKS0_>:
 8016618:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801661c:	f9b1 7000 	ldrsh.w	r7, [r1]
 8016620:	888c      	ldrh	r4, [r1, #4]
 8016622:	f9b0 9000 	ldrsh.w	r9, [r0]
 8016626:	443c      	add	r4, r7
 8016628:	b2a4      	uxth	r4, r4
 801662a:	fa0f f884 	sxth.w	r8, r4
 801662e:	45c1      	cmp	r9, r8
 8016630:	da2f      	bge.n	8016692 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016632:	8882      	ldrh	r2, [r0, #4]
 8016634:	444a      	add	r2, r9
 8016636:	b292      	uxth	r2, r2
 8016638:	fa0f fe82 	sxth.w	lr, r2
 801663c:	4577      	cmp	r7, lr
 801663e:	da28      	bge.n	8016692 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016640:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8016644:	88cb      	ldrh	r3, [r1, #6]
 8016646:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801664a:	442b      	add	r3, r5
 801664c:	b21b      	sxth	r3, r3
 801664e:	429e      	cmp	r6, r3
 8016650:	da1f      	bge.n	8016692 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016652:	88c3      	ldrh	r3, [r0, #6]
 8016654:	4433      	add	r3, r6
 8016656:	b29b      	uxth	r3, r3
 8016658:	fa0f fc83 	sxth.w	ip, r3
 801665c:	4565      	cmp	r5, ip
 801665e:	da18      	bge.n	8016692 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016660:	454f      	cmp	r7, r9
 8016662:	bfb8      	it	lt
 8016664:	464f      	movlt	r7, r9
 8016666:	42b5      	cmp	r5, r6
 8016668:	bfb8      	it	lt
 801666a:	4635      	movlt	r5, r6
 801666c:	45f0      	cmp	r8, lr
 801666e:	bfd8      	it	le
 8016670:	4622      	movle	r2, r4
 8016672:	1bd2      	subs	r2, r2, r7
 8016674:	8082      	strh	r2, [r0, #4]
 8016676:	884a      	ldrh	r2, [r1, #2]
 8016678:	88c9      	ldrh	r1, [r1, #6]
 801667a:	8007      	strh	r7, [r0, #0]
 801667c:	440a      	add	r2, r1
 801667e:	8045      	strh	r5, [r0, #2]
 8016680:	b292      	uxth	r2, r2
 8016682:	b211      	sxth	r1, r2
 8016684:	458c      	cmp	ip, r1
 8016686:	bfa8      	it	ge
 8016688:	4613      	movge	r3, r2
 801668a:	1b5b      	subs	r3, r3, r5
 801668c:	80c3      	strh	r3, [r0, #6]
 801668e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016692:	2300      	movs	r3, #0
 8016694:	8003      	strh	r3, [r0, #0]
 8016696:	8043      	strh	r3, [r0, #2]
 8016698:	8083      	strh	r3, [r0, #4]
 801669a:	80c3      	strh	r3, [r0, #6]
 801669c:	e7f7      	b.n	801668e <_ZN8touchgfx4RectaNERKS0_+0x76>

0801669e <_ZNK8touchgfx4Rect7isEmptyEv>:
 801669e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	dd06      	ble.n	80166b4 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 80166a6:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80166aa:	2800      	cmp	r0, #0
 80166ac:	bfcc      	ite	gt
 80166ae:	2000      	movgt	r0, #0
 80166b0:	2001      	movle	r0, #1
 80166b2:	4770      	bx	lr
 80166b4:	2001      	movs	r0, #1
 80166b6:	4770      	bx	lr

080166b8 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80166b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166bc:	2300      	movs	r3, #0
 80166be:	4604      	mov	r4, r0
 80166c0:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80166c2:	8003      	strh	r3, [r0, #0]
 80166c4:	8043      	strh	r3, [r0, #2]
 80166c6:	8083      	strh	r3, [r0, #4]
 80166c8:	80c3      	strh	r3, [r0, #6]
 80166ca:	2d00      	cmp	r5, #0
 80166cc:	d040      	beq.n	8016750 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80166ce:	1d28      	adds	r0, r5, #4
 80166d0:	f7ff ffe5 	bl	801669e <_ZNK8touchgfx4Rect7isEmptyEv>
 80166d4:	b988      	cbnz	r0, 80166fa <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80166d6:	4620      	mov	r0, r4
 80166d8:	f7ff ffe1 	bl	801669e <_ZNK8touchgfx4Rect7isEmptyEv>
 80166dc:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80166e0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80166e4:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80166e8:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80166ec:	b138      	cbz	r0, 80166fe <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80166ee:	8022      	strh	r2, [r4, #0]
 80166f0:	8063      	strh	r3, [r4, #2]
 80166f2:	f8a4 e004 	strh.w	lr, [r4, #4]
 80166f6:	f8a4 c006 	strh.w	ip, [r4, #6]
 80166fa:	69ad      	ldr	r5, [r5, #24]
 80166fc:	e7e5      	b.n	80166ca <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 80166fe:	f9b4 0000 	ldrsh.w	r0, [r4]
 8016702:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8016706:	4290      	cmp	r0, r2
 8016708:	4607      	mov	r7, r0
 801670a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801670e:	460e      	mov	r6, r1
 8016710:	bfa8      	it	ge
 8016712:	4617      	movge	r7, r2
 8016714:	4299      	cmp	r1, r3
 8016716:	4472      	add	r2, lr
 8016718:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 801671c:	bfa8      	it	ge
 801671e:	461e      	movge	r6, r3
 8016720:	4440      	add	r0, r8
 8016722:	4471      	add	r1, lr
 8016724:	4463      	add	r3, ip
 8016726:	b200      	sxth	r0, r0
 8016728:	8027      	strh	r7, [r4, #0]
 801672a:	b212      	sxth	r2, r2
 801672c:	8066      	strh	r6, [r4, #2]
 801672e:	b209      	sxth	r1, r1
 8016730:	b21b      	sxth	r3, r3
 8016732:	4290      	cmp	r0, r2
 8016734:	bfac      	ite	ge
 8016736:	ebc7 0200 	rsbge	r2, r7, r0
 801673a:	ebc7 0202 	rsblt	r2, r7, r2
 801673e:	4299      	cmp	r1, r3
 8016740:	bfac      	ite	ge
 8016742:	ebc6 0301 	rsbge	r3, r6, r1
 8016746:	ebc6 0303 	rsblt	r3, r6, r3
 801674a:	80a2      	strh	r2, [r4, #4]
 801674c:	80e3      	strh	r3, [r4, #6]
 801674e:	e7d4      	b.n	80166fa <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8016750:	4620      	mov	r0, r4
 8016752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016756 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8016756:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801675a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801675e:	b383      	cbz	r3, 80167c2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8016760:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016762:	b374      	cbz	r4, 80167c2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8016764:	f9b1 5000 	ldrsh.w	r5, [r1]
 8016768:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 801676c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8016770:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8016774:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8016778:	b303      	cbz	r3, 80167bc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801677a:	4668      	mov	r0, sp
 801677c:	1d21      	adds	r1, r4, #4
 801677e:	f8ad 5000 	strh.w	r5, [sp]
 8016782:	f8ad 6002 	strh.w	r6, [sp, #2]
 8016786:	f8ad 7004 	strh.w	r7, [sp, #4]
 801678a:	f8ad 8006 	strh.w	r8, [sp, #6]
 801678e:	f7ff ff43 	bl	8016618 <_ZN8touchgfx4RectaNERKS0_>
 8016792:	4668      	mov	r0, sp
 8016794:	f7ff ff83 	bl	801669e <_ZNK8touchgfx4Rect7isEmptyEv>
 8016798:	b980      	cbnz	r0, 80167bc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801679a:	f8bd 3000 	ldrh.w	r3, [sp]
 801679e:	4669      	mov	r1, sp
 80167a0:	88a2      	ldrh	r2, [r4, #4]
 80167a2:	4620      	mov	r0, r4
 80167a4:	1a9b      	subs	r3, r3, r2
 80167a6:	88e2      	ldrh	r2, [r4, #6]
 80167a8:	f8ad 3000 	strh.w	r3, [sp]
 80167ac:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80167b0:	1a9b      	subs	r3, r3, r2
 80167b2:	f8ad 3002 	strh.w	r3, [sp, #2]
 80167b6:	6823      	ldr	r3, [r4, #0]
 80167b8:	689b      	ldr	r3, [r3, #8]
 80167ba:	4798      	blx	r3
 80167bc:	69a4      	ldr	r4, [r4, #24]
 80167be:	2c00      	cmp	r4, #0
 80167c0:	d1d8      	bne.n	8016774 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80167c2:	b002      	add	sp, #8
 80167c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080167c8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80167c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80167ca:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80167ce:	460d      	mov	r5, r1
 80167d0:	4616      	mov	r6, r2
 80167d2:	b323      	cbz	r3, 801681e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80167d4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80167d6:	b314      	cbz	r4, 801681e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80167d8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80167dc:	b1eb      	cbz	r3, 801681a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80167de:	6828      	ldr	r0, [r5, #0]
 80167e0:	466b      	mov	r3, sp
 80167e2:	6869      	ldr	r1, [r5, #4]
 80167e4:	c303      	stmia	r3!, {r0, r1}
 80167e6:	4668      	mov	r0, sp
 80167e8:	1d21      	adds	r1, r4, #4
 80167ea:	f7ff ff15 	bl	8016618 <_ZN8touchgfx4RectaNERKS0_>
 80167ee:	4668      	mov	r0, sp
 80167f0:	f7ff ff55 	bl	801669e <_ZNK8touchgfx4Rect7isEmptyEv>
 80167f4:	b988      	cbnz	r0, 801681a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80167f6:	f8bd 3000 	ldrh.w	r3, [sp]
 80167fa:	4669      	mov	r1, sp
 80167fc:	88a2      	ldrh	r2, [r4, #4]
 80167fe:	4620      	mov	r0, r4
 8016800:	1a9b      	subs	r3, r3, r2
 8016802:	88e2      	ldrh	r2, [r4, #6]
 8016804:	f8ad 3000 	strh.w	r3, [sp]
 8016808:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801680c:	1a9b      	subs	r3, r3, r2
 801680e:	4632      	mov	r2, r6
 8016810:	f8ad 3002 	strh.w	r3, [sp, #2]
 8016814:	6823      	ldr	r3, [r4, #0]
 8016816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016818:	4798      	blx	r3
 801681a:	69a4      	ldr	r4, [r4, #24]
 801681c:	e7db      	b.n	80167d6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801681e:	b002      	add	sp, #8
 8016820:	bd70      	pop	{r4, r5, r6, pc}

08016822 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8016822:	6803      	ldr	r3, [r0, #0]
 8016824:	b513      	push	{r0, r1, r4, lr}
 8016826:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 801682a:	2300      	movs	r3, #0
 801682c:	e9cd 3300 	strd	r3, r3, [sp]
 8016830:	466b      	mov	r3, sp
 8016832:	47a0      	blx	r4
 8016834:	b002      	add	sp, #8
 8016836:	bd10      	pop	{r4, pc}

08016838 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8016838:	2301      	movs	r3, #1
 801683a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801683e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8016842:	4770      	bx	lr

08016844 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8016844:	2301      	movs	r3, #1
 8016846:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801684a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801684e:	4770      	bx	lr

08016850 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8016850:	6843      	ldr	r3, [r0, #4]
 8016852:	2201      	movs	r2, #1
 8016854:	725a      	strb	r2, [r3, #9]
 8016856:	6840      	ldr	r0, [r0, #4]
 8016858:	6803      	ldr	r3, [r0, #0]
 801685a:	691b      	ldr	r3, [r3, #16]
 801685c:	4718      	bx	r3

0801685e <_ZN8touchgfx3HAL8flushDMAEv>:
 801685e:	6840      	ldr	r0, [r0, #4]
 8016860:	6803      	ldr	r3, [r0, #0]
 8016862:	689b      	ldr	r3, [r3, #8]
 8016864:	4718      	bx	r3

08016866 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8016866:	b530      	push	{r4, r5, lr}
 8016868:	b08b      	sub	sp, #44	; 0x2c
 801686a:	6804      	ldr	r4, [r0, #0]
 801686c:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8016870:	9509      	str	r5, [sp, #36]	; 0x24
 8016872:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8016876:	9508      	str	r5, [sp, #32]
 8016878:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 801687c:	9507      	str	r5, [sp, #28]
 801687e:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8016882:	9506      	str	r5, [sp, #24]
 8016884:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8016888:	9505      	str	r5, [sp, #20]
 801688a:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801688e:	9504      	str	r5, [sp, #16]
 8016890:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8016894:	9503      	str	r5, [sp, #12]
 8016896:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801689a:	9502      	str	r5, [sp, #8]
 801689c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80168a0:	e9cd 3500 	strd	r3, r5, [sp]
 80168a4:	4613      	mov	r3, r2
 80168a6:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 80168a8:	2200      	movs	r2, #0
 80168aa:	47a0      	blx	r4
 80168ac:	b00b      	add	sp, #44	; 0x2c
 80168ae:	bd30      	pop	{r4, r5, pc}

080168b0 <_ZN8touchgfx3HAL10beginFrameEv>:
 80168b0:	4b04      	ldr	r3, [pc, #16]	; (80168c4 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80168b2:	781b      	ldrb	r3, [r3, #0]
 80168b4:	b123      	cbz	r3, 80168c0 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80168b6:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 80168ba:	f080 0001 	eor.w	r0, r0, #1
 80168be:	4770      	bx	lr
 80168c0:	2001      	movs	r0, #1
 80168c2:	4770      	bx	lr
 80168c4:	20014be2 	.word	0x20014be2

080168c8 <_ZN8touchgfx3HAL8endFrameEv>:
 80168c8:	b510      	push	{r4, lr}
 80168ca:	4604      	mov	r4, r0
 80168cc:	6840      	ldr	r0, [r0, #4]
 80168ce:	6803      	ldr	r3, [r0, #0]
 80168d0:	689b      	ldr	r3, [r3, #8]
 80168d2:	4798      	blx	r3
 80168d4:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 80168d8:	b113      	cbz	r3, 80168e0 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80168da:	2301      	movs	r3, #1
 80168dc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80168e0:	bd10      	pop	{r4, pc}

080168e2 <_ZN8touchgfx3HAL10initializeEv>:
 80168e2:	b510      	push	{r4, lr}
 80168e4:	4604      	mov	r4, r0
 80168e6:	f7eb f9f5 	bl	8001cd4 <_ZN8touchgfx10OSWrappers10initializeEv>
 80168ea:	6860      	ldr	r0, [r4, #4]
 80168ec:	6803      	ldr	r3, [r0, #0]
 80168ee:	68db      	ldr	r3, [r3, #12]
 80168f0:	4798      	blx	r3
 80168f2:	68e0      	ldr	r0, [r4, #12]
 80168f4:	6803      	ldr	r3, [r0, #0]
 80168f6:	689b      	ldr	r3, [r3, #8]
 80168f8:	4798      	blx	r3
 80168fa:	6823      	ldr	r3, [r4, #0]
 80168fc:	4620      	mov	r0, r4
 80168fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016904:	4718      	bx	r3

08016906 <_ZN8touchgfx3HAL9taskEntryEv>:
 8016906:	b508      	push	{r3, lr}
 8016908:	6803      	ldr	r3, [r0, #0]
 801690a:	4604      	mov	r4, r0
 801690c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801690e:	4798      	blx	r3
 8016910:	6823      	ldr	r3, [r4, #0]
 8016912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016914:	4620      	mov	r0, r4
 8016916:	4798      	blx	r3
 8016918:	f7eb fa28 	bl	8001d6c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801691c:	6823      	ldr	r3, [r4, #0]
 801691e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016920:	e7f8      	b.n	8016914 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08016924 <_ZN8touchgfx3HAL4tickEv>:
 8016924:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8016926:	6803      	ldr	r3, [r0, #0]
 8016928:	4604      	mov	r4, r0
 801692a:	4d5c      	ldr	r5, [pc, #368]	; (8016a9c <_ZN8touchgfx3HAL4tickEv+0x178>)
 801692c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8016930:	4798      	blx	r3
 8016932:	2800      	cmp	r0, #0
 8016934:	f000 8097 	beq.w	8016a66 <_ZN8touchgfx3HAL4tickEv+0x142>
 8016938:	2001      	movs	r0, #1
 801693a:	2600      	movs	r6, #0
 801693c:	f7eb f8c2 	bl	8001ac4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8016940:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8016944:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8016948:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801694c:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8016950:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8016954:	b133      	cbz	r3, 8016964 <_ZN8touchgfx3HAL4tickEv+0x40>
 8016956:	6823      	ldr	r3, [r4, #0]
 8016958:	4620      	mov	r0, r4
 801695a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801695e:	4798      	blx	r3
 8016960:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8016964:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8016968:	2601      	movs	r6, #1
 801696a:	6862      	ldr	r2, [r4, #4]
 801696c:	f083 0301 	eor.w	r3, r3, #1
 8016970:	702e      	strb	r6, [r5, #0]
 8016972:	7253      	strb	r3, [r2, #9]
 8016974:	f002 f8b2 	bl	8018adc <_ZN8touchgfx11Application11getInstanceEv>
 8016978:	6803      	ldr	r3, [r0, #0]
 801697a:	4631      	mov	r1, r6
 801697c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801697e:	4798      	blx	r3
 8016980:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8016984:	b90b      	cbnz	r3, 801698a <_ZN8touchgfx3HAL4tickEv+0x66>
 8016986:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 801698a:	f002 f8a7 	bl	8018adc <_ZN8touchgfx11Application11getInstanceEv>
 801698e:	6803      	ldr	r3, [r0, #0]
 8016990:	695b      	ldr	r3, [r3, #20]
 8016992:	4798      	blx	r3
 8016994:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016996:	6803      	ldr	r3, [r0, #0]
 8016998:	691b      	ldr	r3, [r3, #16]
 801699a:	4798      	blx	r3
 801699c:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80169a0:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 80169a4:	3b01      	subs	r3, #1
 80169a6:	b2db      	uxtb	r3, r3
 80169a8:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80169ac:	b10a      	cbz	r2, 80169b2 <_ZN8touchgfx3HAL4tickEv+0x8e>
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	d1eb      	bne.n	801698a <_ZN8touchgfx3HAL4tickEv+0x66>
 80169b2:	4a3b      	ldr	r2, [pc, #236]	; (8016aa0 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80169b4:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 80169b8:	7813      	ldrb	r3, [r2, #0]
 80169ba:	3301      	adds	r3, #1
 80169bc:	b25b      	sxtb	r3, r3
 80169be:	4299      	cmp	r1, r3
 80169c0:	7013      	strb	r3, [r2, #0]
 80169c2:	dc10      	bgt.n	80169e6 <_ZN8touchgfx3HAL4tickEv+0xc2>
 80169c4:	2300      	movs	r3, #0
 80169c6:	68e0      	ldr	r0, [r4, #12]
 80169c8:	a902      	add	r1, sp, #8
 80169ca:	7013      	strb	r3, [r2, #0]
 80169cc:	aa03      	add	r2, sp, #12
 80169ce:	6803      	ldr	r3, [r0, #0]
 80169d0:	68db      	ldr	r3, [r3, #12]
 80169d2:	4798      	blx	r3
 80169d4:	6823      	ldr	r3, [r4, #0]
 80169d6:	2800      	cmp	r0, #0
 80169d8:	d051      	beq.n	8016a7e <_ZN8touchgfx3HAL4tickEv+0x15a>
 80169da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80169de:	4620      	mov	r0, r4
 80169e0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80169e4:	4798      	blx	r3
 80169e6:	2300      	movs	r3, #0
 80169e8:	6960      	ldr	r0, [r4, #20]
 80169ea:	f88d 3007 	strb.w	r3, [sp, #7]
 80169ee:	b158      	cbz	r0, 8016a08 <_ZN8touchgfx3HAL4tickEv+0xe4>
 80169f0:	6803      	ldr	r3, [r0, #0]
 80169f2:	f10d 0107 	add.w	r1, sp, #7
 80169f6:	68db      	ldr	r3, [r3, #12]
 80169f8:	4798      	blx	r3
 80169fa:	b128      	cbz	r0, 8016a08 <_ZN8touchgfx3HAL4tickEv+0xe4>
 80169fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80169fe:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8016a02:	6803      	ldr	r3, [r0, #0]
 8016a04:	68db      	ldr	r3, [r3, #12]
 8016a06:	4798      	blx	r3
 8016a08:	f104 001c 	add.w	r0, r4, #28
 8016a0c:	f010 fbf4 	bl	80271f8 <_ZN8touchgfx8Gestures4tickEv>
 8016a10:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8016a14:	b30b      	cbz	r3, 8016a5a <_ZN8touchgfx3HAL4tickEv+0x136>
 8016a16:	6920      	ldr	r0, [r4, #16]
 8016a18:	6803      	ldr	r3, [r0, #0]
 8016a1a:	691b      	ldr	r3, [r3, #16]
 8016a1c:	4798      	blx	r3
 8016a1e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016a20:	4606      	mov	r6, r0
 8016a22:	b903      	cbnz	r3, 8016a26 <_ZN8touchgfx3HAL4tickEv+0x102>
 8016a24:	6720      	str	r0, [r4, #112]	; 0x70
 8016a26:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016a28:	4a1e      	ldr	r2, [pc, #120]	; (8016aa4 <_ZN8touchgfx3HAL4tickEv+0x180>)
 8016a2a:	1af3      	subs	r3, r6, r3
 8016a2c:	4293      	cmp	r3, r2
 8016a2e:	d914      	bls.n	8016a5a <_ZN8touchgfx3HAL4tickEv+0x136>
 8016a30:	6920      	ldr	r0, [r4, #16]
 8016a32:	6803      	ldr	r3, [r0, #0]
 8016a34:	699b      	ldr	r3, [r3, #24]
 8016a36:	4798      	blx	r3
 8016a38:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016a3a:	2264      	movs	r2, #100	; 0x64
 8016a3c:	1af3      	subs	r3, r6, r3
 8016a3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8016a42:	fbb0 f0f3 	udiv	r0, r0, r3
 8016a46:	2800      	cmp	r0, #0
 8016a48:	dc1e      	bgt.n	8016a88 <_ZN8touchgfx3HAL4tickEv+0x164>
 8016a4a:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8016a4e:	6920      	ldr	r0, [r4, #16]
 8016a50:	2100      	movs	r1, #0
 8016a52:	6803      	ldr	r3, [r0, #0]
 8016a54:	69db      	ldr	r3, [r3, #28]
 8016a56:	4798      	blx	r3
 8016a58:	6726      	str	r6, [r4, #112]	; 0x70
 8016a5a:	f002 f83f 	bl	8018adc <_ZN8touchgfx11Application11getInstanceEv>
 8016a5e:	6803      	ldr	r3, [r0, #0]
 8016a60:	2100      	movs	r1, #0
 8016a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016a64:	4798      	blx	r3
 8016a66:	6823      	ldr	r3, [r4, #0]
 8016a68:	4620      	mov	r0, r4
 8016a6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8016a6e:	4798      	blx	r3
 8016a70:	2001      	movs	r0, #1
 8016a72:	f7eb f828 	bl	8001ac6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8016a76:	2300      	movs	r3, #0
 8016a78:	702b      	strb	r3, [r5, #0]
 8016a7a:	b004      	add	sp, #16
 8016a7c:	bd70      	pop	{r4, r5, r6, pc}
 8016a7e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8016a82:	4620      	mov	r0, r4
 8016a84:	4798      	blx	r3
 8016a86:	e7ae      	b.n	80169e6 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8016a88:	2863      	cmp	r0, #99	; 0x63
 8016a8a:	bfcb      	itete	gt
 8016a8c:	2300      	movgt	r3, #0
 8016a8e:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8016a92:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8016a96:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8016a9a:	e7d8      	b.n	8016a4e <_ZN8touchgfx3HAL4tickEv+0x12a>
 8016a9c:	20014be8 	.word	0x20014be8
 8016aa0:	20014be9 	.word	0x20014be9
 8016aa4:	05f5e100 	.word	0x05f5e100

08016aa8 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8016aa8:	f7eb b944 	b.w	8001d34 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08016aac <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8016aac:	6581      	str	r1, [r0, #88]	; 0x58
 8016aae:	301c      	adds	r0, #28
 8016ab0:	f010 bba0 	b.w	80271f4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08016ab4 <_ZN8touchgfx3HAL5touchEll>:
 8016ab4:	b530      	push	{r4, r5, lr}
 8016ab6:	b087      	sub	sp, #28
 8016ab8:	4604      	mov	r4, r0
 8016aba:	a804      	add	r0, sp, #16
 8016abc:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8016ac0:	f001 fdc2 	bl	8018648 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8016ac4:	9b04      	ldr	r3, [sp, #16]
 8016ac6:	a906      	add	r1, sp, #24
 8016ac8:	a803      	add	r0, sp, #12
 8016aca:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016ace:	9b05      	ldr	r3, [sp, #20]
 8016ad0:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8016ad4:	f001 fe0a 	bl	80186ec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8016ad8:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8016adc:	f104 001c 	add.w	r0, r4, #28
 8016ae0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8016ae4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8016ae8:	b189      	cbz	r1, 8016b0e <_ZN8touchgfx3HAL5touchEll+0x5a>
 8016aea:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8016aee:	9300      	str	r3, [sp, #0]
 8016af0:	4613      	mov	r3, r2
 8016af2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8016af6:	462a      	mov	r2, r5
 8016af8:	f010 fb8c 	bl	8027214 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8016afc:	b128      	cbz	r0, 8016b0a <_ZN8touchgfx3HAL5touchEll+0x56>
 8016afe:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8016b02:	65e3      	str	r3, [r4, #92]	; 0x5c
 8016b04:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8016b08:	6623      	str	r3, [r4, #96]	; 0x60
 8016b0a:	b007      	add	sp, #28
 8016b0c:	bd30      	pop	{r4, r5, pc}
 8016b0e:	f010 fbc5 	bl	802729c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8016b12:	2301      	movs	r3, #1
 8016b14:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8016b18:	e7f1      	b.n	8016afe <_ZN8touchgfx3HAL5touchEll+0x4a>

08016b1a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8016b1a:	b510      	push	{r4, lr}
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d046      	beq.n	8016bae <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8016b20:	ea81 0002 	eor.w	r0, r1, r2
 8016b24:	07c4      	lsls	r4, r0, #31
 8016b26:	d508      	bpl.n	8016b3a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8016b28:	440b      	add	r3, r1
 8016b2a:	3a01      	subs	r2, #1
 8016b2c:	428b      	cmp	r3, r1
 8016b2e:	d93e      	bls.n	8016bae <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8016b30:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8016b34:	f801 0b01 	strb.w	r0, [r1], #1
 8016b38:	e7f8      	b.n	8016b2c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8016b3a:	07d0      	lsls	r0, r2, #31
 8016b3c:	bf42      	ittt	mi
 8016b3e:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8016b42:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8016b46:	f801 0b01 	strbmi.w	r0, [r1], #1
 8016b4a:	2b01      	cmp	r3, #1
 8016b4c:	d911      	bls.n	8016b72 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8016b4e:	ea81 0402 	eor.w	r4, r1, r2
 8016b52:	4610      	mov	r0, r2
 8016b54:	07a4      	lsls	r4, r4, #30
 8016b56:	d022      	beq.n	8016b9e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8016b58:	f023 0401 	bic.w	r4, r3, #1
 8016b5c:	440c      	add	r4, r1
 8016b5e:	428c      	cmp	r4, r1
 8016b60:	4602      	mov	r2, r0
 8016b62:	d904      	bls.n	8016b6e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8016b64:	8812      	ldrh	r2, [r2, #0]
 8016b66:	3002      	adds	r0, #2
 8016b68:	f821 2b02 	strh.w	r2, [r1], #2
 8016b6c:	e7f7      	b.n	8016b5e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8016b6e:	f003 0301 	and.w	r3, r3, #1
 8016b72:	f023 0003 	bic.w	r0, r3, #3
 8016b76:	4408      	add	r0, r1
 8016b78:	4288      	cmp	r0, r1
 8016b7a:	4614      	mov	r4, r2
 8016b7c:	d904      	bls.n	8016b88 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8016b7e:	6824      	ldr	r4, [r4, #0]
 8016b80:	3204      	adds	r2, #4
 8016b82:	f841 4b04 	str.w	r4, [r1], #4
 8016b86:	e7f7      	b.n	8016b78 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8016b88:	f003 0303 	and.w	r3, r3, #3
 8016b8c:	3a01      	subs	r2, #1
 8016b8e:	440b      	add	r3, r1
 8016b90:	428b      	cmp	r3, r1
 8016b92:	d90c      	bls.n	8016bae <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8016b94:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8016b98:	f801 0b01 	strb.w	r0, [r1], #1
 8016b9c:	e7f8      	b.n	8016b90 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8016b9e:	0790      	lsls	r0, r2, #30
 8016ba0:	d0e7      	beq.n	8016b72 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8016ba2:	f832 0b02 	ldrh.w	r0, [r2], #2
 8016ba6:	3b02      	subs	r3, #2
 8016ba8:	f821 0b02 	strh.w	r0, [r1], #2
 8016bac:	e7e1      	b.n	8016b72 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8016bae:	2001      	movs	r0, #1
 8016bb0:	bd10      	pop	{r4, pc}

08016bb2 <_ZN8touchgfx3HAL7noTouchEv>:
 8016bb2:	b510      	push	{r4, lr}
 8016bb4:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8016bb8:	4604      	mov	r4, r0
 8016bba:	b153      	cbz	r3, 8016bd2 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8016bbc:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8016bc0:	2101      	movs	r1, #1
 8016bc2:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8016bc6:	301c      	adds	r0, #28
 8016bc8:	f010 fb68 	bl	802729c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8016bcc:	2300      	movs	r3, #0
 8016bce:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8016bd2:	bd10      	pop	{r4, pc}

08016bd4 <_ZN8touchgfx3HAL3lcdEv>:
 8016bd4:	4b04      	ldr	r3, [pc, #16]	; (8016be8 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8016bd6:	681b      	ldr	r3, [r3, #0]
 8016bd8:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8016bdc:	b10a      	cbz	r2, 8016be2 <_ZN8touchgfx3HAL3lcdEv+0xe>
 8016bde:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8016be0:	b900      	cbnz	r0, 8016be4 <_ZN8touchgfx3HAL3lcdEv+0x10>
 8016be2:	6898      	ldr	r0, [r3, #8]
 8016be4:	4770      	bx	lr
 8016be6:	bf00      	nop
 8016be8:	20014be4 	.word	0x20014be4

08016bec <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8016bec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016bf0:	4604      	mov	r4, r0
 8016bf2:	6980      	ldr	r0, [r0, #24]
 8016bf4:	b085      	sub	sp, #20
 8016bf6:	460f      	mov	r7, r1
 8016bf8:	4690      	mov	r8, r2
 8016bfa:	4699      	mov	r9, r3
 8016bfc:	b930      	cbnz	r0, 8016c0c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8016bfe:	4b1c      	ldr	r3, [pc, #112]	; (8016c70 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 8016c00:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8016c04:	4a1b      	ldr	r2, [pc, #108]	; (8016c74 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8016c06:	481c      	ldr	r0, [pc, #112]	; (8016c78 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 8016c08:	f010 fbfc 	bl	8027404 <__assert_func>
 8016c0c:	ad04      	add	r5, sp, #16
 8016c0e:	2600      	movs	r6, #0
 8016c10:	f845 6d04 	str.w	r6, [r5, #-4]!
 8016c14:	6806      	ldr	r6, [r0, #0]
 8016c16:	9501      	str	r5, [sp, #4]
 8016c18:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8016c1c:	9500      	str	r5, [sp, #0]
 8016c1e:	6835      	ldr	r5, [r6, #0]
 8016c20:	47a8      	blx	r5
 8016c22:	4d16      	ldr	r5, [pc, #88]	; (8016c7c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8016c24:	4606      	mov	r6, r0
 8016c26:	f8a5 9000 	strh.w	r9, [r5]
 8016c2a:	f7ff ffd3 	bl	8016bd4 <_ZN8touchgfx3HAL3lcdEv>
 8016c2e:	6803      	ldr	r3, [r0, #0]
 8016c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c32:	4798      	blx	r3
 8016c34:	2801      	cmp	r0, #1
 8016c36:	d012      	beq.n	8016c5e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 8016c38:	d306      	bcc.n	8016c48 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 8016c3a:	280d      	cmp	r0, #13
 8016c3c:	d80b      	bhi.n	8016c56 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8016c3e:	4b10      	ldr	r3, [pc, #64]	; (8016c80 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8016c40:	f240 1167 	movw	r1, #359	; 0x167
 8016c44:	4a0b      	ldr	r2, [pc, #44]	; (8016c74 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8016c46:	e7de      	b.n	8016c06 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8016c48:	882b      	ldrh	r3, [r5, #0]
 8016c4a:	fb08 7203 	mla	r2, r8, r3, r7
 8016c4e:	9b03      	ldr	r3, [sp, #12]
 8016c50:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8016c54:	63e3      	str	r3, [r4, #60]	; 0x3c
 8016c56:	4630      	mov	r0, r6
 8016c58:	b005      	add	sp, #20
 8016c5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016c5e:	882a      	ldrh	r2, [r5, #0]
 8016c60:	9b03      	ldr	r3, [sp, #12]
 8016c62:	fb08 7202 	mla	r2, r8, r2, r7
 8016c66:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016c6a:	1a9a      	subs	r2, r3, r2
 8016c6c:	63e2      	str	r2, [r4, #60]	; 0x3c
 8016c6e:	e7f2      	b.n	8016c56 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8016c70:	0802cda8 	.word	0x0802cda8
 8016c74:	0802d066 	.word	0x0802d066
 8016c78:	0802cded 	.word	0x0802cded
 8016c7c:	20014bde 	.word	0x20014bde
 8016c80:	0802ce13 	.word	0x0802ce13

08016c84 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8016c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016c86:	b08b      	sub	sp, #44	; 0x2c
 8016c88:	4617      	mov	r7, r2
 8016c8a:	4604      	mov	r4, r0
 8016c8c:	460e      	mov	r6, r1
 8016c8e:	461d      	mov	r5, r3
 8016c90:	f7ff ffa0 	bl	8016bd4 <_ZN8touchgfx3HAL3lcdEv>
 8016c94:	6803      	ldr	r3, [r0, #0]
 8016c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c98:	4798      	blx	r3
 8016c9a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8016c9e:	9007      	str	r0, [sp, #28]
 8016ca0:	4631      	mov	r1, r6
 8016ca2:	6822      	ldr	r2, [r4, #0]
 8016ca4:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8016ca8:	4b0c      	ldr	r3, [pc, #48]	; (8016cdc <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8016caa:	4620      	mov	r0, r4
 8016cac:	881b      	ldrh	r3, [r3, #0]
 8016cae:	9306      	str	r3, [sp, #24]
 8016cb0:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8016cb4:	9305      	str	r3, [sp, #20]
 8016cb6:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8016cba:	9304      	str	r3, [sp, #16]
 8016cbc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016cc0:	9303      	str	r3, [sp, #12]
 8016cc2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8016cc6:	9302      	str	r3, [sp, #8]
 8016cc8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016ccc:	e9cd 5300 	strd	r5, r3, [sp]
 8016cd0:	463b      	mov	r3, r7
 8016cd2:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8016cd4:	2200      	movs	r2, #0
 8016cd6:	47a8      	blx	r5
 8016cd8:	b00b      	add	sp, #44	; 0x2c
 8016cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016cdc:	20014bde 	.word	0x20014bde

08016ce0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8016ce0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016ce4:	4698      	mov	r8, r3
 8016ce6:	6803      	ldr	r3, [r0, #0]
 8016ce8:	b08b      	sub	sp, #44	; 0x2c
 8016cea:	4617      	mov	r7, r2
 8016cec:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8016cee:	460e      	mov	r6, r1
 8016cf0:	4b13      	ldr	r3, [pc, #76]	; (8016d40 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8016cf2:	4604      	mov	r4, r0
 8016cf4:	f8b3 9000 	ldrh.w	r9, [r3]
 8016cf8:	f7ff ff6c 	bl	8016bd4 <_ZN8touchgfx3HAL3lcdEv>
 8016cfc:	6803      	ldr	r3, [r0, #0]
 8016cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d00:	4798      	blx	r3
 8016d02:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8016d06:	2200      	movs	r2, #0
 8016d08:	4631      	mov	r1, r6
 8016d0a:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8016d0e:	2302      	movs	r3, #2
 8016d10:	4620      	mov	r0, r4
 8016d12:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8016d16:	2301      	movs	r3, #1
 8016d18:	9305      	str	r3, [sp, #20]
 8016d1a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8016d1e:	9304      	str	r3, [sp, #16]
 8016d20:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8016d24:	9303      	str	r3, [sp, #12]
 8016d26:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8016d2a:	9302      	str	r3, [sp, #8]
 8016d2c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016d30:	e9cd 8300 	strd	r8, r3, [sp]
 8016d34:	463b      	mov	r3, r7
 8016d36:	47a8      	blx	r5
 8016d38:	b00b      	add	sp, #44	; 0x2c
 8016d3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016d3e:	bf00      	nop
 8016d40:	20014bde 	.word	0x20014bde

08016d44 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8016d44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016d48:	4698      	mov	r8, r3
 8016d4a:	6803      	ldr	r3, [r0, #0]
 8016d4c:	b087      	sub	sp, #28
 8016d4e:	460e      	mov	r6, r1
 8016d50:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8016d52:	4617      	mov	r7, r2
 8016d54:	4b0f      	ldr	r3, [pc, #60]	; (8016d94 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8016d56:	4604      	mov	r4, r0
 8016d58:	f8b3 9000 	ldrh.w	r9, [r3]
 8016d5c:	f7ff ff3a 	bl	8016bd4 <_ZN8touchgfx3HAL3lcdEv>
 8016d60:	6803      	ldr	r3, [r0, #0]
 8016d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d64:	4798      	blx	r3
 8016d66:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8016d6a:	463a      	mov	r2, r7
 8016d6c:	4631      	mov	r1, r6
 8016d6e:	f8cd 900c 	str.w	r9, [sp, #12]
 8016d72:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8016d76:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8016d7a:	4620      	mov	r0, r4
 8016d7c:	9302      	str	r3, [sp, #8]
 8016d7e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8016d82:	9301      	str	r3, [sp, #4]
 8016d84:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8016d88:	9300      	str	r3, [sp, #0]
 8016d8a:	4643      	mov	r3, r8
 8016d8c:	47a8      	blx	r5
 8016d8e:	b007      	add	sp, #28
 8016d90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016d94:	20014bde 	.word	0x20014bde

08016d98 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8016d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d9c:	4604      	mov	r4, r0
 8016d9e:	b08f      	sub	sp, #60	; 0x3c
 8016da0:	4610      	mov	r0, r2
 8016da2:	460d      	mov	r5, r1
 8016da4:	4691      	mov	r9, r2
 8016da6:	461e      	mov	r6, r3
 8016da8:	f004 f9d8 	bl	801b15c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8016dac:	2800      	cmp	r0, #0
 8016dae:	f000 809c 	beq.w	8016eea <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x152>
 8016db2:	6823      	ldr	r3, [r4, #0]
 8016db4:	4620      	mov	r0, r4
 8016db6:	f8df b194 	ldr.w	fp, [pc, #404]	; 8016f4c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 8016dba:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8016dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016dc0:	4798      	blx	r3
 8016dc2:	6823      	ldr	r3, [r4, #0]
 8016dc4:	4620      	mov	r0, r4
 8016dc6:	f8df a188 	ldr.w	sl, [pc, #392]	; 8016f50 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8016dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016dcc:	4798      	blx	r3
 8016dce:	f8bb 3000 	ldrh.w	r3, [fp]
 8016dd2:	4f5b      	ldr	r7, [pc, #364]	; (8016f40 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8016dd4:	9301      	str	r3, [sp, #4]
 8016dd6:	f8ba 3000 	ldrh.w	r3, [sl]
 8016dda:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8016dde:	4640      	mov	r0, r8
 8016de0:	9302      	str	r3, [sp, #8]
 8016de2:	883b      	ldrh	r3, [r7, #0]
 8016de4:	9303      	str	r3, [sp, #12]
 8016de6:	4b57      	ldr	r3, [pc, #348]	; (8016f44 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8016de8:	881a      	ldrh	r2, [r3, #0]
 8016dea:	9305      	str	r3, [sp, #20]
 8016dec:	9204      	str	r2, [sp, #16]
 8016dee:	f004 fa6f 	bl	801b2d0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016df2:	8038      	strh	r0, [r7, #0]
 8016df4:	4640      	mov	r0, r8
 8016df6:	f004 faa5 	bl	801b344 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016dfa:	9b05      	ldr	r3, [sp, #20]
 8016dfc:	8018      	strh	r0, [r3, #0]
 8016dfe:	4b52      	ldr	r3, [pc, #328]	; (8016f48 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8016e00:	781b      	ldrb	r3, [r3, #0]
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	d174      	bne.n	8016ef0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 8016e06:	883b      	ldrh	r3, [r7, #0]
 8016e08:	f8aa 0000 	strh.w	r0, [sl]
 8016e0c:	f8ab 3000 	strh.w	r3, [fp]
 8016e10:	4648      	mov	r0, r9
 8016e12:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8016e16:	f004 f9a1 	bl	801b15c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8016e1a:	2200      	movs	r2, #0
 8016e1c:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8016e20:	4611      	mov	r1, r2
 8016e22:	4628      	mov	r0, r5
 8016e24:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8016e28:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8016e2c:	f7ec fba1 	bl	8003572 <_ZN8touchgfx8Drawable5setXYEss>
 8016e30:	2301      	movs	r3, #1
 8016e32:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8016e36:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8016e3a:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	dd5c      	ble.n	8016efc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 8016e42:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	dd58      	ble.n	8016efc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 8016e4a:	462a      	mov	r2, r5
 8016e4c:	ab0a      	add	r3, sp, #40	; 0x28
 8016e4e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8016e52:	6851      	ldr	r1, [r2, #4]
 8016e54:	c303      	stmia	r3!, {r0, r1}
 8016e56:	4631      	mov	r1, r6
 8016e58:	a80a      	add	r0, sp, #40	; 0x28
 8016e5a:	f7ff fbdd 	bl	8016618 <_ZN8touchgfx4RectaNERKS0_>
 8016e5e:	4b38      	ldr	r3, [pc, #224]	; (8016f40 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8016e60:	2100      	movs	r1, #0
 8016e62:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016e66:	4b37      	ldr	r3, [pc, #220]	; (8016f44 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8016e68:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8016e6c:	aa0a      	add	r2, sp, #40	; 0x28
 8016e6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e72:	910c      	str	r1, [sp, #48]	; 0x30
 8016e74:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8016e78:	ab08      	add	r3, sp, #32
 8016e7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016e7e:	e883 0003 	stmia.w	r3, {r0, r1}
 8016e82:	4618      	mov	r0, r3
 8016e84:	a90c      	add	r1, sp, #48	; 0x30
 8016e86:	f7ff fbc7 	bl	8016618 <_ZN8touchgfx4RectaNERKS0_>
 8016e8a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d13c      	bne.n	8016f0a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x172>
 8016e90:	2000      	movs	r0, #0
 8016e92:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8016e96:	2600      	movs	r6, #0
 8016e98:	696b      	ldr	r3, [r5, #20]
 8016e9a:	a908      	add	r1, sp, #32
 8016e9c:	682a      	ldr	r2, [r5, #0]
 8016e9e:	4628      	mov	r0, r5
 8016ea0:	9305      	str	r3, [sp, #20]
 8016ea2:	616e      	str	r6, [r5, #20]
 8016ea4:	6892      	ldr	r2, [r2, #8]
 8016ea6:	4790      	blx	r2
 8016ea8:	9b05      	ldr	r3, [sp, #20]
 8016eaa:	4652      	mov	r2, sl
 8016eac:	4649      	mov	r1, r9
 8016eae:	616b      	str	r3, [r5, #20]
 8016eb0:	4628      	mov	r0, r5
 8016eb2:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8016eb6:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8016eba:	f7ec fb5a 	bl	8003572 <_ZN8touchgfx8Drawable5setXYEss>
 8016ebe:	9a01      	ldr	r2, [sp, #4]
 8016ec0:	4b22      	ldr	r3, [pc, #136]	; (8016f4c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8016ec2:	4620      	mov	r0, r4
 8016ec4:	801a      	strh	r2, [r3, #0]
 8016ec6:	9a02      	ldr	r2, [sp, #8]
 8016ec8:	4b21      	ldr	r3, [pc, #132]	; (8016f50 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8016eca:	801a      	strh	r2, [r3, #0]
 8016ecc:	9a03      	ldr	r2, [sp, #12]
 8016ece:	4b1c      	ldr	r3, [pc, #112]	; (8016f40 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8016ed0:	801a      	strh	r2, [r3, #0]
 8016ed2:	4b1c      	ldr	r3, [pc, #112]	; (8016f44 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8016ed4:	9a04      	ldr	r2, [sp, #16]
 8016ed6:	801a      	strh	r2, [r3, #0]
 8016ed8:	6823      	ldr	r3, [r4, #0]
 8016eda:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8016ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016ee0:	4798      	blx	r3
 8016ee2:	6823      	ldr	r3, [r4, #0]
 8016ee4:	4620      	mov	r0, r4
 8016ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ee8:	4798      	blx	r3
 8016eea:	b00f      	add	sp, #60	; 0x3c
 8016eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ef0:	883b      	ldrh	r3, [r7, #0]
 8016ef2:	f8ab 0000 	strh.w	r0, [fp]
 8016ef6:	f8aa 3000 	strh.w	r3, [sl]
 8016efa:	e789      	b.n	8016e10 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x78>
 8016efc:	462a      	mov	r2, r5
 8016efe:	ab0a      	add	r3, sp, #40	; 0x28
 8016f00:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8016f04:	6851      	ldr	r1, [r2, #4]
 8016f06:	c303      	stmia	r3!, {r0, r1}
 8016f08:	e7a9      	b.n	8016e5e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc6>
 8016f0a:	a807      	add	r0, sp, #28
 8016f0c:	f004 fb72 	bl	801b5f4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016f10:	4606      	mov	r6, r0
 8016f12:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8016f14:	6803      	ldr	r3, [r0, #0]
 8016f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f18:	4798      	blx	r3
 8016f1a:	4286      	cmp	r6, r0
 8016f1c:	d1b8      	bne.n	8016e90 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xf8>
 8016f1e:	f7ff fe59 	bl	8016bd4 <_ZN8touchgfx3HAL3lcdEv>
 8016f22:	6803      	ldr	r3, [r0, #0]
 8016f24:	4606      	mov	r6, r0
 8016f26:	a807      	add	r0, sp, #28
 8016f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f2a:	9305      	str	r3, [sp, #20]
 8016f2c:	f004 fb62 	bl	801b5f4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016f30:	9b05      	ldr	r3, [sp, #20]
 8016f32:	4601      	mov	r1, r0
 8016f34:	4630      	mov	r0, r6
 8016f36:	4798      	blx	r3
 8016f38:	f080 0001 	eor.w	r0, r0, #1
 8016f3c:	b2c0      	uxtb	r0, r0
 8016f3e:	e7a8      	b.n	8016e92 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8016f40:	20014bd8 	.word	0x20014bd8
 8016f44:	20014bda 	.word	0x20014bda
 8016f48:	20014bdc 	.word	0x20014bdc
 8016f4c:	20014bde 	.word	0x20014bde
 8016f50:	20014be0 	.word	0x20014be0

08016f54 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8016f54:	4b07      	ldr	r3, [pc, #28]	; (8016f74 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8016f56:	b510      	push	{r4, lr}
 8016f58:	781b      	ldrb	r3, [r3, #0]
 8016f5a:	4604      	mov	r4, r0
 8016f5c:	b13b      	cbz	r3, 8016f6e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8016f5e:	6803      	ldr	r3, [r0, #0]
 8016f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016f62:	4798      	blx	r3
 8016f64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016f66:	4283      	cmp	r3, r0
 8016f68:	d101      	bne.n	8016f6e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8016f6a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8016f6c:	bd10      	pop	{r4, pc}
 8016f6e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8016f70:	e7fc      	b.n	8016f6c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8016f72:	bf00      	nop
 8016f74:	20014be2 	.word	0x20014be2

08016f78 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8016f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f7c:	b088      	sub	sp, #32
 8016f7e:	4692      	mov	sl, r2
 8016f80:	461d      	mov	r5, r3
 8016f82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016f86:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 8016f8a:	2400      	movs	r4, #0
 8016f8c:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 8016f90:	4606      	mov	r6, r0
 8016f92:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 8016f96:	fb09 a505 	mla	r5, r9, r5, sl
 8016f9a:	9403      	str	r4, [sp, #12]
 8016f9c:	f8ad 8014 	strh.w	r8, [sp, #20]
 8016fa0:	f8ad 7016 	strh.w	r7, [sp, #22]
 8016fa4:	f88d 401c 	strb.w	r4, [sp, #28]
 8016fa8:	e9cd 3100 	strd	r3, r1, [sp]
 8016fac:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016fb0:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016fb4:	f7ff ffce 	bl	8016f54 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016fb8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8016fbc:	f8ad 901a 	strh.w	r9, [sp, #26]
 8016fc0:	f88d 401e 	strb.w	r4, [sp, #30]
 8016fc4:	9504      	str	r5, [sp, #16]
 8016fc6:	f88d 401d 	strb.w	r4, [sp, #29]
 8016fca:	f88d 401f 	strb.w	r4, [sp, #31]
 8016fce:	f1b8 0f00 	cmp.w	r8, #0
 8016fd2:	d000      	beq.n	8016fd6 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x5e>
 8016fd4:	b937      	cbnz	r7, 8016fe4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x6c>
 8016fd6:	4b0d      	ldr	r3, [pc, #52]	; (801700c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 8016fd8:	f240 210b 	movw	r1, #523	; 0x20b
 8016fdc:	4a0c      	ldr	r2, [pc, #48]	; (8017010 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 8016fde:	480d      	ldr	r0, [pc, #52]	; (8017014 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 8016fe0:	f010 fa10 	bl	8027404 <__assert_func>
 8016fe4:	6833      	ldr	r3, [r6, #0]
 8016fe6:	4630      	mov	r0, r6
 8016fe8:	9c00      	ldr	r4, [sp, #0]
 8016fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016fec:	4798      	blx	r3
 8016fee:	4220      	tst	r0, r4
 8016ff0:	d104      	bne.n	8016ffc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x84>
 8016ff2:	4b09      	ldr	r3, [pc, #36]	; (8017018 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa0>)
 8016ff4:	f44f 7103 	mov.w	r1, #524	; 0x20c
 8016ff8:	4a05      	ldr	r2, [pc, #20]	; (8017010 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 8016ffa:	e7f0      	b.n	8016fde <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x66>
 8016ffc:	6870      	ldr	r0, [r6, #4]
 8016ffe:	4669      	mov	r1, sp
 8017000:	6803      	ldr	r3, [r0, #0]
 8017002:	685b      	ldr	r3, [r3, #4]
 8017004:	4798      	blx	r3
 8017006:	b008      	add	sp, #32
 8017008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801700c:	0802cc3b 	.word	0x0802cc3b
 8017010:	0802ce9b 	.word	0x0802ce9b
 8017014:	0802cded 	.word	0x0802cded
 8017018:	0802cc73 	.word	0x0802cc73

0801701c <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 801701c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017020:	b089      	sub	sp, #36	; 0x24
 8017022:	4693      	mov	fp, r2
 8017024:	461d      	mov	r5, r3
 8017026:	2400      	movs	r4, #0
 8017028:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
 801702c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017030:	468a      	mov	sl, r1
 8017032:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 8017036:	fb09 b505 	mla	r5, r9, r5, fp
 801703a:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 801703e:	4606      	mov	r6, r0
 8017040:	9403      	str	r4, [sp, #12]
 8017042:	e9cd 3400 	strd	r3, r4, [sp]
 8017046:	f7ff ff85 	bl	8016f54 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801704a:	f8ad 8014 	strh.w	r8, [sp, #20]
 801704e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8017052:	f8ad 7016 	strh.w	r7, [sp, #22]
 8017056:	f8ad 4018 	strh.w	r4, [sp, #24]
 801705a:	9504      	str	r5, [sp, #16]
 801705c:	f8ad 901a 	strh.w	r9, [sp, #26]
 8017060:	f8cd a00c 	str.w	sl, [sp, #12]
 8017064:	f8ad 401c 	strh.w	r4, [sp, #28]
 8017068:	f88d 401e 	strb.w	r4, [sp, #30]
 801706c:	f88d 401f 	strb.w	r4, [sp, #31]
 8017070:	f1b8 0f00 	cmp.w	r8, #0
 8017074:	d000      	beq.n	8017078 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x5c>
 8017076:	b937      	cbnz	r7, 8017086 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x6a>
 8017078:	4b0d      	ldr	r3, [pc, #52]	; (80170b0 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 801707a:	f240 2121 	movw	r1, #545	; 0x221
 801707e:	4a0d      	ldr	r2, [pc, #52]	; (80170b4 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8017080:	480d      	ldr	r0, [pc, #52]	; (80170b8 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 8017082:	f010 f9bf 	bl	8027404 <__assert_func>
 8017086:	6833      	ldr	r3, [r6, #0]
 8017088:	4630      	mov	r0, r6
 801708a:	9c00      	ldr	r4, [sp, #0]
 801708c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801708e:	4798      	blx	r3
 8017090:	4220      	tst	r0, r4
 8017092:	d104      	bne.n	801709e <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x82>
 8017094:	4b09      	ldr	r3, [pc, #36]	; (80170bc <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa0>)
 8017096:	f240 2122 	movw	r1, #546	; 0x222
 801709a:	4a06      	ldr	r2, [pc, #24]	; (80170b4 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 801709c:	e7f0      	b.n	8017080 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x64>
 801709e:	6870      	ldr	r0, [r6, #4]
 80170a0:	4669      	mov	r1, sp
 80170a2:	6803      	ldr	r3, [r0, #0]
 80170a4:	685b      	ldr	r3, [r3, #4]
 80170a6:	4798      	blx	r3
 80170a8:	b009      	add	sp, #36	; 0x24
 80170aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170ae:	bf00      	nop
 80170b0:	0802ccb8 	.word	0x0802ccb8
 80170b4:	0802cf11 	.word	0x0802cf11
 80170b8:	0802cded 	.word	0x0802cded
 80170bc:	0802ccf0 	.word	0x0802ccf0

080170c0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 80170c0:	b508      	push	{r3, lr}
 80170c2:	290d      	cmp	r1, #13
 80170c4:	d817      	bhi.n	80170f6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 80170c6:	e8df f001 	tbb	[pc, r1]
 80170ca:	090b      	.short	0x090b
 80170cc:	0d0d0d07 	.word	0x0d0d0d07
 80170d0:	1414140d 	.word	0x1414140d
 80170d4:	0d0d1414 	.word	0x0d0d1414
 80170d8:	2020      	movs	r0, #32
 80170da:	bd08      	pop	{r3, pc}
 80170dc:	2018      	movs	r0, #24
 80170de:	e7fc      	b.n	80170da <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80170e0:	2010      	movs	r0, #16
 80170e2:	e7fa      	b.n	80170da <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80170e4:	4b05      	ldr	r3, [pc, #20]	; (80170fc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 80170e6:	f240 2182 	movw	r1, #642	; 0x282
 80170ea:	4a05      	ldr	r2, [pc, #20]	; (8017100 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 80170ec:	4805      	ldr	r0, [pc, #20]	; (8017104 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 80170ee:	f010 f989 	bl	8027404 <__assert_func>
 80170f2:	2008      	movs	r0, #8
 80170f4:	e7f1      	b.n	80170da <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80170f6:	2000      	movs	r0, #0
 80170f8:	e7ef      	b.n	80170da <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80170fa:	bf00      	nop
 80170fc:	0802ce69 	.word	0x0802ce69
 8017100:	0802d23c 	.word	0x0802d23c
 8017104:	0802cded 	.word	0x0802cded

08017108 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8017108:	b570      	push	{r4, r5, r6, lr}
 801710a:	460d      	mov	r5, r1
 801710c:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8017110:	4616      	mov	r6, r2
 8017112:	461c      	mov	r4, r3
 8017114:	f7ff ffd4 	bl	80170c0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8017118:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 801711c:	10c0      	asrs	r0, r0, #3
 801711e:	fb06 5101 	mla	r1, r6, r1, r5
 8017122:	fb00 4001 	mla	r0, r0, r1, r4
 8017126:	bd70      	pop	{r4, r5, r6, pc}

08017128 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8017128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801712c:	b08a      	sub	sp, #40	; 0x28
 801712e:	f04f 0c00 	mov.w	ip, #0
 8017132:	4604      	mov	r4, r0
 8017134:	469a      	mov	sl, r3
 8017136:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 801713a:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 801713e:	2d0b      	cmp	r5, #11
 8017140:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8017144:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8017148:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 801714c:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8017150:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 8017154:	f8cd c014 	str.w	ip, [sp, #20]
 8017158:	d12d      	bne.n	80171b6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x8e>
 801715a:	2080      	movs	r0, #128	; 0x80
 801715c:	9204      	str	r2, [sp, #16]
 801715e:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8017162:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8017166:	f8ad 2020 	strh.w	r2, [sp, #32]
 801716a:	f8ad 701c 	strh.w	r7, [sp, #28]
 801716e:	f8ad 601e 	strh.w	r6, [sp, #30]
 8017172:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017176:	4620      	mov	r0, r4
 8017178:	f7ff feec 	bl	8016f54 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801717c:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8017180:	4603      	mov	r3, r0
 8017182:	4651      	mov	r1, sl
 8017184:	4620      	mov	r0, r4
 8017186:	e9cd 9800 	strd	r9, r8, [sp]
 801718a:	f7ff ffbd 	bl	8017108 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801718e:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8017192:	9006      	str	r0, [sp, #24]
 8017194:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
 8017198:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 801719c:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 80171a0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 80171a4:	b107      	cbz	r7, 80171a8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x80>
 80171a6:	b9d6      	cbnz	r6, 80171de <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb6>
 80171a8:	4b17      	ldr	r3, [pc, #92]	; (8017208 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe0>)
 80171aa:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 80171ae:	4a17      	ldr	r2, [pc, #92]	; (801720c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 80171b0:	4817      	ldr	r0, [pc, #92]	; (8017210 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 80171b2:	f010 f927 	bl	8027404 <__assert_func>
 80171b6:	2d02      	cmp	r5, #2
 80171b8:	d108      	bne.n	80171cc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa4>
 80171ba:	2bff      	cmp	r3, #255	; 0xff
 80171bc:	d104      	bne.n	80171c8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa0>
 80171be:	2800      	cmp	r0, #0
 80171c0:	bf14      	ite	ne
 80171c2:	2040      	movne	r0, #64	; 0x40
 80171c4:	2020      	moveq	r0, #32
 80171c6:	e7c9      	b.n	801715c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 80171c8:	2040      	movs	r0, #64	; 0x40
 80171ca:	e7c7      	b.n	801715c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 80171cc:	2bff      	cmp	r3, #255	; 0xff
 80171ce:	d104      	bne.n	80171da <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb2>
 80171d0:	2800      	cmp	r0, #0
 80171d2:	bf14      	ite	ne
 80171d4:	2004      	movne	r0, #4
 80171d6:	2001      	moveq	r0, #1
 80171d8:	e7c0      	b.n	801715c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 80171da:	2004      	movs	r0, #4
 80171dc:	e7be      	b.n	801715c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 80171de:	6823      	ldr	r3, [r4, #0]
 80171e0:	4620      	mov	r0, r4
 80171e2:	9d02      	ldr	r5, [sp, #8]
 80171e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80171e6:	4798      	blx	r3
 80171e8:	4228      	tst	r0, r5
 80171ea:	d104      	bne.n	80171f6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xce>
 80171ec:	4b09      	ldr	r3, [pc, #36]	; (8017214 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xec>)
 80171ee:	f240 11d5 	movw	r1, #469	; 0x1d5
 80171f2:	4a06      	ldr	r2, [pc, #24]	; (801720c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 80171f4:	e7dc      	b.n	80171b0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x88>
 80171f6:	6860      	ldr	r0, [r4, #4]
 80171f8:	a902      	add	r1, sp, #8
 80171fa:	6803      	ldr	r3, [r0, #0]
 80171fc:	685b      	ldr	r3, [r3, #4]
 80171fe:	4798      	blx	r3
 8017200:	b00a      	add	sp, #40	; 0x28
 8017202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017206:	bf00      	nop
 8017208:	0802cc3b 	.word	0x0802cc3b
 801720c:	0802d0ca 	.word	0x0802d0ca
 8017210:	0802cded 	.word	0x0802cded
 8017214:	0802cc73 	.word	0x0802cc73

08017218 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8017218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801721c:	b08b      	sub	sp, #44	; 0x2c
 801721e:	469b      	mov	fp, r3
 8017220:	4604      	mov	r4, r0
 8017222:	4692      	mov	sl, r2
 8017224:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8017228:	2600      	movs	r6, #0
 801722a:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 801722e:	4689      	mov	r9, r1
 8017230:	2fff      	cmp	r7, #255	; 0xff
 8017232:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8017236:	9605      	str	r6, [sp, #20]
 8017238:	bf14      	ite	ne
 801723a:	2308      	movne	r3, #8
 801723c:	2302      	moveq	r3, #2
 801723e:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8017242:	f7ff fe87 	bl	8016f54 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017246:	465a      	mov	r2, fp
 8017248:	4603      	mov	r3, r0
 801724a:	4651      	mov	r1, sl
 801724c:	4620      	mov	r0, r4
 801724e:	e9cd 8500 	strd	r8, r5, [sp]
 8017252:	f7ff ff59 	bl	8017108 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8017256:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801725a:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 801725e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017262:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8017266:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 801726a:	f8ad 301e 	strh.w	r3, [sp, #30]
 801726e:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8017272:	9d02      	ldr	r5, [sp, #8]
 8017274:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 8017278:	6823      	ldr	r3, [r4, #0]
 801727a:	9006      	str	r0, [sp, #24]
 801727c:	4620      	mov	r0, r4
 801727e:	f8ad 6020 	strh.w	r6, [sp, #32]
 8017282:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 8017286:	f8cd 9014 	str.w	r9, [sp, #20]
 801728a:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 801728e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017290:	4798      	blx	r3
 8017292:	4228      	tst	r0, r5
 8017294:	d106      	bne.n	80172a4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>
 8017296:	4b07      	ldr	r3, [pc, #28]	; (80172b4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x9c>)
 8017298:	f240 2137 	movw	r1, #567	; 0x237
 801729c:	4a06      	ldr	r2, [pc, #24]	; (80172b8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa0>)
 801729e:	4807      	ldr	r0, [pc, #28]	; (80172bc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa4>)
 80172a0:	f010 f8b0 	bl	8027404 <__assert_func>
 80172a4:	6860      	ldr	r0, [r4, #4]
 80172a6:	a902      	add	r1, sp, #8
 80172a8:	6803      	ldr	r3, [r0, #0]
 80172aa:	685b      	ldr	r3, [r3, #4]
 80172ac:	4798      	blx	r3
 80172ae:	b00b      	add	sp, #44	; 0x2c
 80172b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172b4:	0802cc73 	.word	0x0802cc73
 80172b8:	0802d1a1 	.word	0x0802d1a1
 80172bc:	0802cded 	.word	0x0802cded

080172c0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 80172c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80172c4:	461f      	mov	r7, r3
 80172c6:	4b0b      	ldr	r3, [pc, #44]	; (80172f4 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 80172c8:	460d      	mov	r5, r1
 80172ca:	4616      	mov	r6, r2
 80172cc:	f8b3 8000 	ldrh.w	r8, [r3]
 80172d0:	4604      	mov	r4, r0
 80172d2:	f7ff fc7f 	bl	8016bd4 <_ZN8touchgfx3HAL3lcdEv>
 80172d6:	6803      	ldr	r3, [r0, #0]
 80172d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172da:	4798      	blx	r3
 80172dc:	463b      	mov	r3, r7
 80172de:	4632      	mov	r2, r6
 80172e0:	4629      	mov	r1, r5
 80172e2:	e9cd 8000 	strd	r8, r0, [sp]
 80172e6:	4620      	mov	r0, r4
 80172e8:	f7ff ff0e 	bl	8017108 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80172ec:	b002      	add	sp, #8
 80172ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172f2:	bf00      	nop
 80172f4:	20014bde 	.word	0x20014bde

080172f8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 80172f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172fc:	4698      	mov	r8, r3
 80172fe:	b088      	sub	sp, #32
 8017300:	2300      	movs	r3, #0
 8017302:	4617      	mov	r7, r2
 8017304:	4604      	mov	r4, r0
 8017306:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801730a:	9303      	str	r3, [sp, #12]
 801730c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8017310:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8017314:	f8ad 6014 	strh.w	r6, [sp, #20]
 8017318:	f8ad 5016 	strh.w	r5, [sp, #22]
 801731c:	e9cd 3100 	strd	r3, r1, [sp]
 8017320:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017324:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017328:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801732c:	f88d 301c 	strb.w	r3, [sp, #28]
 8017330:	f7ff fe10 	bl	8016f54 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017334:	4642      	mov	r2, r8
 8017336:	4603      	mov	r3, r0
 8017338:	4639      	mov	r1, r7
 801733a:	4620      	mov	r0, r4
 801733c:	f7ff ffc0 	bl	80172c0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8017340:	4b18      	ldr	r3, [pc, #96]	; (80173a4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xac>)
 8017342:	9004      	str	r0, [sp, #16]
 8017344:	881b      	ldrh	r3, [r3, #0]
 8017346:	f8ad 301a 	strh.w	r3, [sp, #26]
 801734a:	f7ff fc43 	bl	8016bd4 <_ZN8touchgfx3HAL3lcdEv>
 801734e:	6803      	ldr	r3, [r0, #0]
 8017350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017352:	4798      	blx	r3
 8017354:	f88d 001e 	strb.w	r0, [sp, #30]
 8017358:	f88d 001d 	strb.w	r0, [sp, #29]
 801735c:	b106      	cbz	r6, 8017360 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x68>
 801735e:	b935      	cbnz	r5, 801736e <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x76>
 8017360:	4b11      	ldr	r3, [pc, #68]	; (80173a8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb0>)
 8017362:	f240 11f1 	movw	r1, #497	; 0x1f1
 8017366:	4a11      	ldr	r2, [pc, #68]	; (80173ac <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 8017368:	4811      	ldr	r0, [pc, #68]	; (80173b0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 801736a:	f010 f84b 	bl	8027404 <__assert_func>
 801736e:	6823      	ldr	r3, [r4, #0]
 8017370:	4620      	mov	r0, r4
 8017372:	9d00      	ldr	r5, [sp, #0]
 8017374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017376:	4798      	blx	r3
 8017378:	4228      	tst	r0, r5
 801737a:	d104      	bne.n	8017386 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x8e>
 801737c:	4b0d      	ldr	r3, [pc, #52]	; (80173b4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xbc>)
 801737e:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8017382:	4a0a      	ldr	r2, [pc, #40]	; (80173ac <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 8017384:	e7f0      	b.n	8017368 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x70>
 8017386:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017388:	4669      	mov	r1, sp
 801738a:	6860      	ldr	r0, [r4, #4]
 801738c:	9303      	str	r3, [sp, #12]
 801738e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8017392:	f88d 301f 	strb.w	r3, [sp, #31]
 8017396:	6803      	ldr	r3, [r0, #0]
 8017398:	685b      	ldr	r3, [r3, #4]
 801739a:	4798      	blx	r3
 801739c:	b008      	add	sp, #32
 801739e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173a2:	bf00      	nop
 80173a4:	20014bde 	.word	0x20014bde
 80173a8:	0802cc3b 	.word	0x0802cc3b
 80173ac:	0802cf76 	.word	0x0802cf76
 80173b0:	0802cded 	.word	0x0802cded
 80173b4:	0802cc73 	.word	0x0802cc73

080173b8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80173b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80173ba:	b08b      	sub	sp, #44	; 0x2c
 80173bc:	4604      	mov	r4, r0
 80173be:	466b      	mov	r3, sp
 80173c0:	e883 0006 	stmia.w	r3, {r1, r2}
 80173c4:	4b20      	ldr	r3, [pc, #128]	; (8017448 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 80173c6:	781b      	ldrb	r3, [r3, #0]
 80173c8:	b933      	cbnz	r3, 80173d8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 80173ca:	4b20      	ldr	r3, [pc, #128]	; (801744c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 80173cc:	f44f 7112 	mov.w	r1, #584	; 0x248
 80173d0:	4a1f      	ldr	r2, [pc, #124]	; (8017450 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 80173d2:	4820      	ldr	r0, [pc, #128]	; (8017454 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 80173d4:	f010 f816 	bl	8027404 <__assert_func>
 80173d8:	2301      	movs	r3, #1
 80173da:	2500      	movs	r5, #0
 80173dc:	f8bd 6000 	ldrh.w	r6, [sp]
 80173e0:	9302      	str	r3, [sp, #8]
 80173e2:	6803      	ldr	r3, [r0, #0]
 80173e4:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80173e8:	9505      	str	r5, [sp, #20]
 80173ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173ec:	4798      	blx	r3
 80173ee:	463a      	mov	r2, r7
 80173f0:	4631      	mov	r1, r6
 80173f2:	4603      	mov	r3, r0
 80173f4:	4620      	mov	r0, r4
 80173f6:	f7ff ff63 	bl	80172c0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80173fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80173fc:	9003      	str	r0, [sp, #12]
 80173fe:	9306      	str	r3, [sp, #24]
 8017400:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8017404:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017408:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801740c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8017410:	4b11      	ldr	r3, [pc, #68]	; (8017458 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa0>)
 8017412:	881b      	ldrh	r3, [r3, #0]
 8017414:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017418:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801741c:	f7ff fbda 	bl	8016bd4 <_ZN8touchgfx3HAL3lcdEv>
 8017420:	6803      	ldr	r3, [r0, #0]
 8017422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017424:	4798      	blx	r3
 8017426:	23ff      	movs	r3, #255	; 0xff
 8017428:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801742c:	a902      	add	r1, sp, #8
 801742e:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8017432:	6860      	ldr	r0, [r4, #4]
 8017434:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8017438:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
 801743c:	6803      	ldr	r3, [r0, #0]
 801743e:	685b      	ldr	r3, [r3, #4]
 8017440:	4798      	blx	r3
 8017442:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8017444:	b00b      	add	sp, #44	; 0x2c
 8017446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017448:	20014be3 	.word	0x20014be3
 801744c:	0802cd3a 	.word	0x0802cd3a
 8017450:	0802d020 	.word	0x0802d020
 8017454:	0802cded 	.word	0x0802cded
 8017458:	20014bde 	.word	0x20014bde

0801745c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 801745c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017460:	b08a      	sub	sp, #40	; 0x28
 8017462:	2600      	movs	r6, #0
 8017464:	4604      	mov	r4, r0
 8017466:	466d      	mov	r5, sp
 8017468:	9605      	str	r6, [sp, #20]
 801746a:	e885 0006 	stmia.w	r5, {r1, r2}
 801746e:	461d      	mov	r5, r3
 8017470:	2301      	movs	r3, #1
 8017472:	f8bd 7000 	ldrh.w	r7, [sp]
 8017476:	9302      	str	r3, [sp, #8]
 8017478:	6803      	ldr	r3, [r0, #0]
 801747a:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 801747e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017480:	4798      	blx	r3
 8017482:	4642      	mov	r2, r8
 8017484:	4639      	mov	r1, r7
 8017486:	4603      	mov	r3, r0
 8017488:	4620      	mov	r0, r4
 801748a:	f7ff ff19 	bl	80172c0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801748e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8017492:	9003      	str	r0, [sp, #12]
 8017494:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017498:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801749c:	9506      	str	r5, [sp, #24]
 801749e:	f8ad 301e 	strh.w	r3, [sp, #30]
 80174a2:	4b0f      	ldr	r3, [pc, #60]	; (80174e0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x84>)
 80174a4:	881b      	ldrh	r3, [r3, #0]
 80174a6:	f8ad 3020 	strh.w	r3, [sp, #32]
 80174aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80174ac:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80174b0:	f7ff fb90 	bl	8016bd4 <_ZN8touchgfx3HAL3lcdEv>
 80174b4:	6803      	ldr	r3, [r0, #0]
 80174b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174b8:	4798      	blx	r3
 80174ba:	23ff      	movs	r3, #255	; 0xff
 80174bc:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80174c0:	a902      	add	r1, sp, #8
 80174c2:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 80174c6:	6860      	ldr	r0, [r4, #4]
 80174c8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80174cc:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
 80174d0:	6803      	ldr	r3, [r0, #0]
 80174d2:	685b      	ldr	r3, [r3, #4]
 80174d4:	4798      	blx	r3
 80174d6:	4628      	mov	r0, r5
 80174d8:	b00a      	add	sp, #40	; 0x28
 80174da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174de:	bf00      	nop
 80174e0:	20014bde 	.word	0x20014bde

080174e4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80174e4:	b570      	push	{r4, r5, r6, lr}
 80174e6:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80174ea:	4604      	mov	r4, r0
 80174ec:	b19b      	cbz	r3, 8017516 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80174ee:	2002      	movs	r0, #2
 80174f0:	f7ea faea 	bl	8001ac8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 80174f4:	2300      	movs	r3, #0
 80174f6:	4620      	mov	r0, r4
 80174f8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80174fc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8017500:	6823      	ldr	r3, [r4, #0]
 8017502:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 8017506:	f7ff fd25 	bl	8016f54 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801750a:	4601      	mov	r1, r0
 801750c:	4620      	mov	r0, r4
 801750e:	462b      	mov	r3, r5
 8017510:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017514:	4718      	bx	r3
 8017516:	bd70      	pop	{r4, r5, r6, pc}

08017518 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 8017518:	b570      	push	{r4, r5, r6, lr}
 801751a:	4605      	mov	r5, r0
 801751c:	460c      	mov	r4, r1
 801751e:	2003      	movs	r0, #3
 8017520:	b149      	cbz	r1, 8017536 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 8017522:	f7ea facf 	bl	8001ac4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8017526:	6928      	ldr	r0, [r5, #16]
 8017528:	b168      	cbz	r0, 8017546 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801752a:	6803      	ldr	r3, [r0, #0]
 801752c:	2101      	movs	r1, #1
 801752e:	695b      	ldr	r3, [r3, #20]
 8017530:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017534:	4718      	bx	r3
 8017536:	f7ea fac6 	bl	8001ac6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801753a:	6928      	ldr	r0, [r5, #16]
 801753c:	b118      	cbz	r0, 8017546 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801753e:	6803      	ldr	r3, [r0, #0]
 8017540:	4621      	mov	r1, r4
 8017542:	695b      	ldr	r3, [r3, #20]
 8017544:	e7f4      	b.n	8017530 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 8017546:	bd70      	pop	{r4, r5, r6, pc}

08017548 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8017548:	b538      	push	{r3, r4, r5, lr}
 801754a:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 801754e:	4604      	mov	r4, r0
 8017550:	460d      	mov	r5, r1
 8017552:	428a      	cmp	r2, r1
 8017554:	d008      	beq.n	8017568 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x20>
 8017556:	2a01      	cmp	r2, #1
 8017558:	6803      	ldr	r3, [r0, #0]
 801755a:	d106      	bne.n	801756a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 801755c:	b929      	cbnz	r1, 801756a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 801755e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8017562:	4798      	blx	r3
 8017564:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8017568:	bd38      	pop	{r3, r4, r5, pc}
 801756a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801756e:	4620      	mov	r0, r4
 8017570:	e7f7      	b.n	8017562 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1a>
	...

08017574 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8017574:	4b0d      	ldr	r3, [pc, #52]	; (80175ac <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8017576:	b510      	push	{r4, lr}
 8017578:	781b      	ldrb	r3, [r3, #0]
 801757a:	4604      	mov	r4, r0
 801757c:	b95b      	cbnz	r3, 8017596 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801757e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8017582:	2b02      	cmp	r3, #2
 8017584:	d007      	beq.n	8017596 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8017586:	6840      	ldr	r0, [r0, #4]
 8017588:	f000 f93a 	bl	8017800 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801758c:	b118      	cbz	r0, 8017596 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801758e:	6862      	ldr	r2, [r4, #4]
 8017590:	7a53      	ldrb	r3, [r2, #9]
 8017592:	2b00      	cmp	r3, #0
 8017594:	d0fc      	beq.n	8017590 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8017596:	f7ea fbc5 	bl	8001d24 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801759a:	4620      	mov	r0, r4
 801759c:	2100      	movs	r1, #0
 801759e:	f7ff ffd3 	bl	8017548 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80175a2:	4620      	mov	r0, r4
 80175a4:	f7ff fcd6 	bl	8016f54 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80175a8:	bd10      	pop	{r4, pc}
 80175aa:	bf00      	nop
 80175ac:	20014be2 	.word	0x20014be2

080175b0 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80175b0:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80175b4:	1a13      	subs	r3, r2, r0
 80175b6:	4258      	negs	r0, r3
 80175b8:	4158      	adcs	r0, r3
 80175ba:	4770      	bx	lr

080175bc <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80175bc:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80175c0:	1a9b      	subs	r3, r3, r2
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	bfdc      	itt	le
 80175c6:	6882      	ldrle	r2, [r0, #8]
 80175c8:	189b      	addle	r3, r3, r2
 80175ca:	2b01      	cmp	r3, #1
 80175cc:	bfcc      	ite	gt
 80175ce:	2000      	movgt	r0, #0
 80175d0:	2001      	movle	r0, #1
 80175d2:	4770      	bx	lr

080175d4 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80175d4:	6902      	ldr	r2, [r0, #16]
 80175d6:	6840      	ldr	r0, [r0, #4]
 80175d8:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 80175dc:	4770      	bx	lr

080175de <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80175de:	6803      	ldr	r3, [r0, #0]
 80175e0:	691b      	ldr	r3, [r3, #16]
 80175e2:	4718      	bx	r3

080175e4 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80175e4:	4770      	bx	lr

080175e6 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80175e6:	4770      	bx	lr

080175e8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 80175e8:	4770      	bx	lr
	...

080175ec <_ZN8touchgfx13DMA_Interface7executeEv>:
 80175ec:	2301      	movs	r3, #1
 80175ee:	b570      	push	{r4, r5, r6, lr}
 80175f0:	7203      	strb	r3, [r0, #8]
 80175f2:	4604      	mov	r4, r0
 80175f4:	6840      	ldr	r0, [r0, #4]
 80175f6:	6803      	ldr	r3, [r0, #0]
 80175f8:	699b      	ldr	r3, [r3, #24]
 80175fa:	4798      	blx	r3
 80175fc:	6803      	ldr	r3, [r0, #0]
 80175fe:	4605      	mov	r5, r0
 8017600:	2b40      	cmp	r3, #64	; 0x40
 8017602:	d039      	beq.n	8017678 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8017604:	d815      	bhi.n	8017632 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8017606:	2b04      	cmp	r3, #4
 8017608:	d022      	beq.n	8017650 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801760a:	d808      	bhi.n	801761e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801760c:	2b01      	cmp	r3, #1
 801760e:	d033      	beq.n	8017678 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8017610:	2b02      	cmp	r3, #2
 8017612:	d108      	bne.n	8017626 <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 8017614:	6823      	ldr	r3, [r4, #0]
 8017616:	4620      	mov	r0, r4
 8017618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801761a:	4798      	blx	r3
 801761c:	e025      	b.n	801766a <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 801761e:	2b08      	cmp	r3, #8
 8017620:	d01e      	beq.n	8017660 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 8017622:	2b20      	cmp	r3, #32
 8017624:	d028      	beq.n	8017678 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8017626:	4b17      	ldr	r3, [pc, #92]	; (8017684 <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 8017628:	218b      	movs	r1, #139	; 0x8b
 801762a:	4a17      	ldr	r2, [pc, #92]	; (8017688 <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 801762c:	4817      	ldr	r0, [pc, #92]	; (801768c <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 801762e:	f00f fee9 	bl	8027404 <__assert_func>
 8017632:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017636:	d01f      	beq.n	8017678 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8017638:	d804      	bhi.n	8017644 <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 801763a:	2b80      	cmp	r3, #128	; 0x80
 801763c:	d01c      	beq.n	8017678 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801763e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017642:	e7ef      	b.n	8017624 <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 8017644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017648:	d016      	beq.n	8017678 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801764a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801764e:	e7e0      	b.n	8017612 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8017650:	6823      	ldr	r3, [r4, #0]
 8017652:	7f01      	ldrb	r1, [r0, #28]
 8017654:	4620      	mov	r0, r4
 8017656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017658:	4798      	blx	r3
 801765a:	6823      	ldr	r3, [r4, #0]
 801765c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801765e:	e006      	b.n	801766e <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8017660:	6823      	ldr	r3, [r4, #0]
 8017662:	7f01      	ldrb	r1, [r0, #28]
 8017664:	4620      	mov	r0, r4
 8017666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017668:	4798      	blx	r3
 801766a:	6823      	ldr	r3, [r4, #0]
 801766c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801766e:	4629      	mov	r1, r5
 8017670:	4620      	mov	r0, r4
 8017672:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017676:	4718      	bx	r3
 8017678:	6823      	ldr	r3, [r4, #0]
 801767a:	4620      	mov	r0, r4
 801767c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801767e:	4798      	blx	r3
 8017680:	e7eb      	b.n	801765a <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8017682:	bf00      	nop
 8017684:	0802d285 	.word	0x0802d285
 8017688:	0802d344 	.word	0x0802d344
 801768c:	0802d2aa 	.word	0x0802d2aa

08017690 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8017690:	b570      	push	{r4, r5, r6, lr}
 8017692:	4604      	mov	r4, r0
 8017694:	460e      	mov	r6, r1
 8017696:	6860      	ldr	r0, [r4, #4]
 8017698:	6803      	ldr	r3, [r0, #0]
 801769a:	685b      	ldr	r3, [r3, #4]
 801769c:	4798      	blx	r3
 801769e:	2800      	cmp	r0, #0
 80176a0:	d1f9      	bne.n	8017696 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80176a2:	4d0d      	ldr	r5, [pc, #52]	; (80176d8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 80176a4:	6828      	ldr	r0, [r5, #0]
 80176a6:	6803      	ldr	r3, [r0, #0]
 80176a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80176aa:	4798      	blx	r3
 80176ac:	f7ea fb48 	bl	8001d40 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80176b0:	6828      	ldr	r0, [r5, #0]
 80176b2:	2101      	movs	r1, #1
 80176b4:	f7ff ff48 	bl	8017548 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80176b8:	6860      	ldr	r0, [r4, #4]
 80176ba:	4631      	mov	r1, r6
 80176bc:	6803      	ldr	r3, [r0, #0]
 80176be:	689b      	ldr	r3, [r3, #8]
 80176c0:	4798      	blx	r3
 80176c2:	6823      	ldr	r3, [r4, #0]
 80176c4:	4620      	mov	r0, r4
 80176c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176c8:	4798      	blx	r3
 80176ca:	6828      	ldr	r0, [r5, #0]
 80176cc:	6803      	ldr	r3, [r0, #0]
 80176ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80176d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80176d4:	4718      	bx	r3
 80176d6:	bf00      	nop
 80176d8:	20014be4 	.word	0x20014be4

080176dc <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 80176dc:	b508      	push	{r3, lr}
 80176de:	f7ea fb21 	bl	8001d24 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80176e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80176e6:	f7ea bb25 	b.w	8001d34 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080176ea <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80176ea:	b510      	push	{r4, lr}
 80176ec:	4604      	mov	r4, r0
 80176ee:	2114      	movs	r1, #20
 80176f0:	f00f fe5a 	bl	80273a8 <_ZdlPvj>
 80176f4:	4620      	mov	r0, r4
 80176f6:	bd10      	pop	{r4, pc}

080176f8 <_ZN8touchgfx13DMA_Interface5startEv>:
 80176f8:	b510      	push	{r4, lr}
 80176fa:	4604      	mov	r4, r0
 80176fc:	6840      	ldr	r0, [r0, #4]
 80176fe:	6803      	ldr	r3, [r0, #0]
 8017700:	681b      	ldr	r3, [r3, #0]
 8017702:	4798      	blx	r3
 8017704:	b948      	cbnz	r0, 801771a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8017706:	7a63      	ldrb	r3, [r4, #9]
 8017708:	b13b      	cbz	r3, 801771a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801770a:	7a23      	ldrb	r3, [r4, #8]
 801770c:	b92b      	cbnz	r3, 801771a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801770e:	6823      	ldr	r3, [r4, #0]
 8017710:	4620      	mov	r0, r4
 8017712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017718:	4718      	bx	r3
 801771a:	bd10      	pop	{r4, pc}

0801771c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801771c:	b570      	push	{r4, r5, r6, lr}
 801771e:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8017722:	4606      	mov	r6, r0
 8017724:	1a9b      	subs	r3, r3, r2
 8017726:	2b00      	cmp	r3, #0
 8017728:	bfdc      	itt	le
 801772a:	6880      	ldrle	r0, [r0, #8]
 801772c:	181b      	addle	r3, r3, r0
 801772e:	2b01      	cmp	r3, #1
 8017730:	dd13      	ble.n	801775a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x3e>
 8017732:	6874      	ldr	r4, [r6, #4]
 8017734:	460d      	mov	r5, r1
 8017736:	eb04 1442 	add.w	r4, r4, r2, lsl #5
 801773a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801773c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801773e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8017742:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8017746:	68f3      	ldr	r3, [r6, #12]
 8017748:	68b2      	ldr	r2, [r6, #8]
 801774a:	f3bf 8f5b 	dmb	ish
 801774e:	3301      	adds	r3, #1
 8017750:	429a      	cmp	r2, r3
 8017752:	bfd8      	it	le
 8017754:	1a9b      	suble	r3, r3, r2
 8017756:	60f3      	str	r3, [r6, #12]
 8017758:	bd70      	pop	{r4, r5, r6, pc}
 801775a:	4b03      	ldr	r3, [pc, #12]	; (8017768 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x4c>)
 801775c:	2139      	movs	r1, #57	; 0x39
 801775e:	4a03      	ldr	r2, [pc, #12]	; (801776c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 8017760:	4803      	ldr	r0, [pc, #12]	; (8017770 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8017762:	f00f fe4f 	bl	8027404 <__assert_func>
 8017766:	bf00      	nop
 8017768:	0802d2d0 	.word	0x0802d2d0
 801776c:	0802d374 	.word	0x0802d374
 8017770:	0802d2aa 	.word	0x0802d2aa

08017774 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8017774:	b510      	push	{r4, lr}
 8017776:	6803      	ldr	r3, [r0, #0]
 8017778:	4604      	mov	r4, r0
 801777a:	681b      	ldr	r3, [r3, #0]
 801777c:	4798      	blx	r3
 801777e:	b128      	cbz	r0, 801778c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8017780:	4b07      	ldr	r3, [pc, #28]	; (80177a0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8017782:	213f      	movs	r1, #63	; 0x3f
 8017784:	4a07      	ldr	r2, [pc, #28]	; (80177a4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8017786:	4808      	ldr	r0, [pc, #32]	; (80177a8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8017788:	f00f fe3c 	bl	8027404 <__assert_func>
 801778c:	6923      	ldr	r3, [r4, #16]
 801778e:	68a2      	ldr	r2, [r4, #8]
 8017790:	f3bf 8f5b 	dmb	ish
 8017794:	3301      	adds	r3, #1
 8017796:	429a      	cmp	r2, r3
 8017798:	bfd8      	it	le
 801779a:	1a9b      	suble	r3, r3, r2
 801779c:	6123      	str	r3, [r4, #16]
 801779e:	bd10      	pop	{r4, pc}
 80177a0:	0802d2f3 	.word	0x0802d2f3
 80177a4:	0802d3c2 	.word	0x0802d3c2
 80177a8:	0802d2aa 	.word	0x0802d2aa

080177ac <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 80177ac:	b570      	push	{r4, r5, r6, lr}
 80177ae:	4604      	mov	r4, r0
 80177b0:	6840      	ldr	r0, [r0, #4]
 80177b2:	6803      	ldr	r3, [r0, #0]
 80177b4:	681b      	ldr	r3, [r3, #0]
 80177b6:	4798      	blx	r3
 80177b8:	4605      	mov	r5, r0
 80177ba:	b930      	cbnz	r0, 80177ca <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80177bc:	7a23      	ldrb	r3, [r4, #8]
 80177be:	b123      	cbz	r3, 80177ca <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80177c0:	6860      	ldr	r0, [r4, #4]
 80177c2:	6803      	ldr	r3, [r0, #0]
 80177c4:	695b      	ldr	r3, [r3, #20]
 80177c6:	4798      	blx	r3
 80177c8:	7225      	strb	r5, [r4, #8]
 80177ca:	6860      	ldr	r0, [r4, #4]
 80177cc:	6803      	ldr	r3, [r0, #0]
 80177ce:	681b      	ldr	r3, [r3, #0]
 80177d0:	4798      	blx	r3
 80177d2:	b928      	cbnz	r0, 80177e0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80177d4:	6823      	ldr	r3, [r4, #0]
 80177d6:	4620      	mov	r0, r4
 80177d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80177de:	4718      	bx	r3
 80177e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80177e4:	f7ea bab4 	b.w	8001d50 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

080177e8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80177e8:	b510      	push	{r4, lr}
 80177ea:	6082      	str	r2, [r0, #8]
 80177ec:	2200      	movs	r2, #0
 80177ee:	4c03      	ldr	r4, [pc, #12]	; (80177fc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80177f0:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80177f4:	e9c0 4100 	strd	r4, r1, [r0]
 80177f8:	bd10      	pop	{r4, pc}
 80177fa:	bf00      	nop
 80177fc:	0802d328 	.word	0x0802d328

08017800 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8017800:	6840      	ldr	r0, [r0, #4]
 8017802:	6803      	ldr	r3, [r0, #0]
 8017804:	681b      	ldr	r3, [r3, #0]
 8017806:	4718      	bx	r3

08017808 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8017808:	2300      	movs	r3, #0
 801780a:	8083      	strh	r3, [r0, #4]
 801780c:	80c3      	strh	r3, [r0, #6]
 801780e:	8003      	strh	r3, [r0, #0]
 8017810:	8043      	strh	r3, [r0, #2]
 8017812:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8017816:	2bff      	cmp	r3, #255	; 0xff
 8017818:	bf01      	itttt	eq
 801781a:	890b      	ldrheq	r3, [r1, #8]
 801781c:	8083      	strheq	r3, [r0, #4]
 801781e:	894b      	ldrheq	r3, [r1, #10]
 8017820:	80c3      	strheq	r3, [r0, #6]
 8017822:	4770      	bx	lr

08017824 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8017824:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017826:	4604      	mov	r4, r0
 8017828:	466b      	mov	r3, sp
 801782a:	6808      	ldr	r0, [r1, #0]
 801782c:	6849      	ldr	r1, [r1, #4]
 801782e:	c303      	stmia	r3!, {r0, r1}
 8017830:	6823      	ldr	r3, [r4, #0]
 8017832:	4669      	mov	r1, sp
 8017834:	4620      	mov	r0, r4
 8017836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017838:	4798      	blx	r3
 801783a:	4b08      	ldr	r3, [pc, #32]	; (801785c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801783c:	681b      	ldr	r3, [r3, #0]
 801783e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017842:	b10a      	cbz	r2, 8017848 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8017844:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8017846:	b900      	cbnz	r0, 801784a <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8017848:	6898      	ldr	r0, [r3, #8]
 801784a:	6803      	ldr	r3, [r0, #0]
 801784c:	4669      	mov	r1, sp
 801784e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8017850:	699d      	ldr	r5, [r3, #24]
 8017852:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8017856:	47a8      	blx	r5
 8017858:	b003      	add	sp, #12
 801785a:	bd30      	pop	{r4, r5, pc}
 801785c:	20014be4 	.word	0x20014be4

08017860 <_ZN8touchgfx3BoxD1Ev>:
 8017860:	4770      	bx	lr

08017862 <_ZN8touchgfx3BoxD0Ev>:
 8017862:	b510      	push	{r4, lr}
 8017864:	4604      	mov	r4, r0
 8017866:	212c      	movs	r1, #44	; 0x2c
 8017868:	f00f fd9e 	bl	80273a8 <_ZdlPvj>
 801786c:	4620      	mov	r0, r4
 801786e:	bd10      	pop	{r4, pc}

08017870 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8017870:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8017874:	4770      	bx	lr

08017876 <_ZN8touchgfx6ButtonD1Ev>:
 8017876:	4770      	bx	lr

08017878 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8017878:	b570      	push	{r4, r5, r6, lr}
 801787a:	880b      	ldrh	r3, [r1, #0]
 801787c:	4605      	mov	r5, r0
 801787e:	4604      	mov	r4, r0
 8017880:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8017882:	8813      	ldrh	r3, [r2, #0]
 8017884:	f825 3f30 	strh.w	r3, [r5, #48]!
 8017888:	4628      	mov	r0, r5
 801788a:	f003 fd21 	bl	801b2d0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801788e:	4606      	mov	r6, r0
 8017890:	4628      	mov	r0, r5
 8017892:	f003 fd57 	bl	801b344 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017896:	6823      	ldr	r3, [r4, #0]
 8017898:	4605      	mov	r5, r0
 801789a:	b231      	sxth	r1, r6
 801789c:	4620      	mov	r0, r4
 801789e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80178a0:	4798      	blx	r3
 80178a2:	6823      	ldr	r3, [r4, #0]
 80178a4:	b229      	sxth	r1, r5
 80178a6:	4620      	mov	r0, r4
 80178a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80178aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80178ae:	4718      	bx	r3

080178b0 <_ZN8touchgfx6ButtonD0Ev>:
 80178b0:	b510      	push	{r4, lr}
 80178b2:	4604      	mov	r4, r0
 80178b4:	2134      	movs	r1, #52	; 0x34
 80178b6:	f00f fd77 	bl	80273a8 <_ZdlPvj>
 80178ba:	4620      	mov	r0, r4
 80178bc:	bd10      	pop	{r4, pc}

080178be <_ZN8touchgfx14AbstractButton13executeActionEv>:
 80178be:	b510      	push	{r4, lr}
 80178c0:	4604      	mov	r4, r0
 80178c2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80178c4:	b150      	cbz	r0, 80178dc <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 80178c6:	6803      	ldr	r3, [r0, #0]
 80178c8:	68db      	ldr	r3, [r3, #12]
 80178ca:	4798      	blx	r3
 80178cc:	b130      	cbz	r0, 80178dc <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 80178ce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80178d0:	4621      	mov	r1, r4
 80178d2:	6803      	ldr	r3, [r0, #0]
 80178d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80178d8:	689b      	ldr	r3, [r3, #8]
 80178da:	4718      	bx	r3
 80178dc:	bd10      	pop	{r4, pc}

080178de <_ZNK8touchgfx6Button12getSolidRectEv>:
 80178de:	b510      	push	{r4, lr}
 80178e0:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 80178e4:	4604      	mov	r4, r0
 80178e6:	2bff      	cmp	r3, #255	; 0xff
 80178e8:	d006      	beq.n	80178f8 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 80178ea:	2300      	movs	r3, #0
 80178ec:	8003      	strh	r3, [r0, #0]
 80178ee:	8043      	strh	r3, [r0, #2]
 80178f0:	8083      	strh	r3, [r0, #4]
 80178f2:	80c3      	strh	r3, [r0, #6]
 80178f4:	4620      	mov	r0, r4
 80178f6:	bd10      	pop	{r4, pc}
 80178f8:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 80178fc:	b11b      	cbz	r3, 8017906 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 80178fe:	3130      	adds	r1, #48	; 0x30
 8017900:	f003 fd5a 	bl	801b3b8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8017904:	e7f6      	b.n	80178f4 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8017906:	312e      	adds	r1, #46	; 0x2e
 8017908:	e7fa      	b.n	8017900 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

0801790c <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 801790c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017910:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8017914:	b08a      	sub	sp, #40	; 0x28
 8017916:	4604      	mov	r4, r0
 8017918:	4688      	mov	r8, r1
 801791a:	2b00      	cmp	r3, #0
 801791c:	d044      	beq.n	80179a8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 801791e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8017920:	a805      	add	r0, sp, #20
 8017922:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017926:	f003 fcd3 	bl	801b2d0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801792a:	4605      	mov	r5, r0
 801792c:	b206      	sxth	r6, r0
 801792e:	a805      	add	r0, sp, #20
 8017930:	f003 fd08 	bl	801b344 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017934:	f9b8 2000 	ldrsh.w	r2, [r8]
 8017938:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 801793c:	2300      	movs	r3, #0
 801793e:	fa0f fc80 	sxth.w	ip, r0
 8017942:	4417      	add	r7, r2
 8017944:	9306      	str	r3, [sp, #24]
 8017946:	b2bf      	uxth	r7, r7
 8017948:	fa0f fe87 	sxth.w	lr, r7
 801794c:	459e      	cmp	lr, r3
 801794e:	dd2d      	ble.n	80179ac <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8017950:	4296      	cmp	r6, r2
 8017952:	dd2b      	ble.n	80179ac <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8017954:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 8017958:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 801795c:	4419      	add	r1, r3
 801795e:	b289      	uxth	r1, r1
 8017960:	fa0f f881 	sxth.w	r8, r1
 8017964:	f1b8 0f00 	cmp.w	r8, #0
 8017968:	dd20      	ble.n	80179ac <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801796a:	459c      	cmp	ip, r3
 801796c:	dd1e      	ble.n	80179ac <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801796e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8017972:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017976:	4576      	cmp	r6, lr
 8017978:	bfa8      	it	ge
 801797a:	463d      	movge	r5, r7
 801797c:	45c4      	cmp	ip, r8
 801797e:	bfa8      	it	ge
 8017980:	4608      	movge	r0, r1
 8017982:	f8ad 2018 	strh.w	r2, [sp, #24]
 8017986:	1aad      	subs	r5, r5, r2
 8017988:	1ac0      	subs	r0, r0, r3
 801798a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801798e:	f8ad 501c 	strh.w	r5, [sp, #28]
 8017992:	f8ad 001e 	strh.w	r0, [sp, #30]
 8017996:	4b1f      	ldr	r3, [pc, #124]	; (8017a14 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 8017998:	681b      	ldr	r3, [r3, #0]
 801799a:	b953      	cbnz	r3, 80179b2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 801799c:	4b1e      	ldr	r3, [pc, #120]	; (8017a18 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 801799e:	2187      	movs	r1, #135	; 0x87
 80179a0:	4a1e      	ldr	r2, [pc, #120]	; (8017a1c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 80179a2:	481f      	ldr	r0, [pc, #124]	; (8017a20 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 80179a4:	f00f fd2e 	bl	8027404 <__assert_func>
 80179a8:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80179aa:	e7b9      	b.n	8017920 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 80179ac:	2300      	movs	r3, #0
 80179ae:	9307      	str	r3, [sp, #28]
 80179b0:	e7f1      	b.n	8017996 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 80179b2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80179b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80179ba:	429a      	cmp	r2, r3
 80179bc:	d026      	beq.n	8017a0c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 80179be:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	dd22      	ble.n	8017a0c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 80179c6:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	dd1e      	ble.n	8017a0c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 80179ce:	2300      	movs	r3, #0
 80179d0:	a908      	add	r1, sp, #32
 80179d2:	4620      	mov	r0, r4
 80179d4:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80179d8:	6823      	ldr	r3, [r4, #0]
 80179da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80179dc:	4798      	blx	r3
 80179de:	4b11      	ldr	r3, [pc, #68]	; (8017a24 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 80179e0:	681b      	ldr	r3, [r3, #0]
 80179e2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80179e6:	b10a      	cbz	r2, 80179ec <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 80179e8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80179ea:	b900      	cbnz	r0, 80179ee <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 80179ec:	6898      	ldr	r0, [r3, #8]
 80179ee:	2501      	movs	r5, #1
 80179f0:	6801      	ldr	r1, [r0, #0]
 80179f2:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80179f6:	9502      	str	r5, [sp, #8]
 80179f8:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 80179fc:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8017a00:	9401      	str	r4, [sp, #4]
 8017a02:	ac06      	add	r4, sp, #24
 8017a04:	9400      	str	r4, [sp, #0]
 8017a06:	688c      	ldr	r4, [r1, #8]
 8017a08:	a905      	add	r1, sp, #20
 8017a0a:	47a0      	blx	r4
 8017a0c:	b00a      	add	sp, #40	; 0x28
 8017a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a12:	bf00      	nop
 8017a14:	20014c6c 	.word	0x20014c6c
 8017a18:	0802d458 	.word	0x0802d458
 8017a1c:	0802d52c 	.word	0x0802d52c
 8017a20:	0802d494 	.word	0x0802d494
 8017a24:	20014be4 	.word	0x20014be4

08017a28 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8017a28:	b510      	push	{r4, lr}
 8017a2a:	6803      	ldr	r3, [r0, #0]
 8017a2c:	460c      	mov	r4, r1
 8017a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a30:	4798      	blx	r3
 8017a32:	1b03      	subs	r3, r0, r4
 8017a34:	4258      	negs	r0, r3
 8017a36:	4158      	adcs	r0, r3
 8017a38:	bd10      	pop	{r4, pc}
	...

08017a3c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8017a3c:	4b01      	ldr	r3, [pc, #4]	; (8017a44 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8017a3e:	6019      	str	r1, [r3, #0]
 8017a40:	4770      	bx	lr
 8017a42:	bf00      	nop
 8017a44:	20014bec 	.word	0x20014bec

08017a48 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8017a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a4c:	4696      	mov	lr, r2
 8017a4e:	b097      	sub	sp, #92	; 0x5c
 8017a50:	4605      	mov	r5, r0
 8017a52:	4614      	mov	r4, r2
 8017a54:	460e      	mov	r6, r1
 8017a56:	461f      	mov	r7, r3
 8017a58:	f10d 0c1c 	add.w	ip, sp, #28
 8017a5c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8017a60:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8017a64:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8017a68:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017a6c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017a70:	f8de 3000 	ldr.w	r3, [lr]
 8017a74:	f104 0e14 	add.w	lr, r4, #20
 8017a78:	f8cc 3000 	str.w	r3, [ip]
 8017a7c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8017a80:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017a84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017a88:	f8de 3000 	ldr.w	r3, [lr]
 8017a8c:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8017a90:	f8cc 3000 	str.w	r3, [ip]
 8017a94:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8017a98:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017a9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017aa0:	f8de 3000 	ldr.w	r3, [lr]
 8017aa4:	4631      	mov	r1, r6
 8017aa6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017aa8:	4628      	mov	r0, r5
 8017aaa:	f8cc 3000 	str.w	r3, [ip]
 8017aae:	682b      	ldr	r3, [r5, #0]
 8017ab0:	9201      	str	r2, [sp, #4]
 8017ab2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017ab4:	f8cd 8008 	str.w	r8, [sp, #8]
 8017ab8:	9200      	str	r2, [sp, #0]
 8017aba:	aa07      	add	r2, sp, #28
 8017abc:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8017ac0:	f8d3 b034 	ldr.w	fp, [r3, #52]	; 0x34
 8017ac4:	463b      	mov	r3, r7
 8017ac6:	47d8      	blx	fp
 8017ac8:	46a6      	mov	lr, r4
 8017aca:	f10d 0c1c 	add.w	ip, sp, #28
 8017ace:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017ad2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017ad6:	f8de 3000 	ldr.w	r3, [lr]
 8017ada:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8017ade:	343c      	adds	r4, #60	; 0x3c
 8017ae0:	f8cc 3000 	str.w	r3, [ip]
 8017ae4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8017ae8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017aec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017af0:	f8de 3000 	ldr.w	r3, [lr]
 8017af4:	f8cc 3000 	str.w	r3, [ip]
 8017af8:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8017afc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017afe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017b02:	6823      	ldr	r3, [r4, #0]
 8017b04:	4631      	mov	r1, r6
 8017b06:	4628      	mov	r0, r5
 8017b08:	f8cc 3000 	str.w	r3, [ip]
 8017b0c:	682b      	ldr	r3, [r5, #0]
 8017b0e:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8017b12:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017b14:	f8cd 8008 	str.w	r8, [sp, #8]
 8017b18:	9201      	str	r2, [sp, #4]
 8017b1a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017b1c:	9200      	str	r2, [sp, #0]
 8017b1e:	aa07      	add	r2, sp, #28
 8017b20:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8017b22:	463b      	mov	r3, r7
 8017b24:	47a0      	blx	r4
 8017b26:	b017      	add	sp, #92	; 0x5c
 8017b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017b2c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8017b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b30:	b08d      	sub	sp, #52	; 0x34
 8017b32:	4688      	mov	r8, r1
 8017b34:	f8d3 c000 	ldr.w	ip, [r3]
 8017b38:	9916      	ldr	r1, [sp, #88]	; 0x58
 8017b3a:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8017b3e:	680f      	ldr	r7, [r1, #0]
 8017b40:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8017b44:	eba7 070c 	sub.w	r7, r7, ip
 8017b48:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8017b4c:	edd3 6a07 	vldr	s13, [r3, #28]
 8017b50:	42bc      	cmp	r4, r7
 8017b52:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017b54:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8017b58:	bfa8      	it	ge
 8017b5a:	463c      	movge	r4, r7
 8017b5c:	f9b1 9000 	ldrsh.w	r9, [r1]
 8017b60:	f9ba 1000 	ldrsh.w	r1, [sl]
 8017b64:	ee07 4a90 	vmov	s15, r4
 8017b68:	eb09 0e0c 	add.w	lr, r9, ip
 8017b6c:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8017b70:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8017b74:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8017b78:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8017b7c:	4571      	cmp	r1, lr
 8017b7e:	ee25 4a04 	vmul.f32	s8, s10, s8
 8017b82:	ee65 4a24 	vmul.f32	s9, s10, s9
 8017b86:	ee25 5a27 	vmul.f32	s10, s10, s15
 8017b8a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017b8e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8017b92:	ee32 1a05 	vadd.f32	s2, s4, s10
 8017b96:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8017b9a:	ee36 0a84 	vadd.f32	s0, s13, s8
 8017b9e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8017ba2:	ee22 2a07 	vmul.f32	s4, s4, s14
 8017ba6:	f340 808c 	ble.w	8017cc2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8017baa:	eba1 060e 	sub.w	r6, r1, lr
 8017bae:	fb96 f5f4 	sdiv	r5, r6, r4
 8017bb2:	ee07 5a10 	vmov	s14, r5
 8017bb6:	2d00      	cmp	r5, #0
 8017bb8:	fb04 6615 	mls	r6, r4, r5, r6
 8017bbc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017bc0:	eea7 0a04 	vfma.f32	s0, s14, s8
 8017bc4:	eee7 0a24 	vfma.f32	s1, s14, s9
 8017bc8:	eea7 1a05 	vfma.f32	s2, s14, s10
 8017bcc:	dd12      	ble.n	8017bf4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8017bce:	ee70 6a44 	vsub.f32	s13, s0, s8
 8017bd2:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8017bd6:	ee31 2a45 	vsub.f32	s4, s2, s10
 8017bda:	eef5 6a40 	vcmp.f32	s13, #0.0
 8017bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017be2:	bf14      	ite	ne
 8017be4:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8017be8:	eeb0 7a67 	vmoveq.f32	s14, s15
 8017bec:	ee61 1a87 	vmul.f32	s3, s3, s14
 8017bf0:	ee22 2a07 	vmul.f32	s4, s4, s14
 8017bf4:	fb05 f204 	mul.w	r2, r5, r4
 8017bf8:	1abf      	subs	r7, r7, r2
 8017bfa:	4494      	add	ip, r2
 8017bfc:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8017c00:	4411      	add	r1, r2
 8017c02:	eb09 020c 	add.w	r2, r9, ip
 8017c06:	b209      	sxth	r1, r1
 8017c08:	443a      	add	r2, r7
 8017c0a:	428a      	cmp	r2, r1
 8017c0c:	bfc4      	itt	gt
 8017c0e:	eba1 0209 	subgt.w	r2, r1, r9
 8017c12:	eba2 070c 	subgt.w	r7, r2, ip
 8017c16:	2f00      	cmp	r7, #0
 8017c18:	dd50      	ble.n	8017cbc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8017c1a:	fb97 f1f4 	sdiv	r1, r7, r4
 8017c1e:	fb04 7211 	mls	r2, r4, r1, r7
 8017c22:	b90a      	cbnz	r2, 8017c28 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8017c24:	3901      	subs	r1, #1
 8017c26:	4622      	mov	r2, r4
 8017c28:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8017c2c:	6840      	ldr	r0, [r0, #4]
 8017c2e:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8017c32:	44b6      	add	lr, r6
 8017c34:	f8d0 a000 	ldr.w	sl, [r0]
 8017c38:	2900      	cmp	r1, #0
 8017c3a:	bfcc      	ite	gt
 8017c3c:	46a1      	movgt	r9, r4
 8017c3e:	4691      	movle	r9, r2
 8017c40:	900b      	str	r0, [sp, #44]	; 0x2c
 8017c42:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8017c44:	fb04 e505 	mla	r5, r4, r5, lr
 8017c48:	eef0 6a42 	vmov.f32	s13, s4
 8017c4c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8017c50:	9008      	str	r0, [sp, #32]
 8017c52:	eeb0 7a61 	vmov.f32	s14, s3
 8017c56:	9818      	ldr	r0, [sp, #96]	; 0x60
 8017c58:	695b      	ldr	r3, [r3, #20]
 8017c5a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017c5e:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8017c62:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8017c66:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8017c68:	445b      	add	r3, fp
 8017c6a:	9307      	str	r3, [sp, #28]
 8017c6c:	ee16 3a90 	vmov	r3, s13
 8017c70:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8017c74:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8017c78:	ee21 3a23 	vmul.f32	s6, s2, s7
 8017c7c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8017c80:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8017c84:	ee17 7a90 	vmov	r7, s15
 8017c88:	ee73 7a42 	vsub.f32	s15, s6, s4
 8017c8c:	fb97 f7f4 	sdiv	r7, r7, r4
 8017c90:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8017c94:	ee17 ca90 	vmov	ip, s15
 8017c98:	fb9c fcf4 	sdiv	ip, ip, r4
 8017c9c:	fb0c 3306 	mla	r3, ip, r6, r3
 8017ca0:	9302      	str	r3, [sp, #8]
 8017ca2:	ee17 3a10 	vmov	r3, s14
 8017ca6:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8017caa:	fb07 3706 	mla	r7, r7, r6, r3
 8017cae:	eba9 0306 	sub.w	r3, r9, r6
 8017cb2:	e9cd 4700 	strd	r4, r7, [sp]
 8017cb6:	f8da 4008 	ldr.w	r4, [sl, #8]
 8017cba:	47a0      	blx	r4
 8017cbc:	b00d      	add	sp, #52	; 0x34
 8017cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cc2:	2500      	movs	r5, #0
 8017cc4:	462e      	mov	r6, r5
 8017cc6:	e799      	b.n	8017bfc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08017cc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8017cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ccc:	b0db      	sub	sp, #364	; 0x16c
 8017cce:	461d      	mov	r5, r3
 8017cd0:	4614      	mov	r4, r2
 8017cd2:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8017cd6:	910f      	str	r1, [sp, #60]	; 0x3c
 8017cd8:	4629      	mov	r1, r5
 8017cda:	930a      	str	r3, [sp, #40]	; 0x28
 8017cdc:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8017ce0:	9009      	str	r0, [sp, #36]	; 0x24
 8017ce2:	930b      	str	r3, [sp, #44]	; 0x2c
 8017ce4:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8017ce8:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8017cec:	9310      	str	r3, [sp, #64]	; 0x40
 8017cee:	6803      	ldr	r3, [r0, #0]
 8017cf0:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 8017cf2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017cf6:	47b8      	blx	r7
 8017cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017cfa:	6058      	str	r0, [r3, #4]
 8017cfc:	2800      	cmp	r0, #0
 8017cfe:	f000 83a1 	beq.w	8018444 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017d02:	682b      	ldr	r3, [r5, #0]
 8017d04:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8017d08:	ed94 7a02 	vldr	s14, [r4, #8]
 8017d0c:	9314      	str	r3, [sp, #80]	; 0x50
 8017d0e:	686b      	ldr	r3, [r5, #4]
 8017d10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017d14:	9315      	str	r3, [sp, #84]	; 0x54
 8017d16:	4bc1      	ldr	r3, [pc, #772]	; (801801c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8017d18:	7819      	ldrb	r1, [r3, #0]
 8017d1a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8017d1e:	2900      	cmp	r1, #0
 8017d20:	bf16      	itet	ne
 8017d22:	4619      	movne	r1, r3
 8017d24:	4611      	moveq	r1, r2
 8017d26:	4613      	movne	r3, r2
 8017d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d2c:	9116      	str	r1, [sp, #88]	; 0x58
 8017d2e:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8017d32:	f240 8387 	bls.w	8018444 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017d36:	ed94 7a07 	vldr	s14, [r4, #28]
 8017d3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d42:	f240 837f 	bls.w	8018444 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017d46:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8017d4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d52:	f240 8377 	bls.w	8018444 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017d56:	6822      	ldr	r2, [r4, #0]
 8017d58:	4bb1      	ldr	r3, [pc, #708]	; (8018020 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8017d5a:	429a      	cmp	r2, r3
 8017d5c:	f2c0 8372 	blt.w	8018444 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017d60:	49b0      	ldr	r1, [pc, #704]	; (8018024 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8017d62:	6963      	ldr	r3, [r4, #20]
 8017d64:	428a      	cmp	r2, r1
 8017d66:	f300 836d 	bgt.w	8018444 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017d6a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8017d6e:	48ae      	ldr	r0, [pc, #696]	; (8018028 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8017d70:	33ff      	adds	r3, #255	; 0xff
 8017d72:	4283      	cmp	r3, r0
 8017d74:	f200 8366 	bhi.w	8018444 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017d78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017d7a:	4dac      	ldr	r5, [pc, #688]	; (801802c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8017d7c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8017d80:	33ff      	adds	r3, #255	; 0xff
 8017d82:	42ab      	cmp	r3, r5
 8017d84:	f200 835e 	bhi.w	8018444 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017d88:	6862      	ldr	r2, [r4, #4]
 8017d8a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8017d8e:	33ff      	adds	r3, #255	; 0xff
 8017d90:	4283      	cmp	r3, r0
 8017d92:	f200 8357 	bhi.w	8018444 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017d96:	69a1      	ldr	r1, [r4, #24]
 8017d98:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8017d9c:	33ff      	adds	r3, #255	; 0xff
 8017d9e:	4283      	cmp	r3, r0
 8017da0:	f200 8350 	bhi.w	8018444 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017da4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8017da6:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8017daa:	30ff      	adds	r0, #255	; 0xff
 8017dac:	42a8      	cmp	r0, r5
 8017dae:	f200 8349 	bhi.w	8018444 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017db2:	428a      	cmp	r2, r1
 8017db4:	f280 8110 	bge.w	8017fd8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8017db8:	429a      	cmp	r2, r3
 8017dba:	f300 8119 	bgt.w	8017ff0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8017dbe:	4299      	cmp	r1, r3
 8017dc0:	f280 811d 	bge.w	8017ffe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8017dc4:	2502      	movs	r5, #2
 8017dc6:	2701      	movs	r7, #1
 8017dc8:	46a9      	mov	r9, r5
 8017dca:	46b8      	mov	r8, r7
 8017dcc:	f04f 0a00 	mov.w	sl, #0
 8017dd0:	4621      	mov	r1, r4
 8017dd2:	a849      	add	r0, sp, #292	; 0x124
 8017dd4:	f002 ffca 	bl	801ad6c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8017dd8:	4622      	mov	r2, r4
 8017dda:	4653      	mov	r3, sl
 8017ddc:	a949      	add	r1, sp, #292	; 0x124
 8017dde:	f8cd 9000 	str.w	r9, [sp]
 8017de2:	a819      	add	r0, sp, #100	; 0x64
 8017de4:	f003 f8f2 	bl	801afcc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8017de8:	4622      	mov	r2, r4
 8017dea:	4653      	mov	r3, sl
 8017dec:	a949      	add	r1, sp, #292	; 0x124
 8017dee:	f8cd 8000 	str.w	r8, [sp]
 8017df2:	a829      	add	r0, sp, #164	; 0xa4
 8017df4:	f003 f8ea 	bl	801afcc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8017df8:	4643      	mov	r3, r8
 8017dfa:	4622      	mov	r2, r4
 8017dfc:	a949      	add	r1, sp, #292	; 0x124
 8017dfe:	f8cd 9000 	str.w	r9, [sp]
 8017e02:	a839      	add	r0, sp, #228	; 0xe4
 8017e04:	f003 f8e2 	bl	801afcc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8017e08:	42af      	cmp	r7, r5
 8017e0a:	af12      	add	r7, sp, #72	; 0x48
 8017e0c:	bfb7      	itett	lt
 8017e0e:	2300      	movlt	r3, #0
 8017e10:	2301      	movge	r3, #1
 8017e12:	ad29      	addlt	r5, sp, #164	; 0xa4
 8017e14:	ac19      	addlt	r4, sp, #100	; 0x64
 8017e16:	bfb1      	iteee	lt
 8017e18:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017e1a:	ad19      	addge	r5, sp, #100	; 0x64
 8017e1c:	930e      	strge	r3, [sp, #56]	; 0x38
 8017e1e:	ac29      	addge	r4, sp, #164	; 0xa4
 8017e20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017e22:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017e26:	e887 0003 	stmia.w	r7, {r0, r1}
 8017e2a:	b928      	cbnz	r0, 8017e38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8017e2c:	4b80      	ldr	r3, [pc, #512]	; (8018030 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8017e2e:	6818      	ldr	r0, [r3, #0]
 8017e30:	6803      	ldr	r3, [r0, #0]
 8017e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017e34:	4798      	blx	r3
 8017e36:	6038      	str	r0, [r7, #0]
 8017e38:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8017e3a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8017e3e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017e42:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8017e44:	930c      	str	r3, [sp, #48]	; 0x30
 8017e46:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017e48:	6963      	ldr	r3, [r4, #20]
 8017e4a:	440b      	add	r3, r1
 8017e4c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8017e50:	4408      	add	r0, r1
 8017e52:	b200      	sxth	r0, r0
 8017e54:	4283      	cmp	r3, r0
 8017e56:	900d      	str	r0, [sp, #52]	; 0x34
 8017e58:	f280 80dd 	bge.w	8018016 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8017e5c:	428b      	cmp	r3, r1
 8017e5e:	da08      	bge.n	8017e72 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8017e60:	2a00      	cmp	r2, #0
 8017e62:	dd06      	ble.n	8017e72 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8017e64:	1acb      	subs	r3, r1, r3
 8017e66:	429a      	cmp	r2, r3
 8017e68:	f2c0 80e4 	blt.w	8018034 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8017e6c:	2b00      	cmp	r3, #0
 8017e6e:	f300 80e2 	bgt.w	8018036 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8017e72:	6967      	ldr	r7, [r4, #20]
 8017e74:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8017e78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017e7a:	443b      	add	r3, r7
 8017e7c:	461f      	mov	r7, r3
 8017e7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017e80:	1bdf      	subs	r7, r3, r7
 8017e82:	4297      	cmp	r7, r2
 8017e84:	bfa8      	it	ge
 8017e86:	4617      	movge	r7, r2
 8017e88:	2f00      	cmp	r7, #0
 8017e8a:	f340 8166 	ble.w	801815a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8017e8e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8017e90:	6829      	ldr	r1, [r5, #0]
 8017e92:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017e96:	f9bb 3000 	ldrsh.w	r3, [fp]
 8017e9a:	4411      	add	r1, r2
 8017e9c:	6820      	ldr	r0, [r4, #0]
 8017e9e:	4299      	cmp	r1, r3
 8017ea0:	dd1a      	ble.n	8017ed8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8017ea2:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8017ea6:	4402      	add	r2, r0
 8017ea8:	440b      	add	r3, r1
 8017eaa:	b21b      	sxth	r3, r3
 8017eac:	429a      	cmp	r2, r3
 8017eae:	dc13      	bgt.n	8017ed8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8017eb0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017eb2:	a912      	add	r1, sp, #72	; 0x48
 8017eb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017eb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017eb8:	681b      	ldr	r3, [r3, #0]
 8017eba:	9206      	str	r2, [sp, #24]
 8017ebc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017ebe:	9500      	str	r5, [sp, #0]
 8017ec0:	9205      	str	r2, [sp, #20]
 8017ec2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017ec4:	e9cd b203 	strd	fp, r2, [sp, #12]
 8017ec8:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8017eca:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8017ece:	aa49      	add	r2, sp, #292	; 0x124
 8017ed0:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 8017ed4:	4623      	mov	r3, r4
 8017ed6:	47c8      	blx	r9
 8017ed8:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8017edc:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8017ee0:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8017ee4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017ee8:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8017eec:	68a1      	ldr	r1, [r4, #8]
 8017eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017ef2:	ed94 6a08 	vldr	s12, [r4, #32]
 8017ef6:	edd4 6a07 	vldr	s13, [r4, #28]
 8017efa:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8017efe:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017f02:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8017f06:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017f0a:	edc4 6a07 	vstr	s13, [r4, #28]
 8017f0e:	441a      	add	r2, r3
 8017f10:	6963      	ldr	r3, [r4, #20]
 8017f12:	3301      	adds	r3, #1
 8017f14:	6022      	str	r2, [r4, #0]
 8017f16:	6163      	str	r3, [r4, #20]
 8017f18:	69a3      	ldr	r3, [r4, #24]
 8017f1a:	3b01      	subs	r3, #1
 8017f1c:	61a3      	str	r3, [r4, #24]
 8017f1e:	6923      	ldr	r3, [r4, #16]
 8017f20:	440b      	add	r3, r1
 8017f22:	68e1      	ldr	r1, [r4, #12]
 8017f24:	428b      	cmp	r3, r1
 8017f26:	6123      	str	r3, [r4, #16]
 8017f28:	db15      	blt.n	8017f56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8017f2a:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8017f2e:	3201      	adds	r2, #1
 8017f30:	1a5b      	subs	r3, r3, r1
 8017f32:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017f36:	6022      	str	r2, [r4, #0]
 8017f38:	6123      	str	r3, [r4, #16]
 8017f3a:	edc4 6a07 	vstr	s13, [r4, #28]
 8017f3e:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8017f42:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017f46:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8017f4a:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8017f4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017f52:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8017f56:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8017f5a:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8017f5e:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8017f62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017f66:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8017f6a:	68a9      	ldr	r1, [r5, #8]
 8017f6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017f70:	ed95 6a08 	vldr	s12, [r5, #32]
 8017f74:	edd5 6a07 	vldr	s13, [r5, #28]
 8017f78:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8017f7c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017f80:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8017f84:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017f88:	edc5 6a07 	vstr	s13, [r5, #28]
 8017f8c:	441a      	add	r2, r3
 8017f8e:	696b      	ldr	r3, [r5, #20]
 8017f90:	3301      	adds	r3, #1
 8017f92:	602a      	str	r2, [r5, #0]
 8017f94:	616b      	str	r3, [r5, #20]
 8017f96:	69ab      	ldr	r3, [r5, #24]
 8017f98:	3b01      	subs	r3, #1
 8017f9a:	61ab      	str	r3, [r5, #24]
 8017f9c:	692b      	ldr	r3, [r5, #16]
 8017f9e:	440b      	add	r3, r1
 8017fa0:	68e9      	ldr	r1, [r5, #12]
 8017fa2:	428b      	cmp	r3, r1
 8017fa4:	612b      	str	r3, [r5, #16]
 8017fa6:	db15      	blt.n	8017fd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8017fa8:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8017fac:	3201      	adds	r2, #1
 8017fae:	1a5b      	subs	r3, r3, r1
 8017fb0:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017fb4:	602a      	str	r2, [r5, #0]
 8017fb6:	612b      	str	r3, [r5, #16]
 8017fb8:	edc5 6a07 	vstr	s13, [r5, #28]
 8017fbc:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8017fc0:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017fc4:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8017fc8:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8017fcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017fd0:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8017fd4:	3f01      	subs	r7, #1
 8017fd6:	e757      	b.n	8017e88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8017fd8:	4299      	cmp	r1, r3
 8017fda:	dc13      	bgt.n	8018004 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8017fdc:	429a      	cmp	r2, r3
 8017fde:	da14      	bge.n	801800a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8017fe0:	2502      	movs	r5, #2
 8017fe2:	2703      	movs	r7, #3
 8017fe4:	f04f 0800 	mov.w	r8, #0
 8017fe8:	46a9      	mov	r9, r5
 8017fea:	f04f 0a01 	mov.w	sl, #1
 8017fee:	e6ef      	b.n	8017dd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8017ff0:	2501      	movs	r5, #1
 8017ff2:	2700      	movs	r7, #0
 8017ff4:	46a9      	mov	r9, r5
 8017ff6:	46b8      	mov	r8, r7
 8017ff8:	f04f 0a02 	mov.w	sl, #2
 8017ffc:	e6e8      	b.n	8017dd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8017ffe:	2501      	movs	r5, #1
 8018000:	2702      	movs	r7, #2
 8018002:	e6e1      	b.n	8017dc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8018004:	2500      	movs	r5, #0
 8018006:	2701      	movs	r7, #1
 8018008:	e7f4      	b.n	8017ff4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801800a:	2702      	movs	r7, #2
 801800c:	2503      	movs	r5, #3
 801800e:	f04f 0900 	mov.w	r9, #0
 8018012:	46b8      	mov	r8, r7
 8018014:	e7e9      	b.n	8017fea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8018016:	4613      	mov	r3, r2
 8018018:	e728      	b.n	8017e6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801801a:	bf00      	nop
 801801c:	20014bdc 	.word	0x20014bdc
 8018020:	fffd8f01 	.word	0xfffd8f01
 8018024:	00027100 	.word	0x00027100
 8018028:	0004e1ff 	.word	0x0004e1ff
 801802c:	0004e1fe 	.word	0x0004e1fe
 8018030:	20014be4 	.word	0x20014be4
 8018034:	4613      	mov	r3, r2
 8018036:	992b      	ldr	r1, [sp, #172]	; 0xac
 8018038:	469e      	mov	lr, r3
 801803a:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801803c:	469c      	mov	ip, r3
 801803e:	9111      	str	r1, [sp, #68]	; 0x44
 8018040:	f04f 0900 	mov.w	r9, #0
 8018044:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8018048:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801804c:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8018050:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8018054:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8018058:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801805c:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8018060:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8018064:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8018068:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801806c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8018070:	f1bc 0f00 	cmp.w	ip, #0
 8018074:	d147      	bne.n	8018106 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8018076:	eb03 0c07 	add.w	ip, r3, r7
 801807a:	1ad7      	subs	r7, r2, r3
 801807c:	f1b9 0f00 	cmp.w	r9, #0
 8018080:	d009      	beq.n	8018096 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8018082:	9029      	str	r0, [sp, #164]	; 0xa4
 8018084:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8018088:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801808c:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8018090:	912d      	str	r1, [sp, #180]	; 0xb4
 8018092:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8018096:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8018098:	f04f 0800 	mov.w	r8, #0
 801809c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80180a0:	9111      	str	r1, [sp, #68]	; 0x44
 80180a2:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 80180a6:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 80180aa:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80180ae:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 80180b2:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80180b6:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 80180ba:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 80180be:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80180c2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80180c6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80180ca:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80180ce:	f1be 0f00 	cmp.w	lr, #0
 80180d2:	d031      	beq.n	8018138 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 80180d4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80180d6:	4450      	add	r0, sl
 80180d8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80180dc:	4431      	add	r1, r6
 80180de:	ee37 7a04 	vadd.f32	s14, s14, s8
 80180e2:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80180e6:	4549      	cmp	r1, r9
 80180e8:	db08      	blt.n	80180fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 80180ea:	ee77 7a85 	vadd.f32	s15, s15, s10
 80180ee:	3001      	adds	r0, #1
 80180f0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80180f4:	eba1 0109 	sub.w	r1, r1, r9
 80180f8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80180fc:	f10e 3eff 	add.w	lr, lr, #4294967295
 8018100:	f04f 0801 	mov.w	r8, #1
 8018104:	e7e3      	b.n	80180ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8018106:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8018108:	4450      	add	r0, sl
 801810a:	ee37 7a24 	vadd.f32	s14, s14, s9
 801810e:	4431      	add	r1, r6
 8018110:	ee77 7a84 	vadd.f32	s15, s15, s8
 8018114:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8018118:	4541      	cmp	r1, r8
 801811a:	db08      	blt.n	801812e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801811c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8018120:	3001      	adds	r0, #1
 8018122:	ee37 7a25 	vadd.f32	s14, s14, s11
 8018126:	eba1 0108 	sub.w	r1, r1, r8
 801812a:	ee77 7a86 	vadd.f32	s15, s15, s12
 801812e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018132:	f04f 0901 	mov.w	r9, #1
 8018136:	e79b      	b.n	8018070 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8018138:	449c      	add	ip, r3
 801813a:	1aff      	subs	r7, r7, r3
 801813c:	f1b8 0f00 	cmp.w	r8, #0
 8018140:	d009      	beq.n	8018156 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8018142:	9019      	str	r0, [sp, #100]	; 0x64
 8018144:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8018148:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801814c:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8018150:	911d      	str	r1, [sp, #116]	; 0x74
 8018152:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8018156:	1ad2      	subs	r2, r2, r3
 8018158:	e68b      	b.n	8017e72 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801815a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801815c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801815e:	2b00      	cmp	r3, #0
 8018160:	f000 80d1 	beq.w	8018306 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8018164:	ad19      	add	r5, sp, #100	; 0x64
 8018166:	ac39      	add	r4, sp, #228	; 0xe4
 8018168:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801816a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801816e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018172:	930c      	str	r3, [sp, #48]	; 0x30
 8018174:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018176:	6963      	ldr	r3, [r4, #20]
 8018178:	440b      	add	r3, r1
 801817a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801817e:	4408      	add	r0, r1
 8018180:	b200      	sxth	r0, r0
 8018182:	4283      	cmp	r3, r0
 8018184:	900d      	str	r0, [sp, #52]	; 0x34
 8018186:	f280 80c1 	bge.w	801830c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801818a:	428b      	cmp	r3, r1
 801818c:	da08      	bge.n	80181a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801818e:	2a00      	cmp	r2, #0
 8018190:	dd06      	ble.n	80181a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8018192:	1acb      	subs	r3, r1, r3
 8018194:	429a      	cmp	r2, r3
 8018196:	f2c0 80bb 	blt.w	8018310 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801819a:	2b00      	cmp	r3, #0
 801819c:	f300 80b9 	bgt.w	8018312 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 80181a0:	6967      	ldr	r7, [r4, #20]
 80181a2:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80181a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80181a8:	443b      	add	r3, r7
 80181aa:	461f      	mov	r7, r3
 80181ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80181ae:	1bdf      	subs	r7, r3, r7
 80181b0:	4297      	cmp	r7, r2
 80181b2:	bfa8      	it	ge
 80181b4:	4617      	movge	r7, r2
 80181b6:	2f00      	cmp	r7, #0
 80181b8:	f340 813c 	ble.w	8018434 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 80181bc:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80181be:	6829      	ldr	r1, [r5, #0]
 80181c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80181c4:	f9bb 3000 	ldrsh.w	r3, [fp]
 80181c8:	4411      	add	r1, r2
 80181ca:	6820      	ldr	r0, [r4, #0]
 80181cc:	4299      	cmp	r1, r3
 80181ce:	dd1a      	ble.n	8018206 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80181d0:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80181d4:	4402      	add	r2, r0
 80181d6:	440b      	add	r3, r1
 80181d8:	b21b      	sxth	r3, r3
 80181da:	429a      	cmp	r2, r3
 80181dc:	dc13      	bgt.n	8018206 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80181de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80181e0:	a912      	add	r1, sp, #72	; 0x48
 80181e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80181e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80181e6:	681b      	ldr	r3, [r3, #0]
 80181e8:	9206      	str	r2, [sp, #24]
 80181ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80181ec:	9500      	str	r5, [sp, #0]
 80181ee:	9205      	str	r2, [sp, #20]
 80181f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80181f2:	e9cd b203 	strd	fp, r2, [sp, #12]
 80181f6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80181f8:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80181fc:	aa49      	add	r2, sp, #292	; 0x124
 80181fe:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 8018202:	4623      	mov	r3, r4
 8018204:	47c8      	blx	r9
 8018206:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801820a:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801820e:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8018212:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018216:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801821a:	68a1      	ldr	r1, [r4, #8]
 801821c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018220:	ed94 6a08 	vldr	s12, [r4, #32]
 8018224:	edd4 6a07 	vldr	s13, [r4, #28]
 8018228:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801822c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018230:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8018234:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018238:	edc4 6a07 	vstr	s13, [r4, #28]
 801823c:	441a      	add	r2, r3
 801823e:	6963      	ldr	r3, [r4, #20]
 8018240:	3301      	adds	r3, #1
 8018242:	6022      	str	r2, [r4, #0]
 8018244:	6163      	str	r3, [r4, #20]
 8018246:	69a3      	ldr	r3, [r4, #24]
 8018248:	3b01      	subs	r3, #1
 801824a:	61a3      	str	r3, [r4, #24]
 801824c:	6923      	ldr	r3, [r4, #16]
 801824e:	440b      	add	r3, r1
 8018250:	68e1      	ldr	r1, [r4, #12]
 8018252:	428b      	cmp	r3, r1
 8018254:	6123      	str	r3, [r4, #16]
 8018256:	db15      	blt.n	8018284 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8018258:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801825c:	3201      	adds	r2, #1
 801825e:	1a5b      	subs	r3, r3, r1
 8018260:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018264:	6022      	str	r2, [r4, #0]
 8018266:	6123      	str	r3, [r4, #16]
 8018268:	edc4 6a07 	vstr	s13, [r4, #28]
 801826c:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8018270:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018274:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8018278:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801827c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018280:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8018284:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8018288:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801828c:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8018290:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018294:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8018298:	68a9      	ldr	r1, [r5, #8]
 801829a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801829e:	ed95 6a08 	vldr	s12, [r5, #32]
 80182a2:	edd5 6a07 	vldr	s13, [r5, #28]
 80182a6:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80182aa:	ee76 6a86 	vadd.f32	s13, s13, s12
 80182ae:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80182b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80182b6:	edc5 6a07 	vstr	s13, [r5, #28]
 80182ba:	441a      	add	r2, r3
 80182bc:	696b      	ldr	r3, [r5, #20]
 80182be:	3301      	adds	r3, #1
 80182c0:	602a      	str	r2, [r5, #0]
 80182c2:	616b      	str	r3, [r5, #20]
 80182c4:	69ab      	ldr	r3, [r5, #24]
 80182c6:	3b01      	subs	r3, #1
 80182c8:	61ab      	str	r3, [r5, #24]
 80182ca:	692b      	ldr	r3, [r5, #16]
 80182cc:	440b      	add	r3, r1
 80182ce:	68e9      	ldr	r1, [r5, #12]
 80182d0:	428b      	cmp	r3, r1
 80182d2:	612b      	str	r3, [r5, #16]
 80182d4:	db15      	blt.n	8018302 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 80182d6:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80182da:	3201      	adds	r2, #1
 80182dc:	1a5b      	subs	r3, r3, r1
 80182de:	ee76 6a26 	vadd.f32	s13, s12, s13
 80182e2:	602a      	str	r2, [r5, #0]
 80182e4:	612b      	str	r3, [r5, #16]
 80182e6:	edc5 6a07 	vstr	s13, [r5, #28]
 80182ea:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80182ee:	ee36 7a87 	vadd.f32	s14, s13, s14
 80182f2:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80182f6:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80182fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80182fe:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8018302:	3f01      	subs	r7, #1
 8018304:	e757      	b.n	80181b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8018306:	ad39      	add	r5, sp, #228	; 0xe4
 8018308:	ac19      	add	r4, sp, #100	; 0x64
 801830a:	e72d      	b.n	8018168 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801830c:	4613      	mov	r3, r2
 801830e:	e744      	b.n	801819a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8018310:	4613      	mov	r3, r2
 8018312:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8018314:	469e      	mov	lr, r3
 8018316:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801831a:	461f      	mov	r7, r3
 801831c:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8018320:	f04f 0900 	mov.w	r9, #0
 8018324:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8018328:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801832c:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8018330:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8018334:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8018338:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801833a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801833e:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8018342:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8018346:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801834a:	960e      	str	r6, [sp, #56]	; 0x38
 801834c:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8018350:	2f00      	cmp	r7, #0
 8018352:	d146      	bne.n	80183e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8018354:	449c      	add	ip, r3
 8018356:	1ad7      	subs	r7, r2, r3
 8018358:	f1b9 0f00 	cmp.w	r9, #0
 801835c:	d009      	beq.n	8018372 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801835e:	9039      	str	r0, [sp, #228]	; 0xe4
 8018360:	913d      	str	r1, [sp, #244]	; 0xf4
 8018362:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8018366:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801836a:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801836e:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8018372:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8018374:	f04f 0800 	mov.w	r8, #0
 8018378:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801837c:	910e      	str	r1, [sp, #56]	; 0x38
 801837e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8018382:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8018386:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801838a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801838e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8018392:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8018396:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801839a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801839e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80183a2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80183a6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80183aa:	f1be 0f00 	cmp.w	lr, #0
 80183ae:	d030      	beq.n	8018412 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 80183b0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80183b2:	4450      	add	r0, sl
 80183b4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80183b8:	4431      	add	r1, r6
 80183ba:	ee37 7a04 	vadd.f32	s14, s14, s8
 80183be:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80183c2:	4549      	cmp	r1, r9
 80183c4:	db08      	blt.n	80183d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 80183c6:	ee77 7a85 	vadd.f32	s15, s15, s10
 80183ca:	3001      	adds	r0, #1
 80183cc:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80183d0:	eba1 0109 	sub.w	r1, r1, r9
 80183d4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80183d8:	f10e 3eff 	add.w	lr, lr, #4294967295
 80183dc:	f04f 0801 	mov.w	r8, #1
 80183e0:	e7e3      	b.n	80183aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 80183e2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80183e4:	4450      	add	r0, sl
 80183e6:	ee37 7a24 	vadd.f32	s14, s14, s9
 80183ea:	4431      	add	r1, r6
 80183ec:	ee77 7a84 	vadd.f32	s15, s15, s8
 80183f0:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80183f4:	4541      	cmp	r1, r8
 80183f6:	db08      	blt.n	801840a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80183f8:	ee76 6a85 	vadd.f32	s13, s13, s10
 80183fc:	3001      	adds	r0, #1
 80183fe:	ee37 7a25 	vadd.f32	s14, s14, s11
 8018402:	eba1 0108 	sub.w	r1, r1, r8
 8018406:	ee77 7a86 	vadd.f32	s15, s15, s12
 801840a:	3f01      	subs	r7, #1
 801840c:	f04f 0901 	mov.w	r9, #1
 8018410:	e79e      	b.n	8018350 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8018412:	449c      	add	ip, r3
 8018414:	1aff      	subs	r7, r7, r3
 8018416:	f1b8 0f00 	cmp.w	r8, #0
 801841a:	d009      	beq.n	8018430 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801841c:	9019      	str	r0, [sp, #100]	; 0x64
 801841e:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8018422:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8018426:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801842a:	911d      	str	r1, [sp, #116]	; 0x74
 801842c:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8018430:	1ad2      	subs	r2, r2, r3
 8018432:	e6b5      	b.n	80181a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8018434:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018436:	681b      	ldr	r3, [r3, #0]
 8018438:	b923      	cbnz	r3, 8018444 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801843a:	4b04      	ldr	r3, [pc, #16]	; (801844c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801843c:	6818      	ldr	r0, [r3, #0]
 801843e:	6803      	ldr	r3, [r0, #0]
 8018440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018442:	4798      	blx	r3
 8018444:	b05b      	add	sp, #364	; 0x16c
 8018446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801844a:	bf00      	nop
 801844c:	20014be4 	.word	0x20014be4

08018450 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8018450:	2b02      	cmp	r3, #2
 8018452:	b510      	push	{r4, lr}
 8018454:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018458:	d00b      	beq.n	8018472 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801845a:	2b03      	cmp	r3, #3
 801845c:	d00e      	beq.n	801847c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801845e:	2b01      	cmp	r3, #1
 8018460:	d001      	beq.n	8018466 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8018462:	1860      	adds	r0, r4, r1
 8018464:	bd10      	pop	{r4, pc}
 8018466:	8880      	ldrh	r0, [r0, #4]
 8018468:	4420      	add	r0, r4
 801846a:	b200      	sxth	r0, r0
 801846c:	1a80      	subs	r0, r0, r2
 801846e:	3801      	subs	r0, #1
 8018470:	e7f8      	b.n	8018464 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8018472:	8880      	ldrh	r0, [r0, #4]
 8018474:	4420      	add	r0, r4
 8018476:	b200      	sxth	r0, r0
 8018478:	1a40      	subs	r0, r0, r1
 801847a:	e7f8      	b.n	801846e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801847c:	18a0      	adds	r0, r4, r2
 801847e:	e7f1      	b.n	8018464 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08018480 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8018480:	2b02      	cmp	r3, #2
 8018482:	b510      	push	{r4, lr}
 8018484:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8018488:	d006      	beq.n	8018498 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801848a:	2b03      	cmp	r3, #3
 801848c:	d00a      	beq.n	80184a4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801848e:	2b01      	cmp	r3, #1
 8018490:	bf14      	ite	ne
 8018492:	18a0      	addne	r0, r4, r2
 8018494:	1860      	addeq	r0, r4, r1
 8018496:	bd10      	pop	{r4, pc}
 8018498:	88c0      	ldrh	r0, [r0, #6]
 801849a:	4420      	add	r0, r4
 801849c:	b200      	sxth	r0, r0
 801849e:	1a80      	subs	r0, r0, r2
 80184a0:	3801      	subs	r0, #1
 80184a2:	e7f8      	b.n	8018496 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 80184a4:	88c0      	ldrh	r0, [r0, #6]
 80184a6:	4420      	add	r0, r4
 80184a8:	b200      	sxth	r0, r0
 80184aa:	1a40      	subs	r0, r0, r1
 80184ac:	e7f8      	b.n	80184a0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

080184b0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80184b0:	4b01      	ldr	r3, [pc, #4]	; (80184b8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80184b2:	2200      	movs	r2, #0
 80184b4:	601a      	str	r2, [r3, #0]
 80184b6:	4770      	bx	lr
 80184b8:	20014bec 	.word	0x20014bec

080184bc <_ZN8touchgfx16TouchCalibration4clzuEm>:
 80184bc:	4603      	mov	r3, r0
 80184be:	b1c8      	cbz	r0, 80184f4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 80184c0:	0c02      	lsrs	r2, r0, #16
 80184c2:	0412      	lsls	r2, r2, #16
 80184c4:	b9a2      	cbnz	r2, 80184f0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 80184c6:	0403      	lsls	r3, r0, #16
 80184c8:	2010      	movs	r0, #16
 80184ca:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80184ce:	bf04      	itt	eq
 80184d0:	021b      	lsleq	r3, r3, #8
 80184d2:	3008      	addeq	r0, #8
 80184d4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80184d8:	bf04      	itt	eq
 80184da:	011b      	lsleq	r3, r3, #4
 80184dc:	3004      	addeq	r0, #4
 80184de:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80184e2:	bf04      	itt	eq
 80184e4:	009b      	lsleq	r3, r3, #2
 80184e6:	3002      	addeq	r0, #2
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	db04      	blt.n	80184f6 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 80184ec:	3001      	adds	r0, #1
 80184ee:	4770      	bx	lr
 80184f0:	2000      	movs	r0, #0
 80184f2:	e7ea      	b.n	80184ca <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 80184f4:	2020      	movs	r0, #32
 80184f6:	4770      	bx	lr

080184f8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 80184f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184fc:	b087      	sub	sp, #28
 80184fe:	4681      	mov	r9, r0
 8018500:	4698      	mov	r8, r3
 8018502:	4610      	mov	r0, r2
 8018504:	460d      	mov	r5, r1
 8018506:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801850a:	b981      	cbnz	r1, 801852e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801850c:	b14b      	cbz	r3, 8018522 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801850e:	460b      	mov	r3, r1
 8018510:	464a      	mov	r2, r9
 8018512:	4641      	mov	r1, r8
 8018514:	e9cd 4700 	strd	r4, r7, [sp]
 8018518:	f7ff ffee 	bl	80184f8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801851c:	b007      	add	sp, #28
 801851e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018522:	f04f 33ff 	mov.w	r3, #4294967295
 8018526:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801852a:	603b      	str	r3, [r7, #0]
 801852c:	e7f6      	b.n	801851c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801852e:	fa32 fa01 	lsrs.w	sl, r2, r1
 8018532:	d107      	bne.n	8018544 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8018534:	fb09 f602 	mul.w	r6, r9, r2
 8018538:	fbb6 f0f4 	udiv	r0, r6, r4
 801853c:	fb04 6610 	mls	r6, r4, r0, r6
 8018540:	603e      	str	r6, [r7, #0]
 8018542:	e7eb      	b.n	801851c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8018544:	2601      	movs	r6, #1
 8018546:	fa09 fb01 	lsl.w	fp, r9, r1
 801854a:	408e      	lsls	r6, r1
 801854c:	fbbb f3f4 	udiv	r3, fp, r4
 8018550:	3e01      	subs	r6, #1
 8018552:	9302      	str	r3, [sp, #8]
 8018554:	fb0a f303 	mul.w	r3, sl, r3
 8018558:	4016      	ands	r6, r2
 801855a:	9303      	str	r3, [sp, #12]
 801855c:	4630      	mov	r0, r6
 801855e:	f7ff ffad 	bl	80184bc <_ZN8touchgfx16TouchCalibration4clzuEm>
 8018562:	464a      	mov	r2, r9
 8018564:	460b      	mov	r3, r1
 8018566:	4601      	mov	r1, r0
 8018568:	4630      	mov	r0, r6
 801856a:	e9cd 4700 	strd	r4, r7, [sp]
 801856e:	f7ff ffc3 	bl	80184f8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8018572:	9b02      	ldr	r3, [sp, #8]
 8018574:	4606      	mov	r6, r0
 8018576:	eb05 0108 	add.w	r1, r5, r8
 801857a:	fb04 bb13 	mls	fp, r4, r3, fp
 801857e:	4658      	mov	r0, fp
 8018580:	f7ff ff9c 	bl	80184bc <_ZN8touchgfx16TouchCalibration4clzuEm>
 8018584:	ab05      	add	r3, sp, #20
 8018586:	465a      	mov	r2, fp
 8018588:	e9cd 4300 	strd	r4, r3, [sp]
 801858c:	4603      	mov	r3, r0
 801858e:	4650      	mov	r0, sl
 8018590:	f7ff ffb2 	bl	80184f8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8018594:	6839      	ldr	r1, [r7, #0]
 8018596:	9a05      	ldr	r2, [sp, #20]
 8018598:	9b03      	ldr	r3, [sp, #12]
 801859a:	4411      	add	r1, r2
 801859c:	fbb1 f2f4 	udiv	r2, r1, r4
 80185a0:	18d3      	adds	r3, r2, r3
 80185a2:	fb04 1412 	mls	r4, r4, r2, r1
 80185a6:	441e      	add	r6, r3
 80185a8:	603c      	str	r4, [r7, #0]
 80185aa:	4430      	add	r0, r6
 80185ac:	e7b6      	b.n	801851c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

080185ae <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 80185ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80185b2:	b085      	sub	sp, #20
 80185b4:	f1b0 0900 	subs.w	r9, r0, #0
 80185b8:	461d      	mov	r5, r3
 80185ba:	4617      	mov	r7, r2
 80185bc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80185be:	bfbb      	ittet	lt
 80185c0:	f1c9 0900 	rsblt	r9, r9, #0
 80185c4:	f04f 36ff 	movlt.w	r6, #4294967295
 80185c8:	2601      	movge	r6, #1
 80185ca:	6823      	ldrlt	r3, [r4, #0]
 80185cc:	bfbc      	itt	lt
 80185ce:	425b      	neglt	r3, r3
 80185d0:	6023      	strlt	r3, [r4, #0]
 80185d2:	2a00      	cmp	r2, #0
 80185d4:	da04      	bge.n	80185e0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 80185d6:	6823      	ldr	r3, [r4, #0]
 80185d8:	4257      	negs	r7, r2
 80185da:	4276      	negs	r6, r6
 80185dc:	425b      	negs	r3, r3
 80185de:	6023      	str	r3, [r4, #0]
 80185e0:	2d00      	cmp	r5, #0
 80185e2:	4638      	mov	r0, r7
 80185e4:	bfba      	itte	lt
 80185e6:	426d      	neglt	r5, r5
 80185e8:	f04f 38ff 	movlt.w	r8, #4294967295
 80185ec:	f04f 0801 	movge.w	r8, #1
 80185f0:	f7ff ff64 	bl	80184bc <_ZN8touchgfx16TouchCalibration4clzuEm>
 80185f4:	ab03      	add	r3, sp, #12
 80185f6:	463a      	mov	r2, r7
 80185f8:	e9cd 5300 	strd	r5, r3, [sp]
 80185fc:	4603      	mov	r3, r0
 80185fe:	4648      	mov	r0, r9
 8018600:	f7ff ff7a 	bl	80184f8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8018604:	6823      	ldr	r3, [r4, #0]
 8018606:	9a03      	ldr	r2, [sp, #12]
 8018608:	4546      	cmp	r6, r8
 801860a:	441a      	add	r2, r3
 801860c:	fb92 f3f5 	sdiv	r3, r2, r5
 8018610:	4418      	add	r0, r3
 8018612:	fb05 2313 	mls	r3, r5, r3, r2
 8018616:	bf18      	it	ne
 8018618:	4240      	negne	r0, r0
 801861a:	1c72      	adds	r2, r6, #1
 801861c:	6023      	str	r3, [r4, #0]
 801861e:	d105      	bne.n	801862c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8018620:	2b00      	cmp	r3, #0
 8018622:	f1c3 0200 	rsb	r2, r3, #0
 8018626:	db0b      	blt.n	8018640 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8018628:	6022      	str	r2, [r4, #0]
 801862a:	e006      	b.n	801863a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801862c:	2e01      	cmp	r6, #1
 801862e:	d104      	bne.n	801863a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8018630:	2b00      	cmp	r3, #0
 8018632:	da02      	bge.n	801863a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8018634:	442b      	add	r3, r5
 8018636:	3801      	subs	r0, #1
 8018638:	6023      	str	r3, [r4, #0]
 801863a:	b005      	add	sp, #20
 801863c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018640:	3801      	subs	r0, #1
 8018642:	1b52      	subs	r2, r2, r5
 8018644:	e7f0      	b.n	8018628 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08018648 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8018648:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801864c:	4c1c      	ldr	r4, [pc, #112]	; (80186c0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801864e:	4605      	mov	r5, r0
 8018650:	6807      	ldr	r7, [r0, #0]
 8018652:	69a3      	ldr	r3, [r4, #24]
 8018654:	b92b      	cbnz	r3, 8018662 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8018656:	6840      	ldr	r0, [r0, #4]
 8018658:	e9c5 7000 	strd	r7, r0, [r5]
 801865c:	b004      	add	sp, #16
 801865e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018662:	f04f 0802 	mov.w	r8, #2
 8018666:	68a2      	ldr	r2, [r4, #8]
 8018668:	ae04      	add	r6, sp, #16
 801866a:	6820      	ldr	r0, [r4, #0]
 801866c:	fb93 f1f8 	sdiv	r1, r3, r8
 8018670:	440a      	add	r2, r1
 8018672:	69e1      	ldr	r1, [r4, #28]
 8018674:	f846 2d04 	str.w	r2, [r6, #-4]!
 8018678:	463a      	mov	r2, r7
 801867a:	9600      	str	r6, [sp, #0]
 801867c:	f7ff ff97 	bl	80185ae <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8018680:	69a3      	ldr	r3, [r4, #24]
 8018682:	4607      	mov	r7, r0
 8018684:	686a      	ldr	r2, [r5, #4]
 8018686:	6a21      	ldr	r1, [r4, #32]
 8018688:	9600      	str	r6, [sp, #0]
 801868a:	6860      	ldr	r0, [r4, #4]
 801868c:	f7ff ff8f 	bl	80185ae <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8018690:	69a3      	ldr	r3, [r4, #24]
 8018692:	6962      	ldr	r2, [r4, #20]
 8018694:	4407      	add	r7, r0
 8018696:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8018698:	9600      	str	r6, [sp, #0]
 801869a:	68e0      	ldr	r0, [r4, #12]
 801869c:	fb93 f8f8 	sdiv	r8, r3, r8
 80186a0:	4442      	add	r2, r8
 80186a2:	9203      	str	r2, [sp, #12]
 80186a4:	682a      	ldr	r2, [r5, #0]
 80186a6:	f7ff ff82 	bl	80185ae <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80186aa:	4680      	mov	r8, r0
 80186ac:	9600      	str	r6, [sp, #0]
 80186ae:	69a3      	ldr	r3, [r4, #24]
 80186b0:	686a      	ldr	r2, [r5, #4]
 80186b2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80186b4:	6920      	ldr	r0, [r4, #16]
 80186b6:	f7ff ff7a 	bl	80185ae <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80186ba:	4440      	add	r0, r8
 80186bc:	e7cc      	b.n	8018658 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 80186be:	bf00      	nop
 80186c0:	20014bf0 	.word	0x20014bf0

080186c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 80186c4:	4b07      	ldr	r3, [pc, #28]	; (80186e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 80186c6:	781b      	ldrb	r3, [r3, #0]
 80186c8:	2b01      	cmp	r3, #1
 80186ca:	d109      	bne.n	80186e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 80186cc:	f9b1 3000 	ldrsh.w	r3, [r1]
 80186d0:	f9b0 2000 	ldrsh.w	r2, [r0]
 80186d4:	8003      	strh	r3, [r0, #0]
 80186d6:	4b04      	ldr	r3, [pc, #16]	; (80186e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 80186d8:	881b      	ldrh	r3, [r3, #0]
 80186da:	3b01      	subs	r3, #1
 80186dc:	1a9b      	subs	r3, r3, r2
 80186de:	800b      	strh	r3, [r1, #0]
 80186e0:	4770      	bx	lr
 80186e2:	bf00      	nop
 80186e4:	20014bdc 	.word	0x20014bdc
 80186e8:	20014be0 	.word	0x20014be0

080186ec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80186ec:	4b07      	ldr	r3, [pc, #28]	; (801870c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80186ee:	b510      	push	{r4, lr}
 80186f0:	781b      	ldrb	r3, [r3, #0]
 80186f2:	2b01      	cmp	r3, #1
 80186f4:	d108      	bne.n	8018708 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80186f6:	4b06      	ldr	r3, [pc, #24]	; (8018710 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 80186f8:	880c      	ldrh	r4, [r1, #0]
 80186fa:	881b      	ldrh	r3, [r3, #0]
 80186fc:	f9b0 2000 	ldrsh.w	r2, [r0]
 8018700:	3b01      	subs	r3, #1
 8018702:	1b1b      	subs	r3, r3, r4
 8018704:	8003      	strh	r3, [r0, #0]
 8018706:	800a      	strh	r2, [r1, #0]
 8018708:	bd10      	pop	{r4, pc}
 801870a:	bf00      	nop
 801870c:	20014bdc 	.word	0x20014bdc
 8018710:	20014be0 	.word	0x20014be0

08018714 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8018714:	4b0a      	ldr	r3, [pc, #40]	; (8018740 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8018716:	b510      	push	{r4, lr}
 8018718:	781b      	ldrb	r3, [r3, #0]
 801871a:	2b01      	cmp	r3, #1
 801871c:	d10e      	bne.n	801873c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801871e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8018722:	8843      	ldrh	r3, [r0, #2]
 8018724:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018728:	18ca      	adds	r2, r1, r3
 801872a:	4b06      	ldr	r3, [pc, #24]	; (8018744 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801872c:	8044      	strh	r4, [r0, #2]
 801872e:	881b      	ldrh	r3, [r3, #0]
 8018730:	1a9b      	subs	r3, r3, r2
 8018732:	8003      	strh	r3, [r0, #0]
 8018734:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018738:	8081      	strh	r1, [r0, #4]
 801873a:	80c3      	strh	r3, [r0, #6]
 801873c:	bd10      	pop	{r4, pc}
 801873e:	bf00      	nop
 8018740:	20014bdc 	.word	0x20014bdc
 8018744:	20014be0 	.word	0x20014be0

08018748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8018748:	4b08      	ldr	r3, [pc, #32]	; (801876c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801874a:	781b      	ldrb	r3, [r3, #0]
 801874c:	2b01      	cmp	r3, #1
 801874e:	d10c      	bne.n	801876a <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8018750:	8803      	ldrh	r3, [r0, #0]
 8018752:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8018756:	8842      	ldrh	r2, [r0, #2]
 8018758:	8002      	strh	r2, [r0, #0]
 801875a:	185a      	adds	r2, r3, r1
 801875c:	4b04      	ldr	r3, [pc, #16]	; (8018770 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801875e:	881b      	ldrh	r3, [r3, #0]
 8018760:	1a9b      	subs	r3, r3, r2
 8018762:	8043      	strh	r3, [r0, #2]
 8018764:	88c3      	ldrh	r3, [r0, #6]
 8018766:	80c1      	strh	r1, [r0, #6]
 8018768:	8083      	strh	r3, [r0, #4]
 801876a:	4770      	bx	lr
 801876c:	20014bdc 	.word	0x20014bdc
 8018770:	20014be0 	.word	0x20014be0

08018774 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8018774:	4b07      	ldr	r3, [pc, #28]	; (8018794 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8018776:	b510      	push	{r4, lr}
 8018778:	781b      	ldrb	r3, [r3, #0]
 801877a:	2b01      	cmp	r3, #1
 801877c:	d108      	bne.n	8018790 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801877e:	f9b1 3000 	ldrsh.w	r3, [r1]
 8018782:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018786:	8003      	strh	r3, [r0, #0]
 8018788:	8893      	ldrh	r3, [r2, #4]
 801878a:	3b01      	subs	r3, #1
 801878c:	1b1b      	subs	r3, r3, r4
 801878e:	800b      	strh	r3, [r1, #0]
 8018790:	bd10      	pop	{r4, pc}
 8018792:	bf00      	nop
 8018794:	20014bdc 	.word	0x20014bdc

08018798 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8018798:	4b0a      	ldr	r3, [pc, #40]	; (80187c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801879a:	460a      	mov	r2, r1
 801879c:	b510      	push	{r4, lr}
 801879e:	781b      	ldrb	r3, [r3, #0]
 80187a0:	2b01      	cmp	r3, #1
 80187a2:	d10d      	bne.n	80187c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 80187a4:	8881      	ldrh	r1, [r0, #4]
 80187a6:	8803      	ldrh	r3, [r0, #0]
 80187a8:	440b      	add	r3, r1
 80187aa:	4601      	mov	r1, r0
 80187ac:	3b01      	subs	r3, #1
 80187ae:	f821 3b02 	strh.w	r3, [r1], #2
 80187b2:	f7ff ffdf 	bl	8018774 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80187b6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80187ba:	88c2      	ldrh	r2, [r0, #6]
 80187bc:	80c3      	strh	r3, [r0, #6]
 80187be:	8082      	strh	r2, [r0, #4]
 80187c0:	bd10      	pop	{r4, pc}
 80187c2:	bf00      	nop
 80187c4:	20014bdc 	.word	0x20014bdc

080187c8 <_ZN8touchgfx11Application13requestRedrawEv>:
 80187c8:	4b06      	ldr	r3, [pc, #24]	; (80187e4 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 80187ca:	2100      	movs	r1, #0
 80187cc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80187d0:	4b05      	ldr	r3, [pc, #20]	; (80187e8 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 80187d2:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 80187d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80187da:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 80187de:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 80187e2:	4770      	bx	lr
 80187e4:	20014bd8 	.word	0x20014bd8
 80187e8:	20014bda 	.word	0x20014bda

080187ec <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 80187ec:	4b03      	ldr	r3, [pc, #12]	; (80187fc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 80187ee:	6818      	ldr	r0, [r3, #0]
 80187f0:	b110      	cbz	r0, 80187f8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 80187f2:	6803      	ldr	r3, [r0, #0]
 80187f4:	699b      	ldr	r3, [r3, #24]
 80187f6:	4718      	bx	r3
 80187f8:	4770      	bx	lr
 80187fa:	bf00      	nop
 80187fc:	20014c20 	.word	0x20014c20

08018800 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8018800:	4770      	bx	lr
	...

08018804 <_ZN8touchgfx11Application4drawEv>:
 8018804:	4b09      	ldr	r3, [pc, #36]	; (801882c <_ZN8touchgfx11Application4drawEv+0x28>)
 8018806:	b507      	push	{r0, r1, r2, lr}
 8018808:	f9b3 2000 	ldrsh.w	r2, [r3]
 801880c:	2100      	movs	r1, #0
 801880e:	4b08      	ldr	r3, [pc, #32]	; (8018830 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8018810:	9100      	str	r1, [sp, #0]
 8018812:	4669      	mov	r1, sp
 8018814:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018818:	f8ad 2004 	strh.w	r2, [sp, #4]
 801881c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018820:	6803      	ldr	r3, [r0, #0]
 8018822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018824:	4798      	blx	r3
 8018826:	b003      	add	sp, #12
 8018828:	f85d fb04 	ldr.w	pc, [sp], #4
 801882c:	20014bd8 	.word	0x20014bd8
 8018830:	20014bda 	.word	0x20014bda

08018834 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8018834:	4b03      	ldr	r3, [pc, #12]	; (8018844 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8018836:	6818      	ldr	r0, [r3, #0]
 8018838:	b110      	cbz	r0, 8018840 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801883a:	6803      	ldr	r3, [r0, #0]
 801883c:	69db      	ldr	r3, [r3, #28]
 801883e:	4718      	bx	r3
 8018840:	4770      	bx	lr
 8018842:	bf00      	nop
 8018844:	20014c20 	.word	0x20014c20

08018848 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8018848:	4b03      	ldr	r3, [pc, #12]	; (8018858 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801884a:	6818      	ldr	r0, [r3, #0]
 801884c:	b110      	cbz	r0, 8018854 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801884e:	6803      	ldr	r3, [r0, #0]
 8018850:	6a1b      	ldr	r3, [r3, #32]
 8018852:	4718      	bx	r3
 8018854:	4770      	bx	lr
 8018856:	bf00      	nop
 8018858:	20014c20 	.word	0x20014c20

0801885c <_ZN8touchgfx11Application14handleKeyEventEh>:
 801885c:	4b03      	ldr	r3, [pc, #12]	; (801886c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801885e:	6818      	ldr	r0, [r3, #0]
 8018860:	b110      	cbz	r0, 8018868 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8018862:	6803      	ldr	r3, [r0, #0]
 8018864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018866:	4718      	bx	r3
 8018868:	4770      	bx	lr
 801886a:	bf00      	nop
 801886c:	20014c20 	.word	0x20014c20

08018870 <_ZN8touchgfx11ApplicationD1Ev>:
 8018870:	4770      	bx	lr

08018872 <_ZN8touchgfx11ApplicationD0Ev>:
 8018872:	b510      	push	{r4, lr}
 8018874:	4604      	mov	r4, r0
 8018876:	f44f 719c 	mov.w	r1, #312	; 0x138
 801887a:	f00e fd95 	bl	80273a8 <_ZdlPvj>
 801887e:	4620      	mov	r0, r4
 8018880:	bd10      	pop	{r4, pc}
	...

08018884 <_ZN8touchgfx11Application15handleTickEventEv>:
 8018884:	b570      	push	{r4, r5, r6, lr}
 8018886:	4d38      	ldr	r5, [pc, #224]	; (8018968 <_ZN8touchgfx11Application15handleTickEventEv+0xe4>)
 8018888:	4604      	mov	r4, r0
 801888a:	6828      	ldr	r0, [r5, #0]
 801888c:	b140      	cbz	r0, 80188a0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801888e:	7a03      	ldrb	r3, [r0, #8]
 8018890:	b933      	cbnz	r3, 80188a0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8018892:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8018896:	6803      	ldr	r3, [r0, #0]
 8018898:	689b      	ldr	r3, [r3, #8]
 801889a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801889e:	4718      	bx	r3
 80188a0:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 80188a4:	b97b      	cbnz	r3, 80188c6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80188a6:	b170      	cbz	r0, 80188c6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80188a8:	7a03      	ldrb	r3, [r0, #8]
 80188aa:	b163      	cbz	r3, 80188c6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80188ac:	4b2f      	ldr	r3, [pc, #188]	; (801896c <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 80188ae:	6818      	ldr	r0, [r3, #0]
 80188b0:	b110      	cbz	r0, 80188b8 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 80188b2:	6803      	ldr	r3, [r0, #0]
 80188b4:	691b      	ldr	r3, [r3, #16]
 80188b6:	4798      	blx	r3
 80188b8:	6828      	ldr	r0, [r5, #0]
 80188ba:	6803      	ldr	r3, [r0, #0]
 80188bc:	68db      	ldr	r3, [r3, #12]
 80188be:	4798      	blx	r3
 80188c0:	2301      	movs	r3, #1
 80188c2:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 80188c6:	2500      	movs	r5, #0
 80188c8:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 80188cc:	42a8      	cmp	r0, r5
 80188ce:	dd0c      	ble.n	80188ea <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 80188d0:	1963      	adds	r3, r4, r5
 80188d2:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80188d6:	b132      	cbz	r2, 80188e6 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 80188d8:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 80188dc:	4413      	add	r3, r2
 80188de:	6858      	ldr	r0, [r3, #4]
 80188e0:	6803      	ldr	r3, [r0, #0]
 80188e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80188e4:	4798      	blx	r3
 80188e6:	3501      	adds	r5, #1
 80188e8:	e7ee      	b.n	80188c8 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 80188ea:	2300      	movs	r3, #0
 80188ec:	461a      	mov	r2, r3
 80188ee:	4298      	cmp	r0, r3
 80188f0:	d10f      	bne.n	8018912 <_ZN8touchgfx11Application15handleTickEventEv+0x8e>
 80188f2:	1d25      	adds	r5, r4, #4
 80188f4:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 80188f8:	4291      	cmp	r1, r2
 80188fa:	dd2d      	ble.n	8018958 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 80188fc:	1e48      	subs	r0, r1, #1
 80188fe:	b280      	uxth	r0, r0
 8018900:	4288      	cmp	r0, r1
 8018902:	d31a      	bcc.n	801893a <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 8018904:	4b1a      	ldr	r3, [pc, #104]	; (8018970 <_ZN8touchgfx11Application15handleTickEventEv+0xec>)
 8018906:	f240 11a9 	movw	r1, #425	; 0x1a9
 801890a:	4a1a      	ldr	r2, [pc, #104]	; (8018974 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 801890c:	481a      	ldr	r0, [pc, #104]	; (8018978 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801890e:	f00e fd79 	bl	8027404 <__assert_func>
 8018912:	18e1      	adds	r1, r4, r3
 8018914:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8018918:	b16d      	cbz	r5, 8018936 <_ZN8touchgfx11Application15handleTickEventEv+0xb2>
 801891a:	429a      	cmp	r2, r3
 801891c:	d00a      	beq.n	8018934 <_ZN8touchgfx11Application15handleTickEventEv+0xb0>
 801891e:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8018922:	4431      	add	r1, r6
 8018924:	684e      	ldr	r6, [r1, #4]
 8018926:	b291      	uxth	r1, r2
 8018928:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801892c:	604e      	str	r6, [r1, #4]
 801892e:	18a1      	adds	r1, r4, r2
 8018930:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8018934:	3201      	adds	r2, #1
 8018936:	3301      	adds	r3, #1
 8018938:	e7d9      	b.n	80188ee <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801893a:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 801893e:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8018942:	3304      	adds	r3, #4
 8018944:	428b      	cmp	r3, r1
 8018946:	d004      	beq.n	8018952 <_ZN8touchgfx11Application15handleTickEventEv+0xce>
 8018948:	f853 6f04 	ldr.w	r6, [r3, #4]!
 801894c:	f843 6c04 	str.w	r6, [r3, #-4]
 8018950:	e7f8      	b.n	8018944 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 8018952:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 8018956:	e7cd      	b.n	80188f4 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 8018958:	4b04      	ldr	r3, [pc, #16]	; (801896c <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 801895a:	6818      	ldr	r0, [r3, #0]
 801895c:	b110      	cbz	r0, 8018964 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 801895e:	6803      	ldr	r3, [r0, #0]
 8018960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018962:	e79a      	b.n	801889a <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8018964:	bd70      	pop	{r4, r5, r6, pc}
 8018966:	bf00      	nop
 8018968:	20014c24 	.word	0x20014c24
 801896c:	20014c20 	.word	0x20014c20
 8018970:	0802d593 	.word	0x0802d593
 8018974:	0802d780 	.word	0x0802d780
 8018978:	0802d5a1 	.word	0x0802d5a1

0801897c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801897c:	b570      	push	{r4, r5, r6, lr}
 801897e:	4606      	mov	r6, r0
 8018980:	460c      	mov	r4, r1
 8018982:	b929      	cbnz	r1, 8018990 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8018984:	4b0c      	ldr	r3, [pc, #48]	; (80189b8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 8018986:	2167      	movs	r1, #103	; 0x67
 8018988:	4a0c      	ldr	r2, [pc, #48]	; (80189bc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801898a:	480d      	ldr	r0, [pc, #52]	; (80189c0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801898c:	f00e fd3a 	bl	8027404 <__assert_func>
 8018990:	2300      	movs	r3, #0
 8018992:	4d0c      	ldr	r5, [pc, #48]	; (80189c4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 8018994:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8018998:	6828      	ldr	r0, [r5, #0]
 801899a:	b110      	cbz	r0, 80189a2 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801899c:	6803      	ldr	r3, [r0, #0]
 801899e:	695b      	ldr	r3, [r3, #20]
 80189a0:	4798      	blx	r3
 80189a2:	602c      	str	r4, [r5, #0]
 80189a4:	4620      	mov	r0, r4
 80189a6:	6823      	ldr	r3, [r4, #0]
 80189a8:	68db      	ldr	r3, [r3, #12]
 80189aa:	4798      	blx	r3
 80189ac:	6833      	ldr	r3, [r6, #0]
 80189ae:	4630      	mov	r0, r6
 80189b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80189b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80189b6:	4718      	bx	r3
 80189b8:	0802d55f 	.word	0x0802d55f
 80189bc:	0802d640 	.word	0x0802d640
 80189c0:	0802d569 	.word	0x0802d569
 80189c4:	20014c20 	.word	0x20014c20

080189c8 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80189c8:	b510      	push	{r4, lr}
 80189ca:	f9b1 4000 	ldrsh.w	r4, [r1]
 80189ce:	888a      	ldrh	r2, [r1, #4]
 80189d0:	f9b0 3000 	ldrsh.w	r3, [r0]
 80189d4:	4422      	add	r2, r4
 80189d6:	b212      	sxth	r2, r2
 80189d8:	4293      	cmp	r3, r2
 80189da:	da15      	bge.n	8018a08 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80189dc:	8882      	ldrh	r2, [r0, #4]
 80189de:	4413      	add	r3, r2
 80189e0:	b21b      	sxth	r3, r3
 80189e2:	429c      	cmp	r4, r3
 80189e4:	da10      	bge.n	8018a08 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80189e6:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80189ea:	88c9      	ldrh	r1, [r1, #6]
 80189ec:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80189f0:	4419      	add	r1, r3
 80189f2:	b209      	sxth	r1, r1
 80189f4:	428a      	cmp	r2, r1
 80189f6:	da07      	bge.n	8018a08 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80189f8:	88c0      	ldrh	r0, [r0, #6]
 80189fa:	4410      	add	r0, r2
 80189fc:	b200      	sxth	r0, r0
 80189fe:	4283      	cmp	r3, r0
 8018a00:	bfac      	ite	ge
 8018a02:	2000      	movge	r0, #0
 8018a04:	2001      	movlt	r0, #1
 8018a06:	bd10      	pop	{r4, pc}
 8018a08:	2000      	movs	r0, #0
 8018a0a:	e7fc      	b.n	8018a06 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08018a0c <_ZNK8touchgfx4Rect8includesERKS0_>:
 8018a0c:	b570      	push	{r4, r5, r6, lr}
 8018a0e:	f9b1 4000 	ldrsh.w	r4, [r1]
 8018a12:	f9b0 5000 	ldrsh.w	r5, [r0]
 8018a16:	42ac      	cmp	r4, r5
 8018a18:	db18      	blt.n	8018a4c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8018a1a:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8018a1e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8018a22:	429a      	cmp	r2, r3
 8018a24:	db12      	blt.n	8018a4c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8018a26:	8886      	ldrh	r6, [r0, #4]
 8018a28:	4435      	add	r5, r6
 8018a2a:	888e      	ldrh	r6, [r1, #4]
 8018a2c:	4434      	add	r4, r6
 8018a2e:	b22d      	sxth	r5, r5
 8018a30:	b224      	sxth	r4, r4
 8018a32:	42a5      	cmp	r5, r4
 8018a34:	db0a      	blt.n	8018a4c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8018a36:	88c0      	ldrh	r0, [r0, #6]
 8018a38:	4418      	add	r0, r3
 8018a3a:	88cb      	ldrh	r3, [r1, #6]
 8018a3c:	441a      	add	r2, r3
 8018a3e:	b200      	sxth	r0, r0
 8018a40:	b212      	sxth	r2, r2
 8018a42:	4290      	cmp	r0, r2
 8018a44:	bfb4      	ite	lt
 8018a46:	2000      	movlt	r0, #0
 8018a48:	2001      	movge	r0, #1
 8018a4a:	bd70      	pop	{r4, r5, r6, pc}
 8018a4c:	2000      	movs	r0, #0
 8018a4e:	e7fc      	b.n	8018a4a <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

08018a50 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8018a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a52:	4604      	mov	r4, r0
 8018a54:	4608      	mov	r0, r1
 8018a56:	460d      	mov	r5, r1
 8018a58:	f7fd fe21 	bl	801669e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018a5c:	b978      	cbnz	r0, 8018a7e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8018a5e:	4620      	mov	r0, r4
 8018a60:	f7fd fe1d 	bl	801669e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018a64:	f9b5 6000 	ldrsh.w	r6, [r5]
 8018a68:	b150      	cbz	r0, 8018a80 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8018a6a:	8026      	strh	r6, [r4, #0]
 8018a6c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8018a70:	8063      	strh	r3, [r4, #2]
 8018a72:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8018a76:	80a3      	strh	r3, [r4, #4]
 8018a78:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8018a7c:	80e3      	strh	r3, [r4, #6]
 8018a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018a80:	f9b4 1000 	ldrsh.w	r1, [r4]
 8018a84:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8018a88:	42b1      	cmp	r1, r6
 8018a8a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8018a8e:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8018a92:	460f      	mov	r7, r1
 8018a94:	88ed      	ldrh	r5, [r5, #6]
 8018a96:	bfa8      	it	ge
 8018a98:	4637      	movge	r7, r6
 8018a9a:	4293      	cmp	r3, r2
 8018a9c:	4618      	mov	r0, r3
 8018a9e:	4466      	add	r6, ip
 8018aa0:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8018aa4:	bfa8      	it	ge
 8018aa6:	4610      	movge	r0, r2
 8018aa8:	442a      	add	r2, r5
 8018aaa:	88e5      	ldrh	r5, [r4, #6]
 8018aac:	4461      	add	r1, ip
 8018aae:	b236      	sxth	r6, r6
 8018ab0:	8027      	strh	r7, [r4, #0]
 8018ab2:	442b      	add	r3, r5
 8018ab4:	b209      	sxth	r1, r1
 8018ab6:	b212      	sxth	r2, r2
 8018ab8:	8060      	strh	r0, [r4, #2]
 8018aba:	b21b      	sxth	r3, r3
 8018abc:	428e      	cmp	r6, r1
 8018abe:	bfac      	ite	ge
 8018ac0:	ebc7 0106 	rsbge	r1, r7, r6
 8018ac4:	ebc7 0101 	rsblt	r1, r7, r1
 8018ac8:	429a      	cmp	r2, r3
 8018aca:	bfac      	ite	ge
 8018acc:	ebc0 0202 	rsbge	r2, r0, r2
 8018ad0:	ebc0 0203 	rsblt	r2, r0, r3
 8018ad4:	80a1      	strh	r1, [r4, #4]
 8018ad6:	80e2      	strh	r2, [r4, #6]
 8018ad8:	e7d1      	b.n	8018a7e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08018adc <_ZN8touchgfx11Application11getInstanceEv>:
 8018adc:	4b01      	ldr	r3, [pc, #4]	; (8018ae4 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8018ade:	6818      	ldr	r0, [r3, #0]
 8018ae0:	4770      	bx	lr
 8018ae2:	bf00      	nop
 8018ae4:	20014c30 	.word	0x20014c30

08018ae8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8018ae8:	2300      	movs	r3, #0
 8018aea:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8018aee:	30a8      	adds	r0, #168	; 0xa8
 8018af0:	f820 3c24 	strh.w	r3, [r0, #-36]
 8018af4:	f802 3b01 	strb.w	r3, [r2], #1
 8018af8:	4282      	cmp	r2, r0
 8018afa:	d1fb      	bne.n	8018af4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8018afc:	4770      	bx	lr

08018afe <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8018afe:	4603      	mov	r3, r0
 8018b00:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8018b04:	2200      	movs	r2, #0
 8018b06:	801a      	strh	r2, [r3, #0]
 8018b08:	3308      	adds	r3, #8
 8018b0a:	f823 2c06 	strh.w	r2, [r3, #-6]
 8018b0e:	f823 2c04 	strh.w	r2, [r3, #-4]
 8018b12:	f823 2c02 	strh.w	r2, [r3, #-2]
 8018b16:	428b      	cmp	r3, r1
 8018b18:	d1f5      	bne.n	8018b06 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8018b1a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8018b1e:	4770      	bx	lr

08018b20 <_ZN8touchgfx11ApplicationC1Ev>:
 8018b20:	b570      	push	{r4, r5, r6, lr}
 8018b22:	4b1a      	ldr	r3, [pc, #104]	; (8018b8c <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8018b24:	2500      	movs	r5, #0
 8018b26:	4604      	mov	r4, r0
 8018b28:	30a8      	adds	r0, #168	; 0xa8
 8018b2a:	f840 3ca8 	str.w	r3, [r0, #-168]
 8018b2e:	f820 5c24 	strh.w	r5, [r0, #-36]
 8018b32:	f7ff ffe4 	bl	8018afe <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018b36:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8018b3a:	f7ff ffe0 	bl	8018afe <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018b3e:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 8018b42:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 8018b46:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8018b4a:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8018b4e:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 8018b52:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 8018b56:	490e      	ldr	r1, [pc, #56]	; (8018b90 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8018b58:	480e      	ldr	r0, [pc, #56]	; (8018b94 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8018b5a:	f00e faf9 	bl	8027150 <CRC_Lock>
 8018b5e:	4e0e      	ldr	r6, [pc, #56]	; (8018b98 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8018b60:	4b0e      	ldr	r3, [pc, #56]	; (8018b9c <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8018b62:	b158      	cbz	r0, 8018b7c <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 8018b64:	801d      	strh	r5, [r3, #0]
 8018b66:	2300      	movs	r3, #0
 8018b68:	4a0d      	ldr	r2, [pc, #52]	; (8018ba0 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8018b6a:	4620      	mov	r0, r4
 8018b6c:	6013      	str	r3, [r2, #0]
 8018b6e:	4a0d      	ldr	r2, [pc, #52]	; (8018ba4 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8018b70:	6033      	str	r3, [r6, #0]
 8018b72:	6013      	str	r3, [r2, #0]
 8018b74:	f7ff ffb8 	bl	8018ae8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8018b78:	4620      	mov	r0, r4
 8018b7a:	bd70      	pop	{r4, r5, r6, pc}
 8018b7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018b80:	2002      	movs	r0, #2
 8018b82:	801a      	strh	r2, [r3, #0]
 8018b84:	6030      	str	r0, [r6, #0]
 8018b86:	f001 fa01 	bl	8019f8c <_ZN8touchgfx6Screen4drawEv>
 8018b8a:	e7ec      	b.n	8018b66 <_ZN8touchgfx11ApplicationC1Ev+0x46>
 8018b8c:	0802d604 	.word	0x0802d604
 8018b90:	b5e8b5cd 	.word	0xb5e8b5cd
 8018b94:	f407a5c2 	.word	0xf407a5c2
 8018b98:	20014c20 	.word	0x20014c20
 8018b9c:	20000044 	.word	0x20000044
 8018ba0:	20014c30 	.word	0x20014c30
 8018ba4:	20014c24 	.word	0x20014c24

08018ba8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8018ba8:	b510      	push	{r4, lr}
 8018baa:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8018bae:	428b      	cmp	r3, r1
 8018bb0:	d806      	bhi.n	8018bc0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x18>
 8018bb2:	4b0b      	ldr	r3, [pc, #44]	; (8018be0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x38>)
 8018bb4:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8018bb8:	4a0a      	ldr	r2, [pc, #40]	; (8018be4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3c>)
 8018bba:	480b      	ldr	r0, [pc, #44]	; (8018be8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x40>)
 8018bbc:	f00e fc22 	bl	8027404 <__assert_func>
 8018bc0:	3b01      	subs	r3, #1
 8018bc2:	b29b      	uxth	r3, r3
 8018bc4:	428b      	cmp	r3, r1
 8018bc6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8018bca:	d908      	bls.n	8018bde <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x36>
 8018bcc:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8018bd0:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8018bd4:	681a      	ldr	r2, [r3, #0]
 8018bd6:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8018bda:	685a      	ldr	r2, [r3, #4]
 8018bdc:	6062      	str	r2, [r4, #4]
 8018bde:	bd10      	pop	{r4, pc}
 8018be0:	0802d593 	.word	0x0802d593
 8018be4:	0802d684 	.word	0x0802d684
 8018be8:	0802d5a1 	.word	0x0802d5a1

08018bec <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8018bec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018bee:	466b      	mov	r3, sp
 8018bf0:	4604      	mov	r4, r0
 8018bf2:	e883 0006 	stmia.w	r3, {r1, r2}
 8018bf6:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 8018bfa:	2a07      	cmp	r2, #7
 8018bfc:	d906      	bls.n	8018c0c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 8018bfe:	4b09      	ldr	r3, [pc, #36]	; (8018c24 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8018c00:	f44f 71c1 	mov.w	r1, #386	; 0x182
 8018c04:	4a08      	ldr	r2, [pc, #32]	; (8018c28 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 8018c06:	4809      	ldr	r0, [pc, #36]	; (8018c2c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8018c08:	f00e fbfc 	bl	8027404 <__assert_func>
 8018c0c:	1c51      	adds	r1, r2, #1
 8018c0e:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8018c12:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8018c16:	cb03      	ldmia	r3!, {r0, r1}
 8018c18:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8018c1c:	6069      	str	r1, [r5, #4]
 8018c1e:	b003      	add	sp, #12
 8018c20:	bd30      	pop	{r4, r5, pc}
 8018c22:	bf00      	nop
 8018c24:	0802d5ca 	.word	0x0802d5ca
 8018c28:	0802d71a 	.word	0x0802d71a
 8018c2c:	0802d5a1 	.word	0x0802d5a1

08018c30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8018c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c34:	b08d      	sub	sp, #52	; 0x34
 8018c36:	4683      	mov	fp, r0
 8018c38:	ac08      	add	r4, sp, #32
 8018c3a:	4620      	mov	r0, r4
 8018c3c:	e884 0006 	stmia.w	r4, {r1, r2}
 8018c40:	f7fd fd2d 	bl	801669e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018c44:	2800      	cmp	r0, #0
 8018c46:	d16a      	bne.n	8018d1e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8018c48:	9402      	str	r4, [sp, #8]
 8018c4a:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8018c4e:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8018c52:	2400      	movs	r4, #0
 8018c54:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 8018c58:	9301      	str	r3, [sp, #4]
 8018c5a:	36a0      	adds	r6, #160	; 0xa0
 8018c5c:	42a5      	cmp	r5, r4
 8018c5e:	d00d      	beq.n	8018c7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 8018c60:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 8018c64:	9802      	ldr	r0, [sp, #8]
 8018c66:	f7ff fed1 	bl	8018a0c <_ZNK8touchgfx4Rect8includesERKS0_>
 8018c6a:	b128      	cbz	r0, 8018c78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 8018c6c:	1e69      	subs	r1, r5, #1
 8018c6e:	9801      	ldr	r0, [sp, #4]
 8018c70:	1b09      	subs	r1, r1, r4
 8018c72:	b289      	uxth	r1, r1
 8018c74:	f7ff ff98 	bl	8018ba8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018c78:	3401      	adds	r4, #1
 8018c7a:	e7ef      	b.n	8018c5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018c7c:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8018c80:	1e7b      	subs	r3, r7, #1
 8018c82:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 8018c86:	9703      	str	r7, [sp, #12]
 8018c88:	9300      	str	r3, [sp, #0]
 8018c8a:	2400      	movs	r4, #0
 8018c8c:	4655      	mov	r5, sl
 8018c8e:	9704      	str	r7, [sp, #16]
 8018c90:	4626      	mov	r6, r4
 8018c92:	9b04      	ldr	r3, [sp, #16]
 8018c94:	2b00      	cmp	r3, #0
 8018c96:	d078      	beq.n	8018d8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 8018c98:	9902      	ldr	r1, [sp, #8]
 8018c9a:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8018c9e:	f7ff fe93 	bl	80189c8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018ca2:	b360      	cbz	r0, 8018cfe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 8018ca4:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8018ca8:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 8018cac:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 8018cb0:	45e6      	cmp	lr, ip
 8018cb2:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 8018cb6:	db35      	blt.n	8018d24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 8018cb8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8018cbc:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8018cc0:	4472      	add	r2, lr
 8018cc2:	4463      	add	r3, ip
 8018cc4:	b212      	sxth	r2, r2
 8018cc6:	b21b      	sxth	r3, r3
 8018cc8:	429a      	cmp	r2, r3
 8018cca:	dc2b      	bgt.n	8018d24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 8018ccc:	fa1f f288 	uxth.w	r2, r8
 8018cd0:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8018cd4:	45c1      	cmp	r9, r8
 8018cd6:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8018cda:	4413      	add	r3, r2
 8018cdc:	fa1f fc89 	uxth.w	ip, r9
 8018ce0:	b29b      	uxth	r3, r3
 8018ce2:	fa0f fe83 	sxth.w	lr, r3
 8018ce6:	db0f      	blt.n	8018d08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 8018ce8:	eba3 030c 	sub.w	r3, r3, ip
 8018cec:	1ac9      	subs	r1, r1, r3
 8018cee:	b209      	sxth	r1, r1
 8018cf0:	2900      	cmp	r1, #0
 8018cf2:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8018cf6:	dd12      	ble.n	8018d1e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8018cf8:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 8018cfc:	4604      	mov	r4, r0
 8018cfe:	9b04      	ldr	r3, [sp, #16]
 8018d00:	3d08      	subs	r5, #8
 8018d02:	3b01      	subs	r3, #1
 8018d04:	9304      	str	r3, [sp, #16]
 8018d06:	e7c4      	b.n	8018c92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 8018d08:	4461      	add	r1, ip
 8018d0a:	b209      	sxth	r1, r1
 8018d0c:	4571      	cmp	r1, lr
 8018d0e:	dc3a      	bgt.n	8018d86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8018d10:	eba2 020c 	sub.w	r2, r2, ip
 8018d14:	b212      	sxth	r2, r2
 8018d16:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8018d1a:	2a00      	cmp	r2, #0
 8018d1c:	dcee      	bgt.n	8018cfc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 8018d1e:	b00d      	add	sp, #52	; 0x34
 8018d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d24:	45c1      	cmp	r9, r8
 8018d26:	db2e      	blt.n	8018d86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8018d28:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8018d2c:	4499      	add	r9, r3
 8018d2e:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8018d32:	4498      	add	r8, r3
 8018d34:	fa0f f989 	sxth.w	r9, r9
 8018d38:	fa0f f888 	sxth.w	r8, r8
 8018d3c:	45c1      	cmp	r9, r8
 8018d3e:	dc22      	bgt.n	8018d86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8018d40:	fa1f f28c 	uxth.w	r2, ip
 8018d44:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8018d48:	45e6      	cmp	lr, ip
 8018d4a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8018d4e:	4413      	add	r3, r2
 8018d50:	fa1f f88e 	uxth.w	r8, lr
 8018d54:	b29b      	uxth	r3, r3
 8018d56:	fa0f f983 	sxth.w	r9, r3
 8018d5a:	db0a      	blt.n	8018d72 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 8018d5c:	eba3 0308 	sub.w	r3, r3, r8
 8018d60:	1ac9      	subs	r1, r1, r3
 8018d62:	b209      	sxth	r1, r1
 8018d64:	2900      	cmp	r1, #0
 8018d66:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 8018d6a:	ddd8      	ble.n	8018d1e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8018d6c:	f8ad 9020 	strh.w	r9, [sp, #32]
 8018d70:	e7c4      	b.n	8018cfc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 8018d72:	4441      	add	r1, r8
 8018d74:	b209      	sxth	r1, r1
 8018d76:	4549      	cmp	r1, r9
 8018d78:	dc05      	bgt.n	8018d86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8018d7a:	eba2 0208 	sub.w	r2, r2, r8
 8018d7e:	b212      	sxth	r2, r2
 8018d80:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8018d84:	e7c9      	b.n	8018d1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8018d86:	4606      	mov	r6, r0
 8018d88:	e7b9      	b.n	8018cfe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 8018d8a:	2c00      	cmp	r4, #0
 8018d8c:	f47f af7d 	bne.w	8018c8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 8018d90:	2e00      	cmp	r6, #0
 8018d92:	f000 81dc 	beq.w	801914e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8018d96:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 8018d9a:	4655      	mov	r5, sl
 8018d9c:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 8018da0:	b2b9      	uxth	r1, r7
 8018da2:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8018da6:	b2b3      	uxth	r3, r6
 8018da8:	9104      	str	r1, [sp, #16]
 8018daa:	9804      	ldr	r0, [sp, #16]
 8018dac:	441a      	add	r2, r3
 8018dae:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8018db2:	b292      	uxth	r2, r2
 8018db4:	4401      	add	r1, r0
 8018db6:	fa0f f882 	sxth.w	r8, r2
 8018dba:	b289      	uxth	r1, r1
 8018dbc:	9105      	str	r1, [sp, #20]
 8018dbe:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 8018dc2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018dc6:	9b03      	ldr	r3, [sp, #12]
 8018dc8:	2b00      	cmp	r3, #0
 8018dca:	d054      	beq.n	8018e76 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 8018dcc:	9902      	ldr	r1, [sp, #8]
 8018dce:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8018dd2:	f7ff fdf9 	bl	80189c8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018dd6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018dda:	b1d8      	cbz	r0, 8018e14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8018ddc:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 8018de0:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 8018de4:	4576      	cmp	r6, lr
 8018de6:	dc26      	bgt.n	8018e36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8018de8:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 8018dec:	44f4      	add	ip, lr
 8018dee:	fa0f fc8c 	sxth.w	ip, ip
 8018df2:	45e0      	cmp	r8, ip
 8018df4:	db1f      	blt.n	8018e36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8018df6:	428f      	cmp	r7, r1
 8018df8:	fa1f fc81 	uxth.w	ip, r1
 8018dfc:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 8018e00:	dc0f      	bgt.n	8018e22 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8018e02:	9805      	ldr	r0, [sp, #20]
 8018e04:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 8018e08:	eba0 0c0c 	sub.w	ip, r0, ip
 8018e0c:	eba1 010c 	sub.w	r1, r1, ip
 8018e10:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 8018e14:	4620      	mov	r0, r4
 8018e16:	9903      	ldr	r1, [sp, #12]
 8018e18:	3d08      	subs	r5, #8
 8018e1a:	4604      	mov	r4, r0
 8018e1c:	3901      	subs	r1, #1
 8018e1e:	9103      	str	r1, [sp, #12]
 8018e20:	e7cf      	b.n	8018dc2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 8018e22:	4461      	add	r1, ip
 8018e24:	b209      	sxth	r1, r1
 8018e26:	4549      	cmp	r1, r9
 8018e28:	dcf5      	bgt.n	8018e16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8018e2a:	9904      	ldr	r1, [sp, #16]
 8018e2c:	eba1 0c0c 	sub.w	ip, r1, ip
 8018e30:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 8018e34:	e7ee      	b.n	8018e14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8018e36:	428f      	cmp	r7, r1
 8018e38:	dced      	bgt.n	8018e16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8018e3a:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 8018e3e:	4461      	add	r1, ip
 8018e40:	b209      	sxth	r1, r1
 8018e42:	4589      	cmp	r9, r1
 8018e44:	dbe7      	blt.n	8018e16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8018e46:	4576      	cmp	r6, lr
 8018e48:	fa1f fc8e 	uxth.w	ip, lr
 8018e4c:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 8018e50:	dc08      	bgt.n	8018e64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 8018e52:	eba2 0c0c 	sub.w	ip, r2, ip
 8018e56:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 8018e5a:	eba1 010c 	sub.w	r1, r1, ip
 8018e5e:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 8018e62:	e7d7      	b.n	8018e14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8018e64:	4461      	add	r1, ip
 8018e66:	b209      	sxth	r1, r1
 8018e68:	4588      	cmp	r8, r1
 8018e6a:	dbd4      	blt.n	8018e16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8018e6c:	eba3 0c0c 	sub.w	ip, r3, ip
 8018e70:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 8018e74:	e7ce      	b.n	8018e14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8018e76:	2c00      	cmp	r4, #0
 8018e78:	f000 8169 	beq.w	801914e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8018e7c:	9b00      	ldr	r3, [sp, #0]
 8018e7e:	3301      	adds	r3, #1
 8018e80:	f000 8165 	beq.w	801914e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8018e84:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 8018e88:	9802      	ldr	r0, [sp, #8]
 8018e8a:	4621      	mov	r1, r4
 8018e8c:	f7ff fdbe 	bl	8018a0c <_ZNK8touchgfx4Rect8includesERKS0_>
 8018e90:	b120      	cbz	r0, 8018e9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 8018e92:	f8bd 1000 	ldrh.w	r1, [sp]
 8018e96:	9801      	ldr	r0, [sp, #4]
 8018e98:	f7ff fe86 	bl	8018ba8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018e9c:	9902      	ldr	r1, [sp, #8]
 8018e9e:	4620      	mov	r0, r4
 8018ea0:	f7ff fd92 	bl	80189c8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018ea4:	2800      	cmp	r0, #0
 8018ea6:	f000 809b 	beq.w	8018fe0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 8018eaa:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8018eae:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 8018eb2:	fa1f f288 	uxth.w	r2, r8
 8018eb6:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 8018eba:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 8018ebe:	19d5      	adds	r5, r2, r7
 8018ec0:	b2a1      	uxth	r1, r4
 8018ec2:	45a0      	cmp	r8, r4
 8018ec4:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8018ec8:	fa1f f985 	uxth.w	r9, r5
 8018ecc:	440b      	add	r3, r1
 8018ece:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 8018ed2:	fa0f f589 	sxth.w	r5, r9
 8018ed6:	b29b      	uxth	r3, r3
 8018ed8:	9503      	str	r5, [sp, #12]
 8018eda:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8018ede:	9507      	str	r5, [sp, #28]
 8018ee0:	f340 809d 	ble.w	801901e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8018ee4:	1a52      	subs	r2, r2, r1
 8018ee6:	4584      	cmp	ip, r0
 8018ee8:	fa0f fe83 	sxth.w	lr, r3
 8018eec:	b292      	uxth	r2, r2
 8018eee:	b215      	sxth	r5, r2
 8018ef0:	dd2f      	ble.n	8018f52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 8018ef2:	9e00      	ldr	r6, [sp, #0]
 8018ef4:	fa1f fc8c 	uxth.w	ip, ip
 8018ef8:	b280      	uxth	r0, r0
 8018efa:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8018efe:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 8018f02:	9e03      	ldr	r6, [sp, #12]
 8018f04:	ebac 0300 	sub.w	r3, ip, r0
 8018f08:	448c      	add	ip, r1
 8018f0a:	eba6 060e 	sub.w	r6, r6, lr
 8018f0e:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 8018f12:	b29b      	uxth	r3, r3
 8018f14:	4470      	add	r0, lr
 8018f16:	fa0f fc8c 	sxth.w	ip, ip
 8018f1a:	b21c      	sxth	r4, r3
 8018f1c:	b200      	sxth	r0, r0
 8018f1e:	4366      	muls	r6, r4
 8018f20:	ebac 0000 	sub.w	r0, ip, r0
 8018f24:	4368      	muls	r0, r5
 8018f26:	4286      	cmp	r6, r0
 8018f28:	db09      	blt.n	8018f3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 8018f2a:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 8018f2e:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 8018f32:	4417      	add	r7, r2
 8018f34:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018f38:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8018f3c:	e685      	b.n	8018c4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8018f3e:	440b      	add	r3, r1
 8018f40:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 8018f44:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8018f48:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 8018f4c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8018f50:	e67b      	b.n	8018c4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8018f52:	9e03      	ldr	r6, [sp, #12]
 8018f54:	45b6      	cmp	lr, r6
 8018f56:	da28      	bge.n	8018faa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 8018f58:	9b00      	ldr	r3, [sp, #0]
 8018f5a:	eba6 060e 	sub.w	r6, r6, lr
 8018f5e:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 8018f62:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 8018f66:	eb04 030c 	add.w	r3, r4, ip
 8018f6a:	fa1f f883 	uxth.w	r8, r3
 8018f6e:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 8018f72:	4403      	add	r3, r0
 8018f74:	fa0f f988 	sxth.w	r9, r8
 8018f78:	eba0 000c 	sub.w	r0, r0, ip
 8018f7c:	eba3 0308 	sub.w	r3, r3, r8
 8018f80:	4368      	muls	r0, r5
 8018f82:	b29b      	uxth	r3, r3
 8018f84:	fa0f f883 	sxth.w	r8, r3
 8018f88:	fb08 f606 	mul.w	r6, r8, r6
 8018f8c:	42b0      	cmp	r0, r6
 8018f8e:	dc06      	bgt.n	8018f9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 8018f90:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 8018f94:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 8018f98:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 8018f9c:	e7c9      	b.n	8018f32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 8018f9e:	4423      	add	r3, r4
 8018fa0:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 8018fa4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8018fa8:	e64f      	b.n	8018c4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8018faa:	eba3 0309 	sub.w	r3, r3, r9
 8018fae:	9807      	ldr	r0, [sp, #28]
 8018fb0:	b29b      	uxth	r3, r3
 8018fb2:	2806      	cmp	r0, #6
 8018fb4:	fa0f fc83 	sxth.w	ip, r3
 8018fb8:	d818      	bhi.n	8018fec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 8018fba:	4652      	mov	r2, sl
 8018fbc:	ab0a      	add	r3, sp, #40	; 0x28
 8018fbe:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 8018fc2:	6851      	ldr	r1, [r2, #4]
 8018fc4:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 8018fc8:	c303      	stmia	r3!, {r0, r1}
 8018fca:	9b03      	ldr	r3, [sp, #12]
 8018fcc:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 8018fd0:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 8018fd4:	ab0a      	add	r3, sp, #40	; 0x28
 8018fd6:	9801      	ldr	r0, [sp, #4]
 8018fd8:	e893 0006 	ldmia.w	r3, {r1, r2}
 8018fdc:	f7ff fe06 	bl	8018bec <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8018fe0:	9b00      	ldr	r3, [sp, #0]
 8018fe2:	f1aa 0a08 	sub.w	sl, sl, #8
 8018fe6:	3b01      	subs	r3, #1
 8018fe8:	9300      	str	r3, [sp, #0]
 8018fea:	e747      	b.n	8018e7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8018fec:	9800      	ldr	r0, [sp, #0]
 8018fee:	45ac      	cmp	ip, r5
 8018ff0:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8018ff4:	db0c      	blt.n	8019010 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 8018ff6:	4417      	add	r7, r2
 8018ff8:	4458      	add	r0, fp
 8018ffa:	f8ad 4020 	strh.w	r4, [sp, #32]
 8018ffe:	b2bf      	uxth	r7, r7
 8019000:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 8019004:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8019008:	440f      	add	r7, r1
 801900a:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 801900e:	e61c      	b.n	8018c4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8019010:	4458      	add	r0, fp
 8019012:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 8019016:	443b      	add	r3, r7
 8019018:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801901c:	e615      	b.n	8018c4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801901e:	fa1f f18c 	uxth.w	r1, ip
 8019022:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 8019026:	b282      	uxth	r2, r0
 8019028:	4584      	cmp	ip, r0
 801902a:	eb01 0e05 	add.w	lr, r1, r5
 801902e:	9204      	str	r2, [sp, #16]
 8019030:	fa1f fe8e 	uxth.w	lr, lr
 8019034:	9e04      	ldr	r6, [sp, #16]
 8019036:	fa0f f28e 	sxth.w	r2, lr
 801903a:	9205      	str	r2, [sp, #20]
 801903c:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 8019040:	4432      	add	r2, r6
 8019042:	b292      	uxth	r2, r2
 8019044:	9206      	str	r2, [sp, #24]
 8019046:	da26      	bge.n	8019096 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 8019048:	eba3 0309 	sub.w	r3, r3, r9
 801904c:	eba2 020e 	sub.w	r2, r2, lr
 8019050:	eba0 000c 	sub.w	r0, r0, ip
 8019054:	eba4 0408 	sub.w	r4, r4, r8
 8019058:	b29b      	uxth	r3, r3
 801905a:	b292      	uxth	r2, r2
 801905c:	fa0f fa83 	sxth.w	sl, r3
 8019060:	b211      	sxth	r1, r2
 8019062:	fb0a f000 	mul.w	r0, sl, r0
 8019066:	434c      	muls	r4, r1
 8019068:	42a0      	cmp	r0, r4
 801906a:	9800      	ldr	r0, [sp, #0]
 801906c:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8019070:	dc06      	bgt.n	8019080 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 8019072:	4458      	add	r0, fp
 8019074:	9a05      	ldr	r2, [sp, #20]
 8019076:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 801907a:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 801907e:	e7ca      	b.n	8019016 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 8019080:	eb0b 0300 	add.w	r3, fp, r0
 8019084:	9903      	ldr	r1, [sp, #12]
 8019086:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 801908a:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 801908e:	442a      	add	r2, r5
 8019090:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8019094:	e5d9      	b.n	8018c4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8019096:	9e04      	ldr	r6, [sp, #16]
 8019098:	9a03      	ldr	r2, [sp, #12]
 801909a:	1b89      	subs	r1, r1, r6
 801909c:	b21e      	sxth	r6, r3
 801909e:	b289      	uxth	r1, r1
 80190a0:	4296      	cmp	r6, r2
 80190a2:	fa0f fc81 	sxth.w	ip, r1
 80190a6:	dd25      	ble.n	80190f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 80190a8:	eba3 0309 	sub.w	r3, r3, r9
 80190ac:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 80190b0:	9e05      	ldr	r6, [sp, #20]
 80190b2:	eba4 0408 	sub.w	r4, r4, r8
 80190b6:	b29b      	uxth	r3, r3
 80190b8:	eba6 0902 	sub.w	r9, r6, r2
 80190bc:	fb0c f404 	mul.w	r4, ip, r4
 80190c0:	b218      	sxth	r0, r3
 80190c2:	9a00      	ldr	r2, [sp, #0]
 80190c4:	fb00 f909 	mul.w	r9, r0, r9
 80190c8:	00d2      	lsls	r2, r2, #3
 80190ca:	454c      	cmp	r4, r9
 80190cc:	db03      	blt.n	80190d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 80190ce:	445a      	add	r2, fp
 80190d0:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 80190d4:	e79f      	b.n	8019016 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 80190d6:	eb0b 0302 	add.w	r3, fp, r2
 80190da:	9a03      	ldr	r2, [sp, #12]
 80190dc:	4429      	add	r1, r5
 80190de:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 80190e2:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 80190e6:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80190ea:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 80190ee:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80190f2:	e5aa      	b.n	8018c4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80190f4:	9b06      	ldr	r3, [sp, #24]
 80190f6:	9c07      	ldr	r4, [sp, #28]
 80190f8:	eba3 020e 	sub.w	r2, r3, lr
 80190fc:	2c06      	cmp	r4, #6
 80190fe:	b292      	uxth	r2, r2
 8019100:	b213      	sxth	r3, r2
 8019102:	d80d      	bhi.n	8019120 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 8019104:	4651      	mov	r1, sl
 8019106:	aa0a      	add	r2, sp, #40	; 0x28
 8019108:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 801910c:	6849      	ldr	r1, [r1, #4]
 801910e:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 8019112:	9b05      	ldr	r3, [sp, #20]
 8019114:	c203      	stmia	r2!, {r0, r1}
 8019116:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801911a:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 801911e:	e759      	b.n	8018fd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 8019120:	9c00      	ldr	r4, [sp, #0]
 8019122:	4563      	cmp	r3, ip
 8019124:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8019128:	db0d      	blt.n	8019146 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 801912a:	4429      	add	r1, r5
 801912c:	9a04      	ldr	r2, [sp, #16]
 801912e:	445c      	add	r4, fp
 8019130:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8019134:	b289      	uxth	r1, r1
 8019136:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 801913a:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801913e:	4411      	add	r1, r2
 8019140:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 8019144:	e581      	b.n	8018c4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8019146:	445c      	add	r4, fp
 8019148:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 801914c:	e79f      	b.n	801908e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 801914e:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8019152:	2f07      	cmp	r7, #7
 8019154:	d806      	bhi.n	8019164 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 8019156:	ab08      	add	r3, sp, #32
 8019158:	9801      	ldr	r0, [sp, #4]
 801915a:	e893 0006 	ldmia.w	r3, {r1, r2}
 801915e:	f7ff fd45 	bl	8018bec <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8019162:	e5dc      	b.n	8018d1e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8019164:	f107 39ff 	add.w	r9, r7, #4294967295
 8019168:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801916c:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 8019170:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8019174:	f04f 35ff 	mov.w	r5, #4294967295
 8019178:	2400      	movs	r4, #0
 801917a:	9304      	str	r3, [sp, #16]
 801917c:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 8019180:	f109 32ff 	add.w	r2, r9, #4294967295
 8019184:	9300      	str	r3, [sp, #0]
 8019186:	4690      	mov	r8, r2
 8019188:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 801918c:	9303      	str	r3, [sp, #12]
 801918e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8019192:	f1b8 3fff 	cmp.w	r8, #4294967295
 8019196:	6818      	ldr	r0, [r3, #0]
 8019198:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 801919c:	9206      	str	r2, [sp, #24]
 801919e:	bf16      	itet	ne
 80191a0:	9904      	ldrne	r1, [sp, #16]
 80191a2:	f8dd e008 	ldreq.w	lr, [sp, #8]
 80191a6:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 80191aa:	9305      	str	r3, [sp, #20]
 80191ac:	f8be 1006 	ldrh.w	r1, [lr, #6]
 80191b0:	f8be 6004 	ldrh.w	r6, [lr, #4]
 80191b4:	fb16 f601 	smulbb	r6, r6, r1
 80191b8:	6859      	ldr	r1, [r3, #4]
 80191ba:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80191be:	4671      	mov	r1, lr
 80191c0:	a80a      	add	r0, sp, #40	; 0x28
 80191c2:	f7ff fc45 	bl	8018a50 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80191c6:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 80191ca:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80191ce:	9b03      	ldr	r3, [sp, #12]
 80191d0:	9a00      	ldr	r2, [sp, #0]
 80191d2:	fb11 f100 	smulbb	r1, r1, r0
 80191d6:	2008      	movs	r0, #8
 80191d8:	fb02 6603 	mla	r6, r2, r3, r6
 80191dc:	1b8e      	subs	r6, r1, r6
 80191de:	fb91 f1f0 	sdiv	r1, r1, r0
 80191e2:	42b1      	cmp	r1, r6
 80191e4:	dc21      	bgt.n	801922a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 80191e6:	4556      	cmp	r6, sl
 80191e8:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 80191ec:	da03      	bge.n	80191f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 80191ee:	b1e6      	cbz	r6, 801922a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 80191f0:	46b2      	mov	sl, r6
 80191f2:	4645      	mov	r5, r8
 80191f4:	464c      	mov	r4, r9
 80191f6:	f108 38ff 	add.w	r8, r8, #4294967295
 80191fa:	f118 0f02 	cmn.w	r8, #2
 80191fe:	d1c8      	bne.n	8019192 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 8019200:	f1b2 3fff 	cmp.w	r2, #4294967295
 8019204:	f1a7 0708 	sub.w	r7, r7, #8
 8019208:	4691      	mov	r9, r2
 801920a:	d1b7      	bne.n	801917c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 801920c:	9b01      	ldr	r3, [sp, #4]
 801920e:	b2a6      	uxth	r6, r4
 8019210:	00e4      	lsls	r4, r4, #3
 8019212:	1918      	adds	r0, r3, r4
 8019214:	1c6b      	adds	r3, r5, #1
 8019216:	d10b      	bne.n	8019230 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 8019218:	4601      	mov	r1, r0
 801921a:	9802      	ldr	r0, [sp, #8]
 801921c:	f7ff fc18 	bl	8018a50 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019220:	4631      	mov	r1, r6
 8019222:	9801      	ldr	r0, [sp, #4]
 8019224:	f7ff fcc0 	bl	8018ba8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019228:	e50f      	b.n	8018c4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801922a:	4645      	mov	r5, r8
 801922c:	464c      	mov	r4, r9
 801922e:	e7ed      	b.n	801920c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 8019230:	9b01      	ldr	r3, [sp, #4]
 8019232:	00ed      	lsls	r5, r5, #3
 8019234:	445c      	add	r4, fp
 8019236:	1959      	adds	r1, r3, r5
 8019238:	445d      	add	r5, fp
 801923a:	f7ff fc09 	bl	8018a50 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801923e:	9b02      	ldr	r3, [sp, #8]
 8019240:	cb03      	ldmia	r3!, {r0, r1}
 8019242:	9b02      	ldr	r3, [sp, #8]
 8019244:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 8019248:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 801924c:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 8019250:	6861      	ldr	r1, [r4, #4]
 8019252:	c303      	stmia	r3!, {r0, r1}
 8019254:	e7e4      	b.n	8019220 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

08019258 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8019258:	4b1d      	ldr	r3, [pc, #116]	; (80192d0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801925a:	b530      	push	{r4, r5, lr}
 801925c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019260:	b085      	sub	sp, #20
 8019262:	4b1c      	ldr	r3, [pc, #112]	; (80192d4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 8019264:	460c      	mov	r4, r1
 8019266:	2100      	movs	r1, #0
 8019268:	4605      	mov	r5, r0
 801926a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801926e:	6820      	ldr	r0, [r4, #0]
 8019270:	9100      	str	r1, [sp, #0]
 8019272:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019276:	ab02      	add	r3, sp, #8
 8019278:	6861      	ldr	r1, [r4, #4]
 801927a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801927e:	c303      	stmia	r3!, {r0, r1}
 8019280:	4669      	mov	r1, sp
 8019282:	a802      	add	r0, sp, #8
 8019284:	f7fd f9c8 	bl	8016618 <_ZN8touchgfx4RectaNERKS0_>
 8019288:	ab02      	add	r3, sp, #8
 801928a:	cb03      	ldmia	r3!, {r0, r1}
 801928c:	4b12      	ldr	r3, [pc, #72]	; (80192d8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801928e:	6020      	str	r0, [r4, #0]
 8019290:	6818      	ldr	r0, [r3, #0]
 8019292:	6061      	str	r1, [r4, #4]
 8019294:	b138      	cbz	r0, 80192a6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8019296:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 801929a:	b133      	cbz	r3, 80192aa <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801929c:	6821      	ldr	r1, [r4, #0]
 801929e:	4628      	mov	r0, r5
 80192a0:	6862      	ldr	r2, [r4, #4]
 80192a2:	f7ff fcc5 	bl	8018c30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80192a6:	b005      	add	sp, #20
 80192a8:	bd30      	pop	{r4, r5, pc}
 80192aa:	6803      	ldr	r3, [r0, #0]
 80192ac:	4621      	mov	r1, r4
 80192ae:	689b      	ldr	r3, [r3, #8]
 80192b0:	4798      	blx	r3
 80192b2:	4b0a      	ldr	r3, [pc, #40]	; (80192dc <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 80192b4:	6818      	ldr	r0, [r3, #0]
 80192b6:	b118      	cbz	r0, 80192c0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 80192b8:	6803      	ldr	r3, [r0, #0]
 80192ba:	4621      	mov	r1, r4
 80192bc:	689b      	ldr	r3, [r3, #8]
 80192be:	4798      	blx	r3
 80192c0:	4b07      	ldr	r3, [pc, #28]	; (80192e0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 80192c2:	4621      	mov	r1, r4
 80192c4:	6818      	ldr	r0, [r3, #0]
 80192c6:	6803      	ldr	r3, [r0, #0]
 80192c8:	69db      	ldr	r3, [r3, #28]
 80192ca:	4798      	blx	r3
 80192cc:	e7eb      	b.n	80192a6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 80192ce:	bf00      	nop
 80192d0:	20014bd8 	.word	0x20014bd8
 80192d4:	20014bda 	.word	0x20014bda
 80192d8:	20014c20 	.word	0x20014c20
 80192dc:	20014c1c 	.word	0x20014c1c
 80192e0:	20014be4 	.word	0x20014be4

080192e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 80192e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192e8:	4604      	mov	r4, r0
 80192ea:	b09b      	sub	sp, #108	; 0x6c
 80192ec:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 80192f0:	b129      	cbz	r1, 80192fe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 80192f2:	2300      	movs	r3, #0
 80192f4:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 80192f8:	b01b      	add	sp, #108	; 0x6c
 80192fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192fe:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 8019302:	4630      	mov	r0, r6
 8019304:	f7fd f9cb 	bl	801669e <_ZNK8touchgfx4Rect7isEmptyEv>
 8019308:	4605      	mov	r5, r0
 801930a:	b940      	cbnz	r0, 801931e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 801930c:	4620      	mov	r0, r4
 801930e:	e896 0006 	ldmia.w	r6, {r1, r2}
 8019312:	f7ff fc8d 	bl	8018c30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019316:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801931a:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801931e:	4ba6      	ldr	r3, [pc, #664]	; (80195b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 8019320:	681b      	ldr	r3, [r3, #0]
 8019322:	b33b      	cbz	r3, 8019374 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 8019324:	4da5      	ldr	r5, [pc, #660]	; (80195bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 8019326:	4628      	mov	r0, r5
 8019328:	f7fd f9b9 	bl	801669e <_ZNK8touchgfx4Rect7isEmptyEv>
 801932c:	4606      	mov	r6, r0
 801932e:	bb08      	cbnz	r0, 8019374 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 8019330:	4628      	mov	r0, r5
 8019332:	f7ff f9ef 	bl	8018714 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8019336:	6829      	ldr	r1, [r5, #0]
 8019338:	686a      	ldr	r2, [r5, #4]
 801933a:	4620      	mov	r0, r4
 801933c:	f7ff fc78 	bl	8018c30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019340:	802e      	strh	r6, [r5, #0]
 8019342:	806e      	strh	r6, [r5, #2]
 8019344:	80ae      	strh	r6, [r5, #4]
 8019346:	80ee      	strh	r6, [r5, #6]
 8019348:	4f9d      	ldr	r7, [pc, #628]	; (80195c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801934a:	a809      	add	r0, sp, #36	; 0x24
 801934c:	f7ff fbd7 	bl	8018afe <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019350:	883d      	ldrh	r5, [r7, #0]
 8019352:	462e      	mov	r6, r5
 8019354:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019358:	42b3      	cmp	r3, r6
 801935a:	d910      	bls.n	801937e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 801935c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8019360:	3601      	adds	r6, #1
 8019362:	a809      	add	r0, sp, #36	; 0x24
 8019364:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8019368:	b2b6      	uxth	r6, r6
 801936a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801936e:	f7ff fc3d 	bl	8018bec <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8019372:	e7ef      	b.n	8019354 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8019374:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019378:	2b00      	cmp	r3, #0
 801937a:	d1e5      	bne.n	8019348 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 801937c:	e7bc      	b.n	80192f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801937e:	462e      	mov	r6, r5
 8019380:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8019384:	42b3      	cmp	r3, r6
 8019386:	d90b      	bls.n	80193a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 8019388:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801938c:	3601      	adds	r6, #1
 801938e:	4620      	mov	r0, r4
 8019390:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8019394:	b2b6      	uxth	r6, r6
 8019396:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801939a:	f7ff fc49 	bl	8018c30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801939e:	e7ef      	b.n	8019380 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 80193a0:	4a88      	ldr	r2, [pc, #544]	; (80195c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 80193a2:	6813      	ldr	r3, [r2, #0]
 80193a4:	4690      	mov	r8, r2
 80193a6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80193aa:	2b01      	cmp	r3, #1
 80193ac:	f040 8094 	bne.w	80194d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 80193b0:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 80193b4:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 80193b8:	f04f 0900 	mov.w	r9, #0
 80193bc:	33aa      	adds	r3, #170	; 0xaa
 80193be:	42a8      	cmp	r0, r5
 80193c0:	f103 0308 	add.w	r3, r3, #8
 80193c4:	dd0a      	ble.n	80193dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 80193c6:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 80193ca:	3501      	adds	r5, #1
 80193cc:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 80193d0:	440a      	add	r2, r1
 80193d2:	b212      	sxth	r2, r2
 80193d4:	4591      	cmp	r9, r2
 80193d6:	bfb8      	it	lt
 80193d8:	4691      	movlt	r9, r2
 80193da:	e7f0      	b.n	80193be <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 80193dc:	4b7a      	ldr	r3, [pc, #488]	; (80195c8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 80193de:	4e7b      	ldr	r6, [pc, #492]	; (80195cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 80193e0:	881d      	ldrh	r5, [r3, #0]
 80193e2:	2300      	movs	r3, #0
 80193e4:	2d0f      	cmp	r5, #15
 80193e6:	bf8c      	ite	hi
 80193e8:	08ed      	lsrhi	r5, r5, #3
 80193ea:	2501      	movls	r5, #1
 80193ec:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80193f0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80193f4:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 80193f8:	f8d8 0000 	ldr.w	r0, [r8]
 80193fc:	440b      	add	r3, r1
 80193fe:	6802      	ldr	r2, [r0, #0]
 8019400:	b21b      	sxth	r3, r3
 8019402:	4599      	cmp	r9, r3
 8019404:	dd4b      	ble.n	801949e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 8019406:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 801940a:	4798      	blx	r3
 801940c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8019410:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8019414:	4413      	add	r3, r2
 8019416:	b21b      	sxth	r3, r3
 8019418:	195a      	adds	r2, r3, r5
 801941a:	4290      	cmp	r0, r2
 801941c:	da07      	bge.n	801942e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801941e:	4581      	cmp	r9, r0
 8019420:	dd05      	ble.n	801942e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 8019422:	4298      	cmp	r0, r3
 8019424:	da33      	bge.n	801948e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 8019426:	2b00      	cmp	r3, #0
 8019428:	dd31      	ble.n	801948e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801942a:	4648      	mov	r0, r9
 801942c:	e004      	b.n	8019438 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 801942e:	4298      	cmp	r0, r3
 8019430:	dbfb      	blt.n	801942a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 8019432:	4548      	cmp	r0, r9
 8019434:	bfa8      	it	ge
 8019436:	4648      	movge	r0, r9
 8019438:	f9b6 2000 	ldrsh.w	r2, [r6]
 801943c:	2100      	movs	r1, #0
 801943e:	1ac0      	subs	r0, r0, r3
 8019440:	f8b7 a000 	ldrh.w	sl, [r7]
 8019444:	f8ad 1014 	strh.w	r1, [sp, #20]
 8019448:	f8ad 3016 	strh.w	r3, [sp, #22]
 801944c:	f8ad 2018 	strh.w	r2, [sp, #24]
 8019450:	f8ad 001a 	strh.w	r0, [sp, #26]
 8019454:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019458:	4553      	cmp	r3, sl
 801945a:	d9c9      	bls.n	80193f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801945c:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8019460:	ab07      	add	r3, sp, #28
 8019462:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8019466:	6851      	ldr	r1, [r2, #4]
 8019468:	c303      	stmia	r3!, {r0, r1}
 801946a:	a807      	add	r0, sp, #28
 801946c:	a905      	add	r1, sp, #20
 801946e:	f7fd f8d3 	bl	8016618 <_ZN8touchgfx4RectaNERKS0_>
 8019472:	a807      	add	r0, sp, #28
 8019474:	f7fd f913 	bl	801669e <_ZNK8touchgfx4Rect7isEmptyEv>
 8019478:	b920      	cbnz	r0, 8019484 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 801947a:	6823      	ldr	r3, [r4, #0]
 801947c:	a907      	add	r1, sp, #28
 801947e:	4620      	mov	r0, r4
 8019480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019482:	4798      	blx	r3
 8019484:	f10a 0a01 	add.w	sl, sl, #1
 8019488:	fa1f fa8a 	uxth.w	sl, sl
 801948c:	e7e2      	b.n	8019454 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 801948e:	f8d8 0000 	ldr.w	r0, [r8]
 8019492:	2101      	movs	r1, #1
 8019494:	6803      	ldr	r3, [r0, #0]
 8019496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801949a:	4798      	blx	r3
 801949c:	e7a8      	b.n	80193f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801949e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80194a0:	4798      	blx	r3
 80194a2:	4b4b      	ldr	r3, [pc, #300]	; (80195d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 80194a4:	781b      	ldrb	r3, [r3, #0]
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	f43f af26 	beq.w	80192f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80194ac:	2300      	movs	r3, #0
 80194ae:	883d      	ldrh	r5, [r7, #0]
 80194b0:	34ea      	adds	r4, #234	; 0xea
 80194b2:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 80194b6:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 80194ba:	42ab      	cmp	r3, r5
 80194bc:	f67f af1c 	bls.w	80192f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80194c0:	ab1a      	add	r3, sp, #104	; 0x68
 80194c2:	4620      	mov	r0, r4
 80194c4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80194c8:	3501      	adds	r5, #1
 80194ca:	3b44      	subs	r3, #68	; 0x44
 80194cc:	b2ad      	uxth	r5, r5
 80194ce:	e893 0006 	ldmia.w	r3, {r1, r2}
 80194d2:	f7ff fb8b 	bl	8018bec <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80194d6:	e7ee      	b.n	80194b6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 80194d8:	2b02      	cmp	r3, #2
 80194da:	f040 813d 	bne.w	8019758 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>
 80194de:	4b3d      	ldr	r3, [pc, #244]	; (80195d4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 80194e0:	781b      	ldrb	r3, [r3, #0]
 80194e2:	2b01      	cmp	r3, #1
 80194e4:	d02c      	beq.n	8019540 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25c>
 80194e6:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 80194ea:	883a      	ldrh	r2, [r7, #0]
 80194ec:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 80194f0:	3201      	adds	r2, #1
 80194f2:	b292      	uxth	r2, r2
 80194f4:	2900      	cmp	r1, #0
 80194f6:	d0d4      	beq.n	80194a2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 80194f8:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 80194fc:	4610      	mov	r0, r2
 80194fe:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 8019502:	f04f 0a00 	mov.w	sl, #0
 8019506:	441d      	add	r5, r3
 8019508:	b22d      	sxth	r5, r5
 801950a:	b283      	uxth	r3, r0
 801950c:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 8019510:	4299      	cmp	r1, r3
 8019512:	f240 80c3 	bls.w	801969c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 8019516:	4426      	add	r6, r4
 8019518:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 801951c:	4684      	mov	ip, r0
 801951e:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 8019522:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 8019526:	4573      	cmp	r3, lr
 8019528:	f340 80a5 	ble.w	8019676 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 801952c:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 8019530:	4475      	add	r5, lr
 8019532:	b22d      	sxth	r5, r5
 8019534:	429d      	cmp	r5, r3
 8019536:	bfa8      	it	ge
 8019538:	461d      	movge	r5, r3
 801953a:	3001      	adds	r0, #1
 801953c:	46e2      	mov	sl, ip
 801953e:	e7e4      	b.n	801950a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x226>
 8019540:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 8019544:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 8019548:	f1bb 0f00 	cmp.w	fp, #0
 801954c:	d0a9      	beq.n	80194a2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801954e:	883b      	ldrh	r3, [r7, #0]
 8019550:	2600      	movs	r6, #0
 8019552:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 8019556:	3301      	adds	r3, #1
 8019558:	b29b      	uxth	r3, r3
 801955a:	b299      	uxth	r1, r3
 801955c:	00f5      	lsls	r5, r6, #3
 801955e:	458b      	cmp	fp, r1
 8019560:	d93a      	bls.n	80195d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 8019562:	4425      	add	r5, r4
 8019564:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8019568:	469c      	mov	ip, r3
 801956a:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 801956e:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 8019572:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 8019576:	4408      	add	r0, r1
 8019578:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 801957c:	4471      	add	r1, lr
 801957e:	b200      	sxth	r0, r0
 8019580:	b209      	sxth	r1, r1
 8019582:	4288      	cmp	r0, r1
 8019584:	da06      	bge.n	8019594 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b0>
 8019586:	4586      	cmp	lr, r0
 8019588:	4672      	mov	r2, lr
 801958a:	bfb8      	it	lt
 801958c:	4602      	movlt	r2, r0
 801958e:	3301      	adds	r3, #1
 8019590:	4666      	mov	r6, ip
 8019592:	e7e2      	b.n	801955a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 8019594:	d10b      	bne.n	80195ae <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ca>
 8019596:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801959a:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 801959e:	458c      	cmp	ip, r1
 80195a0:	bfb4      	ite	lt
 80195a2:	469c      	movlt	ip, r3
 80195a4:	46b4      	movge	ip, r6
 80195a6:	4572      	cmp	r2, lr
 80195a8:	bfb8      	it	lt
 80195aa:	4672      	movlt	r2, lr
 80195ac:	e7ef      	b.n	801958e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 80195ae:	428a      	cmp	r2, r1
 80195b0:	46b4      	mov	ip, r6
 80195b2:	bfb8      	it	lt
 80195b4:	460a      	movlt	r2, r1
 80195b6:	e7ea      	b.n	801958e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 80195b8:	20014c1c 	.word	0x20014c1c
 80195bc:	20014c28 	.word	0x20014c28
 80195c0:	20000044 	.word	0x20000044
 80195c4:	20014be4 	.word	0x20014be4
 80195c8:	20014bda 	.word	0x20014bda
 80195cc:	20014bd8 	.word	0x20014bd8
 80195d0:	20014be2 	.word	0x20014be2
 80195d4:	20014bdc 	.word	0x20014bdc
 80195d8:	1961      	adds	r1, r4, r5
 80195da:	ab07      	add	r3, sp, #28
 80195dc:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 80195e0:	6849      	ldr	r1, [r1, #4]
 80195e2:	c303      	stmia	r3!, {r0, r1}
 80195e4:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80195e8:	a807      	add	r0, sp, #28
 80195ea:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80195ee:	2b13      	cmp	r3, #19
 80195f0:	440b      	add	r3, r1
 80195f2:	bfd8      	it	le
 80195f4:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 80195f8:	1a9b      	subs	r3, r3, r2
 80195fa:	f8ad 201c 	strh.w	r2, [sp, #28]
 80195fe:	f8ad 3020 	strh.w	r3, [sp, #32]
 8019602:	f7ff f8a1 	bl	8018748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019606:	a807      	add	r0, sp, #28
 8019608:	f7fd f849 	bl	801669e <_ZNK8touchgfx4Rect7isEmptyEv>
 801960c:	2800      	cmp	r0, #0
 801960e:	d199      	bne.n	8019544 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 8019610:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8019614:	4425      	add	r5, r4
 8019616:	f8d8 0000 	ldr.w	r0, [r8]
 801961a:	f1bc 0f14 	cmp.w	ip, #20
 801961e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8019622:	f8d0 e000 	ldr.w	lr, [r0]
 8019626:	bfa8      	it	ge
 8019628:	f04f 0c14 	movge.w	ip, #20
 801962c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8019630:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8019634:	fa1f fc8c 	uxth.w	ip, ip
 8019638:	f8cd c000 	str.w	ip, [sp]
 801963c:	f8de a088 	ldr.w	sl, [lr, #136]	; 0x88
 8019640:	47d0      	blx	sl
 8019642:	4682      	mov	sl, r0
 8019644:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8019648:	a807      	add	r0, sp, #28
 801964a:	f7ff f863 	bl	8018714 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801964e:	6823      	ldr	r3, [r4, #0]
 8019650:	4620      	mov	r0, r4
 8019652:	a907      	add	r1, sp, #28
 8019654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019656:	4798      	blx	r3
 8019658:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801965c:	eba0 000a 	sub.w	r0, r0, sl
 8019660:	b200      	sxth	r0, r0
 8019662:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 8019666:	2800      	cmp	r0, #0
 8019668:	f47f af6c 	bne.w	8019544 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801966c:	b2b1      	uxth	r1, r6
 801966e:	4648      	mov	r0, r9
 8019670:	f7ff fa9a 	bl	8018ba8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019674:	e766      	b.n	8019544 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 8019676:	d10c      	bne.n	8019692 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 8019678:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 801967c:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 8019680:	45b4      	cmp	ip, r6
 8019682:	bfb4      	ite	lt
 8019684:	4684      	movlt	ip, r0
 8019686:	46d4      	movge	ip, sl
 8019688:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 801968c:	4433      	add	r3, r6
 801968e:	b21b      	sxth	r3, r3
 8019690:	e750      	b.n	8019534 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x250>
 8019692:	4575      	cmp	r5, lr
 8019694:	46d4      	mov	ip, sl
 8019696:	bfa8      	it	ge
 8019698:	4675      	movge	r5, lr
 801969a:	e74e      	b.n	801953a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x256>
 801969c:	eb0b 0006 	add.w	r0, fp, r6
 80196a0:	4426      	add	r6, r4
 80196a2:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 80196a6:	f1b9 0f13 	cmp.w	r9, #19
 80196aa:	bfdc      	itt	le
 80196ac:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 80196b0:	444d      	addle	r5, r9
 80196b2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80196b6:	bfd8      	it	le
 80196b8:	b22d      	sxthle	r5, r5
 80196ba:	f7fc fff0 	bl	801669e <_ZNK8touchgfx4Rect7isEmptyEv>
 80196be:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80196c2:	2800      	cmp	r0, #0
 80196c4:	f47f af16 	bne.w	80194f4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x210>
 80196c8:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 80196cc:	fa1f f989 	uxth.w	r9, r9
 80196d0:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80196d4:	eba5 050c 	sub.w	r5, r5, ip
 80196d8:	fa1f f28c 	uxth.w	r2, ip
 80196dc:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 80196e0:	eb02 0009 	add.w	r0, r2, r9
 80196e4:	2d14      	cmp	r5, #20
 80196e6:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 80196ea:	bfa8      	it	ge
 80196ec:	2514      	movge	r5, #20
 80196ee:	b200      	sxth	r0, r0
 80196f0:	f8ad 101c 	strh.w	r1, [sp, #28]
 80196f4:	b289      	uxth	r1, r1
 80196f6:	fa1f fe85 	uxth.w	lr, r5
 80196fa:	eba0 000c 	sub.w	r0, r0, ip
 80196fe:	f8ad c01e 	strh.w	ip, [sp, #30]
 8019702:	4586      	cmp	lr, r0
 8019704:	f8d8 0000 	ldr.w	r0, [r8]
 8019708:	f8ad 3020 	strh.w	r3, [sp, #32]
 801970c:	b29b      	uxth	r3, r3
 801970e:	bfb8      	it	lt
 8019710:	46f1      	movlt	r9, lr
 8019712:	6805      	ldr	r5, [r0, #0]
 8019714:	f8cd 9000 	str.w	r9, [sp]
 8019718:	f8d5 5088 	ldr.w	r5, [r5, #136]	; 0x88
 801971c:	47a8      	blx	r5
 801971e:	6823      	ldr	r3, [r4, #0]
 8019720:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8019724:	a907      	add	r1, sp, #28
 8019726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019728:	4620      	mov	r0, r4
 801972a:	4798      	blx	r3
 801972c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8019730:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 8019734:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 8019738:	1a5b      	subs	r3, r3, r1
 801973a:	440a      	add	r2, r1
 801973c:	b21b      	sxth	r3, r3
 801973e:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 8019742:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 8019746:	2b00      	cmp	r3, #0
 8019748:	f47f aecf 	bne.w	80194ea <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 801974c:	fa1f f18a 	uxth.w	r1, sl
 8019750:	4658      	mov	r0, fp
 8019752:	f7ff fa29 	bl	8018ba8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019756:	e6c8      	b.n	80194ea <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 8019758:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801975c:	42ab      	cmp	r3, r5
 801975e:	f67f aea0 	bls.w	80194a2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 8019762:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8019766:	ab07      	add	r3, sp, #28
 8019768:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801976c:	6851      	ldr	r1, [r2, #4]
 801976e:	c303      	stmia	r3!, {r0, r1}
 8019770:	a807      	add	r0, sp, #28
 8019772:	f7fc ff94 	bl	801669e <_ZNK8touchgfx4Rect7isEmptyEv>
 8019776:	b920      	cbnz	r0, 8019782 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49e>
 8019778:	6823      	ldr	r3, [r4, #0]
 801977a:	a907      	add	r1, sp, #28
 801977c:	4620      	mov	r0, r4
 801977e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019780:	4798      	blx	r3
 8019782:	3501      	adds	r5, #1
 8019784:	b2ad      	uxth	r5, r5
 8019786:	e7e7      	b.n	8019758 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>

08019788 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8019788:	4b03      	ldr	r3, [pc, #12]	; (8019798 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801978a:	2200      	movs	r2, #0
 801978c:	801a      	strh	r2, [r3, #0]
 801978e:	805a      	strh	r2, [r3, #2]
 8019790:	809a      	strh	r2, [r3, #4]
 8019792:	80da      	strh	r2, [r3, #6]
 8019794:	4770      	bx	lr
 8019796:	bf00      	nop
 8019798:	20014c28 	.word	0x20014c28

0801979c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801979c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197a0:	b09d      	sub	sp, #116	; 0x74
 80197a2:	4606      	mov	r6, r0
 80197a4:	4614      	mov	r4, r2
 80197a6:	468a      	mov	sl, r1
 80197a8:	a803      	add	r0, sp, #12
 80197aa:	461d      	mov	r5, r3
 80197ac:	f000 fd68 	bl	801a280 <_ZN8touchgfx12TextProviderC1Ev>
 80197b0:	6833      	ldr	r3, [r6, #0]
 80197b2:	4630      	mov	r0, r6
 80197b4:	f242 0b0b 	movw	fp, #8203	; 0x200b
 80197b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80197ba:	4798      	blx	r3
 80197bc:	6833      	ldr	r3, [r6, #0]
 80197be:	4607      	mov	r7, r0
 80197c0:	4630      	mov	r0, r6
 80197c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80197c4:	4798      	blx	r3
 80197c6:	462a      	mov	r2, r5
 80197c8:	2500      	movs	r5, #0
 80197ca:	4621      	mov	r1, r4
 80197cc:	9000      	str	r0, [sp, #0]
 80197ce:	463b      	mov	r3, r7
 80197d0:	462c      	mov	r4, r5
 80197d2:	46a9      	mov	r9, r5
 80197d4:	46a8      	mov	r8, r5
 80197d6:	a803      	add	r0, sp, #12
 80197d8:	f000 fda5 	bl	801a326 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80197dc:	2300      	movs	r3, #0
 80197de:	9302      	str	r3, [sp, #8]
 80197e0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80197e4:	429c      	cmp	r4, r3
 80197e6:	d002      	beq.n	80197ee <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 80197e8:	455c      	cmp	r4, fp
 80197ea:	bf18      	it	ne
 80197ec:	4625      	movne	r5, r4
 80197ee:	ab02      	add	r3, sp, #8
 80197f0:	4632      	mov	r2, r6
 80197f2:	4651      	mov	r1, sl
 80197f4:	a803      	add	r0, sp, #12
 80197f6:	f001 f897 	bl	801a928 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80197fa:	4604      	mov	r4, r0
 80197fc:	b108      	cbz	r0, 8019802 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 80197fe:	280a      	cmp	r0, #10
 8019800:	d10a      	bne.n	8019818 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8019802:	45c1      	cmp	r9, r8
 8019804:	bf38      	it	cc
 8019806:	46c1      	movcc	r9, r8
 8019808:	f04f 0800 	mov.w	r8, #0
 801980c:	2c00      	cmp	r4, #0
 801980e:	d1e5      	bne.n	80197dc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8019810:	4648      	mov	r0, r9
 8019812:	b01d      	add	sp, #116	; 0x74
 8019814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019818:	9a02      	ldr	r2, [sp, #8]
 801981a:	2a00      	cmp	r2, #0
 801981c:	d0de      	beq.n	80197dc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801981e:	7b57      	ldrb	r7, [r2, #13]
 8019820:	4629      	mov	r1, r5
 8019822:	6833      	ldr	r3, [r6, #0]
 8019824:	007f      	lsls	r7, r7, #1
 8019826:	8894      	ldrh	r4, [r2, #4]
 8019828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801982a:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801982e:	7a97      	ldrb	r7, [r2, #10]
 8019830:	4307      	orrs	r7, r0
 8019832:	4630      	mov	r0, r6
 8019834:	4798      	blx	r3
 8019836:	4438      	add	r0, r7
 8019838:	4480      	add	r8, r0
 801983a:	fa1f f888 	uxth.w	r8, r8
 801983e:	e7e5      	b.n	801980c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08019840 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8019840:	b508      	push	{r3, lr}
 8019842:	6803      	ldr	r3, [r0, #0]
 8019844:	68db      	ldr	r3, [r3, #12]
 8019846:	4798      	blx	r3
 8019848:	b128      	cbz	r0, 8019856 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801984a:	7b43      	ldrb	r3, [r0, #13]
 801984c:	7a80      	ldrb	r0, [r0, #10]
 801984e:	005b      	lsls	r3, r3, #1
 8019850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019854:	4318      	orrs	r0, r3
 8019856:	bd08      	pop	{r3, pc}

08019858 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8019858:	b40e      	push	{r1, r2, r3}
 801985a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801985c:	b09e      	sub	sp, #120	; 0x78
 801985e:	4605      	mov	r5, r0
 8019860:	ab23      	add	r3, sp, #140	; 0x8c
 8019862:	a805      	add	r0, sp, #20
 8019864:	f853 4b04 	ldr.w	r4, [r3], #4
 8019868:	9303      	str	r3, [sp, #12]
 801986a:	f000 fd09 	bl	801a280 <_ZN8touchgfx12TextProviderC1Ev>
 801986e:	682b      	ldr	r3, [r5, #0]
 8019870:	4628      	mov	r0, r5
 8019872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019874:	4798      	blx	r3
 8019876:	682b      	ldr	r3, [r5, #0]
 8019878:	4606      	mov	r6, r0
 801987a:	4628      	mov	r0, r5
 801987c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801987e:	4798      	blx	r3
 8019880:	4633      	mov	r3, r6
 8019882:	4621      	mov	r1, r4
 8019884:	ae1e      	add	r6, sp, #120	; 0x78
 8019886:	2400      	movs	r4, #0
 8019888:	9000      	str	r0, [sp, #0]
 801988a:	9a03      	ldr	r2, [sp, #12]
 801988c:	a805      	add	r0, sp, #20
 801988e:	f000 fd4a 	bl	801a326 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019892:	f846 4d68 	str.w	r4, [r6, #-104]!
 8019896:	462a      	mov	r2, r5
 8019898:	4633      	mov	r3, r6
 801989a:	4621      	mov	r1, r4
 801989c:	a805      	add	r0, sp, #20
 801989e:	f001 f843 	bl	801a928 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80198a2:	b300      	cbz	r0, 80198e6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 80198a4:	280a      	cmp	r0, #10
 80198a6:	d01a      	beq.n	80198de <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80198a8:	9f04      	ldr	r7, [sp, #16]
 80198aa:	b1c7      	cbz	r7, 80198de <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80198ac:	7b78      	ldrb	r0, [r7, #13]
 80198ae:	7a3b      	ldrb	r3, [r7, #8]
 80198b0:	00c1      	lsls	r1, r0, #3
 80198b2:	88aa      	ldrh	r2, [r5, #4]
 80198b4:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80198b8:	4319      	orrs	r1, r3
 80198ba:	0643      	lsls	r3, r0, #25
 80198bc:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80198c0:	bf48      	it	mi
 80198c2:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 80198c6:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80198ca:	bf48      	it	mi
 80198cc:	b219      	sxthmi	r1, r3
 80198ce:	79fb      	ldrb	r3, [r7, #7]
 80198d0:	4303      	orrs	r3, r0
 80198d2:	4413      	add	r3, r2
 80198d4:	1a5b      	subs	r3, r3, r1
 80198d6:	b29b      	uxth	r3, r3
 80198d8:	42a3      	cmp	r3, r4
 80198da:	bfc8      	it	gt
 80198dc:	b21c      	sxthgt	r4, r3
 80198de:	4633      	mov	r3, r6
 80198e0:	462a      	mov	r2, r5
 80198e2:	2100      	movs	r1, #0
 80198e4:	e7da      	b.n	801989c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 80198e6:	b2a0      	uxth	r0, r4
 80198e8:	b01e      	add	sp, #120	; 0x78
 80198ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80198ee:	b003      	add	sp, #12
 80198f0:	4770      	bx	lr

080198f2 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80198f2:	b40e      	push	{r1, r2, r3}
 80198f4:	b570      	push	{r4, r5, r6, lr}
 80198f6:	b09d      	sub	sp, #116	; 0x74
 80198f8:	4604      	mov	r4, r0
 80198fa:	ab21      	add	r3, sp, #132	; 0x84
 80198fc:	a803      	add	r0, sp, #12
 80198fe:	f853 5b04 	ldr.w	r5, [r3], #4
 8019902:	9302      	str	r3, [sp, #8]
 8019904:	f000 fcbc 	bl	801a280 <_ZN8touchgfx12TextProviderC1Ev>
 8019908:	6823      	ldr	r3, [r4, #0]
 801990a:	4620      	mov	r0, r4
 801990c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801990e:	4798      	blx	r3
 8019910:	6823      	ldr	r3, [r4, #0]
 8019912:	4606      	mov	r6, r0
 8019914:	4620      	mov	r0, r4
 8019916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019918:	2401      	movs	r4, #1
 801991a:	4798      	blx	r3
 801991c:	4633      	mov	r3, r6
 801991e:	9000      	str	r0, [sp, #0]
 8019920:	4629      	mov	r1, r5
 8019922:	9a02      	ldr	r2, [sp, #8]
 8019924:	a803      	add	r0, sp, #12
 8019926:	f000 fcfe 	bl	801a326 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801992a:	a803      	add	r0, sp, #12
 801992c:	f001 f89c 	bl	801aa68 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019930:	b2a3      	uxth	r3, r4
 8019932:	b138      	cbz	r0, 8019944 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8019934:	280a      	cmp	r0, #10
 8019936:	a803      	add	r0, sp, #12
 8019938:	bf04      	itt	eq
 801993a:	3301      	addeq	r3, #1
 801993c:	b21c      	sxtheq	r4, r3
 801993e:	f001 f893 	bl	801aa68 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019942:	e7f5      	b.n	8019930 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8019944:	4618      	mov	r0, r3
 8019946:	b01d      	add	sp, #116	; 0x74
 8019948:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801994c:	b003      	add	sp, #12
 801994e:	4770      	bx	lr

08019950 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8019950:	b40e      	push	{r1, r2, r3}
 8019952:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019954:	b09e      	sub	sp, #120	; 0x78
 8019956:	4604      	mov	r4, r0
 8019958:	ab23      	add	r3, sp, #140	; 0x8c
 801995a:	a805      	add	r0, sp, #20
 801995c:	f853 5b04 	ldr.w	r5, [r3], #4
 8019960:	9303      	str	r3, [sp, #12]
 8019962:	f000 fc8d 	bl	801a280 <_ZN8touchgfx12TextProviderC1Ev>
 8019966:	6823      	ldr	r3, [r4, #0]
 8019968:	4620      	mov	r0, r4
 801996a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801996c:	4798      	blx	r3
 801996e:	6823      	ldr	r3, [r4, #0]
 8019970:	4606      	mov	r6, r0
 8019972:	4620      	mov	r0, r4
 8019974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019976:	4798      	blx	r3
 8019978:	4633      	mov	r3, r6
 801997a:	4629      	mov	r1, r5
 801997c:	9000      	str	r0, [sp, #0]
 801997e:	9a03      	ldr	r2, [sp, #12]
 8019980:	a805      	add	r0, sp, #20
 8019982:	f000 fcd0 	bl	801a326 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019986:	ad1e      	add	r5, sp, #120	; 0x78
 8019988:	2100      	movs	r1, #0
 801998a:	26ff      	movs	r6, #255	; 0xff
 801998c:	4622      	mov	r2, r4
 801998e:	a805      	add	r0, sp, #20
 8019990:	f845 1d68 	str.w	r1, [r5, #-104]!
 8019994:	462b      	mov	r3, r5
 8019996:	f000 ffc7 	bl	801a928 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801999a:	b1d8      	cbz	r0, 80199d4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 801999c:	280a      	cmp	r0, #10
 801999e:	d012      	beq.n	80199c6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 80199a0:	9804      	ldr	r0, [sp, #16]
 80199a2:	b180      	cbz	r0, 80199c6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 80199a4:	7b47      	ldrb	r7, [r0, #13]
 80199a6:	7922      	ldrb	r2, [r4, #4]
 80199a8:	00fb      	lsls	r3, r7, #3
 80199aa:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80199ae:	7a03      	ldrb	r3, [r0, #8]
 80199b0:	430b      	orrs	r3, r1
 80199b2:	0679      	lsls	r1, r7, #25
 80199b4:	bf44      	itt	mi
 80199b6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80199ba:	b21b      	sxthmi	r3, r3
 80199bc:	1ad3      	subs	r3, r2, r3
 80199be:	b2db      	uxtb	r3, r3
 80199c0:	429e      	cmp	r6, r3
 80199c2:	bf28      	it	cs
 80199c4:	461e      	movcs	r6, r3
 80199c6:	462b      	mov	r3, r5
 80199c8:	4622      	mov	r2, r4
 80199ca:	2100      	movs	r1, #0
 80199cc:	a805      	add	r0, sp, #20
 80199ce:	f000 ffab 	bl	801a928 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80199d2:	e7e2      	b.n	801999a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 80199d4:	4630      	mov	r0, r6
 80199d6:	b01e      	add	sp, #120	; 0x78
 80199d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80199dc:	b003      	add	sp, #12
 80199de:	4770      	bx	lr

080199e0 <_ZNK8touchgfx8Drawable10invalidateEv>:
 80199e0:	b513      	push	{r0, r1, r4, lr}
 80199e2:	6803      	ldr	r3, [r0, #0]
 80199e4:	2400      	movs	r4, #0
 80199e6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80199ea:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80199ee:	f8ad 1004 	strh.w	r1, [sp, #4]
 80199f2:	4669      	mov	r1, sp
 80199f4:	691b      	ldr	r3, [r3, #16]
 80199f6:	9400      	str	r4, [sp, #0]
 80199f8:	f8ad 2006 	strh.w	r2, [sp, #6]
 80199fc:	4798      	blx	r3
 80199fe:	b002      	add	sp, #8
 8019a00:	bd10      	pop	{r4, pc}

08019a02 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8019a02:	b538      	push	{r3, r4, r5, lr}
 8019a04:	680b      	ldr	r3, [r1, #0]
 8019a06:	460c      	mov	r4, r1
 8019a08:	4605      	mov	r5, r0
 8019a0a:	68db      	ldr	r3, [r3, #12]
 8019a0c:	4798      	blx	r3
 8019a0e:	6823      	ldr	r3, [r4, #0]
 8019a10:	4620      	mov	r0, r4
 8019a12:	4629      	mov	r1, r5
 8019a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019a16:	4798      	blx	r3
 8019a18:	4628      	mov	r0, r5
 8019a1a:	bd38      	pop	{r3, r4, r5, pc}

08019a1c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8019a1c:	b410      	push	{r4}
 8019a1e:	880a      	ldrh	r2, [r1, #0]
 8019a20:	8884      	ldrh	r4, [r0, #4]
 8019a22:	4422      	add	r2, r4
 8019a24:	800a      	strh	r2, [r1, #0]
 8019a26:	884a      	ldrh	r2, [r1, #2]
 8019a28:	88c4      	ldrh	r4, [r0, #6]
 8019a2a:	4422      	add	r2, r4
 8019a2c:	804a      	strh	r2, [r1, #2]
 8019a2e:	6940      	ldr	r0, [r0, #20]
 8019a30:	b120      	cbz	r0, 8019a3c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8019a32:	6803      	ldr	r3, [r0, #0]
 8019a34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019a3a:	4718      	bx	r3
 8019a3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019a40:	4770      	bx	lr

08019a42 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8019a42:	b570      	push	{r4, r5, r6, lr}
 8019a44:	8882      	ldrh	r2, [r0, #4]
 8019a46:	460c      	mov	r4, r1
 8019a48:	880b      	ldrh	r3, [r1, #0]
 8019a4a:	4605      	mov	r5, r0
 8019a4c:	4413      	add	r3, r2
 8019a4e:	800b      	strh	r3, [r1, #0]
 8019a50:	884b      	ldrh	r3, [r1, #2]
 8019a52:	88c2      	ldrh	r2, [r0, #6]
 8019a54:	4413      	add	r3, r2
 8019a56:	804b      	strh	r3, [r1, #2]
 8019a58:	1d01      	adds	r1, r0, #4
 8019a5a:	4620      	mov	r0, r4
 8019a5c:	f7fc fddc 	bl	8016618 <_ZN8touchgfx4RectaNERKS0_>
 8019a60:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8019a64:	2b00      	cmp	r3, #0
 8019a66:	dd0b      	ble.n	8019a80 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019a68:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8019a6c:	2b00      	cmp	r3, #0
 8019a6e:	dd07      	ble.n	8019a80 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019a70:	6968      	ldr	r0, [r5, #20]
 8019a72:	b128      	cbz	r0, 8019a80 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019a74:	6803      	ldr	r3, [r0, #0]
 8019a76:	4621      	mov	r1, r4
 8019a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019a7e:	4718      	bx	r3
 8019a80:	bd70      	pop	{r4, r5, r6, pc}
	...

08019a84 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8019a84:	b570      	push	{r4, r5, r6, lr}
 8019a86:	8882      	ldrh	r2, [r0, #4]
 8019a88:	460c      	mov	r4, r1
 8019a8a:	880b      	ldrh	r3, [r1, #0]
 8019a8c:	4605      	mov	r5, r0
 8019a8e:	4413      	add	r3, r2
 8019a90:	800b      	strh	r3, [r1, #0]
 8019a92:	884b      	ldrh	r3, [r1, #2]
 8019a94:	88c2      	ldrh	r2, [r0, #6]
 8019a96:	4413      	add	r3, r2
 8019a98:	804b      	strh	r3, [r1, #2]
 8019a9a:	1d01      	adds	r1, r0, #4
 8019a9c:	4620      	mov	r0, r4
 8019a9e:	f7fc fdbb 	bl	8016618 <_ZN8touchgfx4RectaNERKS0_>
 8019aa2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8019aa6:	2b00      	cmp	r3, #0
 8019aa8:	dd15      	ble.n	8019ad6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 8019aaa:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8019aae:	2b00      	cmp	r3, #0
 8019ab0:	dd11      	ble.n	8019ad6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 8019ab2:	6968      	ldr	r0, [r5, #20]
 8019ab4:	b128      	cbz	r0, 8019ac2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8019ab6:	6803      	ldr	r3, [r0, #0]
 8019ab8:	691b      	ldr	r3, [r3, #16]
 8019aba:	4621      	mov	r1, r4
 8019abc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019ac0:	4718      	bx	r3
 8019ac2:	4b05      	ldr	r3, [pc, #20]	; (8019ad8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x54>)
 8019ac4:	681b      	ldr	r3, [r3, #0]
 8019ac6:	3304      	adds	r3, #4
 8019ac8:	429d      	cmp	r5, r3
 8019aca:	d104      	bne.n	8019ad6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 8019acc:	f7ff f806 	bl	8018adc <_ZN8touchgfx11Application11getInstanceEv>
 8019ad0:	6803      	ldr	r3, [r0, #0]
 8019ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019ad4:	e7f1      	b.n	8019aba <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x36>
 8019ad6:	bd70      	pop	{r4, r5, r6, pc}
 8019ad8:	20014c20 	.word	0x20014c20

08019adc <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8019adc:	b570      	push	{r4, r5, r6, lr}
 8019ade:	4604      	mov	r4, r0
 8019ae0:	4616      	mov	r6, r2
 8019ae2:	460d      	mov	r5, r1
 8019ae4:	b901      	cbnz	r1, 8019ae8 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8019ae6:	b192      	cbz	r2, 8019b0e <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8019ae8:	6823      	ldr	r3, [r4, #0]
 8019aea:	4620      	mov	r0, r4
 8019aec:	695b      	ldr	r3, [r3, #20]
 8019aee:	4798      	blx	r3
 8019af0:	88e2      	ldrh	r2, [r4, #6]
 8019af2:	88a1      	ldrh	r1, [r4, #4]
 8019af4:	4620      	mov	r0, r4
 8019af6:	4432      	add	r2, r6
 8019af8:	4429      	add	r1, r5
 8019afa:	b212      	sxth	r2, r2
 8019afc:	b209      	sxth	r1, r1
 8019afe:	f7e9 fd38 	bl	8003572 <_ZN8touchgfx8Drawable5setXYEss>
 8019b02:	6823      	ldr	r3, [r4, #0]
 8019b04:	4620      	mov	r0, r4
 8019b06:	695b      	ldr	r3, [r3, #20]
 8019b08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019b0c:	4718      	bx	r3
 8019b0e:	bd70      	pop	{r4, r5, r6, pc}

08019b10 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8019b10:	b510      	push	{r4, lr}
 8019b12:	2300      	movs	r3, #0
 8019b14:	4604      	mov	r4, r0
 8019b16:	4608      	mov	r0, r1
 8019b18:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8019b1c:	8023      	strh	r3, [r4, #0]
 8019b1e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019b22:	8063      	strh	r3, [r4, #2]
 8019b24:	6803      	ldr	r3, [r0, #0]
 8019b26:	80a1      	strh	r1, [r4, #4]
 8019b28:	4621      	mov	r1, r4
 8019b2a:	80e2      	strh	r2, [r4, #6]
 8019b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019b2e:	4798      	blx	r3
 8019b30:	4620      	mov	r0, r4
 8019b32:	bd10      	pop	{r4, pc}

08019b34 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8019b34:	b530      	push	{r4, r5, lr}
 8019b36:	8083      	strh	r3, [r0, #4]
 8019b38:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8019b3c:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8019b40:	7183      	strb	r3, [r0, #6]
 8019b42:	79c3      	ldrb	r3, [r0, #7]
 8019b44:	6101      	str	r1, [r0, #16]
 8019b46:	f365 0306 	bfi	r3, r5, #0, #7
 8019b4a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8019b4e:	8282      	strh	r2, [r0, #20]
 8019b50:	f365 13c7 	bfi	r3, r5, #7, #1
 8019b54:	71c3      	strb	r3, [r0, #7]
 8019b56:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8019b5a:	7203      	strb	r3, [r0, #8]
 8019b5c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8019b60:	7243      	strb	r3, [r0, #9]
 8019b62:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8019b66:	8143      	strh	r3, [r0, #10]
 8019b68:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8019b6c:	8183      	strh	r3, [r0, #12]
 8019b6e:	4b01      	ldr	r3, [pc, #4]	; (8019b74 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8019b70:	6003      	str	r3, [r0, #0]
 8019b72:	bd30      	pop	{r4, r5, pc}
 8019b74:	0802d81c 	.word	0x0802d81c

08019b78 <_ZNK8touchgfx9ConstFont4findEt>:
 8019b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b7a:	6904      	ldr	r4, [r0, #16]
 8019b7c:	b3bc      	cbz	r4, 8019bee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019b7e:	88a3      	ldrh	r3, [r4, #4]
 8019b80:	8a82      	ldrh	r2, [r0, #20]
 8019b82:	1acb      	subs	r3, r1, r3
 8019b84:	f102 32ff 	add.w	r2, r2, #4294967295
 8019b88:	d431      	bmi.n	8019bee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019b8a:	4293      	cmp	r3, r2
 8019b8c:	dd0c      	ble.n	8019ba8 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8019b8e:	230e      	movs	r3, #14
 8019b90:	fb03 4302 	mla	r3, r3, r2, r4
 8019b94:	889b      	ldrh	r3, [r3, #4]
 8019b96:	1a5b      	subs	r3, r3, r1
 8019b98:	1ad3      	subs	r3, r2, r3
 8019b9a:	429a      	cmp	r2, r3
 8019b9c:	db27      	blt.n	8019bee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019b9e:	2b00      	cmp	r3, #0
 8019ba0:	bfbc      	itt	lt
 8019ba2:	2302      	movlt	r3, #2
 8019ba4:	fb92 f3f3 	sdivlt	r3, r2, r3
 8019ba8:	2500      	movs	r5, #0
 8019baa:	260e      	movs	r6, #14
 8019bac:	4295      	cmp	r5, r2
 8019bae:	dc1e      	bgt.n	8019bee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019bb0:	fb06 4003 	mla	r0, r6, r3, r4
 8019bb4:	8887      	ldrh	r7, [r0, #4]
 8019bb6:	42b9      	cmp	r1, r7
 8019bb8:	d01a      	beq.n	8019bf0 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8019bba:	d20d      	bcs.n	8019bd8 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8019bbc:	1e5a      	subs	r2, r3, #1
 8019bbe:	4295      	cmp	r5, r2
 8019bc0:	dc15      	bgt.n	8019bee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019bc2:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8019bc6:	1a5b      	subs	r3, r3, r1
 8019bc8:	1ad3      	subs	r3, r2, r3
 8019bca:	429a      	cmp	r2, r3
 8019bcc:	db0f      	blt.n	8019bee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019bce:	429d      	cmp	r5, r3
 8019bd0:	ddec      	ble.n	8019bac <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8019bd2:	1953      	adds	r3, r2, r5
 8019bd4:	105b      	asrs	r3, r3, #1
 8019bd6:	e7e9      	b.n	8019bac <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8019bd8:	1c5d      	adds	r5, r3, #1
 8019bda:	42aa      	cmp	r2, r5
 8019bdc:	db07      	blt.n	8019bee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019bde:	8a43      	ldrh	r3, [r0, #18]
 8019be0:	1acb      	subs	r3, r1, r3
 8019be2:	442b      	add	r3, r5
 8019be4:	429d      	cmp	r5, r3
 8019be6:	dc02      	bgt.n	8019bee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019be8:	429a      	cmp	r2, r3
 8019bea:	dadf      	bge.n	8019bac <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8019bec:	e7f1      	b.n	8019bd2 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8019bee:	2000      	movs	r0, #0
 8019bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019bf2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8019bf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019bf4:	4604      	mov	r4, r0
 8019bf6:	4617      	mov	r7, r2
 8019bf8:	461e      	mov	r6, r3
 8019bfa:	b911      	cbnz	r1, 8019c02 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8019bfc:	2500      	movs	r5, #0
 8019bfe:	4628      	mov	r0, r5
 8019c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c02:	290a      	cmp	r1, #10
 8019c04:	d0fa      	beq.n	8019bfc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019c06:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8019c0a:	4291      	cmp	r1, r2
 8019c0c:	d0f6      	beq.n	8019bfc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019c0e:	f242 020b 	movw	r2, #8203	; 0x200b
 8019c12:	4291      	cmp	r1, r2
 8019c14:	d0f2      	beq.n	8019bfc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019c16:	f7ff ffaf 	bl	8019b78 <_ZNK8touchgfx9ConstFont4findEt>
 8019c1a:	4605      	mov	r5, r0
 8019c1c:	b950      	cbnz	r0, 8019c34 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8019c1e:	6823      	ldr	r3, [r4, #0]
 8019c20:	4620      	mov	r0, r4
 8019c22:	691b      	ldr	r3, [r3, #16]
 8019c24:	4798      	blx	r3
 8019c26:	4601      	mov	r1, r0
 8019c28:	4620      	mov	r0, r4
 8019c2a:	f7ff ffa5 	bl	8019b78 <_ZNK8touchgfx9ConstFont4findEt>
 8019c2e:	4605      	mov	r5, r0
 8019c30:	2800      	cmp	r0, #0
 8019c32:	d0e3      	beq.n	8019bfc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019c34:	6823      	ldr	r3, [r4, #0]
 8019c36:	4629      	mov	r1, r5
 8019c38:	4620      	mov	r0, r4
 8019c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019c3c:	4798      	blx	r3
 8019c3e:	6038      	str	r0, [r7, #0]
 8019c40:	6823      	ldr	r3, [r4, #0]
 8019c42:	4620      	mov	r0, r4
 8019c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019c46:	4798      	blx	r3
 8019c48:	7030      	strb	r0, [r6, #0]
 8019c4a:	e7d8      	b.n	8019bfe <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08019c4c <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 8019c4c:	2000      	movs	r0, #0
 8019c4e:	4770      	bx	lr

08019c50 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 8019c50:	2001      	movs	r0, #1
 8019c52:	4770      	bx	lr

08019c54 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 8019c54:	2002      	movs	r0, #2
 8019c56:	4770      	bx	lr

08019c58 <_ZN8touchgfx6ScreenD1Ev>:
 8019c58:	4770      	bx	lr

08019c5a <_ZN8touchgfx12GestureEventD1Ev>:
 8019c5a:	4770      	bx	lr

08019c5c <_ZN8touchgfx9DragEventD1Ev>:
 8019c5c:	4770      	bx	lr

08019c5e <_ZN8touchgfx10ClickEventD1Ev>:
 8019c5e:	4770      	bx	lr

08019c60 <_ZN8touchgfx10ClickEventD0Ev>:
 8019c60:	b510      	push	{r4, lr}
 8019c62:	4604      	mov	r4, r0
 8019c64:	210c      	movs	r1, #12
 8019c66:	f00d fb9f 	bl	80273a8 <_ZdlPvj>
 8019c6a:	4620      	mov	r0, r4
 8019c6c:	bd10      	pop	{r4, pc}

08019c6e <_ZN8touchgfx9DragEventD0Ev>:
 8019c6e:	b510      	push	{r4, lr}
 8019c70:	4604      	mov	r4, r0
 8019c72:	2110      	movs	r1, #16
 8019c74:	f00d fb98 	bl	80273a8 <_ZdlPvj>
 8019c78:	4620      	mov	r0, r4
 8019c7a:	bd10      	pop	{r4, pc}

08019c7c <_ZN8touchgfx12GestureEventD0Ev>:
 8019c7c:	b510      	push	{r4, lr}
 8019c7e:	4604      	mov	r4, r0
 8019c80:	210c      	movs	r1, #12
 8019c82:	f00d fb91 	bl	80273a8 <_ZdlPvj>
 8019c86:	4620      	mov	r0, r4
 8019c88:	bd10      	pop	{r4, pc}

08019c8a <_ZN8touchgfx6ScreenD0Ev>:
 8019c8a:	b510      	push	{r4, lr}
 8019c8c:	4604      	mov	r4, r0
 8019c8e:	213c      	movs	r1, #60	; 0x3c
 8019c90:	f00d fb8a 	bl	80273a8 <_ZdlPvj>
 8019c94:	4620      	mov	r0, r4
 8019c96:	bd10      	pop	{r4, pc}

08019c98 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8019c98:	b530      	push	{r4, r5, lr}
 8019c9a:	460d      	mov	r5, r1
 8019c9c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8019c9e:	b087      	sub	sp, #28
 8019ca0:	4604      	mov	r4, r0
 8019ca2:	b301      	cbz	r1, 8019ce6 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8019ca4:	a801      	add	r0, sp, #4
 8019ca6:	f7ff ff33 	bl	8019b10 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019caa:	892a      	ldrh	r2, [r5, #8]
 8019cac:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8019cb0:	7928      	ldrb	r0, [r5, #4]
 8019cb2:	1ad2      	subs	r2, r2, r3
 8019cb4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8019cb6:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8019cba:	441a      	add	r2, r3
 8019cbc:	896b      	ldrh	r3, [r5, #10]
 8019cbe:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8019cc2:	f88d 0010 	strb.w	r0, [sp, #16]
 8019cc6:	1b5b      	subs	r3, r3, r5
 8019cc8:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8019cca:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8019ccc:	442b      	add	r3, r5
 8019cce:	4d07      	ldr	r5, [pc, #28]	; (8019cec <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8019cd0:	f8ad 1012 	strh.w	r1, [sp, #18]
 8019cd4:	a903      	add	r1, sp, #12
 8019cd6:	9503      	str	r5, [sp, #12]
 8019cd8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019cdc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019ce0:	6803      	ldr	r3, [r0, #0]
 8019ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019ce4:	4798      	blx	r3
 8019ce6:	b007      	add	sp, #28
 8019ce8:	bd30      	pop	{r4, r5, pc}
 8019cea:	bf00      	nop
 8019cec:	0802d89c 	.word	0x0802d89c

08019cf0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8019cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019cf4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8019cf6:	b08a      	sub	sp, #40	; 0x28
 8019cf8:	4604      	mov	r4, r0
 8019cfa:	460d      	mov	r5, r1
 8019cfc:	b113      	cbz	r3, 8019d04 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8019cfe:	790b      	ldrb	r3, [r1, #4]
 8019d00:	2b00      	cmp	r3, #0
 8019d02:	d044      	beq.n	8019d8e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8019d04:	f104 0804 	add.w	r8, r4, #4
 8019d08:	a803      	add	r0, sp, #12
 8019d0a:	4641      	mov	r1, r8
 8019d0c:	f7ff ff00 	bl	8019b10 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019d10:	792b      	ldrb	r3, [r5, #4]
 8019d12:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8019d16:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8019d1a:	b983      	cbnz	r3, 8019d3e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8019d1c:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8019d20:	892a      	ldrh	r2, [r5, #8]
 8019d22:	88e9      	ldrh	r1, [r5, #6]
 8019d24:	4640      	mov	r0, r8
 8019d26:	1b92      	subs	r2, r2, r6
 8019d28:	9301      	str	r3, [sp, #4]
 8019d2a:	1bc9      	subs	r1, r1, r7
 8019d2c:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8019d30:	b212      	sxth	r2, r2
 8019d32:	9300      	str	r3, [sp, #0]
 8019d34:	b209      	sxth	r1, r1
 8019d36:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8019d3a:	f7fc fb8b 	bl	8016454 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8019d3e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019d40:	b329      	cbz	r1, 8019d8e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8019d42:	a805      	add	r0, sp, #20
 8019d44:	f7ff fee4 	bl	8019b10 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019d48:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8019d4c:	792b      	ldrb	r3, [r5, #4]
 8019d4e:	a907      	add	r1, sp, #28
 8019d50:	1abf      	subs	r7, r7, r2
 8019d52:	88ea      	ldrh	r2, [r5, #6]
 8019d54:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8019d56:	4417      	add	r7, r2
 8019d58:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8019d5a:	f88d 3020 	strb.w	r3, [sp, #32]
 8019d5e:	4417      	add	r7, r2
 8019d60:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019d64:	1ab6      	subs	r6, r6, r2
 8019d66:	892a      	ldrh	r2, [r5, #8]
 8019d68:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8019d6c:	4416      	add	r6, r2
 8019d6e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8019d70:	4416      	add	r6, r2
 8019d72:	4a08      	ldr	r2, [pc, #32]	; (8019d94 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8019d74:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8019d78:	2600      	movs	r6, #0
 8019d7a:	9207      	str	r2, [sp, #28]
 8019d7c:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8019d80:	6803      	ldr	r3, [r0, #0]
 8019d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019d84:	4798      	blx	r3
 8019d86:	792b      	ldrb	r3, [r5, #4]
 8019d88:	b10b      	cbz	r3, 8019d8e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8019d8a:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8019d8e:	b00a      	add	sp, #40	; 0x28
 8019d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d94:	0802d874 	.word	0x0802d874

08019d98 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8019d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d9c:	460c      	mov	r4, r1
 8019d9e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8019da0:	b088      	sub	sp, #32
 8019da2:	4605      	mov	r5, r0
 8019da4:	2900      	cmp	r1, #0
 8019da6:	d06d      	beq.n	8019e84 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8019da8:	4668      	mov	r0, sp
 8019daa:	f7ff feb1 	bl	8019b10 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019dae:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8019db0:	88e3      	ldrh	r3, [r4, #6]
 8019db2:	f9bd 8000 	ldrsh.w	r8, [sp]
 8019db6:	440b      	add	r3, r1
 8019db8:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8019dbc:	b21b      	sxth	r3, r3
 8019dbe:	4543      	cmp	r3, r8
 8019dc0:	db31      	blt.n	8019e26 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8019dc2:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8019dc6:	44c4      	add	ip, r8
 8019dc8:	fa0f fc8c 	sxth.w	ip, ip
 8019dcc:	4563      	cmp	r3, ip
 8019dce:	da2a      	bge.n	8019e26 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8019dd0:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8019dd2:	8926      	ldrh	r6, [r4, #8]
 8019dd4:	4416      	add	r6, r2
 8019dd6:	b236      	sxth	r6, r6
 8019dd8:	42be      	cmp	r6, r7
 8019dda:	db24      	blt.n	8019e26 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8019ddc:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8019de0:	4438      	add	r0, r7
 8019de2:	b200      	sxth	r0, r0
 8019de4:	4286      	cmp	r6, r0
 8019de6:	da1e      	bge.n	8019e26 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8019de8:	8963      	ldrh	r3, [r4, #10]
 8019dea:	4419      	add	r1, r3
 8019dec:	b209      	sxth	r1, r1
 8019dee:	4541      	cmp	r1, r8
 8019df0:	db08      	blt.n	8019e04 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8019df2:	4561      	cmp	r1, ip
 8019df4:	da06      	bge.n	8019e04 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8019df6:	89a3      	ldrh	r3, [r4, #12]
 8019df8:	441a      	add	r2, r3
 8019dfa:	b212      	sxth	r2, r2
 8019dfc:	42ba      	cmp	r2, r7
 8019dfe:	db01      	blt.n	8019e04 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8019e00:	4282      	cmp	r2, r0
 8019e02:	db10      	blt.n	8019e26 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8019e04:	4b21      	ldr	r3, [pc, #132]	; (8019e8c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8019e06:	a904      	add	r1, sp, #16
 8019e08:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8019e0a:	9304      	str	r3, [sp, #16]
 8019e0c:	2302      	movs	r3, #2
 8019e0e:	f88d 3014 	strb.w	r3, [sp, #20]
 8019e12:	2300      	movs	r3, #0
 8019e14:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019e18:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019e1c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019e20:	6803      	ldr	r3, [r0, #0]
 8019e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019e24:	4798      	blx	r3
 8019e26:	1d29      	adds	r1, r5, #4
 8019e28:	a802      	add	r0, sp, #8
 8019e2a:	f7ff fe71 	bl	8019b10 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019e2e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8019e32:	88e0      	ldrh	r0, [r4, #6]
 8019e34:	eba3 0808 	sub.w	r8, r3, r8
 8019e38:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8019e3c:	7921      	ldrb	r1, [r4, #4]
 8019e3e:	fa1f f888 	uxth.w	r8, r8
 8019e42:	1bdf      	subs	r7, r3, r7
 8019e44:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8019e48:	b2bb      	uxth	r3, r7
 8019e4a:	4440      	add	r0, r8
 8019e4c:	8922      	ldrh	r2, [r4, #8]
 8019e4e:	8967      	ldrh	r7, [r4, #10]
 8019e50:	4460      	add	r0, ip
 8019e52:	89a4      	ldrh	r4, [r4, #12]
 8019e54:	441a      	add	r2, r3
 8019e56:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8019e58:	44b8      	add	r8, r7
 8019e5a:	4423      	add	r3, r4
 8019e5c:	f8ad 0016 	strh.w	r0, [sp, #22]
 8019e60:	4432      	add	r2, r6
 8019e62:	44e0      	add	r8, ip
 8019e64:	4433      	add	r3, r6
 8019e66:	4c0a      	ldr	r4, [pc, #40]	; (8019e90 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8019e68:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8019e6a:	f88d 1014 	strb.w	r1, [sp, #20]
 8019e6e:	a904      	add	r1, sp, #16
 8019e70:	9404      	str	r4, [sp, #16]
 8019e72:	f8ad 2018 	strh.w	r2, [sp, #24]
 8019e76:	f8ad 801a 	strh.w	r8, [sp, #26]
 8019e7a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019e7e:	6803      	ldr	r3, [r0, #0]
 8019e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019e82:	4798      	blx	r3
 8019e84:	b008      	add	sp, #32
 8019e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e8a:	bf00      	nop
 8019e8c:	0802d874 	.word	0x0802d874
 8019e90:	0802d888 	.word	0x0802d888

08019e94 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8019e94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019e96:	4604      	mov	r4, r0
 8019e98:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8019e9c:	3201      	adds	r2, #1
 8019e9e:	d112      	bne.n	8019ec6 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8019ea0:	2500      	movs	r5, #0
 8019ea2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8019ea6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019eaa:	6803      	ldr	r3, [r0, #0]
 8019eac:	9500      	str	r5, [sp, #0]
 8019eae:	466d      	mov	r5, sp
 8019eb0:	f8ad 1004 	strh.w	r1, [sp, #4]
 8019eb4:	f8ad 2006 	strh.w	r2, [sp, #6]
 8019eb8:	4629      	mov	r1, r5
 8019eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ebc:	4798      	blx	r3
 8019ebe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019ec2:	e884 0003 	stmia.w	r4, {r0, r1}
 8019ec6:	4620      	mov	r0, r4
 8019ec8:	b003      	add	sp, #12
 8019eca:	bd30      	pop	{r4, r5, pc}

08019ecc <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8019ecc:	b513      	push	{r0, r1, r4, lr}
 8019ece:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8019ed2:	4604      	mov	r4, r0
 8019ed4:	3301      	adds	r3, #1
 8019ed6:	d109      	bne.n	8019eec <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8019ed8:	4601      	mov	r1, r0
 8019eda:	4668      	mov	r0, sp
 8019edc:	f7ff fe18 	bl	8019b10 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019ee0:	f8bd 3000 	ldrh.w	r3, [sp]
 8019ee4:	8423      	strh	r3, [r4, #32]
 8019ee6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019eea:	8463      	strh	r3, [r4, #34]	; 0x22
 8019eec:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8019ef0:	b002      	add	sp, #8
 8019ef2:	bd10      	pop	{r4, pc}

08019ef4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8019ef4:	b513      	push	{r0, r1, r4, lr}
 8019ef6:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8019efa:	4604      	mov	r4, r0
 8019efc:	3301      	adds	r3, #1
 8019efe:	d109      	bne.n	8019f14 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8019f00:	4601      	mov	r1, r0
 8019f02:	4668      	mov	r0, sp
 8019f04:	f7ff fe04 	bl	8019b10 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019f08:	f8bd 3000 	ldrh.w	r3, [sp]
 8019f0c:	8423      	strh	r3, [r4, #32]
 8019f0e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019f12:	8463      	strh	r3, [r4, #34]	; 0x22
 8019f14:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8019f18:	b002      	add	sp, #8
 8019f1a:	bd10      	pop	{r4, pc}

08019f1c <_ZN8touchgfx6ScreenC1Ev>:
 8019f1c:	b570      	push	{r4, r5, r6, lr}
 8019f1e:	4b17      	ldr	r3, [pc, #92]	; (8019f7c <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8019f20:	4605      	mov	r5, r0
 8019f22:	4a17      	ldr	r2, [pc, #92]	; (8019f80 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8019f24:	2101      	movs	r1, #1
 8019f26:	f845 3b04 	str.w	r3, [r5], #4
 8019f2a:	2300      	movs	r3, #0
 8019f2c:	6042      	str	r2, [r0, #4]
 8019f2e:	4604      	mov	r4, r0
 8019f30:	8103      	strh	r3, [r0, #8]
 8019f32:	8143      	strh	r3, [r0, #10]
 8019f34:	8183      	strh	r3, [r0, #12]
 8019f36:	81c3      	strh	r3, [r0, #14]
 8019f38:	8203      	strh	r3, [r0, #16]
 8019f3a:	8243      	strh	r3, [r0, #18]
 8019f3c:	8283      	strh	r3, [r0, #20]
 8019f3e:	82c3      	strh	r3, [r0, #22]
 8019f40:	6203      	str	r3, [r0, #32]
 8019f42:	8483      	strh	r3, [r0, #36]	; 0x24
 8019f44:	84c3      	strh	r3, [r0, #38]	; 0x26
 8019f46:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8019f4a:	6343      	str	r3, [r0, #52]	; 0x34
 8019f4c:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8019f50:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8019f54:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8019f58:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8019f5c:	4b09      	ldr	r3, [pc, #36]	; (8019f84 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8019f5e:	4628      	mov	r0, r5
 8019f60:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019f64:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8019f66:	4a08      	ldr	r2, [pc, #32]	; (8019f88 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8019f68:	f9b2 1000 	ldrsh.w	r1, [r2]
 8019f6c:	4798      	blx	r3
 8019f6e:	6863      	ldr	r3, [r4, #4]
 8019f70:	4628      	mov	r0, r5
 8019f72:	4631      	mov	r1, r6
 8019f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019f76:	4798      	blx	r3
 8019f78:	4620      	mov	r0, r4
 8019f7a:	bd70      	pop	{r4, r5, r6, pc}
 8019f7c:	0802d8b0 	.word	0x0802d8b0
 8019f80:	0802cb7c 	.word	0x0802cb7c
 8019f84:	20014bda 	.word	0x20014bda
 8019f88:	20014bd8 	.word	0x20014bd8

08019f8c <_ZN8touchgfx6Screen4drawEv>:
 8019f8c:	4b09      	ldr	r3, [pc, #36]	; (8019fb4 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8019f8e:	b507      	push	{r0, r1, r2, lr}
 8019f90:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019f94:	2100      	movs	r1, #0
 8019f96:	4b08      	ldr	r3, [pc, #32]	; (8019fb8 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8019f98:	9100      	str	r1, [sp, #0]
 8019f9a:	4669      	mov	r1, sp
 8019f9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019fa0:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019fa4:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019fa8:	6803      	ldr	r3, [r0, #0]
 8019faa:	689b      	ldr	r3, [r3, #8]
 8019fac:	4798      	blx	r3
 8019fae:	b003      	add	sp, #12
 8019fb0:	f85d fb04 	ldr.w	pc, [sp], #4
 8019fb4:	20014bd8 	.word	0x20014bd8
 8019fb8:	20014bda 	.word	0x20014bda

08019fbc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8019fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fc0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8019fc4:	b089      	sub	sp, #36	; 0x24
 8019fc6:	4680      	mov	r8, r0
 8019fc8:	460c      	mov	r4, r1
 8019fca:	2b00      	cmp	r3, #0
 8019fcc:	4615      	mov	r5, r2
 8019fce:	dd0e      	ble.n	8019fee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8019fd0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	dd0a      	ble.n	8019fee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8019fd8:	4628      	mov	r0, r5
 8019fda:	f7ff ff5b 	bl	8019e94 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8019fde:	4621      	mov	r1, r4
 8019fe0:	f7fe fcf2 	bl	80189c8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019fe4:	69eb      	ldr	r3, [r5, #28]
 8019fe6:	b928      	cbnz	r0, 8019ff4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8019fe8:	461d      	mov	r5, r3
 8019fea:	2b00      	cmp	r3, #0
 8019fec:	d1f4      	bne.n	8019fd8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8019fee:	b009      	add	sp, #36	; 0x24
 8019ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ff4:	ae04      	add	r6, sp, #16
 8019ff6:	2b00      	cmp	r3, #0
 8019ff8:	f000 80b5 	beq.w	801a166 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8019ffc:	682b      	ldr	r3, [r5, #0]
 8019ffe:	4629      	mov	r1, r5
 801a000:	a802      	add	r0, sp, #8
 801a002:	68db      	ldr	r3, [r3, #12]
 801a004:	4798      	blx	r3
 801a006:	4628      	mov	r0, r5
 801a008:	f7ff ff60 	bl	8019ecc <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a00c:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801a010:	4407      	add	r7, r0
 801a012:	4628      	mov	r0, r5
 801a014:	f7ff ff6e 	bl	8019ef4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a018:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a01c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801a020:	b23f      	sxth	r7, r7
 801a022:	4418      	add	r0, r3
 801a024:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801a028:	4621      	mov	r1, r4
 801a02a:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a02e:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a032:	4630      	mov	r0, r6
 801a034:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a038:	f8ad 7010 	strh.w	r7, [sp, #16]
 801a03c:	f7fc faec 	bl	8016618 <_ZN8touchgfx4RectaNERKS0_>
 801a040:	4628      	mov	r0, r5
 801a042:	f7ff ff27 	bl	8019e94 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a046:	ab06      	add	r3, sp, #24
 801a048:	4602      	mov	r2, r0
 801a04a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801a04e:	e883 0003 	stmia.w	r3, {r0, r1}
 801a052:	4611      	mov	r1, r2
 801a054:	4618      	mov	r0, r3
 801a056:	f7fc fadf 	bl	8016618 <_ZN8touchgfx4RectaNERKS0_>
 801a05a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801a05e:	f9b4 1000 	ldrsh.w	r1, [r4]
 801a062:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801a066:	4299      	cmp	r1, r3
 801a068:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801a06c:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801a070:	d10b      	bne.n	801a08a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a072:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a076:	4552      	cmp	r2, sl
 801a078:	d107      	bne.n	801a08a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a07a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801a07e:	455a      	cmp	r2, fp
 801a080:	d103      	bne.n	801a08a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a082:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801a086:	454a      	cmp	r2, r9
 801a088:	d06d      	beq.n	801a166 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801a08a:	f1bb 0f00 	cmp.w	fp, #0
 801a08e:	dd65      	ble.n	801a15c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801a090:	f1b9 0f00 	cmp.w	r9, #0
 801a094:	dd62      	ble.n	801a15c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801a096:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a09a:	fa1f f08a 	uxth.w	r0, sl
 801a09e:	4552      	cmp	r2, sl
 801a0a0:	9000      	str	r0, [sp, #0]
 801a0a2:	da12      	bge.n	801a0ca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801a0a4:	9301      	str	r3, [sp, #4]
 801a0a6:	9b00      	ldr	r3, [sp, #0]
 801a0a8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a0ac:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a0b0:	1a9a      	subs	r2, r3, r2
 801a0b2:	f8ad 1010 	strh.w	r1, [sp, #16]
 801a0b6:	4631      	mov	r1, r6
 801a0b8:	f8ad 0014 	strh.w	r0, [sp, #20]
 801a0bc:	4640      	mov	r0, r8
 801a0be:	f8ad 2016 	strh.w	r2, [sp, #22]
 801a0c2:	69ea      	ldr	r2, [r5, #28]
 801a0c4:	f7ff ff7a 	bl	8019fbc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a0c8:	9b01      	ldr	r3, [sp, #4]
 801a0ca:	f9b4 2000 	ldrsh.w	r2, [r4]
 801a0ce:	b29f      	uxth	r7, r3
 801a0d0:	429a      	cmp	r2, r3
 801a0d2:	da0d      	bge.n	801a0f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801a0d4:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a0d8:	1aba      	subs	r2, r7, r2
 801a0da:	f8ad a012 	strh.w	sl, [sp, #18]
 801a0de:	4631      	mov	r1, r6
 801a0e0:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a0e4:	4640      	mov	r0, r8
 801a0e6:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a0ea:	69ea      	ldr	r2, [r5, #28]
 801a0ec:	f7ff ff66 	bl	8019fbc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a0f0:	8822      	ldrh	r2, [r4, #0]
 801a0f2:	445f      	add	r7, fp
 801a0f4:	88a3      	ldrh	r3, [r4, #4]
 801a0f6:	b2bf      	uxth	r7, r7
 801a0f8:	4413      	add	r3, r2
 801a0fa:	b23a      	sxth	r2, r7
 801a0fc:	b29b      	uxth	r3, r3
 801a0fe:	b219      	sxth	r1, r3
 801a100:	4291      	cmp	r1, r2
 801a102:	dd0d      	ble.n	801a120 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801a104:	1bdb      	subs	r3, r3, r7
 801a106:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a10a:	f8ad a012 	strh.w	sl, [sp, #18]
 801a10e:	4631      	mov	r1, r6
 801a110:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a114:	4640      	mov	r0, r8
 801a116:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a11a:	69ea      	ldr	r2, [r5, #28]
 801a11c:	f7ff ff4e 	bl	8019fbc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a120:	88e2      	ldrh	r2, [r4, #6]
 801a122:	8863      	ldrh	r3, [r4, #2]
 801a124:	4413      	add	r3, r2
 801a126:	9a00      	ldr	r2, [sp, #0]
 801a128:	444a      	add	r2, r9
 801a12a:	b29b      	uxth	r3, r3
 801a12c:	fa1f f982 	uxth.w	r9, r2
 801a130:	b219      	sxth	r1, r3
 801a132:	fa0f f289 	sxth.w	r2, r9
 801a136:	428a      	cmp	r2, r1
 801a138:	da15      	bge.n	801a166 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801a13a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801a13e:	eba3 0309 	sub.w	r3, r3, r9
 801a142:	f9b4 0000 	ldrsh.w	r0, [r4]
 801a146:	f8ad 1014 	strh.w	r1, [sp, #20]
 801a14a:	4631      	mov	r1, r6
 801a14c:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a150:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a154:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a158:	69ea      	ldr	r2, [r5, #28]
 801a15a:	e001      	b.n	801a160 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801a15c:	69ea      	ldr	r2, [r5, #28]
 801a15e:	4621      	mov	r1, r4
 801a160:	4640      	mov	r0, r8
 801a162:	f7ff ff2b 	bl	8019fbc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a166:	4628      	mov	r0, r5
 801a168:	f7ff fe94 	bl	8019e94 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a16c:	6861      	ldr	r1, [r4, #4]
 801a16e:	4602      	mov	r2, r0
 801a170:	4633      	mov	r3, r6
 801a172:	6820      	ldr	r0, [r4, #0]
 801a174:	c303      	stmia	r3!, {r0, r1}
 801a176:	4611      	mov	r1, r2
 801a178:	4630      	mov	r0, r6
 801a17a:	f7fc fa4d 	bl	8016618 <_ZN8touchgfx4RectaNERKS0_>
 801a17e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801a182:	2b00      	cmp	r3, #0
 801a184:	f77f af33 	ble.w	8019fee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a188:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801a18c:	2b00      	cmp	r3, #0
 801a18e:	f77f af2e 	ble.w	8019fee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a192:	4628      	mov	r0, r5
 801a194:	f7ff fe9a 	bl	8019ecc <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a198:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801a19c:	1a18      	subs	r0, r3, r0
 801a19e:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a1a2:	4628      	mov	r0, r5
 801a1a4:	f7ff fea6 	bl	8019ef4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a1a8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801a1ac:	4631      	mov	r1, r6
 801a1ae:	1a18      	subs	r0, r3, r0
 801a1b0:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a1b4:	4628      	mov	r0, r5
 801a1b6:	682b      	ldr	r3, [r5, #0]
 801a1b8:	689b      	ldr	r3, [r3, #8]
 801a1ba:	4798      	blx	r3
 801a1bc:	e717      	b.n	8019fee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801a1be <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801a1be:	b570      	push	{r4, r5, r6, lr}
 801a1c0:	1d06      	adds	r6, r0, #4
 801a1c2:	b086      	sub	sp, #24
 801a1c4:	460c      	mov	r4, r1
 801a1c6:	2300      	movs	r3, #0
 801a1c8:	4631      	mov	r1, r6
 801a1ca:	4605      	mov	r5, r0
 801a1cc:	a802      	add	r0, sp, #8
 801a1ce:	9301      	str	r3, [sp, #4]
 801a1d0:	f7ff fc9e 	bl	8019b10 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a1d4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a1d8:	8822      	ldrh	r2, [r4, #0]
 801a1da:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801a1de:	1ad2      	subs	r2, r2, r3
 801a1e0:	8863      	ldrh	r3, [r4, #2]
 801a1e2:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a1e6:	1a5b      	subs	r3, r3, r1
 801a1e8:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801a1ec:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a1f0:	aa01      	add	r2, sp, #4
 801a1f2:	f8ad 0014 	strh.w	r0, [sp, #20]
 801a1f6:	4630      	mov	r0, r6
 801a1f8:	f8ad 1016 	strh.w	r1, [sp, #22]
 801a1fc:	a904      	add	r1, sp, #16
 801a1fe:	f8ad 3012 	strh.w	r3, [sp, #18]
 801a202:	f7fc fae1 	bl	80167c8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801a206:	9a01      	ldr	r2, [sp, #4]
 801a208:	b11a      	cbz	r2, 801a212 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801a20a:	4621      	mov	r1, r4
 801a20c:	4628      	mov	r0, r5
 801a20e:	f7ff fed5 	bl	8019fbc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a212:	b006      	add	sp, #24
 801a214:	bd70      	pop	{r4, r5, r6, pc}

0801a216 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801a216:	4602      	mov	r2, r0
 801a218:	b530      	push	{r4, r5, lr}
 801a21a:	4604      	mov	r4, r0
 801a21c:	b085      	sub	sp, #20
 801a21e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801a222:	460d      	mov	r5, r1
 801a224:	466b      	mov	r3, sp
 801a226:	6851      	ldr	r1, [r2, #4]
 801a228:	c303      	stmia	r3!, {r0, r1}
 801a22a:	4629      	mov	r1, r5
 801a22c:	4668      	mov	r0, sp
 801a22e:	f7fc f9f3 	bl	8016618 <_ZN8touchgfx4RectaNERKS0_>
 801a232:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801a236:	b12b      	cbz	r3, 801a244 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801a238:	4669      	mov	r1, sp
 801a23a:	4620      	mov	r0, r4
 801a23c:	f7ff ffbf 	bl	801a1be <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801a240:	b005      	add	sp, #20
 801a242:	bd30      	pop	{r4, r5, pc}
 801a244:	3404      	adds	r4, #4
 801a246:	a802      	add	r0, sp, #8
 801a248:	4621      	mov	r1, r4
 801a24a:	f7ff fc61 	bl	8019b10 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a24e:	f8bd 3000 	ldrh.w	r3, [sp]
 801a252:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801a256:	4669      	mov	r1, sp
 801a258:	4620      	mov	r0, r4
 801a25a:	1a9b      	subs	r3, r3, r2
 801a25c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801a260:	f8ad 3000 	strh.w	r3, [sp]
 801a264:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a268:	1a9b      	subs	r3, r3, r2
 801a26a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801a26e:	f7fc fa72 	bl	8016756 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801a272:	e7e5      	b.n	801a240 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801a274 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801a274:	460b      	mov	r3, r1
 801a276:	680a      	ldr	r2, [r1, #0]
 801a278:	1d01      	adds	r1, r0, #4
 801a27a:	6992      	ldr	r2, [r2, #24]
 801a27c:	4618      	mov	r0, r3
 801a27e:	4710      	bx	r2

0801a280 <_ZN8touchgfx12TextProviderC1Ev>:
 801a280:	b538      	push	{r3, r4, r5, lr}
 801a282:	2500      	movs	r5, #0
 801a284:	2302      	movs	r3, #2
 801a286:	4604      	mov	r4, r0
 801a288:	220e      	movs	r2, #14
 801a28a:	7403      	strb	r3, [r0, #16]
 801a28c:	4629      	mov	r1, r5
 801a28e:	6145      	str	r5, [r0, #20]
 801a290:	7605      	strb	r5, [r0, #24]
 801a292:	83c5      	strh	r5, [r0, #30]
 801a294:	8405      	strh	r5, [r0, #32]
 801a296:	86c5      	strh	r5, [r0, #54]	; 0x36
 801a298:	8705      	strh	r5, [r0, #56]	; 0x38
 801a29a:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801a29c:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801a2a0:	e9c0 5500 	strd	r5, r5, [r0]
 801a2a4:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801a2a8:	304c      	adds	r0, #76	; 0x4c
 801a2aa:	f00d f93b 	bl	8027524 <memset>
 801a2ae:	2301      	movs	r3, #1
 801a2b0:	4620      	mov	r0, r4
 801a2b2:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801a2b6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801a2ba:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801a2be:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801a2c2:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801a2c6:	f7e9 fb17 	bl	80038f8 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801a2ca:	4620      	mov	r0, r4
 801a2cc:	bd38      	pop	{r3, r4, r5, pc}

0801a2ce <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801a2ce:	b530      	push	{r4, r5, lr}
 801a2d0:	2500      	movs	r5, #0
 801a2d2:	2401      	movs	r4, #1
 801a2d4:	6843      	ldr	r3, [r0, #4]
 801a2d6:	b913      	cbnz	r3, 801a2de <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801a2d8:	6803      	ldr	r3, [r0, #0]
 801a2da:	b313      	cbz	r3, 801a322 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801a2dc:	6043      	str	r3, [r0, #4]
 801a2de:	7e03      	ldrb	r3, [r0, #24]
 801a2e0:	b143      	cbz	r3, 801a2f4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801a2e2:	6943      	ldr	r3, [r0, #20]
 801a2e4:	b12b      	cbz	r3, 801a2f2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a2e6:	881a      	ldrh	r2, [r3, #0]
 801a2e8:	b11a      	cbz	r2, 801a2f2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a2ea:	1c9a      	adds	r2, r3, #2
 801a2ec:	6142      	str	r2, [r0, #20]
 801a2ee:	8818      	ldrh	r0, [r3, #0]
 801a2f0:	bd30      	pop	{r4, r5, pc}
 801a2f2:	7605      	strb	r5, [r0, #24]
 801a2f4:	6843      	ldr	r3, [r0, #4]
 801a2f6:	8819      	ldrh	r1, [r3, #0]
 801a2f8:	b199      	cbz	r1, 801a322 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801a2fa:	1c9a      	adds	r2, r3, #2
 801a2fc:	2902      	cmp	r1, #2
 801a2fe:	6042      	str	r2, [r0, #4]
 801a300:	d1f5      	bne.n	801a2ee <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801a302:	7c03      	ldrb	r3, [r0, #16]
 801a304:	2b01      	cmp	r3, #1
 801a306:	d8e5      	bhi.n	801a2d4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a308:	1c5a      	adds	r2, r3, #1
 801a30a:	3302      	adds	r3, #2
 801a30c:	7402      	strb	r2, [r0, #16]
 801a30e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801a312:	6143      	str	r3, [r0, #20]
 801a314:	2b00      	cmp	r3, #0
 801a316:	d0dd      	beq.n	801a2d4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a318:	881b      	ldrh	r3, [r3, #0]
 801a31a:	2b00      	cmp	r3, #0
 801a31c:	d0da      	beq.n	801a2d4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a31e:	7604      	strb	r4, [r0, #24]
 801a320:	e7d8      	b.n	801a2d4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a322:	2000      	movs	r0, #0
 801a324:	e7e4      	b.n	801a2f0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801a326 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801a326:	b430      	push	{r4, r5}
 801a328:	6815      	ldr	r5, [r2, #0]
 801a32a:	6085      	str	r5, [r0, #8]
 801a32c:	6852      	ldr	r2, [r2, #4]
 801a32e:	6443      	str	r3, [r0, #68]	; 0x44
 801a330:	60c2      	str	r2, [r0, #12]
 801a332:	2200      	movs	r2, #0
 801a334:	9b02      	ldr	r3, [sp, #8]
 801a336:	7402      	strb	r2, [r0, #16]
 801a338:	6001      	str	r1, [r0, #0]
 801a33a:	6483      	str	r3, [r0, #72]	; 0x48
 801a33c:	6042      	str	r2, [r0, #4]
 801a33e:	6142      	str	r2, [r0, #20]
 801a340:	7602      	strb	r2, [r0, #24]
 801a342:	8702      	strh	r2, [r0, #56]	; 0x38
 801a344:	8402      	strh	r2, [r0, #32]
 801a346:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801a34a:	bc30      	pop	{r4, r5}
 801a34c:	f7e9 bad4 	b.w	80038f8 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801a350 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801a350:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a352:	4605      	mov	r5, r0
 801a354:	4608      	mov	r0, r1
 801a356:	b1f1      	cbz	r1, 801a396 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801a358:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801a35c:	460b      	mov	r3, r1
 801a35e:	f101 0708 	add.w	r7, r1, #8
 801a362:	4622      	mov	r2, r4
 801a364:	6818      	ldr	r0, [r3, #0]
 801a366:	3308      	adds	r3, #8
 801a368:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a36c:	4626      	mov	r6, r4
 801a36e:	42bb      	cmp	r3, r7
 801a370:	c603      	stmia	r6!, {r0, r1}
 801a372:	4634      	mov	r4, r6
 801a374:	d1f6      	bne.n	801a364 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801a376:	6818      	ldr	r0, [r3, #0]
 801a378:	6030      	str	r0, [r6, #0]
 801a37a:	4610      	mov	r0, r2
 801a37c:	889b      	ldrh	r3, [r3, #4]
 801a37e:	80b3      	strh	r3, [r6, #4]
 801a380:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801a384:	015b      	lsls	r3, r3, #5
 801a386:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801a38a:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801a38e:	430b      	orrs	r3, r1
 801a390:	425b      	negs	r3, r3
 801a392:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801a396:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a398 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801a398:	b538      	push	{r3, r4, r5, lr}
 801a39a:	460c      	mov	r4, r1
 801a39c:	6811      	ldr	r1, [r2, #0]
 801a39e:	4610      	mov	r0, r2
 801a3a0:	68cd      	ldr	r5, [r1, #12]
 801a3a2:	4619      	mov	r1, r3
 801a3a4:	47a8      	blx	r5
 801a3a6:	2800      	cmp	r0, #0
 801a3a8:	bf08      	it	eq
 801a3aa:	4620      	moveq	r0, r4
 801a3ac:	bd38      	pop	{r3, r4, r5, pc}
	...

0801a3b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801a3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3b2:	4604      	mov	r4, r0
 801a3b4:	4615      	mov	r5, r2
 801a3b6:	4608      	mov	r0, r1
 801a3b8:	b93a      	cbnz	r2, 801a3ca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801a3ba:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801a3be:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801a3c2:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801a3c6:	4628      	mov	r0, r5
 801a3c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a3ca:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801a3ce:	8893      	ldrh	r3, [r2, #4]
 801a3d0:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801a3d4:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801a3d8:	79ee      	ldrb	r6, [r5, #7]
 801a3da:	4316      	orrs	r6, r2
 801a3dc:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 801a3e0:	189a      	adds	r2, r3, r2
 801a3e2:	b2b7      	uxth	r7, r6
 801a3e4:	b291      	uxth	r1, r2
 801a3e6:	291d      	cmp	r1, #29
 801a3e8:	f200 8084 	bhi.w	801a4f4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801a3ec:	2201      	movs	r2, #1
 801a3ee:	10f6      	asrs	r6, r6, #3
 801a3f0:	408a      	lsls	r2, r1
 801a3f2:	4978      	ldr	r1, [pc, #480]	; (801a5d4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801a3f4:	420a      	tst	r2, r1
 801a3f6:	d12e      	bne.n	801a456 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801a3f8:	f412 7f60 	tst.w	r2, #896	; 0x380
 801a3fc:	d07a      	beq.n	801a4f4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801a3fe:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801a402:	462b      	mov	r3, r5
 801a404:	f105 0e08 	add.w	lr, r5, #8
 801a408:	4615      	mov	r5, r2
 801a40a:	6818      	ldr	r0, [r3, #0]
 801a40c:	3308      	adds	r3, #8
 801a40e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a412:	4694      	mov	ip, r2
 801a414:	4573      	cmp	r3, lr
 801a416:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801a41a:	4662      	mov	r2, ip
 801a41c:	d1f5      	bne.n	801a40a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801a41e:	6818      	ldr	r0, [r3, #0]
 801a420:	f8cc 0000 	str.w	r0, [ip]
 801a424:	889b      	ldrh	r3, [r3, #4]
 801a426:	f8ac 3004 	strh.w	r3, [ip, #4]
 801a42a:	b2b3      	uxth	r3, r6
 801a42c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801a430:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801a434:	1aca      	subs	r2, r1, r3
 801a436:	1bcf      	subs	r7, r1, r7
 801a438:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801a43c:	b292      	uxth	r2, r2
 801a43e:	1afb      	subs	r3, r7, r3
 801a440:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801a444:	10d2      	asrs	r2, r2, #3
 801a446:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801a44a:	4302      	orrs	r2, r0
 801a44c:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801a450:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801a454:	e7b7      	b.n	801a3c6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801a456:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801a458:	b92b      	cbnz	r3, 801a466 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801a45a:	4b5f      	ldr	r3, [pc, #380]	; (801a5d8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801a45c:	21c0      	movs	r1, #192	; 0xc0
 801a45e:	4a5f      	ldr	r2, [pc, #380]	; (801a5dc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 801a460:	485f      	ldr	r0, [pc, #380]	; (801a5e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801a462:	f00c ffcf 	bl	8027404 <__assert_func>
 801a466:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801a468:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a46c:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801a46e:	f640 6333 	movw	r3, #3635	; 0xe33
 801a472:	4299      	cmp	r1, r3
 801a474:	d110      	bne.n	801a498 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801a476:	6803      	ldr	r3, [r0, #0]
 801a478:	68db      	ldr	r3, [r3, #12]
 801a47a:	4798      	blx	r3
 801a47c:	7b41      	ldrb	r1, [r0, #13]
 801a47e:	00cb      	lsls	r3, r1, #3
 801a480:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a484:	7a03      	ldrb	r3, [r0, #8]
 801a486:	0648      	lsls	r0, r1, #25
 801a488:	ea43 0302 	orr.w	r3, r3, r2
 801a48c:	bf44      	itt	mi
 801a48e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a492:	b21b      	sxthmi	r3, r3
 801a494:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801a498:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801a49c:	462a      	mov	r2, r5
 801a49e:	f105 0c08 	add.w	ip, r5, #8
 801a4a2:	443b      	add	r3, r7
 801a4a4:	4433      	add	r3, r6
 801a4a6:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801a4aa:	b29b      	uxth	r3, r3
 801a4ac:	4635      	mov	r5, r6
 801a4ae:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801a4b2:	6810      	ldr	r0, [r2, #0]
 801a4b4:	3208      	adds	r2, #8
 801a4b6:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801a4ba:	4637      	mov	r7, r6
 801a4bc:	4562      	cmp	r2, ip
 801a4be:	c703      	stmia	r7!, {r0, r1}
 801a4c0:	463e      	mov	r6, r7
 801a4c2:	d1f6      	bne.n	801a4b2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801a4c4:	6810      	ldr	r0, [r2, #0]
 801a4c6:	6038      	str	r0, [r7, #0]
 801a4c8:	8892      	ldrh	r2, [r2, #4]
 801a4ca:	80ba      	strh	r2, [r7, #4]
 801a4cc:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801a4d0:	10db      	asrs	r3, r3, #3
 801a4d2:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801a4d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a4da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801a4de:	4313      	orrs	r3, r2
 801a4e0:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801a4e4:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801a4e8:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801a4ec:	1a9b      	subs	r3, r3, r2
 801a4ee:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801a4f2:	e768      	b.n	801a3c6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801a4f4:	f023 0204 	bic.w	r2, r3, #4
 801a4f8:	f640 611b 	movw	r1, #3611	; 0xe1b
 801a4fc:	428a      	cmp	r2, r1
 801a4fe:	d003      	beq.n	801a508 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 801a500:	f640 621d 	movw	r2, #3613	; 0xe1d
 801a504:	4293      	cmp	r3, r2
 801a506:	d120      	bne.n	801a54a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801a508:	3b01      	subs	r3, #1
 801a50a:	4602      	mov	r2, r0
 801a50c:	4629      	mov	r1, r5
 801a50e:	4620      	mov	r0, r4
 801a510:	b29b      	uxth	r3, r3
 801a512:	f7ff ff41 	bl	801a398 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a516:	7b41      	ldrb	r1, [r0, #13]
 801a518:	00cb      	lsls	r3, r1, #3
 801a51a:	0649      	lsls	r1, r1, #25
 801a51c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a520:	7a03      	ldrb	r3, [r0, #8]
 801a522:	ea43 0302 	orr.w	r3, r3, r2
 801a526:	bf44      	itt	mi
 801a528:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a52c:	b21b      	sxthmi	r3, r3
 801a52e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801a532:	7b6b      	ldrb	r3, [r5, #13]
 801a534:	7aaa      	ldrb	r2, [r5, #10]
 801a536:	005b      	lsls	r3, r3, #1
 801a538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a53c:	4313      	orrs	r3, r2
 801a53e:	115a      	asrs	r2, r3, #5
 801a540:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801a544:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801a548:	e035      	b.n	801a5b6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801a54a:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801a54e:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801a552:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801a556:	7a2a      	ldrb	r2, [r5, #8]
 801a558:	ea42 0201 	orr.w	r2, r2, r1
 801a55c:	f640 6109 	movw	r1, #3593	; 0xe09
 801a560:	bf1c      	itt	ne
 801a562:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801a566:	b212      	sxthne	r2, r2
 801a568:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801a56c:	f023 0210 	bic.w	r2, r3, #16
 801a570:	428a      	cmp	r2, r1
 801a572:	d003      	beq.n	801a57c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 801a574:	f640 6213 	movw	r2, #3603	; 0xe13
 801a578:	4293      	cmp	r3, r2
 801a57a:	d129      	bne.n	801a5d0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801a57c:	7b6e      	ldrb	r6, [r5, #13]
 801a57e:	4629      	mov	r1, r5
 801a580:	0076      	lsls	r6, r6, #1
 801a582:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801a586:	7aae      	ldrb	r6, [r5, #10]
 801a588:	4316      	orrs	r6, r2
 801a58a:	f640 6213 	movw	r2, #3603	; 0xe13
 801a58e:	4293      	cmp	r3, r2
 801a590:	4602      	mov	r2, r0
 801a592:	4620      	mov	r0, r4
 801a594:	bf16      	itet	ne
 801a596:	f103 33ff 	addne.w	r3, r3, #4294967295
 801a59a:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801a59e:	b29b      	uxthne	r3, r3
 801a5a0:	f7ff fefa 	bl	801a398 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a5a4:	7b43      	ldrb	r3, [r0, #13]
 801a5a6:	7a82      	ldrb	r2, [r0, #10]
 801a5a8:	005b      	lsls	r3, r3, #1
 801a5aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a5ae:	4313      	orrs	r3, r2
 801a5b0:	1af6      	subs	r6, r6, r3
 801a5b2:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801a5b6:	7b69      	ldrb	r1, [r5, #13]
 801a5b8:	00cb      	lsls	r3, r1, #3
 801a5ba:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a5be:	7a2b      	ldrb	r3, [r5, #8]
 801a5c0:	4313      	orrs	r3, r2
 801a5c2:	064a      	lsls	r2, r1, #25
 801a5c4:	bf44      	itt	mi
 801a5c6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a5ca:	b21b      	sxthmi	r3, r3
 801a5cc:	1bdb      	subs	r3, r3, r7
 801a5ce:	e73f      	b.n	801a450 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801a5d0:	2300      	movs	r3, #0
 801a5d2:	e7b7      	b.n	801a544 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 801a5d4:	3fc00079 	.word	0x3fc00079
 801a5d8:	0802a5b0 	.word	0x0802a5b0
 801a5dc:	0802db0b 	.word	0x0802db0b
 801a5e0:	0802a682 	.word	0x0802a682

0801a5e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801a5e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a5e8:	4604      	mov	r4, r0
 801a5ea:	b942      	cbnz	r2, 801a5fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801a5ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a5f0:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801a5f4:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801a5f8:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801a5fc:	e046      	b.n	801a68c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801a5fe:	7b51      	ldrb	r1, [r2, #13]
 801a600:	8893      	ldrh	r3, [r2, #4]
 801a602:	010f      	lsls	r7, r1, #4
 801a604:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801a608:	79d7      	ldrb	r7, [r2, #7]
 801a60a:	4307      	orrs	r7, r0
 801a60c:	2f04      	cmp	r7, #4
 801a60e:	b2bd      	uxth	r5, r7
 801a610:	bfcc      	ite	gt
 801a612:	08bf      	lsrgt	r7, r7, #2
 801a614:	2701      	movle	r7, #1
 801a616:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801a61a:	f200 80ab 	bhi.w	801a774 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801a61e:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801a622:	4283      	cmp	r3, r0
 801a624:	d216      	bcs.n	801a654 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801a626:	f240 605b 	movw	r0, #1627	; 0x65b
 801a62a:	4283      	cmp	r3, r0
 801a62c:	d859      	bhi.n	801a6e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801a62e:	f240 6057 	movw	r0, #1623	; 0x657
 801a632:	4283      	cmp	r3, r0
 801a634:	d20e      	bcs.n	801a654 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801a636:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801a63a:	d24a      	bcs.n	801a6d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801a63c:	f240 604e 	movw	r0, #1614	; 0x64e
 801a640:	4283      	cmp	r3, r0
 801a642:	d207      	bcs.n	801a654 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801a644:	f240 601a 	movw	r0, #1562	; 0x61a
 801a648:	4283      	cmp	r3, r0
 801a64a:	d02a      	beq.n	801a6a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801a64c:	d821      	bhi.n	801a692 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801a64e:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801a652:	d35b      	bcc.n	801a70c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801a654:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801a658:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801a65c:	f040 80d0 	bne.w	801a800 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801a660:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801a664:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801a668:	f040 80ca 	bne.w	801a800 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801a66c:	00cb      	lsls	r3, r1, #3
 801a66e:	0649      	lsls	r1, r1, #25
 801a670:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801a674:	7a13      	ldrb	r3, [r2, #8]
 801a676:	ea43 0300 	orr.w	r3, r3, r0
 801a67a:	bf44      	itt	mi
 801a67c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a680:	b21b      	sxthmi	r3, r3
 801a682:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801a686:	1b5d      	subs	r5, r3, r5
 801a688:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801a68c:	4610      	mov	r0, r2
 801a68e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a692:	f240 604b 	movw	r0, #1611	; 0x64b
 801a696:	4283      	cmp	r3, r0
 801a698:	d338      	bcc.n	801a70c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801a69a:	f240 604c 	movw	r0, #1612	; 0x64c
 801a69e:	4283      	cmp	r3, r0
 801a6a0:	d9d8      	bls.n	801a654 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801a6a2:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801a6a6:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801a6aa:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801a6ae:	f040 80f2 	bne.w	801a896 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801a6b2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801a6b6:	f040 80ee 	bne.w	801a896 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801a6ba:	00cb      	lsls	r3, r1, #3
 801a6bc:	064e      	lsls	r6, r1, #25
 801a6be:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801a6c2:	7a13      	ldrb	r3, [r2, #8]
 801a6c4:	ea43 0300 	orr.w	r3, r3, r0
 801a6c8:	bf44      	itt	mi
 801a6ca:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a6ce:	b21b      	sxthmi	r3, r3
 801a6d0:	e7d9      	b.n	801a686 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801a6d2:	f240 6054 	movw	r0, #1620	; 0x654
 801a6d6:	4283      	cmp	r3, r0
 801a6d8:	d8e3      	bhi.n	801a6a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801a6da:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801a6de:	d9e0      	bls.n	801a6a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801a6e0:	e7b8      	b.n	801a654 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801a6e2:	f240 6074 	movw	r0, #1652	; 0x674
 801a6e6:	4283      	cmp	r3, r0
 801a6e8:	d0b4      	beq.n	801a654 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801a6ea:	d82d      	bhi.n	801a748 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801a6ec:	f240 605e 	movw	r0, #1630	; 0x65e
 801a6f0:	4283      	cmp	r3, r0
 801a6f2:	d804      	bhi.n	801a6fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 801a6f4:	f240 605d 	movw	r0, #1629	; 0x65d
 801a6f8:	4283      	cmp	r3, r0
 801a6fa:	d3d2      	bcc.n	801a6a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801a6fc:	e7aa      	b.n	801a654 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801a6fe:	f240 605f 	movw	r0, #1631	; 0x65f
 801a702:	4283      	cmp	r3, r0
 801a704:	d0cd      	beq.n	801a6a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801a706:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801a70a:	d0a3      	beq.n	801a654 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801a70c:	00cb      	lsls	r3, r1, #3
 801a70e:	0649      	lsls	r1, r1, #25
 801a710:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801a714:	7a13      	ldrb	r3, [r2, #8]
 801a716:	ea43 0300 	orr.w	r3, r3, r0
 801a71a:	bf44      	itt	mi
 801a71c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a720:	b21b      	sxthmi	r3, r3
 801a722:	1b5d      	subs	r5, r3, r5
 801a724:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801a728:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801a72c:	7b53      	ldrb	r3, [r2, #13]
 801a72e:	015b      	lsls	r3, r3, #5
 801a730:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801a734:	7993      	ldrb	r3, [r2, #6]
 801a736:	430b      	orrs	r3, r1
 801a738:	2105      	movs	r1, #5
 801a73a:	005b      	lsls	r3, r3, #1
 801a73c:	fb93 f3f1 	sdiv	r3, r3, r1
 801a740:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801a744:	440b      	add	r3, r1
 801a746:	e757      	b.n	801a5f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801a748:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801a74c:	4283      	cmp	r3, r0
 801a74e:	d809      	bhi.n	801a764 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 801a750:	f240 60df 	movw	r0, #1759	; 0x6df
 801a754:	4283      	cmp	r3, r0
 801a756:	f4bf af7d 	bcs.w	801a654 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801a75a:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801a75e:	2b05      	cmp	r3, #5
 801a760:	d8d4      	bhi.n	801a70c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801a762:	e777      	b.n	801a654 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801a764:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801a768:	4283      	cmp	r3, r0
 801a76a:	d09a      	beq.n	801a6a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801a76c:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801a770:	4283      	cmp	r3, r0
 801a772:	e7ca      	b.n	801a70a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801a774:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801a778:	d22b      	bcs.n	801a7d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801a77a:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801a77e:	4283      	cmp	r3, r0
 801a780:	d28f      	bcs.n	801a6a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801a782:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801a786:	4283      	cmp	r3, r0
 801a788:	d816      	bhi.n	801a7b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801a78a:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801a78e:	4283      	cmp	r3, r0
 801a790:	f4bf af60 	bcs.w	801a654 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801a794:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801a798:	4283      	cmp	r3, r0
 801a79a:	d80a      	bhi.n	801a7b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801a79c:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801a7a0:	4283      	cmp	r3, r0
 801a7a2:	f4bf af57 	bcs.w	801a654 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801a7a6:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801a7aa:	4283      	cmp	r3, r0
 801a7ac:	f43f af79 	beq.w	801a6a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801a7b0:	e7ac      	b.n	801a70c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801a7b2:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801a7b6:	e7f8      	b.n	801a7aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801a7b8:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801a7bc:	4283      	cmp	r3, r0
 801a7be:	d802      	bhi.n	801a7c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801a7c0:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801a7c4:	e798      	b.n	801a6f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801a7c6:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801a7ca:	4283      	cmp	r3, r0
 801a7cc:	f47f af42 	bne.w	801a654 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801a7d0:	e767      	b.n	801a6a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801a7d2:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801a7d6:	4283      	cmp	r3, r0
 801a7d8:	f43f af63 	beq.w	801a6a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801a7dc:	d802      	bhi.n	801a7e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801a7de:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801a7e2:	e7f2      	b.n	801a7ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801a7e4:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801a7e8:	4283      	cmp	r3, r0
 801a7ea:	d805      	bhi.n	801a7f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801a7ec:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801a7f0:	4283      	cmp	r3, r0
 801a7f2:	f4ff af2f 	bcc.w	801a654 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801a7f6:	e754      	b.n	801a6a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801a7f8:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801a7fc:	4283      	cmp	r3, r0
 801a7fe:	e7af      	b.n	801a760 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801a800:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801a804:	4617      	mov	r7, r2
 801a806:	f102 0808 	add.w	r8, r2, #8
 801a80a:	4666      	mov	r6, ip
 801a80c:	6838      	ldr	r0, [r7, #0]
 801a80e:	3708      	adds	r7, #8
 801a810:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801a814:	46e6      	mov	lr, ip
 801a816:	4547      	cmp	r7, r8
 801a818:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801a81c:	46f4      	mov	ip, lr
 801a81e:	d1f5      	bne.n	801a80c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801a820:	6838      	ldr	r0, [r7, #0]
 801a822:	f8ce 0000 	str.w	r0, [lr]
 801a826:	88b9      	ldrh	r1, [r7, #4]
 801a828:	f8ae 1004 	strh.w	r1, [lr, #4]
 801a82c:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801a830:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801a834:	d009      	beq.n	801a84a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801a836:	7b51      	ldrb	r1, [r2, #13]
 801a838:	7992      	ldrb	r2, [r2, #6]
 801a83a:	0149      	lsls	r1, r1, #5
 801a83c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801a840:	4311      	orrs	r1, r2
 801a842:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801a846:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801a84a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801a84e:	d00d      	beq.n	801a86c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 801a850:	442b      	add	r3, r5
 801a852:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801a856:	b29b      	uxth	r3, r3
 801a858:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801a85c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801a860:	10db      	asrs	r3, r3, #3
 801a862:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a866:	4313      	orrs	r3, r2
 801a868:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801a86c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801a870:	00cb      	lsls	r3, r1, #3
 801a872:	064f      	lsls	r7, r1, #25
 801a874:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a878:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801a87c:	ea43 0302 	orr.w	r3, r3, r2
 801a880:	bf44      	itt	mi
 801a882:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a886:	b21b      	sxthmi	r3, r3
 801a888:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801a88c:	1b5d      	subs	r5, r3, r5
 801a88e:	4632      	mov	r2, r6
 801a890:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801a894:	e6fa      	b.n	801a68c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801a896:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 801a89a:	4694      	mov	ip, r2
 801a89c:	f102 0908 	add.w	r9, r2, #8
 801a8a0:	4676      	mov	r6, lr
 801a8a2:	f8dc 0000 	ldr.w	r0, [ip]
 801a8a6:	f10c 0c08 	add.w	ip, ip, #8
 801a8aa:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 801a8ae:	46f0      	mov	r8, lr
 801a8b0:	45cc      	cmp	ip, r9
 801a8b2:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801a8b6:	46c6      	mov	lr, r8
 801a8b8:	d1f3      	bne.n	801a8a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801a8ba:	f8dc 0000 	ldr.w	r0, [ip]
 801a8be:	f8c8 0000 	str.w	r0, [r8]
 801a8c2:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801a8c6:	f8a8 1004 	strh.w	r1, [r8, #4]
 801a8ca:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801a8ce:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801a8d2:	d009      	beq.n	801a8e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 801a8d4:	7b51      	ldrb	r1, [r2, #13]
 801a8d6:	7992      	ldrb	r2, [r2, #6]
 801a8d8:	0149      	lsls	r1, r1, #5
 801a8da:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801a8de:	4311      	orrs	r1, r2
 801a8e0:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801a8e4:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801a8e8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801a8ec:	d00d      	beq.n	801a90a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 801a8ee:	1bdb      	subs	r3, r3, r7
 801a8f0:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801a8f4:	b29b      	uxth	r3, r3
 801a8f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801a8fa:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801a8fe:	10db      	asrs	r3, r3, #3
 801a900:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a904:	4313      	orrs	r3, r2
 801a906:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801a90a:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801a90e:	00cb      	lsls	r3, r1, #3
 801a910:	0648      	lsls	r0, r1, #25
 801a912:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a916:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801a91a:	ea43 0302 	orr.w	r3, r3, r2
 801a91e:	bf44      	itt	mi
 801a920:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a924:	b21b      	sxthmi	r3, r3
 801a926:	e7b1      	b.n	801a88c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

0801a928 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801a928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a92c:	461e      	mov	r6, r3
 801a92e:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 801a930:	4604      	mov	r4, r0
 801a932:	4617      	mov	r7, r2
 801a934:	b92b      	cbnz	r3, 801a942 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801a936:	4b25      	ldr	r3, [pc, #148]	; (801a9cc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801a938:	21c0      	movs	r1, #192	; 0xc0
 801a93a:	4a25      	ldr	r2, [pc, #148]	; (801a9d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 801a93c:	4825      	ldr	r0, [pc, #148]	; (801a9d4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 801a93e:	f00c fd61 	bl	8027404 <__assert_func>
 801a942:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801a944:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801a948:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801a94c:	f7e8 ff92 	bl	8003874 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a950:	4605      	mov	r5, r0
 801a952:	b918      	cbnz	r0, 801a95c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 801a954:	6030      	str	r0, [r6, #0]
 801a956:	4628      	mov	r0, r5
 801a958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a95c:	683b      	ldr	r3, [r7, #0]
 801a95e:	4601      	mov	r1, r0
 801a960:	4638      	mov	r0, r7
 801a962:	68db      	ldr	r3, [r3, #12]
 801a964:	4798      	blx	r3
 801a966:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801a96a:	4602      	mov	r2, r0
 801a96c:	6030      	str	r0, [r6, #0]
 801a96e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801a972:	d213      	bcs.n	801a99c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 801a974:	4643      	mov	r3, r8
 801a976:	4639      	mov	r1, r7
 801a978:	4620      	mov	r0, r4
 801a97a:	f7ff fe33 	bl	801a5e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801a97e:	6030      	str	r0, [r6, #0]
 801a980:	6833      	ldr	r3, [r6, #0]
 801a982:	b143      	cbz	r3, 801a996 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801a984:	7b5a      	ldrb	r2, [r3, #13]
 801a986:	7a9b      	ldrb	r3, [r3, #10]
 801a988:	0052      	lsls	r2, r2, #1
 801a98a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801a98e:	4313      	orrs	r3, r2
 801a990:	bf0c      	ite	eq
 801a992:	2301      	moveq	r3, #1
 801a994:	2300      	movne	r3, #0
 801a996:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801a99a:	e7dc      	b.n	801a956 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 801a99c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801a9a0:	b29b      	uxth	r3, r3
 801a9a2:	2b7f      	cmp	r3, #127	; 0x7f
 801a9a4:	d804      	bhi.n	801a9b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 801a9a6:	4639      	mov	r1, r7
 801a9a8:	4620      	mov	r0, r4
 801a9aa:	f7ff fd01 	bl	801a3b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801a9ae:	e7e6      	b.n	801a97e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801a9b0:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801a9b4:	2b00      	cmp	r3, #0
 801a9b6:	d0e3      	beq.n	801a980 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801a9b8:	f640 1302 	movw	r3, #2306	; 0x902
 801a9bc:	429d      	cmp	r5, r3
 801a9be:	d1df      	bne.n	801a980 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801a9c0:	4601      	mov	r1, r0
 801a9c2:	4620      	mov	r0, r4
 801a9c4:	f7ff fcc4 	bl	801a350 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801a9c8:	e7d9      	b.n	801a97e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801a9ca:	bf00      	nop
 801a9cc:	0802a5b0 	.word	0x0802a5b0
 801a9d0:	0802db0b 	.word	0x0802db0b
 801a9d4:	0802a682 	.word	0x0802a682

0801a9d8 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801a9d8:	b510      	push	{r4, lr}
 801a9da:	4604      	mov	r4, r0
 801a9dc:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801a9e0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801a9e2:	b9d9      	cbnz	r1, 801aa1c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x44>
 801a9e4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801a9e6:	2b0a      	cmp	r3, #10
 801a9e8:	d037      	beq.n	801aa5a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801a9ea:	4620      	mov	r0, r4
 801a9ec:	f7ff fc6f 	bl	801a2ce <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801a9f0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801a9f2:	2b09      	cmp	r3, #9
 801a9f4:	d906      	bls.n	801aa04 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801a9f6:	4b19      	ldr	r3, [pc, #100]	; (801aa5c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801a9f8:	f44f 7182 	mov.w	r1, #260	; 0x104
 801a9fc:	4a18      	ldr	r2, [pc, #96]	; (801aa60 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801a9fe:	4819      	ldr	r0, [pc, #100]	; (801aa64 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8c>)
 801aa00:	f00c fd00 	bl	8027404 <__assert_func>
 801aa04:	1c5a      	adds	r2, r3, #1
 801aa06:	8722      	strh	r2, [r4, #56]	; 0x38
 801aa08:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801aa0a:	4413      	add	r3, r2
 801aa0c:	b29b      	uxth	r3, r3
 801aa0e:	2b09      	cmp	r3, #9
 801aa10:	bf88      	it	hi
 801aa12:	3b0a      	subhi	r3, #10
 801aa14:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801aa18:	8458      	strh	r0, [r3, #34]	; 0x22
 801aa1a:	e7e3      	b.n	801a9e4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xc>
 801aa1c:	2b0a      	cmp	r3, #10
 801aa1e:	d01c      	beq.n	801aa5a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801aa20:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801aa22:	3901      	subs	r1, #1
 801aa24:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801aa28:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801aa2a:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801aa2e:	1c51      	adds	r1, r2, #1
 801aa30:	b289      	uxth	r1, r1
 801aa32:	2901      	cmp	r1, #1
 801aa34:	bf8a      	itet	hi
 801aa36:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801aa3a:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801aa3c:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801aa3e:	2b09      	cmp	r3, #9
 801aa40:	d8d9      	bhi.n	801a9f6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1e>
 801aa42:	1c5a      	adds	r2, r3, #1
 801aa44:	8722      	strh	r2, [r4, #56]	; 0x38
 801aa46:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801aa48:	4413      	add	r3, r2
 801aa4a:	b29b      	uxth	r3, r3
 801aa4c:	2b09      	cmp	r3, #9
 801aa4e:	bf88      	it	hi
 801aa50:	3b0a      	subhi	r3, #10
 801aa52:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801aa56:	8458      	strh	r0, [r3, #34]	; 0x22
 801aa58:	e7c0      	b.n	801a9dc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801aa5a:	bd10      	pop	{r4, pc}
 801aa5c:	0802d8dc 	.word	0x0802d8dc
 801aa60:	0802dc61 	.word	0x0802dc61
 801aa64:	0802a682 	.word	0x0802a682

0801aa68 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801aa68:	b538      	push	{r3, r4, r5, lr}
 801aa6a:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801aa6c:	4604      	mov	r4, r0
 801aa6e:	b92a      	cbnz	r2, 801aa7c <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801aa70:	4b13      	ldr	r3, [pc, #76]	; (801aac0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801aa72:	21d5      	movs	r1, #213	; 0xd5
 801aa74:	4a13      	ldr	r2, [pc, #76]	; (801aac4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801aa76:	4814      	ldr	r0, [pc, #80]	; (801aac8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801aa78:	f00c fcc4 	bl	8027404 <__assert_func>
 801aa7c:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801aa7e:	3a01      	subs	r2, #1
 801aa80:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801aa84:	8c4d      	ldrh	r5, [r1, #34]	; 0x22
 801aa86:	8702      	strh	r2, [r0, #56]	; 0x38
 801aa88:	1c5a      	adds	r2, r3, #1
 801aa8a:	b292      	uxth	r2, r2
 801aa8c:	2a09      	cmp	r2, #9
 801aa8e:	bf8a      	itet	hi
 801aa90:	3b09      	subhi	r3, #9
 801aa92:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801aa94:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801aa96:	f7ff ff9f 	bl	801a9d8 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801aa9a:	8c23      	ldrh	r3, [r4, #32]
 801aa9c:	2b01      	cmp	r3, #1
 801aa9e:	bf9c      	itt	ls
 801aaa0:	3301      	addls	r3, #1
 801aaa2:	8423      	strhls	r3, [r4, #32]
 801aaa4:	8be3      	ldrh	r3, [r4, #30]
 801aaa6:	b90b      	cbnz	r3, 801aaac <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801aaa8:	2302      	movs	r3, #2
 801aaaa:	83e3      	strh	r3, [r4, #30]
 801aaac:	8be3      	ldrh	r3, [r4, #30]
 801aaae:	4628      	mov	r0, r5
 801aab0:	3b01      	subs	r3, #1
 801aab2:	b29b      	uxth	r3, r3
 801aab4:	83e3      	strh	r3, [r4, #30]
 801aab6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801aaba:	8365      	strh	r5, [r4, #26]
 801aabc:	bd38      	pop	{r3, r4, r5, pc}
 801aabe:	bf00      	nop
 801aac0:	0802a5b0 	.word	0x0802a5b0
 801aac4:	0802dbb6 	.word	0x0802dbb6
 801aac8:	0802a682 	.word	0x0802a682

0801aacc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801aacc:	428a      	cmp	r2, r1
 801aace:	b538      	push	{r3, r4, r5, lr}
 801aad0:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801aad2:	d90c      	bls.n	801aaee <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801aad4:	b92c      	cbnz	r4, 801aae2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801aad6:	4b1c      	ldr	r3, [pc, #112]	; (801ab48 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801aad8:	21e1      	movs	r1, #225	; 0xe1
 801aada:	4a1c      	ldr	r2, [pc, #112]	; (801ab4c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801aadc:	481c      	ldr	r0, [pc, #112]	; (801ab50 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801aade:	f00c fc91 	bl	8027404 <__assert_func>
 801aae2:	3c01      	subs	r4, #1
 801aae4:	4b1b      	ldr	r3, [pc, #108]	; (801ab54 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801aae6:	4a1c      	ldr	r2, [pc, #112]	; (801ab58 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801aae8:	21c5      	movs	r1, #197	; 0xc5
 801aaea:	8704      	strh	r4, [r0, #56]	; 0x38
 801aaec:	e7f6      	b.n	801aadc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801aaee:	428c      	cmp	r4, r1
 801aaf0:	d203      	bcs.n	801aafa <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801aaf2:	4b1a      	ldr	r3, [pc, #104]	; (801ab5c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801aaf4:	21cb      	movs	r1, #203	; 0xcb
 801aaf6:	4a1a      	ldr	r2, [pc, #104]	; (801ab60 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801aaf8:	e7f0      	b.n	801aadc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801aafa:	1a64      	subs	r4, r4, r1
 801aafc:	250a      	movs	r5, #10
 801aafe:	8704      	strh	r4, [r0, #56]	; 0x38
 801ab00:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 801ab02:	4421      	add	r1, r4
 801ab04:	b289      	uxth	r1, r1
 801ab06:	2909      	cmp	r1, #9
 801ab08:	bf88      	it	hi
 801ab0a:	390a      	subhi	r1, #10
 801ab0c:	86c1      	strh	r1, [r0, #54]	; 0x36
 801ab0e:	b1ba      	cbz	r2, 801ab40 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801ab10:	3a01      	subs	r2, #1
 801ab12:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801ab14:	b292      	uxth	r2, r2
 801ab16:	2909      	cmp	r1, #9
 801ab18:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801ab1c:	d903      	bls.n	801ab26 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801ab1e:	4b11      	ldr	r3, [pc, #68]	; (801ab64 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801ab20:	21e6      	movs	r1, #230	; 0xe6
 801ab22:	4a11      	ldr	r2, [pc, #68]	; (801ab68 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801ab24:	e7da      	b.n	801aadc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801ab26:	3101      	adds	r1, #1
 801ab28:	8701      	strh	r1, [r0, #56]	; 0x38
 801ab2a:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801ab2c:	b901      	cbnz	r1, 801ab30 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801ab2e:	86c5      	strh	r5, [r0, #54]	; 0x36
 801ab30:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801ab32:	3901      	subs	r1, #1
 801ab34:	b289      	uxth	r1, r1
 801ab36:	86c1      	strh	r1, [r0, #54]	; 0x36
 801ab38:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801ab3c:	844c      	strh	r4, [r1, #34]	; 0x22
 801ab3e:	e7e6      	b.n	801ab0e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801ab40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ab44:	f7ff bf48 	b.w	801a9d8 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801ab48:	0802a5b0 	.word	0x0802a5b0
 801ab4c:	0802d98f 	.word	0x0802d98f
 801ab50:	0802a682 	.word	0x0802a682
 801ab54:	0802a6ae 	.word	0x0802a6ae
 801ab58:	0802da39 	.word	0x0802da39
 801ab5c:	0802d8e8 	.word	0x0802d8e8
 801ab60:	0802dd10 	.word	0x0802dd10
 801ab64:	0802d8f4 	.word	0x0802d8f4
 801ab68:	0802d907 	.word	0x0802d907

0801ab6c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801ab6c:	3a01      	subs	r2, #1
 801ab6e:	b570      	push	{r4, r5, r6, lr}
 801ab70:	b292      	uxth	r2, r2
 801ab72:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801ab76:	42b2      	cmp	r2, r6
 801ab78:	d019      	beq.n	801abae <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801ab7a:	8c04      	ldrh	r4, [r0, #32]
 801ab7c:	f831 5b02 	ldrh.w	r5, [r1], #2
 801ab80:	4294      	cmp	r4, r2
 801ab82:	d805      	bhi.n	801ab90 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801ab84:	4b19      	ldr	r3, [pc, #100]	; (801abec <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801ab86:	4a1a      	ldr	r2, [pc, #104]	; (801abf0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801ab88:	21c5      	movs	r1, #197	; 0xc5
 801ab8a:	481a      	ldr	r0, [pc, #104]	; (801abf4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801ab8c:	f00c fc3a 	bl	8027404 <__assert_func>
 801ab90:	8bc4      	ldrh	r4, [r0, #30]
 801ab92:	4414      	add	r4, r2
 801ab94:	3a01      	subs	r2, #1
 801ab96:	b2a4      	uxth	r4, r4
 801ab98:	b292      	uxth	r2, r2
 801ab9a:	2c01      	cmp	r4, #1
 801ab9c:	bf88      	it	hi
 801ab9e:	3c02      	subhi	r4, #2
 801aba0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801aba4:	8b64      	ldrh	r4, [r4, #26]
 801aba6:	42ac      	cmp	r4, r5
 801aba8:	d0e5      	beq.n	801ab76 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801abaa:	2000      	movs	r0, #0
 801abac:	bd70      	pop	{r4, r5, r6, pc}
 801abae:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801abb2:	2400      	movs	r4, #0
 801abb4:	4413      	add	r3, r2
 801abb6:	b2a2      	uxth	r2, r4
 801abb8:	429a      	cmp	r2, r3
 801abba:	da14      	bge.n	801abe6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801abbc:	8f06      	ldrh	r6, [r0, #56]	; 0x38
 801abbe:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801abc2:	4296      	cmp	r6, r2
 801abc4:	d802      	bhi.n	801abcc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801abc6:	4b09      	ldr	r3, [pc, #36]	; (801abec <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801abc8:	4a0b      	ldr	r2, [pc, #44]	; (801abf8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801abca:	e7dd      	b.n	801ab88 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801abcc:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801abce:	3401      	adds	r4, #1
 801abd0:	4432      	add	r2, r6
 801abd2:	b292      	uxth	r2, r2
 801abd4:	2a09      	cmp	r2, #9
 801abd6:	bf88      	it	hi
 801abd8:	3a0a      	subhi	r2, #10
 801abda:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801abde:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801abe0:	42aa      	cmp	r2, r5
 801abe2:	d0e8      	beq.n	801abb6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801abe4:	e7e1      	b.n	801abaa <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801abe6:	2001      	movs	r0, #1
 801abe8:	e7e0      	b.n	801abac <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801abea:	bf00      	nop
 801abec:	0802a6ae 	.word	0x0802a6ae
 801abf0:	0802dd94 	.word	0x0802dd94
 801abf4:	0802a682 	.word	0x0802a682
 801abf8:	0802da39 	.word	0x0802da39

0801abfc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801abfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac00:	4605      	mov	r5, r0
 801ac02:	4616      	mov	r6, r2
 801ac04:	1c8c      	adds	r4, r1, #2
 801ac06:	8809      	ldrh	r1, [r1, #0]
 801ac08:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801ac0c:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801ac10:	42b3      	cmp	r3, r6
 801ac12:	d124      	bne.n	801ac5e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801ac14:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801ac18:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801ac1c:	f001 070f 	and.w	r7, r1, #15
 801ac20:	4652      	mov	r2, sl
 801ac22:	f8cd 8000 	str.w	r8, [sp]
 801ac26:	464b      	mov	r3, r9
 801ac28:	4621      	mov	r1, r4
 801ac2a:	4628      	mov	r0, r5
 801ac2c:	f7ff ff9e 	bl	801ab6c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801ac30:	4683      	mov	fp, r0
 801ac32:	b168      	cbz	r0, 801ac50 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801ac34:	eb0a 0109 	add.w	r1, sl, r9
 801ac38:	463a      	mov	r2, r7
 801ac3a:	4628      	mov	r0, r5
 801ac3c:	4441      	add	r1, r8
 801ac3e:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801ac42:	4649      	mov	r1, r9
 801ac44:	f7ff ff42 	bl	801aacc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801ac48:	4658      	mov	r0, fp
 801ac4a:	b003      	add	sp, #12
 801ac4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac50:	eb07 010a 	add.w	r1, r7, sl
 801ac54:	4449      	add	r1, r9
 801ac56:	4441      	add	r1, r8
 801ac58:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801ac5c:	e7d2      	b.n	801ac04 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801ac5e:	f04f 0b00 	mov.w	fp, #0
 801ac62:	e7f1      	b.n	801ac48 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801ac64 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801ac64:	b570      	push	{r4, r5, r6, lr}
 801ac66:	8810      	ldrh	r0, [r2, #0]
 801ac68:	4298      	cmp	r0, r3
 801ac6a:	d817      	bhi.n	801ac9c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ac6c:	1e48      	subs	r0, r1, #1
 801ac6e:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801ac72:	4298      	cmp	r0, r3
 801ac74:	d312      	bcc.n	801ac9c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ac76:	2400      	movs	r4, #0
 801ac78:	428c      	cmp	r4, r1
 801ac7a:	d20f      	bcs.n	801ac9c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ac7c:	1860      	adds	r0, r4, r1
 801ac7e:	1040      	asrs	r0, r0, #1
 801ac80:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801ac84:	0085      	lsls	r5, r0, #2
 801ac86:	42b3      	cmp	r3, r6
 801ac88:	d902      	bls.n	801ac90 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801ac8a:	3001      	adds	r0, #1
 801ac8c:	b284      	uxth	r4, r0
 801ac8e:	e7f3      	b.n	801ac78 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801ac90:	d201      	bcs.n	801ac96 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801ac92:	b281      	uxth	r1, r0
 801ac94:	e7f0      	b.n	801ac78 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801ac96:	442a      	add	r2, r5
 801ac98:	8850      	ldrh	r0, [r2, #2]
 801ac9a:	bd70      	pop	{r4, r5, r6, pc}
 801ac9c:	2000      	movs	r0, #0
 801ac9e:	e7fc      	b.n	801ac9a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801aca0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801aca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aca4:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801aca6:	4604      	mov	r4, r0
 801aca8:	260b      	movs	r6, #11
 801acaa:	886f      	ldrh	r7, [r5, #2]
 801acac:	087f      	lsrs	r7, r7, #1
 801acae:	3e01      	subs	r6, #1
 801acb0:	d01b      	beq.n	801acea <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801acb2:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801acb4:	b92b      	cbnz	r3, 801acc2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801acb6:	4b0e      	ldr	r3, [pc, #56]	; (801acf0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801acb8:	21c0      	movs	r1, #192	; 0xc0
 801acba:	4a0e      	ldr	r2, [pc, #56]	; (801acf4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801acbc:	480e      	ldr	r0, [pc, #56]	; (801acf8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801acbe:	f00c fba1 	bl	8027404 <__assert_func>
 801acc2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801acc4:	462a      	mov	r2, r5
 801acc6:	4639      	mov	r1, r7
 801acc8:	4620      	mov	r0, r4
 801acca:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801acce:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801acd2:	4643      	mov	r3, r8
 801acd4:	f7ff ffc6 	bl	801ac64 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801acd8:	b138      	cbz	r0, 801acea <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801acda:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801acde:	4642      	mov	r2, r8
 801ace0:	4620      	mov	r0, r4
 801ace2:	f7ff ff8b 	bl	801abfc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801ace6:	2800      	cmp	r0, #0
 801ace8:	d1e1      	bne.n	801acae <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801acea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801acee:	bf00      	nop
 801acf0:	0802a5b0 	.word	0x0802a5b0
 801acf4:	0802db0b 	.word	0x0802db0b
 801acf8:	0802a682 	.word	0x0802a682

0801acfc <_ZN8touchgfx8ceil28_4El>:
 801acfc:	f110 030f 	adds.w	r3, r0, #15
 801ad00:	d401      	bmi.n	801ad06 <_ZN8touchgfx8ceil28_4El+0xa>
 801ad02:	1118      	asrs	r0, r3, #4
 801ad04:	4770      	bx	lr
 801ad06:	2210      	movs	r2, #16
 801ad08:	f1c0 0001 	rsb	r0, r0, #1
 801ad0c:	fb93 f3f2 	sdiv	r3, r3, r2
 801ad10:	f010 000f 	ands.w	r0, r0, #15
 801ad14:	bf18      	it	ne
 801ad16:	2001      	movne	r0, #1
 801ad18:	1a18      	subs	r0, r3, r0
 801ad1a:	4770      	bx	lr

0801ad1c <_ZN8touchgfx11floorDivModEllRlS0_>:
 801ad1c:	2900      	cmp	r1, #0
 801ad1e:	b538      	push	{r3, r4, r5, lr}
 801ad20:	dc05      	bgt.n	801ad2e <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 801ad22:	4b0f      	ldr	r3, [pc, #60]	; (801ad60 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 801ad24:	21f7      	movs	r1, #247	; 0xf7
 801ad26:	4a0f      	ldr	r2, [pc, #60]	; (801ad64 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 801ad28:	480f      	ldr	r0, [pc, #60]	; (801ad68 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 801ad2a:	f00c fb6b 	bl	8027404 <__assert_func>
 801ad2e:	2800      	cmp	r0, #0
 801ad30:	db06      	blt.n	801ad40 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 801ad32:	fb90 f4f1 	sdiv	r4, r0, r1
 801ad36:	fb01 0114 	mls	r1, r1, r4, r0
 801ad3a:	6014      	str	r4, [r2, #0]
 801ad3c:	6019      	str	r1, [r3, #0]
 801ad3e:	bd38      	pop	{r3, r4, r5, pc}
 801ad40:	4240      	negs	r0, r0
 801ad42:	fb90 f4f1 	sdiv	r4, r0, r1
 801ad46:	4265      	negs	r5, r4
 801ad48:	fb01 0014 	mls	r0, r1, r4, r0
 801ad4c:	6015      	str	r5, [r2, #0]
 801ad4e:	6018      	str	r0, [r3, #0]
 801ad50:	2800      	cmp	r0, #0
 801ad52:	d0f4      	beq.n	801ad3e <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 801ad54:	6810      	ldr	r0, [r2, #0]
 801ad56:	3801      	subs	r0, #1
 801ad58:	6010      	str	r0, [r2, #0]
 801ad5a:	6818      	ldr	r0, [r3, #0]
 801ad5c:	1a09      	subs	r1, r1, r0
 801ad5e:	e7ed      	b.n	801ad3c <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 801ad60:	0802de65 	.word	0x0802de65
 801ad64:	0802dea4 	.word	0x0802dea4
 801ad68:	0802de75 	.word	0x0802de75

0801ad6c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801ad6c:	b570      	push	{r4, r5, r6, lr}
 801ad6e:	694a      	ldr	r2, [r1, #20]
 801ad70:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801ad72:	684b      	ldr	r3, [r1, #4]
 801ad74:	1b54      	subs	r4, r2, r5
 801ad76:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801ad78:	f000 8106 	beq.w	801af88 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801ad7c:	1b9b      	subs	r3, r3, r6
 801ad7e:	d003      	beq.n	801ad88 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801ad80:	4363      	muls	r3, r4
 801ad82:	2210      	movs	r2, #16
 801ad84:	fb93 f3f2 	sdiv	r3, r3, r2
 801ad88:	680c      	ldr	r4, [r1, #0]
 801ad8a:	698a      	ldr	r2, [r1, #24]
 801ad8c:	1b65      	subs	r5, r4, r5
 801ad8e:	f000 80fd 	beq.w	801af8c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801ad92:	1b92      	subs	r2, r2, r6
 801ad94:	d003      	beq.n	801ad9e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801ad96:	436a      	muls	r2, r5
 801ad98:	2410      	movs	r4, #16
 801ad9a:	fb92 f2f4 	sdiv	r2, r2, r4
 801ad9e:	1a9b      	subs	r3, r3, r2
 801ada0:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801afc8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801ada4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ada8:	460a      	mov	r2, r1
 801adaa:	ee07 3a90 	vmov	s15, r3
 801adae:	f100 040c 	add.w	r4, r0, #12
 801adb2:	4603      	mov	r3, r0
 801adb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801adb8:	ee67 7a84 	vmul.f32	s15, s15, s8
 801adbc:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801adc0:	eeb1 6a43 	vneg.f32	s12, s6
 801adc4:	edd2 7a02 	vldr	s15, [r2, #8]
 801adc8:	3214      	adds	r2, #20
 801adca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801adce:	ece3 6a01 	vstmia	r3!, {s13}
 801add2:	429c      	cmp	r4, r3
 801add4:	ed52 7a02 	vldr	s15, [r2, #-8]
 801add8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801addc:	edc3 7a02 	vstr	s15, [r3, #8]
 801ade0:	ed52 7a01 	vldr	s15, [r2, #-4]
 801ade4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ade8:	edc3 7a05 	vstr	s15, [r3, #20]
 801adec:	d1ea      	bne.n	801adc4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801adee:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801adf0:	698b      	ldr	r3, [r1, #24]
 801adf2:	edd0 4a02 	vldr	s9, [r0, #8]
 801adf6:	1a9b      	subs	r3, r3, r2
 801adf8:	edd0 3a00 	vldr	s7, [r0]
 801adfc:	edd0 6a01 	vldr	s13, [r0, #4]
 801ae00:	ee07 3a90 	vmov	s15, r3
 801ae04:	684b      	ldr	r3, [r1, #4]
 801ae06:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801ae0a:	ed90 5a05 	vldr	s10, [r0, #20]
 801ae0e:	1a9b      	subs	r3, r3, r2
 801ae10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ae14:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801ae18:	ed90 2a03 	vldr	s4, [r0, #12]
 801ae1c:	ee07 3a10 	vmov	s14, r3
 801ae20:	edd0 5a04 	vldr	s11, [r0, #16]
 801ae24:	ee67 7a84 	vmul.f32	s15, s15, s8
 801ae28:	ed90 1a07 	vldr	s2, [r0, #28]
 801ae2c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ae30:	edd0 2a06 	vldr	s5, [r0, #24]
 801ae34:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801ae38:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801ae3c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ae40:	ee32 5a45 	vsub.f32	s10, s4, s10
 801ae44:	eee6 7a87 	vfma.f32	s15, s13, s14
 801ae48:	ee67 7a83 	vmul.f32	s15, s15, s6
 801ae4c:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801ae50:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801ae52:	694a      	ldr	r2, [r1, #20]
 801ae54:	1b13      	subs	r3, r2, r4
 801ae56:	ee07 3a10 	vmov	s14, r3
 801ae5a:	680b      	ldr	r3, [r1, #0]
 801ae5c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ae60:	1b1b      	subs	r3, r3, r4
 801ae62:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ae66:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801ae6a:	ee07 3a10 	vmov	s14, r3
 801ae6e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ae72:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ae76:	eee6 4a87 	vfma.f32	s9, s13, s14
 801ae7a:	ee64 4a86 	vmul.f32	s9, s9, s12
 801ae7e:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801ae82:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801ae84:	698b      	ldr	r3, [r1, #24]
 801ae86:	1a9b      	subs	r3, r3, r2
 801ae88:	ee06 3a90 	vmov	s13, r3
 801ae8c:	684b      	ldr	r3, [r1, #4]
 801ae8e:	1a9b      	subs	r3, r3, r2
 801ae90:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801ae94:	ee07 3a10 	vmov	s14, r3
 801ae98:	ee66 6a84 	vmul.f32	s13, s13, s8
 801ae9c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801aea0:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801aea4:	ee27 7a04 	vmul.f32	s14, s14, s8
 801aea8:	eee5 6a87 	vfma.f32	s13, s11, s14
 801aeac:	ee66 6a83 	vmul.f32	s13, s13, s6
 801aeb0:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801aeb4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801aeb6:	694a      	ldr	r2, [r1, #20]
 801aeb8:	1b13      	subs	r3, r2, r4
 801aeba:	ee07 3a10 	vmov	s14, r3
 801aebe:	680b      	ldr	r3, [r1, #0]
 801aec0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801aec4:	1b1b      	subs	r3, r3, r4
 801aec6:	ee27 7a04 	vmul.f32	s14, s14, s8
 801aeca:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801aece:	ee07 3a10 	vmov	s14, r3
 801aed2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801aed6:	ee27 7a04 	vmul.f32	s14, s14, s8
 801aeda:	eea5 5a87 	vfma.f32	s10, s11, s14
 801aede:	edd0 5a08 	vldr	s11, [r0, #32]
 801aee2:	ee31 1a65 	vsub.f32	s2, s2, s11
 801aee6:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801aeea:	ee25 5a06 	vmul.f32	s10, s10, s12
 801aeee:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801aef2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801aef4:	698b      	ldr	r3, [r1, #24]
 801aef6:	1a9b      	subs	r3, r3, r2
 801aef8:	ee07 3a10 	vmov	s14, r3
 801aefc:	684b      	ldr	r3, [r1, #4]
 801aefe:	1a9b      	subs	r3, r3, r2
 801af00:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801af04:	ee01 3a90 	vmov	s3, r3
 801af08:	ee27 7a04 	vmul.f32	s14, s14, s8
 801af0c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801af10:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801af14:	ee61 1a84 	vmul.f32	s3, s3, s8
 801af18:	eea1 7a21 	vfma.f32	s14, s2, s3
 801af1c:	ee27 7a03 	vmul.f32	s14, s14, s6
 801af20:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801af24:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801af26:	694a      	ldr	r2, [r1, #20]
 801af28:	1b13      	subs	r3, r2, r4
 801af2a:	ee03 3a10 	vmov	s6, r3
 801af2e:	680b      	ldr	r3, [r1, #0]
 801af30:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801af34:	1b1b      	subs	r3, r3, r4
 801af36:	ee23 3a04 	vmul.f32	s6, s6, s8
 801af3a:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801af3e:	ee03 3a10 	vmov	s6, r3
 801af42:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801af46:	ee23 4a04 	vmul.f32	s8, s6, s8
 801af4a:	eee1 5a04 	vfma.f32	s11, s2, s8
 801af4e:	ee25 6a86 	vmul.f32	s12, s11, s12
 801af52:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801af56:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801af5a:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801af5e:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801af62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af66:	dd13      	ble.n	801af90 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801af68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801af6c:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801af70:	63c3      	str	r3, [r0, #60]	; 0x3c
 801af72:	eee3 7a87 	vfma.f32	s15, s7, s14
 801af76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801af7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af7e:	dd15      	ble.n	801afac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801af80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801af84:	6403      	str	r3, [r0, #64]	; 0x40
 801af86:	bd70      	pop	{r4, r5, r6, pc}
 801af88:	4623      	mov	r3, r4
 801af8a:	e6fd      	b.n	801ad88 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801af8c:	462a      	mov	r2, r5
 801af8e:	e706      	b.n	801ad9e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801af90:	d502      	bpl.n	801af98 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801af92:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801af96:	e7e9      	b.n	801af6c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801af98:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801af9c:	eea3 2a85 	vfma.f32	s4, s7, s10
 801afa0:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801afa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afa8:	dade      	bge.n	801af68 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801afaa:	e7f2      	b.n	801af92 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801afac:	d502      	bpl.n	801afb4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801afae:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801afb2:	e7e7      	b.n	801af84 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801afb4:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801afb8:	eee3 4a86 	vfma.f32	s9, s7, s12
 801afbc:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801afc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afc4:	dadc      	bge.n	801af80 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801afc6:	e7f2      	b.n	801afae <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801afc8:	3d800000 	.word	0x3d800000

0801afcc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801afcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afd0:	f04f 0814 	mov.w	r8, #20
 801afd4:	4604      	mov	r4, r0
 801afd6:	4617      	mov	r7, r2
 801afd8:	460d      	mov	r5, r1
 801afda:	fb08 f903 	mul.w	r9, r8, r3
 801afde:	461e      	mov	r6, r3
 801afe0:	eb02 0a09 	add.w	sl, r2, r9
 801afe4:	f8da 0004 	ldr.w	r0, [sl, #4]
 801afe8:	f7ff fe88 	bl	801acfc <_ZN8touchgfx8ceil28_4El>
 801afec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801afee:	6160      	str	r0, [r4, #20]
 801aff0:	fb08 f803 	mul.w	r8, r8, r3
 801aff4:	9001      	str	r0, [sp, #4]
 801aff6:	eb07 0b08 	add.w	fp, r7, r8
 801affa:	f8db 0004 	ldr.w	r0, [fp, #4]
 801affe:	f7ff fe7d 	bl	801acfc <_ZN8touchgfx8ceil28_4El>
 801b002:	9a01      	ldr	r2, [sp, #4]
 801b004:	1a80      	subs	r0, r0, r2
 801b006:	61a0      	str	r0, [r4, #24]
 801b008:	2800      	cmp	r0, #0
 801b00a:	f000 8088 	beq.w	801b11e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 801b00e:	f857 3009 	ldr.w	r3, [r7, r9]
 801b012:	f857 c008 	ldr.w	ip, [r7, r8]
 801b016:	f8db 0004 	ldr.w	r0, [fp, #4]
 801b01a:	ebac 0c03 	sub.w	ip, ip, r3
 801b01e:	f8da 1004 	ldr.w	r1, [sl, #4]
 801b022:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801b026:	1a40      	subs	r0, r0, r1
 801b028:	fb0b f202 	mul.w	r2, fp, r2
 801b02c:	ea4f 1800 	mov.w	r8, r0, lsl #4
 801b030:	fb0c 2211 	mls	r2, ip, r1, r2
 801b034:	4641      	mov	r1, r8
 801b036:	fb00 2003 	mla	r0, r0, r3, r2
 801b03a:	f104 0310 	add.w	r3, r4, #16
 801b03e:	4622      	mov	r2, r4
 801b040:	3801      	subs	r0, #1
 801b042:	4440      	add	r0, r8
 801b044:	f7ff fe6a 	bl	801ad1c <_ZN8touchgfx11floorDivModEllRlS0_>
 801b048:	f104 0308 	add.w	r3, r4, #8
 801b04c:	1d22      	adds	r2, r4, #4
 801b04e:	4641      	mov	r1, r8
 801b050:	4658      	mov	r0, fp
 801b052:	f7ff fe63 	bl	801ad1c <_ZN8touchgfx11floorDivModEllRlS0_>
 801b056:	f8c4 800c 	str.w	r8, [r4, #12]
 801b05a:	6962      	ldr	r2, [r4, #20]
 801b05c:	f8da 3004 	ldr.w	r3, [sl, #4]
 801b060:	eddf 6a31 	vldr	s13, [pc, #196]	; 801b128 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801b064:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801b068:	6822      	ldr	r2, [r4, #0]
 801b06a:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801b06e:	ee07 3a10 	vmov	s14, r3
 801b072:	f857 3009 	ldr.w	r3, [r7, r9]
 801b076:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801b07a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b07e:	ee07 3a90 	vmov	s15, r3
 801b082:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 801b086:	ee27 7a26 	vmul.f32	s14, s14, s13
 801b08a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b08e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b092:	edd3 6a00 	vldr	s13, [r3]
 801b096:	eee6 6a07 	vfma.f32	s13, s12, s14
 801b09a:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801b09e:	eee6 6a27 	vfma.f32	s13, s12, s15
 801b0a2:	edc4 6a07 	vstr	s13, [r4, #28]
 801b0a6:	edd4 6a01 	vldr	s13, [r4, #4]
 801b0aa:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 801b0ae:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b0b2:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801b0b6:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801b0ba:	ed84 6a08 	vstr	s12, [r4, #32]
 801b0be:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801b0c0:	6262      	str	r2, [r4, #36]	; 0x24
 801b0c2:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 801b0c6:	ed93 6a03 	vldr	s12, [r3, #12]
 801b0ca:	eea5 6a87 	vfma.f32	s12, s11, s14
 801b0ce:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801b0d2:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801b0d6:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 801b0da:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801b0de:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 801b0e2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801b0e6:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 801b0ea:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801b0ec:	6322      	str	r2, [r4, #48]	; 0x30
 801b0ee:	ed93 6a06 	vldr	s12, [r3, #24]
 801b0f2:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 801b0f6:	eea5 6a87 	vfma.f32	s12, s11, s14
 801b0fa:	eeb0 7a46 	vmov.f32	s14, s12
 801b0fe:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 801b102:	eea6 7a27 	vfma.f32	s14, s12, s15
 801b106:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801b10a:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 801b10e:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 801b112:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b116:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 801b11a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801b11c:	63e3      	str	r3, [r4, #60]	; 0x3c
 801b11e:	4620      	mov	r0, r4
 801b120:	b003      	add	sp, #12
 801b122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b126:	bf00      	nop
 801b128:	3d800000 	.word	0x3d800000

0801b12c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801b12c:	4b01      	ldr	r3, [pc, #4]	; (801b134 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801b12e:	6018      	str	r0, [r3, #0]
 801b130:	4770      	bx	lr
 801b132:	bf00      	nop
 801b134:	20014c44 	.word	0x20014c44

0801b138 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801b138:	4b06      	ldr	r3, [pc, #24]	; (801b154 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801b13a:	881a      	ldrh	r2, [r3, #0]
 801b13c:	4282      	cmp	r2, r0
 801b13e:	d807      	bhi.n	801b150 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801b140:	4b05      	ldr	r3, [pc, #20]	; (801b158 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801b142:	881b      	ldrh	r3, [r3, #0]
 801b144:	4413      	add	r3, r2
 801b146:	4298      	cmp	r0, r3
 801b148:	bfac      	ite	ge
 801b14a:	2000      	movge	r0, #0
 801b14c:	2001      	movlt	r0, #1
 801b14e:	4770      	bx	lr
 801b150:	2000      	movs	r0, #0
 801b152:	4770      	bx	lr
 801b154:	20014c64 	.word	0x20014c64
 801b158:	20014c68 	.word	0x20014c68

0801b15c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801b15c:	b508      	push	{r3, lr}
 801b15e:	4601      	mov	r1, r0
 801b160:	f7ff ffea 	bl	801b138 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801b164:	b118      	cbz	r0, 801b16e <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801b166:	4b02      	ldr	r3, [pc, #8]	; (801b170 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801b168:	681b      	ldr	r3, [r3, #0]
 801b16a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801b16e:	bd08      	pop	{r3, pc}
 801b170:	20014c48 	.word	0x20014c48

0801b174 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801b174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b178:	4d28      	ldr	r5, [pc, #160]	; (801b21c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801b17a:	682b      	ldr	r3, [r5, #0]
 801b17c:	2b00      	cmp	r3, #0
 801b17e:	d04a      	beq.n	801b216 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801b180:	4a27      	ldr	r2, [pc, #156]	; (801b220 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801b182:	4e28      	ldr	r6, [pc, #160]	; (801b224 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801b184:	8810      	ldrh	r0, [r2, #0]
 801b186:	f8b6 8000 	ldrh.w	r8, [r6]
 801b18a:	4c27      	ldr	r4, [pc, #156]	; (801b228 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801b18c:	4440      	add	r0, r8
 801b18e:	4f27      	ldr	r7, [pc, #156]	; (801b22c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801b190:	1c41      	adds	r1, r0, #1
 801b192:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801b196:	f021 0101 	bic.w	r1, r1, #1
 801b19a:	eb03 020e 	add.w	r2, r3, lr
 801b19e:	0409      	lsls	r1, r1, #16
 801b1a0:	6022      	str	r2, [r4, #0]
 801b1a2:	0c09      	lsrs	r1, r1, #16
 801b1a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801b1a8:	eb0e 010c 	add.w	r1, lr, ip
 801b1ac:	185a      	adds	r2, r3, r1
 801b1ae:	603a      	str	r2, [r7, #0]
 801b1b0:	220e      	movs	r2, #14
 801b1b2:	fb02 f208 	mul.w	r2, r2, r8
 801b1b6:	3203      	adds	r2, #3
 801b1b8:	f022 0203 	bic.w	r2, r2, #3
 801b1bc:	4411      	add	r1, r2
 801b1be:	440b      	add	r3, r1
 801b1c0:	491b      	ldr	r1, [pc, #108]	; (801b230 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801b1c2:	600b      	str	r3, [r1, #0]
 801b1c4:	2300      	movs	r3, #0
 801b1c6:	491b      	ldr	r1, [pc, #108]	; (801b234 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801b1c8:	800b      	strh	r3, [r1, #0]
 801b1ca:	491b      	ldr	r1, [pc, #108]	; (801b238 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801b1cc:	6809      	ldr	r1, [r1, #0]
 801b1ce:	eba1 010e 	sub.w	r1, r1, lr
 801b1d2:	eba1 010c 	sub.w	r1, r1, ip
 801b1d6:	469c      	mov	ip, r3
 801b1d8:	1a8a      	subs	r2, r1, r2
 801b1da:	4918      	ldr	r1, [pc, #96]	; (801b23c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801b1dc:	600a      	str	r2, [r1, #0]
 801b1de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b1e2:	4a17      	ldr	r2, [pc, #92]	; (801b240 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801b1e4:	8013      	strh	r3, [r2, #0]
 801b1e6:	4283      	cmp	r3, r0
 801b1e8:	d10d      	bne.n	801b206 <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801b1ea:	8835      	ldrh	r5, [r6, #0]
 801b1ec:	2300      	movs	r3, #0
 801b1ee:	6838      	ldr	r0, [r7, #0]
 801b1f0:	240e      	movs	r4, #14
 801b1f2:	429d      	cmp	r5, r3
 801b1f4:	d90f      	bls.n	801b216 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801b1f6:	fb04 0203 	mla	r2, r4, r3, r0
 801b1fa:	3301      	adds	r3, #1
 801b1fc:	7b11      	ldrb	r1, [r2, #12]
 801b1fe:	f36f 1145 	bfc	r1, #5, #1
 801b202:	7311      	strb	r1, [r2, #12]
 801b204:	e7f5      	b.n	801b1f2 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801b206:	682a      	ldr	r2, [r5, #0]
 801b208:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801b20c:	6822      	ldr	r2, [r4, #0]
 801b20e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801b212:	3301      	adds	r3, #1
 801b214:	e7e7      	b.n	801b1e6 <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801b216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b21a:	bf00      	nop
 801b21c:	20014c48 	.word	0x20014c48
 801b220:	20014c64 	.word	0x20014c64
 801b224:	20014c68 	.word	0x20014c68
 801b228:	20014c5c 	.word	0x20014c5c
 801b22c:	20014c4c 	.word	0x20014c4c
 801b230:	20014c54 	.word	0x20014c54
 801b234:	20014c66 	.word	0x20014c66
 801b238:	20014c50 	.word	0x20014c50
 801b23c:	20014c60 	.word	0x20014c60
 801b240:	20014c58 	.word	0x20014c58

0801b244 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801b244:	4b10      	ldr	r3, [pc, #64]	; (801b288 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801b246:	b510      	push	{r4, lr}
 801b248:	681b      	ldr	r3, [r3, #0]
 801b24a:	b9db      	cbnz	r3, 801b284 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801b24c:	b1d1      	cbz	r1, 801b284 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801b24e:	4b0f      	ldr	r3, [pc, #60]	; (801b28c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801b250:	240e      	movs	r4, #14
 801b252:	801a      	strh	r2, [r3, #0]
 801b254:	b292      	uxth	r2, r2
 801b256:	4b0e      	ldr	r3, [pc, #56]	; (801b290 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801b258:	881b      	ldrh	r3, [r3, #0]
 801b25a:	4413      	add	r3, r2
 801b25c:	4362      	muls	r2, r4
 801b25e:	2406      	movs	r4, #6
 801b260:	fb04 2203 	mla	r2, r4, r3, r2
 801b264:	428a      	cmp	r2, r1
 801b266:	d305      	bcc.n	801b274 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801b268:	4b0a      	ldr	r3, [pc, #40]	; (801b294 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801b26a:	2135      	movs	r1, #53	; 0x35
 801b26c:	4a0a      	ldr	r2, [pc, #40]	; (801b298 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801b26e:	480b      	ldr	r0, [pc, #44]	; (801b29c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801b270:	f00c f8c8 	bl	8027404 <__assert_func>
 801b274:	4b0a      	ldr	r3, [pc, #40]	; (801b2a0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801b276:	6019      	str	r1, [r3, #0]
 801b278:	4b0a      	ldr	r3, [pc, #40]	; (801b2a4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801b27a:	6018      	str	r0, [r3, #0]
 801b27c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b280:	f7ff bf78 	b.w	801b174 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801b284:	bd10      	pop	{r4, pc}
 801b286:	bf00      	nop
 801b288:	20014c54 	.word	0x20014c54
 801b28c:	20014c68 	.word	0x20014c68
 801b290:	20014c64 	.word	0x20014c64
 801b294:	0802df42 	.word	0x0802df42
 801b298:	0802df9b 	.word	0x0802df9b
 801b29c:	0802df1d 	.word	0x0802df1d
 801b2a0:	20014c50 	.word	0x20014c50
 801b2a4:	20014c48 	.word	0x20014c48

0801b2a8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801b2a8:	b470      	push	{r4, r5, r6}
 801b2aa:	4c07      	ldr	r4, [pc, #28]	; (801b2c8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801b2ac:	4605      	mov	r5, r0
 801b2ae:	4610      	mov	r0, r2
 801b2b0:	9a03      	ldr	r2, [sp, #12]
 801b2b2:	6826      	ldr	r6, [r4, #0]
 801b2b4:	b936      	cbnz	r6, 801b2c4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801b2b6:	6025      	str	r5, [r4, #0]
 801b2b8:	4c04      	ldr	r4, [pc, #16]	; (801b2cc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801b2ba:	8021      	strh	r1, [r4, #0]
 801b2bc:	4619      	mov	r1, r3
 801b2be:	bc70      	pop	{r4, r5, r6}
 801b2c0:	f7ff bfc0 	b.w	801b244 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801b2c4:	bc70      	pop	{r4, r5, r6}
 801b2c6:	4770      	bx	lr
 801b2c8:	20014c6c 	.word	0x20014c6c
 801b2cc:	20014c64 	.word	0x20014c64

0801b2d0 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801b2d0:	b508      	push	{r3, lr}
 801b2d2:	4b14      	ldr	r3, [pc, #80]	; (801b324 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801b2d4:	6819      	ldr	r1, [r3, #0]
 801b2d6:	b931      	cbnz	r1, 801b2e6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801b2d8:	4b13      	ldr	r3, [pc, #76]	; (801b328 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801b2da:	f240 4185 	movw	r1, #1157	; 0x485
 801b2de:	4a13      	ldr	r2, [pc, #76]	; (801b32c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801b2e0:	4813      	ldr	r0, [pc, #76]	; (801b330 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801b2e2:	f00c f88f 	bl	8027404 <__assert_func>
 801b2e6:	4a13      	ldr	r2, [pc, #76]	; (801b334 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801b2e8:	8803      	ldrh	r3, [r0, #0]
 801b2ea:	8812      	ldrh	r2, [r2, #0]
 801b2ec:	4293      	cmp	r3, r2
 801b2ee:	d204      	bcs.n	801b2fa <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801b2f0:	2214      	movs	r2, #20
 801b2f2:	fb02 1303 	mla	r3, r2, r3, r1
 801b2f6:	8918      	ldrh	r0, [r3, #8]
 801b2f8:	bd08      	pop	{r3, pc}
 801b2fa:	490f      	ldr	r1, [pc, #60]	; (801b338 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801b2fc:	8809      	ldrh	r1, [r1, #0]
 801b2fe:	4411      	add	r1, r2
 801b300:	428b      	cmp	r3, r1
 801b302:	da06      	bge.n	801b312 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801b304:	1a9b      	subs	r3, r3, r2
 801b306:	4a0d      	ldr	r2, [pc, #52]	; (801b33c <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801b308:	210e      	movs	r1, #14
 801b30a:	6812      	ldr	r2, [r2, #0]
 801b30c:	fb01 2303 	mla	r3, r1, r3, r2
 801b310:	e7f1      	b.n	801b2f6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801b312:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b316:	4293      	cmp	r3, r2
 801b318:	bf0a      	itet	eq
 801b31a:	4b09      	ldreq	r3, [pc, #36]	; (801b340 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801b31c:	2000      	movne	r0, #0
 801b31e:	8818      	ldrheq	r0, [r3, #0]
 801b320:	e7ea      	b.n	801b2f8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801b322:	bf00      	nop
 801b324:	20014c6c 	.word	0x20014c6c
 801b328:	0802d458 	.word	0x0802d458
 801b32c:	0802e048 	.word	0x0802e048
 801b330:	0802df1d 	.word	0x0802df1d
 801b334:	20014c64 	.word	0x20014c64
 801b338:	20014c68 	.word	0x20014c68
 801b33c:	20014c4c 	.word	0x20014c4c
 801b340:	20014bd8 	.word	0x20014bd8

0801b344 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801b344:	b508      	push	{r3, lr}
 801b346:	4b14      	ldr	r3, [pc, #80]	; (801b398 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801b348:	6819      	ldr	r1, [r3, #0]
 801b34a:	b931      	cbnz	r1, 801b35a <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801b34c:	4b13      	ldr	r3, [pc, #76]	; (801b39c <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801b34e:	f240 4199 	movw	r1, #1177	; 0x499
 801b352:	4a13      	ldr	r2, [pc, #76]	; (801b3a0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801b354:	4813      	ldr	r0, [pc, #76]	; (801b3a4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801b356:	f00c f855 	bl	8027404 <__assert_func>
 801b35a:	4a13      	ldr	r2, [pc, #76]	; (801b3a8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801b35c:	8803      	ldrh	r3, [r0, #0]
 801b35e:	8812      	ldrh	r2, [r2, #0]
 801b360:	4293      	cmp	r3, r2
 801b362:	d204      	bcs.n	801b36e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801b364:	2214      	movs	r2, #20
 801b366:	fb02 1303 	mla	r3, r2, r3, r1
 801b36a:	8958      	ldrh	r0, [r3, #10]
 801b36c:	bd08      	pop	{r3, pc}
 801b36e:	490f      	ldr	r1, [pc, #60]	; (801b3ac <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801b370:	8809      	ldrh	r1, [r1, #0]
 801b372:	4411      	add	r1, r2
 801b374:	428b      	cmp	r3, r1
 801b376:	da06      	bge.n	801b386 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801b378:	1a9b      	subs	r3, r3, r2
 801b37a:	4a0d      	ldr	r2, [pc, #52]	; (801b3b0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801b37c:	210e      	movs	r1, #14
 801b37e:	6812      	ldr	r2, [r2, #0]
 801b380:	fb01 2303 	mla	r3, r1, r3, r2
 801b384:	e7f1      	b.n	801b36a <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801b386:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b38a:	4293      	cmp	r3, r2
 801b38c:	bf0a      	itet	eq
 801b38e:	4b09      	ldreq	r3, [pc, #36]	; (801b3b4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801b390:	2000      	movne	r0, #0
 801b392:	8818      	ldrheq	r0, [r3, #0]
 801b394:	e7ea      	b.n	801b36c <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801b396:	bf00      	nop
 801b398:	20014c6c 	.word	0x20014c6c
 801b39c:	0802d458 	.word	0x0802d458
 801b3a0:	0802e074 	.word	0x0802e074
 801b3a4:	0802df1d 	.word	0x0802df1d
 801b3a8:	20014c64 	.word	0x20014c64
 801b3ac:	20014c68 	.word	0x20014c68
 801b3b0:	20014c4c 	.word	0x20014c4c
 801b3b4:	20014bda 	.word	0x20014bda

0801b3b8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801b3b8:	4b23      	ldr	r3, [pc, #140]	; (801b448 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801b3ba:	b510      	push	{r4, lr}
 801b3bc:	681c      	ldr	r4, [r3, #0]
 801b3be:	b934      	cbnz	r4, 801b3ce <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801b3c0:	4b22      	ldr	r3, [pc, #136]	; (801b44c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801b3c2:	f240 41ad 	movw	r1, #1197	; 0x4ad
 801b3c6:	4a22      	ldr	r2, [pc, #136]	; (801b450 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801b3c8:	4822      	ldr	r0, [pc, #136]	; (801b454 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801b3ca:	f00c f81b 	bl	8027404 <__assert_func>
 801b3ce:	4a22      	ldr	r2, [pc, #136]	; (801b458 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801b3d0:	880b      	ldrh	r3, [r1, #0]
 801b3d2:	8812      	ldrh	r2, [r2, #0]
 801b3d4:	4293      	cmp	r3, r2
 801b3d6:	d211      	bcs.n	801b3fc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801b3d8:	2214      	movs	r2, #20
 801b3da:	fb02 4303 	mla	r3, r2, r3, r4
 801b3de:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801b3e2:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801b3e6:	8a1a      	ldrh	r2, [r3, #16]
 801b3e8:	8a5b      	ldrh	r3, [r3, #18]
 801b3ea:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801b3ee:	8004      	strh	r4, [r0, #0]
 801b3f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b3f4:	8041      	strh	r1, [r0, #2]
 801b3f6:	8082      	strh	r2, [r0, #4]
 801b3f8:	80c3      	strh	r3, [r0, #6]
 801b3fa:	e00e      	b.n	801b41a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801b3fc:	4917      	ldr	r1, [pc, #92]	; (801b45c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801b3fe:	8809      	ldrh	r1, [r1, #0]
 801b400:	4411      	add	r1, r2
 801b402:	428b      	cmp	r3, r1
 801b404:	da0a      	bge.n	801b41c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801b406:	1a9b      	subs	r3, r3, r2
 801b408:	4a15      	ldr	r2, [pc, #84]	; (801b460 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801b40a:	210e      	movs	r1, #14
 801b40c:	6812      	ldr	r2, [r2, #0]
 801b40e:	fb01 2303 	mla	r3, r1, r3, r2
 801b412:	681a      	ldr	r2, [r3, #0]
 801b414:	6002      	str	r2, [r0, #0]
 801b416:	685a      	ldr	r2, [r3, #4]
 801b418:	6042      	str	r2, [r0, #4]
 801b41a:	bd10      	pop	{r4, pc}
 801b41c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b420:	4293      	cmp	r3, r2
 801b422:	d10b      	bne.n	801b43c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801b424:	4b0f      	ldr	r3, [pc, #60]	; (801b464 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801b426:	f9b3 1000 	ldrsh.w	r1, [r3]
 801b42a:	4b0f      	ldr	r3, [pc, #60]	; (801b468 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801b42c:	8081      	strh	r1, [r0, #4]
 801b42e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b432:	2300      	movs	r3, #0
 801b434:	80c2      	strh	r2, [r0, #6]
 801b436:	8003      	strh	r3, [r0, #0]
 801b438:	8043      	strh	r3, [r0, #2]
 801b43a:	e7ee      	b.n	801b41a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801b43c:	2300      	movs	r3, #0
 801b43e:	8003      	strh	r3, [r0, #0]
 801b440:	8043      	strh	r3, [r0, #2]
 801b442:	8083      	strh	r3, [r0, #4]
 801b444:	e7d8      	b.n	801b3f8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801b446:	bf00      	nop
 801b448:	20014c6c 	.word	0x20014c6c
 801b44c:	0802d458 	.word	0x0802d458
 801b450:	0802dfe1 	.word	0x0802dfe1
 801b454:	0802df1d 	.word	0x0802df1d
 801b458:	20014c64 	.word	0x20014c64
 801b45c:	20014c68 	.word	0x20014c68
 801b460:	20014c4c 	.word	0x20014c4c
 801b464:	20014bd8 	.word	0x20014bd8
 801b468:	20014bda 	.word	0x20014bda

0801b46c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801b46c:	4b18      	ldr	r3, [pc, #96]	; (801b4d0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801b46e:	681b      	ldr	r3, [r3, #0]
 801b470:	b34b      	cbz	r3, 801b4c6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801b472:	4a18      	ldr	r2, [pc, #96]	; (801b4d4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801b474:	8800      	ldrh	r0, [r0, #0]
 801b476:	8812      	ldrh	r2, [r2, #0]
 801b478:	4290      	cmp	r0, r2
 801b47a:	d211      	bcs.n	801b4a0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801b47c:	2214      	movs	r2, #20
 801b47e:	fb02 3300 	mla	r3, r2, r0, r3
 801b482:	8a1a      	ldrh	r2, [r3, #16]
 801b484:	8919      	ldrh	r1, [r3, #8]
 801b486:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801b48a:	428a      	cmp	r2, r1
 801b48c:	db1d      	blt.n	801b4ca <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801b48e:	8a58      	ldrh	r0, [r3, #18]
 801b490:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801b494:	895b      	ldrh	r3, [r3, #10]
 801b496:	4298      	cmp	r0, r3
 801b498:	bfac      	ite	ge
 801b49a:	2000      	movge	r0, #0
 801b49c:	2001      	movlt	r0, #1
 801b49e:	4770      	bx	lr
 801b4a0:	4b0d      	ldr	r3, [pc, #52]	; (801b4d8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801b4a2:	881b      	ldrh	r3, [r3, #0]
 801b4a4:	4413      	add	r3, r2
 801b4a6:	4298      	cmp	r0, r3
 801b4a8:	da0d      	bge.n	801b4c6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801b4aa:	4b0c      	ldr	r3, [pc, #48]	; (801b4dc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801b4ac:	1a80      	subs	r0, r0, r2
 801b4ae:	220e      	movs	r2, #14
 801b4b0:	681b      	ldr	r3, [r3, #0]
 801b4b2:	fb02 3300 	mla	r3, r2, r0, r3
 801b4b6:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801b4ba:	891a      	ldrh	r2, [r3, #8]
 801b4bc:	4291      	cmp	r1, r2
 801b4be:	db04      	blt.n	801b4ca <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801b4c0:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801b4c4:	e7e6      	b.n	801b494 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801b4c6:	2000      	movs	r0, #0
 801b4c8:	4770      	bx	lr
 801b4ca:	2001      	movs	r0, #1
 801b4cc:	4770      	bx	lr
 801b4ce:	bf00      	nop
 801b4d0:	20014c6c 	.word	0x20014c6c
 801b4d4:	20014c64 	.word	0x20014c64
 801b4d8:	20014c68 	.word	0x20014c68
 801b4dc:	20014c4c 	.word	0x20014c4c

0801b4e0 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801b4e0:	b508      	push	{r3, lr}
 801b4e2:	4b12      	ldr	r3, [pc, #72]	; (801b52c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801b4e4:	6819      	ldr	r1, [r3, #0]
 801b4e6:	b931      	cbnz	r1, 801b4f6 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801b4e8:	4b11      	ldr	r3, [pc, #68]	; (801b530 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801b4ea:	f240 41d1 	movw	r1, #1233	; 0x4d1
 801b4ee:	4a11      	ldr	r2, [pc, #68]	; (801b534 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801b4f0:	4811      	ldr	r0, [pc, #68]	; (801b538 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801b4f2:	f00b ff87 	bl	8027404 <__assert_func>
 801b4f6:	8803      	ldrh	r3, [r0, #0]
 801b4f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b4fc:	4293      	cmp	r3, r2
 801b4fe:	d012      	beq.n	801b526 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801b500:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b504:	4293      	cmp	r3, r2
 801b506:	d103      	bne.n	801b510 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801b508:	4b0c      	ldr	r3, [pc, #48]	; (801b53c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801b50a:	681b      	ldr	r3, [r3, #0]
 801b50c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801b50e:	bd08      	pop	{r3, pc}
 801b510:	4a0b      	ldr	r2, [pc, #44]	; (801b540 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801b512:	6812      	ldr	r2, [r2, #0]
 801b514:	b11a      	cbz	r2, 801b51e <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801b516:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801b51a:	2800      	cmp	r0, #0
 801b51c:	d1f7      	bne.n	801b50e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801b51e:	2214      	movs	r2, #20
 801b520:	4353      	muls	r3, r2
 801b522:	58c8      	ldr	r0, [r1, r3]
 801b524:	e7f3      	b.n	801b50e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801b526:	2000      	movs	r0, #0
 801b528:	e7f1      	b.n	801b50e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801b52a:	bf00      	nop
 801b52c:	20014c6c 	.word	0x20014c6c
 801b530:	0802d458 	.word	0x0802d458
 801b534:	0802e017 	.word	0x0802e017
 801b538:	0802df1d 	.word	0x0802df1d
 801b53c:	20014be4 	.word	0x20014be4
 801b540:	20014c48 	.word	0x20014c48

0801b544 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801b544:	8802      	ldrh	r2, [r0, #0]
 801b546:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801b54a:	429a      	cmp	r2, r3
 801b54c:	d845      	bhi.n	801b5da <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801b54e:	4b24      	ldr	r3, [pc, #144]	; (801b5e0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801b550:	8818      	ldrh	r0, [r3, #0]
 801b552:	4282      	cmp	r2, r0
 801b554:	d221      	bcs.n	801b59a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801b556:	4b23      	ldr	r3, [pc, #140]	; (801b5e4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801b558:	6819      	ldr	r1, [r3, #0]
 801b55a:	2314      	movs	r3, #20
 801b55c:	fb03 1302 	mla	r3, r3, r2, r1
 801b560:	6858      	ldr	r0, [r3, #4]
 801b562:	2800      	cmp	r0, #0
 801b564:	d03a      	beq.n	801b5dc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801b566:	4920      	ldr	r1, [pc, #128]	; (801b5e8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801b568:	6809      	ldr	r1, [r1, #0]
 801b56a:	2900      	cmp	r1, #0
 801b56c:	d036      	beq.n	801b5dc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801b56e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801b572:	2900      	cmp	r1, #0
 801b574:	d032      	beq.n	801b5dc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801b576:	891a      	ldrh	r2, [r3, #8]
 801b578:	8958      	ldrh	r0, [r3, #10]
 801b57a:	4350      	muls	r0, r2
 801b57c:	7c5a      	ldrb	r2, [r3, #17]
 801b57e:	7cdb      	ldrb	r3, [r3, #19]
 801b580:	0952      	lsrs	r2, r2, #5
 801b582:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801b586:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801b58a:	2b0b      	cmp	r3, #11
 801b58c:	bf18      	it	ne
 801b58e:	0040      	lslne	r0, r0, #1
 801b590:	3003      	adds	r0, #3
 801b592:	f020 0003 	bic.w	r0, r0, #3
 801b596:	4408      	add	r0, r1
 801b598:	4770      	bx	lr
 801b59a:	4b14      	ldr	r3, [pc, #80]	; (801b5ec <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 801b59c:	881b      	ldrh	r3, [r3, #0]
 801b59e:	4403      	add	r3, r0
 801b5a0:	429a      	cmp	r2, r3
 801b5a2:	da1a      	bge.n	801b5da <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801b5a4:	4b12      	ldr	r3, [pc, #72]	; (801b5f0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 801b5a6:	1a10      	subs	r0, r2, r0
 801b5a8:	210e      	movs	r1, #14
 801b5aa:	681b      	ldr	r3, [r3, #0]
 801b5ac:	fb01 3000 	mla	r0, r1, r0, r3
 801b5b0:	7b03      	ldrb	r3, [r0, #12]
 801b5b2:	f003 031f 	and.w	r3, r3, #31
 801b5b6:	2b0b      	cmp	r3, #11
 801b5b8:	d10b      	bne.n	801b5d2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801b5ba:	8903      	ldrh	r3, [r0, #8]
 801b5bc:	8940      	ldrh	r0, [r0, #10]
 801b5be:	4358      	muls	r0, r3
 801b5c0:	4b09      	ldr	r3, [pc, #36]	; (801b5e8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801b5c2:	3003      	adds	r0, #3
 801b5c4:	6819      	ldr	r1, [r3, #0]
 801b5c6:	f020 0303 	bic.w	r3, r0, #3
 801b5ca:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801b5ce:	4418      	add	r0, r3
 801b5d0:	4770      	bx	lr
 801b5d2:	2b0d      	cmp	r3, #13
 801b5d4:	d101      	bne.n	801b5da <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801b5d6:	300d      	adds	r0, #13
 801b5d8:	4770      	bx	lr
 801b5da:	2000      	movs	r0, #0
 801b5dc:	4770      	bx	lr
 801b5de:	bf00      	nop
 801b5e0:	20014c64 	.word	0x20014c64
 801b5e4:	20014c6c 	.word	0x20014c6c
 801b5e8:	20014c48 	.word	0x20014c48
 801b5ec:	20014c68 	.word	0x20014c68
 801b5f0:	20014c4c 	.word	0x20014c4c

0801b5f4 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801b5f4:	4b17      	ldr	r3, [pc, #92]	; (801b654 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801b5f6:	b510      	push	{r4, lr}
 801b5f8:	6819      	ldr	r1, [r3, #0]
 801b5fa:	8803      	ldrh	r3, [r0, #0]
 801b5fc:	b1e9      	cbz	r1, 801b63a <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801b5fe:	4a16      	ldr	r2, [pc, #88]	; (801b658 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801b600:	8812      	ldrh	r2, [r2, #0]
 801b602:	429a      	cmp	r2, r3
 801b604:	d90a      	bls.n	801b61c <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 801b606:	2214      	movs	r2, #20
 801b608:	fb02 1303 	mla	r3, r2, r3, r1
 801b60c:	7c58      	ldrb	r0, [r3, #17]
 801b60e:	0942      	lsrs	r2, r0, #5
 801b610:	7cd8      	ldrb	r0, [r3, #19]
 801b612:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801b616:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801b61a:	bd10      	pop	{r4, pc}
 801b61c:	490f      	ldr	r1, [pc, #60]	; (801b65c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801b61e:	8809      	ldrh	r1, [r1, #0]
 801b620:	4411      	add	r1, r2
 801b622:	428b      	cmp	r3, r1
 801b624:	da09      	bge.n	801b63a <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801b626:	1a9b      	subs	r3, r3, r2
 801b628:	4a0d      	ldr	r2, [pc, #52]	; (801b660 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801b62a:	210e      	movs	r1, #14
 801b62c:	6812      	ldr	r2, [r2, #0]
 801b62e:	fb01 2303 	mla	r3, r1, r3, r2
 801b632:	7b18      	ldrb	r0, [r3, #12]
 801b634:	f000 001f 	and.w	r0, r0, #31
 801b638:	e7ef      	b.n	801b61a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801b63a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b63e:	4293      	cmp	r3, r2
 801b640:	d106      	bne.n	801b650 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801b642:	f7fb fac7 	bl	8016bd4 <_ZN8touchgfx3HAL3lcdEv>
 801b646:	6803      	ldr	r3, [r0, #0]
 801b648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b64c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b64e:	4718      	bx	r3
 801b650:	2000      	movs	r0, #0
 801b652:	e7e2      	b.n	801b61a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801b654:	20014c6c 	.word	0x20014c6c
 801b658:	20014c64 	.word	0x20014c64
 801b65c:	20014c68 	.word	0x20014c68
 801b660:	20014c4c 	.word	0x20014c4c

0801b664 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801b664:	2010      	movs	r0, #16
 801b666:	4770      	bx	lr

0801b668 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801b668:	2000      	movs	r0, #0
 801b66a:	4770      	bx	lr

0801b66c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801b66c:	2bff      	cmp	r3, #255	; 0xff
 801b66e:	d050      	beq.n	801b712 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801b670:	2a0b      	cmp	r2, #11
 801b672:	d04a      	beq.n	801b70a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801b674:	d80e      	bhi.n	801b694 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801b676:	2a03      	cmp	r2, #3
 801b678:	d03f      	beq.n	801b6fa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801b67a:	d804      	bhi.n	801b686 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801b67c:	2a01      	cmp	r2, #1
 801b67e:	d03e      	beq.n	801b6fe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801b680:	d93f      	bls.n	801b702 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801b682:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801b684:	4770      	bx	lr
 801b686:	2a09      	cmp	r2, #9
 801b688:	d03f      	beq.n	801b70a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801b68a:	d83c      	bhi.n	801b706 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801b68c:	2a08      	cmp	r2, #8
 801b68e:	d03a      	beq.n	801b706 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801b690:	2000      	movs	r0, #0
 801b692:	4770      	bx	lr
 801b694:	2a2f      	cmp	r2, #47	; 0x2f
 801b696:	d024      	beq.n	801b6e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801b698:	d80d      	bhi.n	801b6b6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801b69a:	2a2d      	cmp	r2, #45	; 0x2d
 801b69c:	d014      	beq.n	801b6c8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801b69e:	d826      	bhi.n	801b6ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801b6a0:	2a2c      	cmp	r2, #44	; 0x2c
 801b6a2:	d1f5      	bne.n	801b690 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b6a4:	684b      	ldr	r3, [r1, #4]
 801b6a6:	781b      	ldrb	r3, [r3, #0]
 801b6a8:	2b01      	cmp	r3, #1
 801b6aa:	d018      	beq.n	801b6de <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801b6ac:	d323      	bcc.n	801b6f6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801b6ae:	2b02      	cmp	r3, #2
 801b6b0:	d1ee      	bne.n	801b690 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b6b2:	6880      	ldr	r0, [r0, #8]
 801b6b4:	4770      	bx	lr
 801b6b6:	2a31      	cmp	r2, #49	; 0x31
 801b6b8:	d004      	beq.n	801b6c4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801b6ba:	d328      	bcc.n	801b70e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801b6bc:	2a32      	cmp	r2, #50	; 0x32
 801b6be:	d026      	beq.n	801b70e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801b6c0:	2a33      	cmp	r2, #51	; 0x33
 801b6c2:	d1e5      	bne.n	801b690 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b6c4:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801b6c6:	4770      	bx	lr
 801b6c8:	684b      	ldr	r3, [r1, #4]
 801b6ca:	781b      	ldrb	r3, [r3, #0]
 801b6cc:	2b01      	cmp	r3, #1
 801b6ce:	d004      	beq.n	801b6da <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b6d0:	d30b      	bcc.n	801b6ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801b6d2:	2b02      	cmp	r3, #2
 801b6d4:	d1dc      	bne.n	801b690 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b6d6:	6900      	ldr	r0, [r0, #16]
 801b6d8:	4770      	bx	lr
 801b6da:	6a00      	ldr	r0, [r0, #32]
 801b6dc:	4770      	bx	lr
 801b6de:	6980      	ldr	r0, [r0, #24]
 801b6e0:	4770      	bx	lr
 801b6e2:	684b      	ldr	r3, [r1, #4]
 801b6e4:	781b      	ldrb	r3, [r3, #0]
 801b6e6:	2b00      	cmp	r3, #0
 801b6e8:	d1d2      	bne.n	801b690 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b6ea:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801b6ec:	4770      	bx	lr
 801b6ee:	684b      	ldr	r3, [r1, #4]
 801b6f0:	781b      	ldrb	r3, [r3, #0]
 801b6f2:	2b00      	cmp	r3, #0
 801b6f4:	d1cc      	bne.n	801b690 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b6f6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801b6f8:	4770      	bx	lr
 801b6fa:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801b6fc:	4770      	bx	lr
 801b6fe:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801b700:	4770      	bx	lr
 801b702:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801b704:	4770      	bx	lr
 801b706:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801b708:	4770      	bx	lr
 801b70a:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801b70c:	4770      	bx	lr
 801b70e:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801b710:	4770      	bx	lr
 801b712:	2a0b      	cmp	r2, #11
 801b714:	d049      	beq.n	801b7aa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801b716:	d80e      	bhi.n	801b736 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801b718:	2a03      	cmp	r2, #3
 801b71a:	d040      	beq.n	801b79e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801b71c:	d804      	bhi.n	801b728 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801b71e:	2a01      	cmp	r2, #1
 801b720:	d03f      	beq.n	801b7a2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801b722:	d940      	bls.n	801b7a6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801b724:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801b726:	4770      	bx	lr
 801b728:	2a09      	cmp	r2, #9
 801b72a:	d03e      	beq.n	801b7aa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801b72c:	d801      	bhi.n	801b732 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801b72e:	2a08      	cmp	r2, #8
 801b730:	d1ae      	bne.n	801b690 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b732:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801b734:	4770      	bx	lr
 801b736:	2a2f      	cmp	r2, #47	; 0x2f
 801b738:	d024      	beq.n	801b784 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801b73a:	d80d      	bhi.n	801b758 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801b73c:	2a2d      	cmp	r2, #45	; 0x2d
 801b73e:	d014      	beq.n	801b76a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801b740:	d826      	bhi.n	801b790 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801b742:	2a2c      	cmp	r2, #44	; 0x2c
 801b744:	d1a4      	bne.n	801b690 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b746:	684b      	ldr	r3, [r1, #4]
 801b748:	781b      	ldrb	r3, [r3, #0]
 801b74a:	2b01      	cmp	r3, #1
 801b74c:	d018      	beq.n	801b780 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801b74e:	d324      	bcc.n	801b79a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801b750:	2b02      	cmp	r3, #2
 801b752:	d19d      	bne.n	801b690 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b754:	68c0      	ldr	r0, [r0, #12]
 801b756:	4770      	bx	lr
 801b758:	2a31      	cmp	r2, #49	; 0x31
 801b75a:	d004      	beq.n	801b766 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801b75c:	d327      	bcc.n	801b7ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801b75e:	2a32      	cmp	r2, #50	; 0x32
 801b760:	d025      	beq.n	801b7ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801b762:	2a33      	cmp	r2, #51	; 0x33
 801b764:	d194      	bne.n	801b690 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b766:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801b768:	4770      	bx	lr
 801b76a:	684b      	ldr	r3, [r1, #4]
 801b76c:	781b      	ldrb	r3, [r3, #0]
 801b76e:	2b01      	cmp	r3, #1
 801b770:	d004      	beq.n	801b77c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801b772:	d30b      	bcc.n	801b78c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801b774:	2b02      	cmp	r3, #2
 801b776:	d18b      	bne.n	801b690 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b778:	6940      	ldr	r0, [r0, #20]
 801b77a:	4770      	bx	lr
 801b77c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801b77e:	4770      	bx	lr
 801b780:	69c0      	ldr	r0, [r0, #28]
 801b782:	4770      	bx	lr
 801b784:	684b      	ldr	r3, [r1, #4]
 801b786:	781b      	ldrb	r3, [r3, #0]
 801b788:	2b00      	cmp	r3, #0
 801b78a:	d181      	bne.n	801b690 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b78c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801b78e:	4770      	bx	lr
 801b790:	684b      	ldr	r3, [r1, #4]
 801b792:	781b      	ldrb	r3, [r3, #0]
 801b794:	2b00      	cmp	r3, #0
 801b796:	f47f af7b 	bne.w	801b690 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b79a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801b79c:	4770      	bx	lr
 801b79e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801b7a0:	4770      	bx	lr
 801b7a2:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801b7a4:	4770      	bx	lr
 801b7a6:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801b7a8:	4770      	bx	lr
 801b7aa:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801b7ac:	4770      	bx	lr
 801b7ae:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801b7b0:	4770      	bx	lr

0801b7b2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b7b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7b6:	b087      	sub	sp, #28
 801b7b8:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b7ba:	9205      	str	r2, [sp, #20]
 801b7bc:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801b7c0:	9101      	str	r1, [sp, #4]
 801b7c2:	9202      	str	r2, [sp, #8]
 801b7c4:	6841      	ldr	r1, [r0, #4]
 801b7c6:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801b7ca:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801b7ce:	fb01 2404 	mla	r4, r1, r4, r2
 801b7d2:	6802      	ldr	r2, [r0, #0]
 801b7d4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b7d8:	f8de 2000 	ldr.w	r2, [lr]
 801b7dc:	9203      	str	r2, [sp, #12]
 801b7de:	f8de 2004 	ldr.w	r2, [lr, #4]
 801b7e2:	3204      	adds	r2, #4
 801b7e4:	9204      	str	r2, [sp, #16]
 801b7e6:	9a02      	ldr	r2, [sp, #8]
 801b7e8:	43d6      	mvns	r6, r2
 801b7ea:	b2f6      	uxtb	r6, r6
 801b7ec:	9a01      	ldr	r2, [sp, #4]
 801b7ee:	2a00      	cmp	r2, #0
 801b7f0:	dc03      	bgt.n	801b7fa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801b7f2:	9a05      	ldr	r2, [sp, #20]
 801b7f4:	2a00      	cmp	r2, #0
 801b7f6:	f340 8129 	ble.w	801ba4c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801b7fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b7fc:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801b800:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b804:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b806:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801b80a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b80e:	2b00      	cmp	r3, #0
 801b810:	dd0e      	ble.n	801b830 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b812:	1408      	asrs	r0, r1, #16
 801b814:	d405      	bmi.n	801b822 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b816:	4560      	cmp	r0, ip
 801b818:	da03      	bge.n	801b822 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b81a:	1410      	asrs	r0, r2, #16
 801b81c:	d401      	bmi.n	801b822 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b81e:	42b8      	cmp	r0, r7
 801b820:	db07      	blt.n	801b832 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801b822:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b824:	3b01      	subs	r3, #1
 801b826:	3402      	adds	r4, #2
 801b828:	4401      	add	r1, r0
 801b82a:	9814      	ldr	r0, [sp, #80]	; 0x50
 801b82c:	4402      	add	r2, r0
 801b82e:	e7ee      	b.n	801b80e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801b830:	d071      	beq.n	801b916 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b832:	1e58      	subs	r0, r3, #1
 801b834:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b836:	fb05 1500 	mla	r5, r5, r0, r1
 801b83a:	142d      	asrs	r5, r5, #16
 801b83c:	d45f      	bmi.n	801b8fe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801b83e:	4565      	cmp	r5, ip
 801b840:	da5d      	bge.n	801b8fe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801b842:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801b844:	fb05 2000 	mla	r0, r5, r0, r2
 801b848:	1400      	asrs	r0, r0, #16
 801b84a:	d458      	bmi.n	801b8fe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801b84c:	42b8      	cmp	r0, r7
 801b84e:	da56      	bge.n	801b8fe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801b850:	4699      	mov	r9, r3
 801b852:	46a2      	mov	sl, r4
 801b854:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801b858:	f1b9 0f00 	cmp.w	r9, #0
 801b85c:	dd57      	ble.n	801b90e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801b85e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801b862:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801b866:	9803      	ldr	r0, [sp, #12]
 801b868:	140d      	asrs	r5, r1, #16
 801b86a:	f109 39ff 	add.w	r9, r9, #4294967295
 801b86e:	fb07 000c 	mla	r0, r7, ip, r0
 801b872:	5d40      	ldrb	r0, [r0, r5]
 801b874:	9d04      	ldr	r5, [sp, #16]
 801b876:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801b87a:	f8ba 5000 	ldrh.w	r5, [sl]
 801b87e:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801b882:	122f      	asrs	r7, r5, #8
 801b884:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801b888:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b88c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b890:	00ed      	lsls	r5, r5, #3
 801b892:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801b896:	fb17 f706 	smulbb	r7, r7, r6
 801b89a:	b2ed      	uxtb	r5, r5
 801b89c:	fb18 f806 	smulbb	r8, r8, r6
 801b8a0:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801b8a4:	10c7      	asrs	r7, r0, #3
 801b8a6:	fb15 f506 	smulbb	r5, r5, r6
 801b8aa:	00c0      	lsls	r0, r0, #3
 801b8ac:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b8b0:	fa1f fc8c 	uxth.w	ip, ip
 801b8b4:	b2c0      	uxtb	r0, r0
 801b8b6:	fb07 870b 	mla	r7, r7, fp, r8
 801b8ba:	fb00 500b 	mla	r0, r0, fp, r5
 801b8be:	f10c 0501 	add.w	r5, ip, #1
 801b8c2:	b2bf      	uxth	r7, r7
 801b8c4:	b280      	uxth	r0, r0
 801b8c6:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b8ca:	f107 0801 	add.w	r8, r7, #1
 801b8ce:	1c45      	adds	r5, r0, #1
 801b8d0:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801b8d4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b8d8:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801b8dc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b8de:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801b8e2:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801b8e6:	4401      	add	r1, r0
 801b8e8:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801b8ec:	9814      	ldr	r0, [sp, #80]	; 0x50
 801b8ee:	ea45 0c0c 	orr.w	ip, r5, ip
 801b8f2:	4402      	add	r2, r0
 801b8f4:	ea4c 0c08 	orr.w	ip, ip, r8
 801b8f8:	f82a cb02 	strh.w	ip, [sl], #2
 801b8fc:	e7ac      	b.n	801b858 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801b8fe:	f04f 0800 	mov.w	r8, #0
 801b902:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801b906:	eb03 0008 	add.w	r0, r3, r8
 801b90a:	2800      	cmp	r0, #0
 801b90c:	dc41      	bgt.n	801b992 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801b90e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b912:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b916:	9b01      	ldr	r3, [sp, #4]
 801b918:	2b00      	cmp	r3, #0
 801b91a:	f340 8097 	ble.w	801ba4c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801b91e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b922:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b924:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b928:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b92c:	eef0 6a62 	vmov.f32	s13, s5
 801b930:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b934:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b938:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b93c:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801b940:	eef0 6a43 	vmov.f32	s13, s6
 801b944:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b948:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801b94c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b950:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b954:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b958:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b95c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b960:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b964:	ee12 2a90 	vmov	r2, s5
 801b968:	eef0 2a47 	vmov.f32	s5, s14
 801b96c:	fb92 f3f3 	sdiv	r3, r2, r3
 801b970:	ee13 2a10 	vmov	r2, s6
 801b974:	9313      	str	r3, [sp, #76]	; 0x4c
 801b976:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b978:	eeb0 3a67 	vmov.f32	s6, s15
 801b97c:	fb92 f3f3 	sdiv	r3, r2, r3
 801b980:	9314      	str	r3, [sp, #80]	; 0x50
 801b982:	9b01      	ldr	r3, [sp, #4]
 801b984:	9a05      	ldr	r2, [sp, #20]
 801b986:	3b01      	subs	r3, #1
 801b988:	9301      	str	r3, [sp, #4]
 801b98a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b98c:	bf08      	it	eq
 801b98e:	4613      	moveq	r3, r2
 801b990:	e72c      	b.n	801b7ec <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801b992:	140f      	asrs	r7, r1, #16
 801b994:	d453      	bmi.n	801ba3e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801b996:	f8de 5008 	ldr.w	r5, [lr, #8]
 801b99a:	42bd      	cmp	r5, r7
 801b99c:	dd4f      	ble.n	801ba3e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801b99e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801b9a2:	d44c      	bmi.n	801ba3e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801b9a4:	f8de 000c 	ldr.w	r0, [lr, #12]
 801b9a8:	4560      	cmp	r0, ip
 801b9aa:	dd48      	ble.n	801ba3e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801b9ac:	9803      	ldr	r0, [sp, #12]
 801b9ae:	b22d      	sxth	r5, r5
 801b9b0:	fb0c 0505 	mla	r5, ip, r5, r0
 801b9b4:	5de8      	ldrb	r0, [r5, r7]
 801b9b6:	9d04      	ldr	r5, [sp, #16]
 801b9b8:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801b9bc:	f06f 0501 	mvn.w	r5, #1
 801b9c0:	fb05 fb08 	mul.w	fp, r5, r8
 801b9c4:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801b9c8:	f834 500b 	ldrh.w	r5, [r4, fp]
 801b9cc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b9d0:	122f      	asrs	r7, r5, #8
 801b9d2:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801b9d6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b9da:	00ed      	lsls	r5, r5, #3
 801b9dc:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801b9e0:	fb17 f706 	smulbb	r7, r7, r6
 801b9e4:	b2ed      	uxtb	r5, r5
 801b9e6:	fb19 f906 	smulbb	r9, r9, r6
 801b9ea:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801b9ee:	10c7      	asrs	r7, r0, #3
 801b9f0:	fb15 f506 	smulbb	r5, r5, r6
 801b9f4:	00c0      	lsls	r0, r0, #3
 801b9f6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b9fa:	fa1f fc8c 	uxth.w	ip, ip
 801b9fe:	b2c0      	uxtb	r0, r0
 801ba00:	fb07 970a 	mla	r7, r7, sl, r9
 801ba04:	fb00 500a 	mla	r0, r0, sl, r5
 801ba08:	f10c 0501 	add.w	r5, ip, #1
 801ba0c:	b2bf      	uxth	r7, r7
 801ba0e:	b280      	uxth	r0, r0
 801ba10:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801ba14:	f107 0901 	add.w	r9, r7, #1
 801ba18:	1c45      	adds	r5, r0, #1
 801ba1a:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801ba1e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ba22:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801ba26:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801ba2a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801ba2e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801ba32:	ea45 0c0c 	orr.w	ip, r5, ip
 801ba36:	ea4c 0c09 	orr.w	ip, ip, r9
 801ba3a:	f824 c00b 	strh.w	ip, [r4, fp]
 801ba3e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ba40:	f108 38ff 	add.w	r8, r8, #4294967295
 801ba44:	4401      	add	r1, r0
 801ba46:	9814      	ldr	r0, [sp, #80]	; 0x50
 801ba48:	4402      	add	r2, r0
 801ba4a:	e75c      	b.n	801b906 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801ba4c:	b007      	add	sp, #28
 801ba4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ba52 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ba52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba56:	b085      	sub	sp, #20
 801ba58:	4693      	mov	fp, r2
 801ba5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ba5e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801ba60:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801ba62:	6870      	ldr	r0, [r6, #4]
 801ba64:	9100      	str	r1, [sp, #0]
 801ba66:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801ba6a:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801ba6e:	fb00 2404 	mla	r4, r0, r4, r2
 801ba72:	6832      	ldr	r2, [r6, #0]
 801ba74:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ba78:	682a      	ldr	r2, [r5, #0]
 801ba7a:	9201      	str	r2, [sp, #4]
 801ba7c:	686a      	ldr	r2, [r5, #4]
 801ba7e:	3204      	adds	r2, #4
 801ba80:	9202      	str	r2, [sp, #8]
 801ba82:	9a00      	ldr	r2, [sp, #0]
 801ba84:	2a00      	cmp	r2, #0
 801ba86:	dc03      	bgt.n	801ba90 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801ba88:	f1bb 0f00 	cmp.w	fp, #0
 801ba8c:	f340 80a0 	ble.w	801bbd0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801ba90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ba92:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801ba96:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ba9a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ba9c:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801baa0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801baa4:	2b00      	cmp	r3, #0
 801baa6:	dd0c      	ble.n	801bac2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801baa8:	1406      	asrs	r6, r0, #16
 801baaa:	d405      	bmi.n	801bab8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801baac:	454e      	cmp	r6, r9
 801baae:	da03      	bge.n	801bab8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801bab0:	1416      	asrs	r6, r2, #16
 801bab2:	d401      	bmi.n	801bab8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801bab4:	4546      	cmp	r6, r8
 801bab6:	db05      	blt.n	801bac4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bab8:	4470      	add	r0, lr
 801baba:	4462      	add	r2, ip
 801babc:	3b01      	subs	r3, #1
 801babe:	3402      	adds	r4, #2
 801bac0:	e7f0      	b.n	801baa4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801bac2:	d00f      	beq.n	801bae4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801bac4:	1e5e      	subs	r6, r3, #1
 801bac6:	fb0e 0706 	mla	r7, lr, r6, r0
 801baca:	143f      	asrs	r7, r7, #16
 801bacc:	d541      	bpl.n	801bb52 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801bace:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801bad2:	4698      	mov	r8, r3
 801bad4:	9603      	str	r6, [sp, #12]
 801bad6:	f1b8 0f00 	cmp.w	r8, #0
 801bada:	dc59      	bgt.n	801bb90 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801badc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bae0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801bae4:	9b00      	ldr	r3, [sp, #0]
 801bae6:	2b00      	cmp	r3, #0
 801bae8:	dd72      	ble.n	801bbd0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801baea:	ee30 0a04 	vadd.f32	s0, s0, s8
 801baee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801baf0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801baf4:	eeb0 6a62 	vmov.f32	s12, s5
 801baf8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bafc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bb00:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bb04:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801bb08:	eeb0 6a43 	vmov.f32	s12, s6
 801bb0c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bb10:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801bb14:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bb18:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bb1c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bb20:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bb24:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bb28:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bb2c:	ee12 2a90 	vmov	r2, s5
 801bb30:	eef0 2a47 	vmov.f32	s5, s14
 801bb34:	fb92 fef3 	sdiv	lr, r2, r3
 801bb38:	ee13 2a10 	vmov	r2, s6
 801bb3c:	eeb0 3a67 	vmov.f32	s6, s15
 801bb40:	fb92 fcf3 	sdiv	ip, r2, r3
 801bb44:	9b00      	ldr	r3, [sp, #0]
 801bb46:	3b01      	subs	r3, #1
 801bb48:	9300      	str	r3, [sp, #0]
 801bb4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bb4c:	bf08      	it	eq
 801bb4e:	465b      	moveq	r3, fp
 801bb50:	e797      	b.n	801ba82 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801bb52:	454f      	cmp	r7, r9
 801bb54:	dabb      	bge.n	801bace <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801bb56:	fb0c 2606 	mla	r6, ip, r6, r2
 801bb5a:	1436      	asrs	r6, r6, #16
 801bb5c:	d4b7      	bmi.n	801bace <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801bb5e:	4546      	cmp	r6, r8
 801bb60:	dab5      	bge.n	801bace <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801bb62:	461e      	mov	r6, r3
 801bb64:	46a0      	mov	r8, r4
 801bb66:	2e00      	cmp	r6, #0
 801bb68:	ddb8      	ble.n	801badc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801bb6a:	1417      	asrs	r7, r2, #16
 801bb6c:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801bb70:	9901      	ldr	r1, [sp, #4]
 801bb72:	ea4f 4920 	mov.w	r9, r0, asr #16
 801bb76:	4462      	add	r2, ip
 801bb78:	4470      	add	r0, lr
 801bb7a:	fb0a 1707 	mla	r7, sl, r7, r1
 801bb7e:	9902      	ldr	r1, [sp, #8]
 801bb80:	3e01      	subs	r6, #1
 801bb82:	f817 7009 	ldrb.w	r7, [r7, r9]
 801bb86:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801bb8a:	f828 7b02 	strh.w	r7, [r8], #2
 801bb8e:	e7ea      	b.n	801bb66 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801bb90:	ea5f 4920 	movs.w	r9, r0, asr #16
 801bb94:	d417      	bmi.n	801bbc6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801bb96:	68ae      	ldr	r6, [r5, #8]
 801bb98:	454e      	cmp	r6, r9
 801bb9a:	dd14      	ble.n	801bbc6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801bb9c:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801bba0:	d411      	bmi.n	801bbc6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801bba2:	68ef      	ldr	r7, [r5, #12]
 801bba4:	4557      	cmp	r7, sl
 801bba6:	dd0e      	ble.n	801bbc6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801bba8:	9f01      	ldr	r7, [sp, #4]
 801bbaa:	b236      	sxth	r6, r6
 801bbac:	f06f 0101 	mvn.w	r1, #1
 801bbb0:	fb0a 7606 	mla	r6, sl, r6, r7
 801bbb4:	9f02      	ldr	r7, [sp, #8]
 801bbb6:	f816 6009 	ldrb.w	r6, [r6, r9]
 801bbba:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801bbbe:	fb01 f608 	mul.w	r6, r1, r8
 801bbc2:	9903      	ldr	r1, [sp, #12]
 801bbc4:	538f      	strh	r7, [r1, r6]
 801bbc6:	4470      	add	r0, lr
 801bbc8:	4462      	add	r2, ip
 801bbca:	f108 38ff 	add.w	r8, r8, #4294967295
 801bbce:	e782      	b.n	801bad6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801bbd0:	b005      	add	sp, #20
 801bbd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bbd6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bbd6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bbda:	b087      	sub	sp, #28
 801bbdc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801bbde:	9205      	str	r2, [sp, #20]
 801bbe0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801bbe4:	9102      	str	r1, [sp, #8]
 801bbe6:	9203      	str	r2, [sp, #12]
 801bbe8:	6861      	ldr	r1, [r4, #4]
 801bbea:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801bbee:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801bbf2:	fb01 2000 	mla	r0, r1, r0, r2
 801bbf6:	6822      	ldr	r2, [r4, #0]
 801bbf8:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801bbfc:	9200      	str	r2, [sp, #0]
 801bbfe:	f8dc 2000 	ldr.w	r2, [ip]
 801bc02:	9204      	str	r2, [sp, #16]
 801bc04:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801bc08:	3204      	adds	r2, #4
 801bc0a:	9201      	str	r2, [sp, #4]
 801bc0c:	9a03      	ldr	r2, [sp, #12]
 801bc0e:	43d5      	mvns	r5, r2
 801bc10:	b2ed      	uxtb	r5, r5
 801bc12:	9a02      	ldr	r2, [sp, #8]
 801bc14:	2a00      	cmp	r2, #0
 801bc16:	dc03      	bgt.n	801bc20 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801bc18:	9a05      	ldr	r2, [sp, #20]
 801bc1a:	2a00      	cmp	r2, #0
 801bc1c:	f340 812c 	ble.w	801be78 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801bc20:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bc22:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801bc26:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801bc2a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bc2c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801bc30:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bc34:	2b00      	cmp	r3, #0
 801bc36:	dd10      	ble.n	801bc5a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801bc38:	140c      	asrs	r4, r1, #16
 801bc3a:	d405      	bmi.n	801bc48 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bc3c:	4574      	cmp	r4, lr
 801bc3e:	da03      	bge.n	801bc48 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bc40:	1414      	asrs	r4, r2, #16
 801bc42:	d401      	bmi.n	801bc48 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bc44:	42bc      	cmp	r4, r7
 801bc46:	db09      	blt.n	801bc5c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801bc48:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801bc4a:	3b01      	subs	r3, #1
 801bc4c:	9800      	ldr	r0, [sp, #0]
 801bc4e:	4421      	add	r1, r4
 801bc50:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801bc52:	3002      	adds	r0, #2
 801bc54:	4422      	add	r2, r4
 801bc56:	9000      	str	r0, [sp, #0]
 801bc58:	e7ec      	b.n	801bc34 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801bc5a:	d071      	beq.n	801bd40 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801bc5c:	1e5c      	subs	r4, r3, #1
 801bc5e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801bc60:	fb06 1604 	mla	r6, r6, r4, r1
 801bc64:	1436      	asrs	r6, r6, #16
 801bc66:	d45d      	bmi.n	801bd24 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801bc68:	4576      	cmp	r6, lr
 801bc6a:	da5b      	bge.n	801bd24 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801bc6c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801bc6e:	fb06 2404 	mla	r4, r6, r4, r2
 801bc72:	1424      	asrs	r4, r4, #16
 801bc74:	d456      	bmi.n	801bd24 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801bc76:	42bc      	cmp	r4, r7
 801bc78:	da54      	bge.n	801bd24 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801bc7a:	4698      	mov	r8, r3
 801bc7c:	f8dd 9000 	ldr.w	r9, [sp]
 801bc80:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801bc84:	f1b8 0f00 	cmp.w	r8, #0
 801bc88:	dd54      	ble.n	801bd34 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801bc8a:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801bc8e:	1414      	asrs	r4, r2, #16
 801bc90:	9804      	ldr	r0, [sp, #16]
 801bc92:	140e      	asrs	r6, r1, #16
 801bc94:	f108 38ff 	add.w	r8, r8, #4294967295
 801bc98:	fb07 0404 	mla	r4, r7, r4, r0
 801bc9c:	9801      	ldr	r0, [sp, #4]
 801bc9e:	f814 e006 	ldrb.w	lr, [r4, r6]
 801bca2:	f8b9 4000 	ldrh.w	r4, [r9]
 801bca6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801bcaa:	1227      	asrs	r7, r4, #8
 801bcac:	eb00 0b0e 	add.w	fp, r0, lr
 801bcb0:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801bcb4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801bcb8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801bcba:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801bcbe:	f89b b001 	ldrb.w	fp, [fp, #1]
 801bcc2:	4401      	add	r1, r0
 801bcc4:	fb16 f60a 	smulbb	r6, r6, sl
 801bcc8:	9814      	ldr	r0, [sp, #80]	; 0x50
 801bcca:	fb1b fb0a 	smulbb	fp, fp, sl
 801bcce:	fb07 6705 	mla	r7, r7, r5, r6
 801bcd2:	10e6      	asrs	r6, r4, #3
 801bcd4:	00e4      	lsls	r4, r4, #3
 801bcd6:	4402      	add	r2, r0
 801bcd8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801bcdc:	b2bf      	uxth	r7, r7
 801bcde:	b2e4      	uxtb	r4, r4
 801bce0:	fb06 b605 	mla	r6, r6, r5, fp
 801bce4:	fb14 f405 	smulbb	r4, r4, r5
 801bce8:	b2b6      	uxth	r6, r6
 801bcea:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801bcee:	1c7c      	adds	r4, r7, #1
 801bcf0:	f106 0b01 	add.w	fp, r6, #1
 801bcf4:	fa1f fe8e 	uxth.w	lr, lr
 801bcf8:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801bcfc:	f10e 0401 	add.w	r4, lr, #1
 801bd00:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801bd04:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801bd08:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801bd0c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801bd10:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801bd14:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801bd18:	4327      	orrs	r7, r4
 801bd1a:	ea47 070b 	orr.w	r7, r7, fp
 801bd1e:	f829 7b02 	strh.w	r7, [r9], #2
 801bd22:	e7af      	b.n	801bc84 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801bd24:	f04f 0e00 	mov.w	lr, #0
 801bd28:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801bd2c:	eb03 040e 	add.w	r4, r3, lr
 801bd30:	2c00      	cmp	r4, #0
 801bd32:	dc43      	bgt.n	801bdbc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801bd34:	9a00      	ldr	r2, [sp, #0]
 801bd36:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bd3a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801bd3e:	9300      	str	r3, [sp, #0]
 801bd40:	9b02      	ldr	r3, [sp, #8]
 801bd42:	2b00      	cmp	r3, #0
 801bd44:	f340 8098 	ble.w	801be78 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801bd48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bd4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bd4e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bd52:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bd56:	eef0 6a62 	vmov.f32	s13, s5
 801bd5a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801bd5e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bd62:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bd66:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801bd6a:	eef0 6a43 	vmov.f32	s13, s6
 801bd6e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bd72:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801bd76:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bd7a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bd7e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bd82:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bd86:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bd8a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bd8e:	ee12 2a90 	vmov	r2, s5
 801bd92:	eef0 2a47 	vmov.f32	s5, s14
 801bd96:	fb92 f3f3 	sdiv	r3, r2, r3
 801bd9a:	ee13 2a10 	vmov	r2, s6
 801bd9e:	9313      	str	r3, [sp, #76]	; 0x4c
 801bda0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bda2:	eeb0 3a67 	vmov.f32	s6, s15
 801bda6:	fb92 f3f3 	sdiv	r3, r2, r3
 801bdaa:	9314      	str	r3, [sp, #80]	; 0x50
 801bdac:	9b02      	ldr	r3, [sp, #8]
 801bdae:	9a05      	ldr	r2, [sp, #20]
 801bdb0:	3b01      	subs	r3, #1
 801bdb2:	9302      	str	r3, [sp, #8]
 801bdb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bdb6:	bf08      	it	eq
 801bdb8:	4613      	moveq	r3, r2
 801bdba:	e72a      	b.n	801bc12 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801bdbc:	140f      	asrs	r7, r1, #16
 801bdbe:	d454      	bmi.n	801be6a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801bdc0:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801bdc4:	42be      	cmp	r6, r7
 801bdc6:	dd50      	ble.n	801be6a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801bdc8:	ea5f 4822 	movs.w	r8, r2, asr #16
 801bdcc:	d44d      	bmi.n	801be6a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801bdce:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801bdd2:	4544      	cmp	r4, r8
 801bdd4:	dd49      	ble.n	801be6a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801bdd6:	9c04      	ldr	r4, [sp, #16]
 801bdd8:	b236      	sxth	r6, r6
 801bdda:	f06f 0001 	mvn.w	r0, #1
 801bdde:	fb08 4606 	mla	r6, r8, r6, r4
 801bde2:	9c01      	ldr	r4, [sp, #4]
 801bde4:	fb00 fa0e 	mul.w	sl, r0, lr
 801bde8:	9800      	ldr	r0, [sp, #0]
 801bdea:	f816 8007 	ldrb.w	r8, [r6, r7]
 801bdee:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801bdf2:	eb04 0b08 	add.w	fp, r4, r8
 801bdf6:	f830 400a 	ldrh.w	r4, [r0, sl]
 801bdfa:	9801      	ldr	r0, [sp, #4]
 801bdfc:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801be00:	1227      	asrs	r7, r4, #8
 801be02:	f89b b001 	ldrb.w	fp, [fp, #1]
 801be06:	fb16 f609 	smulbb	r6, r6, r9
 801be0a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801be0e:	f810 8008 	ldrb.w	r8, [r0, r8]
 801be12:	fb1b fb09 	smulbb	fp, fp, r9
 801be16:	fb07 6705 	mla	r7, r7, r5, r6
 801be1a:	10e6      	asrs	r6, r4, #3
 801be1c:	00e4      	lsls	r4, r4, #3
 801be1e:	9800      	ldr	r0, [sp, #0]
 801be20:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801be24:	b2bf      	uxth	r7, r7
 801be26:	b2e4      	uxtb	r4, r4
 801be28:	fb06 b605 	mla	r6, r6, r5, fp
 801be2c:	fb14 f405 	smulbb	r4, r4, r5
 801be30:	b2b6      	uxth	r6, r6
 801be32:	fb08 4809 	mla	r8, r8, r9, r4
 801be36:	1c7c      	adds	r4, r7, #1
 801be38:	f106 0b01 	add.w	fp, r6, #1
 801be3c:	fa1f f888 	uxth.w	r8, r8
 801be40:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801be44:	f108 0401 	add.w	r4, r8, #1
 801be48:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801be4c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801be50:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801be54:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801be58:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801be5c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801be60:	4327      	orrs	r7, r4
 801be62:	ea47 070b 	orr.w	r7, r7, fp
 801be66:	f820 700a 	strh.w	r7, [r0, sl]
 801be6a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801be6c:	f10e 3eff 	add.w	lr, lr, #4294967295
 801be70:	4401      	add	r1, r0
 801be72:	9814      	ldr	r0, [sp, #80]	; 0x50
 801be74:	4402      	add	r2, r0
 801be76:	e759      	b.n	801bd2c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801be78:	b007      	add	sp, #28
 801be7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801be80 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801be80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be84:	b085      	sub	sp, #20
 801be86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801be8a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801be8c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801be8e:	9203      	str	r2, [sp, #12]
 801be90:	6870      	ldr	r0, [r6, #4]
 801be92:	686f      	ldr	r7, [r5, #4]
 801be94:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801be98:	3704      	adds	r7, #4
 801be9a:	9101      	str	r1, [sp, #4]
 801be9c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801bea0:	fb00 2404 	mla	r4, r0, r4, r2
 801bea4:	6832      	ldr	r2, [r6, #0]
 801bea6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801beaa:	682a      	ldr	r2, [r5, #0]
 801beac:	9202      	str	r2, [sp, #8]
 801beae:	9a01      	ldr	r2, [sp, #4]
 801beb0:	2a00      	cmp	r2, #0
 801beb2:	dc03      	bgt.n	801bebc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801beb4:	9a03      	ldr	r2, [sp, #12]
 801beb6:	2a00      	cmp	r2, #0
 801beb8:	f340 80cc 	ble.w	801c054 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801bebc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bebe:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801bec2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bec6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bec8:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801becc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bed0:	2b00      	cmp	r3, #0
 801bed2:	dd0d      	ble.n	801bef0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801bed4:	1406      	asrs	r6, r0, #16
 801bed6:	d405      	bmi.n	801bee4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801bed8:	454e      	cmp	r6, r9
 801beda:	da03      	bge.n	801bee4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801bedc:	1416      	asrs	r6, r2, #16
 801bede:	d401      	bmi.n	801bee4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801bee0:	4546      	cmp	r6, r8
 801bee2:	db06      	blt.n	801bef2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bee4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801bee6:	4460      	add	r0, ip
 801bee8:	3b01      	subs	r3, #1
 801beea:	3402      	adds	r4, #2
 801beec:	4432      	add	r2, r6
 801beee:	e7ef      	b.n	801bed0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801bef0:	d00f      	beq.n	801bf12 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801bef2:	1e5e      	subs	r6, r3, #1
 801bef4:	fb0c 0e06 	mla	lr, ip, r6, r0
 801bef8:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801befc:	d543      	bpl.n	801bf86 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801befe:	4698      	mov	r8, r3
 801bf00:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801bf04:	f1b8 0f00 	cmp.w	r8, #0
 801bf08:	dc71      	bgt.n	801bfee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801bf0a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bf0e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801bf12:	9b01      	ldr	r3, [sp, #4]
 801bf14:	2b00      	cmp	r3, #0
 801bf16:	f340 809d 	ble.w	801c054 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801bf1a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bf1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bf20:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bf24:	eeb0 6a62 	vmov.f32	s12, s5
 801bf28:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bf2c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bf30:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bf34:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801bf38:	eeb0 6a43 	vmov.f32	s12, s6
 801bf3c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bf40:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801bf44:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bf48:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bf4c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bf50:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bf54:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bf58:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bf5c:	ee12 2a90 	vmov	r2, s5
 801bf60:	eef0 2a47 	vmov.f32	s5, s14
 801bf64:	fb92 fcf3 	sdiv	ip, r2, r3
 801bf68:	ee13 2a10 	vmov	r2, s6
 801bf6c:	eeb0 3a67 	vmov.f32	s6, s15
 801bf70:	fb92 f3f3 	sdiv	r3, r2, r3
 801bf74:	9312      	str	r3, [sp, #72]	; 0x48
 801bf76:	9b01      	ldr	r3, [sp, #4]
 801bf78:	9a03      	ldr	r2, [sp, #12]
 801bf7a:	3b01      	subs	r3, #1
 801bf7c:	9301      	str	r3, [sp, #4]
 801bf7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bf80:	bf08      	it	eq
 801bf82:	4613      	moveq	r3, r2
 801bf84:	e793      	b.n	801beae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801bf86:	45ce      	cmp	lr, r9
 801bf88:	dab9      	bge.n	801befe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801bf8a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801bf8c:	fb01 2606 	mla	r6, r1, r6, r2
 801bf90:	1436      	asrs	r6, r6, #16
 801bf92:	d4b4      	bmi.n	801befe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801bf94:	4546      	cmp	r6, r8
 801bf96:	dab2      	bge.n	801befe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801bf98:	4698      	mov	r8, r3
 801bf9a:	46a2      	mov	sl, r4
 801bf9c:	f1b8 0f00 	cmp.w	r8, #0
 801bfa0:	ddb3      	ble.n	801bf0a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801bfa2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801bfa6:	1416      	asrs	r6, r2, #16
 801bfa8:	9902      	ldr	r1, [sp, #8]
 801bfaa:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801bfae:	f108 38ff 	add.w	r8, r8, #4294967295
 801bfb2:	4460      	add	r0, ip
 801bfb4:	fb09 1606 	mla	r6, r9, r6, r1
 801bfb8:	4928      	ldr	r1, [pc, #160]	; (801c05c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801bfba:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801bfbe:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801bfc2:	eb07 0b0e 	add.w	fp, r7, lr
 801bfc6:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801bfca:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801bfce:	00f6      	lsls	r6, r6, #3
 801bfd0:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801bfd4:	9912      	ldr	r1, [sp, #72]	; 0x48
 801bfd6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801bfda:	440a      	add	r2, r1
 801bfdc:	ea49 0606 	orr.w	r6, r9, r6
 801bfe0:	f817 900e 	ldrb.w	r9, [r7, lr]
 801bfe4:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801bfe8:	f82a 6b02 	strh.w	r6, [sl], #2
 801bfec:	e7d6      	b.n	801bf9c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801bfee:	ea5f 4920 	movs.w	r9, r0, asr #16
 801bff2:	d429      	bmi.n	801c048 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801bff4:	68ae      	ldr	r6, [r5, #8]
 801bff6:	454e      	cmp	r6, r9
 801bff8:	dd26      	ble.n	801c048 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801bffa:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801bffe:	d423      	bmi.n	801c048 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801c000:	68e9      	ldr	r1, [r5, #12]
 801c002:	4559      	cmp	r1, fp
 801c004:	dd20      	ble.n	801c048 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801c006:	fa0f fe86 	sxth.w	lr, r6
 801c00a:	9902      	ldr	r1, [sp, #8]
 801c00c:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801c010:	f06f 0101 	mvn.w	r1, #1
 801c014:	f81e e009 	ldrb.w	lr, [lr, r9]
 801c018:	fb01 f908 	mul.w	r9, r1, r8
 801c01c:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801c020:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801c024:	eb07 060e 	add.w	r6, r7, lr
 801c028:	f896 b002 	ldrb.w	fp, [r6, #2]
 801c02c:	7876      	ldrb	r6, [r6, #1]
 801c02e:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801c032:	00f6      	lsls	r6, r6, #3
 801c034:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801c038:	ea4b 0606 	orr.w	r6, fp, r6
 801c03c:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801c040:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801c044:	f82a 6009 	strh.w	r6, [sl, r9]
 801c048:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c04a:	4460      	add	r0, ip
 801c04c:	f108 38ff 	add.w	r8, r8, #4294967295
 801c050:	440a      	add	r2, r1
 801c052:	e757      	b.n	801bf04 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c054:	b005      	add	sp, #20
 801c056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c05a:	bf00      	nop
 801c05c:	fffff800 	.word	0xfffff800

0801c060 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c064:	b087      	sub	sp, #28
 801c066:	468b      	mov	fp, r1
 801c068:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c06c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801c06e:	9204      	str	r2, [sp, #16]
 801c070:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801c074:	6841      	ldr	r1, [r0, #4]
 801c076:	9205      	str	r2, [sp, #20]
 801c078:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801c07c:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801c080:	fb01 2404 	mla	r4, r1, r4, r2
 801c084:	6802      	ldr	r2, [r0, #0]
 801c086:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c08a:	f8dc 2000 	ldr.w	r2, [ip]
 801c08e:	9201      	str	r2, [sp, #4]
 801c090:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801c094:	3204      	adds	r2, #4
 801c096:	9202      	str	r2, [sp, #8]
 801c098:	f1bb 0f00 	cmp.w	fp, #0
 801c09c:	dc03      	bgt.n	801c0a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801c09e:	9a04      	ldr	r2, [sp, #16]
 801c0a0:	2a00      	cmp	r2, #0
 801c0a2:	f340 8138 	ble.w	801c316 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801c0a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c0a8:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801c0ac:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c0b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c0b2:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801c0b6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801c0ba:	2b00      	cmp	r3, #0
 801c0bc:	dd0e      	ble.n	801c0dc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c0be:	1402      	asrs	r2, r0, #16
 801c0c0:	d405      	bmi.n	801c0ce <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c0c2:	42ba      	cmp	r2, r7
 801c0c4:	da03      	bge.n	801c0ce <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c0c6:	140a      	asrs	r2, r1, #16
 801c0c8:	d401      	bmi.n	801c0ce <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c0ca:	42b2      	cmp	r2, r6
 801c0cc:	db07      	blt.n	801c0de <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c0ce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c0d0:	3b01      	subs	r3, #1
 801c0d2:	3402      	adds	r4, #2
 801c0d4:	4410      	add	r0, r2
 801c0d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c0d8:	4411      	add	r1, r2
 801c0da:	e7ee      	b.n	801c0ba <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801c0dc:	d019      	beq.n	801c112 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801c0de:	1e5a      	subs	r2, r3, #1
 801c0e0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801c0e2:	fb05 0502 	mla	r5, r5, r2, r0
 801c0e6:	142d      	asrs	r5, r5, #16
 801c0e8:	d409      	bmi.n	801c0fe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c0ea:	42bd      	cmp	r5, r7
 801c0ec:	da07      	bge.n	801c0fe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c0ee:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801c0f0:	fb05 1202 	mla	r2, r5, r2, r1
 801c0f4:	1412      	asrs	r2, r2, #16
 801c0f6:	d402      	bmi.n	801c0fe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c0f8:	42b2      	cmp	r2, r6
 801c0fa:	f2c0 80ac 	blt.w	801c256 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801c0fe:	f04f 0e00 	mov.w	lr, #0
 801c102:	eb03 020e 	add.w	r2, r3, lr
 801c106:	2a00      	cmp	r2, #0
 801c108:	dc3e      	bgt.n	801c188 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801c10a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c10e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c112:	f1bb 0f00 	cmp.w	fp, #0
 801c116:	f340 80fe 	ble.w	801c316 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801c11a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c11e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c120:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c124:	f1bb 0b01 	subs.w	fp, fp, #1
 801c128:	eeb0 6a62 	vmov.f32	s12, s5
 801c12c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c130:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c134:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c138:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801c13c:	eeb0 6a43 	vmov.f32	s12, s6
 801c140:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c144:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801c148:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c14c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c150:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c154:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c158:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c15c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c160:	ee12 2a90 	vmov	r2, s5
 801c164:	eef0 2a47 	vmov.f32	s5, s14
 801c168:	fb92 f3f3 	sdiv	r3, r2, r3
 801c16c:	ee13 2a10 	vmov	r2, s6
 801c170:	9313      	str	r3, [sp, #76]	; 0x4c
 801c172:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c174:	eeb0 3a67 	vmov.f32	s6, s15
 801c178:	fb92 f3f3 	sdiv	r3, r2, r3
 801c17c:	9a04      	ldr	r2, [sp, #16]
 801c17e:	9314      	str	r3, [sp, #80]	; 0x50
 801c180:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c182:	bf08      	it	eq
 801c184:	4613      	moveq	r3, r2
 801c186:	e787      	b.n	801c098 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801c188:	1406      	asrs	r6, r0, #16
 801c18a:	d45d      	bmi.n	801c248 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801c18c:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801c190:	42b5      	cmp	r5, r6
 801c192:	dd59      	ble.n	801c248 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801c194:	140f      	asrs	r7, r1, #16
 801c196:	d457      	bmi.n	801c248 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801c198:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801c19c:	42ba      	cmp	r2, r7
 801c19e:	dd53      	ble.n	801c248 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801c1a0:	9a01      	ldr	r2, [sp, #4]
 801c1a2:	b22d      	sxth	r5, r5
 801c1a4:	fb07 2505 	mla	r5, r7, r5, r2
 801c1a8:	5daa      	ldrb	r2, [r5, r6]
 801c1aa:	9d02      	ldr	r5, [sp, #8]
 801c1ac:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801c1b0:	0e2e      	lsrs	r6, r5, #24
 801c1b2:	d049      	beq.n	801c248 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801c1b4:	f06f 0201 	mvn.w	r2, #1
 801c1b8:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801c1bc:	fb02 f20e 	mul.w	r2, r2, lr
 801c1c0:	f834 8002 	ldrh.w	r8, [r4, r2]
 801c1c4:	9203      	str	r2, [sp, #12]
 801c1c6:	9a05      	ldr	r2, [sp, #20]
 801c1c8:	ea4f 2728 	mov.w	r7, r8, asr #8
 801c1cc:	4356      	muls	r6, r2
 801c1ce:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c1d2:	1c72      	adds	r2, r6, #1
 801c1d4:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801c1d8:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801c1dc:	b2ed      	uxtb	r5, r5
 801c1de:	1212      	asrs	r2, r2, #8
 801c1e0:	fa1f f982 	uxth.w	r9, r2
 801c1e4:	43d2      	mvns	r2, r2
 801c1e6:	fb16 f609 	smulbb	r6, r6, r9
 801c1ea:	b2d2      	uxtb	r2, r2
 801c1ec:	fb15 f509 	smulbb	r5, r5, r9
 801c1f0:	fb07 6702 	mla	r7, r7, r2, r6
 801c1f4:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801c1f8:	fb1a fa09 	smulbb	sl, sl, r9
 801c1fc:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801c200:	b2bf      	uxth	r7, r7
 801c202:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c206:	fa5f f888 	uxtb.w	r8, r8
 801c20a:	fb06 a602 	mla	r6, r6, r2, sl
 801c20e:	fb08 5502 	mla	r5, r8, r2, r5
 801c212:	1c7a      	adds	r2, r7, #1
 801c214:	b2b6      	uxth	r6, r6
 801c216:	b2ad      	uxth	r5, r5
 801c218:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801c21c:	9a03      	ldr	r2, [sp, #12]
 801c21e:	f105 0a01 	add.w	sl, r5, #1
 801c222:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801c226:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801c22a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c22e:	ea4a 0707 	orr.w	r7, sl, r7
 801c232:	f106 0a01 	add.w	sl, r6, #1
 801c236:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801c23a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c23e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c242:	ea47 070a 	orr.w	r7, r7, sl
 801c246:	52a7      	strh	r7, [r4, r2]
 801c248:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c24a:	f10e 3eff 	add.w	lr, lr, #4294967295
 801c24e:	4410      	add	r0, r2
 801c250:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c252:	4411      	add	r1, r2
 801c254:	e755      	b.n	801c102 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801c256:	f04f 0800 	mov.w	r8, #0
 801c25a:	eba3 0208 	sub.w	r2, r3, r8
 801c25e:	2a00      	cmp	r2, #0
 801c260:	f77f af53 	ble.w	801c10a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801c264:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801c268:	140a      	asrs	r2, r1, #16
 801c26a:	9f01      	ldr	r7, [sp, #4]
 801c26c:	1405      	asrs	r5, r0, #16
 801c26e:	fb06 7202 	mla	r2, r6, r2, r7
 801c272:	5d52      	ldrb	r2, [r2, r5]
 801c274:	9d02      	ldr	r5, [sp, #8]
 801c276:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801c27a:	0e2e      	lsrs	r6, r5, #24
 801c27c:	d044      	beq.n	801c308 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801c27e:	9a05      	ldr	r2, [sp, #20]
 801c280:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801c284:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801c288:	4356      	muls	r6, r2
 801c28a:	ea4f 272e 	mov.w	r7, lr, asr #8
 801c28e:	1c72      	adds	r2, r6, #1
 801c290:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c294:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801c298:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801c29c:	b2ed      	uxtb	r5, r5
 801c29e:	1212      	asrs	r2, r2, #8
 801c2a0:	fa1f f982 	uxth.w	r9, r2
 801c2a4:	43d2      	mvns	r2, r2
 801c2a6:	fb16 f609 	smulbb	r6, r6, r9
 801c2aa:	b2d2      	uxtb	r2, r2
 801c2ac:	fb15 f509 	smulbb	r5, r5, r9
 801c2b0:	fb07 6702 	mla	r7, r7, r2, r6
 801c2b4:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801c2b8:	fb1a fa09 	smulbb	sl, sl, r9
 801c2bc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801c2c0:	b2bf      	uxth	r7, r7
 801c2c2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c2c6:	fa5f fe8e 	uxtb.w	lr, lr
 801c2ca:	fb06 a602 	mla	r6, r6, r2, sl
 801c2ce:	fb0e 5502 	mla	r5, lr, r2, r5
 801c2d2:	1c7a      	adds	r2, r7, #1
 801c2d4:	b2b6      	uxth	r6, r6
 801c2d6:	b2ad      	uxth	r5, r5
 801c2d8:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801c2dc:	f105 0a01 	add.w	sl, r5, #1
 801c2e0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801c2e4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801c2e8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c2ec:	ea4a 0707 	orr.w	r7, sl, r7
 801c2f0:	f106 0a01 	add.w	sl, r6, #1
 801c2f4:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801c2f8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c2fc:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c300:	ea47 070a 	orr.w	r7, r7, sl
 801c304:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801c308:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c30a:	f108 0801 	add.w	r8, r8, #1
 801c30e:	4410      	add	r0, r2
 801c310:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c312:	4411      	add	r1, r2
 801c314:	e7a1      	b.n	801c25a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801c316:	b007      	add	sp, #28
 801c318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c31c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c320:	b085      	sub	sp, #20
 801c322:	468b      	mov	fp, r1
 801c324:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c328:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801c32a:	9203      	str	r2, [sp, #12]
 801c32c:	6841      	ldr	r1, [r0, #4]
 801c32e:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801c332:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801c336:	fb01 2404 	mla	r4, r1, r4, r2
 801c33a:	6802      	ldr	r2, [r0, #0]
 801c33c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c340:	f8de 2000 	ldr.w	r2, [lr]
 801c344:	9200      	str	r2, [sp, #0]
 801c346:	f8de 2004 	ldr.w	r2, [lr, #4]
 801c34a:	3204      	adds	r2, #4
 801c34c:	9201      	str	r2, [sp, #4]
 801c34e:	f1bb 0f00 	cmp.w	fp, #0
 801c352:	dc03      	bgt.n	801c35c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801c354:	9a03      	ldr	r2, [sp, #12]
 801c356:	2a00      	cmp	r2, #0
 801c358:	f340 8153 	ble.w	801c602 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801c35c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c35e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801c362:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801c366:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c368:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801c36c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c370:	2b00      	cmp	r3, #0
 801c372:	dd0e      	ble.n	801c392 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c374:	1408      	asrs	r0, r1, #16
 801c376:	d405      	bmi.n	801c384 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c378:	42b8      	cmp	r0, r7
 801c37a:	da03      	bge.n	801c384 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c37c:	1410      	asrs	r0, r2, #16
 801c37e:	d401      	bmi.n	801c384 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c380:	42b0      	cmp	r0, r6
 801c382:	db07      	blt.n	801c394 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c384:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c386:	3b01      	subs	r3, #1
 801c388:	3402      	adds	r4, #2
 801c38a:	4401      	add	r1, r0
 801c38c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c38e:	4402      	add	r2, r0
 801c390:	e7ee      	b.n	801c370 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801c392:	d017      	beq.n	801c3c4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801c394:	1e58      	subs	r0, r3, #1
 801c396:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c398:	fb05 1500 	mla	r5, r5, r0, r1
 801c39c:	142d      	asrs	r5, r5, #16
 801c39e:	d409      	bmi.n	801c3b4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801c3a0:	42bd      	cmp	r5, r7
 801c3a2:	da07      	bge.n	801c3b4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801c3a4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801c3a6:	fb05 2000 	mla	r0, r5, r0, r2
 801c3aa:	1400      	asrs	r0, r0, #16
 801c3ac:	d402      	bmi.n	801c3b4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801c3ae:	42b0      	cmp	r0, r6
 801c3b0:	f2c0 80bc 	blt.w	801c52c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801c3b4:	2600      	movs	r6, #0
 801c3b6:	1998      	adds	r0, r3, r6
 801c3b8:	2800      	cmp	r0, #0
 801c3ba:	dc3e      	bgt.n	801c43a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801c3bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c3c0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c3c4:	f1bb 0f00 	cmp.w	fp, #0
 801c3c8:	f340 811b 	ble.w	801c602 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801c3cc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c3d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c3d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c3d6:	f1bb 0b01 	subs.w	fp, fp, #1
 801c3da:	eeb0 6a62 	vmov.f32	s12, s5
 801c3de:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c3e2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c3e6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c3ea:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c3ee:	eeb0 6a43 	vmov.f32	s12, s6
 801c3f2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c3f6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c3fa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c3fe:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c402:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c406:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c40a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c40e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c412:	ee12 2a90 	vmov	r2, s5
 801c416:	eef0 2a47 	vmov.f32	s5, s14
 801c41a:	fb92 f3f3 	sdiv	r3, r2, r3
 801c41e:	ee13 2a10 	vmov	r2, s6
 801c422:	9311      	str	r3, [sp, #68]	; 0x44
 801c424:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c426:	eeb0 3a67 	vmov.f32	s6, s15
 801c42a:	fb92 f3f3 	sdiv	r3, r2, r3
 801c42e:	9a03      	ldr	r2, [sp, #12]
 801c430:	9312      	str	r3, [sp, #72]	; 0x48
 801c432:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c434:	bf08      	it	eq
 801c436:	4613      	moveq	r3, r2
 801c438:	e789      	b.n	801c34e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801c43a:	140f      	asrs	r7, r1, #16
 801c43c:	d426      	bmi.n	801c48c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801c43e:	f8de 5008 	ldr.w	r5, [lr, #8]
 801c442:	42bd      	cmp	r5, r7
 801c444:	dd22      	ble.n	801c48c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801c446:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801c44a:	d41f      	bmi.n	801c48c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801c44c:	f8de 000c 	ldr.w	r0, [lr, #12]
 801c450:	4560      	cmp	r0, ip
 801c452:	dd1b      	ble.n	801c48c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801c454:	9800      	ldr	r0, [sp, #0]
 801c456:	b22d      	sxth	r5, r5
 801c458:	fb0c 0505 	mla	r5, ip, r5, r0
 801c45c:	5de8      	ldrb	r0, [r5, r7]
 801c45e:	9d01      	ldr	r5, [sp, #4]
 801c460:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801c464:	0e07      	lsrs	r7, r0, #24
 801c466:	2fff      	cmp	r7, #255	; 0xff
 801c468:	d116      	bne.n	801c498 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801c46a:	f06f 0501 	mvn.w	r5, #1
 801c46e:	fb05 f706 	mul.w	r7, r5, r6
 801c472:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801c476:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801c47a:	0945      	lsrs	r5, r0, #5
 801c47c:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801c480:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801c484:	ea4c 0505 	orr.w	r5, ip, r5
 801c488:	4305      	orrs	r5, r0
 801c48a:	53e5      	strh	r5, [r4, r7]
 801c48c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c48e:	3e01      	subs	r6, #1
 801c490:	4401      	add	r1, r0
 801c492:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c494:	4402      	add	r2, r0
 801c496:	e78e      	b.n	801c3b6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801c498:	b2fd      	uxtb	r5, r7
 801c49a:	2f00      	cmp	r7, #0
 801c49c:	d0f6      	beq.n	801c48c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801c49e:	f06f 0701 	mvn.w	r7, #1
 801c4a2:	fa1f f985 	uxth.w	r9, r5
 801c4a6:	43ed      	mvns	r5, r5
 801c4a8:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801c4ac:	4377      	muls	r7, r6
 801c4ae:	fb1a fa09 	smulbb	sl, sl, r9
 801c4b2:	b2ed      	uxtb	r5, r5
 801c4b4:	f834 8007 	ldrh.w	r8, [r4, r7]
 801c4b8:	9702      	str	r7, [sp, #8]
 801c4ba:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801c4be:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801c4c2:	fb17 f709 	smulbb	r7, r7, r9
 801c4c6:	b2c0      	uxtb	r0, r0
 801c4c8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c4cc:	fb10 f009 	smulbb	r0, r0, r9
 801c4d0:	fb0c 7c05 	mla	ip, ip, r5, r7
 801c4d4:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801c4d8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801c4dc:	fa1f fc8c 	uxth.w	ip, ip
 801c4e0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801c4e4:	fa5f f888 	uxtb.w	r8, r8
 801c4e8:	fb07 a705 	mla	r7, r7, r5, sl
 801c4ec:	fb08 0005 	mla	r0, r8, r5, r0
 801c4f0:	f10c 0501 	add.w	r5, ip, #1
 801c4f4:	b2bf      	uxth	r7, r7
 801c4f6:	b280      	uxth	r0, r0
 801c4f8:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801c4fc:	f100 0a01 	add.w	sl, r0, #1
 801c500:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801c504:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801c508:	9802      	ldr	r0, [sp, #8]
 801c50a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c50e:	ea4a 0c0c 	orr.w	ip, sl, ip
 801c512:	f107 0a01 	add.w	sl, r7, #1
 801c516:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801c51a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c51e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c522:	ea4c 0c0a 	orr.w	ip, ip, sl
 801c526:	f824 c000 	strh.w	ip, [r4, r0]
 801c52a:	e7af      	b.n	801c48c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801c52c:	f04f 0800 	mov.w	r8, #0
 801c530:	eba3 0008 	sub.w	r0, r3, r8
 801c534:	2800      	cmp	r0, #0
 801c536:	f77f af41 	ble.w	801c3bc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801c53a:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801c53e:	1410      	asrs	r0, r2, #16
 801c540:	9f00      	ldr	r7, [sp, #0]
 801c542:	140d      	asrs	r5, r1, #16
 801c544:	fb06 7000 	mla	r0, r6, r0, r7
 801c548:	5d40      	ldrb	r0, [r0, r5]
 801c54a:	9d01      	ldr	r5, [sp, #4]
 801c54c:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801c550:	0e2e      	lsrs	r6, r5, #24
 801c552:	2eff      	cmp	r6, #255	; 0xff
 801c554:	d112      	bne.n	801c57c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801c556:	482c      	ldr	r0, [pc, #176]	; (801c608 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801c558:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801c55c:	0968      	lsrs	r0, r5, #5
 801c55e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801c562:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801c566:	4330      	orrs	r0, r6
 801c568:	4328      	orrs	r0, r5
 801c56a:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801c56e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c570:	f108 0801 	add.w	r8, r8, #1
 801c574:	4401      	add	r1, r0
 801c576:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c578:	4402      	add	r2, r0
 801c57a:	e7d9      	b.n	801c530 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801c57c:	b2f0      	uxtb	r0, r6
 801c57e:	2e00      	cmp	r6, #0
 801c580:	d0f5      	beq.n	801c56e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801c582:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801c586:	fa1f f980 	uxth.w	r9, r0
 801c58a:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801c58e:	43c0      	mvns	r0, r0
 801c590:	ea4f 272c 	mov.w	r7, ip, asr #8
 801c594:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801c598:	fb16 f609 	smulbb	r6, r6, r9
 801c59c:	b2c0      	uxtb	r0, r0
 801c59e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c5a2:	b2ed      	uxtb	r5, r5
 801c5a4:	fb1a fa09 	smulbb	sl, sl, r9
 801c5a8:	fb07 6700 	mla	r7, r7, r0, r6
 801c5ac:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801c5b0:	fb15 f509 	smulbb	r5, r5, r9
 801c5b4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801c5b8:	b2bf      	uxth	r7, r7
 801c5ba:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c5be:	fa5f fc8c 	uxtb.w	ip, ip
 801c5c2:	fb06 a600 	mla	r6, r6, r0, sl
 801c5c6:	fb0c 5500 	mla	r5, ip, r0, r5
 801c5ca:	1c78      	adds	r0, r7, #1
 801c5cc:	b2b6      	uxth	r6, r6
 801c5ce:	b2ad      	uxth	r5, r5
 801c5d0:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801c5d4:	f105 0a01 	add.w	sl, r5, #1
 801c5d8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801c5dc:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801c5e0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c5e4:	ea4a 0707 	orr.w	r7, sl, r7
 801c5e8:	f106 0a01 	add.w	sl, r6, #1
 801c5ec:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801c5f0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c5f4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c5f8:	ea47 070a 	orr.w	r7, r7, sl
 801c5fc:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801c600:	e7b5      	b.n	801c56e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801c602:	b005      	add	sp, #20
 801c604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c608:	fffff800 	.word	0xfffff800

0801c60c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c610:	b087      	sub	sp, #28
 801c612:	468b      	mov	fp, r1
 801c614:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c618:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c61a:	9204      	str	r2, [sp, #16]
 801c61c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801c620:	6861      	ldr	r1, [r4, #4]
 801c622:	9205      	str	r2, [sp, #20]
 801c624:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801c628:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801c62c:	fb01 2000 	mla	r0, r1, r0, r2
 801c630:	6822      	ldr	r2, [r4, #0]
 801c632:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801c636:	f8de 2000 	ldr.w	r2, [lr]
 801c63a:	9201      	str	r2, [sp, #4]
 801c63c:	f8de 2004 	ldr.w	r2, [lr, #4]
 801c640:	9202      	str	r2, [sp, #8]
 801c642:	f1bb 0f00 	cmp.w	fp, #0
 801c646:	dc03      	bgt.n	801c650 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801c648:	9a04      	ldr	r2, [sp, #16]
 801c64a:	2a00      	cmp	r2, #0
 801c64c:	f340 8142 	ble.w	801c8d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801c650:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c652:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801c656:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801c65a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c65c:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801c660:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c664:	2b00      	cmp	r3, #0
 801c666:	dd0e      	ble.n	801c686 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c668:	140c      	asrs	r4, r1, #16
 801c66a:	d405      	bmi.n	801c678 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801c66c:	42bc      	cmp	r4, r7
 801c66e:	da03      	bge.n	801c678 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801c670:	1414      	asrs	r4, r2, #16
 801c672:	d401      	bmi.n	801c678 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801c674:	42b4      	cmp	r4, r6
 801c676:	db07      	blt.n	801c688 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c678:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c67a:	3b01      	subs	r3, #1
 801c67c:	3002      	adds	r0, #2
 801c67e:	4421      	add	r1, r4
 801c680:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c682:	4422      	add	r2, r4
 801c684:	e7ee      	b.n	801c664 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801c686:	d019      	beq.n	801c6bc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801c688:	1e5c      	subs	r4, r3, #1
 801c68a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801c68c:	fb05 1504 	mla	r5, r5, r4, r1
 801c690:	142d      	asrs	r5, r5, #16
 801c692:	d409      	bmi.n	801c6a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801c694:	42bd      	cmp	r5, r7
 801c696:	da07      	bge.n	801c6a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801c698:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801c69a:	fb05 2404 	mla	r4, r5, r4, r2
 801c69e:	1424      	asrs	r4, r4, #16
 801c6a0:	d402      	bmi.n	801c6a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801c6a2:	42b4      	cmp	r4, r6
 801c6a4:	f2c0 80b1 	blt.w	801c80a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801c6a8:	f04f 0800 	mov.w	r8, #0
 801c6ac:	eb03 0408 	add.w	r4, r3, r8
 801c6b0:	2c00      	cmp	r4, #0
 801c6b2:	dc3e      	bgt.n	801c732 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801c6b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c6b8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c6bc:	f1bb 0f00 	cmp.w	fp, #0
 801c6c0:	f340 8108 	ble.w	801c8d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801c6c4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c6c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c6ca:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c6ce:	f1bb 0b01 	subs.w	fp, fp, #1
 801c6d2:	eeb0 6a62 	vmov.f32	s12, s5
 801c6d6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c6da:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c6de:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c6e2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801c6e6:	eeb0 6a43 	vmov.f32	s12, s6
 801c6ea:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c6ee:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801c6f2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c6f6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c6fa:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c6fe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c702:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c706:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c70a:	ee12 2a90 	vmov	r2, s5
 801c70e:	eef0 2a47 	vmov.f32	s5, s14
 801c712:	fb92 f3f3 	sdiv	r3, r2, r3
 801c716:	ee13 2a10 	vmov	r2, s6
 801c71a:	9313      	str	r3, [sp, #76]	; 0x4c
 801c71c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c71e:	eeb0 3a67 	vmov.f32	s6, s15
 801c722:	fb92 f3f3 	sdiv	r3, r2, r3
 801c726:	9a04      	ldr	r2, [sp, #16]
 801c728:	9314      	str	r3, [sp, #80]	; 0x50
 801c72a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c72c:	bf08      	it	eq
 801c72e:	4613      	moveq	r3, r2
 801c730:	e787      	b.n	801c642 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801c732:	140e      	asrs	r6, r1, #16
 801c734:	d462      	bmi.n	801c7fc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801c736:	f8de 5008 	ldr.w	r5, [lr, #8]
 801c73a:	42b5      	cmp	r5, r6
 801c73c:	dd5e      	ble.n	801c7fc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801c73e:	1417      	asrs	r7, r2, #16
 801c740:	d45c      	bmi.n	801c7fc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801c742:	f8de 400c 	ldr.w	r4, [lr, #12]
 801c746:	42bc      	cmp	r4, r7
 801c748:	dd58      	ble.n	801c7fc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801c74a:	b22d      	sxth	r5, r5
 801c74c:	9c02      	ldr	r4, [sp, #8]
 801c74e:	fb07 6505 	mla	r5, r7, r5, r6
 801c752:	5d66      	ldrb	r6, [r4, r5]
 801c754:	2e00      	cmp	r6, #0
 801c756:	d051      	beq.n	801c7fc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801c758:	9c01      	ldr	r4, [sp, #4]
 801c75a:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801c75e:	f06f 0401 	mvn.w	r4, #1
 801c762:	fb04 f408 	mul.w	r4, r4, r8
 801c766:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801c76a:	5b05      	ldrh	r5, [r0, r4]
 801c76c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c770:	9403      	str	r4, [sp, #12]
 801c772:	9c05      	ldr	r4, [sp, #20]
 801c774:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801c778:	4366      	muls	r6, r4
 801c77a:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801c77e:	1c74      	adds	r4, r6, #1
 801c780:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801c784:	122e      	asrs	r6, r5, #8
 801c786:	1224      	asrs	r4, r4, #8
 801c788:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801c78c:	00ed      	lsls	r5, r5, #3
 801c78e:	b2a7      	uxth	r7, r4
 801c790:	43e4      	mvns	r4, r4
 801c792:	b2ed      	uxtb	r5, r5
 801c794:	b2e4      	uxtb	r4, r4
 801c796:	fb16 f604 	smulbb	r6, r6, r4
 801c79a:	fb15 f504 	smulbb	r5, r5, r4
 801c79e:	fb0c 6c07 	mla	ip, ip, r7, r6
 801c7a2:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801c7a6:	fb1a fa04 	smulbb	sl, sl, r4
 801c7aa:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801c7ae:	fa1f fc8c 	uxth.w	ip, ip
 801c7b2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c7b6:	fa5f f989 	uxtb.w	r9, r9
 801c7ba:	fb06 a607 	mla	r6, r6, r7, sl
 801c7be:	f10c 0401 	add.w	r4, ip, #1
 801c7c2:	fb09 5507 	mla	r5, r9, r7, r5
 801c7c6:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801c7ca:	9c03      	ldr	r4, [sp, #12]
 801c7cc:	b2ad      	uxth	r5, r5
 801c7ce:	b2b6      	uxth	r6, r6
 801c7d0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801c7d4:	f105 0a01 	add.w	sl, r5, #1
 801c7d8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801c7dc:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c7e0:	ea4a 0c0c 	orr.w	ip, sl, ip
 801c7e4:	f106 0a01 	add.w	sl, r6, #1
 801c7e8:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801c7ec:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c7f0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c7f4:	ea4c 0c0a 	orr.w	ip, ip, sl
 801c7f8:	f820 c004 	strh.w	ip, [r0, r4]
 801c7fc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c7fe:	f108 38ff 	add.w	r8, r8, #4294967295
 801c802:	4421      	add	r1, r4
 801c804:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c806:	4422      	add	r2, r4
 801c808:	e750      	b.n	801c6ac <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801c80a:	f04f 0900 	mov.w	r9, #0
 801c80e:	eba3 0409 	sub.w	r4, r3, r9
 801c812:	2c00      	cmp	r4, #0
 801c814:	f77f af4e 	ble.w	801c6b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801c818:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801c81c:	140d      	asrs	r5, r1, #16
 801c81e:	1414      	asrs	r4, r2, #16
 801c820:	fb06 5404 	mla	r4, r6, r4, r5
 801c824:	9d02      	ldr	r5, [sp, #8]
 801c826:	5d2e      	ldrb	r6, [r5, r4]
 801c828:	2e00      	cmp	r6, #0
 801c82a:	d04c      	beq.n	801c8c6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801c82c:	9d01      	ldr	r5, [sp, #4]
 801c82e:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801c832:	9c05      	ldr	r4, [sp, #20]
 801c834:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801c838:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801c83c:	4366      	muls	r6, r4
 801c83e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801c842:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c846:	1c74      	adds	r4, r6, #1
 801c848:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801c84c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801c850:	122e      	asrs	r6, r5, #8
 801c852:	1224      	asrs	r4, r4, #8
 801c854:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801c858:	00ed      	lsls	r5, r5, #3
 801c85a:	b2a7      	uxth	r7, r4
 801c85c:	43e4      	mvns	r4, r4
 801c85e:	b2ed      	uxtb	r5, r5
 801c860:	b2e4      	uxtb	r4, r4
 801c862:	fb16 f604 	smulbb	r6, r6, r4
 801c866:	fb15 f504 	smulbb	r5, r5, r4
 801c86a:	fb0c 6c07 	mla	ip, ip, r7, r6
 801c86e:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801c872:	fb1a fa04 	smulbb	sl, sl, r4
 801c876:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801c87a:	fa1f fc8c 	uxth.w	ip, ip
 801c87e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c882:	fa5f f888 	uxtb.w	r8, r8
 801c886:	fb06 a607 	mla	r6, r6, r7, sl
 801c88a:	f10c 0401 	add.w	r4, ip, #1
 801c88e:	fb08 5507 	mla	r5, r8, r7, r5
 801c892:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801c896:	b2ad      	uxth	r5, r5
 801c898:	b2b6      	uxth	r6, r6
 801c89a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801c89e:	f105 0a01 	add.w	sl, r5, #1
 801c8a2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801c8a6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c8aa:	ea4a 0c0c 	orr.w	ip, sl, ip
 801c8ae:	f106 0a01 	add.w	sl, r6, #1
 801c8b2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801c8b6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c8ba:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c8be:	ea4c 0c0a 	orr.w	ip, ip, sl
 801c8c2:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801c8c6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c8c8:	f109 0901 	add.w	r9, r9, #1
 801c8cc:	4421      	add	r1, r4
 801c8ce:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c8d0:	4422      	add	r2, r4
 801c8d2:	e79c      	b.n	801c80e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801c8d4:	b007      	add	sp, #28
 801c8d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c8da <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c8da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8de:	b085      	sub	sp, #20
 801c8e0:	468b      	mov	fp, r1
 801c8e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c8e6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c8e8:	9203      	str	r2, [sp, #12]
 801c8ea:	6861      	ldr	r1, [r4, #4]
 801c8ec:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801c8f0:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801c8f4:	fb01 2000 	mla	r0, r1, r0, r2
 801c8f8:	6822      	ldr	r2, [r4, #0]
 801c8fa:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801c8fe:	f8d8 2000 	ldr.w	r2, [r8]
 801c902:	9200      	str	r2, [sp, #0]
 801c904:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801c908:	9201      	str	r2, [sp, #4]
 801c90a:	f1bb 0f00 	cmp.w	fp, #0
 801c90e:	dc03      	bgt.n	801c918 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801c910:	9a03      	ldr	r2, [sp, #12]
 801c912:	2a00      	cmp	r2, #0
 801c914:	f340 8146 	ble.w	801cba4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801c918:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c91a:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801c91e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801c922:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c924:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801c928:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c92c:	2b00      	cmp	r3, #0
 801c92e:	dd0e      	ble.n	801c94e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801c930:	140c      	asrs	r4, r1, #16
 801c932:	d405      	bmi.n	801c940 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c934:	42bc      	cmp	r4, r7
 801c936:	da03      	bge.n	801c940 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c938:	1414      	asrs	r4, r2, #16
 801c93a:	d401      	bmi.n	801c940 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c93c:	42b4      	cmp	r4, r6
 801c93e:	db07      	blt.n	801c950 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c940:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801c942:	3b01      	subs	r3, #1
 801c944:	3002      	adds	r0, #2
 801c946:	4421      	add	r1, r4
 801c948:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c94a:	4422      	add	r2, r4
 801c94c:	e7ee      	b.n	801c92c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801c94e:	d017      	beq.n	801c980 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801c950:	1e5c      	subs	r4, r3, #1
 801c952:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c954:	fb05 1504 	mla	r5, r5, r4, r1
 801c958:	142d      	asrs	r5, r5, #16
 801c95a:	d409      	bmi.n	801c970 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c95c:	42bd      	cmp	r5, r7
 801c95e:	da07      	bge.n	801c970 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c960:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801c962:	fb05 2404 	mla	r4, r5, r4, r2
 801c966:	1424      	asrs	r4, r4, #16
 801c968:	d402      	bmi.n	801c970 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c96a:	42b4      	cmp	r4, r6
 801c96c:	f2c0 80b3 	blt.w	801cad6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801c970:	2600      	movs	r6, #0
 801c972:	199c      	adds	r4, r3, r6
 801c974:	2c00      	cmp	r4, #0
 801c976:	dc3e      	bgt.n	801c9f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801c978:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c97c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c980:	f1bb 0f00 	cmp.w	fp, #0
 801c984:	f340 810e 	ble.w	801cba4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801c988:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c98c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c98e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c992:	f1bb 0b01 	subs.w	fp, fp, #1
 801c996:	eeb0 6a62 	vmov.f32	s12, s5
 801c99a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c99e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c9a2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c9a6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c9aa:	eeb0 6a43 	vmov.f32	s12, s6
 801c9ae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c9b2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c9b6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c9ba:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c9be:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c9c2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c9c6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c9ca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c9ce:	ee12 2a90 	vmov	r2, s5
 801c9d2:	eef0 2a47 	vmov.f32	s5, s14
 801c9d6:	fb92 f3f3 	sdiv	r3, r2, r3
 801c9da:	ee13 2a10 	vmov	r2, s6
 801c9de:	9311      	str	r3, [sp, #68]	; 0x44
 801c9e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c9e2:	eeb0 3a67 	vmov.f32	s6, s15
 801c9e6:	fb92 f3f3 	sdiv	r3, r2, r3
 801c9ea:	9a03      	ldr	r2, [sp, #12]
 801c9ec:	9312      	str	r3, [sp, #72]	; 0x48
 801c9ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c9f0:	bf08      	it	eq
 801c9f2:	4613      	moveq	r3, r2
 801c9f4:	e789      	b.n	801c90a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801c9f6:	140f      	asrs	r7, r1, #16
 801c9f8:	d418      	bmi.n	801ca2c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801c9fa:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801c9fe:	42bd      	cmp	r5, r7
 801ca00:	dd14      	ble.n	801ca2c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ca02:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ca06:	d411      	bmi.n	801ca2c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ca08:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801ca0c:	4564      	cmp	r4, ip
 801ca0e:	dd0d      	ble.n	801ca2c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ca10:	b22d      	sxth	r5, r5
 801ca12:	9c01      	ldr	r4, [sp, #4]
 801ca14:	fb0c 7505 	mla	r5, ip, r5, r7
 801ca18:	5d64      	ldrb	r4, [r4, r5]
 801ca1a:	2cff      	cmp	r4, #255	; 0xff
 801ca1c:	d10c      	bne.n	801ca38 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801ca1e:	9c00      	ldr	r4, [sp, #0]
 801ca20:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801ca24:	f06f 0401 	mvn.w	r4, #1
 801ca28:	4374      	muls	r4, r6
 801ca2a:	5305      	strh	r5, [r0, r4]
 801ca2c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ca2e:	3e01      	subs	r6, #1
 801ca30:	4421      	add	r1, r4
 801ca32:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ca34:	4422      	add	r2, r4
 801ca36:	e79c      	b.n	801c972 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ca38:	2c00      	cmp	r4, #0
 801ca3a:	d0f7      	beq.n	801ca2c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ca3c:	9f00      	ldr	r7, [sp, #0]
 801ca3e:	fa1f fc84 	uxth.w	ip, r4
 801ca42:	43e4      	mvns	r4, r4
 801ca44:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801ca48:	f06f 0501 	mvn.w	r5, #1
 801ca4c:	b2e4      	uxtb	r4, r4
 801ca4e:	4375      	muls	r5, r6
 801ca50:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801ca54:	9502      	str	r5, [sp, #8]
 801ca56:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801ca5a:	5b45      	ldrh	r5, [r0, r5]
 801ca5c:	122f      	asrs	r7, r5, #8
 801ca5e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801ca62:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ca66:	00ed      	lsls	r5, r5, #3
 801ca68:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801ca6c:	fb17 f704 	smulbb	r7, r7, r4
 801ca70:	b2ed      	uxtb	r5, r5
 801ca72:	fb1a fa04 	smulbb	sl, sl, r4
 801ca76:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801ca7a:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801ca7e:	fb15 f504 	smulbb	r5, r5, r4
 801ca82:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801ca86:	fa1f fe8e 	uxth.w	lr, lr
 801ca8a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ca8e:	fa5f f989 	uxtb.w	r9, r9
 801ca92:	fb07 a70c 	mla	r7, r7, ip, sl
 801ca96:	f10e 0401 	add.w	r4, lr, #1
 801ca9a:	fb09 550c 	mla	r5, r9, ip, r5
 801ca9e:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801caa2:	9c02      	ldr	r4, [sp, #8]
 801caa4:	b2ad      	uxth	r5, r5
 801caa6:	b2bf      	uxth	r7, r7
 801caa8:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801caac:	f105 0a01 	add.w	sl, r5, #1
 801cab0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801cab4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801cab8:	ea4a 0e0e 	orr.w	lr, sl, lr
 801cabc:	f107 0a01 	add.w	sl, r7, #1
 801cac0:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801cac4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801cac8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801cacc:	ea4e 0e0a 	orr.w	lr, lr, sl
 801cad0:	f820 e004 	strh.w	lr, [r0, r4]
 801cad4:	e7aa      	b.n	801ca2c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801cad6:	f04f 0900 	mov.w	r9, #0
 801cada:	eba3 0409 	sub.w	r4, r3, r9
 801cade:	2c00      	cmp	r4, #0
 801cae0:	f77f af4a 	ble.w	801c978 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801cae4:	1414      	asrs	r4, r2, #16
 801cae6:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801caea:	140d      	asrs	r5, r1, #16
 801caec:	fb06 5504 	mla	r5, r6, r4, r5
 801caf0:	9c01      	ldr	r4, [sp, #4]
 801caf2:	5d64      	ldrb	r4, [r4, r5]
 801caf4:	2cff      	cmp	r4, #255	; 0xff
 801caf6:	d10b      	bne.n	801cb10 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801caf8:	9c00      	ldr	r4, [sp, #0]
 801cafa:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801cafe:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801cb02:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801cb04:	f109 0901 	add.w	r9, r9, #1
 801cb08:	4421      	add	r1, r4
 801cb0a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801cb0c:	4422      	add	r2, r4
 801cb0e:	e7e4      	b.n	801cada <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801cb10:	2c00      	cmp	r4, #0
 801cb12:	d0f6      	beq.n	801cb02 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801cb14:	9e00      	ldr	r6, [sp, #0]
 801cb16:	b2a7      	uxth	r7, r4
 801cb18:	43e4      	mvns	r4, r4
 801cb1a:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801cb1e:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801cb22:	b2e4      	uxtb	r4, r4
 801cb24:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801cb28:	122e      	asrs	r6, r5, #8
 801cb2a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801cb2e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801cb32:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801cb36:	00ed      	lsls	r5, r5, #3
 801cb38:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801cb3c:	fb16 f604 	smulbb	r6, r6, r4
 801cb40:	b2ed      	uxtb	r5, r5
 801cb42:	fb1a fa04 	smulbb	sl, sl, r4
 801cb46:	fb0c 6c07 	mla	ip, ip, r7, r6
 801cb4a:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801cb4e:	fb15 f504 	smulbb	r5, r5, r4
 801cb52:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801cb56:	fa1f fc8c 	uxth.w	ip, ip
 801cb5a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801cb5e:	fa5f fe8e 	uxtb.w	lr, lr
 801cb62:	fb06 a607 	mla	r6, r6, r7, sl
 801cb66:	f10c 0401 	add.w	r4, ip, #1
 801cb6a:	fb0e 5507 	mla	r5, lr, r7, r5
 801cb6e:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801cb72:	b2ad      	uxth	r5, r5
 801cb74:	b2b6      	uxth	r6, r6
 801cb76:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801cb7a:	f105 0a01 	add.w	sl, r5, #1
 801cb7e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801cb82:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801cb86:	ea4a 0c0c 	orr.w	ip, sl, ip
 801cb8a:	f106 0a01 	add.w	sl, r6, #1
 801cb8e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801cb92:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801cb96:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801cb9a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801cb9e:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801cba2:	e7ae      	b.n	801cb02 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801cba4:	b005      	add	sp, #20
 801cba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cbaa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cbaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cbae:	b085      	sub	sp, #20
 801cbb0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801cbb2:	9203      	str	r2, [sp, #12]
 801cbb4:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801cbb8:	9100      	str	r1, [sp, #0]
 801cbba:	9201      	str	r2, [sp, #4]
 801cbbc:	6841      	ldr	r1, [r0, #4]
 801cbbe:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801cbc2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801cbc6:	fb01 2404 	mla	r4, r1, r4, r2
 801cbca:	6802      	ldr	r2, [r0, #0]
 801cbcc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801cbd0:	f8de 2000 	ldr.w	r2, [lr]
 801cbd4:	9202      	str	r2, [sp, #8]
 801cbd6:	9a01      	ldr	r2, [sp, #4]
 801cbd8:	43d6      	mvns	r6, r2
 801cbda:	b2f6      	uxtb	r6, r6
 801cbdc:	9a00      	ldr	r2, [sp, #0]
 801cbde:	2a00      	cmp	r2, #0
 801cbe0:	dc03      	bgt.n	801cbea <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801cbe2:	9a03      	ldr	r2, [sp, #12]
 801cbe4:	2a00      	cmp	r2, #0
 801cbe6:	f340 8124 	ble.w	801ce32 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801cbea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cbec:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801cbf0:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801cbf4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cbf6:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801cbfa:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801cbfe:	2b00      	cmp	r3, #0
 801cc00:	dd0e      	ble.n	801cc20 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801cc02:	1408      	asrs	r0, r1, #16
 801cc04:	d405      	bmi.n	801cc12 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801cc06:	4560      	cmp	r0, ip
 801cc08:	da03      	bge.n	801cc12 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801cc0a:	1410      	asrs	r0, r2, #16
 801cc0c:	d401      	bmi.n	801cc12 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801cc0e:	42b8      	cmp	r0, r7
 801cc10:	db07      	blt.n	801cc22 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801cc12:	9811      	ldr	r0, [sp, #68]	; 0x44
 801cc14:	3b01      	subs	r3, #1
 801cc16:	3402      	adds	r4, #2
 801cc18:	4401      	add	r1, r0
 801cc1a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801cc1c:	4402      	add	r2, r0
 801cc1e:	e7ee      	b.n	801cbfe <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801cc20:	d06e      	beq.n	801cd00 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801cc22:	1e58      	subs	r0, r3, #1
 801cc24:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801cc26:	fb05 1500 	mla	r5, r5, r0, r1
 801cc2a:	142d      	asrs	r5, r5, #16
 801cc2c:	d45c      	bmi.n	801cce8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801cc2e:	4565      	cmp	r5, ip
 801cc30:	da5a      	bge.n	801cce8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801cc32:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801cc34:	fb05 2000 	mla	r0, r5, r0, r2
 801cc38:	1400      	asrs	r0, r0, #16
 801cc3a:	d455      	bmi.n	801cce8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801cc3c:	42b8      	cmp	r0, r7
 801cc3e:	da53      	bge.n	801cce8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801cc40:	4699      	mov	r9, r3
 801cc42:	46a2      	mov	sl, r4
 801cc44:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801cc48:	f1b9 0f00 	cmp.w	r9, #0
 801cc4c:	dd54      	ble.n	801ccf8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801cc4e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801cc52:	140d      	asrs	r5, r1, #16
 801cc54:	1410      	asrs	r0, r2, #16
 801cc56:	f109 39ff 	add.w	r9, r9, #4294967295
 801cc5a:	fb07 5000 	mla	r0, r7, r0, r5
 801cc5e:	9d02      	ldr	r5, [sp, #8]
 801cc60:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801cc64:	f8ba 5000 	ldrh.w	r5, [sl]
 801cc68:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801cc6c:	122f      	asrs	r7, r5, #8
 801cc6e:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801cc72:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801cc76:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801cc7a:	00ed      	lsls	r5, r5, #3
 801cc7c:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801cc80:	fb17 f706 	smulbb	r7, r7, r6
 801cc84:	b2ed      	uxtb	r5, r5
 801cc86:	fb18 f806 	smulbb	r8, r8, r6
 801cc8a:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801cc8e:	10c7      	asrs	r7, r0, #3
 801cc90:	fb15 f506 	smulbb	r5, r5, r6
 801cc94:	00c0      	lsls	r0, r0, #3
 801cc96:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801cc9a:	fa1f fc8c 	uxth.w	ip, ip
 801cc9e:	b2c0      	uxtb	r0, r0
 801cca0:	fb07 870b 	mla	r7, r7, fp, r8
 801cca4:	fb00 500b 	mla	r0, r0, fp, r5
 801cca8:	f10c 0501 	add.w	r5, ip, #1
 801ccac:	b2bf      	uxth	r7, r7
 801ccae:	b280      	uxth	r0, r0
 801ccb0:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801ccb4:	f107 0801 	add.w	r8, r7, #1
 801ccb8:	1c45      	adds	r5, r0, #1
 801ccba:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801ccbe:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ccc2:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801ccc6:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ccc8:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801cccc:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801ccd0:	4401      	add	r1, r0
 801ccd2:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801ccd6:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ccd8:	ea45 0c0c 	orr.w	ip, r5, ip
 801ccdc:	4402      	add	r2, r0
 801ccde:	ea4c 0c08 	orr.w	ip, ip, r8
 801cce2:	f82a cb02 	strh.w	ip, [sl], #2
 801cce6:	e7af      	b.n	801cc48 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801cce8:	f04f 0800 	mov.w	r8, #0
 801ccec:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801ccf0:	eb03 0008 	add.w	r0, r3, r8
 801ccf4:	2800      	cmp	r0, #0
 801ccf6:	dc41      	bgt.n	801cd7c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801ccf8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ccfc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801cd00:	9b00      	ldr	r3, [sp, #0]
 801cd02:	2b00      	cmp	r3, #0
 801cd04:	f340 8095 	ble.w	801ce32 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801cd08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cd0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cd0e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cd12:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cd16:	eef0 6a62 	vmov.f32	s13, s5
 801cd1a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801cd1e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cd22:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cd26:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801cd2a:	eef0 6a43 	vmov.f32	s13, s6
 801cd2e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cd32:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801cd36:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cd3a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cd3e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cd42:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cd46:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cd4a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cd4e:	ee12 2a90 	vmov	r2, s5
 801cd52:	eef0 2a47 	vmov.f32	s5, s14
 801cd56:	fb92 f3f3 	sdiv	r3, r2, r3
 801cd5a:	ee13 2a10 	vmov	r2, s6
 801cd5e:	9311      	str	r3, [sp, #68]	; 0x44
 801cd60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cd62:	eeb0 3a67 	vmov.f32	s6, s15
 801cd66:	fb92 f3f3 	sdiv	r3, r2, r3
 801cd6a:	9312      	str	r3, [sp, #72]	; 0x48
 801cd6c:	9b00      	ldr	r3, [sp, #0]
 801cd6e:	9a03      	ldr	r2, [sp, #12]
 801cd70:	3b01      	subs	r3, #1
 801cd72:	9300      	str	r3, [sp, #0]
 801cd74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cd76:	bf08      	it	eq
 801cd78:	4613      	moveq	r3, r2
 801cd7a:	e72f      	b.n	801cbdc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801cd7c:	140f      	asrs	r7, r1, #16
 801cd7e:	d451      	bmi.n	801ce24 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801cd80:	f8de 5008 	ldr.w	r5, [lr, #8]
 801cd84:	42bd      	cmp	r5, r7
 801cd86:	dd4d      	ble.n	801ce24 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801cd88:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801cd8c:	d44a      	bmi.n	801ce24 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801cd8e:	f8de 000c 	ldr.w	r0, [lr, #12]
 801cd92:	4560      	cmp	r0, ip
 801cd94:	dd46      	ble.n	801ce24 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801cd96:	b22d      	sxth	r5, r5
 801cd98:	9802      	ldr	r0, [sp, #8]
 801cd9a:	fb0c 7505 	mla	r5, ip, r5, r7
 801cd9e:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801cda2:	f06f 0501 	mvn.w	r5, #1
 801cda6:	fb05 fb08 	mul.w	fp, r5, r8
 801cdaa:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801cdae:	f834 500b 	ldrh.w	r5, [r4, fp]
 801cdb2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801cdb6:	122f      	asrs	r7, r5, #8
 801cdb8:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801cdbc:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801cdc0:	00ed      	lsls	r5, r5, #3
 801cdc2:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801cdc6:	fb17 f706 	smulbb	r7, r7, r6
 801cdca:	b2ed      	uxtb	r5, r5
 801cdcc:	fb19 f906 	smulbb	r9, r9, r6
 801cdd0:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801cdd4:	10c7      	asrs	r7, r0, #3
 801cdd6:	fb15 f506 	smulbb	r5, r5, r6
 801cdda:	00c0      	lsls	r0, r0, #3
 801cddc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801cde0:	fa1f fc8c 	uxth.w	ip, ip
 801cde4:	b2c0      	uxtb	r0, r0
 801cde6:	fb07 970a 	mla	r7, r7, sl, r9
 801cdea:	fb00 500a 	mla	r0, r0, sl, r5
 801cdee:	f10c 0501 	add.w	r5, ip, #1
 801cdf2:	b2bf      	uxth	r7, r7
 801cdf4:	b280      	uxth	r0, r0
 801cdf6:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801cdfa:	f107 0901 	add.w	r9, r7, #1
 801cdfe:	1c45      	adds	r5, r0, #1
 801ce00:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801ce04:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ce08:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801ce0c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801ce10:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801ce14:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801ce18:	ea45 0c0c 	orr.w	ip, r5, ip
 801ce1c:	ea4c 0c09 	orr.w	ip, ip, r9
 801ce20:	f824 c00b 	strh.w	ip, [r4, fp]
 801ce24:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ce26:	f108 38ff 	add.w	r8, r8, #4294967295
 801ce2a:	4401      	add	r1, r0
 801ce2c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ce2e:	4402      	add	r2, r0
 801ce30:	e75e      	b.n	801ccf0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801ce32:	b005      	add	sp, #20
 801ce34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ce38 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ce38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce3c:	b085      	sub	sp, #20
 801ce3e:	4693      	mov	fp, r2
 801ce40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ce44:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801ce46:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801ce48:	6870      	ldr	r0, [r6, #4]
 801ce4a:	9101      	str	r1, [sp, #4]
 801ce4c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801ce50:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801ce54:	fb00 2404 	mla	r4, r0, r4, r2
 801ce58:	6832      	ldr	r2, [r6, #0]
 801ce5a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ce5e:	682a      	ldr	r2, [r5, #0]
 801ce60:	9202      	str	r2, [sp, #8]
 801ce62:	9a01      	ldr	r2, [sp, #4]
 801ce64:	2a00      	cmp	r2, #0
 801ce66:	dc03      	bgt.n	801ce70 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801ce68:	f1bb 0f00 	cmp.w	fp, #0
 801ce6c:	f340 809a 	ble.w	801cfa4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801ce70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ce72:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801ce76:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ce7a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ce7c:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801ce80:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ce84:	2b00      	cmp	r3, #0
 801ce86:	dd0c      	ble.n	801cea2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ce88:	1406      	asrs	r6, r0, #16
 801ce8a:	d405      	bmi.n	801ce98 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ce8c:	454e      	cmp	r6, r9
 801ce8e:	da03      	bge.n	801ce98 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ce90:	1416      	asrs	r6, r2, #16
 801ce92:	d401      	bmi.n	801ce98 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ce94:	4546      	cmp	r6, r8
 801ce96:	db05      	blt.n	801cea4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ce98:	4470      	add	r0, lr
 801ce9a:	4462      	add	r2, ip
 801ce9c:	3b01      	subs	r3, #1
 801ce9e:	3402      	adds	r4, #2
 801cea0:	e7f0      	b.n	801ce84 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801cea2:	d00f      	beq.n	801cec4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801cea4:	1e5e      	subs	r6, r3, #1
 801cea6:	fb0e 0706 	mla	r7, lr, r6, r0
 801ceaa:	143f      	asrs	r7, r7, #16
 801ceac:	d541      	bpl.n	801cf32 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801ceae:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801ceb2:	4698      	mov	r8, r3
 801ceb4:	9603      	str	r6, [sp, #12]
 801ceb6:	f1b8 0f00 	cmp.w	r8, #0
 801ceba:	dc56      	bgt.n	801cf6a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801cebc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cec0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801cec4:	9b01      	ldr	r3, [sp, #4]
 801cec6:	2b00      	cmp	r3, #0
 801cec8:	dd6c      	ble.n	801cfa4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801ceca:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cece:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ced0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ced4:	eeb0 6a62 	vmov.f32	s12, s5
 801ced8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cedc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cee0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cee4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801cee8:	eeb0 6a43 	vmov.f32	s12, s6
 801ceec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cef0:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801cef4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cef8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cefc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cf00:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cf04:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cf08:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cf0c:	ee12 2a90 	vmov	r2, s5
 801cf10:	eef0 2a47 	vmov.f32	s5, s14
 801cf14:	fb92 fef3 	sdiv	lr, r2, r3
 801cf18:	ee13 2a10 	vmov	r2, s6
 801cf1c:	eeb0 3a67 	vmov.f32	s6, s15
 801cf20:	fb92 fcf3 	sdiv	ip, r2, r3
 801cf24:	9b01      	ldr	r3, [sp, #4]
 801cf26:	3b01      	subs	r3, #1
 801cf28:	9301      	str	r3, [sp, #4]
 801cf2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cf2c:	bf08      	it	eq
 801cf2e:	465b      	moveq	r3, fp
 801cf30:	e797      	b.n	801ce62 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801cf32:	454f      	cmp	r7, r9
 801cf34:	dabb      	bge.n	801ceae <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801cf36:	fb0c 2606 	mla	r6, ip, r6, r2
 801cf3a:	1436      	asrs	r6, r6, #16
 801cf3c:	d4b7      	bmi.n	801ceae <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801cf3e:	4546      	cmp	r6, r8
 801cf40:	dab5      	bge.n	801ceae <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801cf42:	461e      	mov	r6, r3
 801cf44:	46a0      	mov	r8, r4
 801cf46:	2e00      	cmp	r6, #0
 801cf48:	ddb8      	ble.n	801cebc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801cf4a:	1417      	asrs	r7, r2, #16
 801cf4c:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801cf50:	ea4f 4920 	mov.w	r9, r0, asr #16
 801cf54:	9902      	ldr	r1, [sp, #8]
 801cf56:	4470      	add	r0, lr
 801cf58:	4462      	add	r2, ip
 801cf5a:	fb0a 9707 	mla	r7, sl, r7, r9
 801cf5e:	3e01      	subs	r6, #1
 801cf60:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801cf64:	f828 7b02 	strh.w	r7, [r8], #2
 801cf68:	e7ed      	b.n	801cf46 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801cf6a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801cf6e:	d414      	bmi.n	801cf9a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801cf70:	68ae      	ldr	r6, [r5, #8]
 801cf72:	454e      	cmp	r6, r9
 801cf74:	dd11      	ble.n	801cf9a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801cf76:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801cf7a:	d40e      	bmi.n	801cf9a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801cf7c:	68ef      	ldr	r7, [r5, #12]
 801cf7e:	4557      	cmp	r7, sl
 801cf80:	dd0b      	ble.n	801cf9a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801cf82:	b236      	sxth	r6, r6
 801cf84:	f06f 0101 	mvn.w	r1, #1
 801cf88:	9f02      	ldr	r7, [sp, #8]
 801cf8a:	fb0a 9606 	mla	r6, sl, r6, r9
 801cf8e:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801cf92:	fb01 f608 	mul.w	r6, r1, r8
 801cf96:	9903      	ldr	r1, [sp, #12]
 801cf98:	538f      	strh	r7, [r1, r6]
 801cf9a:	4470      	add	r0, lr
 801cf9c:	4462      	add	r2, ip
 801cf9e:	f108 38ff 	add.w	r8, r8, #4294967295
 801cfa2:	e788      	b.n	801ceb6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801cfa4:	b005      	add	sp, #20
 801cfa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cfaa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cfaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfae:	b087      	sub	sp, #28
 801cfb0:	468b      	mov	fp, r1
 801cfb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cfb6:	9815      	ldr	r0, [sp, #84]	; 0x54
 801cfb8:	9203      	str	r2, [sp, #12]
 801cfba:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801cfbe:	6841      	ldr	r1, [r0, #4]
 801cfc0:	9204      	str	r2, [sp, #16]
 801cfc2:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801cfc6:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801cfca:	fb01 2505 	mla	r5, r1, r5, r2
 801cfce:	6802      	ldr	r2, [r0, #0]
 801cfd0:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801cfd4:	f8d9 2000 	ldr.w	r2, [r9]
 801cfd8:	9201      	str	r2, [sp, #4]
 801cfda:	f1bb 0f00 	cmp.w	fp, #0
 801cfde:	dc03      	bgt.n	801cfe8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801cfe0:	9a03      	ldr	r2, [sp, #12]
 801cfe2:	2a00      	cmp	r2, #0
 801cfe4:	f340 8158 	ble.w	801d298 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801cfe8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cfea:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801cfee:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801cff2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cff4:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801cff8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801cffc:	2b00      	cmp	r3, #0
 801cffe:	dd0e      	ble.n	801d01e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801d000:	1402      	asrs	r2, r0, #16
 801d002:	d405      	bmi.n	801d010 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d004:	42ba      	cmp	r2, r7
 801d006:	da03      	bge.n	801d010 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d008:	140a      	asrs	r2, r1, #16
 801d00a:	d401      	bmi.n	801d010 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d00c:	42b2      	cmp	r2, r6
 801d00e:	db07      	blt.n	801d020 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d010:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d012:	3b01      	subs	r3, #1
 801d014:	3502      	adds	r5, #2
 801d016:	4410      	add	r0, r2
 801d018:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d01a:	4411      	add	r1, r2
 801d01c:	e7ee      	b.n	801cffc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801d01e:	d017      	beq.n	801d050 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801d020:	1e5a      	subs	r2, r3, #1
 801d022:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d024:	fb04 0402 	mla	r4, r4, r2, r0
 801d028:	1424      	asrs	r4, r4, #16
 801d02a:	d409      	bmi.n	801d040 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d02c:	42bc      	cmp	r4, r7
 801d02e:	da07      	bge.n	801d040 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d030:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d032:	fb04 1202 	mla	r2, r4, r2, r1
 801d036:	1412      	asrs	r2, r2, #16
 801d038:	d402      	bmi.n	801d040 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d03a:	42b2      	cmp	r2, r6
 801d03c:	f2c0 80bf 	blt.w	801d1be <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801d040:	2700      	movs	r7, #0
 801d042:	19da      	adds	r2, r3, r7
 801d044:	2a00      	cmp	r2, #0
 801d046:	dc3e      	bgt.n	801d0c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801d048:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d04c:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801d050:	f1bb 0f00 	cmp.w	fp, #0
 801d054:	f340 8120 	ble.w	801d298 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801d058:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d05c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d05e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d062:	f1bb 0b01 	subs.w	fp, fp, #1
 801d066:	eeb0 6a62 	vmov.f32	s12, s5
 801d06a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d06e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d072:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d076:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d07a:	eeb0 6a43 	vmov.f32	s12, s6
 801d07e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d082:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d086:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d08a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d08e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d092:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d096:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d09a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d09e:	ee12 2a90 	vmov	r2, s5
 801d0a2:	eef0 2a47 	vmov.f32	s5, s14
 801d0a6:	fb92 f3f3 	sdiv	r3, r2, r3
 801d0aa:	ee13 2a10 	vmov	r2, s6
 801d0ae:	9313      	str	r3, [sp, #76]	; 0x4c
 801d0b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d0b2:	eeb0 3a67 	vmov.f32	s6, s15
 801d0b6:	fb92 f3f3 	sdiv	r3, r2, r3
 801d0ba:	9a03      	ldr	r2, [sp, #12]
 801d0bc:	9314      	str	r3, [sp, #80]	; 0x50
 801d0be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d0c0:	bf08      	it	eq
 801d0c2:	4613      	moveq	r3, r2
 801d0c4:	e789      	b.n	801cfda <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801d0c6:	1406      	asrs	r6, r0, #16
 801d0c8:	d42d      	bmi.n	801d126 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801d0ca:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801d0ce:	42b4      	cmp	r4, r6
 801d0d0:	dd29      	ble.n	801d126 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801d0d2:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801d0d6:	d426      	bmi.n	801d126 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801d0d8:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801d0dc:	4562      	cmp	r2, ip
 801d0de:	dd22      	ble.n	801d126 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801d0e0:	b224      	sxth	r4, r4
 801d0e2:	9a01      	ldr	r2, [sp, #4]
 801d0e4:	fb0c 6404 	mla	r4, ip, r4, r6
 801d0e8:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801d0ec:	0e22      	lsrs	r2, r4, #24
 801d0ee:	d01a      	beq.n	801d126 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801d0f0:	9e04      	ldr	r6, [sp, #16]
 801d0f2:	4372      	muls	r2, r6
 801d0f4:	1c56      	adds	r6, r2, #1
 801d0f6:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801d0fa:	0a26      	lsrs	r6, r4, #8
 801d0fc:	1212      	asrs	r2, r2, #8
 801d0fe:	9605      	str	r6, [sp, #20]
 801d100:	2aff      	cmp	r2, #255	; 0xff
 801d102:	d116      	bne.n	801d132 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801d104:	f06f 0201 	mvn.w	r2, #1
 801d108:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801d10c:	fb02 fc07 	mul.w	ip, r2, r7
 801d110:	0962      	lsrs	r2, r4, #5
 801d112:	f026 0607 	bic.w	r6, r6, #7
 801d116:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801d11a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d11e:	4316      	orrs	r6, r2
 801d120:	4326      	orrs	r6, r4
 801d122:	f825 600c 	strh.w	r6, [r5, ip]
 801d126:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d128:	3f01      	subs	r7, #1
 801d12a:	4410      	add	r0, r2
 801d12c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d12e:	4411      	add	r1, r2
 801d130:	e787      	b.n	801d042 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d132:	f06f 0601 	mvn.w	r6, #1
 801d136:	fa1f fa82 	uxth.w	sl, r2
 801d13a:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801d13e:	43d2      	mvns	r2, r2
 801d140:	437e      	muls	r6, r7
 801d142:	b2e4      	uxtb	r4, r4
 801d144:	fb1c fc0a 	smulbb	ip, ip, sl
 801d148:	b2d2      	uxtb	r2, r2
 801d14a:	f835 8006 	ldrh.w	r8, [r5, r6]
 801d14e:	fb14 f40a 	smulbb	r4, r4, sl
 801d152:	9602      	str	r6, [sp, #8]
 801d154:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801d158:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801d15c:	fb16 f60a 	smulbb	r6, r6, sl
 801d160:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801d164:	fb0e ce02 	mla	lr, lr, r2, ip
 801d168:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801d16c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801d170:	fa1f fe8e 	uxth.w	lr, lr
 801d174:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801d178:	fa5f f888 	uxtb.w	r8, r8
 801d17c:	fb0c 6c02 	mla	ip, ip, r2, r6
 801d180:	fb08 4402 	mla	r4, r8, r2, r4
 801d184:	f10e 0201 	add.w	r2, lr, #1
 801d188:	fa1f fc8c 	uxth.w	ip, ip
 801d18c:	b2a4      	uxth	r4, r4
 801d18e:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801d192:	9a02      	ldr	r2, [sp, #8]
 801d194:	1c66      	adds	r6, r4, #1
 801d196:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801d19a:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801d19e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801d1a2:	ea46 0e0e 	orr.w	lr, r6, lr
 801d1a6:	f10c 0601 	add.w	r6, ip, #1
 801d1aa:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801d1ae:	0976      	lsrs	r6, r6, #5
 801d1b0:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801d1b4:	ea4e 0e06 	orr.w	lr, lr, r6
 801d1b8:	f825 e002 	strh.w	lr, [r5, r2]
 801d1bc:	e7b3      	b.n	801d126 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801d1be:	f04f 0800 	mov.w	r8, #0
 801d1c2:	eba3 0208 	sub.w	r2, r3, r8
 801d1c6:	2a00      	cmp	r2, #0
 801d1c8:	f77f af3e 	ble.w	801d048 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d1cc:	1404      	asrs	r4, r0, #16
 801d1ce:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801d1d2:	140a      	asrs	r2, r1, #16
 801d1d4:	fb06 4202 	mla	r2, r6, r2, r4
 801d1d8:	9c01      	ldr	r4, [sp, #4]
 801d1da:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801d1de:	0e22      	lsrs	r2, r4, #24
 801d1e0:	d015      	beq.n	801d20e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801d1e2:	9e04      	ldr	r6, [sp, #16]
 801d1e4:	4372      	muls	r2, r6
 801d1e6:	1c56      	adds	r6, r2, #1
 801d1e8:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801d1ec:	0a26      	lsrs	r6, r4, #8
 801d1ee:	1212      	asrs	r2, r2, #8
 801d1f0:	2aff      	cmp	r2, #255	; 0xff
 801d1f2:	d113      	bne.n	801d21c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801d1f4:	0962      	lsrs	r2, r4, #5
 801d1f6:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801d1fa:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801d1fe:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d202:	f026 0607 	bic.w	r6, r6, #7
 801d206:	4316      	orrs	r6, r2
 801d208:	4326      	orrs	r6, r4
 801d20a:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801d20e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d210:	f108 0801 	add.w	r8, r8, #1
 801d214:	4410      	add	r0, r2
 801d216:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d218:	4411      	add	r1, r2
 801d21a:	e7d2      	b.n	801d1c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801d21c:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801d220:	fa1f fa82 	uxth.w	sl, r2
 801d224:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801d228:	43d2      	mvns	r2, r2
 801d22a:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801d22e:	fb17 f70a 	smulbb	r7, r7, sl
 801d232:	b2d2      	uxtb	r2, r2
 801d234:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d238:	b2e4      	uxtb	r4, r4
 801d23a:	b2f6      	uxtb	r6, r6
 801d23c:	fb0c 7c02 	mla	ip, ip, r2, r7
 801d240:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801d244:	fb14 f40a 	smulbb	r4, r4, sl
 801d248:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801d24c:	fa1f fc8c 	uxth.w	ip, ip
 801d250:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d254:	fb16 f60a 	smulbb	r6, r6, sl
 801d258:	fa5f fe8e 	uxtb.w	lr, lr
 801d25c:	fb0e 4402 	mla	r4, lr, r2, r4
 801d260:	fb07 6702 	mla	r7, r7, r2, r6
 801d264:	f10c 0201 	add.w	r2, ip, #1
 801d268:	b2a4      	uxth	r4, r4
 801d26a:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801d26e:	1c66      	adds	r6, r4, #1
 801d270:	b2bf      	uxth	r7, r7
 801d272:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801d276:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801d27a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801d27e:	ea46 0c0c 	orr.w	ip, r6, ip
 801d282:	1c7e      	adds	r6, r7, #1
 801d284:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801d288:	0976      	lsrs	r6, r6, #5
 801d28a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801d28e:	ea4c 0c06 	orr.w	ip, ip, r6
 801d292:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801d296:	e7ba      	b.n	801d20e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801d298:	b007      	add	sp, #28
 801d29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801d2a0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2a4:	b085      	sub	sp, #20
 801d2a6:	468b      	mov	fp, r1
 801d2a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d2ac:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d2ae:	9203      	str	r2, [sp, #12]
 801d2b0:	6841      	ldr	r1, [r0, #4]
 801d2b2:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801d2b6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801d2ba:	fb01 2404 	mla	r4, r1, r4, r2
 801d2be:	6802      	ldr	r2, [r0, #0]
 801d2c0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d2c4:	f8d8 2000 	ldr.w	r2, [r8]
 801d2c8:	9201      	str	r2, [sp, #4]
 801d2ca:	f1bb 0f00 	cmp.w	fp, #0
 801d2ce:	dc03      	bgt.n	801d2d8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801d2d0:	9a03      	ldr	r2, [sp, #12]
 801d2d2:	2a00      	cmp	r2, #0
 801d2d4:	f340 814f 	ble.w	801d576 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801d2d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d2da:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801d2de:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801d2e2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d2e4:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801d2e8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d2ec:	2b00      	cmp	r3, #0
 801d2ee:	dd0e      	ble.n	801d30e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d2f0:	1408      	asrs	r0, r1, #16
 801d2f2:	d405      	bmi.n	801d300 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801d2f4:	42b8      	cmp	r0, r7
 801d2f6:	da03      	bge.n	801d300 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801d2f8:	1410      	asrs	r0, r2, #16
 801d2fa:	d401      	bmi.n	801d300 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801d2fc:	42b0      	cmp	r0, r6
 801d2fe:	db07      	blt.n	801d310 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d300:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d302:	3b01      	subs	r3, #1
 801d304:	3402      	adds	r4, #2
 801d306:	4401      	add	r1, r0
 801d308:	9812      	ldr	r0, [sp, #72]	; 0x48
 801d30a:	4402      	add	r2, r0
 801d30c:	e7ee      	b.n	801d2ec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801d30e:	d017      	beq.n	801d340 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801d310:	1e58      	subs	r0, r3, #1
 801d312:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801d314:	fb05 1500 	mla	r5, r5, r0, r1
 801d318:	142d      	asrs	r5, r5, #16
 801d31a:	d409      	bmi.n	801d330 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d31c:	42bd      	cmp	r5, r7
 801d31e:	da07      	bge.n	801d330 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d320:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801d322:	fb05 2000 	mla	r0, r5, r0, r2
 801d326:	1400      	asrs	r0, r0, #16
 801d328:	d402      	bmi.n	801d330 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d32a:	42b0      	cmp	r0, r6
 801d32c:	f2c0 80ba 	blt.w	801d4a4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801d330:	2600      	movs	r6, #0
 801d332:	1998      	adds	r0, r3, r6
 801d334:	2800      	cmp	r0, #0
 801d336:	dc3e      	bgt.n	801d3b6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801d338:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d33c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d340:	f1bb 0f00 	cmp.w	fp, #0
 801d344:	f340 8117 	ble.w	801d576 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801d348:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d34c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d34e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d352:	f1bb 0b01 	subs.w	fp, fp, #1
 801d356:	eeb0 6a62 	vmov.f32	s12, s5
 801d35a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d35e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d362:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d366:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d36a:	eeb0 6a43 	vmov.f32	s12, s6
 801d36e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d372:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d376:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d37a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d37e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d382:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d386:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d38a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d38e:	ee12 2a90 	vmov	r2, s5
 801d392:	eef0 2a47 	vmov.f32	s5, s14
 801d396:	fb92 f3f3 	sdiv	r3, r2, r3
 801d39a:	ee13 2a10 	vmov	r2, s6
 801d39e:	9311      	str	r3, [sp, #68]	; 0x44
 801d3a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d3a2:	eeb0 3a67 	vmov.f32	s6, s15
 801d3a6:	fb92 f3f3 	sdiv	r3, r2, r3
 801d3aa:	9a03      	ldr	r2, [sp, #12]
 801d3ac:	9312      	str	r3, [sp, #72]	; 0x48
 801d3ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d3b0:	bf08      	it	eq
 801d3b2:	4613      	moveq	r3, r2
 801d3b4:	e789      	b.n	801d2ca <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801d3b6:	140f      	asrs	r7, r1, #16
 801d3b8:	d424      	bmi.n	801d404 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d3ba:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801d3be:	42bd      	cmp	r5, r7
 801d3c0:	dd20      	ble.n	801d404 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d3c2:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801d3c6:	d41d      	bmi.n	801d404 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d3c8:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801d3cc:	4560      	cmp	r0, ip
 801d3ce:	dd19      	ble.n	801d404 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d3d0:	b22d      	sxth	r5, r5
 801d3d2:	9801      	ldr	r0, [sp, #4]
 801d3d4:	fb0c 7505 	mla	r5, ip, r5, r7
 801d3d8:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801d3dc:	0e07      	lsrs	r7, r0, #24
 801d3de:	2fff      	cmp	r7, #255	; 0xff
 801d3e0:	d116      	bne.n	801d410 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801d3e2:	f06f 0501 	mvn.w	r5, #1
 801d3e6:	fb05 f706 	mul.w	r7, r5, r6
 801d3ea:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801d3ee:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801d3f2:	0945      	lsrs	r5, r0, #5
 801d3f4:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801d3f8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d3fc:	ea4c 0505 	orr.w	r5, ip, r5
 801d400:	4305      	orrs	r5, r0
 801d402:	53e5      	strh	r5, [r4, r7]
 801d404:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d406:	3e01      	subs	r6, #1
 801d408:	4401      	add	r1, r0
 801d40a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801d40c:	4402      	add	r2, r0
 801d40e:	e790      	b.n	801d332 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d410:	b2fd      	uxtb	r5, r7
 801d412:	2f00      	cmp	r7, #0
 801d414:	d0f6      	beq.n	801d404 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d416:	f06f 0701 	mvn.w	r7, #1
 801d41a:	fa1f f985 	uxth.w	r9, r5
 801d41e:	43ed      	mvns	r5, r5
 801d420:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801d424:	4377      	muls	r7, r6
 801d426:	fb1a fa09 	smulbb	sl, sl, r9
 801d42a:	b2ed      	uxtb	r5, r5
 801d42c:	f834 e007 	ldrh.w	lr, [r4, r7]
 801d430:	9702      	str	r7, [sp, #8]
 801d432:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801d436:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801d43a:	fb17 f709 	smulbb	r7, r7, r9
 801d43e:	b2c0      	uxtb	r0, r0
 801d440:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d444:	fb10 f009 	smulbb	r0, r0, r9
 801d448:	fb0c 7c05 	mla	ip, ip, r5, r7
 801d44c:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801d450:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801d454:	fa1f fc8c 	uxth.w	ip, ip
 801d458:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d45c:	fa5f fe8e 	uxtb.w	lr, lr
 801d460:	fb07 a705 	mla	r7, r7, r5, sl
 801d464:	fb0e 0005 	mla	r0, lr, r5, r0
 801d468:	f10c 0501 	add.w	r5, ip, #1
 801d46c:	b2bf      	uxth	r7, r7
 801d46e:	b280      	uxth	r0, r0
 801d470:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801d474:	f100 0a01 	add.w	sl, r0, #1
 801d478:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801d47c:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801d480:	9802      	ldr	r0, [sp, #8]
 801d482:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801d486:	ea4a 0c0c 	orr.w	ip, sl, ip
 801d48a:	f107 0a01 	add.w	sl, r7, #1
 801d48e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801d492:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d496:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801d49a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801d49e:	f824 c000 	strh.w	ip, [r4, r0]
 801d4a2:	e7af      	b.n	801d404 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d4a4:	f04f 0e00 	mov.w	lr, #0
 801d4a8:	eba3 000e 	sub.w	r0, r3, lr
 801d4ac:	2800      	cmp	r0, #0
 801d4ae:	f77f af43 	ble.w	801d338 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d4b2:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801d4b6:	140d      	asrs	r5, r1, #16
 801d4b8:	1410      	asrs	r0, r2, #16
 801d4ba:	fb06 5000 	mla	r0, r6, r0, r5
 801d4be:	9d01      	ldr	r5, [sp, #4]
 801d4c0:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801d4c4:	0e2e      	lsrs	r6, r5, #24
 801d4c6:	2eff      	cmp	r6, #255	; 0xff
 801d4c8:	d112      	bne.n	801d4f0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801d4ca:	482c      	ldr	r0, [pc, #176]	; (801d57c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801d4cc:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801d4d0:	0968      	lsrs	r0, r5, #5
 801d4d2:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801d4d6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801d4da:	4330      	orrs	r0, r6
 801d4dc:	4328      	orrs	r0, r5
 801d4de:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801d4e2:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d4e4:	f10e 0e01 	add.w	lr, lr, #1
 801d4e8:	4401      	add	r1, r0
 801d4ea:	9812      	ldr	r0, [sp, #72]	; 0x48
 801d4ec:	4402      	add	r2, r0
 801d4ee:	e7db      	b.n	801d4a8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801d4f0:	b2f0      	uxtb	r0, r6
 801d4f2:	2e00      	cmp	r6, #0
 801d4f4:	d0f5      	beq.n	801d4e2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801d4f6:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801d4fa:	fa1f f980 	uxth.w	r9, r0
 801d4fe:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801d502:	43c0      	mvns	r0, r0
 801d504:	ea4f 272c 	mov.w	r7, ip, asr #8
 801d508:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801d50c:	fb16 f609 	smulbb	r6, r6, r9
 801d510:	b2c0      	uxtb	r0, r0
 801d512:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d516:	b2ed      	uxtb	r5, r5
 801d518:	fb1a fa09 	smulbb	sl, sl, r9
 801d51c:	fb07 6700 	mla	r7, r7, r0, r6
 801d520:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801d524:	fb15 f509 	smulbb	r5, r5, r9
 801d528:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801d52c:	b2bf      	uxth	r7, r7
 801d52e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801d532:	fa5f fc8c 	uxtb.w	ip, ip
 801d536:	fb06 a600 	mla	r6, r6, r0, sl
 801d53a:	fb0c 5500 	mla	r5, ip, r0, r5
 801d53e:	1c78      	adds	r0, r7, #1
 801d540:	b2b6      	uxth	r6, r6
 801d542:	b2ad      	uxth	r5, r5
 801d544:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801d548:	f105 0a01 	add.w	sl, r5, #1
 801d54c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801d550:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801d554:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801d558:	ea4a 0707 	orr.w	r7, sl, r7
 801d55c:	f106 0a01 	add.w	sl, r6, #1
 801d560:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801d564:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d568:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801d56c:	ea47 070a 	orr.w	r7, r7, sl
 801d570:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801d574:	e7b5      	b.n	801d4e2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801d576:	b005      	add	sp, #20
 801d578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d57c:	fffff800 	.word	0xfffff800

0801d580 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d584:	b087      	sub	sp, #28
 801d586:	468b      	mov	fp, r1
 801d588:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d58c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801d58e:	9203      	str	r2, [sp, #12]
 801d590:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801d594:	6841      	ldr	r1, [r0, #4]
 801d596:	9204      	str	r2, [sp, #16]
 801d598:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801d59c:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801d5a0:	fb01 2404 	mla	r4, r1, r4, r2
 801d5a4:	6802      	ldr	r2, [r0, #0]
 801d5a6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d5aa:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801d5ae:	3201      	adds	r2, #1
 801d5b0:	f022 0201 	bic.w	r2, r2, #1
 801d5b4:	9200      	str	r2, [sp, #0]
 801d5b6:	f8d9 2000 	ldr.w	r2, [r9]
 801d5ba:	9201      	str	r2, [sp, #4]
 801d5bc:	f1bb 0f00 	cmp.w	fp, #0
 801d5c0:	dc03      	bgt.n	801d5ca <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801d5c2:	9a03      	ldr	r2, [sp, #12]
 801d5c4:	2a00      	cmp	r2, #0
 801d5c6:	f340 816a 	ble.w	801d89e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801d5ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d5cc:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801d5d0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d5d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d5d6:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801d5da:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801d5de:	2b00      	cmp	r3, #0
 801d5e0:	dd0e      	ble.n	801d600 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801d5e2:	1402      	asrs	r2, r0, #16
 801d5e4:	d405      	bmi.n	801d5f2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d5e6:	42ba      	cmp	r2, r7
 801d5e8:	da03      	bge.n	801d5f2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d5ea:	140a      	asrs	r2, r1, #16
 801d5ec:	d401      	bmi.n	801d5f2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d5ee:	42b2      	cmp	r2, r6
 801d5f0:	db07      	blt.n	801d602 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801d5f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d5f4:	3b01      	subs	r3, #1
 801d5f6:	3402      	adds	r4, #2
 801d5f8:	4410      	add	r0, r2
 801d5fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d5fc:	4411      	add	r1, r2
 801d5fe:	e7ee      	b.n	801d5de <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801d600:	d017      	beq.n	801d632 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801d602:	1e5a      	subs	r2, r3, #1
 801d604:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801d606:	fb05 0502 	mla	r5, r5, r2, r0
 801d60a:	142d      	asrs	r5, r5, #16
 801d60c:	d409      	bmi.n	801d622 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801d60e:	42bd      	cmp	r5, r7
 801d610:	da07      	bge.n	801d622 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801d612:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801d614:	fb05 1202 	mla	r2, r5, r2, r1
 801d618:	1412      	asrs	r2, r2, #16
 801d61a:	d402      	bmi.n	801d622 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801d61c:	42b2      	cmp	r2, r6
 801d61e:	f2c0 80c8 	blt.w	801d7b2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801d622:	2700      	movs	r7, #0
 801d624:	19da      	adds	r2, r3, r7
 801d626:	2a00      	cmp	r2, #0
 801d628:	dc3e      	bgt.n	801d6a8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801d62a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d62e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d632:	f1bb 0f00 	cmp.w	fp, #0
 801d636:	f340 8132 	ble.w	801d89e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801d63a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d63e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d640:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d644:	f1bb 0b01 	subs.w	fp, fp, #1
 801d648:	eeb0 6a62 	vmov.f32	s12, s5
 801d64c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d650:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d654:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d658:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d65c:	eeb0 6a43 	vmov.f32	s12, s6
 801d660:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d664:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d668:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d66c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d670:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d674:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d678:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d67c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d680:	ee12 2a90 	vmov	r2, s5
 801d684:	eef0 2a47 	vmov.f32	s5, s14
 801d688:	fb92 f3f3 	sdiv	r3, r2, r3
 801d68c:	ee13 2a10 	vmov	r2, s6
 801d690:	9313      	str	r3, [sp, #76]	; 0x4c
 801d692:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d694:	eeb0 3a67 	vmov.f32	s6, s15
 801d698:	fb92 f3f3 	sdiv	r3, r2, r3
 801d69c:	9a03      	ldr	r2, [sp, #12]
 801d69e:	9314      	str	r3, [sp, #80]	; 0x50
 801d6a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d6a2:	bf08      	it	eq
 801d6a4:	4613      	moveq	r3, r2
 801d6a6:	e789      	b.n	801d5bc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801d6a8:	1405      	asrs	r5, r0, #16
 801d6aa:	d436      	bmi.n	801d71a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801d6ac:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801d6b0:	42aa      	cmp	r2, r5
 801d6b2:	dd32      	ble.n	801d71a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801d6b4:	140e      	asrs	r6, r1, #16
 801d6b6:	d430      	bmi.n	801d71a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801d6b8:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801d6bc:	42b2      	cmp	r2, r6
 801d6be:	dd2c      	ble.n	801d71a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801d6c0:	9a00      	ldr	r2, [sp, #0]
 801d6c2:	fb06 5502 	mla	r5, r6, r2, r5
 801d6c6:	9e01      	ldr	r6, [sp, #4]
 801d6c8:	086a      	lsrs	r2, r5, #1
 801d6ca:	5cb2      	ldrb	r2, [r6, r2]
 801d6cc:	07ee      	lsls	r6, r5, #31
 801d6ce:	bf54      	ite	pl
 801d6d0:	f002 020f 	andpl.w	r2, r2, #15
 801d6d4:	1112      	asrmi	r2, r2, #4
 801d6d6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d6da:	b2d2      	uxtb	r2, r2
 801d6dc:	b1ea      	cbz	r2, 801d71a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801d6de:	9d04      	ldr	r5, [sp, #16]
 801d6e0:	436a      	muls	r2, r5
 801d6e2:	1c55      	adds	r5, r2, #1
 801d6e4:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801d6e8:	4d6e      	ldr	r5, [pc, #440]	; (801d8a4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801d6ea:	1212      	asrs	r2, r2, #8
 801d6ec:	682d      	ldr	r5, [r5, #0]
 801d6ee:	2aff      	cmp	r2, #255	; 0xff
 801d6f0:	ea4f 2615 	mov.w	r6, r5, lsr #8
 801d6f4:	9605      	str	r6, [sp, #20]
 801d6f6:	d116      	bne.n	801d726 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801d6f8:	f06f 0201 	mvn.w	r2, #1
 801d6fc:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801d700:	fb02 fc07 	mul.w	ip, r2, r7
 801d704:	096a      	lsrs	r2, r5, #5
 801d706:	f026 0607 	bic.w	r6, r6, #7
 801d70a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801d70e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d712:	4316      	orrs	r6, r2
 801d714:	432e      	orrs	r6, r5
 801d716:	f824 600c 	strh.w	r6, [r4, ip]
 801d71a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d71c:	3f01      	subs	r7, #1
 801d71e:	4410      	add	r0, r2
 801d720:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d722:	4411      	add	r1, r2
 801d724:	e77e      	b.n	801d624 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801d726:	f06f 0601 	mvn.w	r6, #1
 801d72a:	fa1f fa82 	uxth.w	sl, r2
 801d72e:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 801d732:	43d2      	mvns	r2, r2
 801d734:	437e      	muls	r6, r7
 801d736:	b2ed      	uxtb	r5, r5
 801d738:	fb1c fc0a 	smulbb	ip, ip, sl
 801d73c:	b2d2      	uxtb	r2, r2
 801d73e:	f834 8006 	ldrh.w	r8, [r4, r6]
 801d742:	fb15 f50a 	smulbb	r5, r5, sl
 801d746:	9602      	str	r6, [sp, #8]
 801d748:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801d74c:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801d750:	fb16 f60a 	smulbb	r6, r6, sl
 801d754:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801d758:	fb0e ce02 	mla	lr, lr, r2, ip
 801d75c:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801d760:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801d764:	fa1f fe8e 	uxth.w	lr, lr
 801d768:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801d76c:	fa5f f888 	uxtb.w	r8, r8
 801d770:	fb0c 6c02 	mla	ip, ip, r2, r6
 801d774:	fb08 5502 	mla	r5, r8, r2, r5
 801d778:	f10e 0201 	add.w	r2, lr, #1
 801d77c:	fa1f fc8c 	uxth.w	ip, ip
 801d780:	b2ad      	uxth	r5, r5
 801d782:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801d786:	9a02      	ldr	r2, [sp, #8]
 801d788:	1c6e      	adds	r6, r5, #1
 801d78a:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801d78e:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 801d792:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801d796:	ea46 0e0e 	orr.w	lr, r6, lr
 801d79a:	f10c 0601 	add.w	r6, ip, #1
 801d79e:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801d7a2:	0976      	lsrs	r6, r6, #5
 801d7a4:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801d7a8:	ea4e 0e06 	orr.w	lr, lr, r6
 801d7ac:	f824 e002 	strh.w	lr, [r4, r2]
 801d7b0:	e7b3      	b.n	801d71a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801d7b2:	f04f 0800 	mov.w	r8, #0
 801d7b6:	eba3 0208 	sub.w	r2, r3, r8
 801d7ba:	2a00      	cmp	r2, #0
 801d7bc:	f77f af35 	ble.w	801d62a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801d7c0:	1402      	asrs	r2, r0, #16
 801d7c2:	9e00      	ldr	r6, [sp, #0]
 801d7c4:	140d      	asrs	r5, r1, #16
 801d7c6:	fb06 2505 	mla	r5, r6, r5, r2
 801d7ca:	9e01      	ldr	r6, [sp, #4]
 801d7cc:	086a      	lsrs	r2, r5, #1
 801d7ce:	07ed      	lsls	r5, r5, #31
 801d7d0:	5cb2      	ldrb	r2, [r6, r2]
 801d7d2:	bf54      	ite	pl
 801d7d4:	f002 020f 	andpl.w	r2, r2, #15
 801d7d8:	1112      	asrmi	r2, r2, #4
 801d7da:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d7de:	b2d2      	uxtb	r2, r2
 801d7e0:	b1c2      	cbz	r2, 801d814 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801d7e2:	9d04      	ldr	r5, [sp, #16]
 801d7e4:	436a      	muls	r2, r5
 801d7e6:	1c55      	adds	r5, r2, #1
 801d7e8:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801d7ec:	4d2d      	ldr	r5, [pc, #180]	; (801d8a4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801d7ee:	1212      	asrs	r2, r2, #8
 801d7f0:	682e      	ldr	r6, [r5, #0]
 801d7f2:	2aff      	cmp	r2, #255	; 0xff
 801d7f4:	ea4f 2516 	mov.w	r5, r6, lsr #8
 801d7f8:	d113      	bne.n	801d822 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801d7fa:	0972      	lsrs	r2, r6, #5
 801d7fc:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 801d800:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801d804:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d808:	f025 0507 	bic.w	r5, r5, #7
 801d80c:	4315      	orrs	r5, r2
 801d80e:	4335      	orrs	r5, r6
 801d810:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801d814:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d816:	f108 0801 	add.w	r8, r8, #1
 801d81a:	4410      	add	r0, r2
 801d81c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d81e:	4411      	add	r1, r2
 801d820:	e7c9      	b.n	801d7b6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801d822:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801d826:	fa1f fa82 	uxth.w	sl, r2
 801d82a:	f3c6 4707 	ubfx	r7, r6, #16, #8
 801d82e:	43d2      	mvns	r2, r2
 801d830:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801d834:	fb17 f70a 	smulbb	r7, r7, sl
 801d838:	b2d2      	uxtb	r2, r2
 801d83a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d83e:	b2f6      	uxtb	r6, r6
 801d840:	b2ed      	uxtb	r5, r5
 801d842:	fb0c 7c02 	mla	ip, ip, r2, r7
 801d846:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801d84a:	fb16 f60a 	smulbb	r6, r6, sl
 801d84e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801d852:	fa1f fc8c 	uxth.w	ip, ip
 801d856:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d85a:	fb15 f50a 	smulbb	r5, r5, sl
 801d85e:	fa5f fe8e 	uxtb.w	lr, lr
 801d862:	fb0e 6602 	mla	r6, lr, r2, r6
 801d866:	fb07 5702 	mla	r7, r7, r2, r5
 801d86a:	f10c 0201 	add.w	r2, ip, #1
 801d86e:	b2b6      	uxth	r6, r6
 801d870:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801d874:	1c75      	adds	r5, r6, #1
 801d876:	b2bf      	uxth	r7, r7
 801d878:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801d87c:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801d880:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801d884:	ea45 0c0c 	orr.w	ip, r5, ip
 801d888:	1c7d      	adds	r5, r7, #1
 801d88a:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 801d88e:	096d      	lsrs	r5, r5, #5
 801d890:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d894:	ea4c 0c05 	orr.w	ip, ip, r5
 801d898:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 801d89c:	e7ba      	b.n	801d814 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801d89e:	b007      	add	sp, #28
 801d8a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d8a4:	20014bec 	.word	0x20014bec

0801d8a8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8ac:	b087      	sub	sp, #28
 801d8ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d8b2:	f8df 8308 	ldr.w	r8, [pc, #776]	; 801dbbc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801d8b6:	9815      	ldr	r0, [sp, #84]	; 0x54
 801d8b8:	9101      	str	r1, [sp, #4]
 801d8ba:	9205      	str	r2, [sp, #20]
 801d8bc:	6841      	ldr	r1, [r0, #4]
 801d8be:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 801d8c2:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801d8c6:	fb01 2404 	mla	r4, r1, r4, r2
 801d8ca:	6802      	ldr	r2, [r0, #0]
 801d8cc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d8d0:	f8db 2008 	ldr.w	r2, [fp, #8]
 801d8d4:	3201      	adds	r2, #1
 801d8d6:	f022 0201 	bic.w	r2, r2, #1
 801d8da:	9202      	str	r2, [sp, #8]
 801d8dc:	f8db 2000 	ldr.w	r2, [fp]
 801d8e0:	9203      	str	r2, [sp, #12]
 801d8e2:	9a01      	ldr	r2, [sp, #4]
 801d8e4:	2a00      	cmp	r2, #0
 801d8e6:	dc03      	bgt.n	801d8f0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801d8e8:	9a05      	ldr	r2, [sp, #20]
 801d8ea:	2a00      	cmp	r2, #0
 801d8ec:	f340 8162 	ble.w	801dbb4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801d8f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d8f2:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801d8f6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d8fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d8fc:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801d900:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801d904:	2b00      	cmp	r3, #0
 801d906:	dd0e      	ble.n	801d926 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d908:	1402      	asrs	r2, r0, #16
 801d90a:	d405      	bmi.n	801d918 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d90c:	42ba      	cmp	r2, r7
 801d90e:	da03      	bge.n	801d918 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d910:	140a      	asrs	r2, r1, #16
 801d912:	d401      	bmi.n	801d918 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d914:	42b2      	cmp	r2, r6
 801d916:	db07      	blt.n	801d928 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801d918:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d91a:	3b01      	subs	r3, #1
 801d91c:	3402      	adds	r4, #2
 801d91e:	4410      	add	r0, r2
 801d920:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d922:	4411      	add	r1, r2
 801d924:	e7ee      	b.n	801d904 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801d926:	d017      	beq.n	801d958 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801d928:	1e5a      	subs	r2, r3, #1
 801d92a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801d92c:	fb05 0502 	mla	r5, r5, r2, r0
 801d930:	142d      	asrs	r5, r5, #16
 801d932:	d409      	bmi.n	801d948 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801d934:	42bd      	cmp	r5, r7
 801d936:	da07      	bge.n	801d948 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801d938:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801d93a:	fb05 1202 	mla	r2, r5, r2, r1
 801d93e:	1412      	asrs	r2, r2, #16
 801d940:	d402      	bmi.n	801d948 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801d942:	42b2      	cmp	r2, r6
 801d944:	f2c0 80c3 	blt.w	801dace <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 801d948:	2500      	movs	r5, #0
 801d94a:	195a      	adds	r2, r3, r5
 801d94c:	2a00      	cmp	r2, #0
 801d94e:	dc3f      	bgt.n	801d9d0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801d950:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d954:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d958:	9b01      	ldr	r3, [sp, #4]
 801d95a:	2b00      	cmp	r3, #0
 801d95c:	f340 812a 	ble.w	801dbb4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801d960:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d964:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d966:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d96a:	eeb0 6a62 	vmov.f32	s12, s5
 801d96e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d972:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d976:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d97a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d97e:	eeb0 6a43 	vmov.f32	s12, s6
 801d982:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d986:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d98a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d98e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d992:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d996:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d99a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d99e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d9a2:	ee12 2a90 	vmov	r2, s5
 801d9a6:	eef0 2a47 	vmov.f32	s5, s14
 801d9aa:	fb92 f3f3 	sdiv	r3, r2, r3
 801d9ae:	ee13 2a10 	vmov	r2, s6
 801d9b2:	9313      	str	r3, [sp, #76]	; 0x4c
 801d9b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d9b6:	eeb0 3a67 	vmov.f32	s6, s15
 801d9ba:	fb92 f3f3 	sdiv	r3, r2, r3
 801d9be:	9314      	str	r3, [sp, #80]	; 0x50
 801d9c0:	9b01      	ldr	r3, [sp, #4]
 801d9c2:	9a05      	ldr	r2, [sp, #20]
 801d9c4:	3b01      	subs	r3, #1
 801d9c6:	9301      	str	r3, [sp, #4]
 801d9c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d9ca:	bf08      	it	eq
 801d9cc:	4613      	moveq	r3, r2
 801d9ce:	e788      	b.n	801d8e2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801d9d0:	1406      	asrs	r6, r0, #16
 801d9d2:	d42c      	bmi.n	801da2e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801d9d4:	f8db 2008 	ldr.w	r2, [fp, #8]
 801d9d8:	42b2      	cmp	r2, r6
 801d9da:	dd28      	ble.n	801da2e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801d9dc:	140f      	asrs	r7, r1, #16
 801d9de:	d426      	bmi.n	801da2e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801d9e0:	f8db 200c 	ldr.w	r2, [fp, #12]
 801d9e4:	42ba      	cmp	r2, r7
 801d9e6:	dd22      	ble.n	801da2e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801d9e8:	9a02      	ldr	r2, [sp, #8]
 801d9ea:	fb07 6602 	mla	r6, r7, r2, r6
 801d9ee:	9f03      	ldr	r7, [sp, #12]
 801d9f0:	0872      	lsrs	r2, r6, #1
 801d9f2:	07f6      	lsls	r6, r6, #31
 801d9f4:	5cba      	ldrb	r2, [r7, r2]
 801d9f6:	bf54      	ite	pl
 801d9f8:	f002 020f 	andpl.w	r2, r2, #15
 801d9fc:	1112      	asrmi	r2, r2, #4
 801d9fe:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801da02:	b2d2      	uxtb	r2, r2
 801da04:	2aff      	cmp	r2, #255	; 0xff
 801da06:	d118      	bne.n	801da3a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801da08:	f06f 0601 	mvn.w	r6, #1
 801da0c:	f8d8 2000 	ldr.w	r2, [r8]
 801da10:	fb06 f705 	mul.w	r7, r6, r5
 801da14:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 801da18:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 801da1c:	0956      	lsrs	r6, r2, #5
 801da1e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801da22:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801da26:	ea4c 0606 	orr.w	r6, ip, r6
 801da2a:	4316      	orrs	r6, r2
 801da2c:	53e6      	strh	r6, [r4, r7]
 801da2e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801da30:	3d01      	subs	r5, #1
 801da32:	4410      	add	r0, r2
 801da34:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801da36:	4411      	add	r1, r2
 801da38:	e787      	b.n	801d94a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801da3a:	2a00      	cmp	r2, #0
 801da3c:	d0f7      	beq.n	801da2e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801da3e:	f06f 0601 	mvn.w	r6, #1
 801da42:	f8d8 c000 	ldr.w	ip, [r8]
 801da46:	fa1f f982 	uxth.w	r9, r2
 801da4a:	43d2      	mvns	r2, r2
 801da4c:	436e      	muls	r6, r5
 801da4e:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 801da52:	b2d2      	uxtb	r2, r2
 801da54:	f834 e006 	ldrh.w	lr, [r4, r6]
 801da58:	fb1a fa09 	smulbb	sl, sl, r9
 801da5c:	9604      	str	r6, [sp, #16]
 801da5e:	f3cc 4607 	ubfx	r6, ip, #16, #8
 801da62:	ea4f 272e 	mov.w	r7, lr, asr #8
 801da66:	fb16 f609 	smulbb	r6, r6, r9
 801da6a:	fa5f fc8c 	uxtb.w	ip, ip
 801da6e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801da72:	fb1c fc09 	smulbb	ip, ip, r9
 801da76:	fb07 6702 	mla	r7, r7, r2, r6
 801da7a:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801da7e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801da82:	b2bf      	uxth	r7, r7
 801da84:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801da88:	fa5f fe8e 	uxtb.w	lr, lr
 801da8c:	fb06 a602 	mla	r6, r6, r2, sl
 801da90:	fb0e cc02 	mla	ip, lr, r2, ip
 801da94:	1c7a      	adds	r2, r7, #1
 801da96:	b2b6      	uxth	r6, r6
 801da98:	fa1f fc8c 	uxth.w	ip, ip
 801da9c:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801daa0:	9a04      	ldr	r2, [sp, #16]
 801daa2:	f10c 0a01 	add.w	sl, ip, #1
 801daa6:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801daaa:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801daae:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801dab2:	ea4a 0707 	orr.w	r7, sl, r7
 801dab6:	f106 0a01 	add.w	sl, r6, #1
 801daba:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801dabe:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801dac2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801dac6:	ea47 070a 	orr.w	r7, r7, sl
 801daca:	52a7      	strh	r7, [r4, r2]
 801dacc:	e7af      	b.n	801da2e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801dace:	f04f 0e00 	mov.w	lr, #0
 801dad2:	eba3 020e 	sub.w	r2, r3, lr
 801dad6:	2a00      	cmp	r2, #0
 801dad8:	f77f af3a 	ble.w	801d950 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801dadc:	1402      	asrs	r2, r0, #16
 801dade:	9e02      	ldr	r6, [sp, #8]
 801dae0:	140d      	asrs	r5, r1, #16
 801dae2:	fb06 2505 	mla	r5, r6, r5, r2
 801dae6:	9e03      	ldr	r6, [sp, #12]
 801dae8:	086a      	lsrs	r2, r5, #1
 801daea:	07ed      	lsls	r5, r5, #31
 801daec:	5cb2      	ldrb	r2, [r6, r2]
 801daee:	bf54      	ite	pl
 801daf0:	f002 020f 	andpl.w	r2, r2, #15
 801daf4:	1112      	asrmi	r2, r2, #4
 801daf6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801dafa:	b2d2      	uxtb	r2, r2
 801dafc:	2aff      	cmp	r2, #255	; 0xff
 801dafe:	d115      	bne.n	801db2c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801db00:	f8d8 5000 	ldr.w	r5, [r8]
 801db04:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 801db08:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 801db0c:	096a      	lsrs	r2, r5, #5
 801db0e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801db12:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801db16:	4332      	orrs	r2, r6
 801db18:	432a      	orrs	r2, r5
 801db1a:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 801db1e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801db20:	f10e 0e01 	add.w	lr, lr, #1
 801db24:	4410      	add	r0, r2
 801db26:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801db28:	4411      	add	r1, r2
 801db2a:	e7d2      	b.n	801dad2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801db2c:	2a00      	cmp	r2, #0
 801db2e:	d0f6      	beq.n	801db1e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801db30:	f8d8 7000 	ldr.w	r7, [r8]
 801db34:	fa1f f982 	uxth.w	r9, r2
 801db38:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801db3c:	43d2      	mvns	r2, r2
 801db3e:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801db42:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801db46:	ea4f 262c 	mov.w	r6, ip, asr #8
 801db4a:	fb15 f509 	smulbb	r5, r5, r9
 801db4e:	b2d2      	uxtb	r2, r2
 801db50:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801db54:	b2ff      	uxtb	r7, r7
 801db56:	fb1a fa09 	smulbb	sl, sl, r9
 801db5a:	fb06 5602 	mla	r6, r6, r2, r5
 801db5e:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801db62:	fb17 f709 	smulbb	r7, r7, r9
 801db66:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801db6a:	b2b6      	uxth	r6, r6
 801db6c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801db70:	fa5f fc8c 	uxtb.w	ip, ip
 801db74:	fb05 a502 	mla	r5, r5, r2, sl
 801db78:	fb0c 7702 	mla	r7, ip, r2, r7
 801db7c:	1c72      	adds	r2, r6, #1
 801db7e:	b2ad      	uxth	r5, r5
 801db80:	b2bf      	uxth	r7, r7
 801db82:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801db86:	f107 0a01 	add.w	sl, r7, #1
 801db8a:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801db8e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801db92:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801db96:	ea4a 0606 	orr.w	r6, sl, r6
 801db9a:	f105 0a01 	add.w	sl, r5, #1
 801db9e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801dba2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801dba6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801dbaa:	ea46 060a 	orr.w	r6, r6, sl
 801dbae:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 801dbb2:	e7b4      	b.n	801db1e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801dbb4:	b007      	add	sp, #28
 801dbb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dbba:	bf00      	nop
 801dbbc:	20014bec 	.word	0x20014bec

0801dbc0 <_ZN8touchgfx8LCD16bppD1Ev>:
 801dbc0:	4770      	bx	lr

0801dbc2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801dbc2:	4770      	bx	lr

0801dbc4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801dbc4:	4770      	bx	lr

0801dbc6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801dbc6:	4770      	bx	lr

0801dbc8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801dbc8:	4770      	bx	lr

0801dbca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801dbca:	4770      	bx	lr

0801dbcc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801dbcc:	4770      	bx	lr

0801dbce <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801dbce:	4770      	bx	lr

0801dbd0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801dbd0:	4770      	bx	lr

0801dbd2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801dbd2:	4770      	bx	lr

0801dbd4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801dbd4:	4770      	bx	lr

0801dbd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801dbd6:	4770      	bx	lr

0801dbd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801dbd8:	4770      	bx	lr

0801dbda <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801dbda:	4770      	bx	lr

0801dbdc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801dbdc:	4770      	bx	lr

0801dbde <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801dbde:	4770      	bx	lr

0801dbe0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801dbe0:	4770      	bx	lr

0801dbe2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801dbe2:	4770      	bx	lr

0801dbe4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801dbe4:	4770      	bx	lr

0801dbe6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801dbe6:	4770      	bx	lr

0801dbe8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801dbe8:	4770      	bx	lr

0801dbea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801dbea:	4770      	bx	lr

0801dbec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801dbec:	4770      	bx	lr

0801dbee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801dbee:	4770      	bx	lr

0801dbf0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801dbf0:	4770      	bx	lr

0801dbf2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801dbf2:	4770      	bx	lr

0801dbf4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801dbf4:	4770      	bx	lr

0801dbf6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801dbf6:	4770      	bx	lr

0801dbf8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801dbf8:	4770      	bx	lr
	...

0801dbfc <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801dbfc:	b508      	push	{r3, lr}
 801dbfe:	4b06      	ldr	r3, [pc, #24]	; (801dc18 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 801dc00:	8818      	ldrh	r0, [r3, #0]
 801dc02:	b928      	cbnz	r0, 801dc10 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 801dc04:	4b05      	ldr	r3, [pc, #20]	; (801dc1c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 801dc06:	2150      	movs	r1, #80	; 0x50
 801dc08:	4a05      	ldr	r2, [pc, #20]	; (801dc20 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 801dc0a:	4806      	ldr	r0, [pc, #24]	; (801dc24 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 801dc0c:	f009 fbfa 	bl	8027404 <__assert_func>
 801dc10:	0040      	lsls	r0, r0, #1
 801dc12:	b280      	uxth	r0, r0
 801dc14:	bd08      	pop	{r3, pc}
 801dc16:	bf00      	nop
 801dc18:	20014bde 	.word	0x20014bde
 801dc1c:	0802e3f8 	.word	0x0802e3f8
 801dc20:	0802e9f4 	.word	0x0802e9f4
 801dc24:	0802e43a 	.word	0x0802e43a

0801dc28 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801dc28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc2c:	b08b      	sub	sp, #44	; 0x2c
 801dc2e:	460f      	mov	r7, r1
 801dc30:	4616      	mov	r6, r2
 801dc32:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801dc36:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801dc3a:	f1bb 0f00 	cmp.w	fp, #0
 801dc3e:	d049      	beq.n	801dcd4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801dc40:	6810      	ldr	r0, [r2, #0]
 801dc42:	ad06      	add	r5, sp, #24
 801dc44:	6851      	ldr	r1, [r2, #4]
 801dc46:	c503      	stmia	r5!, {r0, r1}
 801dc48:	6818      	ldr	r0, [r3, #0]
 801dc4a:	ad08      	add	r5, sp, #32
 801dc4c:	6859      	ldr	r1, [r3, #4]
 801dc4e:	c503      	stmia	r5!, {r0, r1}
 801dc50:	a806      	add	r0, sp, #24
 801dc52:	f7fa fd79 	bl	8018748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dc56:	4631      	mov	r1, r6
 801dc58:	a808      	add	r0, sp, #32
 801dc5a:	f7fa fd9d 	bl	8018798 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801dc5e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801dc62:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801dc66:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801dc6a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801dc6e:	fb16 2103 	smlabb	r1, r6, r3, r2
 801dc72:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801dc76:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801dc7a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801dc7e:	4f5f      	ldr	r7, [pc, #380]	; (801ddfc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801dc80:	440a      	add	r2, r1
 801dc82:	6838      	ldr	r0, [r7, #0]
 801dc84:	46b9      	mov	r9, r7
 801dc86:	f8ad 2020 	strh.w	r2, [sp, #32]
 801dc8a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801dc8e:	4413      	add	r3, r2
 801dc90:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801dc94:	6803      	ldr	r3, [r0, #0]
 801dc96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dc98:	4798      	blx	r3
 801dc9a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801dc9e:	d01c      	beq.n	801dcda <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801dca0:	f010 0f04 	tst.w	r0, #4
 801dca4:	d01d      	beq.n	801dce2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801dca6:	f8d9 0000 	ldr.w	r0, [r9]
 801dcaa:	2700      	movs	r7, #0
 801dcac:	b2ad      	uxth	r5, r5
 801dcae:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801dcb2:	6801      	ldr	r1, [r0, #0]
 801dcb4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801dcb8:	f8cd b00c 	str.w	fp, [sp, #12]
 801dcbc:	9501      	str	r5, [sp, #4]
 801dcbe:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801dcc2:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801dcc6:	9402      	str	r4, [sp, #8]
 801dcc8:	fa1f f488 	uxth.w	r4, r8
 801dccc:	9400      	str	r4, [sp, #0]
 801dcce:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 801dcd0:	4631      	mov	r1, r6
 801dcd2:	47a0      	blx	r4
 801dcd4:	b00b      	add	sp, #44	; 0x2c
 801dcd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dcda:	b914      	cbnz	r4, 801dce2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801dcdc:	f010 0f01 	tst.w	r0, #1
 801dce0:	e7e0      	b.n	801dca4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 801dce2:	f8d9 0000 	ldr.w	r0, [r9]
 801dce6:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801dcea:	6803      	ldr	r3, [r0, #0]
 801dcec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dcee:	4798      	blx	r3
 801dcf0:	4b43      	ldr	r3, [pc, #268]	; (801de00 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801dcf2:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801dcf6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801dcfa:	881a      	ldrh	r2, [r3, #0]
 801dcfc:	469a      	mov	sl, r3
 801dcfe:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801dd02:	fb05 f502 	mul.w	r5, r5, r2
 801dd06:	fb02 1404 	mla	r4, r2, r4, r1
 801dd0a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801dd0e:	d059      	beq.n	801ddc4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801dd10:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 801dd14:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801dd18:	fa1f f28b 	uxth.w	r2, fp
 801dd1c:	469e      	mov	lr, r3
 801dd1e:	fa1f f989 	uxth.w	r9, r9
 801dd22:	42ac      	cmp	r4, r5
 801dd24:	d264      	bcs.n	801ddf0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801dd26:	eb04 0a07 	add.w	sl, r4, r7
 801dd2a:	4554      	cmp	r4, sl
 801dd2c:	d23d      	bcs.n	801ddaa <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801dd2e:	8821      	ldrh	r1, [r4, #0]
 801dd30:	f836 3b02 	ldrh.w	r3, [r6], #2
 801dd34:	1208      	asrs	r0, r1, #8
 801dd36:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801dd3a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801dd3e:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801dd42:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801dd46:	00c9      	lsls	r1, r1, #3
 801dd48:	fb10 f009 	smulbb	r0, r0, r9
 801dd4c:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801dd50:	b2c9      	uxtb	r1, r1
 801dd52:	fb0c 0c02 	mla	ip, ip, r2, r0
 801dd56:	10d8      	asrs	r0, r3, #3
 801dd58:	fb1b fb09 	smulbb	fp, fp, r9
 801dd5c:	00db      	lsls	r3, r3, #3
 801dd5e:	fa1f fc8c 	uxth.w	ip, ip
 801dd62:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801dd66:	fb11 f109 	smulbb	r1, r1, r9
 801dd6a:	b2db      	uxtb	r3, r3
 801dd6c:	fb00 b002 	mla	r0, r0, r2, fp
 801dd70:	f10c 0b01 	add.w	fp, ip, #1
 801dd74:	fb03 1302 	mla	r3, r3, r2, r1
 801dd78:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801dd7c:	b29b      	uxth	r3, r3
 801dd7e:	b280      	uxth	r0, r0
 801dd80:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 801dd84:	f103 0c01 	add.w	ip, r3, #1
 801dd88:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801dd8c:	1c43      	adds	r3, r0, #1
 801dd8e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801dd92:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801dd96:	0940      	lsrs	r0, r0, #5
 801dd98:	ea4c 0c0b 	orr.w	ip, ip, fp
 801dd9c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801dda0:	ea4c 0c00 	orr.w	ip, ip, r0
 801dda4:	f824 cb02 	strh.w	ip, [r4], #2
 801dda8:	e7bf      	b.n	801dd2a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801ddaa:	f8be 3000 	ldrh.w	r3, [lr]
 801ddae:	eba3 0308 	sub.w	r3, r3, r8
 801ddb2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ddb6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801ddba:	eba3 0308 	sub.w	r3, r3, r8
 801ddbe:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801ddc2:	e7ae      	b.n	801dd22 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801ddc4:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801ddc8:	f8d9 0000 	ldr.w	r0, [r9]
 801ddcc:	42ac      	cmp	r4, r5
 801ddce:	6803      	ldr	r3, [r0, #0]
 801ddd0:	d20e      	bcs.n	801ddf0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801ddd2:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 801ddd6:	4632      	mov	r2, r6
 801ddd8:	463b      	mov	r3, r7
 801ddda:	4621      	mov	r1, r4
 801dddc:	47c0      	blx	r8
 801ddde:	f8ba 3000 	ldrh.w	r3, [sl]
 801dde2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801dde6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801ddea:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801ddee:	e7eb      	b.n	801ddc8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801ddf0:	4b02      	ldr	r3, [pc, #8]	; (801ddfc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801ddf2:	6818      	ldr	r0, [r3, #0]
 801ddf4:	6803      	ldr	r3, [r0, #0]
 801ddf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ddf8:	4798      	blx	r3
 801ddfa:	e76b      	b.n	801dcd4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801ddfc:	20014be4 	.word	0x20014be4
 801de00:	20014bde 	.word	0x20014bde

0801de04 <_ZN8touchgfx8LCD16bppD0Ev>:
 801de04:	b510      	push	{r4, lr}
 801de06:	4604      	mov	r4, r0
 801de08:	2178      	movs	r1, #120	; 0x78
 801de0a:	f009 facd 	bl	80273a8 <_ZdlPvj>
 801de0e:	4620      	mov	r0, r4
 801de10:	bd10      	pop	{r4, pc}

0801de12 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801de12:	b510      	push	{r4, lr}
 801de14:	4604      	mov	r4, r0
 801de16:	2104      	movs	r1, #4
 801de18:	f009 fac6 	bl	80273a8 <_ZdlPvj>
 801de1c:	4620      	mov	r0, r4
 801de1e:	bd10      	pop	{r4, pc}

0801de20 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801de20:	b510      	push	{r4, lr}
 801de22:	4604      	mov	r4, r0
 801de24:	2104      	movs	r1, #4
 801de26:	f009 fabf 	bl	80273a8 <_ZdlPvj>
 801de2a:	4620      	mov	r0, r4
 801de2c:	bd10      	pop	{r4, pc}

0801de2e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801de2e:	b510      	push	{r4, lr}
 801de30:	4604      	mov	r4, r0
 801de32:	2104      	movs	r1, #4
 801de34:	f009 fab8 	bl	80273a8 <_ZdlPvj>
 801de38:	4620      	mov	r0, r4
 801de3a:	bd10      	pop	{r4, pc}

0801de3c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801de3c:	b510      	push	{r4, lr}
 801de3e:	4604      	mov	r4, r0
 801de40:	2104      	movs	r1, #4
 801de42:	f009 fab1 	bl	80273a8 <_ZdlPvj>
 801de46:	4620      	mov	r0, r4
 801de48:	bd10      	pop	{r4, pc}

0801de4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801de4a:	b510      	push	{r4, lr}
 801de4c:	4604      	mov	r4, r0
 801de4e:	2104      	movs	r1, #4
 801de50:	f009 faaa 	bl	80273a8 <_ZdlPvj>
 801de54:	4620      	mov	r0, r4
 801de56:	bd10      	pop	{r4, pc}

0801de58 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801de58:	b510      	push	{r4, lr}
 801de5a:	4604      	mov	r4, r0
 801de5c:	2104      	movs	r1, #4
 801de5e:	f009 faa3 	bl	80273a8 <_ZdlPvj>
 801de62:	4620      	mov	r0, r4
 801de64:	bd10      	pop	{r4, pc}

0801de66 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801de66:	b510      	push	{r4, lr}
 801de68:	4604      	mov	r4, r0
 801de6a:	2104      	movs	r1, #4
 801de6c:	f009 fa9c 	bl	80273a8 <_ZdlPvj>
 801de70:	4620      	mov	r0, r4
 801de72:	bd10      	pop	{r4, pc}

0801de74 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801de74:	b510      	push	{r4, lr}
 801de76:	4604      	mov	r4, r0
 801de78:	2104      	movs	r1, #4
 801de7a:	f009 fa95 	bl	80273a8 <_ZdlPvj>
 801de7e:	4620      	mov	r0, r4
 801de80:	bd10      	pop	{r4, pc}

0801de82 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801de82:	b510      	push	{r4, lr}
 801de84:	4604      	mov	r4, r0
 801de86:	2104      	movs	r1, #4
 801de88:	f009 fa8e 	bl	80273a8 <_ZdlPvj>
 801de8c:	4620      	mov	r0, r4
 801de8e:	bd10      	pop	{r4, pc}

0801de90 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801de90:	b510      	push	{r4, lr}
 801de92:	4604      	mov	r4, r0
 801de94:	2104      	movs	r1, #4
 801de96:	f009 fa87 	bl	80273a8 <_ZdlPvj>
 801de9a:	4620      	mov	r0, r4
 801de9c:	bd10      	pop	{r4, pc}

0801de9e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801de9e:	b510      	push	{r4, lr}
 801dea0:	4604      	mov	r4, r0
 801dea2:	2104      	movs	r1, #4
 801dea4:	f009 fa80 	bl	80273a8 <_ZdlPvj>
 801dea8:	4620      	mov	r0, r4
 801deaa:	bd10      	pop	{r4, pc}

0801deac <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801deac:	b510      	push	{r4, lr}
 801deae:	4604      	mov	r4, r0
 801deb0:	2104      	movs	r1, #4
 801deb2:	f009 fa79 	bl	80273a8 <_ZdlPvj>
 801deb6:	4620      	mov	r0, r4
 801deb8:	bd10      	pop	{r4, pc}

0801deba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801deba:	b510      	push	{r4, lr}
 801debc:	4604      	mov	r4, r0
 801debe:	2104      	movs	r1, #4
 801dec0:	f009 fa72 	bl	80273a8 <_ZdlPvj>
 801dec4:	4620      	mov	r0, r4
 801dec6:	bd10      	pop	{r4, pc}

0801dec8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801dec8:	b510      	push	{r4, lr}
 801deca:	4604      	mov	r4, r0
 801decc:	2104      	movs	r1, #4
 801dece:	f009 fa6b 	bl	80273a8 <_ZdlPvj>
 801ded2:	4620      	mov	r0, r4
 801ded4:	bd10      	pop	{r4, pc}

0801ded6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801ded6:	b510      	push	{r4, lr}
 801ded8:	4604      	mov	r4, r0
 801deda:	2104      	movs	r1, #4
 801dedc:	f009 fa64 	bl	80273a8 <_ZdlPvj>
 801dee0:	4620      	mov	r0, r4
 801dee2:	bd10      	pop	{r4, pc}

0801dee4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801dee4:	b510      	push	{r4, lr}
 801dee6:	4604      	mov	r4, r0
 801dee8:	2104      	movs	r1, #4
 801deea:	f009 fa5d 	bl	80273a8 <_ZdlPvj>
 801deee:	4620      	mov	r0, r4
 801def0:	bd10      	pop	{r4, pc}

0801def2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801def2:	b510      	push	{r4, lr}
 801def4:	4604      	mov	r4, r0
 801def6:	2104      	movs	r1, #4
 801def8:	f009 fa56 	bl	80273a8 <_ZdlPvj>
 801defc:	4620      	mov	r0, r4
 801defe:	bd10      	pop	{r4, pc}

0801df00 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801df00:	b510      	push	{r4, lr}
 801df02:	4604      	mov	r4, r0
 801df04:	2104      	movs	r1, #4
 801df06:	f009 fa4f 	bl	80273a8 <_ZdlPvj>
 801df0a:	4620      	mov	r0, r4
 801df0c:	bd10      	pop	{r4, pc}

0801df0e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801df0e:	b510      	push	{r4, lr}
 801df10:	4604      	mov	r4, r0
 801df12:	2104      	movs	r1, #4
 801df14:	f009 fa48 	bl	80273a8 <_ZdlPvj>
 801df18:	4620      	mov	r0, r4
 801df1a:	bd10      	pop	{r4, pc}

0801df1c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801df1c:	b510      	push	{r4, lr}
 801df1e:	4604      	mov	r4, r0
 801df20:	2104      	movs	r1, #4
 801df22:	f009 fa41 	bl	80273a8 <_ZdlPvj>
 801df26:	4620      	mov	r0, r4
 801df28:	bd10      	pop	{r4, pc}

0801df2a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801df2a:	b510      	push	{r4, lr}
 801df2c:	4604      	mov	r4, r0
 801df2e:	2104      	movs	r1, #4
 801df30:	f009 fa3a 	bl	80273a8 <_ZdlPvj>
 801df34:	4620      	mov	r0, r4
 801df36:	bd10      	pop	{r4, pc}

0801df38 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801df38:	b510      	push	{r4, lr}
 801df3a:	4604      	mov	r4, r0
 801df3c:	2104      	movs	r1, #4
 801df3e:	f009 fa33 	bl	80273a8 <_ZdlPvj>
 801df42:	4620      	mov	r0, r4
 801df44:	bd10      	pop	{r4, pc}

0801df46 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801df46:	b510      	push	{r4, lr}
 801df48:	4604      	mov	r4, r0
 801df4a:	2104      	movs	r1, #4
 801df4c:	f009 fa2c 	bl	80273a8 <_ZdlPvj>
 801df50:	4620      	mov	r0, r4
 801df52:	bd10      	pop	{r4, pc}

0801df54 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801df54:	b510      	push	{r4, lr}
 801df56:	4604      	mov	r4, r0
 801df58:	2104      	movs	r1, #4
 801df5a:	f009 fa25 	bl	80273a8 <_ZdlPvj>
 801df5e:	4620      	mov	r0, r4
 801df60:	bd10      	pop	{r4, pc}

0801df62 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801df62:	b510      	push	{r4, lr}
 801df64:	4604      	mov	r4, r0
 801df66:	2104      	movs	r1, #4
 801df68:	f009 fa1e 	bl	80273a8 <_ZdlPvj>
 801df6c:	4620      	mov	r0, r4
 801df6e:	bd10      	pop	{r4, pc}

0801df70 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801df70:	b510      	push	{r4, lr}
 801df72:	4604      	mov	r4, r0
 801df74:	2104      	movs	r1, #4
 801df76:	f009 fa17 	bl	80273a8 <_ZdlPvj>
 801df7a:	4620      	mov	r0, r4
 801df7c:	bd10      	pop	{r4, pc}

0801df7e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801df7e:	b510      	push	{r4, lr}
 801df80:	4604      	mov	r4, r0
 801df82:	2104      	movs	r1, #4
 801df84:	f009 fa10 	bl	80273a8 <_ZdlPvj>
 801df88:	4620      	mov	r0, r4
 801df8a:	bd10      	pop	{r4, pc}

0801df8c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801df8c:	b510      	push	{r4, lr}
 801df8e:	4604      	mov	r4, r0
 801df90:	2104      	movs	r1, #4
 801df92:	f009 fa09 	bl	80273a8 <_ZdlPvj>
 801df96:	4620      	mov	r0, r4
 801df98:	bd10      	pop	{r4, pc}
	...

0801df9c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801df9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801df9e:	4606      	mov	r6, r0
 801dfa0:	b087      	sub	sp, #28
 801dfa2:	460c      	mov	r4, r1
 801dfa4:	4617      	mov	r7, r2
 801dfa6:	461d      	mov	r5, r3
 801dfa8:	b333      	cbz	r3, 801dff8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801dfaa:	4608      	mov	r0, r1
 801dfac:	f7f8 fb77 	bl	801669e <_ZNK8touchgfx4Rect7isEmptyEv>
 801dfb0:	bb10      	cbnz	r0, 801dff8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801dfb2:	6820      	ldr	r0, [r4, #0]
 801dfb4:	ab04      	add	r3, sp, #16
 801dfb6:	6861      	ldr	r1, [r4, #4]
 801dfb8:	4c1b      	ldr	r4, [pc, #108]	; (801e028 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801dfba:	c303      	stmia	r3!, {r0, r1}
 801dfbc:	a804      	add	r0, sp, #16
 801dfbe:	f7fa fbc3 	bl	8018748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dfc2:	6820      	ldr	r0, [r4, #0]
 801dfc4:	6803      	ldr	r3, [r0, #0]
 801dfc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dfc8:	4798      	blx	r3
 801dfca:	2dff      	cmp	r5, #255	; 0xff
 801dfcc:	d016      	beq.n	801dffc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801dfce:	f010 0f08 	tst.w	r0, #8
 801dfd2:	6820      	ldr	r0, [r4, #0]
 801dfd4:	d015      	beq.n	801e002 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801dfd6:	2400      	movs	r4, #0
 801dfd8:	6801      	ldr	r1, [r0, #0]
 801dfda:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801dfde:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801dfe2:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801dfe6:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801dfea:	9401      	str	r4, [sp, #4]
 801dfec:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801dff0:	9400      	str	r4, [sp, #0]
 801dff2:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
 801dff4:	4639      	mov	r1, r7
 801dff6:	47a0      	blx	r4
 801dff8:	b007      	add	sp, #28
 801dffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dffc:	f010 0f02 	tst.w	r0, #2
 801e000:	e7e7      	b.n	801dfd2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 801e002:	6803      	ldr	r3, [r0, #0]
 801e004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e006:	4798      	blx	r3
 801e008:	4b08      	ldr	r3, [pc, #32]	; (801e02c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801e00a:	4601      	mov	r1, r0
 801e00c:	4630      	mov	r0, r6
 801e00e:	881a      	ldrh	r2, [r3, #0]
 801e010:	6833      	ldr	r3, [r6, #0]
 801e012:	e9cd 7500 	strd	r7, r5, [sp]
 801e016:	69dd      	ldr	r5, [r3, #28]
 801e018:	ab04      	add	r3, sp, #16
 801e01a:	47a8      	blx	r5
 801e01c:	6820      	ldr	r0, [r4, #0]
 801e01e:	6803      	ldr	r3, [r0, #0]
 801e020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e022:	4798      	blx	r3
 801e024:	e7e8      	b.n	801dff8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801e026:	bf00      	nop
 801e028:	20014be4 	.word	0x20014be4
 801e02c:	20014bde 	.word	0x20014bde

0801e030 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801e030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e034:	4f97      	ldr	r7, [pc, #604]	; (801e294 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x264>)
 801e036:	4616      	mov	r6, r2
 801e038:	b08f      	sub	sp, #60	; 0x3c
 801e03a:	4604      	mov	r4, r0
 801e03c:	683a      	ldr	r2, [r7, #0]
 801e03e:	4689      	mov	r9, r1
 801e040:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801e044:	2a02      	cmp	r2, #2
 801e046:	d106      	bne.n	801e056 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801e048:	4b93      	ldr	r3, [pc, #588]	; (801e298 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x268>)
 801e04a:	f44f 7159 	mov.w	r1, #868	; 0x364
 801e04e:	4a93      	ldr	r2, [pc, #588]	; (801e29c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801e050:	4893      	ldr	r0, [pc, #588]	; (801e2a0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x270>)
 801e052:	f009 f9d7 	bl	8027404 <__assert_func>
 801e056:	ad0e      	add	r5, sp, #56	; 0x38
 801e058:	f825 3d24 	strh.w	r3, [r5, #-36]!
 801e05c:	4628      	mov	r0, r5
 801e05e:	f7fd fac9 	bl	801b5f4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e062:	6823      	ldr	r3, [r4, #0]
 801e064:	4680      	mov	r8, r0
 801e066:	4620      	mov	r0, r4
 801e068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e06a:	4798      	blx	r3
 801e06c:	4580      	cmp	r8, r0
 801e06e:	d004      	beq.n	801e07a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801e070:	4b8c      	ldr	r3, [pc, #560]	; (801e2a4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 801e072:	f240 3166 	movw	r1, #870	; 0x366
 801e076:	4a89      	ldr	r2, [pc, #548]	; (801e29c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801e078:	e7ea      	b.n	801e050 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801e07a:	4628      	mov	r0, r5
 801e07c:	f7fd fa30 	bl	801b4e0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e080:	4680      	mov	r8, r0
 801e082:	b920      	cbnz	r0, 801e08e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801e084:	4b88      	ldr	r3, [pc, #544]	; (801e2a8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 801e086:	f44f 715a 	mov.w	r1, #872	; 0x368
 801e08a:	4a84      	ldr	r2, [pc, #528]	; (801e29c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801e08c:	e7e0      	b.n	801e050 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801e08e:	6830      	ldr	r0, [r6, #0]
 801e090:	ab06      	add	r3, sp, #24
 801e092:	6871      	ldr	r1, [r6, #4]
 801e094:	f10d 0b20 	add.w	fp, sp, #32
 801e098:	f9b6 a000 	ldrsh.w	sl, [r6]
 801e09c:	c303      	stmia	r3!, {r0, r1}
 801e09e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801e0a2:	ab08      	add	r3, sp, #32
 801e0a4:	f8d9 0000 	ldr.w	r0, [r9]
 801e0a8:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801e0ac:	c303      	stmia	r3!, {r0, r1}
 801e0ae:	4628      	mov	r0, r5
 801e0b0:	f7fd f90e 	bl	801b2d0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801e0b4:	4606      	mov	r6, r0
 801e0b6:	4628      	mov	r0, r5
 801e0b8:	4d7c      	ldr	r5, [pc, #496]	; (801e2ac <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 801e0ba:	f7fd f943 	bl	801b344 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801e0be:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801e0c2:	a806      	add	r0, sp, #24
 801e0c4:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801e0c8:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801e0cc:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 801e0d0:	f7fa fb3a 	bl	8018748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e0d4:	4658      	mov	r0, fp
 801e0d6:	f7fa fb37 	bl	8018748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e0da:	a80a      	add	r0, sp, #40	; 0x28
 801e0dc:	f7fa fb34 	bl	8018748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e0e0:	4b73      	ldr	r3, [pc, #460]	; (801e2b0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801e0e2:	2100      	movs	r1, #0
 801e0e4:	f9b5 2000 	ldrsh.w	r2, [r5]
 801e0e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e0ec:	4658      	mov	r0, fp
 801e0ee:	910c      	str	r1, [sp, #48]	; 0x30
 801e0f0:	a90c      	add	r1, sp, #48	; 0x30
 801e0f2:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801e0f6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801e0fa:	f7f8 fa8d 	bl	8016618 <_ZN8touchgfx4RectaNERKS0_>
 801e0fe:	4658      	mov	r0, fp
 801e100:	f7f8 facd 	bl	801669e <_ZNK8touchgfx4Rect7isEmptyEv>
 801e104:	2800      	cmp	r0, #0
 801e106:	f040 809a 	bne.w	801e23e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801e10a:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801e10e:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801e112:	4288      	cmp	r0, r1
 801e114:	db38      	blt.n	801e188 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 801e116:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801e11a:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801e11e:	429a      	cmp	r2, r3
 801e120:	db32      	blt.n	801e188 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 801e122:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801e126:	4430      	add	r0, r6
 801e128:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801e12c:	4431      	add	r1, r6
 801e12e:	b200      	sxth	r0, r0
 801e130:	b209      	sxth	r1, r1
 801e132:	4288      	cmp	r0, r1
 801e134:	dc28      	bgt.n	801e188 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 801e136:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801e13a:	440a      	add	r2, r1
 801e13c:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801e140:	440b      	add	r3, r1
 801e142:	b212      	sxth	r2, r2
 801e144:	b21b      	sxth	r3, r3
 801e146:	429a      	cmp	r2, r3
 801e148:	dc1e      	bgt.n	801e188 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 801e14a:	6823      	ldr	r3, [r4, #0]
 801e14c:	4620      	mov	r0, r4
 801e14e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e150:	4798      	blx	r3
 801e152:	4682      	mov	sl, r0
 801e154:	6838      	ldr	r0, [r7, #0]
 801e156:	6803      	ldr	r3, [r0, #0]
 801e158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e15a:	4798      	blx	r3
 801e15c:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801e160:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801e164:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801e168:	1a5b      	subs	r3, r3, r1
 801e16a:	b29b      	uxth	r3, r3
 801e16c:	b21c      	sxth	r4, r3
 801e16e:	2c00      	cmp	r4, #0
 801e170:	dc0f      	bgt.n	801e192 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x162>
 801e172:	bf18      	it	ne
 801e174:	f8ad 1020 	strhne.w	r1, [sp, #32]
 801e178:	4644      	mov	r4, r8
 801e17a:	bf1e      	ittt	ne
 801e17c:	f8bd 1024 	ldrhne.w	r1, [sp, #36]	; 0x24
 801e180:	185b      	addne	r3, r3, r1
 801e182:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 801e186:	e009      	b.n	801e19c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16c>
 801e188:	4b4a      	ldr	r3, [pc, #296]	; (801e2b4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801e18a:	f240 3176 	movw	r1, #886	; 0x376
 801e18e:	4a43      	ldr	r2, [pc, #268]	; (801e29c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801e190:	e75e      	b.n	801e050 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801e192:	1ad3      	subs	r3, r2, r3
 801e194:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 801e198:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801e19c:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
 801e1a0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801e1a4:	1b9b      	subs	r3, r3, r6
 801e1a6:	b29b      	uxth	r3, r3
 801e1a8:	b219      	sxth	r1, r3
 801e1aa:	2900      	cmp	r1, #0
 801e1ac:	dd4b      	ble.n	801e246 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x216>
 801e1ae:	4351      	muls	r1, r2
 801e1b0:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801e1b4:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801e1b8:	1acb      	subs	r3, r1, r3
 801e1ba:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801e1be:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801e1c2:	2e00      	cmp	r6, #0
 801e1c4:	dd3b      	ble.n	801e23e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801e1c6:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801e1ca:	2b00      	cmp	r3, #0
 801e1cc:	dd37      	ble.n	801e23e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801e1ce:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801e1d2:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801e1d6:	fb0a f90c 	mul.w	r9, sl, ip
 801e1da:	eb09 0941 	add.w	r9, r9, r1, lsl #1
 801e1de:	4481      	add	r9, r0
 801e1e0:	8828      	ldrh	r0, [r5, #0]
 801e1e2:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 801e1e6:	1a41      	subs	r1, r0, r1
 801e1e8:	42ae      	cmp	r6, r5
 801e1ea:	bfa8      	it	ge
 801e1ec:	462e      	movge	r6, r5
 801e1ee:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801e1f2:	428e      	cmp	r6, r1
 801e1f4:	bfa8      	it	ge
 801e1f6:	460e      	movge	r6, r1
 801e1f8:	429d      	cmp	r5, r3
 801e1fa:	bfa8      	it	ge
 801e1fc:	461d      	movge	r5, r3
 801e1fe:	4b2c      	ldr	r3, [pc, #176]	; (801e2b0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801e200:	881b      	ldrh	r3, [r3, #0]
 801e202:	eba3 030c 	sub.w	r3, r3, ip
 801e206:	429d      	cmp	r5, r3
 801e208:	bfa8      	it	ge
 801e20a:	461d      	movge	r5, r3
 801e20c:	42b0      	cmp	r0, r6
 801e20e:	d12c      	bne.n	801e26a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 801e210:	4290      	cmp	r0, r2
 801e212:	d12a      	bne.n	801e26a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 801e214:	6838      	ldr	r0, [r7, #0]
 801e216:	9203      	str	r2, [sp, #12]
 801e218:	6803      	ldr	r3, [r0, #0]
 801e21a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e21c:	4798      	blx	r3
 801e21e:	07c3      	lsls	r3, r0, #31
 801e220:	d51a      	bpl.n	801e258 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801e222:	9a03      	ldr	r2, [sp, #12]
 801e224:	6838      	ldr	r0, [r7, #0]
 801e226:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
 801e22a:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801e22e:	6803      	ldr	r3, [r0, #0]
 801e230:	9200      	str	r2, [sp, #0]
 801e232:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 801e234:	4623      	mov	r3, r4
 801e236:	e89b 0006 	ldmia.w	fp, {r1, r2}
 801e23a:	47a8      	blx	r5
 801e23c:	4680      	mov	r8, r0
 801e23e:	4640      	mov	r0, r8
 801e240:	b00f      	add	sp, #60	; 0x3c
 801e242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e246:	bf1f      	itttt	ne
 801e248:	f8bd 1026 	ldrhne.w	r1, [sp, #38]	; 0x26
 801e24c:	f8ad 6022 	strhne.w	r6, [sp, #34]	; 0x22
 801e250:	185b      	addne	r3, r3, r1
 801e252:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801e256:	e7b2      	b.n	801e1be <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x18e>
 801e258:	6838      	ldr	r0, [r7, #0]
 801e25a:	464a      	mov	r2, r9
 801e25c:	4621      	mov	r1, r4
 801e25e:	6803      	ldr	r3, [r0, #0]
 801e260:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 801e262:	fb05 f30a 	mul.w	r3, r5, sl
 801e266:	47b0      	blx	r6
 801e268:	e7e9      	b.n	801e23e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801e26a:	4355      	muls	r5, r2
 801e26c:	0076      	lsls	r6, r6, #1
 801e26e:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 801e272:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 801e276:	9303      	str	r3, [sp, #12]
 801e278:	9b03      	ldr	r3, [sp, #12]
 801e27a:	429c      	cmp	r4, r3
 801e27c:	d2df      	bcs.n	801e23e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801e27e:	6838      	ldr	r0, [r7, #0]
 801e280:	464a      	mov	r2, r9
 801e282:	4621      	mov	r1, r4
 801e284:	44d1      	add	r9, sl
 801e286:	6803      	ldr	r3, [r0, #0]
 801e288:	445c      	add	r4, fp
 801e28a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e28c:	461d      	mov	r5, r3
 801e28e:	4633      	mov	r3, r6
 801e290:	47a8      	blx	r5
 801e292:	e7f1      	b.n	801e278 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x248>
 801e294:	20014be4 	.word	0x20014be4
 801e298:	0802e1f0 	.word	0x0802e1f0
 801e29c:	0802eaa4 	.word	0x0802eaa4
 801e2a0:	0802e2a2 	.word	0x0802e2a2
 801e2a4:	0802e2d4 	.word	0x0802e2d4
 801e2a8:	0802e329 	.word	0x0802e329
 801e2ac:	20014bde 	.word	0x20014bde
 801e2b0:	20014be0 	.word	0x20014be0
 801e2b4:	0802e367 	.word	0x0802e367

0801e2b8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801e2b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e2bc:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 801e2c0:	4688      	mov	r8, r1
 801e2c2:	4614      	mov	r4, r2
 801e2c4:	461d      	mov	r5, r3
 801e2c6:	9e08      	ldr	r6, [sp, #32]
 801e2c8:	2f00      	cmp	r7, #0
 801e2ca:	f000 80b4 	beq.w	801e436 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801e2ce:	4618      	mov	r0, r3
 801e2d0:	f7f8 f9e5 	bl	801669e <_ZNK8touchgfx4Rect7isEmptyEv>
 801e2d4:	2800      	cmp	r0, #0
 801e2d6:	f040 80ae 	bne.w	801e436 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801e2da:	f9b5 1000 	ldrsh.w	r1, [r5]
 801e2de:	2fff      	cmp	r7, #255	; 0xff
 801e2e0:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801e2e4:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 801e2e8:	fb04 1303 	mla	r3, r4, r3, r1
 801e2ec:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 801e2f0:	eba4 0200 	sub.w	r2, r4, r0
 801e2f4:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801e2f8:	fb04 f505 	mul.w	r5, r4, r5
 801e2fc:	ea4f 2816 	mov.w	r8, r6, lsr #8
 801e300:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801e304:	d04b      	beq.n	801e39e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe6>
 801e306:	b2bc      	uxth	r4, r7
 801e308:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 801e30c:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801e310:	fa5f f788 	uxtb.w	r7, r8
 801e314:	b2f3      	uxtb	r3, r6
 801e316:	0040      	lsls	r0, r0, #1
 801e318:	fb0e fe04 	mul.w	lr, lr, r4
 801e31c:	4367      	muls	r7, r4
 801e31e:	ea4f 0842 	mov.w	r8, r2, lsl #1
 801e322:	4363      	muls	r3, r4
 801e324:	fa1f fc8c 	uxth.w	ip, ip
 801e328:	42a9      	cmp	r1, r5
 801e32a:	f080 8084 	bcs.w	801e436 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801e32e:	eb01 0900 	add.w	r9, r1, r0
 801e332:	4549      	cmp	r1, r9
 801e334:	d231      	bcs.n	801e39a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 801e336:	880a      	ldrh	r2, [r1, #0]
 801e338:	1214      	asrs	r4, r2, #8
 801e33a:	10d6      	asrs	r6, r2, #3
 801e33c:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801e340:	00d2      	lsls	r2, r2, #3
 801e342:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e346:	b2d2      	uxtb	r2, r2
 801e348:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801e34c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801e350:	fb14 f40c 	smulbb	r4, r4, ip
 801e354:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801e358:	fb12 f20c 	smulbb	r2, r2, ip
 801e35c:	fb16 f60c 	smulbb	r6, r6, ip
 801e360:	4474      	add	r4, lr
 801e362:	441a      	add	r2, r3
 801e364:	b2a4      	uxth	r4, r4
 801e366:	443e      	add	r6, r7
 801e368:	b292      	uxth	r2, r2
 801e36a:	f104 0a01 	add.w	sl, r4, #1
 801e36e:	b2b6      	uxth	r6, r6
 801e370:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801e374:	f102 0a01 	add.w	sl, r2, #1
 801e378:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 801e37c:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801e380:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801e384:	4322      	orrs	r2, r4
 801e386:	1c74      	adds	r4, r6, #1
 801e388:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801e38c:	0976      	lsrs	r6, r6, #5
 801e38e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801e392:	4332      	orrs	r2, r6
 801e394:	f821 2b02 	strh.w	r2, [r1], #2
 801e398:	e7cb      	b.n	801e332 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x7a>
 801e39a:	4441      	add	r1, r8
 801e39c:	e7c4      	b.n	801e328 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 801e39e:	0973      	lsrs	r3, r6, #5
 801e3a0:	4f26      	ldr	r7, [pc, #152]	; (801e43c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x184>)
 801e3a2:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801e3a6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e3aa:	ea08 0707 	and.w	r7, r8, r7
 801e3ae:	433b      	orrs	r3, r7
 801e3b0:	4333      	orrs	r3, r6
 801e3b2:	07e6      	lsls	r6, r4, #31
 801e3b4:	b29b      	uxth	r3, r3
 801e3b6:	d50b      	bpl.n	801e3d0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 801e3b8:	0040      	lsls	r0, r0, #1
 801e3ba:	0052      	lsls	r2, r2, #1
 801e3bc:	42a9      	cmp	r1, r5
 801e3be:	d23a      	bcs.n	801e436 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801e3c0:	180c      	adds	r4, r1, r0
 801e3c2:	42a1      	cmp	r1, r4
 801e3c4:	d202      	bcs.n	801e3cc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 801e3c6:	f821 3b02 	strh.w	r3, [r1], #2
 801e3ca:	e7fa      	b.n	801e3c2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 801e3cc:	4411      	add	r1, r2
 801e3ce:	e7f5      	b.n	801e3bc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 801e3d0:	078f      	lsls	r7, r1, #30
 801e3d2:	d008      	beq.n	801e3e6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 801e3d4:	0066      	lsls	r6, r4, #1
 801e3d6:	460a      	mov	r2, r1
 801e3d8:	42aa      	cmp	r2, r5
 801e3da:	d202      	bcs.n	801e3e2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 801e3dc:	8013      	strh	r3, [r2, #0]
 801e3de:	4432      	add	r2, r6
 801e3e0:	e7fa      	b.n	801e3d8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 801e3e2:	3102      	adds	r1, #2
 801e3e4:	3801      	subs	r0, #1
 801e3e6:	07c6      	lsls	r6, r0, #31
 801e3e8:	d50b      	bpl.n	801e402 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 801e3ea:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 801e3ee:	0066      	lsls	r6, r4, #1
 801e3f0:	3a01      	subs	r2, #1
 801e3f2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801e3f6:	42aa      	cmp	r2, r5
 801e3f8:	d202      	bcs.n	801e400 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 801e3fa:	8013      	strh	r3, [r2, #0]
 801e3fc:	4432      	add	r2, r6
 801e3fe:	e7fa      	b.n	801e3f6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 801e400:	3801      	subs	r0, #1
 801e402:	b1c0      	cbz	r0, 801e436 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801e404:	1040      	asrs	r0, r0, #1
 801e406:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801e40a:	0080      	lsls	r0, r0, #2
 801e40c:	0064      	lsls	r4, r4, #1
 801e40e:	42a9      	cmp	r1, r5
 801e410:	d211      	bcs.n	801e436 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801e412:	078a      	lsls	r2, r1, #30
 801e414:	d006      	beq.n	801e424 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801e416:	4b0a      	ldr	r3, [pc, #40]	; (801e440 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x188>)
 801e418:	f44f 6185 	mov.w	r1, #1064	; 0x428
 801e41c:	4a09      	ldr	r2, [pc, #36]	; (801e444 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x18c>)
 801e41e:	480a      	ldr	r0, [pc, #40]	; (801e448 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x190>)
 801e420:	f008 fff0 	bl	8027404 <__assert_func>
 801e424:	180e      	adds	r6, r1, r0
 801e426:	460a      	mov	r2, r1
 801e428:	42b2      	cmp	r2, r6
 801e42a:	d202      	bcs.n	801e432 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17a>
 801e42c:	f842 3b04 	str.w	r3, [r2], #4
 801e430:	e7fa      	b.n	801e428 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>
 801e432:	4421      	add	r1, r4
 801e434:	e7eb      	b.n	801e40e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 801e436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e43a:	bf00      	nop
 801e43c:	00fff800 	.word	0x00fff800
 801e440:	0802e0a1 	.word	0x0802e0a1
 801e444:	0802e6f0 	.word	0x0802e6f0
 801e448:	0802e2a2 	.word	0x0802e2a2

0801e44c <_ZN8touchgfx8LCD16bppC1Ev>:
 801e44c:	2200      	movs	r2, #0
 801e44e:	4910      	ldr	r1, [pc, #64]	; (801e490 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 801e450:	6042      	str	r2, [r0, #4]
 801e452:	6001      	str	r1, [r0, #0]
 801e454:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801e458:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801e45c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801e460:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801e464:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801e468:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801e46c:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801e470:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801e474:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801e478:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801e47c:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801e480:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801e484:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 801e488:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 801e48c:	4770      	bx	lr
 801e48e:	bf00      	nop
 801e490:	0802e6a8 	.word	0x0802e6a8

0801e494 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801e494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e498:	b08d      	sub	sp, #52	; 0x34
 801e49a:	460d      	mov	r5, r1
 801e49c:	4604      	mov	r4, r0
 801e49e:	4699      	mov	r9, r3
 801e4a0:	6808      	ldr	r0, [r1, #0]
 801e4a2:	ab08      	add	r3, sp, #32
 801e4a4:	6849      	ldr	r1, [r1, #4]
 801e4a6:	c303      	stmia	r3!, {r0, r1}
 801e4a8:	6810      	ldr	r0, [r2, #0]
 801e4aa:	ab0a      	add	r3, sp, #40	; 0x28
 801e4ac:	6851      	ldr	r1, [r2, #4]
 801e4ae:	c303      	stmia	r3!, {r0, r1}
 801e4b0:	a808      	add	r0, sp, #32
 801e4b2:	f7fa f949 	bl	8018748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e4b6:	4629      	mov	r1, r5
 801e4b8:	a80a      	add	r0, sp, #40	; 0x28
 801e4ba:	4d67      	ldr	r5, [pc, #412]	; (801e658 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801e4bc:	f7fa f96c 	bl	8018798 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e4c0:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801e4c4:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801e4c8:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801e4cc:	6828      	ldr	r0, [r5, #0]
 801e4ce:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e4d2:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 801e4d6:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801e4da:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801e4de:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801e4e2:	440a      	add	r2, r1
 801e4e4:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801e4e8:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801e4ec:	4413      	add	r3, r2
 801e4ee:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801e4f2:	6803      	ldr	r3, [r0, #0]
 801e4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e4f6:	4798      	blx	r3
 801e4f8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801e4fc:	d119      	bne.n	801e532 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801e4fe:	f010 0f20 	tst.w	r0, #32
 801e502:	6828      	ldr	r0, [r5, #0]
 801e504:	d018      	beq.n	801e538 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801e506:	2500      	movs	r5, #0
 801e508:	6801      	ldr	r1, [r0, #0]
 801e50a:	b2b6      	uxth	r6, r6
 801e50c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801e510:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801e514:	9601      	str	r6, [sp, #4]
 801e516:	e9cd 9503 	strd	r9, r5, [sp, #12]
 801e51a:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801e51e:	9502      	str	r5, [sp, #8]
 801e520:	fa1f f588 	uxth.w	r5, r8
 801e524:	9500      	str	r5, [sp, #0]
 801e526:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801e528:	4621      	mov	r1, r4
 801e52a:	47a8      	blx	r5
 801e52c:	b00d      	add	sp, #52	; 0x34
 801e52e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e532:	f010 0f40 	tst.w	r0, #64	; 0x40
 801e536:	e7e4      	b.n	801e502 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801e538:	6803      	ldr	r3, [r0, #0]
 801e53a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e53c:	4798      	blx	r3
 801e53e:	4947      	ldr	r1, [pc, #284]	; (801e65c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 801e540:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801e544:	880b      	ldrh	r3, [r1, #0]
 801e546:	468a      	mov	sl, r1
 801e548:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801e54c:	fb03 5202 	mla	r2, r3, r2, r5
 801e550:	4373      	muls	r3, r6
 801e552:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801e556:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801e55a:	9307      	str	r3, [sp, #28]
 801e55c:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801e560:	9306      	str	r3, [sp, #24]
 801e562:	9b07      	ldr	r3, [sp, #28]
 801e564:	4298      	cmp	r0, r3
 801e566:	d270      	bcs.n	801e64a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 801e568:	9b06      	ldr	r3, [sp, #24]
 801e56a:	4621      	mov	r1, r4
 801e56c:	eb00 0b03 	add.w	fp, r0, r3
 801e570:	4558      	cmp	r0, fp
 801e572:	d25d      	bcs.n	801e630 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 801e574:	f851 4b04 	ldr.w	r4, [r1], #4
 801e578:	0e23      	lsrs	r3, r4, #24
 801e57a:	d014      	beq.n	801e5a6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801e57c:	2bff      	cmp	r3, #255	; 0xff
 801e57e:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 801e582:	d112      	bne.n	801e5aa <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801e584:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801e588:	d10f      	bne.n	801e5aa <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801e58a:	0963      	lsrs	r3, r4, #5
 801e58c:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 801e590:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801e594:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e598:	f02c 0c07 	bic.w	ip, ip, #7
 801e59c:	ea43 0c0c 	orr.w	ip, r3, ip
 801e5a0:	ea4c 0404 	orr.w	r4, ip, r4
 801e5a4:	8004      	strh	r4, [r0, #0]
 801e5a6:	3002      	adds	r0, #2
 801e5a8:	e7e2      	b.n	801e570 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 801e5aa:	fb09 f303 	mul.w	r3, r9, r3
 801e5ae:	8807      	ldrh	r7, [r0, #0]
 801e5b0:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801e5b4:	fa5f fc8c 	uxtb.w	ip, ip
 801e5b8:	1c5a      	adds	r2, r3, #1
 801e5ba:	123e      	asrs	r6, r7, #8
 801e5bc:	10fd      	asrs	r5, r7, #3
 801e5be:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801e5c2:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801e5c6:	00ff      	lsls	r7, r7, #3
 801e5c8:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801e5cc:	1212      	asrs	r2, r2, #8
 801e5ce:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801e5d2:	b293      	uxth	r3, r2
 801e5d4:	43d2      	mvns	r2, r2
 801e5d6:	b2ff      	uxtb	r7, r7
 801e5d8:	fb1e fe03 	smulbb	lr, lr, r3
 801e5dc:	b2d2      	uxtb	r2, r2
 801e5de:	fb1c fc03 	smulbb	ip, ip, r3
 801e5e2:	b2e4      	uxtb	r4, r4
 801e5e4:	fb06 e602 	mla	r6, r6, r2, lr
 801e5e8:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801e5ec:	fb14 f403 	smulbb	r4, r4, r3
 801e5f0:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801e5f4:	b2b6      	uxth	r6, r6
 801e5f6:	fb05 c502 	mla	r5, r5, r2, ip
 801e5fa:	fb07 4702 	mla	r7, r7, r2, r4
 801e5fe:	f106 0e01 	add.w	lr, r6, #1
 801e602:	b2ad      	uxth	r5, r5
 801e604:	b2bf      	uxth	r7, r7
 801e606:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801e60a:	f105 0c01 	add.w	ip, r5, #1
 801e60e:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 801e612:	1c7e      	adds	r6, r7, #1
 801e614:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801e618:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801e61c:	096d      	lsrs	r5, r5, #5
 801e61e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801e622:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801e626:	ea46 060e 	orr.w	r6, r6, lr
 801e62a:	432e      	orrs	r6, r5
 801e62c:	8006      	strh	r6, [r0, #0]
 801e62e:	e7ba      	b.n	801e5a6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801e630:	f8ba 3000 	ldrh.w	r3, [sl]
 801e634:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 801e638:	eba3 0308 	sub.w	r3, r3, r8
 801e63c:	eba4 0408 	sub.w	r4, r4, r8
 801e640:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e644:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801e648:	e78b      	b.n	801e562 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801e64a:	4b03      	ldr	r3, [pc, #12]	; (801e658 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801e64c:	6818      	ldr	r0, [r3, #0]
 801e64e:	6803      	ldr	r3, [r0, #0]
 801e650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e652:	4798      	blx	r3
 801e654:	e76a      	b.n	801e52c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801e656:	bf00      	nop
 801e658:	20014be4 	.word	0x20014be4
 801e65c:	20014bde 	.word	0x20014bde

0801e660 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 801e660:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e664:	b085      	sub	sp, #20
 801e666:	6810      	ldr	r0, [r2, #0]
 801e668:	460c      	mov	r4, r1
 801e66a:	6851      	ldr	r1, [r2, #4]
 801e66c:	466d      	mov	r5, sp
 801e66e:	4616      	mov	r6, r2
 801e670:	c503      	stmia	r5!, {r0, r1}
 801e672:	6818      	ldr	r0, [r3, #0]
 801e674:	6859      	ldr	r1, [r3, #4]
 801e676:	c503      	stmia	r5!, {r0, r1}
 801e678:	4668      	mov	r0, sp
 801e67a:	4d2e      	ldr	r5, [pc, #184]	; (801e734 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 801e67c:	f7fa f864 	bl	8018748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e680:	4631      	mov	r1, r6
 801e682:	a802      	add	r0, sp, #8
 801e684:	4e2c      	ldr	r6, [pc, #176]	; (801e738 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 801e686:	f7fa f887 	bl	8018798 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e68a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801e68e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801e692:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801e696:	6828      	ldr	r0, [r5, #0]
 801e698:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e69c:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801e6a0:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801e6a4:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801e6a8:	f8bd 1000 	ldrh.w	r1, [sp]
 801e6ac:	440a      	add	r2, r1
 801e6ae:	f8ad 2008 	strh.w	r2, [sp, #8]
 801e6b2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801e6b6:	4413      	add	r3, r2
 801e6b8:	f8ad 300a 	strh.w	r3, [sp, #10]
 801e6bc:	6803      	ldr	r3, [r0, #0]
 801e6be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e6c0:	4798      	blx	r3
 801e6c2:	8833      	ldrh	r3, [r6, #0]
 801e6c4:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801e6c8:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 801e6cc:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801e6d0:	f8df e068 	ldr.w	lr, [pc, #104]	; 801e73c <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 801e6d4:	fb03 1202 	mla	r2, r3, r2, r1
 801e6d8:	fb08 f303 	mul.w	r3, r8, r3
 801e6dc:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801e6e0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801e6e4:	4298      	cmp	r0, r3
 801e6e6:	d21d      	bcs.n	801e724 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 801e6e8:	eb00 080c 	add.w	r8, r0, ip
 801e6ec:	4540      	cmp	r0, r8
 801e6ee:	d20f      	bcs.n	801e710 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 801e6f0:	f854 1b04 	ldr.w	r1, [r4], #4
 801e6f4:	ea4f 1951 	mov.w	r9, r1, lsr #5
 801e6f8:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 801e6fc:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801e700:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801e704:	ea42 0209 	orr.w	r2, r2, r9
 801e708:	430a      	orrs	r2, r1
 801e70a:	f820 2b02 	strh.w	r2, [r0], #2
 801e70e:	e7ed      	b.n	801e6ec <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 801e710:	8832      	ldrh	r2, [r6, #0]
 801e712:	1bd2      	subs	r2, r2, r7
 801e714:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801e718:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801e71c:	1bd2      	subs	r2, r2, r7
 801e71e:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801e722:	e7df      	b.n	801e6e4 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 801e724:	6828      	ldr	r0, [r5, #0]
 801e726:	6803      	ldr	r3, [r0, #0]
 801e728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e72a:	4798      	blx	r3
 801e72c:	b005      	add	sp, #20
 801e72e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e732:	bf00      	nop
 801e734:	20014be4 	.word	0x20014be4
 801e738:	20014bde 	.word	0x20014bde
 801e73c:	fffff800 	.word	0xfffff800

0801e740 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 801e740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e744:	b08e      	sub	sp, #56	; 0x38
 801e746:	460e      	mov	r6, r1
 801e748:	4604      	mov	r4, r0
 801e74a:	461d      	mov	r5, r3
 801e74c:	6808      	ldr	r0, [r1, #0]
 801e74e:	ab0a      	add	r3, sp, #40	; 0x28
 801e750:	6849      	ldr	r1, [r1, #4]
 801e752:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 801e928 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 801e756:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 801e92c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 801e75a:	c303      	stmia	r3!, {r0, r1}
 801e75c:	6810      	ldr	r0, [r2, #0]
 801e75e:	ab0c      	add	r3, sp, #48	; 0x30
 801e760:	6851      	ldr	r1, [r2, #4]
 801e762:	c303      	stmia	r3!, {r0, r1}
 801e764:	a80a      	add	r0, sp, #40	; 0x28
 801e766:	f7f9 ffef 	bl	8018748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e76a:	4631      	mov	r1, r6
 801e76c:	a80c      	add	r0, sp, #48	; 0x30
 801e76e:	f7fa f813 	bl	8018798 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e772:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801e776:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801e77a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801e77e:	f8d8 0000 	ldr.w	r0, [r8]
 801e782:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e786:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801e78a:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801e78e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e792:	440c      	add	r4, r1
 801e794:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801e798:	440a      	add	r2, r1
 801e79a:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801e79e:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801e7a2:	4413      	add	r3, r2
 801e7a4:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801e7a8:	6803      	ldr	r3, [r0, #0]
 801e7aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e7ac:	4798      	blx	r3
 801e7ae:	2dff      	cmp	r5, #255	; 0xff
 801e7b0:	d124      	bne.n	801e7fc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 801e7b2:	f010 0f01 	tst.w	r0, #1
 801e7b6:	f8d8 0000 	ldr.w	r0, [r8]
 801e7ba:	d022      	beq.n	801e802 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 801e7bc:	2100      	movs	r1, #0
 801e7be:	f04f 0e01 	mov.w	lr, #1
 801e7c2:	f8d0 c000 	ldr.w	ip, [r0]
 801e7c6:	b2b6      	uxth	r6, r6
 801e7c8:	f8cd e018 	str.w	lr, [sp, #24]
 801e7cc:	b2bf      	uxth	r7, r7
 801e7ce:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801e7d2:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801e7d6:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801e7da:	f8b9 e000 	ldrh.w	lr, [r9]
 801e7de:	9503      	str	r5, [sp, #12]
 801e7e0:	9601      	str	r6, [sp, #4]
 801e7e2:	9700      	str	r7, [sp, #0]
 801e7e4:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801e7e8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801e7ec:	9102      	str	r1, [sp, #8]
 801e7ee:	4621      	mov	r1, r4
 801e7f0:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 801e7f4:	47a8      	blx	r5
 801e7f6:	b00e      	add	sp, #56	; 0x38
 801e7f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e7fc:	f010 0f04 	tst.w	r0, #4
 801e800:	e7d9      	b.n	801e7b6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 801e802:	6803      	ldr	r3, [r0, #0]
 801e804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e806:	4798      	blx	r3
 801e808:	f8b9 3000 	ldrh.w	r3, [r9]
 801e80c:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801e810:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 801e814:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801e818:	435e      	muls	r6, r3
 801e81a:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801e81e:	2dff      	cmp	r5, #255	; 0xff
 801e820:	fb03 1202 	mla	r2, r3, r2, r1
 801e824:	ebac 0c07 	sub.w	ip, ip, r7
 801e828:	eba3 0707 	sub.w	r7, r3, r7
 801e82c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801e830:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801e834:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801e838:	ea4f 0747 	mov.w	r7, r7, lsl #1
 801e83c:	d049      	beq.n	801e8d2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801e83e:	43eb      	mvns	r3, r5
 801e840:	fa1f f985 	uxth.w	r9, r5
 801e844:	b2db      	uxtb	r3, r3
 801e846:	42b0      	cmp	r0, r6
 801e848:	d266      	bcs.n	801e918 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801e84a:	eb00 0a0e 	add.w	sl, r0, lr
 801e84e:	4550      	cmp	r0, sl
 801e850:	4621      	mov	r1, r4
 801e852:	f104 0403 	add.w	r4, r4, #3
 801e856:	d25b      	bcs.n	801e910 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 801e858:	8802      	ldrh	r2, [r0, #0]
 801e85a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801e85e:	ea4f 2822 	mov.w	r8, r2, asr #8
 801e862:	fb11 f109 	smulbb	r1, r1, r9
 801e866:	10d5      	asrs	r5, r2, #3
 801e868:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801e86c:	00d2      	lsls	r2, r2, #3
 801e86e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801e872:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801e876:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801e87a:	fb08 1803 	mla	r8, r8, r3, r1
 801e87e:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801e882:	b2d2      	uxtb	r2, r2
 801e884:	fb11 f109 	smulbb	r1, r1, r9
 801e888:	fa1f f888 	uxth.w	r8, r8
 801e88c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801e890:	fb05 1503 	mla	r5, r5, r3, r1
 801e894:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801e898:	fb11 f109 	smulbb	r1, r1, r9
 801e89c:	b2ad      	uxth	r5, r5
 801e89e:	fb02 1203 	mla	r2, r2, r3, r1
 801e8a2:	f108 0101 	add.w	r1, r8, #1
 801e8a6:	b292      	uxth	r2, r2
 801e8a8:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801e8ac:	1c51      	adds	r1, r2, #1
 801e8ae:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 801e8b2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801e8b6:	1c69      	adds	r1, r5, #1
 801e8b8:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801e8bc:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801e8c0:	096d      	lsrs	r5, r5, #5
 801e8c2:	ea42 0208 	orr.w	r2, r2, r8
 801e8c6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801e8ca:	432a      	orrs	r2, r5
 801e8cc:	f820 2b02 	strh.w	r2, [r0], #2
 801e8d0:	e7bd      	b.n	801e84e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 801e8d2:	4a14      	ldr	r2, [pc, #80]	; (801e924 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 801e8d4:	42b0      	cmp	r0, r6
 801e8d6:	d21f      	bcs.n	801e918 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801e8d8:	eb00 050e 	add.w	r5, r0, lr
 801e8dc:	42a8      	cmp	r0, r5
 801e8de:	4621      	mov	r1, r4
 801e8e0:	f104 0403 	add.w	r4, r4, #3
 801e8e4:	d210      	bcs.n	801e908 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 801e8e6:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 801e8ea:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801e8ee:	00db      	lsls	r3, r3, #3
 801e8f0:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801e8f4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e8f8:	430b      	orrs	r3, r1
 801e8fa:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801e8fe:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801e902:	f820 3b02 	strh.w	r3, [r0], #2
 801e906:	e7e9      	b.n	801e8dc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 801e908:	4438      	add	r0, r7
 801e90a:	eb01 040c 	add.w	r4, r1, ip
 801e90e:	e7e1      	b.n	801e8d4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 801e910:	4438      	add	r0, r7
 801e912:	eb01 040c 	add.w	r4, r1, ip
 801e916:	e796      	b.n	801e846 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 801e918:	4b03      	ldr	r3, [pc, #12]	; (801e928 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 801e91a:	6818      	ldr	r0, [r3, #0]
 801e91c:	6803      	ldr	r3, [r0, #0]
 801e91e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e920:	4798      	blx	r3
 801e922:	e768      	b.n	801e7f6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 801e924:	fffff800 	.word	0xfffff800
 801e928:	20014be4 	.word	0x20014be4
 801e92c:	20014bde 	.word	0x20014bde

0801e930 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801e930:	b570      	push	{r4, r5, r6, lr}
 801e932:	9c04      	ldr	r4, [sp, #16]
 801e934:	4605      	mov	r5, r0
 801e936:	f89d 6018 	ldrb.w	r6, [sp, #24]
 801e93a:	4608      	mov	r0, r1
 801e93c:	4619      	mov	r1, r3
 801e93e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801e942:	2a0d      	cmp	r2, #13
 801e944:	d825      	bhi.n	801e992 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x62>
 801e946:	e8df f002 	tbb	[pc, r2]
 801e94a:	1807      	.short	0x1807
 801e94c:	1d1d1d13 	.word	0x1d1d1d13
 801e950:	1d1d1d1d 	.word	0x1d1d1d1d
 801e954:	1d1d1d1d 	.word	0x1d1d1d1d
 801e958:	682a      	ldr	r2, [r5, #0]
 801e95a:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801e95e:	68d6      	ldr	r6, [r2, #12]
 801e960:	4623      	mov	r3, r4
 801e962:	460a      	mov	r2, r1
 801e964:	4601      	mov	r1, r0
 801e966:	46b4      	mov	ip, r6
 801e968:	4628      	mov	r0, r5
 801e96a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e96e:	4760      	bx	ip
 801e970:	4622      	mov	r2, r4
 801e972:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e976:	f7ff bd8d 	b.w	801e494 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e97a:	4622      	mov	r2, r4
 801e97c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e980:	f7ff bede 	b.w	801e740 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801e984:	4b03      	ldr	r3, [pc, #12]	; (801e994 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801e986:	f240 315d 	movw	r1, #861	; 0x35d
 801e98a:	4a03      	ldr	r2, [pc, #12]	; (801e998 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801e98c:	4803      	ldr	r0, [pc, #12]	; (801e99c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801e98e:	f008 fd39 	bl	8027404 <__assert_func>
 801e992:	bd70      	pop	{r4, r5, r6, pc}
 801e994:	0802e3c7 	.word	0x0802e3c7
 801e998:	0802eb2a 	.word	0x0802eb2a
 801e99c:	0802e2a2 	.word	0x0802e2a2

0801e9a0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801e9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9a4:	b093      	sub	sp, #76	; 0x4c
 801e9a6:	880e      	ldrh	r6, [r1, #0]
 801e9a8:	4681      	mov	r9, r0
 801e9aa:	4688      	mov	r8, r1
 801e9ac:	4615      	mov	r5, r2
 801e9ae:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801e9b2:	b136      	cbz	r6, 801e9c2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x22>
 801e9b4:	4b70      	ldr	r3, [pc, #448]	; (801eb78 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801e9b6:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 801e9ba:	4a70      	ldr	r2, [pc, #448]	; (801eb7c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801e9bc:	4870      	ldr	r0, [pc, #448]	; (801eb80 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801e9be:	f008 fd21 	bl	8027404 <__assert_func>
 801e9c2:	6810      	ldr	r0, [r2, #0]
 801e9c4:	ac0e      	add	r4, sp, #56	; 0x38
 801e9c6:	6851      	ldr	r1, [r2, #4]
 801e9c8:	4f6e      	ldr	r7, [pc, #440]	; (801eb84 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801e9ca:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 801eb88 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801e9ce:	c403      	stmia	r4!, {r0, r1}
 801e9d0:	6818      	ldr	r0, [r3, #0]
 801e9d2:	ac10      	add	r4, sp, #64	; 0x40
 801e9d4:	6859      	ldr	r1, [r3, #4]
 801e9d6:	c403      	stmia	r4!, {r0, r1}
 801e9d8:	a80e      	add	r0, sp, #56	; 0x38
 801e9da:	f7f9 feb5 	bl	8018748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e9de:	4629      	mov	r1, r5
 801e9e0:	a810      	add	r0, sp, #64	; 0x40
 801e9e2:	f7f9 fed9 	bl	8018798 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e9e6:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801e9ea:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801e9ee:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801e9f2:	6838      	ldr	r0, [r7, #0]
 801e9f4:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e9f8:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 801e9fc:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 801ea00:	4489      	add	r9, r1
 801ea02:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801ea06:	440a      	add	r2, r1
 801ea08:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801ea0c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801ea10:	4413      	add	r3, r2
 801ea12:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801ea16:	6803      	ldr	r3, [r0, #0]
 801ea18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ea1a:	4798      	blx	r3
 801ea1c:	f010 0f80 	tst.w	r0, #128	; 0x80
 801ea20:	6838      	ldr	r0, [r7, #0]
 801ea22:	d01d      	beq.n	801ea60 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc0>
 801ea24:	210b      	movs	r1, #11
 801ea26:	6802      	ldr	r2, [r0, #0]
 801ea28:	b2a4      	uxth	r4, r4
 801ea2a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801ea2e:	9107      	str	r1, [sp, #28]
 801ea30:	b2ad      	uxth	r5, r5
 801ea32:	e9cd 6608 	strd	r6, r6, [sp, #32]
 801ea36:	f8bb 1000 	ldrh.w	r1, [fp]
 801ea3a:	9502      	str	r5, [sp, #8]
 801ea3c:	9106      	str	r1, [sp, #24]
 801ea3e:	2101      	movs	r1, #1
 801ea40:	9401      	str	r4, [sp, #4]
 801ea42:	e9cd a104 	strd	sl, r1, [sp, #16]
 801ea46:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801ea4a:	9103      	str	r1, [sp, #12]
 801ea4c:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
 801ea50:	9100      	str	r1, [sp, #0]
 801ea52:	4649      	mov	r1, r9
 801ea54:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 801ea56:	4642      	mov	r2, r8
 801ea58:	47a0      	blx	r4
 801ea5a:	b013      	add	sp, #76	; 0x4c
 801ea5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea60:	6803      	ldr	r3, [r0, #0]
 801ea62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ea64:	4798      	blx	r3
 801ea66:	f8bb 3000 	ldrh.w	r3, [fp]
 801ea6a:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801ea6e:	f04f 0e04 	mov.w	lr, #4
 801ea72:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 801ea76:	435d      	muls	r5, r3
 801ea78:	fb03 1202 	mla	r2, r3, r2, r1
 801ea7c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801ea80:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 801ea84:	920c      	str	r2, [sp, #48]	; 0x30
 801ea86:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801ea8a:	1b12      	subs	r2, r2, r4
 801ea8c:	920d      	str	r2, [sp, #52]	; 0x34
 801ea8e:	0062      	lsls	r2, r4, #1
 801ea90:	1b1c      	subs	r4, r3, r4
 801ea92:	920a      	str	r2, [sp, #40]	; 0x28
 801ea94:	0063      	lsls	r3, r4, #1
 801ea96:	930b      	str	r3, [sp, #44]	; 0x2c
 801ea98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ea9a:	4298      	cmp	r0, r3
 801ea9c:	d266      	bcs.n	801eb6c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1cc>
 801ea9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eaa0:	eb00 0b03 	add.w	fp, r0, r3
 801eaa4:	4558      	cmp	r0, fp
 801eaa6:	d25c      	bcs.n	801eb62 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c2>
 801eaa8:	f819 3b01 	ldrb.w	r3, [r9], #1
 801eaac:	fb1e e303 	smlabb	r3, lr, r3, lr
 801eab0:	f858 2003 	ldr.w	r2, [r8, r3]
 801eab4:	0e11      	lsrs	r1, r2, #24
 801eab6:	d012      	beq.n	801eade <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 801eab8:	29ff      	cmp	r1, #255	; 0xff
 801eaba:	ea4f 2712 	mov.w	r7, r2, lsr #8
 801eabe:	d110      	bne.n	801eae2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 801eac0:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801eac4:	d10d      	bne.n	801eae2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 801eac6:	0953      	lsrs	r3, r2, #5
 801eac8:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801eacc:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801ead0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ead4:	f027 0707 	bic.w	r7, r7, #7
 801ead8:	431f      	orrs	r7, r3
 801eada:	433a      	orrs	r2, r7
 801eadc:	8002      	strh	r2, [r0, #0]
 801eade:	3002      	adds	r0, #2
 801eae0:	e7e0      	b.n	801eaa4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x104>
 801eae2:	fb0a f101 	mul.w	r1, sl, r1
 801eae6:	8806      	ldrh	r6, [r0, #0]
 801eae8:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801eaec:	b2d2      	uxtb	r2, r2
 801eaee:	1c4b      	adds	r3, r1, #1
 801eaf0:	1235      	asrs	r5, r6, #8
 801eaf2:	10f4      	asrs	r4, r6, #3
 801eaf4:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801eaf8:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801eafc:	00f6      	lsls	r6, r6, #3
 801eafe:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801eb02:	121b      	asrs	r3, r3, #8
 801eb04:	b2f6      	uxtb	r6, r6
 801eb06:	b299      	uxth	r1, r3
 801eb08:	43db      	mvns	r3, r3
 801eb0a:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801eb0e:	fb1c fc01 	smulbb	ip, ip, r1
 801eb12:	b2db      	uxtb	r3, r3
 801eb14:	fb12 f201 	smulbb	r2, r2, r1
 801eb18:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801eb1c:	fb05 c503 	mla	r5, r5, r3, ip
 801eb20:	b2ff      	uxtb	r7, r7
 801eb22:	fb06 2203 	mla	r2, r6, r3, r2
 801eb26:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801eb2a:	fb17 f701 	smulbb	r7, r7, r1
 801eb2e:	b2ad      	uxth	r5, r5
 801eb30:	b292      	uxth	r2, r2
 801eb32:	fb04 7403 	mla	r4, r4, r3, r7
 801eb36:	f105 0c01 	add.w	ip, r5, #1
 801eb3a:	1c57      	adds	r7, r2, #1
 801eb3c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801eb40:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801eb44:	b2a4      	uxth	r4, r4
 801eb46:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801eb4a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801eb4e:	433d      	orrs	r5, r7
 801eb50:	1c67      	adds	r7, r4, #1
 801eb52:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 801eb56:	0964      	lsrs	r4, r4, #5
 801eb58:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801eb5c:	4325      	orrs	r5, r4
 801eb5e:	8005      	strh	r5, [r0, #0]
 801eb60:	e7bd      	b.n	801eade <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 801eb62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eb64:	4418      	add	r0, r3
 801eb66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801eb68:	4499      	add	r9, r3
 801eb6a:	e795      	b.n	801ea98 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf8>
 801eb6c:	4b05      	ldr	r3, [pc, #20]	; (801eb84 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801eb6e:	6818      	ldr	r0, [r3, #0]
 801eb70:	6803      	ldr	r3, [r0, #0]
 801eb72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eb74:	4798      	blx	r3
 801eb76:	e770      	b.n	801ea5a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xba>
 801eb78:	0802e1a0 	.word	0x0802e1a0
 801eb7c:	0802e8fb 	.word	0x0802e8fb
 801eb80:	0802e2a2 	.word	0x0802e2a2
 801eb84:	20014be4 	.word	0x20014be4
 801eb88:	20014bde 	.word	0x20014bde

0801eb8c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801eb8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb90:	4614      	mov	r4, r2
 801eb92:	880a      	ldrh	r2, [r1, #0]
 801eb94:	b087      	sub	sp, #28
 801eb96:	4680      	mov	r8, r0
 801eb98:	2a02      	cmp	r2, #2
 801eb9a:	460d      	mov	r5, r1
 801eb9c:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 801eba0:	d006      	beq.n	801ebb0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 801eba2:	4b63      	ldr	r3, [pc, #396]	; (801ed30 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a4>)
 801eba4:	f240 11e1 	movw	r1, #481	; 0x1e1
 801eba8:	4a62      	ldr	r2, [pc, #392]	; (801ed34 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801ebaa:	4863      	ldr	r0, [pc, #396]	; (801ed38 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ac>)
 801ebac:	f008 fc2a 	bl	8027404 <__assert_func>
 801ebb0:	2e00      	cmp	r6, #0
 801ebb2:	f000 80b9 	beq.w	801ed28 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19c>
 801ebb6:	6820      	ldr	r0, [r4, #0]
 801ebb8:	af02      	add	r7, sp, #8
 801ebba:	6861      	ldr	r1, [r4, #4]
 801ebbc:	c703      	stmia	r7!, {r0, r1}
 801ebbe:	6818      	ldr	r0, [r3, #0]
 801ebc0:	af04      	add	r7, sp, #16
 801ebc2:	6859      	ldr	r1, [r3, #4]
 801ebc4:	c703      	stmia	r7!, {r0, r1}
 801ebc6:	a802      	add	r0, sp, #8
 801ebc8:	f7f9 fdbe 	bl	8018748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ebcc:	4621      	mov	r1, r4
 801ebce:	a804      	add	r0, sp, #16
 801ebd0:	f7f9 fde2 	bl	8018798 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ebd4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801ebd8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801ebdc:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 801ebe0:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801ebe4:	fb14 2103 	smlabb	r1, r4, r3, r2
 801ebe8:	eb08 0401 	add.w	r4, r8, r1
 801ebec:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801ebf0:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801ebf4:	440a      	add	r2, r1
 801ebf6:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 801ebfa:	f8ad 2010 	strh.w	r2, [sp, #16]
 801ebfe:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801ec02:	4413      	add	r3, r2
 801ec04:	f8ad 3012 	strh.w	r3, [sp, #18]
 801ec08:	4b4c      	ldr	r3, [pc, #304]	; (801ed3c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801ec0a:	6818      	ldr	r0, [r3, #0]
 801ec0c:	6803      	ldr	r3, [r0, #0]
 801ec0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ec10:	4798      	blx	r3
 801ec12:	4b4b      	ldr	r3, [pc, #300]	; (801ed40 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b4>)
 801ec14:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801ec18:	2eff      	cmp	r6, #255	; 0xff
 801ec1a:	881a      	ldrh	r2, [r3, #0]
 801ec1c:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801ec20:	fb02 c101 	mla	r1, r2, r1, ip
 801ec24:	fb02 f207 	mul.w	r2, r2, r7
 801ec28:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801ec2c:	f105 0104 	add.w	r1, r5, #4
 801ec30:	461d      	mov	r5, r3
 801ec32:	d05a      	beq.n	801ecea <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x15e>
 801ec34:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 801ec38:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801ec3c:	b2b6      	uxth	r6, r6
 801ec3e:	9301      	str	r3, [sp, #4]
 801ec40:	fa1f fe8e 	uxth.w	lr, lr
 801ec44:	4282      	cmp	r2, r0
 801ec46:	d96a      	bls.n	801ed1e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 801ec48:	eb00 0b0a 	add.w	fp, r0, sl
 801ec4c:	4583      	cmp	fp, r0
 801ec4e:	d940      	bls.n	801ecd2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x146>
 801ec50:	8805      	ldrh	r5, [r0, #0]
 801ec52:	f814 3b01 	ldrb.w	r3, [r4], #1
 801ec56:	122f      	asrs	r7, r5, #8
 801ec58:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801ec5c:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801ec60:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ec64:	00ed      	lsls	r5, r5, #3
 801ec66:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801ec6a:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801ec6e:	fb17 f70e 	smulbb	r7, r7, lr
 801ec72:	b2ed      	uxtb	r5, r5
 801ec74:	fb19 f90e 	smulbb	r9, r9, lr
 801ec78:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ec7c:	fb15 f50e 	smulbb	r5, r5, lr
 801ec80:	fb0c 7c06 	mla	ip, ip, r6, r7
 801ec84:	10df      	asrs	r7, r3, #3
 801ec86:	00db      	lsls	r3, r3, #3
 801ec88:	fa1f fc8c 	uxth.w	ip, ip
 801ec8c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ec90:	b2db      	uxtb	r3, r3
 801ec92:	fb07 9706 	mla	r7, r7, r6, r9
 801ec96:	f10c 0901 	add.w	r9, ip, #1
 801ec9a:	fb03 5306 	mla	r3, r3, r6, r5
 801ec9e:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801eca2:	b29b      	uxth	r3, r3
 801eca4:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 801eca8:	b2bf      	uxth	r7, r7
 801ecaa:	f103 0c01 	add.w	ip, r3, #1
 801ecae:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801ecb2:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801ecb6:	ea4c 0c09 	orr.w	ip, ip, r9
 801ecba:	f107 0901 	add.w	r9, r7, #1
 801ecbe:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801ecc2:	097f      	lsrs	r7, r7, #5
 801ecc4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801ecc8:	ea4c 0c07 	orr.w	ip, ip, r7
 801eccc:	f820 cb02 	strh.w	ip, [r0], #2
 801ecd0:	e7bc      	b.n	801ec4c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 801ecd2:	9b01      	ldr	r3, [sp, #4]
 801ecd4:	881b      	ldrh	r3, [r3, #0]
 801ecd6:	eba3 0308 	sub.w	r3, r3, r8
 801ecda:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ecde:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801ece2:	eba3 0308 	sub.w	r3, r3, r8
 801ece6:	441c      	add	r4, r3
 801ece8:	e7ac      	b.n	801ec44 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xb8>
 801ecea:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801ecee:	4282      	cmp	r2, r0
 801ecf0:	d915      	bls.n	801ed1e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 801ecf2:	eb00 060a 	add.w	r6, r0, sl
 801ecf6:	4286      	cmp	r6, r0
 801ecf8:	d906      	bls.n	801ed08 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17c>
 801ecfa:	f814 3b01 	ldrb.w	r3, [r4], #1
 801ecfe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801ed02:	f820 3b02 	strh.w	r3, [r0], #2
 801ed06:	e7f6      	b.n	801ecf6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x16a>
 801ed08:	882b      	ldrh	r3, [r5, #0]
 801ed0a:	eba3 0308 	sub.w	r3, r3, r8
 801ed0e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ed12:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801ed16:	eba3 0308 	sub.w	r3, r3, r8
 801ed1a:	441c      	add	r4, r3
 801ed1c:	e7e7      	b.n	801ecee <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x162>
 801ed1e:	4b07      	ldr	r3, [pc, #28]	; (801ed3c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801ed20:	6818      	ldr	r0, [r3, #0]
 801ed22:	6803      	ldr	r3, [r0, #0]
 801ed24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ed26:	4798      	blx	r3
 801ed28:	b007      	add	sp, #28
 801ed2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed2e:	bf00      	nop
 801ed30:	0802e0d0 	.word	0x0802e0d0
 801ed34:	0802e765 	.word	0x0802e765
 801ed38:	0802e2a2 	.word	0x0802e2a2
 801ed3c:	20014be4 	.word	0x20014be4
 801ed40:	20014bde 	.word	0x20014bde

0801ed44 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801ed44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed48:	f8b1 9000 	ldrh.w	r9, [r1]
 801ed4c:	b091      	sub	sp, #68	; 0x44
 801ed4e:	4604      	mov	r4, r0
 801ed50:	460f      	mov	r7, r1
 801ed52:	f1b9 0f01 	cmp.w	r9, #1
 801ed56:	4690      	mov	r8, r2
 801ed58:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 801ed5c:	d006      	beq.n	801ed6c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x28>
 801ed5e:	4b84      	ldr	r3, [pc, #528]	; (801ef70 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22c>)
 801ed60:	f240 212f 	movw	r1, #559	; 0x22f
 801ed64:	4a83      	ldr	r2, [pc, #524]	; (801ef74 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x230>)
 801ed66:	4884      	ldr	r0, [pc, #528]	; (801ef78 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x234>)
 801ed68:	f008 fb4c 	bl	8027404 <__assert_func>
 801ed6c:	2d00      	cmp	r5, #0
 801ed6e:	d04f      	beq.n	801ee10 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 801ed70:	6810      	ldr	r0, [r2, #0]
 801ed72:	ae0c      	add	r6, sp, #48	; 0x30
 801ed74:	6851      	ldr	r1, [r2, #4]
 801ed76:	f8df b208 	ldr.w	fp, [pc, #520]	; 801ef80 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>
 801ed7a:	c603      	stmia	r6!, {r0, r1}
 801ed7c:	6818      	ldr	r0, [r3, #0]
 801ed7e:	ae0e      	add	r6, sp, #56	; 0x38
 801ed80:	6859      	ldr	r1, [r3, #4]
 801ed82:	c603      	stmia	r6!, {r0, r1}
 801ed84:	a80c      	add	r0, sp, #48	; 0x30
 801ed86:	f7f9 fcdf 	bl	8018748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ed8a:	4641      	mov	r1, r8
 801ed8c:	a80e      	add	r0, sp, #56	; 0x38
 801ed8e:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 801ef84 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x240>
 801ed92:	f7f9 fd01 	bl	8018798 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ed96:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801ed9a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801ed9e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801eda2:	f8db 0000 	ldr.w	r0, [fp]
 801eda6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801edaa:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 801edae:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801edb2:	440c      	add	r4, r1
 801edb4:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801edb8:	440a      	add	r2, r1
 801edba:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801edbe:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801edc2:	4413      	add	r3, r2
 801edc4:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801edc8:	6803      	ldr	r3, [r0, #0]
 801edca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801edcc:	4798      	blx	r3
 801edce:	f010 0f80 	tst.w	r0, #128	; 0x80
 801edd2:	f8db 0000 	ldr.w	r0, [fp]
 801edd6:	d01e      	beq.n	801ee16 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xd2>
 801edd8:	2200      	movs	r2, #0
 801edda:	6801      	ldr	r1, [r0, #0]
 801eddc:	b2b6      	uxth	r6, r6
 801edde:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801ede2:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801ede6:	220b      	movs	r2, #11
 801ede8:	9207      	str	r2, [sp, #28]
 801edea:	f8b8 2000 	ldrh.w	r2, [r8]
 801edee:	9504      	str	r5, [sp, #16]
 801edf0:	9601      	str	r6, [sp, #4]
 801edf2:	e9cd 9205 	strd	r9, r2, [sp, #20]
 801edf6:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801edfa:	9203      	str	r2, [sp, #12]
 801edfc:	fa1f f28a 	uxth.w	r2, sl
 801ee00:	9202      	str	r2, [sp, #8]
 801ee02:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801ee06:	9200      	str	r2, [sp, #0]
 801ee08:	463a      	mov	r2, r7
 801ee0a:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801ee0c:	4621      	mov	r1, r4
 801ee0e:	47a8      	blx	r5
 801ee10:	b011      	add	sp, #68	; 0x44
 801ee12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee16:	6803      	ldr	r3, [r0, #0]
 801ee18:	ea4f 0946 	mov.w	r9, r6, lsl #1
 801ee1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ee1e:	4798      	blx	r3
 801ee20:	f8b8 2000 	ldrh.w	r2, [r8]
 801ee24:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801ee28:	2dff      	cmp	r5, #255	; 0xff
 801ee2a:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801ee2e:	fb0a fa02 	mul.w	sl, sl, r2
 801ee32:	fb02 1303 	mla	r3, r2, r3, r1
 801ee36:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ee3a:	d062      	beq.n	801ef02 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1be>
 801ee3c:	ea6f 0c05 	mvn.w	ip, r5
 801ee40:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 801ee44:	b2ad      	uxth	r5, r5
 801ee46:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801ee4a:	fa5f fc8c 	uxtb.w	ip, ip
 801ee4e:	930a      	str	r3, [sp, #40]	; 0x28
 801ee50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ee52:	4298      	cmp	r0, r3
 801ee54:	f080 8085 	bcs.w	801ef62 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 801ee58:	eb00 0b09 	add.w	fp, r0, r9
 801ee5c:	4558      	cmp	r0, fp
 801ee5e:	d246      	bcs.n	801eeee <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 801ee60:	f814 eb01 	ldrb.w	lr, [r4], #1
 801ee64:	2303      	movs	r3, #3
 801ee66:	2204      	movs	r2, #4
 801ee68:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 801ee6c:	8803      	ldrh	r3, [r0, #0]
 801ee6e:	eb07 0a0e 	add.w	sl, r7, lr
 801ee72:	1219      	asrs	r1, r3, #8
 801ee74:	10da      	asrs	r2, r3, #3
 801ee76:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801ee7a:	f89a 8002 	ldrb.w	r8, [sl, #2]
 801ee7e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801ee82:	00db      	lsls	r3, r3, #3
 801ee84:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801ee88:	fb18 f805 	smulbb	r8, r8, r5
 801ee8c:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 801ee90:	fb1e fe05 	smulbb	lr, lr, r5
 801ee94:	b2db      	uxtb	r3, r3
 801ee96:	fb01 810c 	mla	r1, r1, ip, r8
 801ee9a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801ee9e:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801eea2:	fb18 f805 	smulbb	r8, r8, r5
 801eea6:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801eeaa:	b289      	uxth	r1, r1
 801eeac:	fb02 820c 	mla	r2, r2, ip, r8
 801eeb0:	fb03 e30c 	mla	r3, r3, ip, lr
 801eeb4:	f101 0801 	add.w	r8, r1, #1
 801eeb8:	b292      	uxth	r2, r2
 801eeba:	b29b      	uxth	r3, r3
 801eebc:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801eec0:	f102 0801 	add.w	r8, r2, #1
 801eec4:	f103 0e01 	add.w	lr, r3, #1
 801eec8:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 801eecc:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801eed0:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801eed4:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801eed8:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801eedc:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801eee0:	ea4e 0101 	orr.w	r1, lr, r1
 801eee4:	ea41 0108 	orr.w	r1, r1, r8
 801eee8:	f820 1b02 	strh.w	r1, [r0], #2
 801eeec:	e7b6      	b.n	801ee5c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x118>
 801eeee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eef0:	881b      	ldrh	r3, [r3, #0]
 801eef2:	1b9b      	subs	r3, r3, r6
 801eef4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801eef8:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801eefc:	1b9b      	subs	r3, r3, r6
 801eefe:	441c      	add	r4, r3
 801ef00:	e7a6      	b.n	801ee50 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10c>
 801ef02:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 801ef06:	2203      	movs	r2, #3
 801ef08:	2504      	movs	r5, #4
 801ef0a:	491c      	ldr	r1, [pc, #112]	; (801ef7c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x238>)
 801ef0c:	4550      	cmp	r0, sl
 801ef0e:	d228      	bcs.n	801ef62 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 801ef10:	eb00 0c09 	add.w	ip, r0, r9
 801ef14:	4560      	cmp	r0, ip
 801ef16:	4623      	mov	r3, r4
 801ef18:	d219      	bcs.n	801ef4e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801ef1a:	f893 e000 	ldrb.w	lr, [r3]
 801ef1e:	3401      	adds	r4, #1
 801ef20:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 801ef24:	eb07 0b0e 	add.w	fp, r7, lr
 801ef28:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801ef2c:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801ef30:	f89b b001 	ldrb.w	fp, [fp, #1]
 801ef34:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801ef38:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801ef3c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801ef40:	ea43 030b 	orr.w	r3, r3, fp
 801ef44:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 801ef48:	f820 3b02 	strh.w	r3, [r0], #2
 801ef4c:	e7e2      	b.n	801ef14 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>
 801ef4e:	f8b8 3000 	ldrh.w	r3, [r8]
 801ef52:	1b9b      	subs	r3, r3, r6
 801ef54:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ef58:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801ef5c:	1b9b      	subs	r3, r3, r6
 801ef5e:	441c      	add	r4, r3
 801ef60:	e7d4      	b.n	801ef0c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>
 801ef62:	4b07      	ldr	r3, [pc, #28]	; (801ef80 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>)
 801ef64:	6818      	ldr	r0, [r3, #0]
 801ef66:	6803      	ldr	r3, [r0, #0]
 801ef68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ef6a:	4798      	blx	r3
 801ef6c:	e750      	b.n	801ee10 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 801ef6e:	bf00      	nop
 801ef70:	0802e11e 	.word	0x0802e11e
 801ef74:	0802e7ee 	.word	0x0802e7ee
 801ef78:	0802e2a2 	.word	0x0802e2a2
 801ef7c:	fffff800 	.word	0xfffff800
 801ef80:	20014be4 	.word	0x20014be4
 801ef84:	20014bde 	.word	0x20014bde

0801ef88 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801ef88:	b430      	push	{r4, r5}
 801ef8a:	780d      	ldrb	r5, [r1, #0]
 801ef8c:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801ef90:	2d01      	cmp	r5, #1
 801ef92:	d00a      	beq.n	801efaa <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 801ef94:	d305      	bcc.n	801efa2 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801ef96:	2d02      	cmp	r5, #2
 801ef98:	d10b      	bne.n	801efb2 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 801ef9a:	9402      	str	r4, [sp, #8]
 801ef9c:	bc30      	pop	{r4, r5}
 801ef9e:	f7ff bdf5 	b.w	801eb8c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801efa2:	9402      	str	r4, [sp, #8]
 801efa4:	bc30      	pop	{r4, r5}
 801efa6:	f7ff bcfb 	b.w	801e9a0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801efaa:	9402      	str	r4, [sp, #8]
 801efac:	bc30      	pop	{r4, r5}
 801efae:	f7ff bec9 	b.w	801ed44 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801efb2:	bc30      	pop	{r4, r5}
 801efb4:	4770      	bx	lr
	...

0801efb8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801efb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efbc:	b087      	sub	sp, #28
 801efbe:	4604      	mov	r4, r0
 801efc0:	460e      	mov	r6, r1
 801efc2:	6810      	ldr	r0, [r2, #0]
 801efc4:	6851      	ldr	r1, [r2, #4]
 801efc6:	ad02      	add	r5, sp, #8
 801efc8:	4617      	mov	r7, r2
 801efca:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801efce:	f8df 9230 	ldr.w	r9, [pc, #560]	; 801f200 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801efd2:	c503      	stmia	r5!, {r0, r1}
 801efd4:	6818      	ldr	r0, [r3, #0]
 801efd6:	ad04      	add	r5, sp, #16
 801efd8:	6859      	ldr	r1, [r3, #4]
 801efda:	c503      	stmia	r5!, {r0, r1}
 801efdc:	a802      	add	r0, sp, #8
 801efde:	f7f9 fbb3 	bl	8018748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801efe2:	4639      	mov	r1, r7
 801efe4:	a804      	add	r0, sp, #16
 801efe6:	f7f9 fbd7 	bl	8018798 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801efea:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801efee:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801eff2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801eff6:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801effa:	fb11 2103 	smlabb	r1, r1, r3, r2
 801effe:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801f002:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801f006:	440e      	add	r6, r1
 801f008:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801f00c:	440a      	add	r2, r1
 801f00e:	f8ad 2010 	strh.w	r2, [sp, #16]
 801f012:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801f016:	4413      	add	r3, r2
 801f018:	f8ad 3012 	strh.w	r3, [sp, #18]
 801f01c:	4b77      	ldr	r3, [pc, #476]	; (801f1fc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801f01e:	6818      	ldr	r0, [r3, #0]
 801f020:	6803      	ldr	r3, [r0, #0]
 801f022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f024:	4798      	blx	r3
 801f026:	f8b9 b000 	ldrh.w	fp, [r9]
 801f02a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801f02e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801f032:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801f036:	fb05 f50b 	mul.w	r5, r5, fp
 801f03a:	fb0b 2303 	mla	r3, fp, r3, r2
 801f03e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f042:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801f046:	9300      	str	r3, [sp, #0]
 801f048:	d069      	beq.n	801f11e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 801f04a:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 801f04e:	4558      	cmp	r0, fp
 801f050:	f080 80cc 	bcs.w	801f1ec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801f054:	9b00      	ldr	r3, [sp, #0]
 801f056:	4631      	mov	r1, r6
 801f058:	18c3      	adds	r3, r0, r3
 801f05a:	9301      	str	r3, [sp, #4]
 801f05c:	9b01      	ldr	r3, [sp, #4]
 801f05e:	4298      	cmp	r0, r3
 801f060:	d24f      	bcs.n	801f102 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 801f062:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f066:	2a00      	cmp	r2, #0
 801f068:	d048      	beq.n	801f0fc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801f06a:	fb0a f202 	mul.w	r2, sl, r2
 801f06e:	1c53      	adds	r3, r2, #1
 801f070:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f074:	121b      	asrs	r3, r3, #8
 801f076:	d041      	beq.n	801f0fc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801f078:	8802      	ldrh	r2, [r0, #0]
 801f07a:	b29e      	uxth	r6, r3
 801f07c:	f8b4 c000 	ldrh.w	ip, [r4]
 801f080:	43db      	mvns	r3, r3
 801f082:	1215      	asrs	r5, r2, #8
 801f084:	b2db      	uxtb	r3, r3
 801f086:	ea4f 272c 	mov.w	r7, ip, asr #8
 801f08a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801f08e:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801f092:	fb15 f503 	smulbb	r5, r5, r3
 801f096:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f09a:	00d2      	lsls	r2, r2, #3
 801f09c:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801f0a0:	fb07 5706 	mla	r7, r7, r6, r5
 801f0a4:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801f0a8:	b2d2      	uxtb	r2, r2
 801f0aa:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801f0ae:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801f0b2:	fb1e fe03 	smulbb	lr, lr, r3
 801f0b6:	b2bf      	uxth	r7, r7
 801f0b8:	fb12 f203 	smulbb	r2, r2, r3
 801f0bc:	fa5f fc8c 	uxtb.w	ip, ip
 801f0c0:	fb05 e506 	mla	r5, r5, r6, lr
 801f0c4:	f107 0e01 	add.w	lr, r7, #1
 801f0c8:	fb0c 2c06 	mla	ip, ip, r6, r2
 801f0cc:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801f0d0:	fa1f fc8c 	uxth.w	ip, ip
 801f0d4:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 801f0d8:	b2ad      	uxth	r5, r5
 801f0da:	f10c 0701 	add.w	r7, ip, #1
 801f0de:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801f0e2:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801f0e6:	ea47 070e 	orr.w	r7, r7, lr
 801f0ea:	f105 0e01 	add.w	lr, r5, #1
 801f0ee:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801f0f2:	096d      	lsrs	r5, r5, #5
 801f0f4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f0f8:	432f      	orrs	r7, r5
 801f0fa:	8007      	strh	r7, [r0, #0]
 801f0fc:	3002      	adds	r0, #2
 801f0fe:	3402      	adds	r4, #2
 801f100:	e7ac      	b.n	801f05c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801f102:	f8b9 3000 	ldrh.w	r3, [r9]
 801f106:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801f10a:	eba3 0308 	sub.w	r3, r3, r8
 801f10e:	eba6 0608 	sub.w	r6, r6, r8
 801f112:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f116:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801f11a:	440e      	add	r6, r1
 801f11c:	e797      	b.n	801f04e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801f11e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801f122:	42a8      	cmp	r0, r5
 801f124:	d262      	bcs.n	801f1ec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801f126:	9b00      	ldr	r3, [sp, #0]
 801f128:	4631      	mov	r1, r6
 801f12a:	eb00 0b03 	add.w	fp, r0, r3
 801f12e:	4558      	cmp	r0, fp
 801f130:	d24e      	bcs.n	801f1d0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 801f132:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f136:	b12b      	cbz	r3, 801f144 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801f138:	2bff      	cmp	r3, #255	; 0xff
 801f13a:	f8b4 e000 	ldrh.w	lr, [r4]
 801f13e:	d104      	bne.n	801f14a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 801f140:	f8a0 e000 	strh.w	lr, [r0]
 801f144:	3002      	adds	r0, #2
 801f146:	3402      	adds	r4, #2
 801f148:	e7f1      	b.n	801f12e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 801f14a:	8802      	ldrh	r2, [r0, #0]
 801f14c:	b29f      	uxth	r7, r3
 801f14e:	43db      	mvns	r3, r3
 801f150:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801f154:	1216      	asrs	r6, r2, #8
 801f156:	b2db      	uxtb	r3, r3
 801f158:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f15c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f160:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801f164:	00d2      	lsls	r2, r2, #3
 801f166:	fb16 f603 	smulbb	r6, r6, r3
 801f16a:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f16e:	b2d2      	uxtb	r2, r2
 801f170:	fb0c 6c07 	mla	ip, ip, r7, r6
 801f174:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801f178:	fb1a fa03 	smulbb	sl, sl, r3
 801f17c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f180:	fa1f fc8c 	uxth.w	ip, ip
 801f184:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f188:	fb12 f303 	smulbb	r3, r2, r3
 801f18c:	fa5f fe8e 	uxtb.w	lr, lr
 801f190:	fb06 a607 	mla	r6, r6, r7, sl
 801f194:	f10c 0201 	add.w	r2, ip, #1
 801f198:	fb0e 3307 	mla	r3, lr, r7, r3
 801f19c:	b2b6      	uxth	r6, r6
 801f19e:	b29b      	uxth	r3, r3
 801f1a0:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801f1a4:	f106 0a01 	add.w	sl, r6, #1
 801f1a8:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 801f1ac:	f103 0c01 	add.w	ip, r3, #1
 801f1b0:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801f1b4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801f1b8:	0976      	lsrs	r6, r6, #5
 801f1ba:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801f1be:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801f1c2:	ea4c 0c02 	orr.w	ip, ip, r2
 801f1c6:	ea4c 0c06 	orr.w	ip, ip, r6
 801f1ca:	f8a0 c000 	strh.w	ip, [r0]
 801f1ce:	e7b9      	b.n	801f144 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801f1d0:	f8b9 3000 	ldrh.w	r3, [r9]
 801f1d4:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801f1d8:	eba3 0308 	sub.w	r3, r3, r8
 801f1dc:	eba6 0608 	sub.w	r6, r6, r8
 801f1e0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f1e4:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801f1e8:	440e      	add	r6, r1
 801f1ea:	e79a      	b.n	801f122 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 801f1ec:	4b03      	ldr	r3, [pc, #12]	; (801f1fc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801f1ee:	6818      	ldr	r0, [r3, #0]
 801f1f0:	6803      	ldr	r3, [r0, #0]
 801f1f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f1f4:	4798      	blx	r3
 801f1f6:	b007      	add	sp, #28
 801f1f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f1fc:	20014be4 	.word	0x20014be4
 801f200:	20014bde 	.word	0x20014bde

0801f204 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801f204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f208:	b089      	sub	sp, #36	; 0x24
 801f20a:	4682      	mov	sl, r0
 801f20c:	460f      	mov	r7, r1
 801f20e:	4691      	mov	r9, r2
 801f210:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801f214:	4698      	mov	r8, r3
 801f216:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f218:	2e00      	cmp	r6, #0
 801f21a:	d03d      	beq.n	801f298 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801f21c:	4608      	mov	r0, r1
 801f21e:	f7fc f857 	bl	801b2d0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801f222:	4605      	mov	r5, r0
 801f224:	4638      	mov	r0, r7
 801f226:	f7fc f88d 	bl	801b344 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801f22a:	f8ad 000e 	strh.w	r0, [sp, #14]
 801f22e:	4638      	mov	r0, r7
 801f230:	f8ad 9008 	strh.w	r9, [sp, #8]
 801f234:	f8ad 500c 	strh.w	r5, [sp, #12]
 801f238:	f8ad 800a 	strh.w	r8, [sp, #10]
 801f23c:	f7fc f950 	bl	801b4e0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f240:	4605      	mov	r5, r0
 801f242:	4638      	mov	r0, r7
 801f244:	f7fc f97e 	bl	801b544 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801f248:	4681      	mov	r9, r0
 801f24a:	4638      	mov	r0, r7
 801f24c:	f7fc f9d2 	bl	801b5f4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f250:	280b      	cmp	r0, #11
 801f252:	f200 816f 	bhi.w	801f534 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x330>
 801f256:	e8df f010 	tbh	[pc, r0, lsl #1]
 801f25a:	00c3      	.short	0x00c3
 801f25c:	000c00b4 	.word	0x000c00b4
 801f260:	016d016d 	.word	0x016d016d
 801f264:	016d016d 	.word	0x016d016d
 801f268:	016d016d 	.word	0x016d016d
 801f26c:	016d016d 	.word	0x016d016d
 801f270:	00bb      	.short	0x00bb
 801f272:	4bb3      	ldr	r3, [pc, #716]	; (801f540 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x33c>)
 801f274:	6818      	ldr	r0, [r3, #0]
 801f276:	6803      	ldr	r3, [r0, #0]
 801f278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f27a:	4798      	blx	r3
 801f27c:	2eff      	cmp	r6, #255	; 0xff
 801f27e:	d121      	bne.n	801f2c4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801f280:	0683      	lsls	r3, r0, #26
 801f282:	d41f      	bmi.n	801f2c4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801f284:	4638      	mov	r0, r7
 801f286:	f7fc f8f1 	bl	801b46c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801f28a:	b940      	cbnz	r0, 801f29e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x9a>
 801f28c:	4623      	mov	r3, r4
 801f28e:	aa02      	add	r2, sp, #8
 801f290:	4629      	mov	r1, r5
 801f292:	4650      	mov	r0, sl
 801f294:	f7ff f9e4 	bl	801e660 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801f298:	b009      	add	sp, #36	; 0x24
 801f29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f29e:	f10d 0818 	add.w	r8, sp, #24
 801f2a2:	4639      	mov	r1, r7
 801f2a4:	af04      	add	r7, sp, #16
 801f2a6:	4640      	mov	r0, r8
 801f2a8:	f7fc f886 	bl	801b3b8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801f2ac:	e898 0003 	ldmia.w	r8, {r0, r1}
 801f2b0:	e887 0003 	stmia.w	r7, {r0, r1}
 801f2b4:	4638      	mov	r0, r7
 801f2b6:	4621      	mov	r1, r4
 801f2b8:	f7f7 f9ae 	bl	8016618 <_ZN8touchgfx4RectaNERKS0_>
 801f2bc:	4638      	mov	r0, r7
 801f2be:	f7f7 f9ee 	bl	801669e <_ZNK8touchgfx4Rect7isEmptyEv>
 801f2c2:	b130      	cbz	r0, 801f2d2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xce>
 801f2c4:	4633      	mov	r3, r6
 801f2c6:	4622      	mov	r2, r4
 801f2c8:	a902      	add	r1, sp, #8
 801f2ca:	4628      	mov	r0, r5
 801f2cc:	f7ff f8e2 	bl	801e494 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801f2d0:	e7e2      	b.n	801f298 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801f2d2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801f2d6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801f2da:	4293      	cmp	r3, r2
 801f2dc:	dd12      	ble.n	801f304 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x100>
 801f2de:	1a9b      	subs	r3, r3, r2
 801f2e0:	f9b4 0000 	ldrsh.w	r0, [r4]
 801f2e4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801f2e8:	f8ad 0018 	strh.w	r0, [sp, #24]
 801f2ec:	4628      	mov	r0, r5
 801f2ee:	f8ad 201a 	strh.w	r2, [sp, #26]
 801f2f2:	4642      	mov	r2, r8
 801f2f4:	f8ad 101c 	strh.w	r1, [sp, #28]
 801f2f8:	a902      	add	r1, sp, #8
 801f2fa:	f8ad 301e 	strh.w	r3, [sp, #30]
 801f2fe:	4633      	mov	r3, r6
 801f300:	f7ff f8c8 	bl	801e494 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801f304:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801f308:	f9b4 2000 	ldrsh.w	r2, [r4]
 801f30c:	4293      	cmp	r3, r2
 801f30e:	dd12      	ble.n	801f336 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x132>
 801f310:	1a9b      	subs	r3, r3, r2
 801f312:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801f316:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801f31a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801f31e:	4642      	mov	r2, r8
 801f320:	f8ad 001a 	strh.w	r0, [sp, #26]
 801f324:	4628      	mov	r0, r5
 801f326:	f8ad 301c 	strh.w	r3, [sp, #28]
 801f32a:	23ff      	movs	r3, #255	; 0xff
 801f32c:	f8ad 101e 	strh.w	r1, [sp, #30]
 801f330:	a902      	add	r1, sp, #8
 801f332:	f7ff f8af 	bl	801e494 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801f336:	463b      	mov	r3, r7
 801f338:	aa02      	add	r2, sp, #8
 801f33a:	4629      	mov	r1, r5
 801f33c:	4650      	mov	r0, sl
 801f33e:	f7ff f98f 	bl	801e660 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801f342:	88a2      	ldrh	r2, [r4, #4]
 801f344:	8823      	ldrh	r3, [r4, #0]
 801f346:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801f34a:	4413      	add	r3, r2
 801f34c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801f350:	440a      	add	r2, r1
 801f352:	b29b      	uxth	r3, r3
 801f354:	b292      	uxth	r2, r2
 801f356:	b218      	sxth	r0, r3
 801f358:	b211      	sxth	r1, r2
 801f35a:	4288      	cmp	r0, r1
 801f35c:	dd12      	ble.n	801f384 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x180>
 801f35e:	1a9b      	subs	r3, r3, r2
 801f360:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801f364:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 801f368:	4642      	mov	r2, r8
 801f36a:	f8ad 1018 	strh.w	r1, [sp, #24]
 801f36e:	a902      	add	r1, sp, #8
 801f370:	f8ad 301c 	strh.w	r3, [sp, #28]
 801f374:	23ff      	movs	r3, #255	; 0xff
 801f376:	f8ad 001e 	strh.w	r0, [sp, #30]
 801f37a:	4628      	mov	r0, r5
 801f37c:	f8ad 601a 	strh.w	r6, [sp, #26]
 801f380:	f7ff f888 	bl	801e494 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801f384:	88e2      	ldrh	r2, [r4, #6]
 801f386:	8863      	ldrh	r3, [r4, #2]
 801f388:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801f38c:	4413      	add	r3, r2
 801f38e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801f392:	440a      	add	r2, r1
 801f394:	b29b      	uxth	r3, r3
 801f396:	b292      	uxth	r2, r2
 801f398:	b218      	sxth	r0, r3
 801f39a:	b211      	sxth	r1, r2
 801f39c:	4288      	cmp	r0, r1
 801f39e:	f77f af7b 	ble.w	801f298 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801f3a2:	1a9b      	subs	r3, r3, r2
 801f3a4:	f9b4 6000 	ldrsh.w	r6, [r4]
 801f3a8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801f3ac:	4642      	mov	r2, r8
 801f3ae:	f8ad 301e 	strh.w	r3, [sp, #30]
 801f3b2:	23ff      	movs	r3, #255	; 0xff
 801f3b4:	f8ad 6018 	strh.w	r6, [sp, #24]
 801f3b8:	f8ad 101a 	strh.w	r1, [sp, #26]
 801f3bc:	f8ad 001c 	strh.w	r0, [sp, #28]
 801f3c0:	e782      	b.n	801f2c8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 801f3c2:	4633      	mov	r3, r6
 801f3c4:	4622      	mov	r2, r4
 801f3c6:	a902      	add	r1, sp, #8
 801f3c8:	4628      	mov	r0, r5
 801f3ca:	f7ff f9b9 	bl	801e740 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801f3ce:	e763      	b.n	801f298 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801f3d0:	9600      	str	r6, [sp, #0]
 801f3d2:	4623      	mov	r3, r4
 801f3d4:	aa02      	add	r2, sp, #8
 801f3d6:	4649      	mov	r1, r9
 801f3d8:	4628      	mov	r0, r5
 801f3da:	f7ff fdd5 	bl	801ef88 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801f3de:	e75b      	b.n	801f298 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801f3e0:	4638      	mov	r0, r7
 801f3e2:	f7fc f843 	bl	801b46c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801f3e6:	b950      	cbnz	r0, 801f3fe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fa>
 801f3e8:	f8da 3000 	ldr.w	r3, [sl]
 801f3ec:	aa02      	add	r2, sp, #8
 801f3ee:	4629      	mov	r1, r5
 801f3f0:	e9cd 6000 	strd	r6, r0, [sp]
 801f3f4:	4650      	mov	r0, sl
 801f3f6:	68de      	ldr	r6, [r3, #12]
 801f3f8:	4623      	mov	r3, r4
 801f3fa:	47b0      	blx	r6
 801f3fc:	e74c      	b.n	801f298 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801f3fe:	f10d 0818 	add.w	r8, sp, #24
 801f402:	4639      	mov	r1, r7
 801f404:	af04      	add	r7, sp, #16
 801f406:	4640      	mov	r0, r8
 801f408:	f7fb ffd6 	bl	801b3b8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801f40c:	e898 0003 	ldmia.w	r8, {r0, r1}
 801f410:	e887 0003 	stmia.w	r7, {r0, r1}
 801f414:	4638      	mov	r0, r7
 801f416:	4621      	mov	r1, r4
 801f418:	f7f7 f8fe 	bl	8016618 <_ZN8touchgfx4RectaNERKS0_>
 801f41c:	4638      	mov	r0, r7
 801f41e:	f7f7 f93e 	bl	801669e <_ZNK8touchgfx4Rect7isEmptyEv>
 801f422:	b138      	cbz	r0, 801f434 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 801f424:	4623      	mov	r3, r4
 801f426:	9600      	str	r6, [sp, #0]
 801f428:	aa02      	add	r2, sp, #8
 801f42a:	4649      	mov	r1, r9
 801f42c:	4628      	mov	r0, r5
 801f42e:	f7ff fdc3 	bl	801efb8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801f432:	e731      	b.n	801f298 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801f434:	f8da 3000 	ldr.w	r3, [sl]
 801f438:	aa02      	add	r2, sp, #8
 801f43a:	4629      	mov	r1, r5
 801f43c:	e9cd 6000 	strd	r6, r0, [sp]
 801f440:	4650      	mov	r0, sl
 801f442:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801f446:	463b      	mov	r3, r7
 801f448:	47d8      	blx	fp
 801f44a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801f44e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801f452:	4293      	cmp	r3, r2
 801f454:	dd13      	ble.n	801f47e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x27a>
 801f456:	f9b4 0000 	ldrsh.w	r0, [r4]
 801f45a:	1a9b      	subs	r3, r3, r2
 801f45c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801f460:	f8ad 0018 	strh.w	r0, [sp, #24]
 801f464:	4628      	mov	r0, r5
 801f466:	f8ad 201a 	strh.w	r2, [sp, #26]
 801f46a:	aa02      	add	r2, sp, #8
 801f46c:	f8ad 101c 	strh.w	r1, [sp, #28]
 801f470:	4649      	mov	r1, r9
 801f472:	f8ad 301e 	strh.w	r3, [sp, #30]
 801f476:	4643      	mov	r3, r8
 801f478:	9600      	str	r6, [sp, #0]
 801f47a:	f7ff fd9d 	bl	801efb8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801f47e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801f482:	f9b4 2000 	ldrsh.w	r2, [r4]
 801f486:	4293      	cmp	r3, r2
 801f488:	dd13      	ble.n	801f4b2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2ae>
 801f48a:	1a9b      	subs	r3, r3, r2
 801f48c:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801f490:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801f494:	f8ad 2018 	strh.w	r2, [sp, #24]
 801f498:	aa02      	add	r2, sp, #8
 801f49a:	f8ad 001a 	strh.w	r0, [sp, #26]
 801f49e:	4628      	mov	r0, r5
 801f4a0:	f8ad 301c 	strh.w	r3, [sp, #28]
 801f4a4:	4643      	mov	r3, r8
 801f4a6:	f8ad 101e 	strh.w	r1, [sp, #30]
 801f4aa:	4649      	mov	r1, r9
 801f4ac:	9600      	str	r6, [sp, #0]
 801f4ae:	f7ff fd83 	bl	801efb8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801f4b2:	88a2      	ldrh	r2, [r4, #4]
 801f4b4:	8823      	ldrh	r3, [r4, #0]
 801f4b6:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801f4ba:	4413      	add	r3, r2
 801f4bc:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801f4c0:	440a      	add	r2, r1
 801f4c2:	b29b      	uxth	r3, r3
 801f4c4:	b292      	uxth	r2, r2
 801f4c6:	b218      	sxth	r0, r3
 801f4c8:	b211      	sxth	r1, r2
 801f4ca:	4288      	cmp	r0, r1
 801f4cc:	dd13      	ble.n	801f4f6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2f2>
 801f4ce:	1a9b      	subs	r3, r3, r2
 801f4d0:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801f4d4:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 801f4d8:	aa02      	add	r2, sp, #8
 801f4da:	f8ad 1018 	strh.w	r1, [sp, #24]
 801f4de:	4649      	mov	r1, r9
 801f4e0:	f8ad 301c 	strh.w	r3, [sp, #28]
 801f4e4:	4643      	mov	r3, r8
 801f4e6:	f8ad 001e 	strh.w	r0, [sp, #30]
 801f4ea:	4628      	mov	r0, r5
 801f4ec:	9600      	str	r6, [sp, #0]
 801f4ee:	f8ad 701a 	strh.w	r7, [sp, #26]
 801f4f2:	f7ff fd61 	bl	801efb8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801f4f6:	88e2      	ldrh	r2, [r4, #6]
 801f4f8:	8863      	ldrh	r3, [r4, #2]
 801f4fa:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801f4fe:	4413      	add	r3, r2
 801f500:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801f504:	440a      	add	r2, r1
 801f506:	b29b      	uxth	r3, r3
 801f508:	b292      	uxth	r2, r2
 801f50a:	b218      	sxth	r0, r3
 801f50c:	b211      	sxth	r1, r2
 801f50e:	4288      	cmp	r0, r1
 801f510:	f77f aec2 	ble.w	801f298 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801f514:	f9b4 7000 	ldrsh.w	r7, [r4]
 801f518:	1a9b      	subs	r3, r3, r2
 801f51a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801f51e:	f8ad 301e 	strh.w	r3, [sp, #30]
 801f522:	4643      	mov	r3, r8
 801f524:	f8ad 7018 	strh.w	r7, [sp, #24]
 801f528:	f8ad 101a 	strh.w	r1, [sp, #26]
 801f52c:	f8ad 001c 	strh.w	r0, [sp, #28]
 801f530:	9600      	str	r6, [sp, #0]
 801f532:	e779      	b.n	801f428 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x224>
 801f534:	4b03      	ldr	r3, [pc, #12]	; (801f544 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x340>)
 801f536:	21b4      	movs	r1, #180	; 0xb4
 801f538:	4a03      	ldr	r2, [pc, #12]	; (801f548 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x344>)
 801f53a:	4804      	ldr	r0, [pc, #16]	; (801f54c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x348>)
 801f53c:	f007 ff62 	bl	8027404 <__assert_func>
 801f540:	20014be4 	.word	0x20014be4
 801f544:	0802e16c 	.word	0x0802e16c
 801f548:	0802e877 	.word	0x0802e877
 801f54c:	0802e2a2 	.word	0x0802e2a2

0801f550 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801f550:	b508      	push	{r3, lr}
 801f552:	b180      	cbz	r0, 801f576 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 801f554:	2902      	cmp	r1, #2
 801f556:	d014      	beq.n	801f582 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 801f558:	2903      	cmp	r1, #3
 801f55a:	d01d      	beq.n	801f598 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 801f55c:	2901      	cmp	r1, #1
 801f55e:	d101      	bne.n	801f564 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 801f560:	2001      	movs	r0, #1
 801f562:	bd08      	pop	{r3, pc}
 801f564:	4b0e      	ldr	r3, [pc, #56]	; (801f5a0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801f566:	8818      	ldrh	r0, [r3, #0]
 801f568:	b990      	cbnz	r0, 801f590 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801f56a:	4b0e      	ldr	r3, [pc, #56]	; (801f5a4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 801f56c:	2150      	movs	r1, #80	; 0x50
 801f56e:	4a0e      	ldr	r2, [pc, #56]	; (801f5a8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 801f570:	480e      	ldr	r0, [pc, #56]	; (801f5ac <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 801f572:	f007 ff47 	bl	8027404 <__assert_func>
 801f576:	2902      	cmp	r1, #2
 801f578:	d00e      	beq.n	801f598 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 801f57a:	2903      	cmp	r1, #3
 801f57c:	d0f2      	beq.n	801f564 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 801f57e:	2901      	cmp	r1, #1
 801f580:	d1ee      	bne.n	801f560 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 801f582:	4b07      	ldr	r3, [pc, #28]	; (801f5a0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801f584:	8818      	ldrh	r0, [r3, #0]
 801f586:	2800      	cmp	r0, #0
 801f588:	d0ef      	beq.n	801f56a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801f58a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801f58e:	e7e8      	b.n	801f562 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801f590:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801f594:	4240      	negs	r0, r0
 801f596:	e7e4      	b.n	801f562 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801f598:	f04f 30ff 	mov.w	r0, #4294967295
 801f59c:	e7e1      	b.n	801f562 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801f59e:	bf00      	nop
 801f5a0:	20014bde 	.word	0x20014bde
 801f5a4:	0802e3f8 	.word	0x0802e3f8
 801f5a8:	0802e9f4 	.word	0x0802e9f4
 801f5ac:	0802e43a 	.word	0x0802e43a

0801f5b0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801f5b0:	b508      	push	{r3, lr}
 801f5b2:	b180      	cbz	r0, 801f5d6 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 801f5b4:	2902      	cmp	r1, #2
 801f5b6:	d014      	beq.n	801f5e2 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 801f5b8:	2903      	cmp	r1, #3
 801f5ba:	d018      	beq.n	801f5ee <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 801f5bc:	2901      	cmp	r1, #1
 801f5be:	d001      	beq.n	801f5c4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 801f5c0:	2001      	movs	r0, #1
 801f5c2:	e013      	b.n	801f5ec <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801f5c4:	4b0e      	ldr	r3, [pc, #56]	; (801f600 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801f5c6:	8818      	ldrh	r0, [r3, #0]
 801f5c8:	b970      	cbnz	r0, 801f5e8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 801f5ca:	4b0e      	ldr	r3, [pc, #56]	; (801f604 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 801f5cc:	2150      	movs	r1, #80	; 0x50
 801f5ce:	4a0e      	ldr	r2, [pc, #56]	; (801f608 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 801f5d0:	480e      	ldr	r0, [pc, #56]	; (801f60c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 801f5d2:	f007 ff17 	bl	8027404 <__assert_func>
 801f5d6:	2902      	cmp	r1, #2
 801f5d8:	d009      	beq.n	801f5ee <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 801f5da:	2903      	cmp	r1, #3
 801f5dc:	d0f0      	beq.n	801f5c0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 801f5de:	2901      	cmp	r1, #1
 801f5e0:	d1f0      	bne.n	801f5c4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 801f5e2:	f04f 30ff 	mov.w	r0, #4294967295
 801f5e6:	e001      	b.n	801f5ec <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801f5e8:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801f5ec:	bd08      	pop	{r3, pc}
 801f5ee:	4b04      	ldr	r3, [pc, #16]	; (801f600 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801f5f0:	8818      	ldrh	r0, [r3, #0]
 801f5f2:	2800      	cmp	r0, #0
 801f5f4:	d0e9      	beq.n	801f5ca <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 801f5f6:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801f5fa:	4240      	negs	r0, r0
 801f5fc:	e7f6      	b.n	801f5ec <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801f5fe:	bf00      	nop
 801f600:	20014bde 	.word	0x20014bde
 801f604:	0802e3f8 	.word	0x0802e3f8
 801f608:	0802e9f4 	.word	0x0802e9f4
 801f60c:	0802e43a 	.word	0x0802e43a

0801f610 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801f610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f614:	b099      	sub	sp, #100	; 0x64
 801f616:	910b      	str	r1, [sp, #44]	; 0x2c
 801f618:	a914      	add	r1, sp, #80	; 0x50
 801f61a:	f9bd 5088 	ldrsh.w	r5, [sp, #136]	; 0x88
 801f61e:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
 801f622:	f8bd 7094 	ldrh.w	r7, [sp, #148]	; 0x94
 801f626:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 801f62a:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 801f62e:	e881 000c 	stmia.w	r1, {r2, r3}
 801f632:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 801f636:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 801f63a:	930a      	str	r3, [sp, #40]	; 0x28
 801f63c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801f640:	f891 900d 	ldrb.w	r9, [r1, #13]
 801f644:	9311      	str	r3, [sp, #68]	; 0x44
 801f646:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 801f64a:	7988      	ldrb	r0, [r1, #6]
 801f64c:	930c      	str	r3, [sp, #48]	; 0x30
 801f64e:	ea4f 1349 	mov.w	r3, r9, lsl #5
 801f652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f656:	4303      	orrs	r3, r0
 801f658:	9309      	str	r3, [sp, #36]	; 0x24
 801f65a:	f000 81a1 	beq.w	801f9a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801f65e:	ea4f 1909 	mov.w	r9, r9, lsl #4
 801f662:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801f666:	f891 9007 	ldrb.w	r9, [r1, #7]
 801f66a:	ea59 0903 	orrs.w	r9, r9, r3
 801f66e:	f000 8197 	beq.w	801f9a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801f672:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801f676:	b29b      	uxth	r3, r3
 801f678:	2e00      	cmp	r6, #0
 801f67a:	f000 813a 	beq.w	801f8f2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801f67e:	1af6      	subs	r6, r6, r3
 801f680:	b2b6      	uxth	r6, r6
 801f682:	0433      	lsls	r3, r6, #16
 801f684:	d502      	bpl.n	801f68c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 801f686:	1bad      	subs	r5, r5, r6
 801f688:	2600      	movs	r6, #0
 801f68a:	b22d      	sxth	r5, r5
 801f68c:	f9b2 1000 	ldrsh.w	r1, [r2]
 801f690:	a814      	add	r0, sp, #80	; 0x50
 801f692:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 801f696:	428d      	cmp	r5, r1
 801f698:	b28b      	uxth	r3, r1
 801f69a:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801f69e:	bfbf      	itttt	lt
 801f6a0:	18f6      	addlt	r6, r6, r3
 801f6a2:	1b75      	sublt	r5, r6, r5
 801f6a4:	b2ae      	uxthlt	r6, r5
 801f6a6:	460d      	movlt	r5, r1
 801f6a8:	8891      	ldrh	r1, [r2, #4]
 801f6aa:	440b      	add	r3, r1
 801f6ac:	4629      	mov	r1, r5
 801f6ae:	b21b      	sxth	r3, r3
 801f6b0:	9310      	str	r3, [sp, #64]	; 0x40
 801f6b2:	88d3      	ldrh	r3, [r2, #6]
 801f6b4:	8852      	ldrh	r2, [r2, #2]
 801f6b6:	4413      	add	r3, r2
 801f6b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f6ba:	b21b      	sxth	r3, r3
 801f6bc:	930f      	str	r3, [sp, #60]	; 0x3c
 801f6be:	4bbd      	ldr	r3, [pc, #756]	; (801f9b4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801f6c0:	f893 b000 	ldrb.w	fp, [r3]
 801f6c4:	f10b 3cff 	add.w	ip, fp, #4294967295
 801f6c8:	f1dc 0300 	rsbs	r3, ip, #0
 801f6cc:	eb43 030c 	adc.w	r3, r3, ip
 801f6d0:	930e      	str	r3, [sp, #56]	; 0x38
 801f6d2:	4653      	mov	r3, sl
 801f6d4:	f7f8 febc 	bl	8018450 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801f6d8:	4629      	mov	r1, r5
 801f6da:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 801f6de:	4653      	mov	r3, sl
 801f6e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f6e2:	a814      	add	r0, sp, #80	; 0x50
 801f6e4:	f7f8 fecc 	bl	8018480 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801f6e8:	a918      	add	r1, sp, #96	; 0x60
 801f6ea:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801f6ee:	a817      	add	r0, sp, #92	; 0x5c
 801f6f0:	f7f8 ffe8 	bl	80186c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801f6f4:	f1ba 0f00 	cmp.w	sl, #0
 801f6f8:	f040 80fe 	bne.w	801f8f8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e8>
 801f6fc:	f1bb 0f01 	cmp.w	fp, #1
 801f700:	f040 8102 	bne.w	801f908 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f8>
 801f704:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f706:	b153      	cbz	r3, 801f71e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801f708:	2408      	movs	r4, #8
 801f70a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f70c:	fb94 f3f8 	sdiv	r3, r4, r8
 801f710:	1e5c      	subs	r4, r3, #1
 801f712:	4414      	add	r4, r2
 801f714:	fb94 f4f3 	sdiv	r4, r4, r3
 801f718:	fb14 f403 	smulbb	r4, r4, r3
 801f71c:	b2a4      	uxth	r4, r4
 801f71e:	b906      	cbnz	r6, 801f722 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x112>
 801f720:	b16f      	cbz	r7, 801f73e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12e>
 801f722:	fb07 6304 	mla	r3, r7, r4, r6
 801f726:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801f728:	463a      	mov	r2, r7
 801f72a:	fb08 f303 	mul.w	r3, r8, r3
 801f72e:	f003 0707 	and.w	r7, r3, #7
 801f732:	eb01 03d3 	add.w	r3, r1, r3, lsr #3
 801f736:	9328      	str	r3, [sp, #160]	; 0xa0
 801f738:	eba9 0302 	sub.w	r3, r9, r2
 801f73c:	930d      	str	r3, [sp, #52]	; 0x34
 801f73e:	4651      	mov	r1, sl
 801f740:	980e      	ldr	r0, [sp, #56]	; 0x38
 801f742:	f7ff ff05 	bl	801f550 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801f746:	4651      	mov	r1, sl
 801f748:	4681      	mov	r9, r0
 801f74a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801f74c:	f7ff ff30 	bl	801f5b0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801f750:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f752:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f754:	4683      	mov	fp, r0
 801f756:	eba3 0a02 	sub.w	sl, r3, r2
 801f75a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f75c:	459a      	cmp	sl, r3
 801f75e:	bfa8      	it	ge
 801f760:	469a      	movge	sl, r3
 801f762:	f1ba 0f00 	cmp.w	sl, #0
 801f766:	f340 811b 	ble.w	801f9a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801f76a:	1bad      	subs	r5, r5, r6
 801f76c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f76e:	1b5d      	subs	r5, r3, r5
 801f770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f772:	429d      	cmp	r5, r3
 801f774:	bfd4      	ite	le
 801f776:	ebc6 0605 	rsble	r6, r6, r5
 801f77a:	ebc6 0603 	rsbgt	r6, r6, r3
 801f77e:	2e00      	cmp	r6, #0
 801f780:	f340 810e 	ble.w	801f9a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801f784:	1ba4      	subs	r4, r4, r6
 801f786:	fb08 f304 	mul.w	r3, r8, r4
 801f78a:	930f      	str	r3, [sp, #60]	; 0x3c
 801f78c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f78e:	2b00      	cmp	r3, #0
 801f790:	f040 810b 	bne.w	801f9aa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801f794:	4b88      	ldr	r3, [pc, #544]	; (801f9b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801f796:	6818      	ldr	r0, [r3, #0]
 801f798:	6803      	ldr	r3, [r0, #0]
 801f79a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f79c:	4798      	blx	r3
 801f79e:	2301      	movs	r3, #1
 801f7a0:	4a86      	ldr	r2, [pc, #536]	; (801f9bc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801f7a2:	fa03 f308 	lsl.w	r3, r3, r8
 801f7a6:	8811      	ldrh	r1, [r2, #0]
 801f7a8:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801f7ac:	3b01      	subs	r3, #1
 801f7ae:	b2db      	uxtb	r3, r3
 801f7b0:	930e      	str	r3, [sp, #56]	; 0x38
 801f7b2:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801f7b6:	fb01 2303 	mla	r3, r1, r3, r2
 801f7ba:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801f7be:	930a      	str	r3, [sp, #40]	; 0x28
 801f7c0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f7c2:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801f7c6:	9313      	str	r3, [sp, #76]	; 0x4c
 801f7c8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f7ca:	0a19      	lsrs	r1, r3, #8
 801f7cc:	b2cb      	uxtb	r3, r1
 801f7ce:	9312      	str	r3, [sp, #72]	; 0x48
 801f7d0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f7d2:	b2db      	uxtb	r3, r3
 801f7d4:	9311      	str	r3, [sp, #68]	; 0x44
 801f7d6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f7d8:	095a      	lsrs	r2, r3, #5
 801f7da:	4b79      	ldr	r3, [pc, #484]	; (801f9c0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>)
 801f7dc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f7e0:	400b      	ands	r3, r1
 801f7e2:	4313      	orrs	r3, r2
 801f7e4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f7e6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801f7ea:	4313      	orrs	r3, r2
 801f7ec:	b29b      	uxth	r3, r3
 801f7ee:	9310      	str	r3, [sp, #64]	; 0x40
 801f7f0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f7f2:	781a      	ldrb	r2, [r3, #0]
 801f7f4:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801f7f8:	fb06 b919 	mls	r9, r6, r9, fp
 801f7fc:	413a      	asrs	r2, r7
 801f7fe:	fb03 fb06 	mul.w	fp, r3, r6
 801f802:	930d      	str	r3, [sp, #52]	; 0x34
 801f804:	b2d2      	uxtb	r2, r2
 801f806:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 801f80a:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801f80e:	f0c0 80ea 	bcc.w	801f9e6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d6>
 801f812:	46b6      	mov	lr, r6
 801f814:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 801f818:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801f81c:	f0c0 80d2 	bcc.w	801f9c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>
 801f820:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f822:	4013      	ands	r3, r2
 801f824:	d055      	beq.n	801f8d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c2>
 801f826:	20ff      	movs	r0, #255	; 0xff
 801f828:	990e      	ldr	r1, [sp, #56]	; 0x38
 801f82a:	fb90 f1f1 	sdiv	r1, r0, r1
 801f82e:	434b      	muls	r3, r1
 801f830:	2bfe      	cmp	r3, #254	; 0xfe
 801f832:	dd03      	ble.n	801f83c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22c>
 801f834:	990c      	ldr	r1, [sp, #48]	; 0x30
 801f836:	4281      	cmp	r1, r0
 801f838:	f000 80b9 	beq.w	801f9ae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801f83c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801f83e:	f8bc 4000 	ldrh.w	r4, [ip]
 801f842:	fb11 f303 	smulbb	r3, r1, r3
 801f846:	1220      	asrs	r0, r4, #8
 801f848:	b29b      	uxth	r3, r3
 801f84a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801f84e:	1c59      	adds	r1, r3, #1
 801f850:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801f854:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801f858:	10e1      	asrs	r1, r4, #3
 801f85a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f85e:	00e4      	lsls	r4, r4, #3
 801f860:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801f864:	b29d      	uxth	r5, r3
 801f866:	43db      	mvns	r3, r3
 801f868:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801f86c:	b2db      	uxtb	r3, r3
 801f86e:	b2e4      	uxtb	r4, r4
 801f870:	9309      	str	r3, [sp, #36]	; 0x24
 801f872:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f874:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801f878:	fb13 f905 	smulbb	r9, r3, r5
 801f87c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f87e:	fb00 9003 	mla	r0, r0, r3, r9
 801f882:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f884:	fb13 f905 	smulbb	r9, r3, r5
 801f888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f88a:	b280      	uxth	r0, r0
 801f88c:	fb01 9103 	mla	r1, r1, r3, r9
 801f890:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f892:	fb13 f505 	smulbb	r5, r3, r5
 801f896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f898:	b289      	uxth	r1, r1
 801f89a:	fb04 5403 	mla	r4, r4, r3, r5
 801f89e:	1c43      	adds	r3, r0, #1
 801f8a0:	b2a4      	uxth	r4, r4
 801f8a2:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801f8a6:	f104 0901 	add.w	r9, r4, #1
 801f8aa:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801f8ae:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801f8b2:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801f8b6:	ea49 0000 	orr.w	r0, r9, r0
 801f8ba:	f101 0901 	add.w	r9, r1, #1
 801f8be:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 801f8c2:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801f8c6:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801f8ca:	ea40 0009 	orr.w	r0, r0, r9
 801f8ce:	f8ac 0000 	strh.w	r0, [ip]
 801f8d2:	4447      	add	r7, r8
 801f8d4:	b2bf      	uxth	r7, r7
 801f8d6:	2f07      	cmp	r7, #7
 801f8d8:	bf89      	itett	hi
 801f8da:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 801f8dc:	fa42 f208 	asrls.w	r2, r2, r8
 801f8e0:	2700      	movhi	r7, #0
 801f8e2:	785a      	ldrbhi	r2, [r3, #1]
 801f8e4:	bf8a      	itet	hi
 801f8e6:	3301      	addhi	r3, #1
 801f8e8:	b2d2      	uxtbls	r2, r2
 801f8ea:	9328      	strhi	r3, [sp, #160]	; 0xa0
 801f8ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f8ee:	449c      	add	ip, r3
 801f8f0:	e792      	b.n	801f818 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 801f8f2:	441d      	add	r5, r3
 801f8f4:	b22d      	sxth	r5, r5
 801f8f6:	e6c9      	b.n	801f68c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 801f8f8:	f1ba 0f01 	cmp.w	sl, #1
 801f8fc:	f47f af02 	bne.w	801f704 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801f900:	f1bb 0f01 	cmp.w	fp, #1
 801f904:	f47f aefe 	bne.w	801f704 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801f908:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801f9b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>
 801f90c:	f8db 0000 	ldr.w	r0, [fp]
 801f910:	6803      	ldr	r3, [r0, #0]
 801f912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f914:	4798      	blx	r3
 801f916:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801f91a:	465a      	mov	r2, fp
 801f91c:	d006      	beq.n	801f92c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 801f91e:	f1b8 0f04 	cmp.w	r8, #4
 801f922:	d140      	bne.n	801f9a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 801f924:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f926:	3300      	adds	r3, #0
 801f928:	bf18      	it	ne
 801f92a:	2301      	movne	r3, #1
 801f92c:	0580      	lsls	r0, r0, #22
 801f92e:	d563      	bpl.n	801f9f8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 801f930:	f1b8 0f08 	cmp.w	r8, #8
 801f934:	d160      	bne.n	801f9f8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 801f936:	2b00      	cmp	r3, #0
 801f938:	bf0c      	ite	eq
 801f93a:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801f93e:	f44f 7180 	movne.w	r1, #256	; 0x100
 801f942:	2e00      	cmp	r6, #0
 801f944:	f47f aede 	bne.w	801f704 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801f948:	2f00      	cmp	r7, #0
 801f94a:	f47f aedb 	bne.w	801f704 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801f94e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f950:	9810      	ldr	r0, [sp, #64]	; 0x40
 801f952:	18eb      	adds	r3, r5, r3
 801f954:	4283      	cmp	r3, r0
 801f956:	f73f aed5 	bgt.w	801f704 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801f95a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f95c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801f95e:	444b      	add	r3, r9
 801f960:	4283      	cmp	r3, r0
 801f962:	f73f aecf 	bgt.w	801f704 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801f966:	f1b8 0f08 	cmp.w	r8, #8
 801f96a:	6810      	ldr	r0, [r2, #0]
 801f96c:	f04f 0600 	mov.w	r6, #0
 801f970:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 801f974:	bf18      	it	ne
 801f976:	3401      	addne	r4, #1
 801f978:	6805      	ldr	r5, [r0, #0]
 801f97a:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801f97e:	bf18      	it	ne
 801f980:	f024 0401 	bicne.w	r4, r4, #1
 801f984:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801f988:	990c      	ldr	r1, [sp, #48]	; 0x30
 801f98a:	bf18      	it	ne
 801f98c:	b2a4      	uxthne	r4, r4
 801f98e:	9104      	str	r1, [sp, #16]
 801f990:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801f992:	e9cd 4900 	strd	r4, r9, [sp]
 801f996:	e9cd 4102 	strd	r4, r1, [sp, #8]
 801f99a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801f99c:	6d6c      	ldr	r4, [r5, #84]	; 0x54
 801f99e:	47a0      	blx	r4
 801f9a0:	b019      	add	sp, #100	; 0x64
 801f9a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f9a6:	2300      	movs	r3, #0
 801f9a8:	e7c0      	b.n	801f92c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 801f9aa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f9ac:	e6f7      	b.n	801f79e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x18e>
 801f9ae:	9810      	ldr	r0, [sp, #64]	; 0x40
 801f9b0:	e78d      	b.n	801f8ce <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2be>
 801f9b2:	bf00      	nop
 801f9b4:	20014bdc 	.word	0x20014bdc
 801f9b8:	20014be4 	.word	0x20014be4
 801f9bc:	20014bde 	.word	0x20014bde
 801f9c0:	00fff800 	.word	0x00fff800
 801f9c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f9c6:	b153      	cbz	r3, 801f9de <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ce>
 801f9c8:	441f      	add	r7, r3
 801f9ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f9cc:	b2bf      	uxth	r7, r7
 801f9ce:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 801f9d2:	f007 0707 	and.w	r7, r7, #7
 801f9d6:	781a      	ldrb	r2, [r3, #0]
 801f9d8:	9328      	str	r3, [sp, #160]	; 0xa0
 801f9da:	413a      	asrs	r2, r7
 801f9dc:	b2d2      	uxtb	r2, r2
 801f9de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f9e0:	445b      	add	r3, fp
 801f9e2:	930a      	str	r3, [sp, #40]	; 0x28
 801f9e4:	e711      	b.n	801f80a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1fa>
 801f9e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f9e8:	2b00      	cmp	r3, #0
 801f9ea:	d1d9      	bne.n	801f9a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801f9ec:	4b05      	ldr	r3, [pc, #20]	; (801fa04 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f4>)
 801f9ee:	6818      	ldr	r0, [r3, #0]
 801f9f0:	6803      	ldr	r3, [r0, #0]
 801f9f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f9f4:	4798      	blx	r3
 801f9f6:	e7d3      	b.n	801f9a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801f9f8:	2b00      	cmp	r3, #0
 801f9fa:	f43f ae83 	beq.w	801f704 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801f9fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 801fa02:	e79e      	b.n	801f942 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801fa04:	20014be4 	.word	0x20014be4

0801fa08 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 801fa08:	b538      	push	{r3, r4, r5, lr}
 801fa0a:	4c15      	ldr	r4, [pc, #84]	; (801fa60 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801fa0c:	4605      	mov	r5, r0
 801fa0e:	7823      	ldrb	r3, [r4, #0]
 801fa10:	f3bf 8f5b 	dmb	ish
 801fa14:	07da      	lsls	r2, r3, #31
 801fa16:	d40b      	bmi.n	801fa30 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801fa18:	4620      	mov	r0, r4
 801fa1a:	f007 fcc7 	bl	80273ac <__cxa_guard_acquire>
 801fa1e:	b138      	cbz	r0, 801fa30 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801fa20:	4620      	mov	r0, r4
 801fa22:	f007 fccf 	bl	80273c4 <__cxa_guard_release>
 801fa26:	4a0f      	ldr	r2, [pc, #60]	; (801fa64 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801fa28:	490f      	ldr	r1, [pc, #60]	; (801fa68 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801fa2a:	4810      	ldr	r0, [pc, #64]	; (801fa6c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801fa2c:	f007 fcb7 	bl	802739e <__aeabi_atexit>
 801fa30:	4c0f      	ldr	r4, [pc, #60]	; (801fa70 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 801fa32:	7823      	ldrb	r3, [r4, #0]
 801fa34:	f3bf 8f5b 	dmb	ish
 801fa38:	07db      	lsls	r3, r3, #31
 801fa3a:	d40b      	bmi.n	801fa54 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801fa3c:	4620      	mov	r0, r4
 801fa3e:	f007 fcb5 	bl	80273ac <__cxa_guard_acquire>
 801fa42:	b138      	cbz	r0, 801fa54 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801fa44:	4620      	mov	r0, r4
 801fa46:	f007 fcbd 	bl	80273c4 <__cxa_guard_release>
 801fa4a:	4a06      	ldr	r2, [pc, #24]	; (801fa64 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801fa4c:	4909      	ldr	r1, [pc, #36]	; (801fa74 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801fa4e:	480a      	ldr	r0, [pc, #40]	; (801fa78 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801fa50:	f007 fca5 	bl	802739e <__aeabi_atexit>
 801fa54:	4b05      	ldr	r3, [pc, #20]	; (801fa6c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801fa56:	612b      	str	r3, [r5, #16]
 801fa58:	4b07      	ldr	r3, [pc, #28]	; (801fa78 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801fa5a:	616b      	str	r3, [r5, #20]
 801fa5c:	bd38      	pop	{r3, r4, r5, pc}
 801fa5e:	bf00      	nop
 801fa60:	20014cb0 	.word	0x20014cb0
 801fa64:	20000000 	.word	0x20000000
 801fa68:	0801dbf5 	.word	0x0801dbf5
 801fa6c:	20000088 	.word	0x20000088
 801fa70:	20014cb4 	.word	0x20014cb4
 801fa74:	0801dbf3 	.word	0x0801dbf3
 801fa78:	2000008c 	.word	0x2000008c

0801fa7c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801fa7c:	b538      	push	{r3, r4, r5, lr}
 801fa7e:	4c15      	ldr	r4, [pc, #84]	; (801fad4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801fa80:	4605      	mov	r5, r0
 801fa82:	7823      	ldrb	r3, [r4, #0]
 801fa84:	f3bf 8f5b 	dmb	ish
 801fa88:	07da      	lsls	r2, r3, #31
 801fa8a:	d40b      	bmi.n	801faa4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801fa8c:	4620      	mov	r0, r4
 801fa8e:	f007 fc8d 	bl	80273ac <__cxa_guard_acquire>
 801fa92:	b138      	cbz	r0, 801faa4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801fa94:	4620      	mov	r0, r4
 801fa96:	f007 fc95 	bl	80273c4 <__cxa_guard_release>
 801fa9a:	4a0f      	ldr	r2, [pc, #60]	; (801fad8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801fa9c:	490f      	ldr	r1, [pc, #60]	; (801fadc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801fa9e:	4810      	ldr	r0, [pc, #64]	; (801fae0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801faa0:	f007 fc7d 	bl	802739e <__aeabi_atexit>
 801faa4:	4c0f      	ldr	r4, [pc, #60]	; (801fae4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801faa6:	7823      	ldrb	r3, [r4, #0]
 801faa8:	f3bf 8f5b 	dmb	ish
 801faac:	07db      	lsls	r3, r3, #31
 801faae:	d40b      	bmi.n	801fac8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801fab0:	4620      	mov	r0, r4
 801fab2:	f007 fc7b 	bl	80273ac <__cxa_guard_acquire>
 801fab6:	b138      	cbz	r0, 801fac8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801fab8:	4620      	mov	r0, r4
 801faba:	f007 fc83 	bl	80273c4 <__cxa_guard_release>
 801fabe:	4a06      	ldr	r2, [pc, #24]	; (801fad8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801fac0:	4909      	ldr	r1, [pc, #36]	; (801fae8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801fac2:	480a      	ldr	r0, [pc, #40]	; (801faec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801fac4:	f007 fc6b 	bl	802739e <__aeabi_atexit>
 801fac8:	4b05      	ldr	r3, [pc, #20]	; (801fae0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801faca:	60ab      	str	r3, [r5, #8]
 801facc:	4b07      	ldr	r3, [pc, #28]	; (801faec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801face:	60eb      	str	r3, [r5, #12]
 801fad0:	bd38      	pop	{r3, r4, r5, pc}
 801fad2:	bf00      	nop
 801fad4:	20014c88 	.word	0x20014c88
 801fad8:	20000000 	.word	0x20000000
 801fadc:	0801dbf9 	.word	0x0801dbf9
 801fae0:	20000060 	.word	0x20000060
 801fae4:	20014c8c 	.word	0x20014c8c
 801fae8:	0801dbf7 	.word	0x0801dbf7
 801faec:	20000064 	.word	0x20000064

0801faf0 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 801faf0:	b510      	push	{r4, lr}
 801faf2:	4604      	mov	r4, r0
 801faf4:	f7ff ff88 	bl	801fa08 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 801faf8:	4620      	mov	r0, r4
 801fafa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fafe:	f7ff bfbd 	b.w	801fa7c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0801fb04 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801fb04:	b538      	push	{r3, r4, r5, lr}
 801fb06:	4c15      	ldr	r4, [pc, #84]	; (801fb5c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801fb08:	4605      	mov	r5, r0
 801fb0a:	7823      	ldrb	r3, [r4, #0]
 801fb0c:	f3bf 8f5b 	dmb	ish
 801fb10:	07da      	lsls	r2, r3, #31
 801fb12:	d40b      	bmi.n	801fb2c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801fb14:	4620      	mov	r0, r4
 801fb16:	f007 fc49 	bl	80273ac <__cxa_guard_acquire>
 801fb1a:	b138      	cbz	r0, 801fb2c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801fb1c:	4620      	mov	r0, r4
 801fb1e:	f007 fc51 	bl	80273c4 <__cxa_guard_release>
 801fb22:	4a0f      	ldr	r2, [pc, #60]	; (801fb60 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801fb24:	490f      	ldr	r1, [pc, #60]	; (801fb64 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801fb26:	4810      	ldr	r0, [pc, #64]	; (801fb68 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801fb28:	f007 fc39 	bl	802739e <__aeabi_atexit>
 801fb2c:	4c0f      	ldr	r4, [pc, #60]	; (801fb6c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801fb2e:	7823      	ldrb	r3, [r4, #0]
 801fb30:	f3bf 8f5b 	dmb	ish
 801fb34:	07db      	lsls	r3, r3, #31
 801fb36:	d40b      	bmi.n	801fb50 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801fb38:	4620      	mov	r0, r4
 801fb3a:	f007 fc37 	bl	80273ac <__cxa_guard_acquire>
 801fb3e:	b138      	cbz	r0, 801fb50 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801fb40:	4620      	mov	r0, r4
 801fb42:	f007 fc3f 	bl	80273c4 <__cxa_guard_release>
 801fb46:	4a06      	ldr	r2, [pc, #24]	; (801fb60 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801fb48:	4909      	ldr	r1, [pc, #36]	; (801fb70 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801fb4a:	480a      	ldr	r0, [pc, #40]	; (801fb74 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801fb4c:	f007 fc27 	bl	802739e <__aeabi_atexit>
 801fb50:	4b05      	ldr	r3, [pc, #20]	; (801fb68 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801fb52:	622b      	str	r3, [r5, #32]
 801fb54:	4b07      	ldr	r3, [pc, #28]	; (801fb74 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801fb56:	626b      	str	r3, [r5, #36]	; 0x24
 801fb58:	bd38      	pop	{r3, r4, r5, pc}
 801fb5a:	bf00      	nop
 801fb5c:	20014cb8 	.word	0x20014cb8
 801fb60:	20000000 	.word	0x20000000
 801fb64:	0801dbed 	.word	0x0801dbed
 801fb68:	20000090 	.word	0x20000090
 801fb6c:	20014cbc 	.word	0x20014cbc
 801fb70:	0801dbeb 	.word	0x0801dbeb
 801fb74:	20000094 	.word	0x20000094

0801fb78 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801fb78:	b538      	push	{r3, r4, r5, lr}
 801fb7a:	4c15      	ldr	r4, [pc, #84]	; (801fbd0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801fb7c:	4605      	mov	r5, r0
 801fb7e:	7823      	ldrb	r3, [r4, #0]
 801fb80:	f3bf 8f5b 	dmb	ish
 801fb84:	07da      	lsls	r2, r3, #31
 801fb86:	d40b      	bmi.n	801fba0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801fb88:	4620      	mov	r0, r4
 801fb8a:	f007 fc0f 	bl	80273ac <__cxa_guard_acquire>
 801fb8e:	b138      	cbz	r0, 801fba0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801fb90:	4620      	mov	r0, r4
 801fb92:	f007 fc17 	bl	80273c4 <__cxa_guard_release>
 801fb96:	4a0f      	ldr	r2, [pc, #60]	; (801fbd4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801fb98:	490f      	ldr	r1, [pc, #60]	; (801fbd8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801fb9a:	4810      	ldr	r0, [pc, #64]	; (801fbdc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801fb9c:	f007 fbff 	bl	802739e <__aeabi_atexit>
 801fba0:	4c0f      	ldr	r4, [pc, #60]	; (801fbe0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801fba2:	7823      	ldrb	r3, [r4, #0]
 801fba4:	f3bf 8f5b 	dmb	ish
 801fba8:	07db      	lsls	r3, r3, #31
 801fbaa:	d40b      	bmi.n	801fbc4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801fbac:	4620      	mov	r0, r4
 801fbae:	f007 fbfd 	bl	80273ac <__cxa_guard_acquire>
 801fbb2:	b138      	cbz	r0, 801fbc4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801fbb4:	4620      	mov	r0, r4
 801fbb6:	f007 fc05 	bl	80273c4 <__cxa_guard_release>
 801fbba:	4a06      	ldr	r2, [pc, #24]	; (801fbd4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801fbbc:	4909      	ldr	r1, [pc, #36]	; (801fbe4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801fbbe:	480a      	ldr	r0, [pc, #40]	; (801fbe8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801fbc0:	f007 fbed 	bl	802739e <__aeabi_atexit>
 801fbc4:	4b05      	ldr	r3, [pc, #20]	; (801fbdc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801fbc6:	61ab      	str	r3, [r5, #24]
 801fbc8:	4b07      	ldr	r3, [pc, #28]	; (801fbe8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801fbca:	61eb      	str	r3, [r5, #28]
 801fbcc:	bd38      	pop	{r3, r4, r5, pc}
 801fbce:	bf00      	nop
 801fbd0:	20014c90 	.word	0x20014c90
 801fbd4:	20000000 	.word	0x20000000
 801fbd8:	0801dbf1 	.word	0x0801dbf1
 801fbdc:	20000068 	.word	0x20000068
 801fbe0:	20014c94 	.word	0x20014c94
 801fbe4:	0801dbef 	.word	0x0801dbef
 801fbe8:	2000006c 	.word	0x2000006c

0801fbec <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 801fbec:	b510      	push	{r4, lr}
 801fbee:	4604      	mov	r4, r0
 801fbf0:	f7ff ff88 	bl	801fb04 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801fbf4:	4620      	mov	r0, r4
 801fbf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fbfa:	f7ff bfbd 	b.w	801fb78 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801fc00 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801fc00:	b538      	push	{r3, r4, r5, lr}
 801fc02:	4c15      	ldr	r4, [pc, #84]	; (801fc58 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801fc04:	4605      	mov	r5, r0
 801fc06:	7823      	ldrb	r3, [r4, #0]
 801fc08:	f3bf 8f5b 	dmb	ish
 801fc0c:	07da      	lsls	r2, r3, #31
 801fc0e:	d40b      	bmi.n	801fc28 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801fc10:	4620      	mov	r0, r4
 801fc12:	f007 fbcb 	bl	80273ac <__cxa_guard_acquire>
 801fc16:	b138      	cbz	r0, 801fc28 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801fc18:	4620      	mov	r0, r4
 801fc1a:	f007 fbd3 	bl	80273c4 <__cxa_guard_release>
 801fc1e:	4a0f      	ldr	r2, [pc, #60]	; (801fc5c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801fc20:	490f      	ldr	r1, [pc, #60]	; (801fc60 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801fc22:	4810      	ldr	r0, [pc, #64]	; (801fc64 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801fc24:	f007 fbbb 	bl	802739e <__aeabi_atexit>
 801fc28:	4c0f      	ldr	r4, [pc, #60]	; (801fc68 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801fc2a:	7823      	ldrb	r3, [r4, #0]
 801fc2c:	f3bf 8f5b 	dmb	ish
 801fc30:	07db      	lsls	r3, r3, #31
 801fc32:	d40b      	bmi.n	801fc4c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801fc34:	4620      	mov	r0, r4
 801fc36:	f007 fbb9 	bl	80273ac <__cxa_guard_acquire>
 801fc3a:	b138      	cbz	r0, 801fc4c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801fc3c:	4620      	mov	r0, r4
 801fc3e:	f007 fbc1 	bl	80273c4 <__cxa_guard_release>
 801fc42:	4a06      	ldr	r2, [pc, #24]	; (801fc5c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801fc44:	4909      	ldr	r1, [pc, #36]	; (801fc6c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801fc46:	480a      	ldr	r0, [pc, #40]	; (801fc70 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801fc48:	f007 fba9 	bl	802739e <__aeabi_atexit>
 801fc4c:	4b05      	ldr	r3, [pc, #20]	; (801fc64 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801fc4e:	632b      	str	r3, [r5, #48]	; 0x30
 801fc50:	4b07      	ldr	r3, [pc, #28]	; (801fc70 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801fc52:	636b      	str	r3, [r5, #52]	; 0x34
 801fc54:	bd38      	pop	{r3, r4, r5, pc}
 801fc56:	bf00      	nop
 801fc58:	20014cc8 	.word	0x20014cc8
 801fc5c:	20000000 	.word	0x20000000
 801fc60:	0801dbe5 	.word	0x0801dbe5
 801fc64:	200000a0 	.word	0x200000a0
 801fc68:	20014ccc 	.word	0x20014ccc
 801fc6c:	0801dbe3 	.word	0x0801dbe3
 801fc70:	200000a4 	.word	0x200000a4

0801fc74 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801fc74:	b538      	push	{r3, r4, r5, lr}
 801fc76:	4c15      	ldr	r4, [pc, #84]	; (801fccc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801fc78:	4605      	mov	r5, r0
 801fc7a:	7823      	ldrb	r3, [r4, #0]
 801fc7c:	f3bf 8f5b 	dmb	ish
 801fc80:	07da      	lsls	r2, r3, #31
 801fc82:	d40b      	bmi.n	801fc9c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801fc84:	4620      	mov	r0, r4
 801fc86:	f007 fb91 	bl	80273ac <__cxa_guard_acquire>
 801fc8a:	b138      	cbz	r0, 801fc9c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801fc8c:	4620      	mov	r0, r4
 801fc8e:	f007 fb99 	bl	80273c4 <__cxa_guard_release>
 801fc92:	4a0f      	ldr	r2, [pc, #60]	; (801fcd0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801fc94:	490f      	ldr	r1, [pc, #60]	; (801fcd4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801fc96:	4810      	ldr	r0, [pc, #64]	; (801fcd8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801fc98:	f007 fb81 	bl	802739e <__aeabi_atexit>
 801fc9c:	4c0f      	ldr	r4, [pc, #60]	; (801fcdc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801fc9e:	7823      	ldrb	r3, [r4, #0]
 801fca0:	f3bf 8f5b 	dmb	ish
 801fca4:	07db      	lsls	r3, r3, #31
 801fca6:	d40b      	bmi.n	801fcc0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801fca8:	4620      	mov	r0, r4
 801fcaa:	f007 fb7f 	bl	80273ac <__cxa_guard_acquire>
 801fcae:	b138      	cbz	r0, 801fcc0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801fcb0:	4620      	mov	r0, r4
 801fcb2:	f007 fb87 	bl	80273c4 <__cxa_guard_release>
 801fcb6:	4a06      	ldr	r2, [pc, #24]	; (801fcd0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801fcb8:	4909      	ldr	r1, [pc, #36]	; (801fce0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801fcba:	480a      	ldr	r0, [pc, #40]	; (801fce4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801fcbc:	f007 fb6f 	bl	802739e <__aeabi_atexit>
 801fcc0:	4b05      	ldr	r3, [pc, #20]	; (801fcd8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801fcc2:	62ab      	str	r3, [r5, #40]	; 0x28
 801fcc4:	4b07      	ldr	r3, [pc, #28]	; (801fce4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801fcc6:	62eb      	str	r3, [r5, #44]	; 0x2c
 801fcc8:	bd38      	pop	{r3, r4, r5, pc}
 801fcca:	bf00      	nop
 801fccc:	20014c98 	.word	0x20014c98
 801fcd0:	20000000 	.word	0x20000000
 801fcd4:	0801dbe9 	.word	0x0801dbe9
 801fcd8:	20000070 	.word	0x20000070
 801fcdc:	20014c9c 	.word	0x20014c9c
 801fce0:	0801dbe7 	.word	0x0801dbe7
 801fce4:	20000074 	.word	0x20000074

0801fce8 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 801fce8:	b510      	push	{r4, lr}
 801fcea:	4604      	mov	r4, r0
 801fcec:	f7ff ff88 	bl	801fc00 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801fcf0:	4620      	mov	r0, r4
 801fcf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fcf6:	f7ff bfbd 	b.w	801fc74 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801fcfc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 801fcfc:	b538      	push	{r3, r4, r5, lr}
 801fcfe:	4c15      	ldr	r4, [pc, #84]	; (801fd54 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801fd00:	4605      	mov	r5, r0
 801fd02:	7823      	ldrb	r3, [r4, #0]
 801fd04:	f3bf 8f5b 	dmb	ish
 801fd08:	07da      	lsls	r2, r3, #31
 801fd0a:	d40b      	bmi.n	801fd24 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801fd0c:	4620      	mov	r0, r4
 801fd0e:	f007 fb4d 	bl	80273ac <__cxa_guard_acquire>
 801fd12:	b138      	cbz	r0, 801fd24 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801fd14:	4620      	mov	r0, r4
 801fd16:	f007 fb55 	bl	80273c4 <__cxa_guard_release>
 801fd1a:	4a0f      	ldr	r2, [pc, #60]	; (801fd58 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801fd1c:	490f      	ldr	r1, [pc, #60]	; (801fd5c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801fd1e:	4810      	ldr	r0, [pc, #64]	; (801fd60 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801fd20:	f007 fb3d 	bl	802739e <__aeabi_atexit>
 801fd24:	4c0f      	ldr	r4, [pc, #60]	; (801fd64 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 801fd26:	7823      	ldrb	r3, [r4, #0]
 801fd28:	f3bf 8f5b 	dmb	ish
 801fd2c:	07db      	lsls	r3, r3, #31
 801fd2e:	d40b      	bmi.n	801fd48 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801fd30:	4620      	mov	r0, r4
 801fd32:	f007 fb3b 	bl	80273ac <__cxa_guard_acquire>
 801fd36:	b138      	cbz	r0, 801fd48 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801fd38:	4620      	mov	r0, r4
 801fd3a:	f007 fb43 	bl	80273c4 <__cxa_guard_release>
 801fd3e:	4a06      	ldr	r2, [pc, #24]	; (801fd58 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801fd40:	4909      	ldr	r1, [pc, #36]	; (801fd68 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801fd42:	480a      	ldr	r0, [pc, #40]	; (801fd6c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801fd44:	f007 fb2b 	bl	802739e <__aeabi_atexit>
 801fd48:	4b05      	ldr	r3, [pc, #20]	; (801fd60 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801fd4a:	652b      	str	r3, [r5, #80]	; 0x50
 801fd4c:	4b07      	ldr	r3, [pc, #28]	; (801fd6c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801fd4e:	656b      	str	r3, [r5, #84]	; 0x54
 801fd50:	bd38      	pop	{r3, r4, r5, pc}
 801fd52:	bf00      	nop
 801fd54:	20014cd0 	.word	0x20014cd0
 801fd58:	20000000 	.word	0x20000000
 801fd5c:	0801dbd5 	.word	0x0801dbd5
 801fd60:	200000a8 	.word	0x200000a8
 801fd64:	20014cd4 	.word	0x20014cd4
 801fd68:	0801dbd3 	.word	0x0801dbd3
 801fd6c:	200000ac 	.word	0x200000ac

0801fd70 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 801fd70:	b538      	push	{r3, r4, r5, lr}
 801fd72:	4c15      	ldr	r4, [pc, #84]	; (801fdc8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801fd74:	4605      	mov	r5, r0
 801fd76:	7823      	ldrb	r3, [r4, #0]
 801fd78:	f3bf 8f5b 	dmb	ish
 801fd7c:	07da      	lsls	r2, r3, #31
 801fd7e:	d40b      	bmi.n	801fd98 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801fd80:	4620      	mov	r0, r4
 801fd82:	f007 fb13 	bl	80273ac <__cxa_guard_acquire>
 801fd86:	b138      	cbz	r0, 801fd98 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801fd88:	4620      	mov	r0, r4
 801fd8a:	f007 fb1b 	bl	80273c4 <__cxa_guard_release>
 801fd8e:	4a0f      	ldr	r2, [pc, #60]	; (801fdcc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801fd90:	490f      	ldr	r1, [pc, #60]	; (801fdd0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801fd92:	4810      	ldr	r0, [pc, #64]	; (801fdd4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801fd94:	f007 fb03 	bl	802739e <__aeabi_atexit>
 801fd98:	4c0f      	ldr	r4, [pc, #60]	; (801fdd8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 801fd9a:	7823      	ldrb	r3, [r4, #0]
 801fd9c:	f3bf 8f5b 	dmb	ish
 801fda0:	07db      	lsls	r3, r3, #31
 801fda2:	d40b      	bmi.n	801fdbc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801fda4:	4620      	mov	r0, r4
 801fda6:	f007 fb01 	bl	80273ac <__cxa_guard_acquire>
 801fdaa:	b138      	cbz	r0, 801fdbc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801fdac:	4620      	mov	r0, r4
 801fdae:	f007 fb09 	bl	80273c4 <__cxa_guard_release>
 801fdb2:	4a06      	ldr	r2, [pc, #24]	; (801fdcc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801fdb4:	4909      	ldr	r1, [pc, #36]	; (801fddc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801fdb6:	480a      	ldr	r0, [pc, #40]	; (801fde0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801fdb8:	f007 faf1 	bl	802739e <__aeabi_atexit>
 801fdbc:	4b05      	ldr	r3, [pc, #20]	; (801fdd4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801fdbe:	64ab      	str	r3, [r5, #72]	; 0x48
 801fdc0:	4b07      	ldr	r3, [pc, #28]	; (801fde0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801fdc2:	64eb      	str	r3, [r5, #76]	; 0x4c
 801fdc4:	bd38      	pop	{r3, r4, r5, pc}
 801fdc6:	bf00      	nop
 801fdc8:	20014cd8 	.word	0x20014cd8
 801fdcc:	20000000 	.word	0x20000000
 801fdd0:	0801dbd9 	.word	0x0801dbd9
 801fdd4:	200000b0 	.word	0x200000b0
 801fdd8:	20014cdc 	.word	0x20014cdc
 801fddc:	0801dbd7 	.word	0x0801dbd7
 801fde0:	200000b4 	.word	0x200000b4

0801fde4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 801fde4:	b538      	push	{r3, r4, r5, lr}
 801fde6:	4c15      	ldr	r4, [pc, #84]	; (801fe3c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801fde8:	4605      	mov	r5, r0
 801fdea:	7823      	ldrb	r3, [r4, #0]
 801fdec:	f3bf 8f5b 	dmb	ish
 801fdf0:	07da      	lsls	r2, r3, #31
 801fdf2:	d40b      	bmi.n	801fe0c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801fdf4:	4620      	mov	r0, r4
 801fdf6:	f007 fad9 	bl	80273ac <__cxa_guard_acquire>
 801fdfa:	b138      	cbz	r0, 801fe0c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801fdfc:	4620      	mov	r0, r4
 801fdfe:	f007 fae1 	bl	80273c4 <__cxa_guard_release>
 801fe02:	4a0f      	ldr	r2, [pc, #60]	; (801fe40 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801fe04:	490f      	ldr	r1, [pc, #60]	; (801fe44 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801fe06:	4810      	ldr	r0, [pc, #64]	; (801fe48 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801fe08:	f007 fac9 	bl	802739e <__aeabi_atexit>
 801fe0c:	4c0f      	ldr	r4, [pc, #60]	; (801fe4c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 801fe0e:	7823      	ldrb	r3, [r4, #0]
 801fe10:	f3bf 8f5b 	dmb	ish
 801fe14:	07db      	lsls	r3, r3, #31
 801fe16:	d40b      	bmi.n	801fe30 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801fe18:	4620      	mov	r0, r4
 801fe1a:	f007 fac7 	bl	80273ac <__cxa_guard_acquire>
 801fe1e:	b138      	cbz	r0, 801fe30 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801fe20:	4620      	mov	r0, r4
 801fe22:	f007 facf 	bl	80273c4 <__cxa_guard_release>
 801fe26:	4a06      	ldr	r2, [pc, #24]	; (801fe40 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801fe28:	4909      	ldr	r1, [pc, #36]	; (801fe50 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801fe2a:	480a      	ldr	r0, [pc, #40]	; (801fe54 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801fe2c:	f007 fab7 	bl	802739e <__aeabi_atexit>
 801fe30:	4b05      	ldr	r3, [pc, #20]	; (801fe48 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801fe32:	642b      	str	r3, [r5, #64]	; 0x40
 801fe34:	4b07      	ldr	r3, [pc, #28]	; (801fe54 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801fe36:	646b      	str	r3, [r5, #68]	; 0x44
 801fe38:	bd38      	pop	{r3, r4, r5, pc}
 801fe3a:	bf00      	nop
 801fe3c:	20014ca0 	.word	0x20014ca0
 801fe40:	20000000 	.word	0x20000000
 801fe44:	0801dbdd 	.word	0x0801dbdd
 801fe48:	20000078 	.word	0x20000078
 801fe4c:	20014ca4 	.word	0x20014ca4
 801fe50:	0801dbdb 	.word	0x0801dbdb
 801fe54:	2000007c 	.word	0x2000007c

0801fe58 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 801fe58:	b538      	push	{r3, r4, r5, lr}
 801fe5a:	4c15      	ldr	r4, [pc, #84]	; (801feb0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801fe5c:	4605      	mov	r5, r0
 801fe5e:	7823      	ldrb	r3, [r4, #0]
 801fe60:	f3bf 8f5b 	dmb	ish
 801fe64:	07da      	lsls	r2, r3, #31
 801fe66:	d40b      	bmi.n	801fe80 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801fe68:	4620      	mov	r0, r4
 801fe6a:	f007 fa9f 	bl	80273ac <__cxa_guard_acquire>
 801fe6e:	b138      	cbz	r0, 801fe80 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801fe70:	4620      	mov	r0, r4
 801fe72:	f007 faa7 	bl	80273c4 <__cxa_guard_release>
 801fe76:	4a0f      	ldr	r2, [pc, #60]	; (801feb4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801fe78:	490f      	ldr	r1, [pc, #60]	; (801feb8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801fe7a:	4810      	ldr	r0, [pc, #64]	; (801febc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801fe7c:	f007 fa8f 	bl	802739e <__aeabi_atexit>
 801fe80:	4c0f      	ldr	r4, [pc, #60]	; (801fec0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 801fe82:	7823      	ldrb	r3, [r4, #0]
 801fe84:	f3bf 8f5b 	dmb	ish
 801fe88:	07db      	lsls	r3, r3, #31
 801fe8a:	d40b      	bmi.n	801fea4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801fe8c:	4620      	mov	r0, r4
 801fe8e:	f007 fa8d 	bl	80273ac <__cxa_guard_acquire>
 801fe92:	b138      	cbz	r0, 801fea4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801fe94:	4620      	mov	r0, r4
 801fe96:	f007 fa95 	bl	80273c4 <__cxa_guard_release>
 801fe9a:	4a06      	ldr	r2, [pc, #24]	; (801feb4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801fe9c:	4909      	ldr	r1, [pc, #36]	; (801fec4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801fe9e:	480a      	ldr	r0, [pc, #40]	; (801fec8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801fea0:	f007 fa7d 	bl	802739e <__aeabi_atexit>
 801fea4:	4b05      	ldr	r3, [pc, #20]	; (801febc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801fea6:	63ab      	str	r3, [r5, #56]	; 0x38
 801fea8:	4b07      	ldr	r3, [pc, #28]	; (801fec8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801feaa:	63eb      	str	r3, [r5, #60]	; 0x3c
 801feac:	bd38      	pop	{r3, r4, r5, pc}
 801feae:	bf00      	nop
 801feb0:	20014cc0 	.word	0x20014cc0
 801feb4:	20000000 	.word	0x20000000
 801feb8:	0801dbe1 	.word	0x0801dbe1
 801febc:	20000098 	.word	0x20000098
 801fec0:	20014cc4 	.word	0x20014cc4
 801fec4:	0801dbdf 	.word	0x0801dbdf
 801fec8:	2000009c 	.word	0x2000009c

0801fecc <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 801fecc:	b510      	push	{r4, lr}
 801fece:	4604      	mov	r4, r0
 801fed0:	f7ff ff14 	bl	801fcfc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 801fed4:	4620      	mov	r0, r4
 801fed6:	f7ff ff85 	bl	801fde4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801feda:	4620      	mov	r0, r4
 801fedc:	f7ff ff48 	bl	801fd70 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 801fee0:	4620      	mov	r0, r4
 801fee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fee6:	f7ff bfb7 	b.w	801fe58 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0801feec <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801feec:	b538      	push	{r3, r4, r5, lr}
 801feee:	4c15      	ldr	r4, [pc, #84]	; (801ff44 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801fef0:	4605      	mov	r5, r0
 801fef2:	7823      	ldrb	r3, [r4, #0]
 801fef4:	f3bf 8f5b 	dmb	ish
 801fef8:	07da      	lsls	r2, r3, #31
 801fefa:	d40b      	bmi.n	801ff14 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801fefc:	4620      	mov	r0, r4
 801fefe:	f007 fa55 	bl	80273ac <__cxa_guard_acquire>
 801ff02:	b138      	cbz	r0, 801ff14 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801ff04:	4620      	mov	r0, r4
 801ff06:	f007 fa5d 	bl	80273c4 <__cxa_guard_release>
 801ff0a:	4a0f      	ldr	r2, [pc, #60]	; (801ff48 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801ff0c:	490f      	ldr	r1, [pc, #60]	; (801ff4c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801ff0e:	4810      	ldr	r0, [pc, #64]	; (801ff50 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801ff10:	f007 fa45 	bl	802739e <__aeabi_atexit>
 801ff14:	4c0f      	ldr	r4, [pc, #60]	; (801ff54 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801ff16:	7823      	ldrb	r3, [r4, #0]
 801ff18:	f3bf 8f5b 	dmb	ish
 801ff1c:	07db      	lsls	r3, r3, #31
 801ff1e:	d40b      	bmi.n	801ff38 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801ff20:	4620      	mov	r0, r4
 801ff22:	f007 fa43 	bl	80273ac <__cxa_guard_acquire>
 801ff26:	b138      	cbz	r0, 801ff38 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801ff28:	4620      	mov	r0, r4
 801ff2a:	f007 fa4b 	bl	80273c4 <__cxa_guard_release>
 801ff2e:	4a06      	ldr	r2, [pc, #24]	; (801ff48 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801ff30:	4909      	ldr	r1, [pc, #36]	; (801ff58 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801ff32:	480a      	ldr	r0, [pc, #40]	; (801ff5c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801ff34:	f007 fa33 	bl	802739e <__aeabi_atexit>
 801ff38:	4b05      	ldr	r3, [pc, #20]	; (801ff50 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801ff3a:	662b      	str	r3, [r5, #96]	; 0x60
 801ff3c:	4b07      	ldr	r3, [pc, #28]	; (801ff5c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801ff3e:	666b      	str	r3, [r5, #100]	; 0x64
 801ff40:	bd38      	pop	{r3, r4, r5, pc}
 801ff42:	bf00      	nop
 801ff44:	20014ca8 	.word	0x20014ca8
 801ff48:	20000000 	.word	0x20000000
 801ff4c:	0801dbcd 	.word	0x0801dbcd
 801ff50:	20000080 	.word	0x20000080
 801ff54:	20014cac 	.word	0x20014cac
 801ff58:	0801dbcb 	.word	0x0801dbcb
 801ff5c:	20000084 	.word	0x20000084

0801ff60 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801ff60:	b538      	push	{r3, r4, r5, lr}
 801ff62:	4c15      	ldr	r4, [pc, #84]	; (801ffb8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801ff64:	4605      	mov	r5, r0
 801ff66:	7823      	ldrb	r3, [r4, #0]
 801ff68:	f3bf 8f5b 	dmb	ish
 801ff6c:	07da      	lsls	r2, r3, #31
 801ff6e:	d40b      	bmi.n	801ff88 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801ff70:	4620      	mov	r0, r4
 801ff72:	f007 fa1b 	bl	80273ac <__cxa_guard_acquire>
 801ff76:	b138      	cbz	r0, 801ff88 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801ff78:	4620      	mov	r0, r4
 801ff7a:	f007 fa23 	bl	80273c4 <__cxa_guard_release>
 801ff7e:	4a0f      	ldr	r2, [pc, #60]	; (801ffbc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801ff80:	490f      	ldr	r1, [pc, #60]	; (801ffc0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801ff82:	4810      	ldr	r0, [pc, #64]	; (801ffc4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801ff84:	f007 fa0b 	bl	802739e <__aeabi_atexit>
 801ff88:	4c0f      	ldr	r4, [pc, #60]	; (801ffc8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801ff8a:	7823      	ldrb	r3, [r4, #0]
 801ff8c:	f3bf 8f5b 	dmb	ish
 801ff90:	07db      	lsls	r3, r3, #31
 801ff92:	d40b      	bmi.n	801ffac <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801ff94:	4620      	mov	r0, r4
 801ff96:	f007 fa09 	bl	80273ac <__cxa_guard_acquire>
 801ff9a:	b138      	cbz	r0, 801ffac <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801ff9c:	4620      	mov	r0, r4
 801ff9e:	f007 fa11 	bl	80273c4 <__cxa_guard_release>
 801ffa2:	4a06      	ldr	r2, [pc, #24]	; (801ffbc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801ffa4:	4909      	ldr	r1, [pc, #36]	; (801ffcc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801ffa6:	480a      	ldr	r0, [pc, #40]	; (801ffd0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801ffa8:	f007 f9f9 	bl	802739e <__aeabi_atexit>
 801ffac:	4b05      	ldr	r3, [pc, #20]	; (801ffc4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801ffae:	65ab      	str	r3, [r5, #88]	; 0x58
 801ffb0:	4b07      	ldr	r3, [pc, #28]	; (801ffd0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801ffb2:	65eb      	str	r3, [r5, #92]	; 0x5c
 801ffb4:	bd38      	pop	{r3, r4, r5, pc}
 801ffb6:	bf00      	nop
 801ffb8:	20014c80 	.word	0x20014c80
 801ffbc:	20000000 	.word	0x20000000
 801ffc0:	0801dbd1 	.word	0x0801dbd1
 801ffc4:	20000058 	.word	0x20000058
 801ffc8:	20014c84 	.word	0x20014c84
 801ffcc:	0801dbcf 	.word	0x0801dbcf
 801ffd0:	2000005c 	.word	0x2000005c

0801ffd4 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 801ffd4:	b510      	push	{r4, lr}
 801ffd6:	4604      	mov	r4, r0
 801ffd8:	f7ff ff88 	bl	801feec <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801ffdc:	4620      	mov	r0, r4
 801ffde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ffe2:	f7ff bfbd 	b.w	801ff60 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801ffe8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801ffe8:	b538      	push	{r3, r4, r5, lr}
 801ffea:	4c15      	ldr	r4, [pc, #84]	; (8020040 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801ffec:	4605      	mov	r5, r0
 801ffee:	7823      	ldrb	r3, [r4, #0]
 801fff0:	f3bf 8f5b 	dmb	ish
 801fff4:	07da      	lsls	r2, r3, #31
 801fff6:	d40b      	bmi.n	8020010 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801fff8:	4620      	mov	r0, r4
 801fffa:	f007 f9d7 	bl	80273ac <__cxa_guard_acquire>
 801fffe:	b138      	cbz	r0, 8020010 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8020000:	4620      	mov	r0, r4
 8020002:	f007 f9df 	bl	80273c4 <__cxa_guard_release>
 8020006:	4a0f      	ldr	r2, [pc, #60]	; (8020044 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8020008:	490f      	ldr	r1, [pc, #60]	; (8020048 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 802000a:	4810      	ldr	r0, [pc, #64]	; (802004c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 802000c:	f007 f9c7 	bl	802739e <__aeabi_atexit>
 8020010:	4c0f      	ldr	r4, [pc, #60]	; (8020050 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8020012:	7823      	ldrb	r3, [r4, #0]
 8020014:	f3bf 8f5b 	dmb	ish
 8020018:	07db      	lsls	r3, r3, #31
 802001a:	d40b      	bmi.n	8020034 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 802001c:	4620      	mov	r0, r4
 802001e:	f007 f9c5 	bl	80273ac <__cxa_guard_acquire>
 8020022:	b138      	cbz	r0, 8020034 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8020024:	4620      	mov	r0, r4
 8020026:	f007 f9cd 	bl	80273c4 <__cxa_guard_release>
 802002a:	4a06      	ldr	r2, [pc, #24]	; (8020044 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 802002c:	4909      	ldr	r1, [pc, #36]	; (8020054 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 802002e:	480a      	ldr	r0, [pc, #40]	; (8020058 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8020030:	f007 f9b5 	bl	802739e <__aeabi_atexit>
 8020034:	4b05      	ldr	r3, [pc, #20]	; (802004c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8020036:	672b      	str	r3, [r5, #112]	; 0x70
 8020038:	4b07      	ldr	r3, [pc, #28]	; (8020058 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 802003a:	676b      	str	r3, [r5, #116]	; 0x74
 802003c:	bd38      	pop	{r3, r4, r5, pc}
 802003e:	bf00      	nop
 8020040:	20014c78 	.word	0x20014c78
 8020044:	20000000 	.word	0x20000000
 8020048:	0801dbc5 	.word	0x0801dbc5
 802004c:	20000050 	.word	0x20000050
 8020050:	20014c7c 	.word	0x20014c7c
 8020054:	0801dbc3 	.word	0x0801dbc3
 8020058:	20000054 	.word	0x20000054

0802005c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 802005c:	b538      	push	{r3, r4, r5, lr}
 802005e:	4c15      	ldr	r4, [pc, #84]	; (80200b4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8020060:	4605      	mov	r5, r0
 8020062:	7823      	ldrb	r3, [r4, #0]
 8020064:	f3bf 8f5b 	dmb	ish
 8020068:	07da      	lsls	r2, r3, #31
 802006a:	d40b      	bmi.n	8020084 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 802006c:	4620      	mov	r0, r4
 802006e:	f007 f99d 	bl	80273ac <__cxa_guard_acquire>
 8020072:	b138      	cbz	r0, 8020084 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8020074:	4620      	mov	r0, r4
 8020076:	f007 f9a5 	bl	80273c4 <__cxa_guard_release>
 802007a:	4a0f      	ldr	r2, [pc, #60]	; (80200b8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 802007c:	490f      	ldr	r1, [pc, #60]	; (80200bc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 802007e:	4810      	ldr	r0, [pc, #64]	; (80200c0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8020080:	f007 f98d 	bl	802739e <__aeabi_atexit>
 8020084:	4c0f      	ldr	r4, [pc, #60]	; (80200c4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8020086:	7823      	ldrb	r3, [r4, #0]
 8020088:	f3bf 8f5b 	dmb	ish
 802008c:	07db      	lsls	r3, r3, #31
 802008e:	d40b      	bmi.n	80200a8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8020090:	4620      	mov	r0, r4
 8020092:	f007 f98b 	bl	80273ac <__cxa_guard_acquire>
 8020096:	b138      	cbz	r0, 80200a8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8020098:	4620      	mov	r0, r4
 802009a:	f007 f993 	bl	80273c4 <__cxa_guard_release>
 802009e:	4a06      	ldr	r2, [pc, #24]	; (80200b8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80200a0:	4909      	ldr	r1, [pc, #36]	; (80200c8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 80200a2:	480a      	ldr	r0, [pc, #40]	; (80200cc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80200a4:	f007 f97b 	bl	802739e <__aeabi_atexit>
 80200a8:	4b05      	ldr	r3, [pc, #20]	; (80200c0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80200aa:	66ab      	str	r3, [r5, #104]	; 0x68
 80200ac:	4b07      	ldr	r3, [pc, #28]	; (80200cc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80200ae:	66eb      	str	r3, [r5, #108]	; 0x6c
 80200b0:	bd38      	pop	{r3, r4, r5, pc}
 80200b2:	bf00      	nop
 80200b4:	20014c70 	.word	0x20014c70
 80200b8:	20000000 	.word	0x20000000
 80200bc:	0801dbc9 	.word	0x0801dbc9
 80200c0:	20000048 	.word	0x20000048
 80200c4:	20014c74 	.word	0x20014c74
 80200c8:	0801dbc7 	.word	0x0801dbc7
 80200cc:	2000004c 	.word	0x2000004c

080200d0 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 80200d0:	b510      	push	{r4, lr}
 80200d2:	4604      	mov	r4, r0
 80200d4:	f7ff ff88 	bl	801ffe8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 80200d8:	4620      	mov	r0, r4
 80200da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80200de:	f7ff bfbd 	b.w	802005c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

080200e2 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 80200e2:	b510      	push	{r4, lr}
 80200e4:	4604      	mov	r4, r0
 80200e6:	f7ff fff3 	bl	80200d0 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 80200ea:	4620      	mov	r0, r4
 80200ec:	f7ff ff72 	bl	801ffd4 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 80200f0:	4620      	mov	r0, r4
 80200f2:	f7ff fdf9 	bl	801fce8 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 80200f6:	4620      	mov	r0, r4
 80200f8:	f7ff fcfa 	bl	801faf0 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 80200fc:	4620      	mov	r0, r4
 80200fe:	f7ff fd75 	bl	801fbec <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 8020102:	4620      	mov	r0, r4
 8020104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020108:	f7ff bee0 	b.w	801fecc <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0802010c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 802010c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020110:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	; 0x30
 8020114:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8020118:	f1be 0f00 	cmp.w	lr, #0
 802011c:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8020120:	fb0e 4708 	mla	r7, lr, r8, r4
 8020124:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8020128:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
 802012c:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8020130:	eb02 0a07 	add.w	sl, r2, r7
 8020134:	8808      	ldrh	r0, [r1, #0]
 8020136:	db37      	blt.n	80201a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8020138:	45f3      	cmp	fp, lr
 802013a:	dd35      	ble.n	80201a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 802013c:	2c00      	cmp	r4, #0
 802013e:	db31      	blt.n	80201a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8020140:	45a0      	cmp	r8, r4
 8020142:	dd2f      	ble.n	80201a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8020144:	5dd2      	ldrb	r2, [r2, r7]
 8020146:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 802014a:	1c62      	adds	r2, r4, #1
 802014c:	d42f      	bmi.n	80201ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 802014e:	4590      	cmp	r8, r2
 8020150:	dd2d      	ble.n	80201ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8020152:	b366      	cbz	r6, 80201ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8020154:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8020158:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 802015c:	f11e 0e01 	adds.w	lr, lr, #1
 8020160:	d429      	bmi.n	80201b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 8020162:	45f3      	cmp	fp, lr
 8020164:	dd27      	ble.n	80201b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 8020166:	f1bc 0f00 	cmp.w	ip, #0
 802016a:	f000 80a1 	beq.w	80202b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a4>
 802016e:	2c00      	cmp	r4, #0
 8020170:	db1f      	blt.n	80201b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8020172:	45a0      	cmp	r8, r4
 8020174:	dd1d      	ble.n	80201b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8020176:	f81a 2008 	ldrb.w	r2, [sl, r8]
 802017a:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 802017e:	3401      	adds	r4, #1
 8020180:	d41c      	bmi.n	80201bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 8020182:	45a0      	cmp	r8, r4
 8020184:	dd1a      	ble.n	80201bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 8020186:	b1de      	cbz	r6, 80201c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 8020188:	44d0      	add	r8, sl
 802018a:	f898 2001 	ldrb.w	r2, [r8, #1]
 802018e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8020192:	2e0f      	cmp	r6, #15
 8020194:	d915      	bls.n	80201c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 8020196:	4b49      	ldr	r3, [pc, #292]	; (80202bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 8020198:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 802019c:	4a48      	ldr	r2, [pc, #288]	; (80202c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 802019e:	4849      	ldr	r0, [pc, #292]	; (80202c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 80201a0:	f007 f930 	bl	8027404 <__assert_func>
 80201a4:	4681      	mov	r9, r0
 80201a6:	e7d0      	b.n	802014a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 80201a8:	4607      	mov	r7, r0
 80201aa:	4681      	mov	r9, r0
 80201ac:	e7d6      	b.n	802015c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 80201ae:	4607      	mov	r7, r0
 80201b0:	e7d4      	b.n	802015c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 80201b2:	4686      	mov	lr, r0
 80201b4:	e7e3      	b.n	802017e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 80201b6:	4603      	mov	r3, r0
 80201b8:	4686      	mov	lr, r0
 80201ba:	e7ea      	b.n	8020192 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 80201bc:	4603      	mov	r3, r0
 80201be:	e7e8      	b.n	8020192 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 80201c0:	4603      	mov	r3, r0
 80201c2:	f1bc 0f0f 	cmp.w	ip, #15
 80201c6:	d8e6      	bhi.n	8020196 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 80201c8:	fb16 f80c 	smulbb	r8, r6, ip
 80201cc:	ea4f 4409 	mov.w	r4, r9, lsl #16
 80201d0:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80201d4:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80201d8:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80201dc:	ea4f 08e8 	mov.w	r8, r8, asr #3
 80201e0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80201e4:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80201e8:	ea44 0909 	orr.w	r9, r4, r9
 80201ec:	f1cc 0410 	rsb	r4, ip, #16
 80201f0:	041a      	lsls	r2, r3, #16
 80201f2:	ea4a 0707 	orr.w	r7, sl, r7
 80201f6:	1ba4      	subs	r4, r4, r6
 80201f8:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 80201fc:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8020200:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8020204:	4377      	muls	r7, r6
 8020206:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 802020a:	4313      	orrs	r3, r2
 802020c:	ea4f 420e 	mov.w	r2, lr, lsl #16
 8020210:	fb04 7409 	mla	r4, r4, r9, r7
 8020214:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 8020218:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802021c:	b2af      	uxth	r7, r5
 802021e:	fb08 4303 	mla	r3, r8, r3, r4
 8020222:	f42e 64fc 	bic.w	r4, lr, #2016	; 0x7e0
 8020226:	43ed      	mvns	r5, r5
 8020228:	10c6      	asrs	r6, r0, #3
 802022a:	4322      	orrs	r2, r4
 802022c:	b2ed      	uxtb	r5, r5
 802022e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020232:	fb0c 3202 	mla	r2, ip, r2, r3
 8020236:	fb16 f605 	smulbb	r6, r6, r5
 802023a:	0d53      	lsrs	r3, r2, #21
 802023c:	0952      	lsrs	r2, r2, #5
 802023e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020242:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8020246:	431a      	orrs	r2, r3
 8020248:	b293      	uxth	r3, r2
 802024a:	1202      	asrs	r2, r0, #8
 802024c:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8020250:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8020254:	00dc      	lsls	r4, r3, #3
 8020256:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802025a:	fb12 f205 	smulbb	r2, r2, r5
 802025e:	b2e4      	uxtb	r4, r4
 8020260:	fb0c 2c07 	mla	ip, ip, r7, r2
 8020264:	10da      	asrs	r2, r3, #3
 8020266:	00c3      	lsls	r3, r0, #3
 8020268:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802026c:	fa1f fc8c 	uxth.w	ip, ip
 8020270:	b2db      	uxtb	r3, r3
 8020272:	fb02 6207 	mla	r2, r2, r7, r6
 8020276:	fb13 f305 	smulbb	r3, r3, r5
 802027a:	b296      	uxth	r6, r2
 802027c:	fb04 3307 	mla	r3, r4, r7, r3
 8020280:	b29a      	uxth	r2, r3
 8020282:	f10c 0301 	add.w	r3, ip, #1
 8020286:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802028a:	1c53      	adds	r3, r2, #1
 802028c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020290:	1c72      	adds	r2, r6, #1
 8020292:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020296:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 802029a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802029e:	0952      	lsrs	r2, r2, #5
 80202a0:	ea43 030c 	orr.w	r3, r3, ip
 80202a4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80202a8:	4313      	orrs	r3, r2
 80202aa:	800b      	strh	r3, [r1, #0]
 80202ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80202b0:	2e0f      	cmp	r6, #15
 80202b2:	f63f af70 	bhi.w	8020196 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 80202b6:	4603      	mov	r3, r0
 80202b8:	4686      	mov	lr, r0
 80202ba:	e785      	b.n	80201c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 80202bc:	0802e3b6 	.word	0x0802e3b6
 80202c0:	0802ea2f 	.word	0x0802ea2f
 80202c4:	0802e43a 	.word	0x0802e43a

080202c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80202c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202cc:	ed2d 8b08 	vpush	{d8-d11}
 80202d0:	b099      	sub	sp, #100	; 0x64
 80202d2:	eeb0 aa40 	vmov.f32	s20, s0
 80202d6:	eef0 9a60 	vmov.f32	s19, s1
 80202da:	9215      	str	r2, [sp, #84]	; 0x54
 80202dc:	eeb0 9a41 	vmov.f32	s18, s2
 80202e0:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80202e2:	eeb0 8a62 	vmov.f32	s16, s5
 80202e6:	9309      	str	r3, [sp, #36]	; 0x24
 80202e8:	eef0 8a43 	vmov.f32	s17, s6
 80202ec:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 80202f0:	eef0 ba44 	vmov.f32	s23, s8
 80202f4:	9016      	str	r0, [sp, #88]	; 0x58
 80202f6:	eeb0 ba64 	vmov.f32	s22, s9
 80202fa:	930d      	str	r3, [sp, #52]	; 0x34
 80202fc:	eef0 aa45 	vmov.f32	s21, s10
 8020300:	6850      	ldr	r0, [r2, #4]
 8020302:	910c      	str	r1, [sp, #48]	; 0x30
 8020304:	6812      	ldr	r2, [r2, #0]
 8020306:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 802030a:	e9dd a52b 	ldrd	sl, r5, [sp, #172]	; 0xac
 802030e:	fb00 1303 	mla	r3, r0, r3, r1
 8020312:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8020316:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8020318:	681b      	ldr	r3, [r3, #0]
 802031a:	930b      	str	r3, [sp, #44]	; 0x2c
 802031c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802031e:	685e      	ldr	r6, [r3, #4]
 8020320:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020322:	3604      	adds	r6, #4
 8020324:	43db      	mvns	r3, r3
 8020326:	b2db      	uxtb	r3, r3
 8020328:	930a      	str	r3, [sp, #40]	; 0x28
 802032a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802032c:	2b00      	cmp	r3, #0
 802032e:	dc03      	bgt.n	8020338 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020330:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020332:	2b00      	cmp	r3, #0
 8020334:	f340 8225 	ble.w	8020782 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 8020338:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802033a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802033e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020342:	1e48      	subs	r0, r1, #1
 8020344:	1e57      	subs	r7, r2, #1
 8020346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020348:	2b00      	cmp	r3, #0
 802034a:	f340 80e3 	ble.w	8020514 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24c>
 802034e:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8020352:	ea4f 4325 	mov.w	r3, r5, asr #16
 8020356:	d406      	bmi.n	8020366 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020358:	4584      	cmp	ip, r0
 802035a:	da04      	bge.n	8020366 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 802035c:	2b00      	cmp	r3, #0
 802035e:	db02      	blt.n	8020366 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020360:	42bb      	cmp	r3, r7
 8020362:	f2c0 80d8 	blt.w	8020516 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8020366:	f11c 0c01 	adds.w	ip, ip, #1
 802036a:	f100 80c9 	bmi.w	8020500 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 802036e:	4561      	cmp	r1, ip
 8020370:	f2c0 80c6 	blt.w	8020500 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8020374:	3301      	adds	r3, #1
 8020376:	f100 80c3 	bmi.w	8020500 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 802037a:	429a      	cmp	r2, r3
 802037c:	f2c0 80c0 	blt.w	8020500 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8020380:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8020384:	4647      	mov	r7, r8
 8020386:	f1bb 0f00 	cmp.w	fp, #0
 802038a:	f340 80e3 	ble.w	8020554 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 802038e:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8020390:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8020394:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8020396:	f3ca 3003 	ubfx	r0, sl, #12, #4
 802039a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802039e:	ea5f 422a 	movs.w	r2, sl, asr #16
 80203a2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80203a6:	689b      	ldr	r3, [r3, #8]
 80203a8:	f100 8121 	bmi.w	80205ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 80203ac:	f103 39ff 	add.w	r9, r3, #4294967295
 80203b0:	454a      	cmp	r2, r9
 80203b2:	f280 811c 	bge.w	80205ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 80203b6:	f1bc 0f00 	cmp.w	ip, #0
 80203ba:	f2c0 8118 	blt.w	80205ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 80203be:	f10e 39ff 	add.w	r9, lr, #4294967295
 80203c2:	45cc      	cmp	ip, r9
 80203c4:	f280 8113 	bge.w	80205ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 80203c8:	b21b      	sxth	r3, r3
 80203ca:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80203cc:	fb0c 2203 	mla	r2, ip, r3, r2
 80203d0:	eb04 0902 	add.w	r9, r4, r2
 80203d4:	5ca2      	ldrb	r2, [r4, r2]
 80203d6:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 80203da:	2800      	cmp	r0, #0
 80203dc:	f000 80fe 	beq.w	80205dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 80203e0:	f899 2001 	ldrb.w	r2, [r9, #1]
 80203e4:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 80203e8:	9211      	str	r2, [sp, #68]	; 0x44
 80203ea:	b151      	cbz	r1, 8020402 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80203ec:	eb09 0203 	add.w	r2, r9, r3
 80203f0:	f819 3003 	ldrb.w	r3, [r9, r3]
 80203f4:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80203f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80203fa:	7853      	ldrb	r3, [r2, #1]
 80203fc:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8020400:	9312      	str	r3, [sp, #72]	; 0x48
 8020402:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020404:	fb10 f201 	smulbb	r2, r0, r1
 8020408:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802040a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802040e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8020412:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8020416:	10d2      	asrs	r2, r2, #3
 8020418:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802041c:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8020420:	ea4c 0c03 	orr.w	ip, ip, r3
 8020424:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020426:	041b      	lsls	r3, r3, #16
 8020428:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802042c:	4323      	orrs	r3, r4
 802042e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020430:	4353      	muls	r3, r2
 8020432:	fb09 330c 	mla	r3, r9, ip, r3
 8020436:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 802043a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802043e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8020442:	ea4c 0e0e 	orr.w	lr, ip, lr
 8020446:	f1c1 0c10 	rsb	ip, r1, #16
 802044a:	ebac 0c00 	sub.w	ip, ip, r0
 802044e:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8020452:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8020456:	fb0c 3c0e 	mla	ip, ip, lr, r3
 802045a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802045c:	0418      	lsls	r0, r3, #16
 802045e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8020462:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8020466:	4318      	orrs	r0, r3
 8020468:	fb02 c200 	mla	r2, r2, r0, ip
 802046c:	8838      	ldrh	r0, [r7, #0]
 802046e:	0d53      	lsrs	r3, r2, #21
 8020470:	0952      	lsrs	r2, r2, #5
 8020472:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020476:	1201      	asrs	r1, r0, #8
 8020478:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802047c:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8020480:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8020484:	00c0      	lsls	r0, r0, #3
 8020486:	431a      	orrs	r2, r3
 8020488:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 802048c:	fb11 f104 	smulbb	r1, r1, r4
 8020490:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8020494:	b292      	uxth	r2, r2
 8020496:	fb1e fe04 	smulbb	lr, lr, r4
 802049a:	b2c0      	uxtb	r0, r0
 802049c:	ea4f 2c22 	mov.w	ip, r2, asr #8
 80204a0:	fb10 f004 	smulbb	r0, r0, r4
 80204a4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80204a8:	fb0c 1c03 	mla	ip, ip, r3, r1
 80204ac:	10d1      	asrs	r1, r2, #3
 80204ae:	00d2      	lsls	r2, r2, #3
 80204b0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80204b4:	fa1f fc8c 	uxth.w	ip, ip
 80204b8:	b2d2      	uxtb	r2, r2
 80204ba:	fb01 e103 	mla	r1, r1, r3, lr
 80204be:	fb02 0303 	mla	r3, r2, r3, r0
 80204c2:	b289      	uxth	r1, r1
 80204c4:	b29a      	uxth	r2, r3
 80204c6:	f10c 0301 	add.w	r3, ip, #1
 80204ca:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80204ce:	1c53      	adds	r3, r2, #1
 80204d0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80204d4:	1c4a      	adds	r2, r1, #1
 80204d6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80204da:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80204de:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80204e2:	0949      	lsrs	r1, r1, #5
 80204e4:	ea43 030c 	orr.w	r3, r3, ip
 80204e8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80204ec:	430b      	orrs	r3, r1
 80204ee:	803b      	strh	r3, [r7, #0]
 80204f0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80204f2:	3702      	adds	r7, #2
 80204f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80204f8:	449a      	add	sl, r3
 80204fa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80204fc:	441d      	add	r5, r3
 80204fe:	e742      	b.n	8020386 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8020500:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8020502:	f108 0802 	add.w	r8, r8, #2
 8020506:	449a      	add	sl, r3
 8020508:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802050a:	441d      	add	r5, r3
 802050c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802050e:	3b01      	subs	r3, #1
 8020510:	9309      	str	r3, [sp, #36]	; 0x24
 8020512:	e718      	b.n	8020346 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8020514:	d023      	beq.n	802055e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8020516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020518:	982d      	ldr	r0, [sp, #180]	; 0xb4
 802051a:	3b01      	subs	r3, #1
 802051c:	fb00 a003 	mla	r0, r0, r3, sl
 8020520:	1400      	asrs	r0, r0, #16
 8020522:	f53f af2d 	bmi.w	8020380 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8020526:	3901      	subs	r1, #1
 8020528:	4288      	cmp	r0, r1
 802052a:	f6bf af29 	bge.w	8020380 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802052e:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8020530:	fb01 5303 	mla	r3, r1, r3, r5
 8020534:	141b      	asrs	r3, r3, #16
 8020536:	f53f af23 	bmi.w	8020380 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802053a:	3a01      	subs	r2, #1
 802053c:	4293      	cmp	r3, r2
 802053e:	f6bf af1f 	bge.w	8020380 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8020542:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8020546:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 802054a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 802054e:	f1be 0f00 	cmp.w	lr, #0
 8020552:	dc6c      	bgt.n	802062e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8020554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020556:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802055a:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 802055e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020560:	2b00      	cmp	r3, #0
 8020562:	f340 810e 	ble.w	8020782 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 8020566:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802056a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802056c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020570:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020574:	eef0 6a48 	vmov.f32	s13, s16
 8020578:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802057c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020580:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020584:	ee16 aa90 	vmov	sl, s13
 8020588:	eef0 6a68 	vmov.f32	s13, s17
 802058c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020590:	ee16 5a90 	vmov	r5, s13
 8020594:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020598:	ee69 7a27 	vmul.f32	s15, s18, s15
 802059c:	ee37 8a48 	vsub.f32	s16, s14, s16
 80205a0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80205a4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80205a8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80205ac:	ee18 2a10 	vmov	r2, s16
 80205b0:	eeb0 8a47 	vmov.f32	s16, s14
 80205b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80205b8:	ee18 2a90 	vmov	r2, s17
 80205bc:	932d      	str	r3, [sp, #180]	; 0xb4
 80205be:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80205c0:	eef0 8a67 	vmov.f32	s17, s15
 80205c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80205c8:	932e      	str	r3, [sp, #184]	; 0xb8
 80205ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80205cc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80205ce:	3b01      	subs	r3, #1
 80205d0:	930c      	str	r3, [sp, #48]	; 0x30
 80205d2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80205d4:	bf08      	it	eq
 80205d6:	4613      	moveq	r3, r2
 80205d8:	9309      	str	r3, [sp, #36]	; 0x24
 80205da:	e6a6      	b.n	802032a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80205dc:	2900      	cmp	r1, #0
 80205de:	f43f af10 	beq.w	8020402 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80205e2:	f819 3003 	ldrb.w	r3, [r9, r3]
 80205e6:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80205ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80205ec:	e709      	b.n	8020402 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80205ee:	f112 0901 	adds.w	r9, r2, #1
 80205f2:	f53f af7d 	bmi.w	80204f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80205f6:	454b      	cmp	r3, r9
 80205f8:	f6ff af7a 	blt.w	80204f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80205fc:	f11c 0901 	adds.w	r9, ip, #1
 8020600:	f53f af76 	bmi.w	80204f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8020604:	45ce      	cmp	lr, r9
 8020606:	f6ff af73 	blt.w	80204f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 802060a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802060c:	b21b      	sxth	r3, r3
 802060e:	9202      	str	r2, [sp, #8]
 8020610:	fa0f f28e 	sxth.w	r2, lr
 8020614:	9300      	str	r3, [sp, #0]
 8020616:	4633      	mov	r3, r6
 8020618:	9201      	str	r2, [sp, #4]
 802061a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802061c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8020620:	e9cd c003 	strd	ip, r0, [sp, #12]
 8020624:	4639      	mov	r1, r7
 8020626:	9816      	ldr	r0, [sp, #88]	; 0x58
 8020628:	f7ff fd70 	bl	802010c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 802062c:	e760      	b.n	80204f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 802062e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8020630:	ea4f 422a 	mov.w	r2, sl, asr #16
 8020634:	1429      	asrs	r1, r5, #16
 8020636:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020638:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802063c:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 8020640:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020644:	fb03 2101 	mla	r1, r3, r1, r2
 8020648:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802064a:	440a      	add	r2, r1
 802064c:	5c61      	ldrb	r1, [r4, r1]
 802064e:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8020652:	f1bc 0f00 	cmp.w	ip, #0
 8020656:	f000 808c 	beq.w	8020772 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4aa>
 802065a:	7857      	ldrb	r7, [r2, #1]
 802065c:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 8020660:	9413      	str	r4, [sp, #76]	; 0x4c
 8020662:	b140      	cbz	r0, 8020676 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8020664:	18d7      	adds	r7, r2, r3
 8020666:	5cd3      	ldrb	r3, [r2, r3]
 8020668:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802066c:	9310      	str	r3, [sp, #64]	; 0x40
 802066e:	787b      	ldrb	r3, [r7, #1]
 8020670:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8020674:	9314      	str	r3, [sp, #80]	; 0x50
 8020676:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020678:	fb1c f200 	smulbb	r2, ip, r0
 802067c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802067e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8020682:	041f      	lsls	r7, r3, #16
 8020684:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8020688:	10d2      	asrs	r2, r2, #3
 802068a:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 802068e:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 8020692:	431f      	orrs	r7, r3
 8020694:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 8020698:	9317      	str	r3, [sp, #92]	; 0x5c
 802069a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802069c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 802069e:	041b      	lsls	r3, r3, #16
 80206a0:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80206a4:	ea43 030b 	orr.w	r3, r3, fp
 80206a8:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80206ac:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80206b0:	4353      	muls	r3, r2
 80206b2:	fb04 3707 	mla	r7, r4, r7, r3
 80206b6:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 80206ba:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80206bc:	ea43 0b01 	orr.w	fp, r3, r1
 80206c0:	f1c0 0110 	rsb	r1, r0, #16
 80206c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80206c6:	eba1 0c0c 	sub.w	ip, r1, ip
 80206ca:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80206ce:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 80206d2:	fb0c 770b 	mla	r7, ip, fp, r7
 80206d6:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80206da:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 80206de:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80206e2:	ea4c 0c0b 	orr.w	ip, ip, fp
 80206e6:	fb02 770c 	mla	r7, r2, ip, r7
 80206ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80206ec:	0d79      	lsrs	r1, r7, #21
 80206ee:	8812      	ldrh	r2, [r2, #0]
 80206f0:	097f      	lsrs	r7, r7, #5
 80206f2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80206f6:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80206fa:	430f      	orrs	r7, r1
 80206fc:	1211      	asrs	r1, r2, #8
 80206fe:	b2bb      	uxth	r3, r7
 8020700:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8020704:	10d7      	asrs	r7, r2, #3
 8020706:	fb11 f104 	smulbb	r1, r1, r4
 802070a:	1218      	asrs	r0, r3, #8
 802070c:	00d2      	lsls	r2, r2, #3
 802070e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8020712:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020716:	fb17 f704 	smulbb	r7, r7, r4
 802071a:	b2d2      	uxtb	r2, r2
 802071c:	fb00 1009 	mla	r0, r0, r9, r1
 8020720:	10d9      	asrs	r1, r3, #3
 8020722:	fb12 f204 	smulbb	r2, r2, r4
 8020726:	00db      	lsls	r3, r3, #3
 8020728:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802072c:	b280      	uxth	r0, r0
 802072e:	b2db      	uxtb	r3, r3
 8020730:	fb01 7109 	mla	r1, r1, r9, r7
 8020734:	fb03 2309 	mla	r3, r3, r9, r2
 8020738:	1c42      	adds	r2, r0, #1
 802073a:	b289      	uxth	r1, r1
 802073c:	b29b      	uxth	r3, r3
 802073e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8020742:	1c4f      	adds	r7, r1, #1
 8020744:	1c5a      	adds	r2, r3, #1
 8020746:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 802074a:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802074e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020752:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020754:	0949      	lsrs	r1, r1, #5
 8020756:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802075a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802075e:	4310      	orrs	r0, r2
 8020760:	4308      	orrs	r0, r1
 8020762:	f823 0b02 	strh.w	r0, [r3], #2
 8020766:	930e      	str	r3, [sp, #56]	; 0x38
 8020768:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802076a:	449a      	add	sl, r3
 802076c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802076e:	441d      	add	r5, r3
 8020770:	e6ed      	b.n	802054e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 8020772:	2800      	cmp	r0, #0
 8020774:	f43f af7f 	beq.w	8020676 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8020778:	5cd3      	ldrb	r3, [r2, r3]
 802077a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802077e:	9310      	str	r3, [sp, #64]	; 0x40
 8020780:	e779      	b.n	8020676 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8020782:	b019      	add	sp, #100	; 0x64
 8020784:	ecbd 8b08 	vpop	{d8-d11}
 8020788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802078c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 802078c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020790:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 8020794:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8020798:	2e00      	cmp	r6, #0
 802079a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802079e:	fb06 570e 	mla	r7, r6, lr, r5
 80207a2:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 80207a6:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 80207aa:	eb02 0807 	add.w	r8, r2, r7
 80207ae:	8808      	ldrh	r0, [r1, #0]
 80207b0:	db38      	blt.n	8020824 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 80207b2:	45b1      	cmp	r9, r6
 80207b4:	dd36      	ble.n	8020824 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 80207b6:	2d00      	cmp	r5, #0
 80207b8:	db32      	blt.n	8020820 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 80207ba:	45ae      	cmp	lr, r5
 80207bc:	dd30      	ble.n	8020820 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 80207be:	5dd2      	ldrb	r2, [r2, r7]
 80207c0:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 80207c4:	1c6a      	adds	r2, r5, #1
 80207c6:	d430      	bmi.n	802082a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 80207c8:	4596      	cmp	lr, r2
 80207ca:	dd2e      	ble.n	802082a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 80207cc:	b36c      	cbz	r4, 802082a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 80207ce:	f898 2001 	ldrb.w	r2, [r8, #1]
 80207d2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80207d6:	3601      	adds	r6, #1
 80207d8:	d42b      	bmi.n	8020832 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 80207da:	45b1      	cmp	r9, r6
 80207dc:	dd29      	ble.n	8020832 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 80207de:	f1bc 0f00 	cmp.w	ip, #0
 80207e2:	d028      	beq.n	8020836 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 80207e4:	2d00      	cmp	r5, #0
 80207e6:	db22      	blt.n	802082e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 80207e8:	45ae      	cmp	lr, r5
 80207ea:	dd20      	ble.n	802082e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 80207ec:	f818 600e 	ldrb.w	r6, [r8, lr]
 80207f0:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 80207f4:	3501      	adds	r5, #1
 80207f6:	d407      	bmi.n	8020808 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 80207f8:	45ae      	cmp	lr, r5
 80207fa:	dd05      	ble.n	8020808 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 80207fc:	b134      	cbz	r4, 802080c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 80207fe:	44c6      	add	lr, r8
 8020800:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8020804:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8020808:	2c0f      	cmp	r4, #15
 802080a:	d802      	bhi.n	8020812 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 802080c:	f1bc 0f0f 	cmp.w	ip, #15
 8020810:	d914      	bls.n	802083c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 8020812:	4b26      	ldr	r3, [pc, #152]	; (80208ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 8020814:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8020818:	4a25      	ldr	r2, [pc, #148]	; (80208b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 802081a:	4826      	ldr	r0, [pc, #152]	; (80208b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 802081c:	f006 fdf2 	bl	8027404 <__assert_func>
 8020820:	4607      	mov	r7, r0
 8020822:	e7cf      	b.n	80207c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 8020824:	4602      	mov	r2, r0
 8020826:	4607      	mov	r7, r0
 8020828:	e7d5      	b.n	80207d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 802082a:	4602      	mov	r2, r0
 802082c:	e7d3      	b.n	80207d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 802082e:	4606      	mov	r6, r0
 8020830:	e7e0      	b.n	80207f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 8020832:	4606      	mov	r6, r0
 8020834:	e7e8      	b.n	8020808 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8020836:	2c0f      	cmp	r4, #15
 8020838:	d8eb      	bhi.n	8020812 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 802083a:	4606      	mov	r6, r0
 802083c:	fb14 f30c 	smulbb	r3, r4, ip
 8020840:	043d      	lsls	r5, r7, #16
 8020842:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8020846:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 802084a:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 802084e:	10db      	asrs	r3, r3, #3
 8020850:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8020854:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8020858:	432f      	orrs	r7, r5
 802085a:	f1cc 0510 	rsb	r5, ip, #16
 802085e:	ea4e 0202 	orr.w	r2, lr, r2
 8020862:	1b2d      	subs	r5, r5, r4
 8020864:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8020868:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 802086c:	4354      	muls	r4, r2
 802086e:	fb05 4507 	mla	r5, r5, r7, r4
 8020872:	0404      	lsls	r4, r0, #16
 8020874:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8020878:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 802087c:	4320      	orrs	r0, r4
 802087e:	fb03 5400 	mla	r4, r3, r0, r5
 8020882:	0430      	lsls	r0, r6, #16
 8020884:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8020888:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 802088c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8020890:	4330      	orrs	r0, r6
 8020892:	fb03 4000 	mla	r0, r3, r0, r4
 8020896:	0d43      	lsrs	r3, r0, #21
 8020898:	0940      	lsrs	r0, r0, #5
 802089a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802089e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80208a2:	4318      	orrs	r0, r3
 80208a4:	8008      	strh	r0, [r1, #0]
 80208a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80208aa:	bf00      	nop
 80208ac:	0802e3b6 	.word	0x0802e3b6
 80208b0:	0802ea2f 	.word	0x0802ea2f
 80208b4:	0802e43a 	.word	0x0802e43a

080208b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80208b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80208bc:	ed2d 8b0a 	vpush	{d8-d12}
 80208c0:	b093      	sub	sp, #76	; 0x4c
 80208c2:	eeb0 aa40 	vmov.f32	s20, s0
 80208c6:	eef0 9a60 	vmov.f32	s19, s1
 80208ca:	920f      	str	r2, [sp, #60]	; 0x3c
 80208cc:	eeb0 9a41 	vmov.f32	s18, s2
 80208d0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80208d2:	eeb0 8a62 	vmov.f32	s16, s5
 80208d6:	9010      	str	r0, [sp, #64]	; 0x40
 80208d8:	eef0 8a43 	vmov.f32	s17, s6
 80208dc:	6850      	ldr	r0, [r2, #4]
 80208de:	eeb0 ca44 	vmov.f32	s24, s8
 80208e2:	9108      	str	r1, [sp, #32]
 80208e4:	eef0 ba64 	vmov.f32	s23, s9
 80208e8:	9306      	str	r3, [sp, #24]
 80208ea:	eeb0 ba45 	vmov.f32	s22, s10
 80208ee:	6812      	ldr	r2, [r2, #0]
 80208f0:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 80208f4:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80208f8:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 80208fc:	fb00 1303 	mla	r3, r0, r3, r1
 8020900:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8020904:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020906:	681b      	ldr	r3, [r3, #0]
 8020908:	9307      	str	r3, [sp, #28]
 802090a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802090c:	685f      	ldr	r7, [r3, #4]
 802090e:	3704      	adds	r7, #4
 8020910:	9b08      	ldr	r3, [sp, #32]
 8020912:	2b00      	cmp	r3, #0
 8020914:	dc03      	bgt.n	802091e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020916:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020918:	2b00      	cmp	r3, #0
 802091a:	f340 81b2 	ble.w	8020c82 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 802091e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020920:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020924:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020928:	1e48      	subs	r0, r1, #1
 802092a:	f102 3cff 	add.w	ip, r2, #4294967295
 802092e:	9b06      	ldr	r3, [sp, #24]
 8020930:	2b00      	cmp	r3, #0
 8020932:	f340 80a9 	ble.w	8020a88 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8020936:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802093a:	ea4f 4326 	mov.w	r3, r6, asr #16
 802093e:	d406      	bmi.n	802094e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020940:	4586      	cmp	lr, r0
 8020942:	da04      	bge.n	802094e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020944:	2b00      	cmp	r3, #0
 8020946:	db02      	blt.n	802094e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020948:	4563      	cmp	r3, ip
 802094a:	f2c0 809e 	blt.w	8020a8a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802094e:	f11e 0e01 	adds.w	lr, lr, #1
 8020952:	f100 808f 	bmi.w	8020a74 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8020956:	4571      	cmp	r1, lr
 8020958:	f2c0 808c 	blt.w	8020a74 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 802095c:	3301      	adds	r3, #1
 802095e:	f100 8089 	bmi.w	8020a74 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8020962:	429a      	cmp	r2, r3
 8020964:	f2c0 8086 	blt.w	8020a74 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8020968:	f8dd b018 	ldr.w	fp, [sp, #24]
 802096c:	46c8      	mov	r8, r9
 802096e:	f1bb 0f00 	cmp.w	fp, #0
 8020972:	f340 80a6 	ble.w	8020ac2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8020976:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8020978:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802097c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802097e:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8020982:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8020986:	1422      	asrs	r2, r4, #16
 8020988:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802098c:	689b      	ldr	r3, [r3, #8]
 802098e:	f100 80e3 	bmi.w	8020b58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8020992:	f103 3aff 	add.w	sl, r3, #4294967295
 8020996:	4552      	cmp	r2, sl
 8020998:	f280 80de 	bge.w	8020b58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 802099c:	f1bc 0f00 	cmp.w	ip, #0
 80209a0:	f2c0 80da 	blt.w	8020b58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80209a4:	f10e 3aff 	add.w	sl, lr, #4294967295
 80209a8:	45d4      	cmp	ip, sl
 80209aa:	f280 80d5 	bge.w	8020b58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80209ae:	b21b      	sxth	r3, r3
 80209b0:	9d07      	ldr	r5, [sp, #28]
 80209b2:	fb0c 2203 	mla	r2, ip, r3, r2
 80209b6:	eb05 0a02 	add.w	sl, r5, r2
 80209ba:	5caa      	ldrb	r2, [r5, r2]
 80209bc:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 80209c0:	2800      	cmp	r0, #0
 80209c2:	f000 80c0 	beq.w	8020b46 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 80209c6:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80209ca:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 80209ce:	920b      	str	r2, [sp, #44]	; 0x2c
 80209d0:	b151      	cbz	r1, 80209e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 80209d2:	eb0a 0203 	add.w	r2, sl, r3
 80209d6:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80209da:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80209de:	9309      	str	r3, [sp, #36]	; 0x24
 80209e0:	7853      	ldrb	r3, [r2, #1]
 80209e2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80209e6:	930c      	str	r3, [sp, #48]	; 0x30
 80209e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80209ea:	fb10 f201 	smulbb	r2, r0, r1
 80209ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80209f0:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80209f4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80209f8:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80209fc:	10d2      	asrs	r2, r2, #3
 80209fe:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8020a02:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 8020a06:	ea4c 0c03 	orr.w	ip, ip, r3
 8020a0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020a0c:	041b      	lsls	r3, r3, #16
 8020a0e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8020a12:	432b      	orrs	r3, r5
 8020a14:	4353      	muls	r3, r2
 8020a16:	fb0a 330c 	mla	r3, sl, ip, r3
 8020a1a:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8020a1e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8020a22:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8020a26:	ea4c 0e0e 	orr.w	lr, ip, lr
 8020a2a:	f1c1 0c10 	rsb	ip, r1, #16
 8020a2e:	ebac 0c00 	sub.w	ip, ip, r0
 8020a32:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8020a36:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8020a3a:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8020a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020a40:	0418      	lsls	r0, r3, #16
 8020a42:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8020a46:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8020a4a:	4318      	orrs	r0, r3
 8020a4c:	fb02 c200 	mla	r2, r2, r0, ip
 8020a50:	0d53      	lsrs	r3, r2, #21
 8020a52:	0952      	lsrs	r2, r2, #5
 8020a54:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020a58:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8020a5c:	431a      	orrs	r2, r3
 8020a5e:	f8a8 2000 	strh.w	r2, [r8]
 8020a62:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020a64:	f108 0802 	add.w	r8, r8, #2
 8020a68:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020a6c:	441c      	add	r4, r3
 8020a6e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020a70:	441e      	add	r6, r3
 8020a72:	e77c      	b.n	802096e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8020a74:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020a76:	f109 0902 	add.w	r9, r9, #2
 8020a7a:	441c      	add	r4, r3
 8020a7c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020a7e:	441e      	add	r6, r3
 8020a80:	9b06      	ldr	r3, [sp, #24]
 8020a82:	3b01      	subs	r3, #1
 8020a84:	9306      	str	r3, [sp, #24]
 8020a86:	e752      	b.n	802092e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020a88:	d020      	beq.n	8020acc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8020a8a:	9b06      	ldr	r3, [sp, #24]
 8020a8c:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8020a8e:	3b01      	subs	r3, #1
 8020a90:	fb00 4003 	mla	r0, r0, r3, r4
 8020a94:	1400      	asrs	r0, r0, #16
 8020a96:	f53f af67 	bmi.w	8020968 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8020a9a:	3901      	subs	r1, #1
 8020a9c:	4288      	cmp	r0, r1
 8020a9e:	f6bf af63 	bge.w	8020968 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8020aa2:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8020aa4:	fb01 6303 	mla	r3, r1, r3, r6
 8020aa8:	141b      	asrs	r3, r3, #16
 8020aaa:	f53f af5d 	bmi.w	8020968 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8020aae:	3a01      	subs	r2, #1
 8020ab0:	4293      	cmp	r3, r2
 8020ab2:	f6bf af59 	bge.w	8020968 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8020ab6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8020aba:	46ca      	mov	sl, r9
 8020abc:	f1b8 0f00 	cmp.w	r8, #0
 8020ac0:	dc67      	bgt.n	8020b92 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8020ac2:	9b06      	ldr	r3, [sp, #24]
 8020ac4:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8020ac8:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8020acc:	9b08      	ldr	r3, [sp, #32]
 8020ace:	2b00      	cmp	r3, #0
 8020ad0:	f340 80d7 	ble.w	8020c82 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8020ad4:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8020ad8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020ada:	ee79 9aab 	vadd.f32	s19, s19, s23
 8020ade:	eef0 6a48 	vmov.f32	s13, s16
 8020ae2:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8020ae6:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8020aea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020aee:	ee16 4a90 	vmov	r4, s13
 8020af2:	eef0 6a68 	vmov.f32	s13, s17
 8020af6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020afa:	ee16 6a90 	vmov	r6, s13
 8020afe:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020b02:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020b06:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020b0a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020b0e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020b12:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020b16:	ee18 2a10 	vmov	r2, s16
 8020b1a:	eeb0 8a47 	vmov.f32	s16, s14
 8020b1e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020b22:	ee18 2a90 	vmov	r2, s17
 8020b26:	9329      	str	r3, [sp, #164]	; 0xa4
 8020b28:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020b2a:	eef0 8a67 	vmov.f32	s17, s15
 8020b2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020b32:	932a      	str	r3, [sp, #168]	; 0xa8
 8020b34:	9b08      	ldr	r3, [sp, #32]
 8020b36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020b38:	3b01      	subs	r3, #1
 8020b3a:	9308      	str	r3, [sp, #32]
 8020b3c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020b3e:	bf08      	it	eq
 8020b40:	4613      	moveq	r3, r2
 8020b42:	9306      	str	r3, [sp, #24]
 8020b44:	e6e4      	b.n	8020910 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8020b46:	2900      	cmp	r1, #0
 8020b48:	f43f af4e 	beq.w	80209e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8020b4c:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8020b50:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8020b54:	9309      	str	r3, [sp, #36]	; 0x24
 8020b56:	e747      	b.n	80209e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8020b58:	f112 0a01 	adds.w	sl, r2, #1
 8020b5c:	d481      	bmi.n	8020a62 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8020b5e:	4553      	cmp	r3, sl
 8020b60:	f6ff af7f 	blt.w	8020a62 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8020b64:	f11c 0a01 	adds.w	sl, ip, #1
 8020b68:	f53f af7b 	bmi.w	8020a62 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8020b6c:	45d6      	cmp	lr, sl
 8020b6e:	f6ff af78 	blt.w	8020a62 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8020b72:	b21b      	sxth	r3, r3
 8020b74:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 8020b78:	fa0f f28e 	sxth.w	r2, lr
 8020b7c:	9300      	str	r3, [sp, #0]
 8020b7e:	463b      	mov	r3, r7
 8020b80:	9201      	str	r2, [sp, #4]
 8020b82:	9a07      	ldr	r2, [sp, #28]
 8020b84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8020b88:	4641      	mov	r1, r8
 8020b8a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8020b8c:	f7ff fdfe 	bl	802078c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8020b90:	e767      	b.n	8020a62 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8020b92:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020b94:	1422      	asrs	r2, r4, #16
 8020b96:	1431      	asrs	r1, r6, #16
 8020b98:	9d07      	ldr	r5, [sp, #28]
 8020b9a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8020b9e:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 8020ba2:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8020ba6:	fb03 2101 	mla	r1, r3, r1, r2
 8020baa:	9a07      	ldr	r2, [sp, #28]
 8020bac:	440a      	add	r2, r1
 8020bae:	5c69      	ldrb	r1, [r5, r1]
 8020bb0:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 8020bb4:	f1be 0f00 	cmp.w	lr, #0
 8020bb8:	d05c      	beq.n	8020c74 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 8020bba:	f892 c001 	ldrb.w	ip, [r2, #1]
 8020bbe:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 8020bc2:	950d      	str	r5, [sp, #52]	; 0x34
 8020bc4:	b150      	cbz	r0, 8020bdc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8020bc6:	eb02 0c03 	add.w	ip, r2, r3
 8020bca:	5cd3      	ldrb	r3, [r2, r3]
 8020bcc:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8020bd0:	930a      	str	r3, [sp, #40]	; 0x28
 8020bd2:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8020bd6:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8020bda:	930e      	str	r3, [sp, #56]	; 0x38
 8020bdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020bde:	fb1e f200 	smulbb	r2, lr, r0
 8020be2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8020be4:	f108 38ff 	add.w	r8, r8, #4294967295
 8020be8:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8020bec:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8020bf0:	10d2      	asrs	r2, r2, #3
 8020bf2:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 8020bf6:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8020bfa:	ea4c 0c03 	orr.w	ip, ip, r3
 8020bfe:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 8020c02:	9311      	str	r3, [sp, #68]	; 0x44
 8020c04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020c06:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020c08:	041b      	lsls	r3, r3, #16
 8020c0a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8020c0e:	ea43 030b 	orr.w	r3, r3, fp
 8020c12:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8020c16:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8020c1a:	4353      	muls	r3, r2
 8020c1c:	fb05 3c0c 	mla	ip, r5, ip, r3
 8020c20:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8020c24:	ea43 0b01 	orr.w	fp, r3, r1
 8020c28:	f1c0 0110 	rsb	r1, r0, #16
 8020c2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020c2e:	eba1 0e0e 	sub.w	lr, r1, lr
 8020c32:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8020c36:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8020c3a:	fb0e cc0b 	mla	ip, lr, fp, ip
 8020c3e:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8020c42:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 8020c46:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020c4a:	ea4b 0e0e 	orr.w	lr, fp, lr
 8020c4e:	fb02 cc0e 	mla	ip, r2, lr, ip
 8020c52:	ea4f 535c 	mov.w	r3, ip, lsr #21
 8020c56:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8020c5a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020c5e:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8020c62:	ea43 0c0c 	orr.w	ip, r3, ip
 8020c66:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020c68:	441c      	add	r4, r3
 8020c6a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020c6c:	f82a cb02 	strh.w	ip, [sl], #2
 8020c70:	441e      	add	r6, r3
 8020c72:	e723      	b.n	8020abc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8020c74:	2800      	cmp	r0, #0
 8020c76:	d0b1      	beq.n	8020bdc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8020c78:	5cd3      	ldrb	r3, [r2, r3]
 8020c7a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8020c7e:	930a      	str	r3, [sp, #40]	; 0x28
 8020c80:	e7ac      	b.n	8020bdc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8020c82:	b013      	add	sp, #76	; 0x4c
 8020c84:	ecbd 8b0a 	vpop	{d8-d12}
 8020c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020c8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 8020c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c90:	468b      	mov	fp, r1
 8020c92:	8809      	ldrh	r1, [r1, #0]
 8020c94:	b089      	sub	sp, #36	; 0x24
 8020c96:	10cd      	asrs	r5, r1, #3
 8020c98:	ea4f 2921 	mov.w	r9, r1, asr #8
 8020c9c:	f9bd e048 	ldrsh.w	lr, [sp, #72]	; 0x48
 8020ca0:	00c9      	lsls	r1, r1, #3
 8020ca2:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8020ca6:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 8020caa:	9202      	str	r2, [sp, #8]
 8020cac:	b2c9      	uxtb	r1, r1
 8020cae:	9500      	str	r5, [sp, #0]
 8020cb0:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 8020cb4:	9101      	str	r1, [sp, #4]
 8020cb6:	9900      	ldr	r1, [sp, #0]
 8020cb8:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8020cbc:	0209      	lsls	r1, r1, #8
 8020cbe:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8020cc2:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 8020cc6:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8020cca:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	; 0x50
 8020cce:	fb04 650e 	mla	r5, r4, lr, r6
 8020cd2:	2c00      	cmp	r4, #0
 8020cd4:	eb02 0805 	add.w	r8, r2, r5
 8020cd8:	9a01      	ldr	r2, [sp, #4]
 8020cda:	ea41 0102 	orr.w	r1, r1, r2
 8020cde:	9107      	str	r1, [sp, #28]
 8020ce0:	db43      	blt.n	8020d6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 8020ce2:	45a2      	cmp	sl, r4
 8020ce4:	dd41      	ble.n	8020d6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 8020ce6:	2e00      	cmp	r6, #0
 8020ce8:	db3d      	blt.n	8020d66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 8020cea:	45b6      	cmp	lr, r6
 8020cec:	dd3b      	ble.n	8020d66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 8020cee:	9a02      	ldr	r2, [sp, #8]
 8020cf0:	5d55      	ldrb	r5, [r2, r5]
 8020cf2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020cf6:	441d      	add	r5, r3
 8020cf8:	1c72      	adds	r2, r6, #1
 8020cfa:	d439      	bmi.n	8020d70 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 8020cfc:	4596      	cmp	lr, r2
 8020cfe:	dd37      	ble.n	8020d70 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 8020d00:	2f00      	cmp	r7, #0
 8020d02:	d035      	beq.n	8020d70 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 8020d04:	f898 1001 	ldrb.w	r1, [r8, #1]
 8020d08:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020d0c:	4419      	add	r1, r3
 8020d0e:	3401      	adds	r4, #1
 8020d10:	d432      	bmi.n	8020d78 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 8020d12:	45a2      	cmp	sl, r4
 8020d14:	dd30      	ble.n	8020d78 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 8020d16:	b378      	cbz	r0, 8020d78 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 8020d18:	2e00      	cmp	r6, #0
 8020d1a:	db2b      	blt.n	8020d74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 8020d1c:	45b6      	cmp	lr, r6
 8020d1e:	dd29      	ble.n	8020d74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 8020d20:	f818 400e 	ldrb.w	r4, [r8, lr]
 8020d24:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020d28:	441c      	add	r4, r3
 8020d2a:	3601      	adds	r6, #1
 8020d2c:	d427      	bmi.n	8020d7e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 8020d2e:	45b6      	cmp	lr, r6
 8020d30:	dd25      	ble.n	8020d7e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 8020d32:	b327      	cbz	r7, 8020d7e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 8020d34:	44c6      	add	lr, r8
 8020d36:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8020d3a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020d3e:	4413      	add	r3, r2
 8020d40:	782a      	ldrb	r2, [r5, #0]
 8020d42:	2f0f      	cmp	r7, #15
 8020d44:	9202      	str	r2, [sp, #8]
 8020d46:	780a      	ldrb	r2, [r1, #0]
 8020d48:	9203      	str	r2, [sp, #12]
 8020d4a:	7822      	ldrb	r2, [r4, #0]
 8020d4c:	9204      	str	r2, [sp, #16]
 8020d4e:	781a      	ldrb	r2, [r3, #0]
 8020d50:	9205      	str	r2, [sp, #20]
 8020d52:	d801      	bhi.n	8020d58 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xcc>
 8020d54:	280f      	cmp	r0, #15
 8020d56:	d914      	bls.n	8020d82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf6>
 8020d58:	4b3f      	ldr	r3, [pc, #252]	; (8020e58 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 8020d5a:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8020d5e:	4a3f      	ldr	r2, [pc, #252]	; (8020e5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 8020d60:	483f      	ldr	r0, [pc, #252]	; (8020e60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>)
 8020d62:	f006 fb4f 	bl	8027404 <__assert_func>
 8020d66:	ad07      	add	r5, sp, #28
 8020d68:	e7c6      	b.n	8020cf8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6c>
 8020d6a:	a907      	add	r1, sp, #28
 8020d6c:	460d      	mov	r5, r1
 8020d6e:	e7ce      	b.n	8020d0e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 8020d70:	a907      	add	r1, sp, #28
 8020d72:	e7cc      	b.n	8020d0e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 8020d74:	ac07      	add	r4, sp, #28
 8020d76:	e7d8      	b.n	8020d2a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9e>
 8020d78:	ab07      	add	r3, sp, #28
 8020d7a:	461c      	mov	r4, r3
 8020d7c:	e7e0      	b.n	8020d40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 8020d7e:	ab07      	add	r3, sp, #28
 8020d80:	e7de      	b.n	8020d40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 8020d82:	b2ba      	uxth	r2, r7
 8020d84:	f891 8002 	ldrb.w	r8, [r1, #2]
 8020d88:	b280      	uxth	r0, r0
 8020d8a:	7849      	ldrb	r1, [r1, #1]
 8020d8c:	78ae      	ldrb	r6, [r5, #2]
 8020d8e:	fa1f f78c 	uxth.w	r7, ip
 8020d92:	fb02 fa00 	mul.w	sl, r2, r0
 8020d96:	0112      	lsls	r2, r2, #4
 8020d98:	786d      	ldrb	r5, [r5, #1]
 8020d9a:	ea6f 0c0c 	mvn.w	ip, ip
 8020d9e:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8020da2:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 8020da6:	eba2 020a 	sub.w	r2, r2, sl
 8020daa:	fa5f fc8c 	uxtb.w	ip, ip
 8020dae:	b280      	uxth	r0, r0
 8020db0:	fb19 f90c 	smulbb	r9, r9, ip
 8020db4:	b292      	uxth	r2, r2
 8020db6:	ebae 0e00 	sub.w	lr, lr, r0
 8020dba:	4351      	muls	r1, r2
 8020dbc:	fa1f fe8e 	uxth.w	lr, lr
 8020dc0:	fb02 f808 	mul.w	r8, r2, r8
 8020dc4:	fb0e 1505 	mla	r5, lr, r5, r1
 8020dc8:	7861      	ldrb	r1, [r4, #1]
 8020dca:	fb0e 8806 	mla	r8, lr, r6, r8
 8020dce:	78a6      	ldrb	r6, [r4, #2]
 8020dd0:	fb00 5501 	mla	r5, r0, r1, r5
 8020dd4:	7859      	ldrb	r1, [r3, #1]
 8020dd6:	fb00 8806 	mla	r8, r0, r6, r8
 8020dda:	789e      	ldrb	r6, [r3, #2]
 8020ddc:	9b00      	ldr	r3, [sp, #0]
 8020dde:	fb0a 5101 	mla	r1, sl, r1, r5
 8020de2:	fb0a 8606 	mla	r6, sl, r6, r8
 8020de6:	fb13 f50c 	smulbb	r5, r3, ip
 8020dea:	9b03      	ldr	r3, [sp, #12]
 8020dec:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8020df0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020df4:	435a      	muls	r2, r3
 8020df6:	9b02      	ldr	r3, [sp, #8]
 8020df8:	fb06 9607 	mla	r6, r6, r7, r9
 8020dfc:	fb0e 2203 	mla	r2, lr, r3, r2
 8020e00:	9b04      	ldr	r3, [sp, #16]
 8020e02:	b2b6      	uxth	r6, r6
 8020e04:	fb01 5107 	mla	r1, r1, r7, r5
 8020e08:	fb00 2003 	mla	r0, r0, r3, r2
 8020e0c:	9b05      	ldr	r3, [sp, #20]
 8020e0e:	f106 0901 	add.w	r9, r6, #1
 8020e12:	b289      	uxth	r1, r1
 8020e14:	fb0a 0a03 	mla	sl, sl, r3, r0
 8020e18:	9b01      	ldr	r3, [sp, #4]
 8020e1a:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 8020e1e:	1c4d      	adds	r5, r1, #1
 8020e20:	fb13 fc0c 	smulbb	ip, r3, ip
 8020e24:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8020e28:	f406 4978 	and.w	r9, r6, #63488	; 0xf800
 8020e2c:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 8020e30:	fb0a c707 	mla	r7, sl, r7, ip
 8020e34:	0949      	lsrs	r1, r1, #5
 8020e36:	b2bf      	uxth	r7, r7
 8020e38:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020e3c:	1c7e      	adds	r6, r7, #1
 8020e3e:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8020e42:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8020e46:	ea46 0609 	orr.w	r6, r6, r9
 8020e4a:	430e      	orrs	r6, r1
 8020e4c:	f8ab 6000 	strh.w	r6, [fp]
 8020e50:	b009      	add	sp, #36	; 0x24
 8020e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e56:	bf00      	nop
 8020e58:	0802e3b6 	.word	0x0802e3b6
 8020e5c:	0802e986 	.word	0x0802e986
 8020e60:	0802e43a 	.word	0x0802e43a

08020e64 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e68:	ed2d 8b08 	vpush	{d8-d11}
 8020e6c:	b095      	sub	sp, #84	; 0x54
 8020e6e:	eeb0 aa40 	vmov.f32	s20, s0
 8020e72:	eef0 9a60 	vmov.f32	s19, s1
 8020e76:	9212      	str	r2, [sp, #72]	; 0x48
 8020e78:	eeb0 9a41 	vmov.f32	s18, s2
 8020e7c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020e7e:	eeb0 8a62 	vmov.f32	s16, s5
 8020e82:	9309      	str	r3, [sp, #36]	; 0x24
 8020e84:	eef0 8a43 	vmov.f32	s17, s6
 8020e88:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8020e8c:	eef0 ba44 	vmov.f32	s23, s8
 8020e90:	9013      	str	r0, [sp, #76]	; 0x4c
 8020e92:	eeb0 ba64 	vmov.f32	s22, s9
 8020e96:	930f      	str	r3, [sp, #60]	; 0x3c
 8020e98:	eef0 aa45 	vmov.f32	s21, s10
 8020e9c:	6850      	ldr	r0, [r2, #4]
 8020e9e:	910e      	str	r1, [sp, #56]	; 0x38
 8020ea0:	6812      	ldr	r2, [r2, #0]
 8020ea2:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8020ea6:	fb00 1303 	mla	r3, r0, r3, r1
 8020eaa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020eae:	930a      	str	r3, [sp, #40]	; 0x28
 8020eb0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020eb2:	681b      	ldr	r3, [r3, #0]
 8020eb4:	930d      	str	r3, [sp, #52]	; 0x34
 8020eb6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020eb8:	685c      	ldr	r4, [r3, #4]
 8020eba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020ebc:	3404      	adds	r4, #4
 8020ebe:	43db      	mvns	r3, r3
 8020ec0:	b2db      	uxtb	r3, r3
 8020ec2:	930b      	str	r3, [sp, #44]	; 0x2c
 8020ec4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020ec6:	2b00      	cmp	r3, #0
 8020ec8:	dc03      	bgt.n	8020ed2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020eca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020ecc:	2b00      	cmp	r3, #0
 8020ece:	f340 8255 	ble.w	802137c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 8020ed2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020ed4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020ed8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020edc:	1e48      	subs	r0, r1, #1
 8020ede:	1e55      	subs	r5, r2, #1
 8020ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020ee2:	2b00      	cmp	r3, #0
 8020ee4:	f340 80f9 	ble.w	80210da <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8020ee8:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8020eea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020eec:	1436      	asrs	r6, r6, #16
 8020eee:	ea4f 4323 	mov.w	r3, r3, asr #16
 8020ef2:	d406      	bmi.n	8020f02 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020ef4:	4286      	cmp	r6, r0
 8020ef6:	da04      	bge.n	8020f02 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020ef8:	2b00      	cmp	r3, #0
 8020efa:	db02      	blt.n	8020f02 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020efc:	42ab      	cmp	r3, r5
 8020efe:	f2c0 80ed 	blt.w	80210dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8020f02:	3601      	adds	r6, #1
 8020f04:	f100 80da 	bmi.w	80210bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8020f08:	42b1      	cmp	r1, r6
 8020f0a:	f2c0 80d7 	blt.w	80210bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8020f0e:	3301      	adds	r3, #1
 8020f10:	f100 80d4 	bmi.w	80210bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8020f14:	429a      	cmp	r2, r3
 8020f16:	f2c0 80d1 	blt.w	80210bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8020f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020f1c:	9311      	str	r3, [sp, #68]	; 0x44
 8020f1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020f20:	930c      	str	r3, [sp, #48]	; 0x30
 8020f22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020f24:	2b00      	cmp	r3, #0
 8020f26:	f340 80fa 	ble.w	802111e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8020f2a:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8020f2c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020f2e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8020f30:	68c6      	ldr	r6, [r0, #12]
 8020f32:	141d      	asrs	r5, r3, #16
 8020f34:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8020f36:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020f3a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020f3c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8020f3e:	1400      	asrs	r0, r0, #16
 8020f40:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8020f44:	6892      	ldr	r2, [r2, #8]
 8020f46:	f100 813e 	bmi.w	80211c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8020f4a:	1e57      	subs	r7, r2, #1
 8020f4c:	42b8      	cmp	r0, r7
 8020f4e:	f280 813a 	bge.w	80211c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8020f52:	2d00      	cmp	r5, #0
 8020f54:	f2c0 8137 	blt.w	80211c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8020f58:	1e77      	subs	r7, r6, #1
 8020f5a:	42bd      	cmp	r5, r7
 8020f5c:	f280 8133 	bge.w	80211c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8020f60:	b212      	sxth	r2, r2
 8020f62:	fb05 0002 	mla	r0, r5, r2, r0
 8020f66:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8020f68:	f815 a000 	ldrb.w	sl, [r5, r0]
 8020f6c:	182e      	adds	r6, r5, r0
 8020f6e:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8020f72:	eb04 050a 	add.w	r5, r4, sl
 8020f76:	2b00      	cmp	r3, #0
 8020f78:	f000 8117 	beq.w	80211aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8020f7c:	f896 c001 	ldrb.w	ip, [r6, #1]
 8020f80:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8020f84:	44a4      	add	ip, r4
 8020f86:	2900      	cmp	r1, #0
 8020f88:	f000 8117 	beq.w	80211ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8020f8c:	18b0      	adds	r0, r6, r2
 8020f8e:	5cb2      	ldrb	r2, [r6, r2]
 8020f90:	7840      	ldrb	r0, [r0, #1]
 8020f92:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020f96:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020f9a:	4422      	add	r2, r4
 8020f9c:	4420      	add	r0, r4
 8020f9e:	b29b      	uxth	r3, r3
 8020fa0:	f89c 7002 	ldrb.w	r7, [ip, #2]
 8020fa4:	b289      	uxth	r1, r1
 8020fa6:	f895 b002 	ldrb.w	fp, [r5, #2]
 8020faa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8020fac:	fb03 f901 	mul.w	r9, r3, r1
 8020fb0:	011b      	lsls	r3, r3, #4
 8020fb2:	f8b6 e000 	ldrh.w	lr, [r6]
 8020fb6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020fba:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8020fbe:	eba3 0309 	sub.w	r3, r3, r9
 8020fc2:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8020fc6:	b289      	uxth	r1, r1
 8020fc8:	f814 a00a 	ldrb.w	sl, [r4, sl]
 8020fcc:	b29b      	uxth	r3, r3
 8020fce:	eba8 0801 	sub.w	r8, r8, r1
 8020fd2:	435f      	muls	r7, r3
 8020fd4:	fa1f f888 	uxth.w	r8, r8
 8020fd8:	9310      	str	r3, [sp, #64]	; 0x40
 8020fda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020fdc:	fb08 770b 	mla	r7, r8, fp, r7
 8020fe0:	f892 b002 	ldrb.w	fp, [r2, #2]
 8020fe4:	fb01 770b 	mla	r7, r1, fp, r7
 8020fe8:	f890 b002 	ldrb.w	fp, [r0, #2]
 8020fec:	fb09 770b 	mla	r7, r9, fp, r7
 8020ff0:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 8020ff4:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8020ff8:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8020ffc:	fb1b fb03 	smulbb	fp, fp, r3
 8021000:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021002:	fb07 b706 	mla	r7, r7, r6, fp
 8021006:	f895 b001 	ldrb.w	fp, [r5, #1]
 802100a:	f89c 5001 	ldrb.w	r5, [ip, #1]
 802100e:	f89c c000 	ldrb.w	ip, [ip]
 8021012:	b2bf      	uxth	r7, r7
 8021014:	435d      	muls	r5, r3
 8021016:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021018:	fb08 550b 	mla	r5, r8, fp, r5
 802101c:	f892 b001 	ldrb.w	fp, [r2, #1]
 8021020:	fb01 550b 	mla	r5, r1, fp, r5
 8021024:	f890 b001 	ldrb.w	fp, [r0, #1]
 8021028:	fb09 550b 	mla	r5, r9, fp, r5
 802102c:	ea4f 0bee 	mov.w	fp, lr, asr #3
 8021030:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8021034:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8021038:	f3c5 2507 	ubfx	r5, r5, #8, #8
 802103c:	fa5f fe8e 	uxtb.w	lr, lr
 8021040:	fb1b fb03 	smulbb	fp, fp, r3
 8021044:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021046:	fb03 f30c 	mul.w	r3, r3, ip
 802104a:	f892 c000 	ldrb.w	ip, [r2]
 802104e:	fb05 b506 	mla	r5, r5, r6, fp
 8021052:	fb08 330a 	mla	r3, r8, sl, r3
 8021056:	b2ad      	uxth	r5, r5
 8021058:	fb01 330c 	mla	r3, r1, ip, r3
 802105c:	f890 c000 	ldrb.w	ip, [r0]
 8021060:	f105 0b01 	add.w	fp, r5, #1
 8021064:	fb09 3c0c 	mla	ip, r9, ip, r3
 8021068:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802106a:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 802106e:	fb1e fe03 	smulbb	lr, lr, r3
 8021072:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8021076:	1c7b      	adds	r3, r7, #1
 8021078:	096d      	lsrs	r5, r5, #5
 802107a:	fb0c e606 	mla	r6, ip, r6, lr
 802107e:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8021082:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021086:	b2b6      	uxth	r6, r6
 8021088:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 802108c:	1c77      	adds	r7, r6, #1
 802108e:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8021092:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8021096:	431f      	orrs	r7, r3
 8021098:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802109a:	433d      	orrs	r5, r7
 802109c:	801d      	strh	r5, [r3, #0]
 802109e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80210a0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80210a2:	3302      	adds	r3, #2
 80210a4:	930c      	str	r3, [sp, #48]	; 0x30
 80210a6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80210a8:	4413      	add	r3, r2
 80210aa:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80210ac:	9327      	str	r3, [sp, #156]	; 0x9c
 80210ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80210b0:	4413      	add	r3, r2
 80210b2:	9328      	str	r3, [sp, #160]	; 0xa0
 80210b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80210b6:	3b01      	subs	r3, #1
 80210b8:	9311      	str	r3, [sp, #68]	; 0x44
 80210ba:	e732      	b.n	8020f22 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 80210bc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80210be:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 80210c0:	4433      	add	r3, r6
 80210c2:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 80210c4:	9327      	str	r3, [sp, #156]	; 0x9c
 80210c6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80210c8:	4433      	add	r3, r6
 80210ca:	9328      	str	r3, [sp, #160]	; 0xa0
 80210cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80210ce:	3b01      	subs	r3, #1
 80210d0:	9309      	str	r3, [sp, #36]	; 0x24
 80210d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80210d4:	3302      	adds	r3, #2
 80210d6:	930a      	str	r3, [sp, #40]	; 0x28
 80210d8:	e702      	b.n	8020ee0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80210da:	d027      	beq.n	802112c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 80210dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80210de:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80210e0:	3b01      	subs	r3, #1
 80210e2:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 80210e4:	fb00 5003 	mla	r0, r0, r3, r5
 80210e8:	1400      	asrs	r0, r0, #16
 80210ea:	f53f af16 	bmi.w	8020f1a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80210ee:	3901      	subs	r1, #1
 80210f0:	4288      	cmp	r0, r1
 80210f2:	f6bf af12 	bge.w	8020f1a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80210f6:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80210f8:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80210fa:	fb01 0303 	mla	r3, r1, r3, r0
 80210fe:	141b      	asrs	r3, r3, #16
 8021100:	f53f af0b 	bmi.w	8020f1a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8021104:	3a01      	subs	r2, #1
 8021106:	4293      	cmp	r3, r2
 8021108:	f6bf af07 	bge.w	8020f1a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802110c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802110e:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8021112:	9311      	str	r3, [sp, #68]	; 0x44
 8021114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021116:	930c      	str	r3, [sp, #48]	; 0x30
 8021118:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802111a:	2b00      	cmp	r3, #0
 802111c:	dc70      	bgt.n	8021200 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 802111e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021120:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021122:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021126:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802112a:	930a      	str	r3, [sp, #40]	; 0x28
 802112c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802112e:	2b00      	cmp	r3, #0
 8021130:	f340 8124 	ble.w	802137c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 8021134:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021138:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802113a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802113e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021142:	eef0 6a48 	vmov.f32	s13, s16
 8021146:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802114a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802114e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021152:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 8021156:	eef0 6a68 	vmov.f32	s13, s17
 802115a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802115e:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 8021162:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021166:	ee69 7a27 	vmul.f32	s15, s18, s15
 802116a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802116e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021172:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021176:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802117a:	ee18 2a10 	vmov	r2, s16
 802117e:	eeb0 8a47 	vmov.f32	s16, s14
 8021182:	fb92 f3f3 	sdiv	r3, r2, r3
 8021186:	ee18 2a90 	vmov	r2, s17
 802118a:	9329      	str	r3, [sp, #164]	; 0xa4
 802118c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802118e:	eef0 8a67 	vmov.f32	s17, s15
 8021192:	fb92 f3f3 	sdiv	r3, r2, r3
 8021196:	932a      	str	r3, [sp, #168]	; 0xa8
 8021198:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802119a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802119c:	3b01      	subs	r3, #1
 802119e:	930e      	str	r3, [sp, #56]	; 0x38
 80211a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80211a2:	bf08      	it	eq
 80211a4:	4613      	moveq	r3, r2
 80211a6:	9309      	str	r3, [sp, #36]	; 0x24
 80211a8:	e68c      	b.n	8020ec4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80211aa:	b149      	cbz	r1, 80211c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 80211ac:	5cb2      	ldrb	r2, [r6, r2]
 80211ae:	4628      	mov	r0, r5
 80211b0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80211b4:	4422      	add	r2, r4
 80211b6:	46ac      	mov	ip, r5
 80211b8:	e6f1      	b.n	8020f9e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80211ba:	4628      	mov	r0, r5
 80211bc:	462a      	mov	r2, r5
 80211be:	e6ee      	b.n	8020f9e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80211c0:	4628      	mov	r0, r5
 80211c2:	462a      	mov	r2, r5
 80211c4:	e7f7      	b.n	80211b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 80211c6:	1c47      	adds	r7, r0, #1
 80211c8:	f53f af69 	bmi.w	802109e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 80211cc:	42ba      	cmp	r2, r7
 80211ce:	f6ff af66 	blt.w	802109e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 80211d2:	1c6f      	adds	r7, r5, #1
 80211d4:	f53f af63 	bmi.w	802109e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 80211d8:	42be      	cmp	r6, r7
 80211da:	f6ff af60 	blt.w	802109e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 80211de:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80211e0:	b236      	sxth	r6, r6
 80211e2:	b212      	sxth	r2, r2
 80211e4:	9002      	str	r0, [sp, #8]
 80211e6:	9601      	str	r6, [sp, #4]
 80211e8:	9200      	str	r2, [sp, #0]
 80211ea:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80211ec:	e9cd 1705 	strd	r1, r7, [sp, #20]
 80211f0:	e9cd 5303 	strd	r5, r3, [sp, #12]
 80211f4:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 80211f8:	4623      	mov	r3, r4
 80211fa:	f7ff fd47 	bl	8020c8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 80211fe:	e74e      	b.n	802109e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8021200:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8021202:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8021204:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8021208:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 802120a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 802120c:	1400      	asrs	r0, r0, #16
 802120e:	142d      	asrs	r5, r5, #16
 8021210:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021212:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8021216:	f3c3 3303 	ubfx	r3, r3, #12, #4
 802121a:	fb02 5000 	mla	r0, r2, r0, r5
 802121e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8021220:	f815 9000 	ldrb.w	r9, [r5, r0]
 8021224:	182e      	adds	r6, r5, r0
 8021226:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 802122a:	eb04 0509 	add.w	r5, r4, r9
 802122e:	2b00      	cmp	r3, #0
 8021230:	f000 8096 	beq.w	8021360 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fc>
 8021234:	7877      	ldrb	r7, [r6, #1]
 8021236:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802123a:	4427      	add	r7, r4
 802123c:	2900      	cmp	r1, #0
 802123e:	f000 8097 	beq.w	8021370 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 8021242:	18b0      	adds	r0, r6, r2
 8021244:	5cb2      	ldrb	r2, [r6, r2]
 8021246:	7840      	ldrb	r0, [r0, #1]
 8021248:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802124c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021250:	4422      	add	r2, r4
 8021252:	4420      	add	r0, r4
 8021254:	b29b      	uxth	r3, r3
 8021256:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8021258:	b289      	uxth	r1, r1
 802125a:	f895 b002 	ldrb.w	fp, [r5, #2]
 802125e:	f8b6 c000 	ldrh.w	ip, [r6]
 8021262:	fb03 f801 	mul.w	r8, r3, r1
 8021266:	011b      	lsls	r3, r3, #4
 8021268:	78be      	ldrb	r6, [r7, #2]
 802126a:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 802126e:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8021272:	eba3 0308 	sub.w	r3, r3, r8
 8021276:	f814 9009 	ldrb.w	r9, [r4, r9]
 802127a:	b289      	uxth	r1, r1
 802127c:	b29b      	uxth	r3, r3
 802127e:	ebae 0e01 	sub.w	lr, lr, r1
 8021282:	435e      	muls	r6, r3
 8021284:	fa1f fe8e 	uxth.w	lr, lr
 8021288:	9310      	str	r3, [sp, #64]	; 0x40
 802128a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802128c:	fb0e 660b 	mla	r6, lr, fp, r6
 8021290:	f892 b002 	ldrb.w	fp, [r2, #2]
 8021294:	fb01 660b 	mla	r6, r1, fp, r6
 8021298:	f890 b002 	ldrb.w	fp, [r0, #2]
 802129c:	fb08 660b 	mla	r6, r8, fp, r6
 80212a0:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 80212a4:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 80212a8:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80212ac:	fb1b fb03 	smulbb	fp, fp, r3
 80212b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80212b2:	fb06 b60a 	mla	r6, r6, sl, fp
 80212b6:	f895 b001 	ldrb.w	fp, [r5, #1]
 80212ba:	787d      	ldrb	r5, [r7, #1]
 80212bc:	783f      	ldrb	r7, [r7, #0]
 80212be:	b2b6      	uxth	r6, r6
 80212c0:	435d      	muls	r5, r3
 80212c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80212c4:	fb0e 550b 	mla	r5, lr, fp, r5
 80212c8:	f892 b001 	ldrb.w	fp, [r2, #1]
 80212cc:	fb01 550b 	mla	r5, r1, fp, r5
 80212d0:	f890 b001 	ldrb.w	fp, [r0, #1]
 80212d4:	fb08 550b 	mla	r5, r8, fp, r5
 80212d8:	ea4f 0bec 	mov.w	fp, ip, asr #3
 80212dc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80212e0:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 80212e4:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80212e8:	fa5f fc8c 	uxtb.w	ip, ip
 80212ec:	fb1b fb03 	smulbb	fp, fp, r3
 80212f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80212f2:	437b      	muls	r3, r7
 80212f4:	7817      	ldrb	r7, [r2, #0]
 80212f6:	fb05 b50a 	mla	r5, r5, sl, fp
 80212fa:	fb0e 3309 	mla	r3, lr, r9, r3
 80212fe:	b2ad      	uxth	r5, r5
 8021300:	fb01 3307 	mla	r3, r1, r7, r3
 8021304:	7807      	ldrb	r7, [r0, #0]
 8021306:	f105 0b01 	add.w	fp, r5, #1
 802130a:	fb08 3707 	mla	r7, r8, r7, r3
 802130e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021310:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8021314:	fb1c fc03 	smulbb	ip, ip, r3
 8021318:	f3c7 2707 	ubfx	r7, r7, #8, #8
 802131c:	1c73      	adds	r3, r6, #1
 802131e:	096d      	lsrs	r5, r5, #5
 8021320:	fb07 c70a 	mla	r7, r7, sl, ip
 8021324:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8021328:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802132c:	b2bf      	uxth	r7, r7
 802132e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021330:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8021334:	1c7a      	adds	r2, r7, #1
 8021336:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 802133a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802133e:	4316      	orrs	r6, r2
 8021340:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021342:	432e      	orrs	r6, r5
 8021344:	f823 6b02 	strh.w	r6, [r3], #2
 8021348:	930c      	str	r3, [sp, #48]	; 0x30
 802134a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802134c:	4413      	add	r3, r2
 802134e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8021350:	9327      	str	r3, [sp, #156]	; 0x9c
 8021352:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021354:	4413      	add	r3, r2
 8021356:	9328      	str	r3, [sp, #160]	; 0xa0
 8021358:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802135a:	3b01      	subs	r3, #1
 802135c:	9311      	str	r3, [sp, #68]	; 0x44
 802135e:	e6db      	b.n	8021118 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 8021360:	b149      	cbz	r1, 8021376 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8021362:	5cb2      	ldrb	r2, [r6, r2]
 8021364:	4628      	mov	r0, r5
 8021366:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802136a:	4422      	add	r2, r4
 802136c:	462f      	mov	r7, r5
 802136e:	e771      	b.n	8021254 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8021370:	4628      	mov	r0, r5
 8021372:	462a      	mov	r2, r5
 8021374:	e76e      	b.n	8021254 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8021376:	4628      	mov	r0, r5
 8021378:	462a      	mov	r2, r5
 802137a:	e7f7      	b.n	802136c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 802137c:	b015      	add	sp, #84	; 0x54
 802137e:	ecbd 8b08 	vpop	{d8-d11}
 8021382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021388 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8021388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802138c:	880e      	ldrh	r6, [r1, #0]
 802138e:	b085      	sub	sp, #20
 8021390:	4691      	mov	r9, r2
 8021392:	0230      	lsls	r0, r6, #8
 8021394:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8021398:	9101      	str	r1, [sp, #4]
 802139a:	f400 0b78 	and.w	fp, r0, #16252928	; 0xf80000
 802139e:	0170      	lsls	r0, r6, #5
 80213a0:	00f6      	lsls	r6, r6, #3
 80213a2:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80213a6:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 80213aa:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 80213ae:	b2f6      	uxtb	r6, r6
 80213b0:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 80213b4:	ea4b 0000 	orr.w	r0, fp, r0
 80213b8:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 80213bc:	4306      	orrs	r6, r0
 80213be:	fb05 7a0c 	mla	sl, r5, ip, r7
 80213c2:	2d00      	cmp	r5, #0
 80213c4:	9603      	str	r6, [sp, #12]
 80213c6:	eb09 0e0a 	add.w	lr, r9, sl
 80213ca:	db42      	blt.n	8021452 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 80213cc:	45a8      	cmp	r8, r5
 80213ce:	dd40      	ble.n	8021452 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 80213d0:	2f00      	cmp	r7, #0
 80213d2:	db3c      	blt.n	802144e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 80213d4:	45bc      	cmp	ip, r7
 80213d6:	dd3a      	ble.n	802144e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 80213d8:	f819 600a 	ldrb.w	r6, [r9, sl]
 80213dc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80213e0:	441e      	add	r6, r3
 80213e2:	1c78      	adds	r0, r7, #1
 80213e4:	d438      	bmi.n	8021458 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 80213e6:	4584      	cmp	ip, r0
 80213e8:	dd36      	ble.n	8021458 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 80213ea:	b3aa      	cbz	r2, 8021458 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 80213ec:	f89e 0001 	ldrb.w	r0, [lr, #1]
 80213f0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80213f4:	4418      	add	r0, r3
 80213f6:	3501      	adds	r5, #1
 80213f8:	d432      	bmi.n	8021460 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 80213fa:	45a8      	cmp	r8, r5
 80213fc:	dd30      	ble.n	8021460 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 80213fe:	b37c      	cbz	r4, 8021460 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 8021400:	2f00      	cmp	r7, #0
 8021402:	db2b      	blt.n	802145c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 8021404:	45bc      	cmp	ip, r7
 8021406:	dd29      	ble.n	802145c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 8021408:	f81e 500c 	ldrb.w	r5, [lr, ip]
 802140c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021410:	441d      	add	r5, r3
 8021412:	3701      	adds	r7, #1
 8021414:	d427      	bmi.n	8021466 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 8021416:	45bc      	cmp	ip, r7
 8021418:	dd25      	ble.n	8021466 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 802141a:	b322      	cbz	r2, 8021466 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 802141c:	44f4      	add	ip, lr
 802141e:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8021422:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8021426:	443b      	add	r3, r7
 8021428:	781f      	ldrb	r7, [r3, #0]
 802142a:	2a0f      	cmp	r2, #15
 802142c:	f896 9000 	ldrb.w	r9, [r6]
 8021430:	f890 a000 	ldrb.w	sl, [r0]
 8021434:	4639      	mov	r1, r7
 8021436:	f895 8000 	ldrb.w	r8, [r5]
 802143a:	d801      	bhi.n	8021440 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb8>
 802143c:	2c0f      	cmp	r4, #15
 802143e:	d914      	bls.n	802146a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe2>
 8021440:	4b2c      	ldr	r3, [pc, #176]	; (80214f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 8021442:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8021446:	4a2c      	ldr	r2, [pc, #176]	; (80214f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 8021448:	482c      	ldr	r0, [pc, #176]	; (80214fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x174>)
 802144a:	f005 ffdb 	bl	8027404 <__assert_func>
 802144e:	ae03      	add	r6, sp, #12
 8021450:	e7c7      	b.n	80213e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x5a>
 8021452:	a803      	add	r0, sp, #12
 8021454:	4606      	mov	r6, r0
 8021456:	e7ce      	b.n	80213f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8021458:	a803      	add	r0, sp, #12
 802145a:	e7cc      	b.n	80213f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 802145c:	ad03      	add	r5, sp, #12
 802145e:	e7d8      	b.n	8021412 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8a>
 8021460:	ab03      	add	r3, sp, #12
 8021462:	461d      	mov	r5, r3
 8021464:	e7e0      	b.n	8021428 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 8021466:	ab03      	add	r3, sp, #12
 8021468:	e7de      	b.n	8021428 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 802146a:	b292      	uxth	r2, r2
 802146c:	f890 c002 	ldrb.w	ip, [r0, #2]
 8021470:	b2a4      	uxth	r4, r4
 8021472:	f896 b002 	ldrb.w	fp, [r6, #2]
 8021476:	7840      	ldrb	r0, [r0, #1]
 8021478:	fb02 fe04 	mul.w	lr, r2, r4
 802147c:	0112      	lsls	r2, r2, #4
 802147e:	7876      	ldrb	r6, [r6, #1]
 8021480:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 8021484:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8021488:	eba2 020e 	sub.w	r2, r2, lr
 802148c:	b2a4      	uxth	r4, r4
 802148e:	b292      	uxth	r2, r2
 8021490:	1b3f      	subs	r7, r7, r4
 8021492:	fb02 fc0c 	mul.w	ip, r2, ip
 8021496:	b2bf      	uxth	r7, r7
 8021498:	fb07 cc0b 	mla	ip, r7, fp, ip
 802149c:	f895 b002 	ldrb.w	fp, [r5, #2]
 80214a0:	fb04 cc0b 	mla	ip, r4, fp, ip
 80214a4:	f893 b002 	ldrb.w	fp, [r3, #2]
 80214a8:	785b      	ldrb	r3, [r3, #1]
 80214aa:	fb0e cc0b 	mla	ip, lr, fp, ip
 80214ae:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 80214b2:	fb02 fc0a 	mul.w	ip, r2, sl
 80214b6:	4342      	muls	r2, r0
 80214b8:	7868      	ldrb	r0, [r5, #1]
 80214ba:	fb07 cc09 	mla	ip, r7, r9, ip
 80214be:	fb07 2206 	mla	r2, r7, r6, r2
 80214c2:	fb04 cc08 	mla	ip, r4, r8, ip
 80214c6:	fb04 2400 	mla	r4, r4, r0, r2
 80214ca:	fb0e cc01 	mla	ip, lr, r1, ip
 80214ce:	fb0e 4e03 	mla	lr, lr, r3, r4
 80214d2:	9b01      	ldr	r3, [sp, #4]
 80214d4:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80214d8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80214dc:	ea4c 0c0b 	orr.w	ip, ip, fp
 80214e0:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80214e4:	ea4c 0c0e 	orr.w	ip, ip, lr
 80214e8:	f8a3 c000 	strh.w	ip, [r3]
 80214ec:	b005      	add	sp, #20
 80214ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80214f2:	bf00      	nop
 80214f4:	0802e3b6 	.word	0x0802e3b6
 80214f8:	0802e986 	.word	0x0802e986
 80214fc:	0802e43a 	.word	0x0802e43a

08021500 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021504:	ed2d 8b08 	vpush	{d8-d11}
 8021508:	b08f      	sub	sp, #60	; 0x3c
 802150a:	eeb0 aa40 	vmov.f32	s20, s0
 802150e:	eef0 9a60 	vmov.f32	s19, s1
 8021512:	920c      	str	r2, [sp, #48]	; 0x30
 8021514:	eeb0 9a41 	vmov.f32	s18, s2
 8021518:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802151a:	eeb0 8a62 	vmov.f32	s16, s5
 802151e:	900d      	str	r0, [sp, #52]	; 0x34
 8021520:	eef0 8a43 	vmov.f32	s17, s6
 8021524:	6850      	ldr	r0, [r2, #4]
 8021526:	eef0 ba44 	vmov.f32	s23, s8
 802152a:	910a      	str	r1, [sp, #40]	; 0x28
 802152c:	eeb0 ba64 	vmov.f32	s22, s9
 8021530:	9306      	str	r3, [sp, #24]
 8021532:	eef0 aa45 	vmov.f32	s21, s10
 8021536:	6812      	ldr	r2, [r2, #0]
 8021538:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 802153c:	e9dd b521 	ldrd	fp, r5, [sp, #132]	; 0x84
 8021540:	fb00 1303 	mla	r3, r0, r3, r1
 8021544:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021548:	9307      	str	r3, [sp, #28]
 802154a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802154c:	681b      	ldr	r3, [r3, #0]
 802154e:	9308      	str	r3, [sp, #32]
 8021550:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021552:	685c      	ldr	r4, [r3, #4]
 8021554:	3404      	adds	r4, #4
 8021556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021558:	2b00      	cmp	r3, #0
 802155a:	dc03      	bgt.n	8021564 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 802155c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802155e:	2b00      	cmp	r3, #0
 8021560:	f340 81d5 	ble.w	802190e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8021564:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021566:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802156a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802156e:	1e48      	subs	r0, r1, #1
 8021570:	1e56      	subs	r6, r2, #1
 8021572:	9b06      	ldr	r3, [sp, #24]
 8021574:	2b00      	cmp	r3, #0
 8021576:	f340 80b6 	ble.w	80216e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802157a:	ea5f 472b 	movs.w	r7, fp, asr #16
 802157e:	ea4f 4325 	mov.w	r3, r5, asr #16
 8021582:	d406      	bmi.n	8021592 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8021584:	4287      	cmp	r7, r0
 8021586:	da04      	bge.n	8021592 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8021588:	2b00      	cmp	r3, #0
 802158a:	db02      	blt.n	8021592 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802158c:	42b3      	cmp	r3, r6
 802158e:	f2c0 80ab 	blt.w	80216e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8021592:	3701      	adds	r7, #1
 8021594:	f100 809c 	bmi.w	80216d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8021598:	42b9      	cmp	r1, r7
 802159a:	f2c0 8099 	blt.w	80216d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 802159e:	3301      	adds	r3, #1
 80215a0:	f100 8096 	bmi.w	80216d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 80215a4:	429a      	cmp	r2, r3
 80215a6:	f2c0 8093 	blt.w	80216d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 80215aa:	9b06      	ldr	r3, [sp, #24]
 80215ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80215ae:	9b07      	ldr	r3, [sp, #28]
 80215b0:	9309      	str	r3, [sp, #36]	; 0x24
 80215b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80215b4:	2b00      	cmp	r3, #0
 80215b6:	f340 80b4 	ble.w	8021722 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 80215ba:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80215bc:	142e      	asrs	r6, r5, #16
 80215be:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80215c0:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80215c4:	68c7      	ldr	r7, [r0, #12]
 80215c6:	ea5f 402b 	movs.w	r0, fp, asr #16
 80215ca:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80215ce:	6892      	ldr	r2, [r2, #8]
 80215d0:	f100 80fb 	bmi.w	80217ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80215d4:	f102 3cff 	add.w	ip, r2, #4294967295
 80215d8:	4560      	cmp	r0, ip
 80215da:	f280 80f6 	bge.w	80217ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80215de:	2e00      	cmp	r6, #0
 80215e0:	f2c0 80f3 	blt.w	80217ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80215e4:	f107 3cff 	add.w	ip, r7, #4294967295
 80215e8:	4566      	cmp	r6, ip
 80215ea:	f280 80ee 	bge.w	80217ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80215ee:	b212      	sxth	r2, r2
 80215f0:	fb06 0002 	mla	r0, r6, r2, r0
 80215f4:	9e08      	ldr	r6, [sp, #32]
 80215f6:	1837      	adds	r7, r6, r0
 80215f8:	5c30      	ldrb	r0, [r6, r0]
 80215fa:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 80215fe:	eb04 0c08 	add.w	ip, r4, r8
 8021602:	2b00      	cmp	r3, #0
 8021604:	f000 80d3 	beq.w	80217ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8021608:	787e      	ldrb	r6, [r7, #1]
 802160a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802160e:	4426      	add	r6, r4
 8021610:	2900      	cmp	r1, #0
 8021612:	f000 80d4 	beq.w	80217be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 8021616:	18b8      	adds	r0, r7, r2
 8021618:	5cba      	ldrb	r2, [r7, r2]
 802161a:	7840      	ldrb	r0, [r0, #1]
 802161c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021620:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021624:	4422      	add	r2, r4
 8021626:	4420      	add	r0, r4
 8021628:	b29b      	uxth	r3, r3
 802162a:	78b7      	ldrb	r7, [r6, #2]
 802162c:	b289      	uxth	r1, r1
 802162e:	f89c a002 	ldrb.w	sl, [ip, #2]
 8021632:	f89c c001 	ldrb.w	ip, [ip, #1]
 8021636:	fb03 f901 	mul.w	r9, r3, r1
 802163a:	011b      	lsls	r3, r3, #4
 802163c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8021640:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8021644:	eba3 0309 	sub.w	r3, r3, r9
 8021648:	b289      	uxth	r1, r1
 802164a:	b29b      	uxth	r3, r3
 802164c:	ebae 0e01 	sub.w	lr, lr, r1
 8021650:	435f      	muls	r7, r3
 8021652:	fa1f fe8e 	uxth.w	lr, lr
 8021656:	fb0e 770a 	mla	r7, lr, sl, r7
 802165a:	f892 a002 	ldrb.w	sl, [r2, #2]
 802165e:	fb01 770a 	mla	r7, r1, sl, r7
 8021662:	f890 a002 	ldrb.w	sl, [r0, #2]
 8021666:	fb09 7a0a 	mla	sl, r9, sl, r7
 802166a:	f814 7008 	ldrb.w	r7, [r4, r8]
 802166e:	f896 8000 	ldrb.w	r8, [r6]
 8021672:	7876      	ldrb	r6, [r6, #1]
 8021674:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8021678:	fb03 f808 	mul.w	r8, r3, r8
 802167c:	4373      	muls	r3, r6
 802167e:	fb0e 8807 	mla	r8, lr, r7, r8
 8021682:	7817      	ldrb	r7, [r2, #0]
 8021684:	fb0e 330c 	mla	r3, lr, ip, r3
 8021688:	fb01 8807 	mla	r8, r1, r7, r8
 802168c:	7807      	ldrb	r7, [r0, #0]
 802168e:	fb09 8707 	mla	r7, r9, r7, r8
 8021692:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8021696:	ea47 070a 	orr.w	r7, r7, sl
 802169a:	f892 a001 	ldrb.w	sl, [r2, #1]
 802169e:	fb01 310a 	mla	r1, r1, sl, r3
 80216a2:	f890 a001 	ldrb.w	sl, [r0, #1]
 80216a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80216a8:	fb09 1a0a 	mla	sl, r9, sl, r1
 80216ac:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80216b0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80216b4:	ea47 070a 	orr.w	r7, r7, sl
 80216b8:	801f      	strh	r7, [r3, #0]
 80216ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80216bc:	3302      	adds	r3, #2
 80216be:	9309      	str	r3, [sp, #36]	; 0x24
 80216c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80216c2:	449b      	add	fp, r3
 80216c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80216c6:	441d      	add	r5, r3
 80216c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80216ca:	3b01      	subs	r3, #1
 80216cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80216ce:	e770      	b.n	80215b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80216d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80216d2:	449b      	add	fp, r3
 80216d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80216d6:	441d      	add	r5, r3
 80216d8:	9b06      	ldr	r3, [sp, #24]
 80216da:	3b01      	subs	r3, #1
 80216dc:	9306      	str	r3, [sp, #24]
 80216de:	9b07      	ldr	r3, [sp, #28]
 80216e0:	3302      	adds	r3, #2
 80216e2:	9307      	str	r3, [sp, #28]
 80216e4:	e745      	b.n	8021572 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80216e6:	d023      	beq.n	8021730 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 80216e8:	9b06      	ldr	r3, [sp, #24]
 80216ea:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80216ec:	3b01      	subs	r3, #1
 80216ee:	fb00 b003 	mla	r0, r0, r3, fp
 80216f2:	1400      	asrs	r0, r0, #16
 80216f4:	f53f af59 	bmi.w	80215aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80216f8:	3901      	subs	r1, #1
 80216fa:	4288      	cmp	r0, r1
 80216fc:	f6bf af55 	bge.w	80215aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8021700:	9924      	ldr	r1, [sp, #144]	; 0x90
 8021702:	fb01 5303 	mla	r3, r1, r3, r5
 8021706:	141b      	asrs	r3, r3, #16
 8021708:	f53f af4f 	bmi.w	80215aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802170c:	3a01      	subs	r2, #1
 802170e:	4293      	cmp	r3, r2
 8021710:	f6bf af4b 	bge.w	80215aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8021714:	9b06      	ldr	r3, [sp, #24]
 8021716:	9309      	str	r3, [sp, #36]	; 0x24
 8021718:	9b07      	ldr	r3, [sp, #28]
 802171a:	930b      	str	r3, [sp, #44]	; 0x2c
 802171c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802171e:	2b00      	cmp	r3, #0
 8021720:	dc70      	bgt.n	8021804 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 8021722:	9b06      	ldr	r3, [sp, #24]
 8021724:	9a07      	ldr	r2, [sp, #28]
 8021726:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802172a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802172e:	9307      	str	r3, [sp, #28]
 8021730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021732:	2b00      	cmp	r3, #0
 8021734:	f340 80eb 	ble.w	802190e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8021738:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802173c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802173e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021742:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021746:	eef0 6a48 	vmov.f32	s13, s16
 802174a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802174e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021752:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021756:	ee16 ba90 	vmov	fp, s13
 802175a:	eef0 6a68 	vmov.f32	s13, s17
 802175e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021762:	ee16 5a90 	vmov	r5, s13
 8021766:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802176a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802176e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021772:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021776:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802177a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802177e:	ee18 2a10 	vmov	r2, s16
 8021782:	eeb0 8a47 	vmov.f32	s16, s14
 8021786:	fb92 f3f3 	sdiv	r3, r2, r3
 802178a:	ee18 2a90 	vmov	r2, s17
 802178e:	9323      	str	r3, [sp, #140]	; 0x8c
 8021790:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021792:	eef0 8a67 	vmov.f32	s17, s15
 8021796:	fb92 f3f3 	sdiv	r3, r2, r3
 802179a:	9324      	str	r3, [sp, #144]	; 0x90
 802179c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802179e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80217a0:	3b01      	subs	r3, #1
 80217a2:	930a      	str	r3, [sp, #40]	; 0x28
 80217a4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80217a6:	bf08      	it	eq
 80217a8:	4613      	moveq	r3, r2
 80217aa:	9306      	str	r3, [sp, #24]
 80217ac:	e6d3      	b.n	8021556 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80217ae:	b149      	cbz	r1, 80217c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c4>
 80217b0:	5cba      	ldrb	r2, [r7, r2]
 80217b2:	4660      	mov	r0, ip
 80217b4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80217b8:	4422      	add	r2, r4
 80217ba:	4666      	mov	r6, ip
 80217bc:	e734      	b.n	8021628 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80217be:	4660      	mov	r0, ip
 80217c0:	4662      	mov	r2, ip
 80217c2:	e731      	b.n	8021628 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80217c4:	4660      	mov	r0, ip
 80217c6:	4662      	mov	r2, ip
 80217c8:	e7f7      	b.n	80217ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80217ca:	f110 0c01 	adds.w	ip, r0, #1
 80217ce:	f53f af74 	bmi.w	80216ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80217d2:	4562      	cmp	r2, ip
 80217d4:	f6ff af71 	blt.w	80216ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80217d8:	f116 0c01 	adds.w	ip, r6, #1
 80217dc:	f53f af6d 	bmi.w	80216ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80217e0:	4567      	cmp	r7, ip
 80217e2:	f6ff af6a 	blt.w	80216ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80217e6:	b23f      	sxth	r7, r7
 80217e8:	b212      	sxth	r2, r2
 80217ea:	9701      	str	r7, [sp, #4]
 80217ec:	9200      	str	r2, [sp, #0]
 80217ee:	e9cd 3104 	strd	r3, r1, [sp, #16]
 80217f2:	e9cd 0602 	strd	r0, r6, [sp, #8]
 80217f6:	4623      	mov	r3, r4
 80217f8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80217fa:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 80217fe:	f7ff fdc3 	bl	8021388 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8021802:	e75a      	b.n	80216ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8021804:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8021806:	ea4f 462b 	mov.w	r6, fp, asr #16
 802180a:	1428      	asrs	r0, r5, #16
 802180c:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8021810:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8021814:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8021818:	fb02 6000 	mla	r0, r2, r0, r6
 802181c:	9e08      	ldr	r6, [sp, #32]
 802181e:	f816 8000 	ldrb.w	r8, [r6, r0]
 8021822:	1837      	adds	r7, r6, r0
 8021824:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8021828:	eb04 0c08 	add.w	ip, r4, r8
 802182c:	2b00      	cmp	r3, #0
 802182e:	d060      	beq.n	80218f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8021830:	787e      	ldrb	r6, [r7, #1]
 8021832:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8021836:	4426      	add	r6, r4
 8021838:	2900      	cmp	r1, #0
 802183a:	d062      	beq.n	8021902 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x402>
 802183c:	18b8      	adds	r0, r7, r2
 802183e:	5cba      	ldrb	r2, [r7, r2]
 8021840:	7840      	ldrb	r0, [r0, #1]
 8021842:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021846:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802184a:	4422      	add	r2, r4
 802184c:	4420      	add	r0, r4
 802184e:	b29b      	uxth	r3, r3
 8021850:	78b7      	ldrb	r7, [r6, #2]
 8021852:	b289      	uxth	r1, r1
 8021854:	f89c a002 	ldrb.w	sl, [ip, #2]
 8021858:	f89c c001 	ldrb.w	ip, [ip, #1]
 802185c:	fb03 f901 	mul.w	r9, r3, r1
 8021860:	011b      	lsls	r3, r3, #4
 8021862:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8021866:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802186a:	eba3 0309 	sub.w	r3, r3, r9
 802186e:	b289      	uxth	r1, r1
 8021870:	b29b      	uxth	r3, r3
 8021872:	ebae 0e01 	sub.w	lr, lr, r1
 8021876:	435f      	muls	r7, r3
 8021878:	fa1f fe8e 	uxth.w	lr, lr
 802187c:	fb0e 770a 	mla	r7, lr, sl, r7
 8021880:	f892 a002 	ldrb.w	sl, [r2, #2]
 8021884:	fb01 770a 	mla	r7, r1, sl, r7
 8021888:	f890 a002 	ldrb.w	sl, [r0, #2]
 802188c:	fb09 7a0a 	mla	sl, r9, sl, r7
 8021890:	f814 7008 	ldrb.w	r7, [r4, r8]
 8021894:	f896 8000 	ldrb.w	r8, [r6]
 8021898:	7876      	ldrb	r6, [r6, #1]
 802189a:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 802189e:	fb03 f808 	mul.w	r8, r3, r8
 80218a2:	4373      	muls	r3, r6
 80218a4:	7856      	ldrb	r6, [r2, #1]
 80218a6:	fb0e 8807 	mla	r8, lr, r7, r8
 80218aa:	7817      	ldrb	r7, [r2, #0]
 80218ac:	fb0e 330c 	mla	r3, lr, ip, r3
 80218b0:	fb01 8807 	mla	r8, r1, r7, r8
 80218b4:	7807      	ldrb	r7, [r0, #0]
 80218b6:	fb01 3306 	mla	r3, r1, r6, r3
 80218ba:	fb09 8707 	mla	r7, r9, r7, r8
 80218be:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80218c2:	ea47 070a 	orr.w	r7, r7, sl
 80218c6:	f890 a001 	ldrb.w	sl, [r0, #1]
 80218ca:	fb09 3a0a 	mla	sl, r9, sl, r3
 80218ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80218d0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80218d4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80218d8:	ea47 070a 	orr.w	r7, r7, sl
 80218dc:	f823 7b02 	strh.w	r7, [r3], #2
 80218e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80218e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80218e4:	449b      	add	fp, r3
 80218e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80218e8:	441d      	add	r5, r3
 80218ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80218ec:	3b01      	subs	r3, #1
 80218ee:	9309      	str	r3, [sp, #36]	; 0x24
 80218f0:	e714      	b.n	802171c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21c>
 80218f2:	b149      	cbz	r1, 8021908 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x408>
 80218f4:	5cba      	ldrb	r2, [r7, r2]
 80218f6:	4660      	mov	r0, ip
 80218f8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80218fc:	4422      	add	r2, r4
 80218fe:	4666      	mov	r6, ip
 8021900:	e7a5      	b.n	802184e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8021902:	4660      	mov	r0, ip
 8021904:	4662      	mov	r2, ip
 8021906:	e7a2      	b.n	802184e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8021908:	4660      	mov	r0, ip
 802190a:	4662      	mov	r2, ip
 802190c:	e7f7      	b.n	80218fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
 802190e:	b00f      	add	sp, #60	; 0x3c
 8021910:	ecbd 8b08 	vpop	{d8-d11}
 8021914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021918 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8021918:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802191c:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
 8021920:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8021924:	2c00      	cmp	r4, #0
 8021926:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 802192a:	fb04 560c 	mla	r6, r4, ip, r5
 802192e:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8021932:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8021936:	eb02 0e06 	add.w	lr, r2, r6
 802193a:	db3d      	blt.n	80219b8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 802193c:	45a0      	cmp	r8, r4
 802193e:	dd3b      	ble.n	80219b8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 8021940:	2d00      	cmp	r5, #0
 8021942:	db37      	blt.n	80219b4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 8021944:	45ac      	cmp	ip, r5
 8021946:	dd35      	ble.n	80219b4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 8021948:	5d92      	ldrb	r2, [r2, r6]
 802194a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802194e:	1c6e      	adds	r6, r5, #1
 8021950:	d435      	bmi.n	80219be <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 8021952:	45b4      	cmp	ip, r6
 8021954:	dd33      	ble.n	80219be <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 8021956:	b3a0      	cbz	r0, 80219c2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xaa>
 8021958:	f89e 6001 	ldrb.w	r6, [lr, #1]
 802195c:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8021960:	3401      	adds	r4, #1
 8021962:	d432      	bmi.n	80219ca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 8021964:	45a0      	cmp	r8, r4
 8021966:	dd30      	ble.n	80219ca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 8021968:	b397      	cbz	r7, 80219d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb8>
 802196a:	2d00      	cmp	r5, #0
 802196c:	db2b      	blt.n	80219c6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 802196e:	45ac      	cmp	ip, r5
 8021970:	dd29      	ble.n	80219c6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 8021972:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8021976:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 802197a:	3501      	adds	r5, #1
 802197c:	d42b      	bmi.n	80219d6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 802197e:	45ac      	cmp	ip, r5
 8021980:	dd29      	ble.n	80219d6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 8021982:	b350      	cbz	r0, 80219da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 8021984:	44f4      	add	ip, lr
 8021986:	f89c 5001 	ldrb.w	r5, [ip, #1]
 802198a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 802198e:	280f      	cmp	r0, #15
 8021990:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8021994:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8021998:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802199c:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80219a0:	d801      	bhi.n	80219a6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x8e>
 80219a2:	2f0f      	cmp	r7, #15
 80219a4:	d91b      	bls.n	80219de <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc6>
 80219a6:	4b8d      	ldr	r3, [pc, #564]	; (8021bdc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c4>)
 80219a8:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80219ac:	4a8c      	ldr	r2, [pc, #560]	; (8021be0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c8>)
 80219ae:	488d      	ldr	r0, [pc, #564]	; (8021be4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2cc>)
 80219b0:	f005 fd28 	bl	8027404 <__assert_func>
 80219b4:	2200      	movs	r2, #0
 80219b6:	e7ca      	b.n	802194e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x36>
 80219b8:	2600      	movs	r6, #0
 80219ba:	4632      	mov	r2, r6
 80219bc:	e7d0      	b.n	8021960 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 80219be:	2600      	movs	r6, #0
 80219c0:	e7ce      	b.n	8021960 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 80219c2:	4606      	mov	r6, r0
 80219c4:	e7cc      	b.n	8021960 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 80219c6:	2400      	movs	r4, #0
 80219c8:	e7d7      	b.n	802197a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x62>
 80219ca:	2300      	movs	r3, #0
 80219cc:	461c      	mov	r4, r3
 80219ce:	e7de      	b.n	802198e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 80219d0:	463b      	mov	r3, r7
 80219d2:	463c      	mov	r4, r7
 80219d4:	e7db      	b.n	802198e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 80219d6:	2300      	movs	r3, #0
 80219d8:	e7d9      	b.n	802198e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 80219da:	4603      	mov	r3, r0
 80219dc:	e7d7      	b.n	802198e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 80219de:	b280      	uxth	r0, r0
 80219e0:	b2bf      	uxth	r7, r7
 80219e2:	fb07 fe00 	mul.w	lr, r7, r0
 80219e6:	0100      	lsls	r0, r0, #4
 80219e8:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80219ec:	eba0 0c0e 	sub.w	ip, r0, lr
 80219f0:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 80219f4:	b2bf      	uxth	r7, r7
 80219f6:	fa1f fc8c 	uxth.w	ip, ip
 80219fa:	1bed      	subs	r5, r5, r7
 80219fc:	fb0a f00c 	mul.w	r0, sl, ip
 8021a00:	b2ad      	uxth	r5, r5
 8021a02:	fb0b 0005 	mla	r0, fp, r5, r0
 8021a06:	fb07 0009 	mla	r0, r7, r9, r0
 8021a0a:	fb0e 0008 	mla	r0, lr, r8, r0
 8021a0e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021a12:	9001      	str	r0, [sp, #4]
 8021a14:	2800      	cmp	r0, #0
 8021a16:	f000 80de 	beq.w	8021bd6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2be>
 8021a1a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8021a1e:	d018      	beq.n	8021a52 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x13a>
 8021a20:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8021a24:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021a28:	fb0b f000 	mul.w	r0, fp, r0
 8021a2c:	fb0b fb02 	mul.w	fp, fp, r2
 8021a30:	0a02      	lsrs	r2, r0, #8
 8021a32:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8021a36:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021a3a:	4402      	add	r2, r0
 8021a3c:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8021a40:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8021a44:	0a12      	lsrs	r2, r2, #8
 8021a46:	0a00      	lsrs	r0, r0, #8
 8021a48:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021a4c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021a50:	4302      	orrs	r2, r0
 8021a52:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021a56:	d01a      	beq.n	8021a8e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x176>
 8021a58:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8021a5c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021a60:	fb0a f000 	mul.w	r0, sl, r0
 8021a64:	fb0a fa06 	mul.w	sl, sl, r6
 8021a68:	0a06      	lsrs	r6, r0, #8
 8021a6a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8021a6e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021a72:	4406      	add	r6, r0
 8021a74:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8021a78:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8021a7c:	0a36      	lsrs	r6, r6, #8
 8021a7e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021a82:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021a86:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021a8a:	ea46 060a 	orr.w	r6, r6, sl
 8021a8e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021a92:	d01b      	beq.n	8021acc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1b4>
 8021a94:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8021a98:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021a9c:	fb09 fa0a 	mul.w	sl, r9, sl
 8021aa0:	fb09 f004 	mul.w	r0, r9, r4
 8021aa4:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8021aa8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021aac:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8021ab0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021ab4:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8021ab8:	4454      	add	r4, sl
 8021aba:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021abe:	0a24      	lsrs	r4, r4, #8
 8021ac0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021ac4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021ac8:	ea44 0409 	orr.w	r4, r4, r9
 8021acc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021ad0:	d01b      	beq.n	8021b0a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1f2>
 8021ad2:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8021ad6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021ada:	fb08 f909 	mul.w	r9, r8, r9
 8021ade:	fb08 f003 	mul.w	r0, r8, r3
 8021ae2:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8021ae6:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8021aea:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8021aee:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021af2:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8021af6:	444b      	add	r3, r9
 8021af8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8021afc:	0a1b      	lsrs	r3, r3, #8
 8021afe:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8021b02:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021b06:	ea43 0308 	orr.w	r3, r3, r8
 8021b0a:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8021b0e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021b12:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 8021b16:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021b1a:	fb0c f808 	mul.w	r8, ip, r8
 8021b1e:	8808      	ldrh	r0, [r1, #0]
 8021b20:	fb0c f606 	mul.w	r6, ip, r6
 8021b24:	fb05 8909 	mla	r9, r5, r9, r8
 8021b28:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8021b2c:	fb05 6502 	mla	r5, r5, r2, r6
 8021b30:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021b34:	fb07 9908 	mla	r9, r7, r8, r9
 8021b38:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 8021b3c:	fb07 5704 	mla	r7, r7, r4, r5
 8021b40:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8021b44:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021b48:	b2b6      	uxth	r6, r6
 8021b4a:	fb0e 9808 	mla	r8, lr, r8, r9
 8021b4e:	9a01      	ldr	r2, [sp, #4]
 8021b50:	fb0e 7e03 	mla	lr, lr, r3, r7
 8021b54:	1205      	asrs	r5, r0, #8
 8021b56:	4372      	muls	r2, r6
 8021b58:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8021b5c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021b60:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8021b64:	1c53      	adds	r3, r2, #1
 8021b66:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8021b6a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021b6e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021b72:	ea48 0e0e 	orr.w	lr, r8, lr
 8021b76:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8021b7a:	ea4f 421e 	mov.w	r2, lr, lsr #16
 8021b7e:	f3ce 2407 	ubfx	r4, lr, #8, #8
 8021b82:	b2db      	uxtb	r3, r3
 8021b84:	fb12 f206 	smulbb	r2, r2, r6
 8021b88:	fa5f fe8e 	uxtb.w	lr, lr
 8021b8c:	fb14 f406 	smulbb	r4, r4, r6
 8021b90:	fb05 2503 	mla	r5, r5, r3, r2
 8021b94:	10c2      	asrs	r2, r0, #3
 8021b96:	fb1e fe06 	smulbb	lr, lr, r6
 8021b9a:	00c0      	lsls	r0, r0, #3
 8021b9c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8021ba0:	b2ad      	uxth	r5, r5
 8021ba2:	b2c0      	uxtb	r0, r0
 8021ba4:	fb02 4203 	mla	r2, r2, r3, r4
 8021ba8:	fb00 e303 	mla	r3, r0, r3, lr
 8021bac:	b294      	uxth	r4, r2
 8021bae:	b298      	uxth	r0, r3
 8021bb0:	1c6b      	adds	r3, r5, #1
 8021bb2:	1c62      	adds	r2, r4, #1
 8021bb4:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8021bb8:	1c43      	adds	r3, r0, #1
 8021bba:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8021bbe:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8021bc2:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8021bc6:	0952      	lsrs	r2, r2, #5
 8021bc8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8021bcc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021bd0:	432b      	orrs	r3, r5
 8021bd2:	4313      	orrs	r3, r2
 8021bd4:	800b      	strh	r3, [r1, #0]
 8021bd6:	b003      	add	sp, #12
 8021bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021bdc:	0802e3b6 	.word	0x0802e3b6
 8021be0:	0802e986 	.word	0x0802e986
 8021be4:	0802e43a 	.word	0x0802e43a

08021be8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021bec:	ed2d 8b08 	vpush	{d8-d11}
 8021bf0:	b09f      	sub	sp, #124	; 0x7c
 8021bf2:	eeb0 aa40 	vmov.f32	s20, s0
 8021bf6:	eef0 9a60 	vmov.f32	s19, s1
 8021bfa:	921b      	str	r2, [sp, #108]	; 0x6c
 8021bfc:	eeb0 9a41 	vmov.f32	s18, s2
 8021c00:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8021c02:	eeb0 8a62 	vmov.f32	s16, s5
 8021c06:	9309      	str	r3, [sp, #36]	; 0x24
 8021c08:	eef0 8a43 	vmov.f32	s17, s6
 8021c0c:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8021c10:	eef0 ba44 	vmov.f32	s23, s8
 8021c14:	901d      	str	r0, [sp, #116]	; 0x74
 8021c16:	eeb0 ba64 	vmov.f32	s22, s9
 8021c1a:	931c      	str	r3, [sp, #112]	; 0x70
 8021c1c:	eef0 aa45 	vmov.f32	s21, s10
 8021c20:	6850      	ldr	r0, [r2, #4]
 8021c22:	9119      	str	r1, [sp, #100]	; 0x64
 8021c24:	6812      	ldr	r2, [r2, #0]
 8021c26:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 8021c28:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8021c2c:	fb00 1303 	mla	r3, r0, r3, r1
 8021c30:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021c34:	930c      	str	r3, [sp, #48]	; 0x30
 8021c36:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8021c38:	681b      	ldr	r3, [r3, #0]
 8021c3a:	9312      	str	r3, [sp, #72]	; 0x48
 8021c3c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8021c3e:	685e      	ldr	r6, [r3, #4]
 8021c40:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8021c44:	3604      	adds	r6, #4
 8021c46:	930d      	str	r3, [sp, #52]	; 0x34
 8021c48:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8021c4a:	2b00      	cmp	r3, #0
 8021c4c:	dc03      	bgt.n	8021c56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8021c4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8021c50:	2b00      	cmp	r3, #0
 8021c52:	f340 8387 	ble.w	8022364 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>
 8021c56:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8021c58:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021c5c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021c60:	1e48      	subs	r0, r1, #1
 8021c62:	1e57      	subs	r7, r2, #1
 8021c64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021c66:	2b00      	cmp	r3, #0
 8021c68:	f340 8194 	ble.w	8021f94 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ac>
 8021c6c:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8021c6e:	142b      	asrs	r3, r5, #16
 8021c70:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8021c74:	d406      	bmi.n	8021c84 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8021c76:	4584      	cmp	ip, r0
 8021c78:	da04      	bge.n	8021c84 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8021c7a:	2b00      	cmp	r3, #0
 8021c7c:	db02      	blt.n	8021c84 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8021c7e:	42bb      	cmp	r3, r7
 8021c80:	f2c0 8189 	blt.w	8021f96 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8021c84:	f11c 0c01 	adds.w	ip, ip, #1
 8021c88:	f100 8177 	bmi.w	8021f7a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8021c8c:	4561      	cmp	r1, ip
 8021c8e:	f2c0 8174 	blt.w	8021f7a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8021c92:	3301      	adds	r3, #1
 8021c94:	f100 8171 	bmi.w	8021f7a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8021c98:	429a      	cmp	r2, r3
 8021c9a:	f2c0 816e 	blt.w	8021f7a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8021c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021ca0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8021ca2:	931a      	str	r3, [sp, #104]	; 0x68
 8021ca4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8021ca6:	2b00      	cmp	r3, #0
 8021ca8:	f340 8193 	ble.w	8021fd2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8021cac:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8021cae:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8021cb2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8021cb6:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021cba:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8021cbc:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8021cc0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8021cc2:	141b      	asrs	r3, r3, #16
 8021cc4:	f100 81d6 	bmi.w	8022074 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8021cc8:	f100 38ff 	add.w	r8, r0, #4294967295
 8021ccc:	4543      	cmp	r3, r8
 8021cce:	f280 81d1 	bge.w	8022074 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8021cd2:	f1bc 0f00 	cmp.w	ip, #0
 8021cd6:	f2c0 81cd 	blt.w	8022074 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8021cda:	f10e 38ff 	add.w	r8, lr, #4294967295
 8021cde:	45c4      	cmp	ip, r8
 8021ce0:	f280 81c8 	bge.w	8022074 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8021ce4:	b200      	sxth	r0, r0
 8021ce6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021ce8:	fb0c 3300 	mla	r3, ip, r0, r3
 8021cec:	eb04 0803 	add.w	r8, r4, r3
 8021cf0:	5ce3      	ldrb	r3, [r4, r3]
 8021cf2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021cf6:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8021cfa:	2a00      	cmp	r2, #0
 8021cfc:	f000 81af 	beq.w	802205e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8021d00:	f898 c001 	ldrb.w	ip, [r8, #1]
 8021d04:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8021d08:	940e      	str	r4, [sp, #56]	; 0x38
 8021d0a:	0e24      	lsrs	r4, r4, #24
 8021d0c:	9415      	str	r4, [sp, #84]	; 0x54
 8021d0e:	b179      	cbz	r1, 8021d30 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8021d10:	eb08 0c00 	add.w	ip, r8, r0
 8021d14:	f818 0000 	ldrb.w	r0, [r8, r0]
 8021d18:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8021d1c:	900a      	str	r0, [sp, #40]	; 0x28
 8021d1e:	0e00      	lsrs	r0, r0, #24
 8021d20:	9013      	str	r0, [sp, #76]	; 0x4c
 8021d22:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8021d26:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8021d2a:	900f      	str	r0, [sp, #60]	; 0x3c
 8021d2c:	0e00      	lsrs	r0, r0, #24
 8021d2e:	9016      	str	r0, [sp, #88]	; 0x58
 8021d30:	b292      	uxth	r2, r2
 8021d32:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021d34:	b289      	uxth	r1, r1
 8021d36:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021d38:	fb02 f901 	mul.w	r9, r2, r1
 8021d3c:	0112      	lsls	r2, r2, #4
 8021d3e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8021d42:	eba2 0809 	sub.w	r8, r2, r9
 8021d46:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8021d4a:	b289      	uxth	r1, r1
 8021d4c:	fa1f f888 	uxth.w	r8, r8
 8021d50:	1a52      	subs	r2, r2, r1
 8021d52:	fb08 f000 	mul.w	r0, r8, r0
 8021d56:	b292      	uxth	r2, r2
 8021d58:	fb02 000e 	mla	r0, r2, lr, r0
 8021d5c:	fb01 0004 	mla	r0, r1, r4, r0
 8021d60:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021d62:	fb09 0004 	mla	r0, r9, r4, r0
 8021d66:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021d6a:	2800      	cmp	r0, #0
 8021d6c:	f000 80fa 	beq.w	8021f64 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8021d70:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8021d74:	d01b      	beq.n	8021dae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8021d76:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8021d7a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021d7e:	fb0e fa0a 	mul.w	sl, lr, sl
 8021d82:	fb0e fe03 	mul.w	lr, lr, r3
 8021d86:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021d8a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021d8e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8021d92:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021d96:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8021d9a:	4453      	add	r3, sl
 8021d9c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021da0:	0a1b      	lsrs	r3, r3, #8
 8021da2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021da6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021daa:	ea43 030c 	orr.w	r3, r3, ip
 8021dae:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021db0:	2cff      	cmp	r4, #255	; 0xff
 8021db2:	d021      	beq.n	8021df8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8021db4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021db6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021dba:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021dbc:	fb04 fb0b 	mul.w	fp, r4, fp
 8021dc0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021dc2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021dc6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021dc8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021dcc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021dd0:	fb04 fa0a 	mul.w	sl, r4, sl
 8021dd4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021dd8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021ddc:	44de      	add	lr, fp
 8021dde:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021de2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021de6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021dea:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021dee:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021df2:	ea4e 040a 	orr.w	r4, lr, sl
 8021df6:	940e      	str	r4, [sp, #56]	; 0x38
 8021df8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021dfa:	2cff      	cmp	r4, #255	; 0xff
 8021dfc:	d021      	beq.n	8021e42 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8021dfe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021e00:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021e04:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021e06:	fb04 fb0b 	mul.w	fp, r4, fp
 8021e0a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021e0c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021e10:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021e12:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021e16:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021e1a:	fb04 fa0a 	mul.w	sl, r4, sl
 8021e1e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021e22:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021e26:	44de      	add	lr, fp
 8021e28:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021e2c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021e30:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021e34:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021e38:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021e3c:	ea4e 040a 	orr.w	r4, lr, sl
 8021e40:	940a      	str	r4, [sp, #40]	; 0x28
 8021e42:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021e44:	2cff      	cmp	r4, #255	; 0xff
 8021e46:	d021      	beq.n	8021e8c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8021e48:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021e4a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021e4e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021e50:	fb04 fb0b 	mul.w	fp, r4, fp
 8021e54:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021e56:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021e5a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021e5c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021e60:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021e64:	fb04 fa0a 	mul.w	sl, r4, sl
 8021e68:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021e6c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021e70:	44de      	add	lr, fp
 8021e72:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021e76:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021e7a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021e7e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021e82:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021e86:	ea4e 040a 	orr.w	r4, lr, sl
 8021e8a:	940f      	str	r4, [sp, #60]	; 0x3c
 8021e8c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021e8e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8021e92:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021e96:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021e9a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021e9c:	fb08 fc0c 	mul.w	ip, r8, ip
 8021ea0:	fb02 cc0e 	mla	ip, r2, lr, ip
 8021ea4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021ea8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021eaa:	fb01 cc0e 	mla	ip, r1, lr, ip
 8021eae:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021eb2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021eb4:	fb09 cc0e 	mla	ip, r9, lr, ip
 8021eb8:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8021ebc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021ebe:	fb08 f80e 	mul.w	r8, r8, lr
 8021ec2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021ec6:	fb02 8303 	mla	r3, r2, r3, r8
 8021eca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021ecc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021ed0:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8021ed4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021ed6:	fb01 330a 	mla	r3, r1, sl, r3
 8021eda:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8021ede:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021ee0:	fb09 3901 	mla	r9, r9, r1, r3
 8021ee4:	883b      	ldrh	r3, [r7, #0]
 8021ee6:	4342      	muls	r2, r0
 8021ee8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021eec:	1c50      	adds	r0, r2, #1
 8021eee:	1219      	asrs	r1, r3, #8
 8021ef0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021ef4:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8021ef8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8021efc:	ea4c 0c09 	orr.w	ip, ip, r9
 8021f00:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8021f04:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8021f08:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8021f0c:	b2c0      	uxtb	r0, r0
 8021f0e:	fb12 f204 	smulbb	r2, r2, r4
 8021f12:	fa5f fc8c 	uxtb.w	ip, ip
 8021f16:	fb1e fe04 	smulbb	lr, lr, r4
 8021f1a:	fb01 2100 	mla	r1, r1, r0, r2
 8021f1e:	10da      	asrs	r2, r3, #3
 8021f20:	fb1c fc04 	smulbb	ip, ip, r4
 8021f24:	00db      	lsls	r3, r3, #3
 8021f26:	b289      	uxth	r1, r1
 8021f28:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8021f2c:	b2db      	uxtb	r3, r3
 8021f2e:	fb02 e200 	mla	r2, r2, r0, lr
 8021f32:	fb03 c300 	mla	r3, r3, r0, ip
 8021f36:	b292      	uxth	r2, r2
 8021f38:	fa1f fc83 	uxth.w	ip, r3
 8021f3c:	1c4b      	adds	r3, r1, #1
 8021f3e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8021f42:	f10c 0301 	add.w	r3, ip, #1
 8021f46:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8021f4a:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8021f4e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8021f52:	430b      	orrs	r3, r1
 8021f54:	1c51      	adds	r1, r2, #1
 8021f56:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8021f5a:	0952      	lsrs	r2, r2, #5
 8021f5c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021f60:	4313      	orrs	r3, r2
 8021f62:	803b      	strh	r3, [r7, #0]
 8021f64:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021f66:	3702      	adds	r7, #2
 8021f68:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8021f6a:	441a      	add	r2, r3
 8021f6c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021f6e:	441d      	add	r5, r3
 8021f70:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8021f72:	9231      	str	r2, [sp, #196]	; 0xc4
 8021f74:	3b01      	subs	r3, #1
 8021f76:	931a      	str	r3, [sp, #104]	; 0x68
 8021f78:	e694      	b.n	8021ca4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 8021f7a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021f7c:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8021f7e:	441c      	add	r4, r3
 8021f80:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021f82:	441d      	add	r5, r3
 8021f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021f86:	9431      	str	r4, [sp, #196]	; 0xc4
 8021f88:	3b01      	subs	r3, #1
 8021f8a:	9309      	str	r3, [sp, #36]	; 0x24
 8021f8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021f8e:	3302      	adds	r3, #2
 8021f90:	930c      	str	r3, [sp, #48]	; 0x30
 8021f92:	e667      	b.n	8021c64 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8021f94:	d024      	beq.n	8021fe0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8021f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021f98:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8021f9a:	3b01      	subs	r3, #1
 8021f9c:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8021f9e:	fb00 4003 	mla	r0, r0, r3, r4
 8021fa2:	1400      	asrs	r0, r0, #16
 8021fa4:	f53f ae7b 	bmi.w	8021c9e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8021fa8:	3901      	subs	r1, #1
 8021faa:	4288      	cmp	r0, r1
 8021fac:	f6bf ae77 	bge.w	8021c9e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8021fb0:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8021fb2:	fb01 5303 	mla	r3, r1, r3, r5
 8021fb6:	141b      	asrs	r3, r3, #16
 8021fb8:	f53f ae71 	bmi.w	8021c9e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8021fbc:	3a01      	subs	r2, #1
 8021fbe:	4293      	cmp	r3, r2
 8021fc0:	f6bf ae6d 	bge.w	8021c9e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8021fc4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8021fc8:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8021fcc:	f1bb 0f00 	cmp.w	fp, #0
 8021fd0:	dc70      	bgt.n	80220b4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>
 8021fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021fd4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021fd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021fda:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8021fde:	930c      	str	r3, [sp, #48]	; 0x30
 8021fe0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8021fe2:	2b00      	cmp	r3, #0
 8021fe4:	f340 81be 	ble.w	8022364 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>
 8021fe8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021fec:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021fee:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021ff2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021ff6:	eef0 6a48 	vmov.f32	s13, s16
 8021ffa:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021ffe:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022002:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022006:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 802200a:	eef0 6a68 	vmov.f32	s13, s17
 802200e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022012:	ee16 5a90 	vmov	r5, s13
 8022016:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802201a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802201e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022022:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022026:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802202a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802202e:	ee18 2a10 	vmov	r2, s16
 8022032:	eeb0 8a47 	vmov.f32	s16, s14
 8022036:	fb92 f3f3 	sdiv	r3, r2, r3
 802203a:	ee18 2a90 	vmov	r2, s17
 802203e:	9333      	str	r3, [sp, #204]	; 0xcc
 8022040:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022042:	eef0 8a67 	vmov.f32	s17, s15
 8022046:	fb92 f3f3 	sdiv	r3, r2, r3
 802204a:	9334      	str	r3, [sp, #208]	; 0xd0
 802204c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802204e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8022050:	3b01      	subs	r3, #1
 8022052:	9319      	str	r3, [sp, #100]	; 0x64
 8022054:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022056:	bf08      	it	eq
 8022058:	4613      	moveq	r3, r2
 802205a:	9309      	str	r3, [sp, #36]	; 0x24
 802205c:	e5f4      	b.n	8021c48 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 802205e:	2900      	cmp	r1, #0
 8022060:	f43f ae66 	beq.w	8021d30 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8022064:	f818 0000 	ldrb.w	r0, [r8, r0]
 8022068:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 802206c:	900a      	str	r0, [sp, #40]	; 0x28
 802206e:	0e00      	lsrs	r0, r0, #24
 8022070:	9013      	str	r0, [sp, #76]	; 0x4c
 8022072:	e65d      	b.n	8021d30 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8022074:	f113 0801 	adds.w	r8, r3, #1
 8022078:	f53f af74 	bmi.w	8021f64 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 802207c:	4540      	cmp	r0, r8
 802207e:	f6ff af71 	blt.w	8021f64 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8022082:	f11c 0801 	adds.w	r8, ip, #1
 8022086:	f53f af6d 	bmi.w	8021f64 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 802208a:	45c6      	cmp	lr, r8
 802208c:	f6ff af6a 	blt.w	8021f64 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8022090:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8022092:	b200      	sxth	r0, r0
 8022094:	9302      	str	r3, [sp, #8]
 8022096:	fa0f f38e 	sxth.w	r3, lr
 802209a:	9000      	str	r0, [sp, #0]
 802209c:	9301      	str	r3, [sp, #4]
 802209e:	4633      	mov	r3, r6
 80220a0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80220a2:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80220a6:	e9cd c203 	strd	ip, r2, [sp, #12]
 80220aa:	4639      	mov	r1, r7
 80220ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80220ae:	f7ff fc33 	bl	8021918 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 80220b2:	e757      	b.n	8021f64 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80220b4:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80220b6:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80220ba:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80220bc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80220c0:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80220c2:	1427      	asrs	r7, r4, #16
 80220c4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80220c6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80220ca:	142b      	asrs	r3, r5, #16
 80220cc:	fb01 7303 	mla	r3, r1, r3, r7
 80220d0:	18e7      	adds	r7, r4, r3
 80220d2:	5ce3      	ldrb	r3, [r4, r3]
 80220d4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80220d8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80220dc:	2a00      	cmp	r2, #0
 80220de:	f000 8137 	beq.w	8022350 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x768>
 80220e2:	f897 e001 	ldrb.w	lr, [r7, #1]
 80220e6:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 80220ea:	9410      	str	r4, [sp, #64]	; 0x40
 80220ec:	0e24      	lsrs	r4, r4, #24
 80220ee:	9417      	str	r4, [sp, #92]	; 0x5c
 80220f0:	b170      	cbz	r0, 8022110 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 80220f2:	eb07 0e01 	add.w	lr, r7, r1
 80220f6:	5c79      	ldrb	r1, [r7, r1]
 80220f8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80220fc:	910b      	str	r1, [sp, #44]	; 0x2c
 80220fe:	0e09      	lsrs	r1, r1, #24
 8022100:	9114      	str	r1, [sp, #80]	; 0x50
 8022102:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8022106:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802210a:	9111      	str	r1, [sp, #68]	; 0x44
 802210c:	0e09      	lsrs	r1, r1, #24
 802210e:	9118      	str	r1, [sp, #96]	; 0x60
 8022110:	b292      	uxth	r2, r2
 8022112:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8022114:	b280      	uxth	r0, r0
 8022116:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022118:	fb02 f800 	mul.w	r8, r2, r0
 802211c:	0112      	lsls	r2, r2, #4
 802211e:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8022122:	eba2 0e08 	sub.w	lr, r2, r8
 8022126:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802212a:	b280      	uxth	r0, r0
 802212c:	fa1f fe8e 	uxth.w	lr, lr
 8022130:	1a12      	subs	r2, r2, r0
 8022132:	fb0e f101 	mul.w	r1, lr, r1
 8022136:	b292      	uxth	r2, r2
 8022138:	fb02 110c 	mla	r1, r2, ip, r1
 802213c:	fb00 1104 	mla	r1, r0, r4, r1
 8022140:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8022142:	fb08 1104 	mla	r1, r8, r4, r1
 8022146:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802214a:	2900      	cmp	r1, #0
 802214c:	f000 80f5 	beq.w	802233a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x752>
 8022150:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8022154:	d019      	beq.n	802218a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a2>
 8022156:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802215a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802215e:	fb0c fa0a 	mul.w	sl, ip, sl
 8022162:	fb0c fc03 	mul.w	ip, ip, r3
 8022166:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802216a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802216e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8022172:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022176:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802217a:	4453      	add	r3, sl
 802217c:	0a3f      	lsrs	r7, r7, #8
 802217e:	0a1b      	lsrs	r3, r3, #8
 8022180:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022184:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022188:	433b      	orrs	r3, r7
 802218a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 802218c:	2cff      	cmp	r4, #255	; 0xff
 802218e:	d020      	beq.n	80221d2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ea>
 8022190:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022192:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022196:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8022198:	4367      	muls	r7, r4
 802219a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802219c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80221a0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80221a4:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80221a6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80221aa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80221ae:	fb04 fa0a 	mul.w	sl, r4, sl
 80221b2:	44bc      	add	ip, r7
 80221b4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80221b8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80221bc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80221c0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80221c4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80221c8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80221cc:	ea4c 040a 	orr.w	r4, ip, sl
 80221d0:	9410      	str	r4, [sp, #64]	; 0x40
 80221d2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80221d4:	2cff      	cmp	r4, #255	; 0xff
 80221d6:	d020      	beq.n	802221a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x632>
 80221d8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80221da:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80221de:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80221e0:	4367      	muls	r7, r4
 80221e2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80221e4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80221e8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80221ec:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80221ee:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80221f2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80221f6:	fb04 fa0a 	mul.w	sl, r4, sl
 80221fa:	44bc      	add	ip, r7
 80221fc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022200:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022204:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022208:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802220c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022210:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022214:	ea4c 040a 	orr.w	r4, ip, sl
 8022218:	940b      	str	r4, [sp, #44]	; 0x2c
 802221a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 802221c:	2cff      	cmp	r4, #255	; 0xff
 802221e:	d020      	beq.n	8022262 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x67a>
 8022220:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022222:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022226:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8022228:	4367      	muls	r7, r4
 802222a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802222c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022230:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022234:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8022236:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802223a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802223e:	fb04 fa0a 	mul.w	sl, r4, sl
 8022242:	44bc      	add	ip, r7
 8022244:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022248:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802224c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022250:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022254:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022258:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802225c:	ea4c 040a 	orr.w	r4, ip, sl
 8022260:	9411      	str	r4, [sp, #68]	; 0x44
 8022262:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022264:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022268:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802226c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022270:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022272:	fb0e f707 	mul.w	r7, lr, r7
 8022276:	fb02 770c 	mla	r7, r2, ip, r7
 802227a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802227e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022280:	fb00 770c 	mla	r7, r0, ip, r7
 8022284:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022288:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802228a:	fb08 770c 	mla	r7, r8, ip, r7
 802228e:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8022292:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022294:	fb0e fe0c 	mul.w	lr, lr, ip
 8022298:	0a3f      	lsrs	r7, r7, #8
 802229a:	fb02 e303 	mla	r3, r2, r3, lr
 802229e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80222a0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80222a4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80222a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80222aa:	fb00 330a 	mla	r3, r0, sl, r3
 80222ae:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80222b2:	f8b9 0000 	ldrh.w	r0, [r9]
 80222b6:	fb08 3c0c 	mla	ip, r8, ip, r3
 80222ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80222bc:	1202      	asrs	r2, r0, #8
 80222be:	434b      	muls	r3, r1
 80222c0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80222c4:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80222c8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80222cc:	1c59      	adds	r1, r3, #1
 80222ce:	ea47 070c 	orr.w	r7, r7, ip
 80222d2:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80222d6:	0c3b      	lsrs	r3, r7, #16
 80222d8:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80222dc:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 80222e0:	b2ff      	uxtb	r7, r7
 80222e2:	fb13 f304 	smulbb	r3, r3, r4
 80222e6:	b2c9      	uxtb	r1, r1
 80222e8:	fb1c fc04 	smulbb	ip, ip, r4
 80222ec:	fb02 3201 	mla	r2, r2, r1, r3
 80222f0:	10c3      	asrs	r3, r0, #3
 80222f2:	fb17 f704 	smulbb	r7, r7, r4
 80222f6:	00c0      	lsls	r0, r0, #3
 80222f8:	b292      	uxth	r2, r2
 80222fa:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80222fe:	b2c0      	uxtb	r0, r0
 8022300:	fb03 c301 	mla	r3, r3, r1, ip
 8022304:	f102 0c01 	add.w	ip, r2, #1
 8022308:	fb00 7001 	mla	r0, r0, r1, r7
 802230c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8022310:	b280      	uxth	r0, r0
 8022312:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 8022316:	b29b      	uxth	r3, r3
 8022318:	1c42      	adds	r2, r0, #1
 802231a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802231e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022322:	ea42 020c 	orr.w	r2, r2, ip
 8022326:	f103 0c01 	add.w	ip, r3, #1
 802232a:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 802232e:	095b      	lsrs	r3, r3, #5
 8022330:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022334:	431a      	orrs	r2, r3
 8022336:	f8a9 2000 	strh.w	r2, [r9]
 802233a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 802233c:	f109 0902 	add.w	r9, r9, #2
 8022340:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8022342:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022346:	441a      	add	r2, r3
 8022348:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802234a:	9231      	str	r2, [sp, #196]	; 0xc4
 802234c:	441d      	add	r5, r3
 802234e:	e63d      	b.n	8021fcc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8022350:	2800      	cmp	r0, #0
 8022352:	f43f aedd 	beq.w	8022110 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 8022356:	5c79      	ldrb	r1, [r7, r1]
 8022358:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802235c:	910b      	str	r1, [sp, #44]	; 0x2c
 802235e:	0e09      	lsrs	r1, r1, #24
 8022360:	9114      	str	r1, [sp, #80]	; 0x50
 8022362:	e6d5      	b.n	8022110 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 8022364:	b01f      	add	sp, #124	; 0x7c
 8022366:	ecbd 8b08 	vpop	{d8-d11}
 802236a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08022370 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8022370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022374:	880e      	ldrh	r6, [r1, #0]
 8022376:	b085      	sub	sp, #20
 8022378:	4691      	mov	r9, r2
 802237a:	ea4f 2826 	mov.w	r8, r6, asr #8
 802237e:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8022382:	f9bd e03c 	ldrsh.w	lr, [sp, #60]	; 0x3c
 8022386:	f008 02f8 	and.w	r2, r8, #248	; 0xf8
 802238a:	ea4f 08e6 	mov.w	r8, r6, asr #3
 802238e:	00f6      	lsls	r6, r6, #3
 8022390:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8022394:	9200      	str	r2, [sp, #0]
 8022396:	f008 02fc 	and.w	r2, r8, #252	; 0xfc
 802239a:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 802239e:	9201      	str	r2, [sp, #4]
 80223a0:	b2f2      	uxtb	r2, r6
 80223a2:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 80223a6:	9202      	str	r2, [sp, #8]
 80223a8:	fb04 560c 	mla	r6, r4, ip, r5
 80223ac:	2c00      	cmp	r4, #0
 80223ae:	eb09 0806 	add.w	r8, r9, r6
 80223b2:	db3f      	blt.n	8022434 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 80223b4:	45a6      	cmp	lr, r4
 80223b6:	dd3d      	ble.n	8022434 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 80223b8:	2d00      	cmp	r5, #0
 80223ba:	db39      	blt.n	8022430 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 80223bc:	45ac      	cmp	ip, r5
 80223be:	dd37      	ble.n	8022430 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 80223c0:	f819 2006 	ldrb.w	r2, [r9, r6]
 80223c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80223c8:	1c6e      	adds	r6, r5, #1
 80223ca:	d436      	bmi.n	802243a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 80223cc:	45b4      	cmp	ip, r6
 80223ce:	dd34      	ble.n	802243a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 80223d0:	b3a8      	cbz	r0, 802243e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xce>
 80223d2:	f898 6001 	ldrb.w	r6, [r8, #1]
 80223d6:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 80223da:	3401      	adds	r4, #1
 80223dc:	d433      	bmi.n	8022446 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 80223de:	45a6      	cmp	lr, r4
 80223e0:	dd31      	ble.n	8022446 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 80223e2:	b39f      	cbz	r7, 802244c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xdc>
 80223e4:	2d00      	cmp	r5, #0
 80223e6:	eb08 0e0c 	add.w	lr, r8, ip
 80223ea:	db2a      	blt.n	8022442 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 80223ec:	45ac      	cmp	ip, r5
 80223ee:	dd28      	ble.n	8022442 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 80223f0:	f818 400c 	ldrb.w	r4, [r8, ip]
 80223f4:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 80223f8:	3501      	adds	r5, #1
 80223fa:	d42a      	bmi.n	8022452 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 80223fc:	45ac      	cmp	ip, r5
 80223fe:	dd28      	ble.n	8022452 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 8022400:	b348      	cbz	r0, 8022456 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe6>
 8022402:	f89e 5001 	ldrb.w	r5, [lr, #1]
 8022406:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 802240a:	280f      	cmp	r0, #15
 802240c:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8022410:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8022414:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8022418:	ea4f 6813 	mov.w	r8, r3, lsr #24
 802241c:	d801      	bhi.n	8022422 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb2>
 802241e:	2f0f      	cmp	r7, #15
 8022420:	d91b      	bls.n	802245a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xea>
 8022422:	4b7e      	ldr	r3, [pc, #504]	; (802261c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 8022424:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8022428:	4a7d      	ldr	r2, [pc, #500]	; (8022620 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 802242a:	487e      	ldr	r0, [pc, #504]	; (8022624 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b4>)
 802242c:	f004 ffea 	bl	8027404 <__assert_func>
 8022430:	2200      	movs	r2, #0
 8022432:	e7c9      	b.n	80223c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x58>
 8022434:	2600      	movs	r6, #0
 8022436:	4632      	mov	r2, r6
 8022438:	e7cf      	b.n	80223da <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 802243a:	2600      	movs	r6, #0
 802243c:	e7cd      	b.n	80223da <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 802243e:	4606      	mov	r6, r0
 8022440:	e7cb      	b.n	80223da <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8022442:	2400      	movs	r4, #0
 8022444:	e7d8      	b.n	80223f8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x88>
 8022446:	2300      	movs	r3, #0
 8022448:	461c      	mov	r4, r3
 802244a:	e7de      	b.n	802240a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 802244c:	463b      	mov	r3, r7
 802244e:	463c      	mov	r4, r7
 8022450:	e7db      	b.n	802240a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8022452:	2300      	movs	r3, #0
 8022454:	e7d9      	b.n	802240a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8022456:	4603      	mov	r3, r0
 8022458:	e7d7      	b.n	802240a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 802245a:	b280      	uxth	r0, r0
 802245c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8022460:	b2bf      	uxth	r7, r7
 8022462:	fb00 fe07 	mul.w	lr, r0, r7
 8022466:	ea4f 1000 	mov.w	r0, r0, lsl #4
 802246a:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 802246e:	eba0 0c0e 	sub.w	ip, r0, lr
 8022472:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8022476:	b2bf      	uxth	r7, r7
 8022478:	fa1f fc8c 	uxth.w	ip, ip
 802247c:	eba5 0507 	sub.w	r5, r5, r7
 8022480:	fb0c f00a 	mul.w	r0, ip, sl
 8022484:	b2ad      	uxth	r5, r5
 8022486:	fb05 000b 	mla	r0, r5, fp, r0
 802248a:	fb07 0009 	mla	r0, r7, r9, r0
 802248e:	fb0e 0008 	mla	r0, lr, r8, r0
 8022492:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022496:	9003      	str	r0, [sp, #12]
 8022498:	d018      	beq.n	80224cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x15c>
 802249a:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 802249e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80224a2:	fb0b f000 	mul.w	r0, fp, r0
 80224a6:	fb0b fb02 	mul.w	fp, fp, r2
 80224aa:	0a02      	lsrs	r2, r0, #8
 80224ac:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80224b0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80224b4:	4402      	add	r2, r0
 80224b6:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 80224ba:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80224be:	0a12      	lsrs	r2, r2, #8
 80224c0:	0a00      	lsrs	r0, r0, #8
 80224c2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80224c6:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80224ca:	4302      	orrs	r2, r0
 80224cc:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80224d0:	d019      	beq.n	8022506 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x196>
 80224d2:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80224d6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80224da:	fb0a fb0b 	mul.w	fp, sl, fp
 80224de:	fb0a fa06 	mul.w	sl, sl, r6
 80224e2:	ea4f 261b 	mov.w	r6, fp, lsr #8
 80224e6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80224ea:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80224ee:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80224f2:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80224f6:	445e      	add	r6, fp
 80224f8:	0a00      	lsrs	r0, r0, #8
 80224fa:	0a36      	lsrs	r6, r6, #8
 80224fc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022500:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022504:	4306      	orrs	r6, r0
 8022506:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802250a:	d019      	beq.n	8022540 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1d0>
 802250c:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8022510:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022514:	fb09 fa0a 	mul.w	sl, r9, sl
 8022518:	fb09 f904 	mul.w	r9, r9, r4
 802251c:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8022520:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022524:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8022528:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802252c:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8022530:	4454      	add	r4, sl
 8022532:	0a00      	lsrs	r0, r0, #8
 8022534:	0a24      	lsrs	r4, r4, #8
 8022536:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802253a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802253e:	4304      	orrs	r4, r0
 8022540:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022544:	d019      	beq.n	802257a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x20a>
 8022546:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 802254a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802254e:	fb08 f909 	mul.w	r9, r8, r9
 8022552:	fb08 f803 	mul.w	r8, r8, r3
 8022556:	ea4f 2319 	mov.w	r3, r9, lsr #8
 802255a:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 802255e:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8022562:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022566:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 802256a:	444b      	add	r3, r9
 802256c:	0a00      	lsrs	r0, r0, #8
 802256e:	0a1b      	lsrs	r3, r3, #8
 8022570:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022574:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022578:	4303      	orrs	r3, r0
 802257a:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 802257e:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8022582:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022586:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802258a:	fb0c f808 	mul.w	r8, ip, r8
 802258e:	fb0c f606 	mul.w	r6, ip, r6
 8022592:	fb05 8800 	mla	r8, r5, r0, r8
 8022596:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 802259a:	fb05 6202 	mla	r2, r5, r2, r6
 802259e:	9d00      	ldr	r5, [sp, #0]
 80225a0:	fb07 8800 	mla	r8, r7, r0, r8
 80225a4:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 80225a8:	fb0e 8000 	mla	r0, lr, r0, r8
 80225ac:	0a00      	lsrs	r0, r0, #8
 80225ae:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 80225b2:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 80225b6:	fb07 2700 	mla	r7, r7, r0, r2
 80225ba:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 80225be:	9b03      	ldr	r3, [sp, #12]
 80225c0:	fb0e 7000 	mla	r0, lr, r0, r7
 80225c4:	9a02      	ldr	r2, [sp, #8]
 80225c6:	43dc      	mvns	r4, r3
 80225c8:	9b01      	ldr	r3, [sp, #4]
 80225ca:	0a00      	lsrs	r0, r0, #8
 80225cc:	b2e4      	uxtb	r4, r4
 80225ce:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80225d2:	4363      	muls	r3, r4
 80225d4:	4365      	muls	r5, r4
 80225d6:	ea48 0000 	orr.w	r0, r8, r0
 80225da:	4362      	muls	r2, r4
 80225dc:	1c5e      	adds	r6, r3, #1
 80225de:	4614      	mov	r4, r2
 80225e0:	1c6a      	adds	r2, r5, #1
 80225e2:	eb06 2613 	add.w	r6, r6, r3, lsr #8
 80225e6:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 80225ea:	0a03      	lsrs	r3, r0, #8
 80225ec:	0c02      	lsrs	r2, r0, #16
 80225ee:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 80225f2:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 80225f6:	00db      	lsls	r3, r3, #3
 80225f8:	0212      	lsls	r2, r2, #8
 80225fa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80225fe:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8022602:	4313      	orrs	r3, r2
 8022604:	1c62      	adds	r2, r4, #1
 8022606:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802260a:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 802260e:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8022612:	4318      	orrs	r0, r3
 8022614:	8008      	strh	r0, [r1, #0]
 8022616:	b005      	add	sp, #20
 8022618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802261c:	0802e3b6 	.word	0x0802e3b6
 8022620:	0802e986 	.word	0x0802e986
 8022624:	0802e43a 	.word	0x0802e43a

08022628 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802262c:	ed2d 8b08 	vpush	{d8-d11}
 8022630:	b09b      	sub	sp, #108	; 0x6c
 8022632:	eeb0 aa40 	vmov.f32	s20, s0
 8022636:	eef0 9a60 	vmov.f32	s19, s1
 802263a:	9218      	str	r2, [sp, #96]	; 0x60
 802263c:	eeb0 9a41 	vmov.f32	s18, s2
 8022640:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8022642:	eeb0 8a62 	vmov.f32	s16, s5
 8022646:	9019      	str	r0, [sp, #100]	; 0x64
 8022648:	eef0 8a43 	vmov.f32	s17, s6
 802264c:	6850      	ldr	r0, [r2, #4]
 802264e:	eef0 ba44 	vmov.f32	s23, s8
 8022652:	9116      	str	r1, [sp, #88]	; 0x58
 8022654:	eeb0 ba64 	vmov.f32	s22, s9
 8022658:	9307      	str	r3, [sp, #28]
 802265a:	eef0 aa45 	vmov.f32	s21, s10
 802265e:	6812      	ldr	r2, [r2, #0]
 8022660:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 8022662:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8022666:	fb00 1303 	mla	r3, r0, r3, r1
 802266a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802266e:	930a      	str	r3, [sp, #40]	; 0x28
 8022670:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8022672:	681b      	ldr	r3, [r3, #0]
 8022674:	930f      	str	r3, [sp, #60]	; 0x3c
 8022676:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8022678:	685e      	ldr	r6, [r3, #4]
 802267a:	3604      	adds	r6, #4
 802267c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802267e:	2b00      	cmp	r3, #0
 8022680:	dc03      	bgt.n	802268a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8022682:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022684:	2b00      	cmp	r3, #0
 8022686:	f340 8373 	ble.w	8022d70 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 802268a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802268c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022690:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022694:	1e48      	subs	r0, r1, #1
 8022696:	1e57      	subs	r7, r2, #1
 8022698:	9b07      	ldr	r3, [sp, #28]
 802269a:	2b00      	cmp	r3, #0
 802269c:	f340 818f 	ble.w	80229be <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 80226a0:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 80226a2:	142b      	asrs	r3, r5, #16
 80226a4:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80226a8:	d406      	bmi.n	80226b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80226aa:	4584      	cmp	ip, r0
 80226ac:	da04      	bge.n	80226b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80226ae:	2b00      	cmp	r3, #0
 80226b0:	db02      	blt.n	80226b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80226b2:	42bb      	cmp	r3, r7
 80226b4:	f2c0 8184 	blt.w	80229c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 80226b8:	f11c 0c01 	adds.w	ip, ip, #1
 80226bc:	f100 8172 	bmi.w	80229a4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80226c0:	4561      	cmp	r1, ip
 80226c2:	f2c0 816f 	blt.w	80229a4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80226c6:	3301      	adds	r3, #1
 80226c8:	f100 816c 	bmi.w	80229a4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80226cc:	429a      	cmp	r2, r3
 80226ce:	f2c0 8169 	blt.w	80229a4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80226d2:	9b07      	ldr	r3, [sp, #28]
 80226d4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80226d6:	9317      	str	r3, [sp, #92]	; 0x5c
 80226d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80226da:	2b00      	cmp	r3, #0
 80226dc:	f340 818e 	ble.w	80229fc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 80226e0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80226e2:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80226e6:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80226ea:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80226ee:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80226f0:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 80226f4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80226f6:	141b      	asrs	r3, r3, #16
 80226f8:	f100 81d1 	bmi.w	8022a9e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80226fc:	f101 38ff 	add.w	r8, r1, #4294967295
 8022700:	4543      	cmp	r3, r8
 8022702:	f280 81cc 	bge.w	8022a9e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8022706:	f1bc 0f00 	cmp.w	ip, #0
 802270a:	f2c0 81c8 	blt.w	8022a9e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 802270e:	f10e 38ff 	add.w	r8, lr, #4294967295
 8022712:	45c4      	cmp	ip, r8
 8022714:	f280 81c3 	bge.w	8022a9e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8022718:	b209      	sxth	r1, r1
 802271a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802271c:	fb0c 3301 	mla	r3, ip, r1, r3
 8022720:	eb04 0803 	add.w	r8, r4, r3
 8022724:	5ce3      	ldrb	r3, [r4, r3]
 8022726:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802272a:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802272e:	2a00      	cmp	r2, #0
 8022730:	f000 81aa 	beq.w	8022a88 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 8022734:	f898 c001 	ldrb.w	ip, [r8, #1]
 8022738:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 802273c:	940b      	str	r4, [sp, #44]	; 0x2c
 802273e:	0e24      	lsrs	r4, r4, #24
 8022740:	9412      	str	r4, [sp, #72]	; 0x48
 8022742:	b178      	cbz	r0, 8022764 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8022744:	eb08 0c01 	add.w	ip, r8, r1
 8022748:	f818 1001 	ldrb.w	r1, [r8, r1]
 802274c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022750:	9108      	str	r1, [sp, #32]
 8022752:	0e09      	lsrs	r1, r1, #24
 8022754:	9110      	str	r1, [sp, #64]	; 0x40
 8022756:	f89c 1001 	ldrb.w	r1, [ip, #1]
 802275a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802275e:	910c      	str	r1, [sp, #48]	; 0x30
 8022760:	0e09      	lsrs	r1, r1, #24
 8022762:	9113      	str	r1, [sp, #76]	; 0x4c
 8022764:	b292      	uxth	r2, r2
 8022766:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022768:	b280      	uxth	r0, r0
 802276a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802276c:	fb02 f900 	mul.w	r9, r2, r0
 8022770:	0112      	lsls	r2, r2, #4
 8022772:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8022776:	eba2 0809 	sub.w	r8, r2, r9
 802277a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802277e:	b280      	uxth	r0, r0
 8022780:	fa1f f888 	uxth.w	r8, r8
 8022784:	1a12      	subs	r2, r2, r0
 8022786:	fb08 f101 	mul.w	r1, r8, r1
 802278a:	b292      	uxth	r2, r2
 802278c:	fb02 110e 	mla	r1, r2, lr, r1
 8022790:	fb00 1104 	mla	r1, r0, r4, r1
 8022794:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022796:	fb09 1104 	mla	r1, r9, r4, r1
 802279a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802279e:	2900      	cmp	r1, #0
 80227a0:	f000 80f5 	beq.w	802298e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 80227a4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80227a8:	d01b      	beq.n	80227e2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80227aa:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80227ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80227b2:	fb0e fa0a 	mul.w	sl, lr, sl
 80227b6:	fb0e fe03 	mul.w	lr, lr, r3
 80227ba:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80227be:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80227c2:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80227c6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80227ca:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80227ce:	4453      	add	r3, sl
 80227d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80227d4:	0a1b      	lsrs	r3, r3, #8
 80227d6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80227da:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80227de:	ea43 030c 	orr.w	r3, r3, ip
 80227e2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80227e4:	2cff      	cmp	r4, #255	; 0xff
 80227e6:	d021      	beq.n	802282c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80227e8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80227ea:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80227ee:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80227f0:	fb04 fb0b 	mul.w	fp, r4, fp
 80227f4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80227f6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80227fa:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80227fc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022800:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022804:	fb04 fa0a 	mul.w	sl, r4, sl
 8022808:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802280c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022810:	44de      	add	lr, fp
 8022812:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022816:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802281a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802281e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022822:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022826:	ea4e 040a 	orr.w	r4, lr, sl
 802282a:	940b      	str	r4, [sp, #44]	; 0x2c
 802282c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802282e:	2cff      	cmp	r4, #255	; 0xff
 8022830:	d021      	beq.n	8022876 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8022832:	9c08      	ldr	r4, [sp, #32]
 8022834:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8022838:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802283a:	fb04 fb0b 	mul.w	fp, r4, fp
 802283e:	9c08      	ldr	r4, [sp, #32]
 8022840:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022844:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022846:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802284a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802284e:	fb04 fa0a 	mul.w	sl, r4, sl
 8022852:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022856:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802285a:	44de      	add	lr, fp
 802285c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022860:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022864:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022868:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802286c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022870:	ea4e 040a 	orr.w	r4, lr, sl
 8022874:	9408      	str	r4, [sp, #32]
 8022876:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022878:	2cff      	cmp	r4, #255	; 0xff
 802287a:	d021      	beq.n	80228c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 802287c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802287e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8022882:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022884:	fb04 fb0b 	mul.w	fp, r4, fp
 8022888:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802288a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802288e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022890:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022894:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022898:	fb04 fa0a 	mul.w	sl, r4, sl
 802289c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80228a0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80228a4:	44de      	add	lr, fp
 80228a6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80228aa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80228ae:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80228b2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80228b6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80228ba:	ea4e 040a 	orr.w	r4, lr, sl
 80228be:	940c      	str	r4, [sp, #48]	; 0x30
 80228c0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80228c2:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80228c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80228ca:	43c9      	mvns	r1, r1
 80228cc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80228d0:	9c08      	ldr	r4, [sp, #32]
 80228d2:	fb08 fc0c 	mul.w	ip, r8, ip
 80228d6:	fb02 cc0e 	mla	ip, r2, lr, ip
 80228da:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80228de:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80228e0:	fb00 cc0e 	mla	ip, r0, lr, ip
 80228e4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80228e8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80228ea:	fb09 cc0e 	mla	ip, r9, lr, ip
 80228ee:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80228f2:	fb08 f80e 	mul.w	r8, r8, lr
 80228f6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80228fa:	fa5f fe81 	uxtb.w	lr, r1
 80228fe:	fb02 8303 	mla	r3, r2, r3, r8
 8022902:	9a08      	ldr	r2, [sp, #32]
 8022904:	f8b7 8000 	ldrh.w	r8, [r7]
 8022908:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802290c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8022910:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022912:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8022916:	fb00 330a 	mla	r3, r0, sl, r3
 802291a:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 802291e:	ea4f 2228 	mov.w	r2, r8, asr #8
 8022922:	fb09 3900 	mla	r9, r9, r0, r3
 8022926:	ea4f 00e8 	mov.w	r0, r8, asr #3
 802292a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802292e:	b2c9      	uxtb	r1, r1
 8022930:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022934:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8022938:	fb02 f20e 	mul.w	r2, r2, lr
 802293c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022940:	fb00 f00e 	mul.w	r0, r0, lr
 8022944:	1c53      	adds	r3, r2, #1
 8022946:	fb01 f10e 	mul.w	r1, r1, lr
 802294a:	ea4c 0c09 	orr.w	ip, ip, r9
 802294e:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8022952:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8022956:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802295a:	4a60      	ldr	r2, [pc, #384]	; (8022adc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>)
 802295c:	b2db      	uxtb	r3, r3
 802295e:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 8022962:	1c43      	adds	r3, r0, #1
 8022964:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8022968:	ea4f 231c 	mov.w	r3, ip, lsr #8
 802296c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022970:	00db      	lsls	r3, r3, #3
 8022972:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022976:	4313      	orrs	r3, r2
 8022978:	1c4a      	adds	r2, r1, #1
 802297a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802297e:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8022982:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8022986:	ea4c 0c03 	orr.w	ip, ip, r3
 802298a:	f8a7 c000 	strh.w	ip, [r7]
 802298e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8022990:	3702      	adds	r7, #2
 8022992:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022994:	441a      	add	r2, r3
 8022996:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022998:	441d      	add	r5, r3
 802299a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802299c:	922d      	str	r2, [sp, #180]	; 0xb4
 802299e:	3b01      	subs	r3, #1
 80229a0:	9317      	str	r3, [sp, #92]	; 0x5c
 80229a2:	e699      	b.n	80226d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80229a4:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80229a6:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 80229a8:	441c      	add	r4, r3
 80229aa:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80229ac:	441d      	add	r5, r3
 80229ae:	9b07      	ldr	r3, [sp, #28]
 80229b0:	942d      	str	r4, [sp, #180]	; 0xb4
 80229b2:	3b01      	subs	r3, #1
 80229b4:	9307      	str	r3, [sp, #28]
 80229b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80229b8:	3302      	adds	r3, #2
 80229ba:	930a      	str	r3, [sp, #40]	; 0x28
 80229bc:	e66c      	b.n	8022698 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80229be:	d024      	beq.n	8022a0a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 80229c0:	9b07      	ldr	r3, [sp, #28]
 80229c2:	982f      	ldr	r0, [sp, #188]	; 0xbc
 80229c4:	3b01      	subs	r3, #1
 80229c6:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 80229c8:	fb00 4003 	mla	r0, r0, r3, r4
 80229cc:	1400      	asrs	r0, r0, #16
 80229ce:	f53f ae80 	bmi.w	80226d2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80229d2:	3901      	subs	r1, #1
 80229d4:	4288      	cmp	r0, r1
 80229d6:	f6bf ae7c 	bge.w	80226d2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80229da:	9930      	ldr	r1, [sp, #192]	; 0xc0
 80229dc:	fb01 5303 	mla	r3, r1, r3, r5
 80229e0:	141b      	asrs	r3, r3, #16
 80229e2:	f53f ae76 	bmi.w	80226d2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80229e6:	3a01      	subs	r2, #1
 80229e8:	4293      	cmp	r3, r2
 80229ea:	f6bf ae72 	bge.w	80226d2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80229ee:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80229f2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80229f6:	f1bb 0f00 	cmp.w	fp, #0
 80229fa:	dc71      	bgt.n	8022ae0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 80229fc:	9b07      	ldr	r3, [sp, #28]
 80229fe:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022a02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022a04:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8022a08:	930a      	str	r3, [sp, #40]	; 0x28
 8022a0a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022a0c:	2b00      	cmp	r3, #0
 8022a0e:	f340 81af 	ble.w	8022d70 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8022a12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022a16:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022a18:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022a1c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022a20:	eef0 6a48 	vmov.f32	s13, s16
 8022a24:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022a28:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022a2c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022a30:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8022a34:	eef0 6a68 	vmov.f32	s13, s17
 8022a38:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022a3c:	ee16 5a90 	vmov	r5, s13
 8022a40:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022a44:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022a48:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022a4c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022a50:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022a54:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022a58:	ee18 2a10 	vmov	r2, s16
 8022a5c:	eeb0 8a47 	vmov.f32	s16, s14
 8022a60:	fb92 f3f3 	sdiv	r3, r2, r3
 8022a64:	ee18 2a90 	vmov	r2, s17
 8022a68:	932f      	str	r3, [sp, #188]	; 0xbc
 8022a6a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022a6c:	eef0 8a67 	vmov.f32	s17, s15
 8022a70:	fb92 f3f3 	sdiv	r3, r2, r3
 8022a74:	9330      	str	r3, [sp, #192]	; 0xc0
 8022a76:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022a78:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8022a7a:	3b01      	subs	r3, #1
 8022a7c:	9316      	str	r3, [sp, #88]	; 0x58
 8022a7e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022a80:	bf08      	it	eq
 8022a82:	4613      	moveq	r3, r2
 8022a84:	9307      	str	r3, [sp, #28]
 8022a86:	e5f9      	b.n	802267c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8022a88:	2800      	cmp	r0, #0
 8022a8a:	f43f ae6b 	beq.w	8022764 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8022a8e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8022a92:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022a96:	9108      	str	r1, [sp, #32]
 8022a98:	0e09      	lsrs	r1, r1, #24
 8022a9a:	9110      	str	r1, [sp, #64]	; 0x40
 8022a9c:	e662      	b.n	8022764 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8022a9e:	f113 0801 	adds.w	r8, r3, #1
 8022aa2:	f53f af74 	bmi.w	802298e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8022aa6:	4541      	cmp	r1, r8
 8022aa8:	f6ff af71 	blt.w	802298e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8022aac:	f11c 0801 	adds.w	r8, ip, #1
 8022ab0:	f53f af6d 	bmi.w	802298e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8022ab4:	45c6      	cmp	lr, r8
 8022ab6:	f6ff af6a 	blt.w	802298e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8022aba:	b209      	sxth	r1, r1
 8022abc:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8022ac0:	fa0f f38e 	sxth.w	r3, lr
 8022ac4:	9100      	str	r1, [sp, #0]
 8022ac6:	4639      	mov	r1, r7
 8022ac8:	9301      	str	r3, [sp, #4]
 8022aca:	4633      	mov	r3, r6
 8022acc:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8022ad0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022ad2:	9819      	ldr	r0, [sp, #100]	; 0x64
 8022ad4:	f7ff fc4c 	bl	8022370 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8022ad8:	e759      	b.n	802298e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8022ada:	bf00      	nop
 8022adc:	fffff800 	.word	0xfffff800
 8022ae0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8022ae2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8022ae6:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8022ae8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8022aec:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8022aee:	1427      	asrs	r7, r4, #16
 8022af0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022af2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022af6:	142b      	asrs	r3, r5, #16
 8022af8:	fb01 7303 	mla	r3, r1, r3, r7
 8022afc:	18e7      	adds	r7, r4, r3
 8022afe:	5ce3      	ldrb	r3, [r4, r3]
 8022b00:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8022b04:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8022b08:	2a00      	cmp	r2, #0
 8022b0a:	f000 8127 	beq.w	8022d5c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 8022b0e:	f897 e001 	ldrb.w	lr, [r7, #1]
 8022b12:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8022b16:	940d      	str	r4, [sp, #52]	; 0x34
 8022b18:	0e24      	lsrs	r4, r4, #24
 8022b1a:	9414      	str	r4, [sp, #80]	; 0x50
 8022b1c:	b170      	cbz	r0, 8022b3c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 8022b1e:	eb07 0e01 	add.w	lr, r7, r1
 8022b22:	5c79      	ldrb	r1, [r7, r1]
 8022b24:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022b28:	9109      	str	r1, [sp, #36]	; 0x24
 8022b2a:	0e09      	lsrs	r1, r1, #24
 8022b2c:	9111      	str	r1, [sp, #68]	; 0x44
 8022b2e:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8022b32:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022b36:	910e      	str	r1, [sp, #56]	; 0x38
 8022b38:	0e09      	lsrs	r1, r1, #24
 8022b3a:	9115      	str	r1, [sp, #84]	; 0x54
 8022b3c:	b292      	uxth	r2, r2
 8022b3e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022b40:	b280      	uxth	r0, r0
 8022b42:	fb02 f800 	mul.w	r8, r2, r0
 8022b46:	0112      	lsls	r2, r2, #4
 8022b48:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8022b4c:	eba2 0e08 	sub.w	lr, r2, r8
 8022b50:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8022b54:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022b56:	b280      	uxth	r0, r0
 8022b58:	fa1f fe8e 	uxth.w	lr, lr
 8022b5c:	1a09      	subs	r1, r1, r0
 8022b5e:	fb0e f202 	mul.w	r2, lr, r2
 8022b62:	b289      	uxth	r1, r1
 8022b64:	fb01 220c 	mla	r2, r1, ip, r2
 8022b68:	fb00 2204 	mla	r2, r0, r4, r2
 8022b6c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022b6e:	fb08 2204 	mla	r2, r8, r4, r2
 8022b72:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022b76:	2a00      	cmp	r2, #0
 8022b78:	f000 80e5 	beq.w	8022d46 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8022b7c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8022b80:	d019      	beq.n	8022bb6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58e>
 8022b82:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8022b86:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022b8a:	fb0c fa0a 	mul.w	sl, ip, sl
 8022b8e:	fb0c fc03 	mul.w	ip, ip, r3
 8022b92:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8022b96:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022b9a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8022b9e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022ba2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8022ba6:	4453      	add	r3, sl
 8022ba8:	0a3f      	lsrs	r7, r7, #8
 8022baa:	0a1b      	lsrs	r3, r3, #8
 8022bac:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022bb0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022bb4:	433b      	orrs	r3, r7
 8022bb6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022bb8:	2cff      	cmp	r4, #255	; 0xff
 8022bba:	d020      	beq.n	8022bfe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d6>
 8022bbc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022bbe:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022bc2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022bc4:	4367      	muls	r7, r4
 8022bc6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022bc8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022bcc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022bd0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022bd2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022bd6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022bda:	fb04 fa0a 	mul.w	sl, r4, sl
 8022bde:	44bc      	add	ip, r7
 8022be0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022be4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022be8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022bec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022bf0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022bf4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022bf8:	ea4c 040a 	orr.w	r4, ip, sl
 8022bfc:	940d      	str	r4, [sp, #52]	; 0x34
 8022bfe:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022c00:	2cff      	cmp	r4, #255	; 0xff
 8022c02:	d020      	beq.n	8022c46 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61e>
 8022c04:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022c06:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022c0a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022c0c:	4367      	muls	r7, r4
 8022c0e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022c10:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022c14:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022c18:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022c1a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022c1e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022c22:	fb04 fa0a 	mul.w	sl, r4, sl
 8022c26:	44bc      	add	ip, r7
 8022c28:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022c2c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022c30:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022c34:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022c38:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022c3c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022c40:	ea4c 040a 	orr.w	r4, ip, sl
 8022c44:	9409      	str	r4, [sp, #36]	; 0x24
 8022c46:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022c48:	2cff      	cmp	r4, #255	; 0xff
 8022c4a:	d020      	beq.n	8022c8e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x666>
 8022c4c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022c4e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022c52:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022c54:	4367      	muls	r7, r4
 8022c56:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022c58:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022c5c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022c60:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022c62:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022c66:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022c6a:	fb04 fa0a 	mul.w	sl, r4, sl
 8022c6e:	44bc      	add	ip, r7
 8022c70:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022c74:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022c78:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022c7c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022c80:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022c84:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022c88:	ea4c 040a 	orr.w	r4, ip, sl
 8022c8c:	940e      	str	r4, [sp, #56]	; 0x38
 8022c8e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022c90:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022c94:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022c98:	43d2      	mvns	r2, r2
 8022c9a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022c9e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022ca0:	b2d2      	uxtb	r2, r2
 8022ca2:	fb0e f707 	mul.w	r7, lr, r7
 8022ca6:	fb01 770c 	mla	r7, r1, ip, r7
 8022caa:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022cae:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022cb0:	fb00 770c 	mla	r7, r0, ip, r7
 8022cb4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022cb8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022cba:	fb08 770c 	mla	r7, r8, ip, r7
 8022cbe:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8022cc2:	fb0e fe0c 	mul.w	lr, lr, ip
 8022cc6:	0a3f      	lsrs	r7, r7, #8
 8022cc8:	fb01 e303 	mla	r3, r1, r3, lr
 8022ccc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022cce:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022cd2:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8022cd6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022cd8:	fb00 330a 	mla	r3, r0, sl, r3
 8022cdc:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8022ce0:	fb08 3c0c 	mla	ip, r8, ip, r3
 8022ce4:	f8b9 3000 	ldrh.w	r3, [r9]
 8022ce8:	1218      	asrs	r0, r3, #8
 8022cea:	10d9      	asrs	r1, r3, #3
 8022cec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022cf0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022cf4:	00db      	lsls	r3, r3, #3
 8022cf6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022cfa:	4350      	muls	r0, r2
 8022cfc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022d00:	b2db      	uxtb	r3, r3
 8022d02:	4351      	muls	r1, r2
 8022d04:	ea47 070c 	orr.w	r7, r7, ip
 8022d08:	4353      	muls	r3, r2
 8022d0a:	1c42      	adds	r2, r0, #1
 8022d0c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022d10:	0c3a      	lsrs	r2, r7, #16
 8022d12:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022d16:	4a19      	ldr	r2, [pc, #100]	; (8022d7c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>)
 8022d18:	b2c0      	uxtb	r0, r0
 8022d1a:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8022d1e:	1c4a      	adds	r2, r1, #1
 8022d20:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8022d24:	0a3a      	lsrs	r2, r7, #8
 8022d26:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8022d2a:	00c9      	lsls	r1, r1, #3
 8022d2c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022d30:	4301      	orrs	r1, r0
 8022d32:	1c58      	adds	r0, r3, #1
 8022d34:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8022d38:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8022d3c:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8022d40:	4308      	orrs	r0, r1
 8022d42:	f8a9 0000 	strh.w	r0, [r9]
 8022d46:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8022d48:	f109 0902 	add.w	r9, r9, #2
 8022d4c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022d4e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022d52:	441a      	add	r2, r3
 8022d54:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022d56:	922d      	str	r2, [sp, #180]	; 0xb4
 8022d58:	441d      	add	r5, r3
 8022d5a:	e64c      	b.n	80229f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8022d5c:	2800      	cmp	r0, #0
 8022d5e:	f43f aeed 	beq.w	8022b3c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 8022d62:	5c79      	ldrb	r1, [r7, r1]
 8022d64:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022d68:	9109      	str	r1, [sp, #36]	; 0x24
 8022d6a:	0e09      	lsrs	r1, r1, #24
 8022d6c:	9111      	str	r1, [sp, #68]	; 0x44
 8022d6e:	e6e5      	b.n	8022b3c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 8022d70:	b01b      	add	sp, #108	; 0x6c
 8022d72:	ecbd 8b08 	vpop	{d8-d11}
 8022d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022d7a:	bf00      	nop
 8022d7c:	fffff800 	.word	0xfffff800

08022d80 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8022d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d84:	b085      	sub	sp, #20
 8022d86:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 8022d8a:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8022d8e:	9103      	str	r1, [sp, #12]
 8022d90:	2d00      	cmp	r5, #0
 8022d92:	fb05 7106 	mla	r1, r5, r6, r7
 8022d96:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8022d9a:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8022d9e:	eb02 0441 	add.w	r4, r2, r1, lsl #1
 8022da2:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8022da6:	eb03 0901 	add.w	r9, r3, r1
 8022daa:	9401      	str	r4, [sp, #4]
 8022dac:	f2c0 80c0 	blt.w	8022f30 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 8022db0:	45a8      	cmp	r8, r5
 8022db2:	f340 80bd 	ble.w	8022f30 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 8022db6:	2f00      	cmp	r7, #0
 8022db8:	f2c0 80b6 	blt.w	8022f28 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 8022dbc:	42be      	cmp	r6, r7
 8022dbe:	f340 80b3 	ble.w	8022f28 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 8022dc2:	f813 c001 	ldrb.w	ip, [r3, r1]
 8022dc6:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8022dca:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8022dce:	d019      	beq.n	8022e04 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x84>
 8022dd0:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 8022dd4:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8022dd8:	435a      	muls	r2, r3
 8022dda:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 8022dde:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8022de2:	fb0c f403 	mul.w	r4, ip, r3
 8022de6:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 8022dea:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8022dee:	441a      	add	r2, r3
 8022df0:	f104 0320 	add.w	r3, r4, #32
 8022df4:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8022df8:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 8022dfc:	0a1b      	lsrs	r3, r3, #8
 8022dfe:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022e02:	4319      	orrs	r1, r3
 8022e04:	b289      	uxth	r1, r1
 8022e06:	1c7b      	adds	r3, r7, #1
 8022e08:	f100 8097 	bmi.w	8022f3a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 8022e0c:	429e      	cmp	r6, r3
 8022e0e:	f340 8094 	ble.w	8022f3a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 8022e12:	2800      	cmp	r0, #0
 8022e14:	f000 8094 	beq.w	8022f40 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c0>
 8022e18:	f899 4001 	ldrb.w	r4, [r9, #1]
 8022e1c:	9b01      	ldr	r3, [sp, #4]
 8022e1e:	2cff      	cmp	r4, #255	; 0xff
 8022e20:	885b      	ldrh	r3, [r3, #2]
 8022e22:	d01b      	beq.n	8022e5c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xdc>
 8022e24:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8022e28:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8022e2c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022e30:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8022e34:	fb0a f202 	mul.w	r2, sl, r2
 8022e38:	fb04 fa03 	mul.w	sl, r4, r3
 8022e3c:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8022e40:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8022e44:	441a      	add	r2, r3
 8022e46:	f10a 0320 	add.w	r3, sl, #32
 8022e4a:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8022e4e:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 8022e52:	0a1b      	lsrs	r3, r3, #8
 8022e54:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022e58:	ea4b 0303 	orr.w	r3, fp, r3
 8022e5c:	b29b      	uxth	r3, r3
 8022e5e:	3501      	adds	r5, #1
 8022e60:	d474      	bmi.n	8022f4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 8022e62:	45a8      	cmp	r8, r5
 8022e64:	dd72      	ble.n	8022f4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 8022e66:	f1be 0f00 	cmp.w	lr, #0
 8022e6a:	f000 8120 	beq.w	80230ae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x32e>
 8022e6e:	2f00      	cmp	r7, #0
 8022e70:	db69      	blt.n	8022f46 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 8022e72:	42be      	cmp	r6, r7
 8022e74:	dd67      	ble.n	8022f46 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 8022e76:	f819 5006 	ldrb.w	r5, [r9, r6]
 8022e7a:	9a01      	ldr	r2, [sp, #4]
 8022e7c:	2dff      	cmp	r5, #255	; 0xff
 8022e7e:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 8022e82:	d01c      	beq.n	8022ebe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x13e>
 8022e84:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 8022e88:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8022e8c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8022e90:	fb08 f802 	mul.w	r8, r8, r2
 8022e94:	fb05 fa0b 	mul.w	sl, r5, fp
 8022e98:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8022e9c:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 8022ea0:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022ea4:	4490      	add	r8, r2
 8022ea6:	f10a 0220 	add.w	r2, sl, #32
 8022eaa:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 8022eae:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 8022eb2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022eb6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8022eba:	ea4b 0b0a 	orr.w	fp, fp, sl
 8022ebe:	fa1f fb8b 	uxth.w	fp, fp
 8022ec2:	3701      	adds	r7, #1
 8022ec4:	d447      	bmi.n	8022f56 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 8022ec6:	42be      	cmp	r6, r7
 8022ec8:	dd45      	ble.n	8022f56 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 8022eca:	2800      	cmp	r0, #0
 8022ecc:	d046      	beq.n	8022f5c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1dc>
 8022ece:	3601      	adds	r6, #1
 8022ed0:	9a01      	ldr	r2, [sp, #4]
 8022ed2:	f819 7006 	ldrb.w	r7, [r9, r6]
 8022ed6:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 8022eda:	2fff      	cmp	r7, #255	; 0xff
 8022edc:	d01a      	beq.n	8022f14 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x194>
 8022ede:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 8022ee2:	ea4f 08e7 	mov.w	r8, r7, asr #3
 8022ee6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022eea:	fb08 f806 	mul.w	r8, r8, r6
 8022eee:	fb07 f902 	mul.w	r9, r7, r2
 8022ef2:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8022ef6:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 8022efa:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022efe:	44b0      	add	r8, r6
 8022f00:	f109 0620 	add.w	r6, r9, #32
 8022f04:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8022f08:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8022f0c:	0a36      	lsrs	r6, r6, #8
 8022f0e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8022f12:	4332      	orrs	r2, r6
 8022f14:	b292      	uxth	r2, r2
 8022f16:	280f      	cmp	r0, #15
 8022f18:	d922      	bls.n	8022f60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 8022f1a:	4b69      	ldr	r3, [pc, #420]	; (80230c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x340>)
 8022f1c:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8022f20:	4a68      	ldr	r2, [pc, #416]	; (80230c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>)
 8022f22:	4869      	ldr	r0, [pc, #420]	; (80230c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x348>)
 8022f24:	f004 fa6e 	bl	8027404 <__assert_func>
 8022f28:	f04f 0c00 	mov.w	ip, #0
 8022f2c:	4661      	mov	r1, ip
 8022f2e:	e76a      	b.n	8022e06 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x86>
 8022f30:	2400      	movs	r4, #0
 8022f32:	46a4      	mov	ip, r4
 8022f34:	4623      	mov	r3, r4
 8022f36:	4621      	mov	r1, r4
 8022f38:	e791      	b.n	8022e5e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8022f3a:	2400      	movs	r4, #0
 8022f3c:	4623      	mov	r3, r4
 8022f3e:	e78e      	b.n	8022e5e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8022f40:	4604      	mov	r4, r0
 8022f42:	4603      	mov	r3, r0
 8022f44:	e78b      	b.n	8022e5e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8022f46:	2500      	movs	r5, #0
 8022f48:	46ab      	mov	fp, r5
 8022f4a:	e7ba      	b.n	8022ec2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x142>
 8022f4c:	2700      	movs	r7, #0
 8022f4e:	463d      	mov	r5, r7
 8022f50:	463a      	mov	r2, r7
 8022f52:	46bb      	mov	fp, r7
 8022f54:	e7df      	b.n	8022f16 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 8022f56:	2700      	movs	r7, #0
 8022f58:	463a      	mov	r2, r7
 8022f5a:	e7dc      	b.n	8022f16 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 8022f5c:	4607      	mov	r7, r0
 8022f5e:	4602      	mov	r2, r0
 8022f60:	f1be 0f0f 	cmp.w	lr, #15
 8022f64:	d8d9      	bhi.n	8022f1a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 8022f66:	b286      	uxth	r6, r0
 8022f68:	fa1f f98e 	uxth.w	r9, lr
 8022f6c:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8022f70:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022f74:	fb06 f809 	mul.w	r8, r6, r9
 8022f78:	0136      	lsls	r6, r6, #4
 8022f7a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022f7e:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8022f82:	9601      	str	r6, [sp, #4]
 8022f84:	ea4a 0101 	orr.w	r1, sl, r1
 8022f88:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8022f8c:	fa1f f689 	uxth.w	r6, r9
 8022f90:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022f94:	fb10 f90e 	smulbb	r9, r0, lr
 8022f98:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022f9c:	9602      	str	r6, [sp, #8]
 8022f9e:	460e      	mov	r6, r1
 8022fa0:	ea4f 09e9 	mov.w	r9, r9, asr #3
 8022fa4:	f1ce 0110 	rsb	r1, lr, #16
 8022fa8:	ea4a 0303 	orr.w	r3, sl, r3
 8022fac:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8022fb0:	1a09      	subs	r1, r1, r0
 8022fb2:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 8022fb6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022fba:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022fbe:	4343      	muls	r3, r0
 8022fc0:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 8022fc4:	9801      	ldr	r0, [sp, #4]
 8022fc6:	ea4a 0202 	orr.w	r2, sl, r2
 8022fca:	fb01 3106 	mla	r1, r1, r6, r3
 8022fce:	9e02      	ldr	r6, [sp, #8]
 8022fd0:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8022fd4:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 8022fd8:	fb09 1302 	mla	r3, r9, r2, r1
 8022fdc:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8022fe0:	1b80      	subs	r0, r0, r6
 8022fe2:	9e01      	ldr	r6, [sp, #4]
 8022fe4:	9a03      	ldr	r2, [sp, #12]
 8022fe6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022fea:	eba6 0608 	sub.w	r6, r6, r8
 8022fee:	b280      	uxth	r0, r0
 8022ff0:	8811      	ldrh	r1, [r2, #0]
 8022ff2:	ea4a 0b0b 	orr.w	fp, sl, fp
 8022ff6:	b2b6      	uxth	r6, r6
 8022ff8:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8022ffc:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8023000:	4374      	muls	r4, r6
 8023002:	b292      	uxth	r2, r2
 8023004:	fb0e 3e0b 	mla	lr, lr, fp, r3
 8023008:	fb0c 4400 	mla	r4, ip, r0, r4
 802300c:	9802      	ldr	r0, [sp, #8]
 802300e:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8023012:	fb00 4505 	mla	r5, r0, r5, r4
 8023016:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802301a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802301e:	1208      	asrs	r0, r1, #8
 8023020:	fb08 5707 	mla	r7, r8, r7, r5
 8023024:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8023028:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802302c:	10cd      	asrs	r5, r1, #3
 802302e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8023032:	ea43 0e0e 	orr.w	lr, r3, lr
 8023036:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802303a:	4357      	muls	r7, r2
 802303c:	fa1f f38e 	uxth.w	r3, lr
 8023040:	f107 0801 	add.w	r8, r7, #1
 8023044:	121c      	asrs	r4, r3, #8
 8023046:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 802304a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802304e:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8023052:	b2ff      	uxtb	r7, r7
 8023054:	fb10 f007 	smulbb	r0, r0, r7
 8023058:	fb15 f507 	smulbb	r5, r5, r7
 802305c:	fb04 0402 	mla	r4, r4, r2, r0
 8023060:	10d8      	asrs	r0, r3, #3
 8023062:	00db      	lsls	r3, r3, #3
 8023064:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8023068:	b2a4      	uxth	r4, r4
 802306a:	fb00 5002 	mla	r0, r0, r2, r5
 802306e:	b2dd      	uxtb	r5, r3
 8023070:	00cb      	lsls	r3, r1, #3
 8023072:	b280      	uxth	r0, r0
 8023074:	b2db      	uxtb	r3, r3
 8023076:	fb13 f307 	smulbb	r3, r3, r7
 802307a:	fb05 3202 	mla	r2, r5, r2, r3
 802307e:	1c63      	adds	r3, r4, #1
 8023080:	b292      	uxth	r2, r2
 8023082:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8023086:	1c53      	adds	r3, r2, #1
 8023088:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802308c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023090:	1c42      	adds	r2, r0, #1
 8023092:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023096:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802309a:	9a03      	ldr	r2, [sp, #12]
 802309c:	0940      	lsrs	r0, r0, #5
 802309e:	4323      	orrs	r3, r4
 80230a0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80230a4:	4303      	orrs	r3, r0
 80230a6:	8013      	strh	r3, [r2, #0]
 80230a8:	b005      	add	sp, #20
 80230aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80230ae:	280f      	cmp	r0, #15
 80230b0:	f63f af33 	bhi.w	8022f1a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 80230b4:	4677      	mov	r7, lr
 80230b6:	4675      	mov	r5, lr
 80230b8:	4672      	mov	r2, lr
 80230ba:	46f3      	mov	fp, lr
 80230bc:	e753      	b.n	8022f66 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e6>
 80230be:	bf00      	nop
 80230c0:	0802e3b6 	.word	0x0802e3b6
 80230c4:	0802e986 	.word	0x0802e986
 80230c8:	0802e43a 	.word	0x0802e43a

080230cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80230cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80230d0:	ed2d 8b08 	vpush	{d8-d11}
 80230d4:	b097      	sub	sp, #92	; 0x5c
 80230d6:	eeb0 aa40 	vmov.f32	s20, s0
 80230da:	eef0 9a60 	vmov.f32	s19, s1
 80230de:	9214      	str	r2, [sp, #80]	; 0x50
 80230e0:	eeb0 9a41 	vmov.f32	s18, s2
 80230e4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80230e6:	eeb0 8a62 	vmov.f32	s16, s5
 80230ea:	9308      	str	r3, [sp, #32]
 80230ec:	eef0 8a43 	vmov.f32	s17, s6
 80230f0:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80230f4:	eef0 ba44 	vmov.f32	s23, s8
 80230f8:	9015      	str	r0, [sp, #84]	; 0x54
 80230fa:	eeb0 ba64 	vmov.f32	s22, s9
 80230fe:	9312      	str	r3, [sp, #72]	; 0x48
 8023100:	eef0 aa45 	vmov.f32	s21, s10
 8023104:	6850      	ldr	r0, [r2, #4]
 8023106:	9111      	str	r1, [sp, #68]	; 0x44
 8023108:	6812      	ldr	r2, [r2, #0]
 802310a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802310e:	fb00 1303 	mla	r3, r0, r3, r1
 8023112:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023116:	9309      	str	r3, [sp, #36]	; 0x24
 8023118:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802311a:	681b      	ldr	r3, [r3, #0]
 802311c:	930b      	str	r3, [sp, #44]	; 0x2c
 802311e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023120:	685b      	ldr	r3, [r3, #4]
 8023122:	930c      	str	r3, [sp, #48]	; 0x30
 8023124:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8023128:	930a      	str	r3, [sp, #40]	; 0x28
 802312a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802312c:	2b00      	cmp	r3, #0
 802312e:	dc03      	bgt.n	8023138 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8023130:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8023132:	2b00      	cmp	r3, #0
 8023134:	f340 83cd 	ble.w	80238d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 8023138:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802313a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802313e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023142:	1e48      	subs	r0, r1, #1
 8023144:	1e55      	subs	r5, r2, #1
 8023146:	9b08      	ldr	r3, [sp, #32]
 8023148:	2b00      	cmp	r3, #0
 802314a:	f340 81a5 	ble.w	8023498 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 802314e:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8023150:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023152:	1436      	asrs	r6, r6, #16
 8023154:	ea4f 4323 	mov.w	r3, r3, asr #16
 8023158:	d406      	bmi.n	8023168 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802315a:	4286      	cmp	r6, r0
 802315c:	da04      	bge.n	8023168 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802315e:	2b00      	cmp	r3, #0
 8023160:	db02      	blt.n	8023168 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8023162:	42ab      	cmp	r3, r5
 8023164:	f2c0 8199 	blt.w	802349a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8023168:	3601      	adds	r6, #1
 802316a:	f100 8186 	bmi.w	802347a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 802316e:	42b1      	cmp	r1, r6
 8023170:	f2c0 8183 	blt.w	802347a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8023174:	3301      	adds	r3, #1
 8023176:	f100 8180 	bmi.w	802347a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 802317a:	429a      	cmp	r2, r3
 802317c:	f2c0 817d 	blt.w	802347a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8023180:	9b08      	ldr	r3, [sp, #32]
 8023182:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8023186:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8023188:	9313      	str	r3, [sp, #76]	; 0x4c
 802318a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802318c:	2b00      	cmp	r3, #0
 802318e:	f340 81a6 	ble.w	80234de <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8023192:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023194:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8023196:	1418      	asrs	r0, r3, #16
 8023198:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802319a:	142d      	asrs	r5, r5, #16
 802319c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80231a0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80231a2:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 80231a6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80231a8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80231ac:	f100 81fa 	bmi.w	80235a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80231b0:	f102 3eff 	add.w	lr, r2, #4294967295
 80231b4:	4575      	cmp	r5, lr
 80231b6:	f280 81f5 	bge.w	80235a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80231ba:	2800      	cmp	r0, #0
 80231bc:	f2c0 81f2 	blt.w	80235a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80231c0:	f103 3eff 	add.w	lr, r3, #4294967295
 80231c4:	4570      	cmp	r0, lr
 80231c6:	f280 81ed 	bge.w	80235a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80231ca:	b212      	sxth	r2, r2
 80231cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80231ce:	fa1f fe81 	uxth.w	lr, r1
 80231d2:	fb00 5002 	mla	r0, r0, r2, r5
 80231d6:	ea4f 150e 	mov.w	r5, lr, lsl #4
 80231da:	eb03 0a00 	add.w	sl, r3, r0
 80231de:	f813 9000 	ldrb.w	r9, [r3, r0]
 80231e2:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 80231e6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80231ea:	b29b      	uxth	r3, r3
 80231ec:	f1bc 0f00 	cmp.w	ip, #0
 80231f0:	f000 81bb 	beq.w	802356a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80231f4:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80231f8:	eb0a 0b02 	add.w	fp, sl, r2
 80231fc:	fa1f fa8c 	uxth.w	sl, ip
 8023200:	940d      	str	r4, [sp, #52]	; 0x34
 8023202:	fb0a fe0e 	mul.w	lr, sl, lr
 8023206:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802320a:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802320e:	eba5 050e 	sub.w	r5, r5, lr
 8023212:	940e      	str	r4, [sp, #56]	; 0x38
 8023214:	fa1f fa8a 	uxth.w	sl, sl
 8023218:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802321a:	b2ad      	uxth	r5, r5
 802321c:	eba3 030a 	sub.w	r3, r3, sl
 8023220:	fb08 f505 	mul.w	r5, r8, r5
 8023224:	b29b      	uxth	r3, r3
 8023226:	fb09 5303 	mla	r3, r9, r3, r5
 802322a:	fb0a 3304 	mla	r3, sl, r4, r3
 802322e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023230:	fb0e 3304 	mla	r3, lr, r4, r3
 8023234:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023238:	2b00      	cmp	r3, #0
 802323a:	f000 8111 	beq.w	8023460 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802323e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023240:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023244:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8023248:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 802324c:	f000 8192 	beq.w	8023574 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8023250:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8023254:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8023258:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802325c:	fb0a fe0e 	mul.w	lr, sl, lr
 8023260:	fb09 f000 	mul.w	r0, r9, r0
 8023264:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8023268:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 802326c:	f100 0b20 	add.w	fp, r0, #32
 8023270:	44ce      	add	lr, r9
 8023272:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8023276:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802327a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802327e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8023282:	ea4e 0909 	orr.w	r9, lr, r9
 8023286:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802328a:	8868      	ldrh	r0, [r5, #2]
 802328c:	d019      	beq.n	80232c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 802328e:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8023292:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8023296:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802329a:	fb0a fe0e 	mul.w	lr, sl, lr
 802329e:	fb08 f800 	mul.w	r8, r8, r0
 80232a2:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 80232a6:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80232aa:	f108 0b20 	add.w	fp, r8, #32
 80232ae:	4486      	add	lr, r0
 80232b0:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 80232b4:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80232b8:	0a00      	lsrs	r0, r0, #8
 80232ba:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80232be:	ea4e 0000 	orr.w	r0, lr, r0
 80232c2:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 80232c6:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80232ca:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80232ce:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80232d2:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80232d6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80232da:	ea4e 0909 	orr.w	r9, lr, r9
 80232de:	ea4a 0000 	orr.w	r0, sl, r0
 80232e2:	f1bc 0f00 	cmp.w	ip, #0
 80232e6:	f000 8147 	beq.w	8023578 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 80232ea:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80232ee:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80232f0:	3a01      	subs	r2, #1
 80232f2:	2cff      	cmp	r4, #255	; 0xff
 80232f4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80232f8:	f102 0202 	add.w	r2, r2, #2
 80232fc:	eb05 0e02 	add.w	lr, r5, r2
 8023300:	5aaa      	ldrh	r2, [r5, r2]
 8023302:	d018      	beq.n	8023336 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8023304:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8023308:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802330c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8023310:	fb04 fa02 	mul.w	sl, r4, r2
 8023314:	fb08 f805 	mul.w	r8, r8, r5
 8023318:	f10a 0520 	add.w	r5, sl, #32
 802331c:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8023320:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8023324:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8023328:	4442      	add	r2, r8
 802332a:	0a2d      	lsrs	r5, r5, #8
 802332c:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8023330:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8023334:	432a      	orrs	r2, r5
 8023336:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023338:	f8be 5002 	ldrh.w	r5, [lr, #2]
 802333c:	2cff      	cmp	r4, #255	; 0xff
 802333e:	d01a      	beq.n	8023376 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2aa>
 8023340:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8023344:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8023348:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802334c:	fb04 fa05 	mul.w	sl, r4, r5
 8023350:	fb08 f80e 	mul.w	r8, r8, lr
 8023354:	f10a 0e20 	add.w	lr, sl, #32
 8023358:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 802335c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8023360:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8023364:	4445      	add	r5, r8
 8023366:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802336a:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 802336e:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8023372:	ea45 050e 	orr.w	r5, r5, lr
 8023376:	fb1c fe01 	smulbb	lr, ip, r1
 802337a:	f1cc 0810 	rsb	r8, ip, #16
 802337e:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8023382:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023386:	ea4f 0eee 	mov.w	lr, lr, asr #3
 802338a:	eba8 0801 	sub.w	r8, r8, r1
 802338e:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8023392:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023396:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 802339a:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 802339e:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80233a2:	ea4a 0202 	orr.w	r2, sl, r2
 80233a6:	4341      	muls	r1, r0
 80233a8:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 80233ac:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80233b0:	fb09 1108 	mla	r1, r9, r8, r1
 80233b4:	ea4b 0505 	orr.w	r5, fp, r5
 80233b8:	fb0c 1102 	mla	r1, ip, r2, r1
 80233bc:	fb0e 1e05 	mla	lr, lr, r5, r1
 80233c0:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80233c4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80233c8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80233cc:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80233d0:	ea42 0e0e 	orr.w	lr, r2, lr
 80233d4:	fa1f f28e 	uxth.w	r2, lr
 80233d8:	2bff      	cmp	r3, #255	; 0xff
 80233da:	d103      	bne.n	80233e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 80233dc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80233de:	29ff      	cmp	r1, #255	; 0xff
 80233e0:	f000 80de 	beq.w	80235a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 80233e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80233e6:	1215      	asrs	r5, r2, #8
 80233e8:	8838      	ldrh	r0, [r7, #0]
 80233ea:	434b      	muls	r3, r1
 80233ec:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80233f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80233f2:	f103 0c01 	add.w	ip, r3, #1
 80233f6:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 80233fa:	ea6f 2323 	mvn.w	r3, r3, asr #8
 80233fe:	fa5f fc83 	uxtb.w	ip, r3
 8023402:	1203      	asrs	r3, r0, #8
 8023404:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8023408:	fb13 f30c 	smulbb	r3, r3, ip
 802340c:	fb05 3501 	mla	r5, r5, r1, r3
 8023410:	10c3      	asrs	r3, r0, #3
 8023412:	10d1      	asrs	r1, r2, #3
 8023414:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8023418:	00d2      	lsls	r2, r2, #3
 802341a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802341e:	b2ad      	uxth	r5, r5
 8023420:	fb13 f30c 	smulbb	r3, r3, ip
 8023424:	b2d2      	uxtb	r2, r2
 8023426:	fb01 3104 	mla	r1, r1, r4, r3
 802342a:	00c3      	lsls	r3, r0, #3
 802342c:	b2db      	uxtb	r3, r3
 802342e:	b289      	uxth	r1, r1
 8023430:	fb13 f30c 	smulbb	r3, r3, ip
 8023434:	fb02 3304 	mla	r3, r2, r4, r3
 8023438:	b29a      	uxth	r2, r3
 802343a:	1c6b      	adds	r3, r5, #1
 802343c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8023440:	1c53      	adds	r3, r2, #1
 8023442:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023446:	1c4a      	adds	r2, r1, #1
 8023448:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802344c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8023450:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023454:	0949      	lsrs	r1, r1, #5
 8023456:	432b      	orrs	r3, r5
 8023458:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802345c:	430b      	orrs	r3, r1
 802345e:	803b      	strh	r3, [r7, #0]
 8023460:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023462:	3702      	adds	r7, #2
 8023464:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023466:	4413      	add	r3, r2
 8023468:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802346a:	9329      	str	r3, [sp, #164]	; 0xa4
 802346c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802346e:	441a      	add	r2, r3
 8023470:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023472:	3b01      	subs	r3, #1
 8023474:	922a      	str	r2, [sp, #168]	; 0xa8
 8023476:	9313      	str	r3, [sp, #76]	; 0x4c
 8023478:	e687      	b.n	802318a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 802347a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802347c:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 802347e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8023480:	4433      	add	r3, r6
 8023482:	9329      	str	r3, [sp, #164]	; 0xa4
 8023484:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023486:	441c      	add	r4, r3
 8023488:	9b08      	ldr	r3, [sp, #32]
 802348a:	3b01      	subs	r3, #1
 802348c:	942a      	str	r4, [sp, #168]	; 0xa8
 802348e:	9308      	str	r3, [sp, #32]
 8023490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023492:	3302      	adds	r3, #2
 8023494:	9309      	str	r3, [sp, #36]	; 0x24
 8023496:	e656      	b.n	8023146 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8023498:	d028      	beq.n	80234ec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 802349a:	9b08      	ldr	r3, [sp, #32]
 802349c:	982b      	ldr	r0, [sp, #172]	; 0xac
 802349e:	3b01      	subs	r3, #1
 80234a0:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 80234a2:	fb00 5003 	mla	r0, r0, r3, r5
 80234a6:	1400      	asrs	r0, r0, #16
 80234a8:	f53f ae6a 	bmi.w	8023180 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80234ac:	3901      	subs	r1, #1
 80234ae:	4288      	cmp	r0, r1
 80234b0:	f6bf ae66 	bge.w	8023180 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80234b4:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80234b6:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80234b8:	fb01 0303 	mla	r3, r1, r3, r0
 80234bc:	141b      	asrs	r3, r3, #16
 80234be:	f53f ae5f 	bmi.w	8023180 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80234c2:	3a01      	subs	r2, #1
 80234c4:	4293      	cmp	r3, r2
 80234c6:	f6bf ae5b 	bge.w	8023180 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80234ca:	9b08      	ldr	r3, [sp, #32]
 80234cc:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80234d0:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 80234d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80234d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80234d8:	2b00      	cmp	r3, #0
 80234da:	f300 8082 	bgt.w	80235e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 80234de:	9b08      	ldr	r3, [sp, #32]
 80234e0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80234e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80234e6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80234ea:	9309      	str	r3, [sp, #36]	; 0x24
 80234ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80234ee:	2b00      	cmp	r3, #0
 80234f0:	f340 81ef 	ble.w	80238d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 80234f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80234f8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80234fa:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80234fe:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023502:	eef0 6a48 	vmov.f32	s13, s16
 8023506:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802350a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802350e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023512:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8023516:	eef0 6a68 	vmov.f32	s13, s17
 802351a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802351e:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8023522:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023526:	ee69 7a27 	vmul.f32	s15, s18, s15
 802352a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802352e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023532:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023536:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802353a:	ee18 2a10 	vmov	r2, s16
 802353e:	eeb0 8a47 	vmov.f32	s16, s14
 8023542:	fb92 f3f3 	sdiv	r3, r2, r3
 8023546:	ee18 2a90 	vmov	r2, s17
 802354a:	932b      	str	r3, [sp, #172]	; 0xac
 802354c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802354e:	eef0 8a67 	vmov.f32	s17, s15
 8023552:	fb92 f3f3 	sdiv	r3, r2, r3
 8023556:	932c      	str	r3, [sp, #176]	; 0xb0
 8023558:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802355a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802355c:	3b01      	subs	r3, #1
 802355e:	9311      	str	r3, [sp, #68]	; 0x44
 8023560:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023562:	bf08      	it	eq
 8023564:	4613      	moveq	r3, r2
 8023566:	9308      	str	r3, [sp, #32]
 8023568:	e5df      	b.n	802312a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802356a:	fb08 f505 	mul.w	r5, r8, r5
 802356e:	fb09 5303 	mla	r3, r9, r3, r5
 8023572:	e65f      	b.n	8023234 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x168>
 8023574:	4681      	mov	r9, r0
 8023576:	e686      	b.n	8023286 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8023578:	f1c1 0210 	rsb	r2, r1, #16
 802357c:	4341      	muls	r1, r0
 802357e:	fb09 1902 	mla	r9, r9, r2, r1
 8023582:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8023586:	ea4f 5259 	mov.w	r2, r9, lsr #21
 802358a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802358e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023592:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8023596:	ea42 0909 	orr.w	r9, r2, r9
 802359a:	fa1f f289 	uxth.w	r2, r9
 802359e:	e71b      	b.n	80233d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80235a0:	803a      	strh	r2, [r7, #0]
 80235a2:	e75d      	b.n	8023460 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80235a4:	f115 0e01 	adds.w	lr, r5, #1
 80235a8:	f53f af5a 	bmi.w	8023460 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80235ac:	4572      	cmp	r2, lr
 80235ae:	f6ff af57 	blt.w	8023460 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80235b2:	f110 0e01 	adds.w	lr, r0, #1
 80235b6:	f53f af53 	bmi.w	8023460 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80235ba:	4573      	cmp	r3, lr
 80235bc:	f6ff af50 	blt.w	8023460 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80235c0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80235c2:	b21b      	sxth	r3, r3
 80235c4:	b212      	sxth	r2, r2
 80235c6:	9502      	str	r5, [sp, #8]
 80235c8:	9301      	str	r3, [sp, #4]
 80235ca:	9200      	str	r2, [sp, #0]
 80235cc:	e9cd 0103 	strd	r0, r1, [sp, #12]
 80235d0:	e9cd c405 	strd	ip, r4, [sp, #20]
 80235d4:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 80235d8:	4639      	mov	r1, r7
 80235da:	9815      	ldr	r0, [sp, #84]	; 0x54
 80235dc:	f7ff fbd0 	bl	8022d80 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 80235e0:	e73e      	b.n	8023460 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80235e2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80235e4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80235e8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80235ea:	f3c3 3503 	ubfx	r5, r3, #12, #4
 80235ee:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80235f0:	fa1f fc82 	uxth.w	ip, r2
 80235f4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80235f8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80235fa:	ea4f 100c 	mov.w	r0, ip, lsl #4
 80235fe:	141f      	asrs	r7, r3, #16
 8023600:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023602:	141b      	asrs	r3, r3, #16
 8023604:	fb01 3707 	mla	r7, r1, r7, r3
 8023608:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802360a:	eb03 0a07 	add.w	sl, r3, r7
 802360e:	f813 9007 	ldrb.w	r9, [r3, r7]
 8023612:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8023616:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802361a:	b29b      	uxth	r3, r3
 802361c:	2d00      	cmp	r5, #0
 802361e:	f000 813d 	beq.w	802389c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d0>
 8023622:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8023626:	eb0a 0b01 	add.w	fp, sl, r1
 802362a:	fa1f fa85 	uxth.w	sl, r5
 802362e:	940f      	str	r4, [sp, #60]	; 0x3c
 8023630:	fb0a fc0c 	mul.w	ip, sl, ip
 8023634:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8023638:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 802363c:	eba0 000c 	sub.w	r0, r0, ip
 8023640:	9410      	str	r4, [sp, #64]	; 0x40
 8023642:	fa1f fa8a 	uxth.w	sl, sl
 8023646:	b280      	uxth	r0, r0
 8023648:	eba3 030a 	sub.w	r3, r3, sl
 802364c:	fb08 f000 	mul.w	r0, r8, r0
 8023650:	b29b      	uxth	r3, r3
 8023652:	fb09 0303 	mla	r3, r9, r3, r0
 8023656:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8023658:	fb0a 3300 	mla	r3, sl, r0, r3
 802365c:	fb0c 3304 	mla	r3, ip, r4, r3
 8023660:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023664:	2b00      	cmp	r3, #0
 8023666:	f000 810b 	beq.w	8023880 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 802366a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 802366c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023670:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023672:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8023676:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 802367a:	f000 8114 	beq.w	80238a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7da>
 802367e:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8023682:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8023686:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802368a:	fb0a fc0c 	mul.w	ip, sl, ip
 802368e:	fb09 f707 	mul.w	r7, r9, r7
 8023692:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8023696:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 802369a:	f107 0b20 	add.w	fp, r7, #32
 802369e:	44cc      	add	ip, r9
 80236a0:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 80236a4:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80236a8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80236ac:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80236b0:	ea4c 0909 	orr.w	r9, ip, r9
 80236b4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80236b8:	8847      	ldrh	r7, [r0, #2]
 80236ba:	d019      	beq.n	80236f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x624>
 80236bc:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80236c0:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80236c4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80236c8:	fb0a fc0c 	mul.w	ip, sl, ip
 80236cc:	fb08 f807 	mul.w	r8, r8, r7
 80236d0:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 80236d4:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80236d8:	f108 0b20 	add.w	fp, r8, #32
 80236dc:	44bc      	add	ip, r7
 80236de:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 80236e2:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80236e6:	0a3f      	lsrs	r7, r7, #8
 80236e8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80236ec:	ea4c 0707 	orr.w	r7, ip, r7
 80236f0:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 80236f4:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80236f8:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80236fc:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8023700:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8023704:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023708:	ea4c 0909 	orr.w	r9, ip, r9
 802370c:	ea4a 0707 	orr.w	r7, sl, r7
 8023710:	2d00      	cmp	r5, #0
 8023712:	f000 80ca 	beq.w	80238aa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8023716:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 802371a:	3901      	subs	r1, #1
 802371c:	0049      	lsls	r1, r1, #1
 802371e:	3102      	adds	r1, #2
 8023720:	eb00 0c01 	add.w	ip, r0, r1
 8023724:	5a41      	ldrh	r1, [r0, r1]
 8023726:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8023728:	28ff      	cmp	r0, #255	; 0xff
 802372a:	d019      	beq.n	8023760 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x694>
 802372c:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8023730:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023732:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023736:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802373a:	fb04 fa01 	mul.w	sl, r4, r1
 802373e:	fb08 f800 	mul.w	r8, r8, r0
 8023742:	f10a 0020 	add.w	r0, sl, #32
 8023746:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 802374a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802374e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8023752:	4441      	add	r1, r8
 8023754:	0a00      	lsrs	r0, r0, #8
 8023756:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 802375a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802375e:	4301      	orrs	r1, r0
 8023760:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023762:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8023766:	2cff      	cmp	r4, #255	; 0xff
 8023768:	d01a      	beq.n	80237a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d4>
 802376a:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 802376e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023772:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8023776:	fb04 fa00 	mul.w	sl, r4, r0
 802377a:	fb08 f80c 	mul.w	r8, r8, ip
 802377e:	f10a 0c20 	add.w	ip, sl, #32
 8023782:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8023786:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802378a:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 802378e:	4440      	add	r0, r8
 8023790:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023794:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8023798:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802379c:	ea40 000c 	orr.w	r0, r0, ip
 80237a0:	fb15 fc02 	smulbb	ip, r5, r2
 80237a4:	f1c5 0810 	rsb	r8, r5, #16
 80237a8:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80237ac:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80237b0:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80237b4:	eba8 0802 	sub.w	r8, r8, r2
 80237b8:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80237bc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80237c0:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 80237c4:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80237c8:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 80237cc:	ea4a 0101 	orr.w	r1, sl, r1
 80237d0:	437a      	muls	r2, r7
 80237d2:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 80237d6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80237da:	fb09 2208 	mla	r2, r9, r8, r2
 80237de:	ea4b 0000 	orr.w	r0, fp, r0
 80237e2:	fb05 2201 	mla	r2, r5, r1, r2
 80237e6:	fb0c 2200 	mla	r2, ip, r0, r2
 80237ea:	0d57      	lsrs	r7, r2, #21
 80237ec:	0952      	lsrs	r2, r2, #5
 80237ee:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80237f2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80237f6:	433a      	orrs	r2, r7
 80237f8:	2bff      	cmp	r3, #255	; 0xff
 80237fa:	b292      	uxth	r2, r2
 80237fc:	d102      	bne.n	8023804 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 80237fe:	9912      	ldr	r1, [sp, #72]	; 0x48
 8023800:	29ff      	cmp	r1, #255	; 0xff
 8023802:	d063      	beq.n	80238cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x800>
 8023804:	980a      	ldr	r0, [sp, #40]	; 0x28
 8023806:	1215      	asrs	r5, r2, #8
 8023808:	f8be 1000 	ldrh.w	r1, [lr]
 802380c:	4343      	muls	r3, r0
 802380e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023810:	10cf      	asrs	r7, r1, #3
 8023812:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8023816:	1c58      	adds	r0, r3, #1
 8023818:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802381c:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8023820:	1208      	asrs	r0, r1, #8
 8023822:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8023826:	00c9      	lsls	r1, r1, #3
 8023828:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802382c:	b2db      	uxtb	r3, r3
 802382e:	b2c9      	uxtb	r1, r1
 8023830:	fb10 f003 	smulbb	r0, r0, r3
 8023834:	fb11 f103 	smulbb	r1, r1, r3
 8023838:	fb05 0504 	mla	r5, r5, r4, r0
 802383c:	10d0      	asrs	r0, r2, #3
 802383e:	fb17 f703 	smulbb	r7, r7, r3
 8023842:	00d2      	lsls	r2, r2, #3
 8023844:	b2ad      	uxth	r5, r5
 8023846:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802384a:	b2d2      	uxtb	r2, r2
 802384c:	fb00 7004 	mla	r0, r0, r4, r7
 8023850:	1c6b      	adds	r3, r5, #1
 8023852:	fb02 1204 	mla	r2, r2, r4, r1
 8023856:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802385a:	b292      	uxth	r2, r2
 802385c:	b280      	uxth	r0, r0
 802385e:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8023862:	1c57      	adds	r7, r2, #1
 8023864:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8023868:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802386c:	433d      	orrs	r5, r7
 802386e:	1c47      	adds	r7, r0, #1
 8023870:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8023874:	097f      	lsrs	r7, r7, #5
 8023876:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802387a:	433d      	orrs	r5, r7
 802387c:	f8ae 5000 	strh.w	r5, [lr]
 8023880:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023882:	f10e 0e02 	add.w	lr, lr, #2
 8023886:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023888:	4413      	add	r3, r2
 802388a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802388c:	9329      	str	r3, [sp, #164]	; 0xa4
 802388e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023890:	441a      	add	r2, r3
 8023892:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023894:	3b01      	subs	r3, #1
 8023896:	922a      	str	r2, [sp, #168]	; 0xa8
 8023898:	9313      	str	r3, [sp, #76]	; 0x4c
 802389a:	e61c      	b.n	80234d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 802389c:	fb08 f000 	mul.w	r0, r8, r0
 80238a0:	fb09 0303 	mla	r3, r9, r3, r0
 80238a4:	e6dc      	b.n	8023660 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x594>
 80238a6:	46b9      	mov	r9, r7
 80238a8:	e704      	b.n	80236b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e8>
 80238aa:	f1c2 0110 	rsb	r1, r2, #16
 80238ae:	437a      	muls	r2, r7
 80238b0:	fb09 2901 	mla	r9, r9, r1, r2
 80238b4:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80238b8:	ea4f 5059 	mov.w	r0, r9, lsr #21
 80238bc:	ea4f 1259 	mov.w	r2, r9, lsr #5
 80238c0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80238c4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80238c8:	4302      	orrs	r2, r0
 80238ca:	e795      	b.n	80237f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>
 80238cc:	f8ae 2000 	strh.w	r2, [lr]
 80238d0:	e7d6      	b.n	8023880 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 80238d2:	b017      	add	sp, #92	; 0x5c
 80238d4:	ecbd 8b08 	vpop	{d8-d11}
 80238d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080238dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 80238dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80238e0:	b085      	sub	sp, #20
 80238e2:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 80238e6:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 80238ea:	9103      	str	r1, [sp, #12]
 80238ec:	2d00      	cmp	r5, #0
 80238ee:	fb05 7106 	mla	r1, r5, r6, r7
 80238f2:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80238f6:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80238fa:	eb03 0441 	add.w	r4, r3, r1, lsl #1
 80238fe:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8023902:	eb02 0901 	add.w	r9, r2, r1
 8023906:	9401      	str	r4, [sp, #4]
 8023908:	f2c0 80c0 	blt.w	8023a8c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 802390c:	45a8      	cmp	r8, r5
 802390e:	f340 80bd 	ble.w	8023a8c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 8023912:	2f00      	cmp	r7, #0
 8023914:	f2c0 80b6 	blt.w	8023a84 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 8023918:	42be      	cmp	r6, r7
 802391a:	f340 80b3 	ble.w	8023a84 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 802391e:	f812 c001 	ldrb.w	ip, [r2, r1]
 8023922:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8023926:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802392a:	d019      	beq.n	8023960 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x84>
 802392c:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 8023930:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8023934:	435a      	muls	r2, r3
 8023936:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 802393a:	f64f 011f 	movw	r1, #63519	; 0xf81f
 802393e:	fb0c f403 	mul.w	r4, ip, r3
 8023942:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 8023946:	f602 0201 	addw	r2, r2, #2049	; 0x801
 802394a:	441a      	add	r2, r3
 802394c:	f104 0320 	add.w	r3, r4, #32
 8023950:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8023954:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 8023958:	0a1b      	lsrs	r3, r3, #8
 802395a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802395e:	4319      	orrs	r1, r3
 8023960:	b289      	uxth	r1, r1
 8023962:	1c7b      	adds	r3, r7, #1
 8023964:	f100 8097 	bmi.w	8023a96 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 8023968:	429e      	cmp	r6, r3
 802396a:	f340 8094 	ble.w	8023a96 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 802396e:	2800      	cmp	r0, #0
 8023970:	f000 8094 	beq.w	8023a9c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c0>
 8023974:	f899 4001 	ldrb.w	r4, [r9, #1]
 8023978:	9b01      	ldr	r3, [sp, #4]
 802397a:	2cff      	cmp	r4, #255	; 0xff
 802397c:	885b      	ldrh	r3, [r3, #2]
 802397e:	d01b      	beq.n	80239b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xdc>
 8023980:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8023984:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8023988:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802398c:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8023990:	fb0a f202 	mul.w	r2, sl, r2
 8023994:	fb04 fa03 	mul.w	sl, r4, r3
 8023998:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 802399c:	f602 0201 	addw	r2, r2, #2049	; 0x801
 80239a0:	441a      	add	r2, r3
 80239a2:	f10a 0320 	add.w	r3, sl, #32
 80239a6:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80239aa:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 80239ae:	0a1b      	lsrs	r3, r3, #8
 80239b0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80239b4:	ea4b 0303 	orr.w	r3, fp, r3
 80239b8:	b29b      	uxth	r3, r3
 80239ba:	3501      	adds	r5, #1
 80239bc:	d474      	bmi.n	8023aa8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 80239be:	45a8      	cmp	r8, r5
 80239c0:	dd72      	ble.n	8023aa8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 80239c2:	f1be 0f00 	cmp.w	lr, #0
 80239c6:	f000 8110 	beq.w	8023bea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x30e>
 80239ca:	2f00      	cmp	r7, #0
 80239cc:	db69      	blt.n	8023aa2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 80239ce:	42be      	cmp	r6, r7
 80239d0:	dd67      	ble.n	8023aa2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 80239d2:	f819 5006 	ldrb.w	r5, [r9, r6]
 80239d6:	9a01      	ldr	r2, [sp, #4]
 80239d8:	2dff      	cmp	r5, #255	; 0xff
 80239da:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 80239de:	d01c      	beq.n	8023a1a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x13e>
 80239e0:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 80239e4:	ea4f 08e5 	mov.w	r8, r5, asr #3
 80239e8:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80239ec:	fb08 f802 	mul.w	r8, r8, r2
 80239f0:	fb05 fa0b 	mul.w	sl, r5, fp
 80239f4:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80239f8:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 80239fc:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8023a00:	4490      	add	r8, r2
 8023a02:	f10a 0220 	add.w	r2, sl, #32
 8023a06:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 8023a0a:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 8023a0e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023a12:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8023a16:	ea4b 0b0a 	orr.w	fp, fp, sl
 8023a1a:	fa1f fb8b 	uxth.w	fp, fp
 8023a1e:	3701      	adds	r7, #1
 8023a20:	d447      	bmi.n	8023ab2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 8023a22:	42be      	cmp	r6, r7
 8023a24:	dd45      	ble.n	8023ab2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 8023a26:	2800      	cmp	r0, #0
 8023a28:	d046      	beq.n	8023ab8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1dc>
 8023a2a:	3601      	adds	r6, #1
 8023a2c:	9a01      	ldr	r2, [sp, #4]
 8023a2e:	f819 7006 	ldrb.w	r7, [r9, r6]
 8023a32:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 8023a36:	2fff      	cmp	r7, #255	; 0xff
 8023a38:	d01a      	beq.n	8023a70 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x194>
 8023a3a:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 8023a3e:	ea4f 08e7 	mov.w	r8, r7, asr #3
 8023a42:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023a46:	fb08 f806 	mul.w	r8, r8, r6
 8023a4a:	fb07 f902 	mul.w	r9, r7, r2
 8023a4e:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8023a52:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 8023a56:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8023a5a:	44b0      	add	r8, r6
 8023a5c:	f109 0620 	add.w	r6, r9, #32
 8023a60:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8023a64:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8023a68:	0a36      	lsrs	r6, r6, #8
 8023a6a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8023a6e:	4332      	orrs	r2, r6
 8023a70:	b292      	uxth	r2, r2
 8023a72:	280f      	cmp	r0, #15
 8023a74:	d922      	bls.n	8023abc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 8023a76:	4b61      	ldr	r3, [pc, #388]	; (8023bfc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x320>)
 8023a78:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8023a7c:	4a60      	ldr	r2, [pc, #384]	; (8023c00 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>)
 8023a7e:	4861      	ldr	r0, [pc, #388]	; (8023c04 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x328>)
 8023a80:	f003 fcc0 	bl	8027404 <__assert_func>
 8023a84:	f04f 0c00 	mov.w	ip, #0
 8023a88:	4661      	mov	r1, ip
 8023a8a:	e76a      	b.n	8023962 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8023a8c:	2400      	movs	r4, #0
 8023a8e:	46a4      	mov	ip, r4
 8023a90:	4623      	mov	r3, r4
 8023a92:	4621      	mov	r1, r4
 8023a94:	e791      	b.n	80239ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8023a96:	2400      	movs	r4, #0
 8023a98:	4623      	mov	r3, r4
 8023a9a:	e78e      	b.n	80239ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8023a9c:	4604      	mov	r4, r0
 8023a9e:	4603      	mov	r3, r0
 8023aa0:	e78b      	b.n	80239ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8023aa2:	2500      	movs	r5, #0
 8023aa4:	46ab      	mov	fp, r5
 8023aa6:	e7ba      	b.n	8023a1e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x142>
 8023aa8:	2700      	movs	r7, #0
 8023aaa:	463d      	mov	r5, r7
 8023aac:	463a      	mov	r2, r7
 8023aae:	46bb      	mov	fp, r7
 8023ab0:	e7df      	b.n	8023a72 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 8023ab2:	2700      	movs	r7, #0
 8023ab4:	463a      	mov	r2, r7
 8023ab6:	e7dc      	b.n	8023a72 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 8023ab8:	4607      	mov	r7, r0
 8023aba:	4602      	mov	r2, r0
 8023abc:	f1be 0f0f 	cmp.w	lr, #15
 8023ac0:	d8d9      	bhi.n	8023a76 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 8023ac2:	b286      	uxth	r6, r0
 8023ac4:	fa1f f98e 	uxth.w	r9, lr
 8023ac8:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8023acc:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8023ad0:	fb06 f809 	mul.w	r8, r6, r9
 8023ad4:	0136      	lsls	r6, r6, #4
 8023ad6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023ada:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8023ade:	9601      	str	r6, [sp, #4]
 8023ae0:	ea4a 0101 	orr.w	r1, sl, r1
 8023ae4:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8023ae8:	fa1f f689 	uxth.w	r6, r9
 8023aec:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023af0:	fb10 f90e 	smulbb	r9, r0, lr
 8023af4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023af8:	9602      	str	r6, [sp, #8]
 8023afa:	460e      	mov	r6, r1
 8023afc:	ea4f 09e9 	mov.w	r9, r9, asr #3
 8023b00:	f1ce 0110 	rsb	r1, lr, #16
 8023b04:	ea4a 0303 	orr.w	r3, sl, r3
 8023b08:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8023b0c:	1a09      	subs	r1, r1, r0
 8023b0e:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 8023b12:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023b16:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023b1a:	4343      	muls	r3, r0
 8023b1c:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 8023b20:	ea4a 0202 	orr.w	r2, sl, r2
 8023b24:	9802      	ldr	r0, [sp, #8]
 8023b26:	fb01 3106 	mla	r1, r1, r6, r3
 8023b2a:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 8023b2e:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8023b32:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8023b36:	fb09 1302 	mla	r3, r9, r2, r1
 8023b3a:	9a03      	ldr	r2, [sp, #12]
 8023b3c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023b40:	8811      	ldrh	r1, [r2, #0]
 8023b42:	9a01      	ldr	r2, [sp, #4]
 8023b44:	ea4a 0b0b 	orr.w	fp, sl, fp
 8023b48:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8023b4c:	fb0e 3e0b 	mla	lr, lr, fp, r3
 8023b50:	1a12      	subs	r2, r2, r0
 8023b52:	9801      	ldr	r0, [sp, #4]
 8023b54:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8023b58:	eba0 0608 	sub.w	r6, r0, r8
 8023b5c:	b292      	uxth	r2, r2
 8023b5e:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8023b62:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023b66:	b2b6      	uxth	r6, r6
 8023b68:	10c8      	asrs	r0, r1, #3
 8023b6a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8023b6e:	4374      	muls	r4, r6
 8023b70:	ea43 0e0e 	orr.w	lr, r3, lr
 8023b74:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8023b78:	fb0c 4402 	mla	r4, ip, r2, r4
 8023b7c:	9a02      	ldr	r2, [sp, #8]
 8023b7e:	fa1f f38e 	uxth.w	r3, lr
 8023b82:	fb02 4505 	mla	r5, r2, r5, r4
 8023b86:	120a      	asrs	r2, r1, #8
 8023b88:	00c9      	lsls	r1, r1, #3
 8023b8a:	fb08 5707 	mla	r7, r8, r7, r5
 8023b8e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8023b92:	b2c9      	uxtb	r1, r1
 8023b94:	ea6f 2727 	mvn.w	r7, r7, asr #8
 8023b98:	b2ff      	uxtb	r7, r7
 8023b9a:	437a      	muls	r2, r7
 8023b9c:	4378      	muls	r0, r7
 8023b9e:	434f      	muls	r7, r1
 8023ba0:	1c51      	adds	r1, r2, #1
 8023ba2:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8023ba6:	121a      	asrs	r2, r3, #8
 8023ba8:	f022 0207 	bic.w	r2, r2, #7
 8023bac:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8023bb0:	1c41      	adds	r1, r0, #1
 8023bb2:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8023bb6:	10d9      	asrs	r1, r3, #3
 8023bb8:	0212      	lsls	r2, r2, #8
 8023bba:	f021 0103 	bic.w	r1, r1, #3
 8023bbe:	00db      	lsls	r3, r3, #3
 8023bc0:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8023bc4:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8023bc8:	00c9      	lsls	r1, r1, #3
 8023bca:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023bce:	430a      	orrs	r2, r1
 8023bd0:	1c79      	adds	r1, r7, #1
 8023bd2:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8023bd6:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8023bda:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8023bde:	4313      	orrs	r3, r2
 8023be0:	9a03      	ldr	r2, [sp, #12]
 8023be2:	8013      	strh	r3, [r2, #0]
 8023be4:	b005      	add	sp, #20
 8023be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023bea:	280f      	cmp	r0, #15
 8023bec:	f63f af43 	bhi.w	8023a76 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 8023bf0:	4677      	mov	r7, lr
 8023bf2:	4675      	mov	r5, lr
 8023bf4:	4672      	mov	r2, lr
 8023bf6:	46f3      	mov	fp, lr
 8023bf8:	e763      	b.n	8023ac2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e6>
 8023bfa:	bf00      	nop
 8023bfc:	0802e3b6 	.word	0x0802e3b6
 8023c00:	0802e986 	.word	0x0802e986
 8023c04:	0802e43a 	.word	0x0802e43a

08023c08 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c0c:	ed2d 8b08 	vpush	{d8-d11}
 8023c10:	b093      	sub	sp, #76	; 0x4c
 8023c12:	eeb0 aa40 	vmov.f32	s20, s0
 8023c16:	eef0 9a60 	vmov.f32	s19, s1
 8023c1a:	9210      	str	r2, [sp, #64]	; 0x40
 8023c1c:	eeb0 9a41 	vmov.f32	s18, s2
 8023c20:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023c22:	eeb0 8a62 	vmov.f32	s16, s5
 8023c26:	9011      	str	r0, [sp, #68]	; 0x44
 8023c28:	eef0 8a43 	vmov.f32	s17, s6
 8023c2c:	6850      	ldr	r0, [r2, #4]
 8023c2e:	eef0 ba44 	vmov.f32	s23, s8
 8023c32:	910e      	str	r1, [sp, #56]	; 0x38
 8023c34:	eeb0 ba64 	vmov.f32	s22, s9
 8023c38:	9306      	str	r3, [sp, #24]
 8023c3a:	eef0 aa45 	vmov.f32	s21, s10
 8023c3e:	6812      	ldr	r2, [r2, #0]
 8023c40:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8023c44:	fb00 1303 	mla	r3, r0, r3, r1
 8023c48:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023c4c:	9307      	str	r3, [sp, #28]
 8023c4e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023c50:	681b      	ldr	r3, [r3, #0]
 8023c52:	9308      	str	r3, [sp, #32]
 8023c54:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023c56:	685b      	ldr	r3, [r3, #4]
 8023c58:	9309      	str	r3, [sp, #36]	; 0x24
 8023c5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023c5c:	2b00      	cmp	r3, #0
 8023c5e:	dc03      	bgt.n	8023c68 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8023c60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023c62:	2b00      	cmp	r3, #0
 8023c64:	f340 83b6 	ble.w	80243d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 8023c68:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023c6a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023c6e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023c72:	1e48      	subs	r0, r1, #1
 8023c74:	1e55      	subs	r5, r2, #1
 8023c76:	9b06      	ldr	r3, [sp, #24]
 8023c78:	2b00      	cmp	r3, #0
 8023c7a:	f340 8165 	ble.w	8023f48 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 8023c7e:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8023c80:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023c82:	1436      	asrs	r6, r6, #16
 8023c84:	ea4f 4323 	mov.w	r3, r3, asr #16
 8023c88:	d406      	bmi.n	8023c98 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023c8a:	4286      	cmp	r6, r0
 8023c8c:	da04      	bge.n	8023c98 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023c8e:	2b00      	cmp	r3, #0
 8023c90:	db02      	blt.n	8023c98 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023c92:	42ab      	cmp	r3, r5
 8023c94:	f2c0 8159 	blt.w	8023f4a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8023c98:	3601      	adds	r6, #1
 8023c9a:	f100 8146 	bmi.w	8023f2a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8023c9e:	42b1      	cmp	r1, r6
 8023ca0:	f2c0 8143 	blt.w	8023f2a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8023ca4:	3301      	adds	r3, #1
 8023ca6:	f100 8140 	bmi.w	8023f2a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8023caa:	429a      	cmp	r2, r3
 8023cac:	f2c0 813d 	blt.w	8023f2a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8023cb0:	9b06      	ldr	r3, [sp, #24]
 8023cb2:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8023cb6:	9f07      	ldr	r7, [sp, #28]
 8023cb8:	930f      	str	r3, [sp, #60]	; 0x3c
 8023cba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023cbc:	2b00      	cmp	r3, #0
 8023cbe:	f340 8166 	ble.w	8023f8e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8023cc2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023cc4:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8023cc6:	1418      	asrs	r0, r3, #16
 8023cc8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8023cca:	142d      	asrs	r5, r5, #16
 8023ccc:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8023cd0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023cd2:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8023cd6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023cd8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8023cdc:	f100 81f0 	bmi.w	80240c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8023ce0:	f102 3eff 	add.w	lr, r2, #4294967295
 8023ce4:	4575      	cmp	r5, lr
 8023ce6:	f280 81eb 	bge.w	80240c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8023cea:	2800      	cmp	r0, #0
 8023cec:	f2c0 81e8 	blt.w	80240c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8023cf0:	f103 3eff 	add.w	lr, r3, #4294967295
 8023cf4:	4570      	cmp	r0, lr
 8023cf6:	f280 81e3 	bge.w	80240c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8023cfa:	b212      	sxth	r2, r2
 8023cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023cfe:	fa1f fe81 	uxth.w	lr, r1
 8023d02:	fb00 5002 	mla	r0, r0, r2, r5
 8023d06:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8023d0a:	eb03 0a00 	add.w	sl, r3, r0
 8023d0e:	f813 9000 	ldrb.w	r9, [r3, r0]
 8023d12:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8023d16:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8023d1a:	b29b      	uxth	r3, r3
 8023d1c:	f1bc 0f00 	cmp.w	ip, #0
 8023d20:	f000 817b 	beq.w	802401a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8023d24:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8023d28:	eb0a 0b02 	add.w	fp, sl, r2
 8023d2c:	fa1f fa8c 	uxth.w	sl, ip
 8023d30:	940a      	str	r4, [sp, #40]	; 0x28
 8023d32:	fb0a fe0e 	mul.w	lr, sl, lr
 8023d36:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8023d3a:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8023d3e:	eba5 050e 	sub.w	r5, r5, lr
 8023d42:	940b      	str	r4, [sp, #44]	; 0x2c
 8023d44:	fa1f fa8a 	uxth.w	sl, sl
 8023d48:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023d4a:	b2ad      	uxth	r5, r5
 8023d4c:	eba3 030a 	sub.w	r3, r3, sl
 8023d50:	fb08 f505 	mul.w	r5, r8, r5
 8023d54:	b29b      	uxth	r3, r3
 8023d56:	fb09 5303 	mla	r3, r9, r3, r5
 8023d5a:	fb0a 3304 	mla	r3, sl, r4, r3
 8023d5e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023d60:	fb0e 3304 	mla	r3, lr, r4, r3
 8023d64:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023d68:	2b00      	cmp	r3, #0
 8023d6a:	f000 80d1 	beq.w	8023f10 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8023d6e:	9c08      	ldr	r4, [sp, #32]
 8023d70:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023d74:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8023d78:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8023d7c:	f000 8152 	beq.w	8024024 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 8023d80:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8023d84:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8023d88:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023d8c:	fb0a fe0e 	mul.w	lr, sl, lr
 8023d90:	fb09 f000 	mul.w	r0, r9, r0
 8023d94:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8023d98:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8023d9c:	f100 0b20 	add.w	fp, r0, #32
 8023da0:	44ce      	add	lr, r9
 8023da2:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8023da6:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8023daa:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023dae:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8023db2:	ea4e 0909 	orr.w	r9, lr, r9
 8023db6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8023dba:	8868      	ldrh	r0, [r5, #2]
 8023dbc:	d019      	beq.n	8023df2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8023dbe:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8023dc2:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8023dc6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023dca:	fb0a fe0e 	mul.w	lr, sl, lr
 8023dce:	fb08 f800 	mul.w	r8, r8, r0
 8023dd2:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8023dd6:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8023dda:	f108 0b20 	add.w	fp, r8, #32
 8023dde:	4486      	add	lr, r0
 8023de0:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8023de4:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8023de8:	0a00      	lsrs	r0, r0, #8
 8023dea:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023dee:	ea4e 0000 	orr.w	r0, lr, r0
 8023df2:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8023df6:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8023dfa:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8023dfe:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023e02:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8023e06:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023e0a:	ea4e 0909 	orr.w	r9, lr, r9
 8023e0e:	ea4a 0000 	orr.w	r0, sl, r0
 8023e12:	f1bc 0f00 	cmp.w	ip, #0
 8023e16:	f000 8107 	beq.w	8024028 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8023e1a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8023e1e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023e20:	3a01      	subs	r2, #1
 8023e22:	2cff      	cmp	r4, #255	; 0xff
 8023e24:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8023e28:	f102 0202 	add.w	r2, r2, #2
 8023e2c:	eb05 0e02 	add.w	lr, r5, r2
 8023e30:	5aaa      	ldrh	r2, [r5, r2]
 8023e32:	d018      	beq.n	8023e66 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8023e34:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8023e38:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023e3c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8023e40:	fb04 fa02 	mul.w	sl, r4, r2
 8023e44:	fb08 f805 	mul.w	r8, r8, r5
 8023e48:	f10a 0520 	add.w	r5, sl, #32
 8023e4c:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8023e50:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8023e54:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8023e58:	4442      	add	r2, r8
 8023e5a:	0a2d      	lsrs	r5, r5, #8
 8023e5c:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8023e60:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8023e64:	432a      	orrs	r2, r5
 8023e66:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023e68:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8023e6c:	2cff      	cmp	r4, #255	; 0xff
 8023e6e:	d01a      	beq.n	8023ea6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8023e70:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8023e74:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8023e78:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8023e7c:	fb04 fa05 	mul.w	sl, r4, r5
 8023e80:	fb08 f80e 	mul.w	r8, r8, lr
 8023e84:	f10a 0e20 	add.w	lr, sl, #32
 8023e88:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8023e8c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8023e90:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8023e94:	4445      	add	r5, r8
 8023e96:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023e9a:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8023e9e:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8023ea2:	ea45 050e 	orr.w	r5, r5, lr
 8023ea6:	fb1c fe01 	smulbb	lr, ip, r1
 8023eaa:	f1cc 0810 	rsb	r8, ip, #16
 8023eae:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8023eb2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023eb6:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8023eba:	eba8 0801 	sub.w	r8, r8, r1
 8023ebe:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8023ec2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023ec6:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8023eca:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8023ece:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8023ed2:	ea4a 0202 	orr.w	r2, sl, r2
 8023ed6:	4341      	muls	r1, r0
 8023ed8:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8023edc:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023ee0:	fb09 1108 	mla	r1, r9, r8, r1
 8023ee4:	ea4b 0505 	orr.w	r5, fp, r5
 8023ee8:	fb0c 1102 	mla	r1, ip, r2, r1
 8023eec:	fb0e 1e05 	mla	lr, lr, r5, r1
 8023ef0:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8023ef4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8023ef8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023efc:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8023f00:	ea42 0e0e 	orr.w	lr, r2, lr
 8023f04:	fa1f f28e 	uxth.w	r2, lr
 8023f08:	2bff      	cmp	r3, #255	; 0xff
 8023f0a:	f040 80a1 	bne.w	8024050 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8023f0e:	803a      	strh	r2, [r7, #0]
 8023f10:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8023f12:	3702      	adds	r7, #2
 8023f14:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8023f16:	4413      	add	r3, r2
 8023f18:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8023f1a:	9325      	str	r3, [sp, #148]	; 0x94
 8023f1c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023f1e:	441a      	add	r2, r3
 8023f20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023f22:	3b01      	subs	r3, #1
 8023f24:	9226      	str	r2, [sp, #152]	; 0x98
 8023f26:	930f      	str	r3, [sp, #60]	; 0x3c
 8023f28:	e6c7      	b.n	8023cba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8023f2a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8023f2c:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8023f2e:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8023f30:	4433      	add	r3, r6
 8023f32:	9325      	str	r3, [sp, #148]	; 0x94
 8023f34:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023f36:	441c      	add	r4, r3
 8023f38:	9b06      	ldr	r3, [sp, #24]
 8023f3a:	3b01      	subs	r3, #1
 8023f3c:	9426      	str	r4, [sp, #152]	; 0x98
 8023f3e:	9306      	str	r3, [sp, #24]
 8023f40:	9b07      	ldr	r3, [sp, #28]
 8023f42:	3302      	adds	r3, #2
 8023f44:	9307      	str	r3, [sp, #28]
 8023f46:	e696      	b.n	8023c76 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023f48:	d028      	beq.n	8023f9c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8023f4a:	9b06      	ldr	r3, [sp, #24]
 8023f4c:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8023f4e:	3b01      	subs	r3, #1
 8023f50:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8023f52:	fb00 5003 	mla	r0, r0, r3, r5
 8023f56:	1400      	asrs	r0, r0, #16
 8023f58:	f53f aeaa 	bmi.w	8023cb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8023f5c:	3901      	subs	r1, #1
 8023f5e:	4288      	cmp	r0, r1
 8023f60:	f6bf aea6 	bge.w	8023cb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8023f64:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8023f66:	9826      	ldr	r0, [sp, #152]	; 0x98
 8023f68:	fb01 0303 	mla	r3, r1, r3, r0
 8023f6c:	141b      	asrs	r3, r3, #16
 8023f6e:	f53f ae9f 	bmi.w	8023cb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8023f72:	3a01      	subs	r2, #1
 8023f74:	4293      	cmp	r3, r2
 8023f76:	f6bf ae9b 	bge.w	8023cb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8023f7a:	9b06      	ldr	r3, [sp, #24]
 8023f7c:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8023f80:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8023f84:	930f      	str	r3, [sp, #60]	; 0x3c
 8023f86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023f88:	2b00      	cmp	r3, #0
 8023f8a:	f300 80b6 	bgt.w	80240fa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 8023f8e:	9b06      	ldr	r3, [sp, #24]
 8023f90:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023f94:	9b07      	ldr	r3, [sp, #28]
 8023f96:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8023f9a:	9307      	str	r3, [sp, #28]
 8023f9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023f9e:	2b00      	cmp	r3, #0
 8023fa0:	f340 8218 	ble.w	80243d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 8023fa4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023fa8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023faa:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023fae:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023fb2:	eef0 6a48 	vmov.f32	s13, s16
 8023fb6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023fba:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023fbe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023fc2:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8023fc6:	eef0 6a68 	vmov.f32	s13, s17
 8023fca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023fce:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 8023fd2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023fd6:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023fda:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023fde:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023fe2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023fe6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023fea:	ee18 2a10 	vmov	r2, s16
 8023fee:	eeb0 8a47 	vmov.f32	s16, s14
 8023ff2:	fb92 f3f3 	sdiv	r3, r2, r3
 8023ff6:	ee18 2a90 	vmov	r2, s17
 8023ffa:	9327      	str	r3, [sp, #156]	; 0x9c
 8023ffc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023ffe:	eef0 8a67 	vmov.f32	s17, s15
 8024002:	fb92 f3f3 	sdiv	r3, r2, r3
 8024006:	9328      	str	r3, [sp, #160]	; 0xa0
 8024008:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802400a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802400c:	3b01      	subs	r3, #1
 802400e:	930e      	str	r3, [sp, #56]	; 0x38
 8024010:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024012:	bf08      	it	eq
 8024014:	4613      	moveq	r3, r2
 8024016:	9306      	str	r3, [sp, #24]
 8024018:	e61f      	b.n	8023c5a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802401a:	fb08 f505 	mul.w	r5, r8, r5
 802401e:	fb09 5303 	mla	r3, r9, r3, r5
 8024022:	e69f      	b.n	8023d64 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8024024:	4681      	mov	r9, r0
 8024026:	e6c6      	b.n	8023db6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8024028:	f1c1 0210 	rsb	r2, r1, #16
 802402c:	4341      	muls	r1, r0
 802402e:	fb09 1902 	mla	r9, r9, r2, r1
 8024032:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8024036:	ea4f 5259 	mov.w	r2, r9, lsr #21
 802403a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802403e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024042:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8024046:	ea42 0909 	orr.w	r9, r2, r9
 802404a:	fa1f f289 	uxth.w	r2, r9
 802404e:	e75b      	b.n	8023f08 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8024050:	f8b7 c000 	ldrh.w	ip, [r7]
 8024054:	43db      	mvns	r3, r3
 8024056:	ea4f 202c 	mov.w	r0, ip, asr #8
 802405a:	fa5f fe83 	uxtb.w	lr, r3
 802405e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024062:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8024066:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 802406a:	fb00 f00e 	mul.w	r0, r0, lr
 802406e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8024072:	b2db      	uxtb	r3, r3
 8024074:	1c41      	adds	r1, r0, #1
 8024076:	fb05 f50e 	mul.w	r5, r5, lr
 802407a:	fb03 f30e 	mul.w	r3, r3, lr
 802407e:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8024082:	1211      	asrs	r1, r2, #8
 8024084:	f021 0107 	bic.w	r1, r1, #7
 8024088:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802408c:	48d4      	ldr	r0, [pc, #848]	; (80243e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>)
 802408e:	b2c9      	uxtb	r1, r1
 8024090:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 8024094:	1c69      	adds	r1, r5, #1
 8024096:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 802409a:	10d1      	asrs	r1, r2, #3
 802409c:	00d2      	lsls	r2, r2, #3
 802409e:	f021 0103 	bic.w	r1, r1, #3
 80240a2:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80240a6:	00c9      	lsls	r1, r1, #3
 80240a8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80240ac:	4301      	orrs	r1, r0
 80240ae:	1c58      	adds	r0, r3, #1
 80240b0:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80240b4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80240b8:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80240bc:	430a      	orrs	r2, r1
 80240be:	e726      	b.n	8023f0e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80240c0:	f115 0e01 	adds.w	lr, r5, #1
 80240c4:	f53f af24 	bmi.w	8023f10 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 80240c8:	4572      	cmp	r2, lr
 80240ca:	f6ff af21 	blt.w	8023f10 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 80240ce:	f110 0e01 	adds.w	lr, r0, #1
 80240d2:	f53f af1d 	bmi.w	8023f10 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 80240d6:	4573      	cmp	r3, lr
 80240d8:	f6ff af1a 	blt.w	8023f10 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 80240dc:	b21b      	sxth	r3, r3
 80240de:	b212      	sxth	r2, r2
 80240e0:	9301      	str	r3, [sp, #4]
 80240e2:	9200      	str	r2, [sp, #0]
 80240e4:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 80240e8:	e9cd 5002 	strd	r5, r0, [sp, #8]
 80240ec:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 80240f0:	4639      	mov	r1, r7
 80240f2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80240f4:	f7ff fbf2 	bl	80238dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80240f8:	e70a      	b.n	8023f10 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 80240fa:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80240fc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024100:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024102:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8024106:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024108:	fa1f fc82 	uxth.w	ip, r2
 802410c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024110:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024112:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8024116:	141f      	asrs	r7, r3, #16
 8024118:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802411a:	141b      	asrs	r3, r3, #16
 802411c:	fb01 3707 	mla	r7, r1, r7, r3
 8024120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024122:	eb03 0a07 	add.w	sl, r3, r7
 8024126:	f813 9007 	ldrb.w	r9, [r3, r7]
 802412a:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802412e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8024132:	b29b      	uxth	r3, r3
 8024134:	2d00      	cmp	r5, #0
 8024136:	f000 80fe 	beq.w	8024336 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 802413a:	f81a 4001 	ldrb.w	r4, [sl, r1]
 802413e:	eb0a 0b01 	add.w	fp, sl, r1
 8024142:	fa1f fa85 	uxth.w	sl, r5
 8024146:	940c      	str	r4, [sp, #48]	; 0x30
 8024148:	fb0a fc0c 	mul.w	ip, sl, ip
 802414c:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8024150:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8024154:	eba0 000c 	sub.w	r0, r0, ip
 8024158:	940d      	str	r4, [sp, #52]	; 0x34
 802415a:	fa1f fa8a 	uxth.w	sl, sl
 802415e:	b280      	uxth	r0, r0
 8024160:	eba3 030a 	sub.w	r3, r3, sl
 8024164:	fb08 f000 	mul.w	r0, r8, r0
 8024168:	b29b      	uxth	r3, r3
 802416a:	fb09 0303 	mla	r3, r9, r3, r0
 802416e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8024170:	fb0a 3300 	mla	r3, sl, r0, r3
 8024174:	fb0c 3304 	mla	r3, ip, r4, r3
 8024178:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802417c:	2b00      	cmp	r3, #0
 802417e:	f000 80cc 	beq.w	802431a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 8024182:	9808      	ldr	r0, [sp, #32]
 8024184:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024188:	9c08      	ldr	r4, [sp, #32]
 802418a:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 802418e:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8024192:	f000 80d5 	beq.w	8024340 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 8024196:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 802419a:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802419e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80241a2:	fb0a fc0c 	mul.w	ip, sl, ip
 80241a6:	fb09 f707 	mul.w	r7, r9, r7
 80241aa:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 80241ae:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80241b2:	f107 0b20 	add.w	fp, r7, #32
 80241b6:	44cc      	add	ip, r9
 80241b8:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 80241bc:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80241c0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80241c4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80241c8:	ea4c 0909 	orr.w	r9, ip, r9
 80241cc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80241d0:	8847      	ldrh	r7, [r0, #2]
 80241d2:	d019      	beq.n	8024208 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 80241d4:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80241d8:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80241dc:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80241e0:	fb0a fc0c 	mul.w	ip, sl, ip
 80241e4:	fb08 f807 	mul.w	r8, r8, r7
 80241e8:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 80241ec:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80241f0:	f108 0b20 	add.w	fp, r8, #32
 80241f4:	44bc      	add	ip, r7
 80241f6:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 80241fa:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80241fe:	0a3f      	lsrs	r7, r7, #8
 8024200:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8024204:	ea4c 0707 	orr.w	r7, ip, r7
 8024208:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 802420c:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8024210:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8024214:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8024218:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802421c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024220:	ea4c 0909 	orr.w	r9, ip, r9
 8024224:	ea4a 0707 	orr.w	r7, sl, r7
 8024228:	2d00      	cmp	r5, #0
 802422a:	f000 808b 	beq.w	8024344 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 802422e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8024232:	3901      	subs	r1, #1
 8024234:	0049      	lsls	r1, r1, #1
 8024236:	3102      	adds	r1, #2
 8024238:	eb00 0c01 	add.w	ip, r0, r1
 802423c:	5a41      	ldrh	r1, [r0, r1]
 802423e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8024240:	28ff      	cmp	r0, #255	; 0xff
 8024242:	d019      	beq.n	8024278 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 8024244:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8024248:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802424a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802424e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024252:	fb04 fa01 	mul.w	sl, r4, r1
 8024256:	fb08 f800 	mul.w	r8, r8, r0
 802425a:	f10a 0020 	add.w	r0, sl, #32
 802425e:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8024262:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024266:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 802426a:	4441      	add	r1, r8
 802426c:	0a00      	lsrs	r0, r0, #8
 802426e:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8024272:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024276:	4301      	orrs	r1, r0
 8024278:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802427a:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 802427e:	2cff      	cmp	r4, #255	; 0xff
 8024280:	d01a      	beq.n	80242b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 8024282:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8024286:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802428a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802428e:	fb04 fa00 	mul.w	sl, r4, r0
 8024292:	fb08 f80c 	mul.w	r8, r8, ip
 8024296:	f10a 0c20 	add.w	ip, sl, #32
 802429a:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 802429e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80242a2:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 80242a6:	4440      	add	r0, r8
 80242a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80242ac:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 80242b0:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80242b4:	ea40 000c 	orr.w	r0, r0, ip
 80242b8:	fb15 fc02 	smulbb	ip, r5, r2
 80242bc:	f1c5 0810 	rsb	r8, r5, #16
 80242c0:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80242c4:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80242c8:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80242cc:	eba8 0802 	sub.w	r8, r8, r2
 80242d0:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80242d4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80242d8:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 80242dc:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80242e0:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 80242e4:	ea4a 0101 	orr.w	r1, sl, r1
 80242e8:	437a      	muls	r2, r7
 80242ea:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 80242ee:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80242f2:	fb09 2208 	mla	r2, r9, r8, r2
 80242f6:	ea4b 0000 	orr.w	r0, fp, r0
 80242fa:	fb05 2201 	mla	r2, r5, r1, r2
 80242fe:	fb0c 2200 	mla	r2, ip, r0, r2
 8024302:	0d57      	lsrs	r7, r2, #21
 8024304:	0952      	lsrs	r2, r2, #5
 8024306:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802430a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802430e:	433a      	orrs	r2, r7
 8024310:	2bff      	cmp	r3, #255	; 0xff
 8024312:	b292      	uxth	r2, r2
 8024314:	d127      	bne.n	8024366 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75e>
 8024316:	f8ae 2000 	strh.w	r2, [lr]
 802431a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802431c:	f10e 0e02 	add.w	lr, lr, #2
 8024320:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8024322:	4413      	add	r3, r2
 8024324:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8024326:	9325      	str	r3, [sp, #148]	; 0x94
 8024328:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802432a:	441a      	add	r2, r3
 802432c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802432e:	3b01      	subs	r3, #1
 8024330:	9226      	str	r2, [sp, #152]	; 0x98
 8024332:	930f      	str	r3, [sp, #60]	; 0x3c
 8024334:	e627      	b.n	8023f86 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8024336:	fb08 f000 	mul.w	r0, r8, r0
 802433a:	fb09 0303 	mla	r3, r9, r3, r0
 802433e:	e71b      	b.n	8024178 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 8024340:	46b9      	mov	r9, r7
 8024342:	e743      	b.n	80241cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 8024344:	f1c2 0110 	rsb	r1, r2, #16
 8024348:	437a      	muls	r2, r7
 802434a:	fb09 2901 	mla	r9, r9, r1, r2
 802434e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8024352:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8024356:	ea4f 1259 	mov.w	r2, r9, lsr #5
 802435a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802435e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024362:	4302      	orrs	r2, r0
 8024364:	e7d4      	b.n	8024310 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 8024366:	f8be 7000 	ldrh.w	r7, [lr]
 802436a:	43db      	mvns	r3, r3
 802436c:	4c1c      	ldr	r4, [pc, #112]	; (80243e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>)
 802436e:	1238      	asrs	r0, r7, #8
 8024370:	fa5f fc83 	uxtb.w	ip, r3
 8024374:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024378:	10fd      	asrs	r5, r7, #3
 802437a:	00fb      	lsls	r3, r7, #3
 802437c:	fb00 f00c 	mul.w	r0, r0, ip
 8024380:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8024384:	b2db      	uxtb	r3, r3
 8024386:	fb05 f10c 	mul.w	r1, r5, ip
 802438a:	1c45      	adds	r5, r0, #1
 802438c:	fb03 f30c 	mul.w	r3, r3, ip
 8024390:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8024394:	1215      	asrs	r5, r2, #8
 8024396:	f025 0507 	bic.w	r5, r5, #7
 802439a:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802439e:	1c4d      	adds	r5, r1, #1
 80243a0:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 80243a4:	10d1      	asrs	r1, r2, #3
 80243a6:	b2c0      	uxtb	r0, r0
 80243a8:	f021 0103 	bic.w	r1, r1, #3
 80243ac:	00d2      	lsls	r2, r2, #3
 80243ae:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 80243b2:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80243b6:	00c9      	lsls	r1, r1, #3
 80243b8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80243bc:	4308      	orrs	r0, r1
 80243be:	1c59      	adds	r1, r3, #1
 80243c0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80243c4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80243c8:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80243cc:	4318      	orrs	r0, r3
 80243ce:	f8ae 0000 	strh.w	r0, [lr]
 80243d2:	e7a2      	b.n	802431a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 80243d4:	b013      	add	sp, #76	; 0x4c
 80243d6:	ecbd 8b08 	vpop	{d8-d11}
 80243da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80243de:	bf00      	nop
 80243e0:	fffff800 	.word	0xfffff800

080243e4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 80243e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80243e8:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 80243ec:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 80243f0:	fb0c 4e03 	mla	lr, ip, r3, r4
 80243f4:	f1bc 0f00 	cmp.w	ip, #0
 80243f8:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 80243fc:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 8024400:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 8024404:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8024408:	8808      	ldrh	r0, [r1, #0]
 802440a:	db2f      	blt.n	802446c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 802440c:	45e2      	cmp	sl, ip
 802440e:	dd2d      	ble.n	802446c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 8024410:	2c00      	cmp	r4, #0
 8024412:	db29      	blt.n	8024468 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8024414:	42a3      	cmp	r3, r4
 8024416:	dd27      	ble.n	8024468 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8024418:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 802441c:	1c62      	adds	r2, r4, #1
 802441e:	d428      	bmi.n	8024472 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8024420:	4293      	cmp	r3, r2
 8024422:	dd26      	ble.n	8024472 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8024424:	b32f      	cbz	r7, 8024472 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8024426:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 802442a:	f11c 0c01 	adds.w	ip, ip, #1
 802442e:	d424      	bmi.n	802447a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8024430:	45e2      	cmp	sl, ip
 8024432:	dd22      	ble.n	802447a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8024434:	2e00      	cmp	r6, #0
 8024436:	f000 809d 	beq.w	8024574 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x190>
 802443a:	2c00      	cmp	r4, #0
 802443c:	db1b      	blt.n	8024476 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 802443e:	42a3      	cmp	r3, r4
 8024440:	dd19      	ble.n	8024476 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 8024442:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 8024446:	3401      	adds	r4, #1
 8024448:	d41a      	bmi.n	8024480 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 802444a:	42a3      	cmp	r3, r4
 802444c:	dd18      	ble.n	8024480 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 802444e:	b1cf      	cbz	r7, 8024484 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 8024450:	3301      	adds	r3, #1
 8024452:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 8024456:	2f0f      	cmp	r7, #15
 8024458:	d915      	bls.n	8024486 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 802445a:	4b49      	ldr	r3, [pc, #292]	; (8024580 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 802445c:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8024460:	4a48      	ldr	r2, [pc, #288]	; (8024584 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 8024462:	4849      	ldr	r0, [pc, #292]	; (8024588 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 8024464:	f002 ffce 	bl	8027404 <__assert_func>
 8024468:	4681      	mov	r9, r0
 802446a:	e7d7      	b.n	802441c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 802446c:	4686      	mov	lr, r0
 802446e:	4681      	mov	r9, r0
 8024470:	e7db      	b.n	802442a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8024472:	4686      	mov	lr, r0
 8024474:	e7d9      	b.n	802442a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8024476:	4684      	mov	ip, r0
 8024478:	e7e5      	b.n	8024446 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 802447a:	4603      	mov	r3, r0
 802447c:	4684      	mov	ip, r0
 802447e:	e7ea      	b.n	8024456 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8024480:	4603      	mov	r3, r0
 8024482:	e7e8      	b.n	8024456 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8024484:	4603      	mov	r3, r0
 8024486:	2e0f      	cmp	r6, #15
 8024488:	d8e7      	bhi.n	802445a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 802448a:	fb17 f806 	smulbb	r8, r7, r6
 802448e:	ea4f 4409 	mov.w	r4, r9, lsl #16
 8024492:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 8024496:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802449a:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 802449e:	ea4f 08e8 	mov.w	r8, r8, asr #3
 80244a2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80244a6:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80244aa:	ea44 0909 	orr.w	r9, r4, r9
 80244ae:	f1c6 0410 	rsb	r4, r6, #16
 80244b2:	041a      	lsls	r2, r3, #16
 80244b4:	ea4a 0e0e 	orr.w	lr, sl, lr
 80244b8:	1be4      	subs	r4, r4, r7
 80244ba:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 80244be:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80244c2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80244c6:	fb07 fe0e 	mul.w	lr, r7, lr
 80244ca:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 80244ce:	4313      	orrs	r3, r2
 80244d0:	ea4f 420c 	mov.w	r2, ip, lsl #16
 80244d4:	fb04 e409 	mla	r4, r4, r9, lr
 80244d8:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 80244dc:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80244e0:	b2af      	uxth	r7, r5
 80244e2:	fb08 4303 	mla	r3, r8, r3, r4
 80244e6:	f42c 64fc 	bic.w	r4, ip, #2016	; 0x7e0
 80244ea:	43ed      	mvns	r5, r5
 80244ec:	4322      	orrs	r2, r4
 80244ee:	b2ed      	uxtb	r5, r5
 80244f0:	fb06 3202 	mla	r2, r6, r2, r3
 80244f4:	10c6      	asrs	r6, r0, #3
 80244f6:	0d53      	lsrs	r3, r2, #21
 80244f8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80244fc:	0952      	lsrs	r2, r2, #5
 80244fe:	fb16 f605 	smulbb	r6, r6, r5
 8024502:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024506:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802450a:	431a      	orrs	r2, r3
 802450c:	b293      	uxth	r3, r2
 802450e:	1202      	asrs	r2, r0, #8
 8024510:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8024514:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8024518:	00dc      	lsls	r4, r3, #3
 802451a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802451e:	fb12 f205 	smulbb	r2, r2, r5
 8024522:	b2e4      	uxtb	r4, r4
 8024524:	fb0c 2c07 	mla	ip, ip, r7, r2
 8024528:	10da      	asrs	r2, r3, #3
 802452a:	00c3      	lsls	r3, r0, #3
 802452c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8024530:	fa1f fc8c 	uxth.w	ip, ip
 8024534:	b2db      	uxtb	r3, r3
 8024536:	fb02 6207 	mla	r2, r2, r7, r6
 802453a:	fb13 f305 	smulbb	r3, r3, r5
 802453e:	b296      	uxth	r6, r2
 8024540:	fb04 3307 	mla	r3, r4, r7, r3
 8024544:	b29a      	uxth	r2, r3
 8024546:	f10c 0301 	add.w	r3, ip, #1
 802454a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802454e:	1c53      	adds	r3, r2, #1
 8024550:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024554:	1c72      	adds	r2, r6, #1
 8024556:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802455a:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 802455e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024562:	0952      	lsrs	r2, r2, #5
 8024564:	ea43 030c 	orr.w	r3, r3, ip
 8024568:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802456c:	4313      	orrs	r3, r2
 802456e:	800b      	strh	r3, [r1, #0]
 8024570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024574:	2f0f      	cmp	r7, #15
 8024576:	f63f af70 	bhi.w	802445a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 802457a:	4603      	mov	r3, r0
 802457c:	4684      	mov	ip, r0
 802457e:	e784      	b.n	802448a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 8024580:	0802e3b6 	.word	0x0802e3b6
 8024584:	0802ea2f 	.word	0x0802ea2f
 8024588:	0802e43a 	.word	0x0802e43a

0802458c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802458c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024590:	ed2d 8b08 	vpush	{d8-d11}
 8024594:	b093      	sub	sp, #76	; 0x4c
 8024596:	461d      	mov	r5, r3
 8024598:	eeb0 aa40 	vmov.f32	s20, s0
 802459c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802459e:	eef0 9a60 	vmov.f32	s19, s1
 80245a2:	9210      	str	r2, [sp, #64]	; 0x40
 80245a4:	eeb0 9a41 	vmov.f32	s18, s2
 80245a8:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 80245ac:	eeb0 8a62 	vmov.f32	s16, s5
 80245b0:	910a      	str	r1, [sp, #40]	; 0x28
 80245b2:	eef0 8a43 	vmov.f32	s17, s6
 80245b6:	920b      	str	r2, [sp, #44]	; 0x2c
 80245b8:	eef0 ba44 	vmov.f32	s23, s8
 80245bc:	6859      	ldr	r1, [r3, #4]
 80245be:	eeb0 ba64 	vmov.f32	s22, s9
 80245c2:	681b      	ldr	r3, [r3, #0]
 80245c4:	eef0 aa45 	vmov.f32	s21, s10
 80245c8:	9011      	str	r0, [sp, #68]	; 0x44
 80245ca:	e9dd 272a 	ldrd	r2, r7, [sp, #168]	; 0xa8
 80245ce:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 80245d2:	fb01 2707 	mla	r7, r1, r7, r2
 80245d6:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 80245da:	9307      	str	r3, [sp, #28]
 80245dc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80245de:	681b      	ldr	r3, [r3, #0]
 80245e0:	9309      	str	r3, [sp, #36]	; 0x24
 80245e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80245e4:	43db      	mvns	r3, r3
 80245e6:	b2db      	uxtb	r3, r3
 80245e8:	9308      	str	r3, [sp, #32]
 80245ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80245ec:	2b00      	cmp	r3, #0
 80245ee:	dc03      	bgt.n	80245f8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80245f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80245f2:	2b00      	cmp	r3, #0
 80245f4:	f340 8205 	ble.w	8024a02 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80245f8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80245fa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80245fe:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024602:	1e48      	subs	r0, r1, #1
 8024604:	f102 3cff 	add.w	ip, r2, #4294967295
 8024608:	2d00      	cmp	r5, #0
 802460a:	f340 80da 	ble.w	80247c2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 802460e:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8024612:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024616:	d406      	bmi.n	8024626 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8024618:	4586      	cmp	lr, r0
 802461a:	da04      	bge.n	8024626 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 802461c:	2b00      	cmp	r3, #0
 802461e:	db02      	blt.n	8024626 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8024620:	4563      	cmp	r3, ip
 8024622:	f2c0 80cf 	blt.w	80247c4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8024626:	f11e 0e01 	adds.w	lr, lr, #1
 802462a:	f100 80c1 	bmi.w	80247b0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 802462e:	4571      	cmp	r1, lr
 8024630:	f2c0 80be 	blt.w	80247b0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8024634:	3301      	adds	r3, #1
 8024636:	f100 80bb 	bmi.w	80247b0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 802463a:	429a      	cmp	r2, r3
 802463c:	f2c0 80b8 	blt.w	80247b0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8024640:	46a9      	mov	r9, r5
 8024642:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8024646:	f1b9 0f00 	cmp.w	r9, #0
 802464a:	f340 80d8 	ble.w	80247fe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 802464e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024650:	1421      	asrs	r1, r4, #16
 8024652:	ea4f 4026 	mov.w	r0, r6, asr #16
 8024656:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802465a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802465e:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8024662:	f100 8112 	bmi.w	802488a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8024666:	f10e 3aff 	add.w	sl, lr, #4294967295
 802466a:	4551      	cmp	r1, sl
 802466c:	f280 810d 	bge.w	802488a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8024670:	2800      	cmp	r0, #0
 8024672:	f2c0 810a 	blt.w	802488a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8024676:	f103 3aff 	add.w	sl, r3, #4294967295
 802467a:	4550      	cmp	r0, sl
 802467c:	f280 8105 	bge.w	802488a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8024680:	fa0f f38e 	sxth.w	r3, lr
 8024684:	fb00 1103 	mla	r1, r0, r3, r1
 8024688:	9809      	ldr	r0, [sp, #36]	; 0x24
 802468a:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 802468e:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8024692:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8024696:	f1bc 0f00 	cmp.w	ip, #0
 802469a:	d007      	beq.n	80246ac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 802469c:	005b      	lsls	r3, r3, #1
 802469e:	eb0a 0003 	add.w	r0, sl, r3
 80246a2:	f83a 3003 	ldrh.w	r3, [sl, r3]
 80246a6:	930c      	str	r3, [sp, #48]	; 0x30
 80246a8:	8843      	ldrh	r3, [r0, #2]
 80246aa:	930d      	str	r3, [sp, #52]	; 0x34
 80246ac:	ea4f 400e 	mov.w	r0, lr, lsl #16
 80246b0:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80246b4:	fb12 f30c 	smulbb	r3, r2, ip
 80246b8:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80246bc:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80246c0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80246c4:	10db      	asrs	r3, r3, #3
 80246c6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80246ca:	ea40 000e 	orr.w	r0, r0, lr
 80246ce:	f1cc 0e10 	rsb	lr, ip, #16
 80246d2:	ea4a 0101 	orr.w	r1, sl, r1
 80246d6:	9f08      	ldr	r7, [sp, #32]
 80246d8:	ebae 0e02 	sub.w	lr, lr, r2
 80246dc:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80246e0:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 80246e4:	4351      	muls	r1, r2
 80246e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80246e8:	fb0e 1e00 	mla	lr, lr, r0, r1
 80246ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 80246ee:	0410      	lsls	r0, r2, #16
 80246f0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80246f4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80246f8:	4310      	orrs	r0, r2
 80246fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80246fc:	0412      	lsls	r2, r2, #16
 80246fe:	fb03 e000 	mla	r0, r3, r0, lr
 8024702:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8024706:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 802470a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802470e:	ea42 020e 	orr.w	r2, r2, lr
 8024712:	fb03 0302 	mla	r3, r3, r2, r0
 8024716:	f8b8 0000 	ldrh.w	r0, [r8]
 802471a:	0d5a      	lsrs	r2, r3, #21
 802471c:	095b      	lsrs	r3, r3, #5
 802471e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024722:	1201      	asrs	r1, r0, #8
 8024724:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024728:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 802472c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024730:	00c0      	lsls	r0, r0, #3
 8024732:	4313      	orrs	r3, r2
 8024734:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8024738:	fb11 f107 	smulbb	r1, r1, r7
 802473c:	b2c0      	uxtb	r0, r0
 802473e:	b29b      	uxth	r3, r3
 8024740:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8024744:	fb10 f007 	smulbb	r0, r0, r7
 8024748:	fb1e fe07 	smulbb	lr, lr, r7
 802474c:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8024750:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8024754:	fb0c 1c02 	mla	ip, ip, r2, r1
 8024758:	10d9      	asrs	r1, r3, #3
 802475a:	00db      	lsls	r3, r3, #3
 802475c:	fa1f fc8c 	uxth.w	ip, ip
 8024760:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8024764:	b2db      	uxtb	r3, r3
 8024766:	fb01 e102 	mla	r1, r1, r2, lr
 802476a:	fb03 0302 	mla	r3, r3, r2, r0
 802476e:	b289      	uxth	r1, r1
 8024770:	b29a      	uxth	r2, r3
 8024772:	f10c 0301 	add.w	r3, ip, #1
 8024776:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802477a:	1c53      	adds	r3, r2, #1
 802477c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024780:	1c4a      	adds	r2, r1, #1
 8024782:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8024786:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802478a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802478e:	0949      	lsrs	r1, r1, #5
 8024790:	ea43 030c 	orr.w	r3, r3, ip
 8024794:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024798:	430b      	orrs	r3, r1
 802479a:	f8a8 3000 	strh.w	r3, [r8]
 802479e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80247a0:	f108 0802 	add.w	r8, r8, #2
 80247a4:	f109 39ff 	add.w	r9, r9, #4294967295
 80247a8:	441c      	add	r4, r3
 80247aa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80247ac:	441e      	add	r6, r3
 80247ae:	e74a      	b.n	8024646 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80247b0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80247b2:	3d01      	subs	r5, #1
 80247b4:	441c      	add	r4, r3
 80247b6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80247b8:	441e      	add	r6, r3
 80247ba:	9b07      	ldr	r3, [sp, #28]
 80247bc:	3302      	adds	r3, #2
 80247be:	9307      	str	r3, [sp, #28]
 80247c0:	e722      	b.n	8024608 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80247c2:	d022      	beq.n	802480a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80247c4:	1e6b      	subs	r3, r5, #1
 80247c6:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80247c8:	fb00 4003 	mla	r0, r0, r3, r4
 80247cc:	1400      	asrs	r0, r0, #16
 80247ce:	f53f af37 	bmi.w	8024640 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80247d2:	3901      	subs	r1, #1
 80247d4:	4288      	cmp	r0, r1
 80247d6:	f6bf af33 	bge.w	8024640 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80247da:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80247dc:	fb01 6303 	mla	r3, r1, r3, r6
 80247e0:	141b      	asrs	r3, r3, #16
 80247e2:	f53f af2d 	bmi.w	8024640 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80247e6:	3a01      	subs	r2, #1
 80247e8:	4293      	cmp	r3, r2
 80247ea:	f6bf af29 	bge.w	8024640 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80247ee:	46a8      	mov	r8, r5
 80247f0:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80247f4:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 80247f8:	f1b8 0f00 	cmp.w	r8, #0
 80247fc:	dc60      	bgt.n	80248c0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 80247fe:	9b07      	ldr	r3, [sp, #28]
 8024800:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8024804:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8024808:	9307      	str	r3, [sp, #28]
 802480a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802480c:	2b00      	cmp	r3, #0
 802480e:	f340 80f8 	ble.w	8024a02 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8024812:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024816:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024818:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802481c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024820:	eef0 6a48 	vmov.f32	s13, s16
 8024824:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024828:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802482c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024830:	ee16 4a90 	vmov	r4, s13
 8024834:	eef0 6a68 	vmov.f32	s13, s17
 8024838:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802483c:	ee16 6a90 	vmov	r6, s13
 8024840:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024844:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024848:	ee37 8a48 	vsub.f32	s16, s14, s16
 802484c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024850:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024854:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024858:	ee18 2a10 	vmov	r2, s16
 802485c:	eeb0 8a47 	vmov.f32	s16, s14
 8024860:	fb92 f3f3 	sdiv	r3, r2, r3
 8024864:	ee18 2a90 	vmov	r2, s17
 8024868:	9327      	str	r3, [sp, #156]	; 0x9c
 802486a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802486c:	eef0 8a67 	vmov.f32	s17, s15
 8024870:	fb92 f3f3 	sdiv	r3, r2, r3
 8024874:	9328      	str	r3, [sp, #160]	; 0xa0
 8024876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024878:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802487a:	3b01      	subs	r3, #1
 802487c:	930a      	str	r3, [sp, #40]	; 0x28
 802487e:	bf08      	it	eq
 8024880:	4615      	moveq	r5, r2
 8024882:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024884:	bf18      	it	ne
 8024886:	461d      	movne	r5, r3
 8024888:	e6af      	b.n	80245ea <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802488a:	f111 0a01 	adds.w	sl, r1, #1
 802488e:	d486      	bmi.n	802479e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8024890:	45d6      	cmp	lr, sl
 8024892:	db84      	blt.n	802479e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8024894:	f110 0a01 	adds.w	sl, r0, #1
 8024898:	d481      	bmi.n	802479e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 802489a:	4553      	cmp	r3, sl
 802489c:	f6ff af7f 	blt.w	802479e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80248a0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80248a2:	b21b      	sxth	r3, r3
 80248a4:	9101      	str	r1, [sp, #4]
 80248a6:	4641      	mov	r1, r8
 80248a8:	9300      	str	r3, [sp, #0]
 80248aa:	fa0f f38e 	sxth.w	r3, lr
 80248ae:	e9cd 0202 	strd	r0, r2, [sp, #8]
 80248b2:	e9cd c704 	strd	ip, r7, [sp, #16]
 80248b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80248b8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80248ba:	f7ff fd93 	bl	80243e4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 80248be:	e76e      	b.n	802479e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80248c0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80248c2:	1430      	asrs	r0, r6, #16
 80248c4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80248c6:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 80248ca:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80248ce:	1423      	asrs	r3, r4, #16
 80248d0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80248d4:	fb01 3000 	mla	r0, r1, r0, r3
 80248d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80248da:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80248de:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 80248e2:	8858      	ldrh	r0, [r3, #2]
 80248e4:	f1be 0f00 	cmp.w	lr, #0
 80248e8:	d00b      	beq.n	8024902 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 80248ea:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80248ee:	3901      	subs	r1, #1
 80248f0:	0049      	lsls	r1, r1, #1
 80248f2:	3102      	adds	r1, #2
 80248f4:	eb03 0b01 	add.w	fp, r3, r1
 80248f8:	5a5b      	ldrh	r3, [r3, r1]
 80248fa:	930e      	str	r3, [sp, #56]	; 0x38
 80248fc:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8024900:	930f      	str	r3, [sp, #60]	; 0x3c
 8024902:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8024906:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802490a:	fb12 f30e 	smulbb	r3, r2, lr
 802490e:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8024912:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 8024916:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802491a:	10db      	asrs	r3, r3, #3
 802491c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8024920:	ea41 010c 	orr.w	r1, r1, ip
 8024924:	f1ce 0c10 	rsb	ip, lr, #16
 8024928:	ea4b 0000 	orr.w	r0, fp, r0
 802492c:	9f08      	ldr	r7, [sp, #32]
 802492e:	ebac 0c02 	sub.w	ip, ip, r2
 8024932:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8024936:	f108 38ff 	add.w	r8, r8, #4294967295
 802493a:	4350      	muls	r0, r2
 802493c:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8024940:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024942:	fb0c 0c01 	mla	ip, ip, r1, r0
 8024946:	980e      	ldr	r0, [sp, #56]	; 0x38
 8024948:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 802494c:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 8024950:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024952:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024956:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802495a:	0412      	lsls	r2, r2, #16
 802495c:	ea4b 0101 	orr.w	r1, fp, r1
 8024960:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8024964:	fb03 c101 	mla	r1, r3, r1, ip
 8024968:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 802496c:	4302      	orrs	r2, r0
 802496e:	fb03 1202 	mla	r2, r3, r2, r1
 8024972:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8024976:	0952      	lsrs	r2, r2, #5
 8024978:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 802497c:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 8024980:	f8b9 2000 	ldrh.w	r2, [r9]
 8024984:	ea4b 0303 	orr.w	r3, fp, r3
 8024988:	1211      	asrs	r1, r2, #8
 802498a:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 802498e:	b29b      	uxth	r3, r3
 8024990:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024994:	00d2      	lsls	r2, r2, #3
 8024996:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 802499a:	fb11 f107 	smulbb	r1, r1, r7
 802499e:	1218      	asrs	r0, r3, #8
 80249a0:	fb1c fc07 	smulbb	ip, ip, r7
 80249a4:	b2d2      	uxtb	r2, r2
 80249a6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80249aa:	fb12 f207 	smulbb	r2, r2, r7
 80249ae:	fb00 100a 	mla	r0, r0, sl, r1
 80249b2:	10d9      	asrs	r1, r3, #3
 80249b4:	00db      	lsls	r3, r3, #3
 80249b6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80249ba:	b280      	uxth	r0, r0
 80249bc:	b2db      	uxtb	r3, r3
 80249be:	fb01 c10a 	mla	r1, r1, sl, ip
 80249c2:	fb03 230a 	mla	r3, r3, sl, r2
 80249c6:	1c42      	adds	r2, r0, #1
 80249c8:	b289      	uxth	r1, r1
 80249ca:	b29b      	uxth	r3, r3
 80249cc:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80249d0:	f101 0c01 	add.w	ip, r1, #1
 80249d4:	1c5a      	adds	r2, r3, #1
 80249d6:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80249da:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80249de:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80249e2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80249e4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80249e8:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80249ec:	441c      	add	r4, r3
 80249ee:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80249f2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80249f4:	4310      	orrs	r0, r2
 80249f6:	441e      	add	r6, r3
 80249f8:	ea40 000c 	orr.w	r0, r0, ip
 80249fc:	f829 0b02 	strh.w	r0, [r9], #2
 8024a00:	e6fa      	b.n	80247f8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8024a02:	b013      	add	sp, #76	; 0x4c
 8024a04:	ecbd 8b08 	vpop	{d8-d11}
 8024a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024a0c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8024a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024a10:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 8024a14:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 8024a18:	fb06 5c03 	mla	ip, r6, r3, r5
 8024a1c:	2e00      	cmp	r6, #0
 8024a1e:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8024a22:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8024a26:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8024a2a:	8808      	ldrh	r0, [r1, #0]
 8024a2c:	db2e      	blt.n	8024a8c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 8024a2e:	45b0      	cmp	r8, r6
 8024a30:	dd2c      	ble.n	8024a8c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 8024a32:	2d00      	cmp	r5, #0
 8024a34:	db28      	blt.n	8024a88 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 8024a36:	42ab      	cmp	r3, r5
 8024a38:	dd26      	ble.n	8024a88 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 8024a3a:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 8024a3e:	1c6a      	adds	r2, r5, #1
 8024a40:	d427      	bmi.n	8024a92 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8024a42:	4293      	cmp	r3, r2
 8024a44:	dd25      	ble.n	8024a92 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8024a46:	b324      	cbz	r4, 8024a92 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8024a48:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8024a4c:	3601      	adds	r6, #1
 8024a4e:	d424      	bmi.n	8024a9a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8024a50:	45b0      	cmp	r8, r6
 8024a52:	dd22      	ble.n	8024a9a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8024a54:	b31f      	cbz	r7, 8024a9e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 8024a56:	2d00      	cmp	r5, #0
 8024a58:	db1d      	blt.n	8024a96 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8024a5a:	42ab      	cmp	r3, r5
 8024a5c:	dd1b      	ble.n	8024a96 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8024a5e:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 8024a62:	3501      	adds	r5, #1
 8024a64:	d405      	bmi.n	8024a72 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8024a66:	42ab      	cmp	r3, r5
 8024a68:	dd03      	ble.n	8024a72 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8024a6a:	b124      	cbz	r4, 8024a76 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 8024a6c:	3301      	adds	r3, #1
 8024a6e:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 8024a72:	2c0f      	cmp	r4, #15
 8024a74:	d801      	bhi.n	8024a7a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8024a76:	2f0f      	cmp	r7, #15
 8024a78:	d914      	bls.n	8024aa4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 8024a7a:	4b27      	ldr	r3, [pc, #156]	; (8024b18 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 8024a7c:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8024a80:	4a26      	ldr	r2, [pc, #152]	; (8024b1c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 8024a82:	4827      	ldr	r0, [pc, #156]	; (8024b20 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 8024a84:	f002 fcbe 	bl	8027404 <__assert_func>
 8024a88:	4684      	mov	ip, r0
 8024a8a:	e7d8      	b.n	8024a3e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 8024a8c:	4602      	mov	r2, r0
 8024a8e:	4684      	mov	ip, r0
 8024a90:	e7dc      	b.n	8024a4c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 8024a92:	4602      	mov	r2, r0
 8024a94:	e7da      	b.n	8024a4c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 8024a96:	4606      	mov	r6, r0
 8024a98:	e7e3      	b.n	8024a62 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 8024a9a:	4606      	mov	r6, r0
 8024a9c:	e7e9      	b.n	8024a72 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8024a9e:	2c0f      	cmp	r4, #15
 8024aa0:	d8eb      	bhi.n	8024a7a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8024aa2:	4606      	mov	r6, r0
 8024aa4:	fb14 f307 	smulbb	r3, r4, r7
 8024aa8:	ea4f 450c 	mov.w	r5, ip, lsl #16
 8024aac:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8024ab0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8024ab4:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 8024ab8:	10db      	asrs	r3, r3, #3
 8024aba:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8024abe:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024ac2:	ea45 0c0c 	orr.w	ip, r5, ip
 8024ac6:	f1c7 0510 	rsb	r5, r7, #16
 8024aca:	ea4e 0202 	orr.w	r2, lr, r2
 8024ace:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 8024ad2:	1b2d      	subs	r5, r5, r4
 8024ad4:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8024ad8:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8024adc:	4354      	muls	r4, r2
 8024ade:	fb05 450c 	mla	r5, r5, ip, r4
 8024ae2:	0404      	lsls	r4, r0, #16
 8024ae4:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024ae8:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8024aec:	4320      	orrs	r0, r4
 8024aee:	fb03 5400 	mla	r4, r3, r0, r5
 8024af2:	0430      	lsls	r0, r6, #16
 8024af4:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8024af8:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8024afc:	4330      	orrs	r0, r6
 8024afe:	fb07 4000 	mla	r0, r7, r0, r4
 8024b02:	0d43      	lsrs	r3, r0, #21
 8024b04:	0940      	lsrs	r0, r0, #5
 8024b06:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024b0a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024b0e:	4318      	orrs	r0, r3
 8024b10:	8008      	strh	r0, [r1, #0]
 8024b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024b16:	bf00      	nop
 8024b18:	0802e3b6 	.word	0x0802e3b6
 8024b1c:	0802ea2f 	.word	0x0802ea2f
 8024b20:	0802e43a 	.word	0x0802e43a

08024b24 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024b28:	ed2d 8b08 	vpush	{d8-d11}
 8024b2c:	b08f      	sub	sp, #60	; 0x3c
 8024b2e:	461d      	mov	r5, r3
 8024b30:	eeb0 aa40 	vmov.f32	s20, s0
 8024b34:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8024b36:	eef0 9a60 	vmov.f32	s19, s1
 8024b3a:	9107      	str	r1, [sp, #28]
 8024b3c:	eeb0 9a41 	vmov.f32	s18, s2
 8024b40:	6859      	ldr	r1, [r3, #4]
 8024b42:	eeb0 8a62 	vmov.f32	s16, s5
 8024b46:	920c      	str	r2, [sp, #48]	; 0x30
 8024b48:	eef0 8a43 	vmov.f32	s17, s6
 8024b4c:	681b      	ldr	r3, [r3, #0]
 8024b4e:	eef0 ba44 	vmov.f32	s23, s8
 8024b52:	eeb0 ba64 	vmov.f32	s22, s9
 8024b56:	900d      	str	r0, [sp, #52]	; 0x34
 8024b58:	eef0 aa45 	vmov.f32	s21, s10
 8024b5c:	e9dd 2726 	ldrd	r2, r7, [sp, #152]	; 0x98
 8024b60:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 8024b64:	fb01 2707 	mla	r7, r1, r7, r2
 8024b68:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8024b6c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024b6e:	f8d3 8000 	ldr.w	r8, [r3]
 8024b72:	9b07      	ldr	r3, [sp, #28]
 8024b74:	2b00      	cmp	r3, #0
 8024b76:	dc03      	bgt.n	8024b80 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8024b78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024b7a:	2b00      	cmp	r3, #0
 8024b7c:	f340 8182 	ble.w	8024e84 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8024b80:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024b82:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024b86:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024b8a:	1e48      	subs	r0, r1, #1
 8024b8c:	f102 3cff 	add.w	ip, r2, #4294967295
 8024b90:	2d00      	cmp	r5, #0
 8024b92:	f340 809b 	ble.w	8024ccc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a8>
 8024b96:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8024b9a:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024b9e:	d406      	bmi.n	8024bae <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8024ba0:	4586      	cmp	lr, r0
 8024ba2:	da04      	bge.n	8024bae <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8024ba4:	2b00      	cmp	r3, #0
 8024ba6:	db02      	blt.n	8024bae <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8024ba8:	4563      	cmp	r3, ip
 8024baa:	f2c0 8090 	blt.w	8024cce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8024bae:	f11e 0e01 	adds.w	lr, lr, #1
 8024bb2:	f100 8084 	bmi.w	8024cbe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8024bb6:	4571      	cmp	r1, lr
 8024bb8:	f2c0 8081 	blt.w	8024cbe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8024bbc:	3301      	adds	r3, #1
 8024bbe:	d47e      	bmi.n	8024cbe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8024bc0:	429a      	cmp	r2, r3
 8024bc2:	db7c      	blt.n	8024cbe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8024bc4:	46aa      	mov	sl, r5
 8024bc6:	46b9      	mov	r9, r7
 8024bc8:	f1ba 0f00 	cmp.w	sl, #0
 8024bcc:	f340 8099 	ble.w	8024d02 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8024bd0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024bd2:	1421      	asrs	r1, r4, #16
 8024bd4:	ea4f 4026 	mov.w	r0, r6, asr #16
 8024bd8:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8024bdc:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8024be0:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8024be4:	f100 80d1 	bmi.w	8024d8a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8024be8:	f10e 3bff 	add.w	fp, lr, #4294967295
 8024bec:	4559      	cmp	r1, fp
 8024bee:	f280 80cc 	bge.w	8024d8a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8024bf2:	2800      	cmp	r0, #0
 8024bf4:	f2c0 80c9 	blt.w	8024d8a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8024bf8:	f103 3bff 	add.w	fp, r3, #4294967295
 8024bfc:	4558      	cmp	r0, fp
 8024bfe:	f280 80c4 	bge.w	8024d8a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8024c02:	fa0f fe8e 	sxth.w	lr, lr
 8024c06:	fb00 110e 	mla	r1, r0, lr, r1
 8024c0a:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8024c0e:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8024c12:	8841      	ldrh	r1, [r0, #2]
 8024c14:	f1bc 0f00 	cmp.w	ip, #0
 8024c18:	d00b      	beq.n	8024c32 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 8024c1a:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 8024c1e:	3b01      	subs	r3, #1
 8024c20:	005b      	lsls	r3, r3, #1
 8024c22:	3302      	adds	r3, #2
 8024c24:	eb00 0e03 	add.w	lr, r0, r3
 8024c28:	5ac3      	ldrh	r3, [r0, r3]
 8024c2a:	9308      	str	r3, [sp, #32]
 8024c2c:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8024c30:	9309      	str	r3, [sp, #36]	; 0x24
 8024c32:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8024c36:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8024c3a:	fb12 f30c 	smulbb	r3, r2, ip
 8024c3e:	f1cc 0e10 	rsb	lr, ip, #16
 8024c42:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8024c46:	10db      	asrs	r3, r3, #3
 8024c48:	ebae 0e02 	sub.w	lr, lr, r2
 8024c4c:	ea40 000b 	orr.w	r0, r0, fp
 8024c50:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8024c54:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8024c58:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8024c5c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8024c60:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8024c64:	ea4b 0101 	orr.w	r1, fp, r1
 8024c68:	4351      	muls	r1, r2
 8024c6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024c6c:	fb0e 1e00 	mla	lr, lr, r0, r1
 8024c70:	0410      	lsls	r0, r2, #16
 8024c72:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024c76:	9908      	ldr	r1, [sp, #32]
 8024c78:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8024c7c:	4310      	orrs	r0, r2
 8024c7e:	9a08      	ldr	r2, [sp, #32]
 8024c80:	0412      	lsls	r2, r2, #16
 8024c82:	fb03 e000 	mla	r0, r3, r0, lr
 8024c86:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8024c8a:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8024c8e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8024c92:	ea42 020e 	orr.w	r2, r2, lr
 8024c96:	fb03 0302 	mla	r3, r3, r2, r0
 8024c9a:	0d5a      	lsrs	r2, r3, #21
 8024c9c:	095b      	lsrs	r3, r3, #5
 8024c9e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024ca2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024ca6:	4313      	orrs	r3, r2
 8024ca8:	f8a9 3000 	strh.w	r3, [r9]
 8024cac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024cae:	f109 0902 	add.w	r9, r9, #2
 8024cb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8024cb6:	441c      	add	r4, r3
 8024cb8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024cba:	441e      	add	r6, r3
 8024cbc:	e784      	b.n	8024bc8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8024cbe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024cc0:	3d01      	subs	r5, #1
 8024cc2:	3702      	adds	r7, #2
 8024cc4:	441c      	add	r4, r3
 8024cc6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024cc8:	441e      	add	r6, r3
 8024cca:	e761      	b.n	8024b90 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8024ccc:	d01d      	beq.n	8024d0a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8024cce:	1e6b      	subs	r3, r5, #1
 8024cd0:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8024cd2:	fb00 4003 	mla	r0, r0, r3, r4
 8024cd6:	1400      	asrs	r0, r0, #16
 8024cd8:	f53f af74 	bmi.w	8024bc4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8024cdc:	3901      	subs	r1, #1
 8024cde:	4288      	cmp	r0, r1
 8024ce0:	f6bf af70 	bge.w	8024bc4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8024ce4:	9924      	ldr	r1, [sp, #144]	; 0x90
 8024ce6:	fb01 6303 	mla	r3, r1, r3, r6
 8024cea:	141b      	asrs	r3, r3, #16
 8024cec:	f53f af6a 	bmi.w	8024bc4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8024cf0:	3a01      	subs	r2, #1
 8024cf2:	4293      	cmp	r3, r2
 8024cf4:	f6bf af66 	bge.w	8024bc4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8024cf8:	46a9      	mov	r9, r5
 8024cfa:	46ba      	mov	sl, r7
 8024cfc:	f1b9 0f00 	cmp.w	r9, #0
 8024d00:	dc5b      	bgt.n	8024dba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8024d02:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8024d06:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8024d0a:	9b07      	ldr	r3, [sp, #28]
 8024d0c:	2b00      	cmp	r3, #0
 8024d0e:	f340 80b9 	ble.w	8024e84 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8024d12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024d16:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024d18:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024d1c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024d20:	eef0 6a48 	vmov.f32	s13, s16
 8024d24:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024d28:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024d2c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024d30:	ee16 4a90 	vmov	r4, s13
 8024d34:	eef0 6a68 	vmov.f32	s13, s17
 8024d38:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024d3c:	ee16 6a90 	vmov	r6, s13
 8024d40:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024d44:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024d48:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024d4c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024d50:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024d54:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024d58:	ee18 2a10 	vmov	r2, s16
 8024d5c:	eeb0 8a47 	vmov.f32	s16, s14
 8024d60:	fb92 f3f3 	sdiv	r3, r2, r3
 8024d64:	ee18 2a90 	vmov	r2, s17
 8024d68:	9323      	str	r3, [sp, #140]	; 0x8c
 8024d6a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024d6c:	eef0 8a67 	vmov.f32	s17, s15
 8024d70:	fb92 f3f3 	sdiv	r3, r2, r3
 8024d74:	9324      	str	r3, [sp, #144]	; 0x90
 8024d76:	9b07      	ldr	r3, [sp, #28]
 8024d78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024d7a:	3b01      	subs	r3, #1
 8024d7c:	9307      	str	r3, [sp, #28]
 8024d7e:	bf08      	it	eq
 8024d80:	4615      	moveq	r5, r2
 8024d82:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024d84:	bf18      	it	ne
 8024d86:	461d      	movne	r5, r3
 8024d88:	e6f3      	b.n	8024b72 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8024d8a:	f111 0b01 	adds.w	fp, r1, #1
 8024d8e:	d48d      	bmi.n	8024cac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8024d90:	45de      	cmp	lr, fp
 8024d92:	db8b      	blt.n	8024cac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8024d94:	f110 0b01 	adds.w	fp, r0, #1
 8024d98:	d488      	bmi.n	8024cac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8024d9a:	455b      	cmp	r3, fp
 8024d9c:	db86      	blt.n	8024cac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8024d9e:	b21b      	sxth	r3, r3
 8024da0:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8024da4:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8024da8:	9300      	str	r3, [sp, #0]
 8024daa:	4642      	mov	r2, r8
 8024dac:	fa0f f38e 	sxth.w	r3, lr
 8024db0:	4649      	mov	r1, r9
 8024db2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8024db4:	f7ff fe2a 	bl	8024a0c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8024db8:	e778      	b.n	8024cac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8024dba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024dbc:	1420      	asrs	r0, r4, #16
 8024dbe:	1431      	asrs	r1, r6, #16
 8024dc0:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8024dc4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8024dc8:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8024dcc:	fb03 0101 	mla	r1, r3, r1, r0
 8024dd0:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8024dd4:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8024dd8:	8841      	ldrh	r1, [r0, #2]
 8024dda:	f1be 0f00 	cmp.w	lr, #0
 8024dde:	d00b      	beq.n	8024df8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8024de0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8024de4:	3b01      	subs	r3, #1
 8024de6:	005b      	lsls	r3, r3, #1
 8024de8:	3302      	adds	r3, #2
 8024dea:	eb00 0b03 	add.w	fp, r0, r3
 8024dee:	5ac3      	ldrh	r3, [r0, r3]
 8024df0:	930a      	str	r3, [sp, #40]	; 0x28
 8024df2:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8024df6:	930b      	str	r3, [sp, #44]	; 0x2c
 8024df8:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8024dfc:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8024e00:	fb12 f30e 	smulbb	r3, r2, lr
 8024e04:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8024e08:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8024e0c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8024e10:	10db      	asrs	r3, r3, #3
 8024e12:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8024e16:	ea40 000c 	orr.w	r0, r0, ip
 8024e1a:	f1ce 0c10 	rsb	ip, lr, #16
 8024e1e:	ea4b 0101 	orr.w	r1, fp, r1
 8024e22:	f109 39ff 	add.w	r9, r9, #4294967295
 8024e26:	ebac 0c02 	sub.w	ip, ip, r2
 8024e2a:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8024e2e:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8024e32:	4351      	muls	r1, r2
 8024e34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024e36:	fb0c 1c00 	mla	ip, ip, r0, r1
 8024e3a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8024e3c:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8024e40:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8024e44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024e46:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8024e4a:	0412      	lsls	r2, r2, #16
 8024e4c:	ea4b 0000 	orr.w	r0, fp, r0
 8024e50:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 8024e54:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8024e58:	fb03 c000 	mla	r0, r3, r0, ip
 8024e5c:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8024e60:	ea42 0b0b 	orr.w	fp, r2, fp
 8024e64:	fb03 000b 	mla	r0, r3, fp, r0
 8024e68:	0d43      	lsrs	r3, r0, #21
 8024e6a:	0940      	lsrs	r0, r0, #5
 8024e6c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024e70:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024e74:	4318      	orrs	r0, r3
 8024e76:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024e78:	441c      	add	r4, r3
 8024e7a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024e7c:	f82a 0b02 	strh.w	r0, [sl], #2
 8024e80:	441e      	add	r6, r3
 8024e82:	e73b      	b.n	8024cfc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8024e84:	b00f      	add	sp, #60	; 0x3c
 8024e86:	ecbd 8b08 	vpop	{d8-d11}
 8024e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08024e90 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8024e90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024e94:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8024e98:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8024e9c:	fb04 5603 	mla	r6, r4, r3, r5
 8024ea0:	2c00      	cmp	r4, #0
 8024ea2:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8024ea6:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8024eaa:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8024eae:	db36      	blt.n	8024f1e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 8024eb0:	45a6      	cmp	lr, r4
 8024eb2:	dd34      	ble.n	8024f1e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 8024eb4:	2d00      	cmp	r5, #0
 8024eb6:	db30      	blt.n	8024f1a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 8024eb8:	42ab      	cmp	r3, r5
 8024eba:	dd2e      	ble.n	8024f1a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 8024ebc:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8024ec0:	1c6e      	adds	r6, r5, #1
 8024ec2:	d42f      	bmi.n	8024f24 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 8024ec4:	42b3      	cmp	r3, r6
 8024ec6:	dd2d      	ble.n	8024f24 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 8024ec8:	b370      	cbz	r0, 8024f28 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 8024eca:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8024ece:	3401      	adds	r4, #1
 8024ed0:	d42e      	bmi.n	8024f30 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 8024ed2:	45a6      	cmp	lr, r4
 8024ed4:	dd2c      	ble.n	8024f30 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 8024ed6:	b377      	cbz	r7, 8024f36 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa6>
 8024ed8:	2d00      	cmp	r5, #0
 8024eda:	db27      	blt.n	8024f2c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 8024edc:	42ab      	cmp	r3, r5
 8024ede:	dd25      	ble.n	8024f2c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 8024ee0:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8024ee4:	3501      	adds	r5, #1
 8024ee6:	d429      	bmi.n	8024f3c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 8024ee8:	42ab      	cmp	r3, r5
 8024eea:	dd27      	ble.n	8024f3c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 8024eec:	b340      	cbz	r0, 8024f40 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb0>
 8024eee:	3301      	adds	r3, #1
 8024ef0:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8024ef4:	280f      	cmp	r0, #15
 8024ef6:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8024efa:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8024efe:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8024f02:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8024f06:	d801      	bhi.n	8024f0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x7c>
 8024f08:	2f0f      	cmp	r7, #15
 8024f0a:	d91b      	bls.n	8024f44 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 8024f0c:	4b8d      	ldr	r3, [pc, #564]	; (8025144 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b4>)
 8024f0e:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8024f12:	4a8d      	ldr	r2, [pc, #564]	; (8025148 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b8>)
 8024f14:	488d      	ldr	r0, [pc, #564]	; (802514c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2bc>)
 8024f16:	f002 fa75 	bl	8027404 <__assert_func>
 8024f1a:	2200      	movs	r2, #0
 8024f1c:	e7d0      	b.n	8024ec0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x30>
 8024f1e:	2600      	movs	r6, #0
 8024f20:	4632      	mov	r2, r6
 8024f22:	e7d4      	b.n	8024ece <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 8024f24:	2600      	movs	r6, #0
 8024f26:	e7d2      	b.n	8024ece <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 8024f28:	4606      	mov	r6, r0
 8024f2a:	e7d0      	b.n	8024ece <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 8024f2c:	2400      	movs	r4, #0
 8024f2e:	e7d9      	b.n	8024ee4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x54>
 8024f30:	2300      	movs	r3, #0
 8024f32:	461c      	mov	r4, r3
 8024f34:	e7de      	b.n	8024ef4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8024f36:	463b      	mov	r3, r7
 8024f38:	463c      	mov	r4, r7
 8024f3a:	e7db      	b.n	8024ef4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8024f3c:	2300      	movs	r3, #0
 8024f3e:	e7d9      	b.n	8024ef4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8024f40:	4603      	mov	r3, r0
 8024f42:	e7d7      	b.n	8024ef4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8024f44:	b280      	uxth	r0, r0
 8024f46:	b2bf      	uxth	r7, r7
 8024f48:	fb07 fe00 	mul.w	lr, r7, r0
 8024f4c:	0100      	lsls	r0, r0, #4
 8024f4e:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8024f52:	eba0 0c0e 	sub.w	ip, r0, lr
 8024f56:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8024f5a:	b2bf      	uxth	r7, r7
 8024f5c:	fa1f fc8c 	uxth.w	ip, ip
 8024f60:	1bed      	subs	r5, r5, r7
 8024f62:	fb0a f00c 	mul.w	r0, sl, ip
 8024f66:	b2ad      	uxth	r5, r5
 8024f68:	fb0b 0005 	mla	r0, fp, r5, r0
 8024f6c:	fb07 0009 	mla	r0, r7, r9, r0
 8024f70:	fb0e 0008 	mla	r0, lr, r8, r0
 8024f74:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024f78:	9001      	str	r0, [sp, #4]
 8024f7a:	2800      	cmp	r0, #0
 8024f7c:	f000 80de 	beq.w	802513c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2ac>
 8024f80:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8024f84:	d018      	beq.n	8024fb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x128>
 8024f86:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8024f8a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024f8e:	fb0b f000 	mul.w	r0, fp, r0
 8024f92:	fb0b fb02 	mul.w	fp, fp, r2
 8024f96:	0a02      	lsrs	r2, r0, #8
 8024f98:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8024f9c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024fa0:	4402      	add	r2, r0
 8024fa2:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8024fa6:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8024faa:	0a12      	lsrs	r2, r2, #8
 8024fac:	0a00      	lsrs	r0, r0, #8
 8024fae:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024fb2:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024fb6:	4302      	orrs	r2, r0
 8024fb8:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8024fbc:	d01a      	beq.n	8024ff4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x164>
 8024fbe:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8024fc2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024fc6:	fb0a f000 	mul.w	r0, sl, r0
 8024fca:	fb0a fa06 	mul.w	sl, sl, r6
 8024fce:	0a06      	lsrs	r6, r0, #8
 8024fd0:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8024fd4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024fd8:	4406      	add	r6, r0
 8024fda:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8024fde:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8024fe2:	0a36      	lsrs	r6, r6, #8
 8024fe4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024fe8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024fec:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024ff0:	ea46 060a 	orr.w	r6, r6, sl
 8024ff4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024ff8:	d01b      	beq.n	8025032 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1a2>
 8024ffa:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8024ffe:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8025002:	fb09 fa0a 	mul.w	sl, r9, sl
 8025006:	fb09 f004 	mul.w	r0, r9, r4
 802500a:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802500e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025012:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8025016:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802501a:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 802501e:	4454      	add	r4, sl
 8025020:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025024:	0a24      	lsrs	r4, r4, #8
 8025026:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802502a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802502e:	ea44 0409 	orr.w	r4, r4, r9
 8025032:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025036:	d01b      	beq.n	8025070 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1e0>
 8025038:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 802503c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025040:	fb08 f909 	mul.w	r9, r8, r9
 8025044:	fb08 f003 	mul.w	r0, r8, r3
 8025048:	ea4f 2319 	mov.w	r3, r9, lsr #8
 802504c:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8025050:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8025054:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025058:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 802505c:	444b      	add	r3, r9
 802505e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8025062:	0a1b      	lsrs	r3, r3, #8
 8025064:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8025068:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802506c:	ea43 0308 	orr.w	r3, r3, r8
 8025070:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8025074:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025078:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 802507c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025080:	fb0c f808 	mul.w	r8, ip, r8
 8025084:	8808      	ldrh	r0, [r1, #0]
 8025086:	fb0c f606 	mul.w	r6, ip, r6
 802508a:	fb05 8909 	mla	r9, r5, r9, r8
 802508e:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8025092:	fb05 6502 	mla	r5, r5, r2, r6
 8025096:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802509a:	fb07 9908 	mla	r9, r7, r8, r9
 802509e:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 80250a2:	fb07 5704 	mla	r7, r7, r4, r5
 80250a6:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 80250aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80250ae:	b2b6      	uxth	r6, r6
 80250b0:	fb0e 9808 	mla	r8, lr, r8, r9
 80250b4:	9a01      	ldr	r2, [sp, #4]
 80250b6:	fb0e 7e03 	mla	lr, lr, r3, r7
 80250ba:	1205      	asrs	r5, r0, #8
 80250bc:	4372      	muls	r2, r6
 80250be:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80250c2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80250c6:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80250ca:	1c53      	adds	r3, r2, #1
 80250cc:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 80250d0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80250d4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80250d8:	ea48 0e0e 	orr.w	lr, r8, lr
 80250dc:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80250e0:	ea4f 421e 	mov.w	r2, lr, lsr #16
 80250e4:	f3ce 2407 	ubfx	r4, lr, #8, #8
 80250e8:	b2db      	uxtb	r3, r3
 80250ea:	fb12 f206 	smulbb	r2, r2, r6
 80250ee:	fa5f fe8e 	uxtb.w	lr, lr
 80250f2:	fb14 f406 	smulbb	r4, r4, r6
 80250f6:	fb05 2503 	mla	r5, r5, r3, r2
 80250fa:	10c2      	asrs	r2, r0, #3
 80250fc:	fb1e fe06 	smulbb	lr, lr, r6
 8025100:	00c0      	lsls	r0, r0, #3
 8025102:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8025106:	b2ad      	uxth	r5, r5
 8025108:	b2c0      	uxtb	r0, r0
 802510a:	fb02 4203 	mla	r2, r2, r3, r4
 802510e:	fb00 e303 	mla	r3, r0, r3, lr
 8025112:	b294      	uxth	r4, r2
 8025114:	b298      	uxth	r0, r3
 8025116:	1c6b      	adds	r3, r5, #1
 8025118:	1c62      	adds	r2, r4, #1
 802511a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802511e:	1c43      	adds	r3, r0, #1
 8025120:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8025124:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8025128:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802512c:	0952      	lsrs	r2, r2, #5
 802512e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025132:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025136:	432b      	orrs	r3, r5
 8025138:	4313      	orrs	r3, r2
 802513a:	800b      	strh	r3, [r1, #0]
 802513c:	b003      	add	sp, #12
 802513e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025142:	bf00      	nop
 8025144:	0802e3b6 	.word	0x0802e3b6
 8025148:	0802e986 	.word	0x0802e986
 802514c:	0802e43a 	.word	0x0802e43a

08025150 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025154:	ed2d 8b08 	vpush	{d8-d11}
 8025158:	b09d      	sub	sp, #116	; 0x74
 802515a:	eeb0 aa40 	vmov.f32	s20, s0
 802515e:	eef0 9a60 	vmov.f32	s19, s1
 8025162:	9219      	str	r2, [sp, #100]	; 0x64
 8025164:	eeb0 9a41 	vmov.f32	s18, s2
 8025168:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 802516a:	eeb0 8a62 	vmov.f32	s16, s5
 802516e:	9307      	str	r3, [sp, #28]
 8025170:	eef0 8a43 	vmov.f32	s17, s6
 8025174:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8025178:	eef0 ba44 	vmov.f32	s23, s8
 802517c:	901b      	str	r0, [sp, #108]	; 0x6c
 802517e:	eeb0 ba64 	vmov.f32	s22, s9
 8025182:	931a      	str	r3, [sp, #104]	; 0x68
 8025184:	eef0 aa45 	vmov.f32	s21, s10
 8025188:	6850      	ldr	r0, [r2, #4]
 802518a:	9117      	str	r1, [sp, #92]	; 0x5c
 802518c:	6812      	ldr	r2, [r2, #0]
 802518e:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8025192:	e9dd 462f 	ldrd	r4, r6, [sp, #188]	; 0xbc
 8025196:	fb00 1303 	mla	r3, r0, r3, r1
 802519a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802519e:	930a      	str	r3, [sp, #40]	; 0x28
 80251a0:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80251a2:	681b      	ldr	r3, [r3, #0]
 80251a4:	9310      	str	r3, [sp, #64]	; 0x40
 80251a6:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 80251aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80251ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80251ae:	2b00      	cmp	r3, #0
 80251b0:	dc03      	bgt.n	80251ba <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80251b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80251b4:	2b00      	cmp	r3, #0
 80251b6:	f340 8375 	ble.w	80258a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 80251ba:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80251bc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80251c0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80251c4:	1e48      	subs	r0, r1, #1
 80251c6:	1e57      	subs	r7, r2, #1
 80251c8:	9b07      	ldr	r3, [sp, #28]
 80251ca:	2b00      	cmp	r3, #0
 80251cc:	f340 818e 	ble.w	80254ec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 80251d0:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80251d4:	ea4f 4326 	mov.w	r3, r6, asr #16
 80251d8:	d406      	bmi.n	80251e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80251da:	4584      	cmp	ip, r0
 80251dc:	da04      	bge.n	80251e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80251de:	2b00      	cmp	r3, #0
 80251e0:	db02      	blt.n	80251e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80251e2:	42bb      	cmp	r3, r7
 80251e4:	f2c0 8183 	blt.w	80254ee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 80251e8:	f11c 0c01 	adds.w	ip, ip, #1
 80251ec:	f100 8173 	bmi.w	80254d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80251f0:	4561      	cmp	r1, ip
 80251f2:	f2c0 8170 	blt.w	80254d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80251f6:	3301      	adds	r3, #1
 80251f8:	f100 816d 	bmi.w	80254d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80251fc:	429a      	cmp	r2, r3
 80251fe:	f2c0 816a 	blt.w	80254d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8025202:	9b07      	ldr	r3, [sp, #28]
 8025204:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8025206:	9318      	str	r3, [sp, #96]	; 0x60
 8025208:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802520a:	2b00      	cmp	r3, #0
 802520c:	f340 818c 	ble.w	8025528 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 8025210:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8025212:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8025216:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8025218:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802521c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8025220:	1422      	asrs	r2, r4, #16
 8025222:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8025226:	689b      	ldr	r3, [r3, #8]
 8025228:	f100 81cd 	bmi.w	80255c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 802522c:	f103 38ff 	add.w	r8, r3, #4294967295
 8025230:	4542      	cmp	r2, r8
 8025232:	f280 81c8 	bge.w	80255c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8025236:	f1bc 0f00 	cmp.w	ip, #0
 802523a:	f2c0 81c4 	blt.w	80255c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 802523e:	f10e 38ff 	add.w	r8, lr, #4294967295
 8025242:	45c4      	cmp	ip, r8
 8025244:	f280 81bf 	bge.w	80255c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8025248:	b21b      	sxth	r3, r3
 802524a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802524c:	fb0c 2203 	mla	r2, ip, r3, r2
 8025250:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8025254:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8025258:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802525c:	2800      	cmp	r0, #0
 802525e:	f000 81a9 	beq.w	80255b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x464>
 8025262:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8025266:	950c      	str	r5, [sp, #48]	; 0x30
 8025268:	0e2d      	lsrs	r5, r5, #24
 802526a:	9513      	str	r5, [sp, #76]	; 0x4c
 802526c:	b181      	cbz	r1, 8025290 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 802526e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8025272:	3b01      	subs	r3, #1
 8025274:	009b      	lsls	r3, r3, #2
 8025276:	3304      	adds	r3, #4
 8025278:	eb08 0c03 	add.w	ip, r8, r3
 802527c:	f858 3003 	ldr.w	r3, [r8, r3]
 8025280:	9308      	str	r3, [sp, #32]
 8025282:	0e1b      	lsrs	r3, r3, #24
 8025284:	9311      	str	r3, [sp, #68]	; 0x44
 8025286:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802528a:	930d      	str	r3, [sp, #52]	; 0x34
 802528c:	0e1b      	lsrs	r3, r3, #24
 802528e:	9314      	str	r3, [sp, #80]	; 0x50
 8025290:	b280      	uxth	r0, r0
 8025292:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8025294:	b289      	uxth	r1, r1
 8025296:	fb00 f901 	mul.w	r9, r0, r1
 802529a:	0100      	lsls	r0, r0, #4
 802529c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80252a0:	eba0 0809 	sub.w	r8, r0, r9
 80252a4:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80252a8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80252aa:	b289      	uxth	r1, r1
 80252ac:	fa1f f888 	uxth.w	r8, r8
 80252b0:	1a5b      	subs	r3, r3, r1
 80252b2:	fb08 f000 	mul.w	r0, r8, r0
 80252b6:	b29b      	uxth	r3, r3
 80252b8:	fb03 000e 	mla	r0, r3, lr, r0
 80252bc:	fb01 0005 	mla	r0, r1, r5, r0
 80252c0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80252c2:	fb09 0005 	mla	r0, r9, r5, r0
 80252c6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80252ca:	2800      	cmp	r0, #0
 80252cc:	f000 80fa 	beq.w	80254c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80252d0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80252d4:	d01b      	beq.n	802530e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80252d6:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80252da:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80252de:	fb0e fa0a 	mul.w	sl, lr, sl
 80252e2:	fb0e fe02 	mul.w	lr, lr, r2
 80252e6:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80252ea:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80252ee:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80252f2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80252f6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80252fa:	4452      	add	r2, sl
 80252fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025300:	0a12      	lsrs	r2, r2, #8
 8025302:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025306:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802530a:	ea42 020c 	orr.w	r2, r2, ip
 802530e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8025310:	2dff      	cmp	r5, #255	; 0xff
 8025312:	d021      	beq.n	8025358 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8025314:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8025316:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802531a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802531c:	fb05 fb0b 	mul.w	fp, r5, fp
 8025320:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8025322:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8025326:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8025328:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802532c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025330:	fb05 fa0a 	mul.w	sl, r5, sl
 8025334:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025338:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802533c:	44de      	add	lr, fp
 802533e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025342:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025346:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802534a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802534e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025352:	ea4e 050a 	orr.w	r5, lr, sl
 8025356:	950c      	str	r5, [sp, #48]	; 0x30
 8025358:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802535a:	2dff      	cmp	r5, #255	; 0xff
 802535c:	d021      	beq.n	80253a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 802535e:	9d08      	ldr	r5, [sp, #32]
 8025360:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8025364:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8025366:	fb05 fb0b 	mul.w	fp, r5, fp
 802536a:	9d08      	ldr	r5, [sp, #32]
 802536c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8025370:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8025372:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025376:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802537a:	fb05 fa0a 	mul.w	sl, r5, sl
 802537e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025382:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025386:	44de      	add	lr, fp
 8025388:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802538c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025390:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025394:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025398:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802539c:	ea4e 050a 	orr.w	r5, lr, sl
 80253a0:	9508      	str	r5, [sp, #32]
 80253a2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80253a4:	2dff      	cmp	r5, #255	; 0xff
 80253a6:	d021      	beq.n	80253ec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 80253a8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80253aa:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80253ae:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80253b0:	fb05 fb0b 	mul.w	fp, r5, fp
 80253b4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80253b6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80253ba:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80253bc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80253c0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80253c4:	fb05 fa0a 	mul.w	sl, r5, sl
 80253c8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80253cc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80253d0:	44de      	add	lr, fp
 80253d2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80253d6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80253da:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80253de:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80253e2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80253e6:	ea4e 050a 	orr.w	r5, lr, sl
 80253ea:	950d      	str	r5, [sp, #52]	; 0x34
 80253ec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80253ee:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80253f2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80253f6:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80253fa:	9d08      	ldr	r5, [sp, #32]
 80253fc:	fb08 fc0c 	mul.w	ip, r8, ip
 8025400:	fb03 cc0e 	mla	ip, r3, lr, ip
 8025404:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8025408:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802540a:	fb01 cc0e 	mla	ip, r1, lr, ip
 802540e:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8025412:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8025414:	fb09 cc0e 	mla	ip, r9, lr, ip
 8025418:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802541c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802541e:	fb08 f80e 	mul.w	r8, r8, lr
 8025422:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025426:	fb03 8202 	mla	r2, r3, r2, r8
 802542a:	9b08      	ldr	r3, [sp, #32]
 802542c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025430:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8025434:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025436:	fb01 220a 	mla	r2, r1, sl, r2
 802543a:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 802543e:	883b      	ldrh	r3, [r7, #0]
 8025440:	fb09 2901 	mla	r9, r9, r1, r2
 8025444:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8025446:	1219      	asrs	r1, r3, #8
 8025448:	4342      	muls	r2, r0
 802544a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802544e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8025452:	1c50      	adds	r0, r2, #1
 8025454:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8025458:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 802545c:	ea4c 0c09 	orr.w	ip, ip, r9
 8025460:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8025464:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8025468:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 802546c:	fa5f fc8c 	uxtb.w	ip, ip
 8025470:	fb12 f205 	smulbb	r2, r2, r5
 8025474:	b2c0      	uxtb	r0, r0
 8025476:	fb1c fc05 	smulbb	ip, ip, r5
 802547a:	fb01 2100 	mla	r1, r1, r0, r2
 802547e:	10da      	asrs	r2, r3, #3
 8025480:	fb1e fe05 	smulbb	lr, lr, r5
 8025484:	00db      	lsls	r3, r3, #3
 8025486:	b289      	uxth	r1, r1
 8025488:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802548c:	b2db      	uxtb	r3, r3
 802548e:	fb02 e200 	mla	r2, r2, r0, lr
 8025492:	fb03 c300 	mla	r3, r3, r0, ip
 8025496:	b292      	uxth	r2, r2
 8025498:	fa1f fc83 	uxth.w	ip, r3
 802549c:	1c4b      	adds	r3, r1, #1
 802549e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80254a2:	f10c 0301 	add.w	r3, ip, #1
 80254a6:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80254aa:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80254ae:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80254b2:	430b      	orrs	r3, r1
 80254b4:	1c51      	adds	r1, r2, #1
 80254b6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80254ba:	0952      	lsrs	r2, r2, #5
 80254bc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80254c0:	4313      	orrs	r3, r2
 80254c2:	803b      	strh	r3, [r7, #0]
 80254c4:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80254c6:	3702      	adds	r7, #2
 80254c8:	441c      	add	r4, r3
 80254ca:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80254cc:	441e      	add	r6, r3
 80254ce:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80254d0:	3b01      	subs	r3, #1
 80254d2:	9318      	str	r3, [sp, #96]	; 0x60
 80254d4:	e698      	b.n	8025208 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80254d6:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80254d8:	441c      	add	r4, r3
 80254da:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80254dc:	441e      	add	r6, r3
 80254de:	9b07      	ldr	r3, [sp, #28]
 80254e0:	3b01      	subs	r3, #1
 80254e2:	9307      	str	r3, [sp, #28]
 80254e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80254e6:	3302      	adds	r3, #2
 80254e8:	930a      	str	r3, [sp, #40]	; 0x28
 80254ea:	e66d      	b.n	80251c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80254ec:	d023      	beq.n	8025536 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 80254ee:	9b07      	ldr	r3, [sp, #28]
 80254f0:	9831      	ldr	r0, [sp, #196]	; 0xc4
 80254f2:	3b01      	subs	r3, #1
 80254f4:	fb00 4003 	mla	r0, r0, r3, r4
 80254f8:	1400      	asrs	r0, r0, #16
 80254fa:	f53f ae82 	bmi.w	8025202 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80254fe:	3901      	subs	r1, #1
 8025500:	4288      	cmp	r0, r1
 8025502:	f6bf ae7e 	bge.w	8025202 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8025506:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8025508:	fb01 6303 	mla	r3, r1, r3, r6
 802550c:	141b      	asrs	r3, r3, #16
 802550e:	f53f ae78 	bmi.w	8025202 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8025512:	3a01      	subs	r2, #1
 8025514:	4293      	cmp	r3, r2
 8025516:	f6bf ae74 	bge.w	8025202 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802551a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802551e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8025522:	f1bb 0f00 	cmp.w	fp, #0
 8025526:	dc6c      	bgt.n	8025602 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 8025528:	9b07      	ldr	r3, [sp, #28]
 802552a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802552e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025530:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8025534:	930a      	str	r3, [sp, #40]	; 0x28
 8025536:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025538:	2b00      	cmp	r3, #0
 802553a:	f340 81b3 	ble.w	80258a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 802553e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025542:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025544:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025548:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802554c:	eef0 6a48 	vmov.f32	s13, s16
 8025550:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025554:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025558:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802555c:	ee16 4a90 	vmov	r4, s13
 8025560:	eef0 6a68 	vmov.f32	s13, s17
 8025564:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025568:	ee16 6a90 	vmov	r6, s13
 802556c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025570:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025574:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025578:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802557c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025580:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025584:	ee18 2a10 	vmov	r2, s16
 8025588:	eeb0 8a47 	vmov.f32	s16, s14
 802558c:	fb92 f3f3 	sdiv	r3, r2, r3
 8025590:	ee18 2a90 	vmov	r2, s17
 8025594:	9331      	str	r3, [sp, #196]	; 0xc4
 8025596:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025598:	eef0 8a67 	vmov.f32	s17, s15
 802559c:	fb92 f3f3 	sdiv	r3, r2, r3
 80255a0:	9332      	str	r3, [sp, #200]	; 0xc8
 80255a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80255a4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80255a6:	3b01      	subs	r3, #1
 80255a8:	9317      	str	r3, [sp, #92]	; 0x5c
 80255aa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80255ac:	bf08      	it	eq
 80255ae:	4613      	moveq	r3, r2
 80255b0:	9307      	str	r3, [sp, #28]
 80255b2:	e5fb      	b.n	80251ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80255b4:	2900      	cmp	r1, #0
 80255b6:	f43f ae6b 	beq.w	8025290 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80255ba:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80255be:	9308      	str	r3, [sp, #32]
 80255c0:	0e1b      	lsrs	r3, r3, #24
 80255c2:	9311      	str	r3, [sp, #68]	; 0x44
 80255c4:	e664      	b.n	8025290 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80255c6:	f112 0801 	adds.w	r8, r2, #1
 80255ca:	f53f af7b 	bmi.w	80254c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80255ce:	4543      	cmp	r3, r8
 80255d0:	f6ff af78 	blt.w	80254c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80255d4:	f11c 0801 	adds.w	r8, ip, #1
 80255d8:	f53f af74 	bmi.w	80254c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80255dc:	45c6      	cmp	lr, r8
 80255de:	f6ff af71 	blt.w	80254c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80255e2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80255e4:	b21b      	sxth	r3, r3
 80255e6:	9201      	str	r2, [sp, #4]
 80255e8:	fa0f f28e 	sxth.w	r2, lr
 80255ec:	e9cd 1504 	strd	r1, r5, [sp, #16]
 80255f0:	e9cd c002 	strd	ip, r0, [sp, #8]
 80255f4:	9200      	str	r2, [sp, #0]
 80255f6:	4639      	mov	r1, r7
 80255f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80255fa:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80255fc:	f7ff fc48 	bl	8024e90 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8025600:	e760      	b.n	80254c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8025602:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8025604:	1427      	asrs	r7, r4, #16
 8025606:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8025608:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802560c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025610:	1433      	asrs	r3, r6, #16
 8025612:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8025616:	fb01 7303 	mla	r3, r1, r3, r7
 802561a:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 802561e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8025622:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8025626:	2a00      	cmp	r2, #0
 8025628:	f000 8133 	beq.w	8025892 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x742>
 802562c:	687d      	ldr	r5, [r7, #4]
 802562e:	950e      	str	r5, [sp, #56]	; 0x38
 8025630:	0e2d      	lsrs	r5, r5, #24
 8025632:	9515      	str	r5, [sp, #84]	; 0x54
 8025634:	b178      	cbz	r0, 8025656 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8025636:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 802563a:	3901      	subs	r1, #1
 802563c:	0089      	lsls	r1, r1, #2
 802563e:	3104      	adds	r1, #4
 8025640:	eb07 0e01 	add.w	lr, r7, r1
 8025644:	5879      	ldr	r1, [r7, r1]
 8025646:	9109      	str	r1, [sp, #36]	; 0x24
 8025648:	0e09      	lsrs	r1, r1, #24
 802564a:	9112      	str	r1, [sp, #72]	; 0x48
 802564c:	f8de 1004 	ldr.w	r1, [lr, #4]
 8025650:	910f      	str	r1, [sp, #60]	; 0x3c
 8025652:	0e09      	lsrs	r1, r1, #24
 8025654:	9116      	str	r1, [sp, #88]	; 0x58
 8025656:	b292      	uxth	r2, r2
 8025658:	9915      	ldr	r1, [sp, #84]	; 0x54
 802565a:	b280      	uxth	r0, r0
 802565c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802565e:	fb02 f800 	mul.w	r8, r2, r0
 8025662:	0112      	lsls	r2, r2, #4
 8025664:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8025668:	eba2 0e08 	sub.w	lr, r2, r8
 802566c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8025670:	b280      	uxth	r0, r0
 8025672:	fa1f fe8e 	uxth.w	lr, lr
 8025676:	1a12      	subs	r2, r2, r0
 8025678:	fb0e f101 	mul.w	r1, lr, r1
 802567c:	b292      	uxth	r2, r2
 802567e:	fb02 110c 	mla	r1, r2, ip, r1
 8025682:	fb00 1105 	mla	r1, r0, r5, r1
 8025686:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8025688:	fb08 1105 	mla	r1, r8, r5, r1
 802568c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025690:	2900      	cmp	r1, #0
 8025692:	f000 80f5 	beq.w	8025880 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8025696:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802569a:	d019      	beq.n	80256d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x580>
 802569c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80256a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80256a4:	fb0c fa0a 	mul.w	sl, ip, sl
 80256a8:	fb0c fc03 	mul.w	ip, ip, r3
 80256ac:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80256b0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80256b4:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80256b8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80256bc:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80256c0:	4453      	add	r3, sl
 80256c2:	0a3f      	lsrs	r7, r7, #8
 80256c4:	0a1b      	lsrs	r3, r3, #8
 80256c6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80256ca:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80256ce:	433b      	orrs	r3, r7
 80256d0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80256d2:	2dff      	cmp	r5, #255	; 0xff
 80256d4:	d020      	beq.n	8025718 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c8>
 80256d6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80256d8:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80256dc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80256de:	436f      	muls	r7, r5
 80256e0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80256e2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80256e6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80256ea:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80256ec:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80256f0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80256f4:	fb05 fa0a 	mul.w	sl, r5, sl
 80256f8:	44bc      	add	ip, r7
 80256fa:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80256fe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025702:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025706:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802570a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802570e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025712:	ea4c 050a 	orr.w	r5, ip, sl
 8025716:	950e      	str	r5, [sp, #56]	; 0x38
 8025718:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802571a:	2dff      	cmp	r5, #255	; 0xff
 802571c:	d020      	beq.n	8025760 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x610>
 802571e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8025720:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8025724:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8025726:	436f      	muls	r7, r5
 8025728:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802572a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802572e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8025732:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8025734:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025738:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802573c:	fb05 fa0a 	mul.w	sl, r5, sl
 8025740:	44bc      	add	ip, r7
 8025742:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025746:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802574a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802574e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025752:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025756:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802575a:	ea4c 050a 	orr.w	r5, ip, sl
 802575e:	9509      	str	r5, [sp, #36]	; 0x24
 8025760:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8025762:	2dff      	cmp	r5, #255	; 0xff
 8025764:	d020      	beq.n	80257a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x658>
 8025766:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8025768:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802576c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802576e:	436f      	muls	r7, r5
 8025770:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8025772:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025776:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802577a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802577c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025780:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025784:	fb05 fa0a 	mul.w	sl, r5, sl
 8025788:	44bc      	add	ip, r7
 802578a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802578e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025792:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025796:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802579a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802579e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80257a2:	ea4c 050a 	orr.w	r5, ip, sl
 80257a6:	950f      	str	r5, [sp, #60]	; 0x3c
 80257a8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80257aa:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80257ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80257b2:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80257b6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80257b8:	fb0e f707 	mul.w	r7, lr, r7
 80257bc:	fb02 770c 	mla	r7, r2, ip, r7
 80257c0:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80257c4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80257c6:	fb00 770c 	mla	r7, r0, ip, r7
 80257ca:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80257ce:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80257d0:	fb08 770c 	mla	r7, r8, ip, r7
 80257d4:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 80257d8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80257da:	fb0e fe0c 	mul.w	lr, lr, ip
 80257de:	0a3f      	lsrs	r7, r7, #8
 80257e0:	fb02 e303 	mla	r3, r2, r3, lr
 80257e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80257e6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80257ea:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80257ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80257f0:	fb00 330a 	mla	r3, r0, sl, r3
 80257f4:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80257f8:	f8b9 0000 	ldrh.w	r0, [r9]
 80257fc:	fb08 3c0c 	mla	ip, r8, ip, r3
 8025800:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025802:	1202      	asrs	r2, r0, #8
 8025804:	4359      	muls	r1, r3
 8025806:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802580a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802580e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025812:	1c4b      	adds	r3, r1, #1
 8025814:	ea47 070c 	orr.w	r7, r7, ip
 8025818:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802581c:	0c3b      	lsrs	r3, r7, #16
 802581e:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8025822:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8025826:	b2ff      	uxtb	r7, r7
 8025828:	fb13 f305 	smulbb	r3, r3, r5
 802582c:	b2c9      	uxtb	r1, r1
 802582e:	fb17 f705 	smulbb	r7, r7, r5
 8025832:	fb02 3201 	mla	r2, r2, r1, r3
 8025836:	10c3      	asrs	r3, r0, #3
 8025838:	fb1c fc05 	smulbb	ip, ip, r5
 802583c:	00c0      	lsls	r0, r0, #3
 802583e:	b292      	uxth	r2, r2
 8025840:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8025844:	b2c0      	uxtb	r0, r0
 8025846:	fb03 c301 	mla	r3, r3, r1, ip
 802584a:	fb00 7001 	mla	r0, r0, r1, r7
 802584e:	1c51      	adds	r1, r2, #1
 8025850:	b29b      	uxth	r3, r3
 8025852:	b280      	uxth	r0, r0
 8025854:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8025858:	f100 0c01 	add.w	ip, r0, #1
 802585c:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8025860:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8025864:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8025868:	ea4c 0202 	orr.w	r2, ip, r2
 802586c:	f103 0c01 	add.w	ip, r3, #1
 8025870:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8025874:	095b      	lsrs	r3, r3, #5
 8025876:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802587a:	431a      	orrs	r2, r3
 802587c:	f8a9 2000 	strh.w	r2, [r9]
 8025880:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8025882:	f109 0902 	add.w	r9, r9, #2
 8025886:	f10b 3bff 	add.w	fp, fp, #4294967295
 802588a:	441c      	add	r4, r3
 802588c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802588e:	441e      	add	r6, r3
 8025890:	e647      	b.n	8025522 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d2>
 8025892:	2800      	cmp	r0, #0
 8025894:	f43f aedf 	beq.w	8025656 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8025898:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 802589c:	9109      	str	r1, [sp, #36]	; 0x24
 802589e:	0e09      	lsrs	r1, r1, #24
 80258a0:	9112      	str	r1, [sp, #72]	; 0x48
 80258a2:	e6d8      	b.n	8025656 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 80258a4:	b01d      	add	sp, #116	; 0x74
 80258a6:	ecbd 8b08 	vpop	{d8-d11}
 80258aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080258b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 80258b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80258b4:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 80258b8:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 80258bc:	fb04 5603 	mla	r6, r4, r3, r5
 80258c0:	2c00      	cmp	r4, #0
 80258c2:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80258c6:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 80258ca:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 80258ce:	db37      	blt.n	8025940 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 80258d0:	45a6      	cmp	lr, r4
 80258d2:	dd35      	ble.n	8025940 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 80258d4:	2d00      	cmp	r5, #0
 80258d6:	db31      	blt.n	802593c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 80258d8:	42ab      	cmp	r3, r5
 80258da:	dd2f      	ble.n	802593c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 80258dc:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 80258e0:	1c6e      	adds	r6, r5, #1
 80258e2:	d430      	bmi.n	8025946 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 80258e4:	42b3      	cmp	r3, r6
 80258e6:	dd2e      	ble.n	8025946 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 80258e8:	b378      	cbz	r0, 802594a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9a>
 80258ea:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80258ee:	3401      	adds	r4, #1
 80258f0:	d42f      	bmi.n	8025952 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 80258f2:	45a6      	cmp	lr, r4
 80258f4:	dd2d      	ble.n	8025952 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 80258f6:	b37f      	cbz	r7, 8025958 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa8>
 80258f8:	2d00      	cmp	r5, #0
 80258fa:	eb0c 0e83 	add.w	lr, ip, r3, lsl #2
 80258fe:	db26      	blt.n	802594e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 8025900:	42ab      	cmp	r3, r5
 8025902:	dd24      	ble.n	802594e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 8025904:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8025908:	3501      	adds	r5, #1
 802590a:	d428      	bmi.n	802595e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 802590c:	42ab      	cmp	r3, r5
 802590e:	dd26      	ble.n	802595e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 8025910:	b338      	cbz	r0, 8025962 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb2>
 8025912:	f8de 3004 	ldr.w	r3, [lr, #4]
 8025916:	280f      	cmp	r0, #15
 8025918:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802591c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8025920:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8025924:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8025928:	d801      	bhi.n	802592e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x7e>
 802592a:	2f0f      	cmp	r7, #15
 802592c:	d91b      	bls.n	8025966 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb6>
 802592e:	4b87      	ldr	r3, [pc, #540]	; (8025b4c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x29c>)
 8025930:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8025934:	4a86      	ldr	r2, [pc, #536]	; (8025b50 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a0>)
 8025936:	4887      	ldr	r0, [pc, #540]	; (8025b54 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a4>)
 8025938:	f001 fd64 	bl	8027404 <__assert_func>
 802593c:	2200      	movs	r2, #0
 802593e:	e7cf      	b.n	80258e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x30>
 8025940:	2600      	movs	r6, #0
 8025942:	4632      	mov	r2, r6
 8025944:	e7d3      	b.n	80258ee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 8025946:	2600      	movs	r6, #0
 8025948:	e7d1      	b.n	80258ee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 802594a:	4606      	mov	r6, r0
 802594c:	e7cf      	b.n	80258ee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 802594e:	2400      	movs	r4, #0
 8025950:	e7da      	b.n	8025908 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x58>
 8025952:	2300      	movs	r3, #0
 8025954:	461c      	mov	r4, r3
 8025956:	e7de      	b.n	8025916 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8025958:	463b      	mov	r3, r7
 802595a:	463c      	mov	r4, r7
 802595c:	e7db      	b.n	8025916 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 802595e:	2300      	movs	r3, #0
 8025960:	e7d9      	b.n	8025916 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8025962:	4603      	mov	r3, r0
 8025964:	e7d7      	b.n	8025916 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8025966:	b280      	uxth	r0, r0
 8025968:	b2bf      	uxth	r7, r7
 802596a:	fb07 fe00 	mul.w	lr, r7, r0
 802596e:	0100      	lsls	r0, r0, #4
 8025970:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8025974:	eba0 0c0e 	sub.w	ip, r0, lr
 8025978:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 802597c:	b2bf      	uxth	r7, r7
 802597e:	fa1f fc8c 	uxth.w	ip, ip
 8025982:	1bed      	subs	r5, r5, r7
 8025984:	fb0c f00a 	mul.w	r0, ip, sl
 8025988:	b2ad      	uxth	r5, r5
 802598a:	fb0b 0005 	mla	r0, fp, r5, r0
 802598e:	fb07 0009 	mla	r0, r7, r9, r0
 8025992:	fb0e 0008 	mla	r0, lr, r8, r0
 8025996:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802599a:	9001      	str	r0, [sp, #4]
 802599c:	2800      	cmp	r0, #0
 802599e:	f000 80d1 	beq.w	8025b44 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x294>
 80259a2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80259a6:	d018      	beq.n	80259da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x12a>
 80259a8:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80259ac:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80259b0:	fb0b f000 	mul.w	r0, fp, r0
 80259b4:	fb0b fb02 	mul.w	fp, fp, r2
 80259b8:	0a02      	lsrs	r2, r0, #8
 80259ba:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80259be:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80259c2:	4402      	add	r2, r0
 80259c4:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 80259c8:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80259cc:	0a12      	lsrs	r2, r2, #8
 80259ce:	0a00      	lsrs	r0, r0, #8
 80259d0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80259d4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80259d8:	4302      	orrs	r2, r0
 80259da:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80259de:	d01a      	beq.n	8025a16 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x166>
 80259e0:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 80259e4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80259e8:	fb0a f000 	mul.w	r0, sl, r0
 80259ec:	fb0a fa06 	mul.w	sl, sl, r6
 80259f0:	0a06      	lsrs	r6, r0, #8
 80259f2:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80259f6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80259fa:	4406      	add	r6, r0
 80259fc:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8025a00:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8025a04:	0a36      	lsrs	r6, r6, #8
 8025a06:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025a0a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8025a0e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025a12:	ea46 060a 	orr.w	r6, r6, sl
 8025a16:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025a1a:	d01b      	beq.n	8025a54 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1a4>
 8025a1c:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8025a20:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8025a24:	fb09 fa0a 	mul.w	sl, r9, sl
 8025a28:	fb09 f004 	mul.w	r0, r9, r4
 8025a2c:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8025a30:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025a34:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8025a38:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8025a3c:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8025a40:	4454      	add	r4, sl
 8025a42:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025a46:	0a24      	lsrs	r4, r4, #8
 8025a48:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8025a4c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8025a50:	ea44 0409 	orr.w	r4, r4, r9
 8025a54:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025a58:	d01b      	beq.n	8025a92 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1e2>
 8025a5a:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8025a5e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025a62:	fb08 f909 	mul.w	r9, r8, r9
 8025a66:	fb08 f003 	mul.w	r0, r8, r3
 8025a6a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8025a6e:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8025a72:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8025a76:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025a7a:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8025a7e:	444b      	add	r3, r9
 8025a80:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8025a84:	0a1b      	lsrs	r3, r3, #8
 8025a86:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8025a8a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025a8e:	ea43 0308 	orr.w	r3, r3, r8
 8025a92:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8025a96:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025a9a:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 8025a9e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025aa2:	fb0c f808 	mul.w	r8, ip, r8
 8025aa6:	8808      	ldrh	r0, [r1, #0]
 8025aa8:	fb0c f606 	mul.w	r6, ip, r6
 8025aac:	fb05 8909 	mla	r9, r5, r9, r8
 8025ab0:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8025ab4:	fb05 6502 	mla	r5, r5, r2, r6
 8025ab8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8025abc:	fb07 9908 	mla	r9, r7, r8, r9
 8025ac0:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8025ac4:	fb07 5704 	mla	r7, r7, r4, r5
 8025ac8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025acc:	fb0e 9808 	mla	r8, lr, r8, r9
 8025ad0:	10c4      	asrs	r4, r0, #3
 8025ad2:	fb0e 7e03 	mla	lr, lr, r3, r7
 8025ad6:	9b01      	ldr	r3, [sp, #4]
 8025ad8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8025adc:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8025ae0:	43da      	mvns	r2, r3
 8025ae2:	1203      	asrs	r3, r0, #8
 8025ae4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025ae8:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8025aec:	b2d2      	uxtb	r2, r2
 8025aee:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8025af2:	00c0      	lsls	r0, r0, #3
 8025af4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8025af8:	4353      	muls	r3, r2
 8025afa:	b2c0      	uxtb	r0, r0
 8025afc:	ea48 0e0e 	orr.w	lr, r8, lr
 8025b00:	4354      	muls	r4, r2
 8025b02:	4350      	muls	r0, r2
 8025b04:	1c5a      	adds	r2, r3, #1
 8025b06:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8025b0a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8025b0e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025b12:	1c62      	adds	r2, r4, #1
 8025b14:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8025b18:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8025b1c:	021b      	lsls	r3, r3, #8
 8025b1e:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8025b22:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8025b26:	00d2      	lsls	r2, r2, #3
 8025b28:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025b2c:	4313      	orrs	r3, r2
 8025b2e:	1c42      	adds	r2, r0, #1
 8025b30:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025b34:	eb0e 2e10 	add.w	lr, lr, r0, lsr #8
 8025b38:	f3ce 0ec4 	ubfx	lr, lr, #3, #5
 8025b3c:	ea4e 0e03 	orr.w	lr, lr, r3
 8025b40:	f8a1 e000 	strh.w	lr, [r1]
 8025b44:	b003      	add	sp, #12
 8025b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025b4a:	bf00      	nop
 8025b4c:	0802e3b6 	.word	0x0802e3b6
 8025b50:	0802e986 	.word	0x0802e986
 8025b54:	0802e43a 	.word	0x0802e43a

08025b58 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025b5c:	ed2d 8b08 	vpush	{d8-d11}
 8025b60:	b09b      	sub	sp, #108	; 0x6c
 8025b62:	eeb0 aa40 	vmov.f32	s20, s0
 8025b66:	eef0 9a60 	vmov.f32	s19, s1
 8025b6a:	9218      	str	r2, [sp, #96]	; 0x60
 8025b6c:	eeb0 9a41 	vmov.f32	s18, s2
 8025b70:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8025b72:	eeb0 8a62 	vmov.f32	s16, s5
 8025b76:	9019      	str	r0, [sp, #100]	; 0x64
 8025b78:	eef0 8a43 	vmov.f32	s17, s6
 8025b7c:	6850      	ldr	r0, [r2, #4]
 8025b7e:	eef0 ba44 	vmov.f32	s23, s8
 8025b82:	9116      	str	r1, [sp, #88]	; 0x58
 8025b84:	eeb0 ba64 	vmov.f32	s22, s9
 8025b88:	9307      	str	r3, [sp, #28]
 8025b8a:	eef0 aa45 	vmov.f32	s21, s10
 8025b8e:	6812      	ldr	r2, [r2, #0]
 8025b90:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8025b94:	e9dd 462d 	ldrd	r4, r6, [sp, #180]	; 0xb4
 8025b98:	fb00 1303 	mla	r3, r0, r3, r1
 8025b9c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025ba0:	930a      	str	r3, [sp, #40]	; 0x28
 8025ba2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8025ba4:	681b      	ldr	r3, [r3, #0]
 8025ba6:	930f      	str	r3, [sp, #60]	; 0x3c
 8025ba8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8025baa:	2b00      	cmp	r3, #0
 8025bac:	dc03      	bgt.n	8025bb6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8025bae:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025bb0:	2b00      	cmp	r3, #0
 8025bb2:	f340 8387 	ble.w	80262c4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76c>
 8025bb6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8025bb8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025bbc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025bc0:	1e48      	subs	r0, r1, #1
 8025bc2:	1e57      	subs	r7, r2, #1
 8025bc4:	9b07      	ldr	r3, [sp, #28]
 8025bc6:	2b00      	cmp	r3, #0
 8025bc8:	f340 8166 	ble.w	8025e98 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 8025bcc:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8025bd0:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025bd4:	d406      	bmi.n	8025be4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8025bd6:	4584      	cmp	ip, r0
 8025bd8:	da04      	bge.n	8025be4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8025bda:	2b00      	cmp	r3, #0
 8025bdc:	db02      	blt.n	8025be4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8025bde:	42bb      	cmp	r3, r7
 8025be0:	f2c0 815b 	blt.w	8025e9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8025be4:	f11c 0c01 	adds.w	ip, ip, #1
 8025be8:	f100 814b 	bmi.w	8025e82 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8025bec:	4561      	cmp	r1, ip
 8025bee:	f2c0 8148 	blt.w	8025e82 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8025bf2:	3301      	adds	r3, #1
 8025bf4:	f100 8145 	bmi.w	8025e82 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8025bf8:	429a      	cmp	r2, r3
 8025bfa:	f2c0 8142 	blt.w	8025e82 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8025bfe:	9b07      	ldr	r3, [sp, #28]
 8025c00:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8025c02:	9317      	str	r3, [sp, #92]	; 0x5c
 8025c04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025c06:	2b00      	cmp	r3, #0
 8025c08:	f340 8165 	ble.w	8025ed6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8025c0c:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8025c0e:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8025c12:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8025c14:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8025c18:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8025c1c:	1422      	asrs	r2, r4, #16
 8025c1e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8025c22:	689b      	ldr	r3, [r3, #8]
 8025c24:	f100 81d5 	bmi.w	8025fd2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8025c28:	f103 38ff 	add.w	r8, r3, #4294967295
 8025c2c:	4542      	cmp	r2, r8
 8025c2e:	f280 81d0 	bge.w	8025fd2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8025c32:	f1bc 0f00 	cmp.w	ip, #0
 8025c36:	f2c0 81cc 	blt.w	8025fd2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8025c3a:	f10e 38ff 	add.w	r8, lr, #4294967295
 8025c3e:	45c4      	cmp	ip, r8
 8025c40:	f280 81c7 	bge.w	8025fd2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8025c44:	b21b      	sxth	r3, r3
 8025c46:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8025c48:	fb0c 2203 	mla	r2, ip, r3, r2
 8025c4c:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8025c50:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8025c54:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8025c58:	2900      	cmp	r1, #0
 8025c5a:	f000 8182 	beq.w	8025f62 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8025c5e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8025c62:	950b      	str	r5, [sp, #44]	; 0x2c
 8025c64:	0e2d      	lsrs	r5, r5, #24
 8025c66:	9512      	str	r5, [sp, #72]	; 0x48
 8025c68:	b180      	cbz	r0, 8025c8c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8025c6a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8025c6e:	3b01      	subs	r3, #1
 8025c70:	009b      	lsls	r3, r3, #2
 8025c72:	3304      	adds	r3, #4
 8025c74:	eb08 0c03 	add.w	ip, r8, r3
 8025c78:	f858 3003 	ldr.w	r3, [r8, r3]
 8025c7c:	9308      	str	r3, [sp, #32]
 8025c7e:	0e1b      	lsrs	r3, r3, #24
 8025c80:	9310      	str	r3, [sp, #64]	; 0x40
 8025c82:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8025c86:	930c      	str	r3, [sp, #48]	; 0x30
 8025c88:	0e1b      	lsrs	r3, r3, #24
 8025c8a:	9313      	str	r3, [sp, #76]	; 0x4c
 8025c8c:	b289      	uxth	r1, r1
 8025c8e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8025c90:	b280      	uxth	r0, r0
 8025c92:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8025c94:	fb01 f900 	mul.w	r9, r1, r0
 8025c98:	0109      	lsls	r1, r1, #4
 8025c9a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8025c9e:	eba1 0809 	sub.w	r8, r1, r9
 8025ca2:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8025ca6:	b280      	uxth	r0, r0
 8025ca8:	fa1f f888 	uxth.w	r8, r8
 8025cac:	1a09      	subs	r1, r1, r0
 8025cae:	fb08 f303 	mul.w	r3, r8, r3
 8025cb2:	b289      	uxth	r1, r1
 8025cb4:	fb01 330e 	mla	r3, r1, lr, r3
 8025cb8:	fb00 3305 	mla	r3, r0, r5, r3
 8025cbc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8025cbe:	fb09 3305 	mla	r3, r9, r5, r3
 8025cc2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025cc6:	2b00      	cmp	r3, #0
 8025cc8:	f000 80d2 	beq.w	8025e70 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8025ccc:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8025cd0:	d01b      	beq.n	8025d0a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 8025cd2:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8025cd6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025cda:	fb0e fa0a 	mul.w	sl, lr, sl
 8025cde:	fb0e fe02 	mul.w	lr, lr, r2
 8025ce2:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8025ce6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025cea:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8025cee:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025cf2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8025cf6:	4452      	add	r2, sl
 8025cf8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025cfc:	0a12      	lsrs	r2, r2, #8
 8025cfe:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025d02:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025d06:	ea42 020c 	orr.w	r2, r2, ip
 8025d0a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8025d0c:	2dff      	cmp	r5, #255	; 0xff
 8025d0e:	d021      	beq.n	8025d54 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8025d10:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8025d12:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8025d16:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8025d18:	fb05 fb0b 	mul.w	fp, r5, fp
 8025d1c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8025d1e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8025d22:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8025d24:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025d28:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025d2c:	fb05 fa0a 	mul.w	sl, r5, sl
 8025d30:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025d34:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025d38:	44de      	add	lr, fp
 8025d3a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025d3e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025d42:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025d46:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025d4a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025d4e:	ea4e 050a 	orr.w	r5, lr, sl
 8025d52:	950b      	str	r5, [sp, #44]	; 0x2c
 8025d54:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8025d56:	2dff      	cmp	r5, #255	; 0xff
 8025d58:	d021      	beq.n	8025d9e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8025d5a:	9d08      	ldr	r5, [sp, #32]
 8025d5c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8025d60:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8025d62:	fb05 fb0b 	mul.w	fp, r5, fp
 8025d66:	9d08      	ldr	r5, [sp, #32]
 8025d68:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8025d6c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8025d6e:	fb05 fa0e 	mul.w	sl, r5, lr
 8025d72:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025d76:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025d7a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025d7e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025d82:	44de      	add	lr, fp
 8025d84:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025d88:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025d8c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025d90:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025d94:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025d98:	ea4e 050a 	orr.w	r5, lr, sl
 8025d9c:	9508      	str	r5, [sp, #32]
 8025d9e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8025da0:	2dff      	cmp	r5, #255	; 0xff
 8025da2:	d021      	beq.n	8025de8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8025da4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8025da6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8025daa:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8025dac:	fb05 fb0b 	mul.w	fp, r5, fp
 8025db0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8025db2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8025db6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8025db8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025dbc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025dc0:	fb05 fa0a 	mul.w	sl, r5, sl
 8025dc4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025dc8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025dcc:	44de      	add	lr, fp
 8025dce:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025dd2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025dd6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025dda:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025dde:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025de2:	ea4e 050a 	orr.w	r5, lr, sl
 8025de6:	950c      	str	r5, [sp, #48]	; 0x30
 8025de8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8025dea:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8025dee:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025df2:	2bff      	cmp	r3, #255	; 0xff
 8025df4:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8025df8:	9d08      	ldr	r5, [sp, #32]
 8025dfa:	fb08 fc0c 	mul.w	ip, r8, ip
 8025dfe:	fb01 cc0e 	mla	ip, r1, lr, ip
 8025e02:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8025e06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8025e08:	fb00 cc0e 	mla	ip, r0, lr, ip
 8025e0c:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8025e10:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8025e12:	fb09 cc0e 	mla	ip, r9, lr, ip
 8025e16:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8025e1a:	fb08 f80e 	mul.w	r8, r8, lr
 8025e1e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025e22:	fb01 8202 	mla	r2, r1, r2, r8
 8025e26:	9908      	ldr	r1, [sp, #32]
 8025e28:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025e2c:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8025e30:	990c      	ldr	r1, [sp, #48]	; 0x30
 8025e32:	fb00 220a 	mla	r2, r0, sl, r2
 8025e36:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8025e3a:	fb09 2900 	mla	r9, r9, r0, r2
 8025e3e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025e42:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8025e46:	ea4c 0c09 	orr.w	ip, ip, r9
 8025e4a:	ea4f 221c 	mov.w	r2, ip, lsr #8
 8025e4e:	f040 8091 	bne.w	8025f74 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 8025e52:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8025e56:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8025e5a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025e5e:	f022 0207 	bic.w	r2, r2, #7
 8025e62:	431a      	orrs	r2, r3
 8025e64:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8025e68:	ea4c 0c02 	orr.w	ip, ip, r2
 8025e6c:	f8a7 c000 	strh.w	ip, [r7]
 8025e70:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8025e72:	3702      	adds	r7, #2
 8025e74:	441c      	add	r4, r3
 8025e76:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025e78:	441e      	add	r6, r3
 8025e7a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025e7c:	3b01      	subs	r3, #1
 8025e7e:	9317      	str	r3, [sp, #92]	; 0x5c
 8025e80:	e6c0      	b.n	8025c04 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8025e82:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8025e84:	441c      	add	r4, r3
 8025e86:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025e88:	441e      	add	r6, r3
 8025e8a:	9b07      	ldr	r3, [sp, #28]
 8025e8c:	3b01      	subs	r3, #1
 8025e8e:	9307      	str	r3, [sp, #28]
 8025e90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025e92:	3302      	adds	r3, #2
 8025e94:	930a      	str	r3, [sp, #40]	; 0x28
 8025e96:	e695      	b.n	8025bc4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8025e98:	d024      	beq.n	8025ee4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8025e9a:	9b07      	ldr	r3, [sp, #28]
 8025e9c:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8025e9e:	3b01      	subs	r3, #1
 8025ea0:	fb00 4003 	mla	r0, r0, r3, r4
 8025ea4:	1400      	asrs	r0, r0, #16
 8025ea6:	f53f aeaa 	bmi.w	8025bfe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8025eaa:	3901      	subs	r1, #1
 8025eac:	4288      	cmp	r0, r1
 8025eae:	f6bf aea6 	bge.w	8025bfe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8025eb2:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8025eb4:	fb01 6303 	mla	r3, r1, r3, r6
 8025eb8:	141b      	asrs	r3, r3, #16
 8025eba:	f53f aea0 	bmi.w	8025bfe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8025ebe:	3a01      	subs	r2, #1
 8025ec0:	4293      	cmp	r3, r2
 8025ec2:	f6bf ae9c 	bge.w	8025bfe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8025ec6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8025eca:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8025ece:	f1bb 0f00 	cmp.w	fp, #0
 8025ed2:	f300 809a 	bgt.w	802600a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 8025ed6:	9b07      	ldr	r3, [sp, #28]
 8025ed8:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8025edc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025ede:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8025ee2:	930a      	str	r3, [sp, #40]	; 0x28
 8025ee4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8025ee6:	2b00      	cmp	r3, #0
 8025ee8:	f340 81ec 	ble.w	80262c4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76c>
 8025eec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025ef0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025ef2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025ef6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025efa:	eef0 6a48 	vmov.f32	s13, s16
 8025efe:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025f02:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025f06:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025f0a:	ee16 4a90 	vmov	r4, s13
 8025f0e:	eef0 6a68 	vmov.f32	s13, s17
 8025f12:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025f16:	ee16 6a90 	vmov	r6, s13
 8025f1a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025f1e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025f22:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025f26:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025f2a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025f2e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025f32:	ee18 2a10 	vmov	r2, s16
 8025f36:	eeb0 8a47 	vmov.f32	s16, s14
 8025f3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8025f3e:	ee18 2a90 	vmov	r2, s17
 8025f42:	932f      	str	r3, [sp, #188]	; 0xbc
 8025f44:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025f46:	eef0 8a67 	vmov.f32	s17, s15
 8025f4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8025f4e:	9330      	str	r3, [sp, #192]	; 0xc0
 8025f50:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8025f52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8025f54:	3b01      	subs	r3, #1
 8025f56:	9316      	str	r3, [sp, #88]	; 0x58
 8025f58:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025f5a:	bf08      	it	eq
 8025f5c:	4613      	moveq	r3, r2
 8025f5e:	9307      	str	r3, [sp, #28]
 8025f60:	e622      	b.n	8025ba8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8025f62:	2800      	cmp	r0, #0
 8025f64:	f43f ae92 	beq.w	8025c8c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8025f68:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8025f6c:	9308      	str	r3, [sp, #32]
 8025f6e:	0e1b      	lsrs	r3, r3, #24
 8025f70:	9310      	str	r3, [sp, #64]	; 0x40
 8025f72:	e68b      	b.n	8025c8c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8025f74:	8839      	ldrh	r1, [r7, #0]
 8025f76:	43db      	mvns	r3, r3
 8025f78:	4dd5      	ldr	r5, [pc, #852]	; (80262d0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>)
 8025f7a:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8025f7e:	fa5f f883 	uxtb.w	r8, r3
 8025f82:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8025f86:	10c8      	asrs	r0, r1, #3
 8025f88:	00cb      	lsls	r3, r1, #3
 8025f8a:	fb0e fe08 	mul.w	lr, lr, r8
 8025f8e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025f92:	b2db      	uxtb	r3, r3
 8025f94:	f10e 0101 	add.w	r1, lr, #1
 8025f98:	fb00 f008 	mul.w	r0, r0, r8
 8025f9c:	fb03 f308 	mul.w	r3, r3, r8
 8025fa0:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8025fa4:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8025fa8:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8025fac:	f100 0e01 	add.w	lr, r0, #1
 8025fb0:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8025fb4:	b2c9      	uxtb	r1, r1
 8025fb6:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8025fba:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 8025fbe:	00d2      	lsls	r2, r2, #3
 8025fc0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025fc4:	430a      	orrs	r2, r1
 8025fc6:	1c59      	adds	r1, r3, #1
 8025fc8:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8025fcc:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8025fd0:	e748      	b.n	8025e64 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8025fd2:	f112 0801 	adds.w	r8, r2, #1
 8025fd6:	f53f af4b 	bmi.w	8025e70 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8025fda:	4543      	cmp	r3, r8
 8025fdc:	f6ff af48 	blt.w	8025e70 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8025fe0:	f11c 0801 	adds.w	r8, ip, #1
 8025fe4:	f53f af44 	bmi.w	8025e70 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8025fe8:	45c6      	cmp	lr, r8
 8025fea:	f6ff af41 	blt.w	8025e70 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8025fee:	b21b      	sxth	r3, r3
 8025ff0:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8025ff4:	fa0f f28e 	sxth.w	r2, lr
 8025ff8:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8025ffc:	9200      	str	r2, [sp, #0]
 8025ffe:	4639      	mov	r1, r7
 8026000:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026002:	9819      	ldr	r0, [sp, #100]	; 0x64
 8026004:	f7ff fc54 	bl	80258b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8026008:	e732      	b.n	8025e70 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802600a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802600c:	1421      	asrs	r1, r4, #16
 802600e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8026010:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8026014:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8026018:	1433      	asrs	r3, r6, #16
 802601a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802601e:	fb07 1303 	mla	r3, r7, r3, r1
 8026022:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8026024:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8026028:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802602c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8026030:	2a00      	cmp	r2, #0
 8026032:	f000 8108 	beq.w	8026246 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 8026036:	684d      	ldr	r5, [r1, #4]
 8026038:	950d      	str	r5, [sp, #52]	; 0x34
 802603a:	0e2d      	lsrs	r5, r5, #24
 802603c:	9514      	str	r5, [sp, #80]	; 0x50
 802603e:	b178      	cbz	r0, 8026060 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8026040:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8026044:	3f01      	subs	r7, #1
 8026046:	00bf      	lsls	r7, r7, #2
 8026048:	3704      	adds	r7, #4
 802604a:	eb01 0e07 	add.w	lr, r1, r7
 802604e:	59c9      	ldr	r1, [r1, r7]
 8026050:	9109      	str	r1, [sp, #36]	; 0x24
 8026052:	0e09      	lsrs	r1, r1, #24
 8026054:	9111      	str	r1, [sp, #68]	; 0x44
 8026056:	f8de 1004 	ldr.w	r1, [lr, #4]
 802605a:	910e      	str	r1, [sp, #56]	; 0x38
 802605c:	0e09      	lsrs	r1, r1, #24
 802605e:	9115      	str	r1, [sp, #84]	; 0x54
 8026060:	b292      	uxth	r2, r2
 8026062:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8026064:	b280      	uxth	r0, r0
 8026066:	fb02 f900 	mul.w	r9, r2, r0
 802606a:	0112      	lsls	r2, r2, #4
 802606c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8026070:	eba2 0e09 	sub.w	lr, r2, r9
 8026074:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8026078:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802607a:	b280      	uxth	r0, r0
 802607c:	fa1f fe8e 	uxth.w	lr, lr
 8026080:	1a09      	subs	r1, r1, r0
 8026082:	fb0e f202 	mul.w	r2, lr, r2
 8026086:	b289      	uxth	r1, r1
 8026088:	fb01 220c 	mla	r2, r1, ip, r2
 802608c:	fb00 2205 	mla	r2, r0, r5, r2
 8026090:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8026092:	fb09 2205 	mla	r2, r9, r5, r2
 8026096:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802609a:	2a00      	cmp	r2, #0
 802609c:	f000 80ca 	beq.w	8026234 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 80260a0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80260a4:	d019      	beq.n	80260da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x582>
 80260a6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80260aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80260ae:	fb0c fa0a 	mul.w	sl, ip, sl
 80260b2:	fb0c fc03 	mul.w	ip, ip, r3
 80260b6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80260ba:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80260be:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80260c2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80260c6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80260ca:	4453      	add	r3, sl
 80260cc:	0a3f      	lsrs	r7, r7, #8
 80260ce:	0a1b      	lsrs	r3, r3, #8
 80260d0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80260d4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80260d8:	433b      	orrs	r3, r7
 80260da:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80260dc:	2dff      	cmp	r5, #255	; 0xff
 80260de:	d020      	beq.n	8026122 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ca>
 80260e0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80260e2:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80260e6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80260e8:	436f      	muls	r7, r5
 80260ea:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80260ec:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80260f0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80260f4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80260f6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80260fa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80260fe:	fb05 fa0a 	mul.w	sl, r5, sl
 8026102:	44bc      	add	ip, r7
 8026104:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026108:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802610c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026110:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026114:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026118:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802611c:	ea4c 050a 	orr.w	r5, ip, sl
 8026120:	950d      	str	r5, [sp, #52]	; 0x34
 8026122:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8026124:	2dff      	cmp	r5, #255	; 0xff
 8026126:	d020      	beq.n	802616a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x612>
 8026128:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802612a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802612e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8026130:	436f      	muls	r7, r5
 8026132:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8026134:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8026138:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802613a:	fb05 fa0c 	mul.w	sl, r5, ip
 802613e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026142:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026146:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802614a:	44bc      	add	ip, r7
 802614c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026150:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026154:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026158:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802615c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026160:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026164:	ea4c 050a 	orr.w	r5, ip, sl
 8026168:	9509      	str	r5, [sp, #36]	; 0x24
 802616a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802616c:	2dff      	cmp	r5, #255	; 0xff
 802616e:	d020      	beq.n	80261b2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x65a>
 8026170:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8026172:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8026176:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8026178:	436f      	muls	r7, r5
 802617a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802617c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026180:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8026184:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8026186:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802618a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802618e:	fb05 fa0a 	mul.w	sl, r5, sl
 8026192:	44bc      	add	ip, r7
 8026194:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026198:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802619c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80261a0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80261a4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80261a8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80261ac:	ea4c 050a 	orr.w	r5, ip, sl
 80261b0:	950e      	str	r5, [sp, #56]	; 0x38
 80261b2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80261b4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80261b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80261bc:	2aff      	cmp	r2, #255	; 0xff
 80261be:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80261c2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80261c4:	fb0e f707 	mul.w	r7, lr, r7
 80261c8:	fb01 770c 	mla	r7, r1, ip, r7
 80261cc:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80261d0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80261d2:	fb00 770c 	mla	r7, r0, ip, r7
 80261d6:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80261da:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80261dc:	fb09 770c 	mla	r7, r9, ip, r7
 80261e0:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 80261e4:	fb0e fe0c 	mul.w	lr, lr, ip
 80261e8:	ea4f 2717 	mov.w	r7, r7, lsr #8
 80261ec:	fb01 e303 	mla	r3, r1, r3, lr
 80261f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80261f2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80261f6:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80261fa:	990e      	ldr	r1, [sp, #56]	; 0x38
 80261fc:	fb00 330a 	mla	r3, r0, sl, r3
 8026200:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8026204:	fb09 3c0c 	mla	ip, r9, ip, r3
 8026208:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802620c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026210:	ea47 070c 	orr.w	r7, r7, ip
 8026214:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8026218:	d11e      	bne.n	8026258 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x700>
 802621a:	097a      	lsrs	r2, r7, #5
 802621c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8026220:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8026224:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026228:	f023 0307 	bic.w	r3, r3, #7
 802622c:	4313      	orrs	r3, r2
 802622e:	431f      	orrs	r7, r3
 8026230:	f8a8 7000 	strh.w	r7, [r8]
 8026234:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8026236:	f108 0802 	add.w	r8, r8, #2
 802623a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802623e:	441c      	add	r4, r3
 8026240:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026242:	441e      	add	r6, r3
 8026244:	e643      	b.n	8025ece <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 8026246:	2800      	cmp	r0, #0
 8026248:	f43f af0a 	beq.w	8026060 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 802624c:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8026250:	9109      	str	r1, [sp, #36]	; 0x24
 8026252:	0e09      	lsrs	r1, r1, #24
 8026254:	9111      	str	r1, [sp, #68]	; 0x44
 8026256:	e703      	b.n	8026060 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8026258:	f8b8 1000 	ldrh.w	r1, [r8]
 802625c:	43d2      	mvns	r2, r2
 802625e:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8026262:	fa5f fe82 	uxtb.w	lr, r2
 8026266:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802626a:	10c8      	asrs	r0, r1, #3
 802626c:	00ca      	lsls	r2, r1, #3
 802626e:	fb0c fc0e 	mul.w	ip, ip, lr
 8026272:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8026276:	b2d2      	uxtb	r2, r2
 8026278:	f10c 0101 	add.w	r1, ip, #1
 802627c:	fb00 f00e 	mul.w	r0, r0, lr
 8026280:	fb02 f20e 	mul.w	r2, r2, lr
 8026284:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8026288:	0c39      	lsrs	r1, r7, #16
 802628a:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802628e:	4910      	ldr	r1, [pc, #64]	; (80262d0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>)
 8026290:	fa5f fc8c 	uxtb.w	ip, ip
 8026294:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8026298:	1c41      	adds	r1, r0, #1
 802629a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802629e:	1c51      	adds	r1, r2, #1
 80262a0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80262a4:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80262a8:	00c0      	lsls	r0, r0, #3
 80262aa:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80262ae:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80262b2:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 80262b6:	ea4c 0c00 	orr.w	ip, ip, r0
 80262ba:	ea47 0c0c 	orr.w	ip, r7, ip
 80262be:	f8a8 c000 	strh.w	ip, [r8]
 80262c2:	e7b7      	b.n	8026234 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 80262c4:	b01b      	add	sp, #108	; 0x6c
 80262c6:	ecbd 8b08 	vpop	{d8-d11}
 80262ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80262ce:	bf00      	nop
 80262d0:	fffff800 	.word	0xfffff800

080262d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 80262d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80262d8:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 80262dc:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 80262e0:	2c00      	cmp	r4, #0
 80262e2:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80262e6:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 80262ea:	fb04 ce03 	mla	lr, r4, r3, ip
 80262ee:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 80262f2:	db60      	blt.n	80263b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 80262f4:	45a1      	cmp	r9, r4
 80262f6:	dd5e      	ble.n	80263b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 80262f8:	f1bc 0f00 	cmp.w	ip, #0
 80262fc:	db59      	blt.n	80263b2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 80262fe:	45e0      	cmp	r8, ip
 8026300:	dd57      	ble.n	80263b2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 8026302:	ea4f 005e 	mov.w	r0, lr, lsr #1
 8026306:	f01e 0f01 	tst.w	lr, #1
 802630a:	5c16      	ldrb	r6, [r2, r0]
 802630c:	bf0c      	ite	eq
 802630e:	f006 060f 	andeq.w	r6, r6, #15
 8026312:	1136      	asrne	r6, r6, #4
 8026314:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8026318:	b2f6      	uxtb	r6, r6
 802631a:	f11c 0001 	adds.w	r0, ip, #1
 802631e:	d44d      	bmi.n	80263bc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 8026320:	4580      	cmp	r8, r0
 8026322:	dd4b      	ble.n	80263bc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 8026324:	2d00      	cmp	r5, #0
 8026326:	d04b      	beq.n	80263c0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 8026328:	f10e 0a01 	add.w	sl, lr, #1
 802632c:	ea4f 005a 	mov.w	r0, sl, lsr #1
 8026330:	f01a 0f01 	tst.w	sl, #1
 8026334:	5c10      	ldrb	r0, [r2, r0]
 8026336:	bf0c      	ite	eq
 8026338:	f000 000f 	andeq.w	r0, r0, #15
 802633c:	1100      	asrne	r0, r0, #4
 802633e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8026342:	b2c0      	uxtb	r0, r0
 8026344:	3401      	adds	r4, #1
 8026346:	d43f      	bmi.n	80263c8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8026348:	45a1      	cmp	r9, r4
 802634a:	dd3d      	ble.n	80263c8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 802634c:	2f00      	cmp	r7, #0
 802634e:	f000 80a8 	beq.w	80264a2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ce>
 8026352:	f1bc 0f00 	cmp.w	ip, #0
 8026356:	db35      	blt.n	80263c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8026358:	45e0      	cmp	r8, ip
 802635a:	dd33      	ble.n	80263c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 802635c:	eb03 090e 	add.w	r9, r3, lr
 8026360:	ea4f 0459 	mov.w	r4, r9, lsr #1
 8026364:	f019 0f01 	tst.w	r9, #1
 8026368:	5d14      	ldrb	r4, [r2, r4]
 802636a:	bf0c      	ite	eq
 802636c:	f004 040f 	andeq.w	r4, r4, #15
 8026370:	1124      	asrne	r4, r4, #4
 8026372:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8026376:	b2e4      	uxtb	r4, r4
 8026378:	f11c 0c01 	adds.w	ip, ip, #1
 802637c:	d427      	bmi.n	80263ce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 802637e:	45e0      	cmp	r8, ip
 8026380:	dd25      	ble.n	80263ce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 8026382:	b335      	cbz	r5, 80263d2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 8026384:	3301      	adds	r3, #1
 8026386:	449e      	add	lr, r3
 8026388:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802638c:	f01e 0f01 	tst.w	lr, #1
 8026390:	5cd2      	ldrb	r2, [r2, r3]
 8026392:	bf0c      	ite	eq
 8026394:	f002 020f 	andeq.w	r2, r2, #15
 8026398:	1112      	asrne	r2, r2, #4
 802639a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802639e:	b2d3      	uxtb	r3, r2
 80263a0:	2d0f      	cmp	r5, #15
 80263a2:	d917      	bls.n	80263d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 80263a4:	4b42      	ldr	r3, [pc, #264]	; (80264b0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1dc>)
 80263a6:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80263aa:	4a42      	ldr	r2, [pc, #264]	; (80264b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e0>)
 80263ac:	4842      	ldr	r0, [pc, #264]	; (80264b8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e4>)
 80263ae:	f001 f829 	bl	8027404 <__assert_func>
 80263b2:	2600      	movs	r6, #0
 80263b4:	e7b1      	b.n	802631a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 80263b6:	2000      	movs	r0, #0
 80263b8:	4606      	mov	r6, r0
 80263ba:	e7c3      	b.n	8026344 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 80263bc:	2000      	movs	r0, #0
 80263be:	e7c1      	b.n	8026344 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 80263c0:	4628      	mov	r0, r5
 80263c2:	e7bf      	b.n	8026344 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 80263c4:	2400      	movs	r4, #0
 80263c6:	e7d7      	b.n	8026378 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 80263c8:	2300      	movs	r3, #0
 80263ca:	461c      	mov	r4, r3
 80263cc:	e7e8      	b.n	80263a0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 80263ce:	2300      	movs	r3, #0
 80263d0:	e7e6      	b.n	80263a0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 80263d2:	462b      	mov	r3, r5
 80263d4:	2f0f      	cmp	r7, #15
 80263d6:	d8e5      	bhi.n	80263a4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 80263d8:	b2ad      	uxth	r5, r5
 80263da:	b2bf      	uxth	r7, r7
 80263dc:	fb05 fc07 	mul.w	ip, r5, r7
 80263e0:	012d      	lsls	r5, r5, #4
 80263e2:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 80263e6:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 80263ea:	eba5 050c 	sub.w	r5, r5, ip
 80263ee:	b2bf      	uxth	r7, r7
 80263f0:	b2ad      	uxth	r5, r5
 80263f2:	1bd2      	subs	r2, r2, r7
 80263f4:	4368      	muls	r0, r5
 80263f6:	b292      	uxth	r2, r2
 80263f8:	fb06 0002 	mla	r0, r6, r2, r0
 80263fc:	fb07 0404 	mla	r4, r7, r4, r0
 8026400:	fb0c 4303 	mla	r3, ip, r3, r4
 8026404:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026408:	b1b3      	cbz	r3, 8026438 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 802640a:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 802640e:	435a      	muls	r2, r3
 8026410:	1c53      	adds	r3, r2, #1
 8026412:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026416:	4a29      	ldr	r2, [pc, #164]	; (80264bc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e8>)
 8026418:	121b      	asrs	r3, r3, #8
 802641a:	6812      	ldr	r2, [r2, #0]
 802641c:	2bff      	cmp	r3, #255	; 0xff
 802641e:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8026422:	d10b      	bne.n	802643c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x168>
 8026424:	0950      	lsrs	r0, r2, #5
 8026426:	4b26      	ldr	r3, [pc, #152]	; (80264c0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ec>)
 8026428:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802642c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026430:	4033      	ands	r3, r6
 8026432:	4318      	orrs	r0, r3
 8026434:	4302      	orrs	r2, r0
 8026436:	800a      	strh	r2, [r1, #0]
 8026438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802643c:	880d      	ldrh	r5, [r1, #0]
 802643e:	b29f      	uxth	r7, r3
 8026440:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8026444:	43db      	mvns	r3, r3
 8026446:	122c      	asrs	r4, r5, #8
 8026448:	fb10 f007 	smulbb	r0, r0, r7
 802644c:	b2db      	uxtb	r3, r3
 802644e:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8026452:	b2f6      	uxtb	r6, r6
 8026454:	b2d2      	uxtb	r2, r2
 8026456:	fb04 0403 	mla	r4, r4, r3, r0
 802645a:	10e8      	asrs	r0, r5, #3
 802645c:	fb12 f207 	smulbb	r2, r2, r7
 8026460:	00ed      	lsls	r5, r5, #3
 8026462:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8026466:	b2a4      	uxth	r4, r4
 8026468:	fb16 f607 	smulbb	r6, r6, r7
 802646c:	b2ed      	uxtb	r5, r5
 802646e:	fb00 6603 	mla	r6, r0, r3, r6
 8026472:	fb05 2303 	mla	r3, r5, r3, r2
 8026476:	b2b0      	uxth	r0, r6
 8026478:	b29a      	uxth	r2, r3
 802647a:	1c63      	adds	r3, r4, #1
 802647c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8026480:	1c53      	adds	r3, r2, #1
 8026482:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026486:	1c42      	adds	r2, r0, #1
 8026488:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802648c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026490:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026494:	0940      	lsrs	r0, r0, #5
 8026496:	4323      	orrs	r3, r4
 8026498:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802649c:	4303      	orrs	r3, r0
 802649e:	800b      	strh	r3, [r1, #0]
 80264a0:	e7ca      	b.n	8026438 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 80264a2:	2d0f      	cmp	r5, #15
 80264a4:	f63f af7e 	bhi.w	80263a4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 80264a8:	463b      	mov	r3, r7
 80264aa:	463c      	mov	r4, r7
 80264ac:	e794      	b.n	80263d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 80264ae:	bf00      	nop
 80264b0:	0802e3b6 	.word	0x0802e3b6
 80264b4:	0802e986 	.word	0x0802e986
 80264b8:	0802e43a 	.word	0x0802e43a
 80264bc:	20014bec 	.word	0x20014bec
 80264c0:	00fff800 	.word	0x00fff800

080264c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80264c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80264c8:	ed2d 8b08 	vpush	{d8-d11}
 80264cc:	b097      	sub	sp, #92	; 0x5c
 80264ce:	eeb0 aa40 	vmov.f32	s20, s0
 80264d2:	eef0 9a60 	vmov.f32	s19, s1
 80264d6:	9214      	str	r2, [sp, #80]	; 0x50
 80264d8:	eeb0 9a41 	vmov.f32	s18, s2
 80264dc:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80264de:	eeb0 8a62 	vmov.f32	s16, s5
 80264e2:	9309      	str	r3, [sp, #36]	; 0x24
 80264e4:	eef0 8a43 	vmov.f32	s17, s6
 80264e8:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80264ec:	eef0 ba44 	vmov.f32	s23, s8
 80264f0:	9015      	str	r0, [sp, #84]	; 0x54
 80264f2:	eeb0 ba64 	vmov.f32	s22, s9
 80264f6:	6850      	ldr	r0, [r2, #4]
 80264f8:	eef0 aa45 	vmov.f32	s21, s10
 80264fc:	910d      	str	r1, [sp, #52]	; 0x34
 80264fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8026500:	6812      	ldr	r2, [r2, #0]
 8026502:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8026506:	e9dd 4629 	ldrd	r4, r6, [sp, #164]	; 0xa4
 802650a:	fb00 1303 	mla	r3, r0, r3, r1
 802650e:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8026512:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026514:	689b      	ldr	r3, [r3, #8]
 8026516:	3301      	adds	r3, #1
 8026518:	f023 0301 	bic.w	r3, r3, #1
 802651c:	930a      	str	r3, [sp, #40]	; 0x28
 802651e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026520:	681f      	ldr	r7, [r3, #0]
 8026522:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026524:	2b00      	cmp	r3, #0
 8026526:	dc03      	bgt.n	8026530 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8026528:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802652a:	2b00      	cmp	r3, #0
 802652c:	f340 8289 	ble.w	8026a42 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8026530:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026532:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026536:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802653a:	1e48      	subs	r0, r1, #1
 802653c:	f102 3cff 	add.w	ip, r2, #4294967295
 8026540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026542:	2b00      	cmp	r3, #0
 8026544:	f340 80c5 	ble.w	80266d2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8026548:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802654c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026550:	d406      	bmi.n	8026560 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8026552:	4586      	cmp	lr, r0
 8026554:	da04      	bge.n	8026560 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8026556:	2b00      	cmp	r3, #0
 8026558:	db02      	blt.n	8026560 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802655a:	4563      	cmp	r3, ip
 802655c:	f2c0 80ba 	blt.w	80266d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8026560:	f11e 0e01 	adds.w	lr, lr, #1
 8026564:	f100 80ab 	bmi.w	80266be <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8026568:	4571      	cmp	r1, lr
 802656a:	f2c0 80a8 	blt.w	80266be <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802656e:	3301      	adds	r3, #1
 8026570:	f100 80a5 	bmi.w	80266be <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8026574:	429a      	cmp	r2, r3
 8026576:	f2c0 80a2 	blt.w	80266be <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802657a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802657c:	46c8      	mov	r8, r9
 802657e:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 8026582:	930e      	str	r3, [sp, #56]	; 0x38
 8026584:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026586:	2b00      	cmp	r3, #0
 8026588:	f340 80c4 	ble.w	8026714 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 802658c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802658e:	1430      	asrs	r0, r6, #16
 8026590:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8026594:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8026598:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802659c:	1423      	asrs	r3, r4, #16
 802659e:	f100 814f 	bmi.w	8026840 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80265a2:	f10c 3bff 	add.w	fp, ip, #4294967295
 80265a6:	455b      	cmp	r3, fp
 80265a8:	f280 814a 	bge.w	8026840 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80265ac:	2800      	cmp	r0, #0
 80265ae:	f2c0 8147 	blt.w	8026840 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80265b2:	f10e 3bff 	add.w	fp, lr, #4294967295
 80265b6:	4558      	cmp	r0, fp
 80265b8:	f280 8142 	bge.w	8026840 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80265bc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80265be:	fb00 3305 	mla	r3, r0, r5, r3
 80265c2:	0858      	lsrs	r0, r3, #1
 80265c4:	07dd      	lsls	r5, r3, #31
 80265c6:	f817 c000 	ldrb.w	ip, [r7, r0]
 80265ca:	bf54      	ite	pl
 80265cc:	f00c 0c0f 	andpl.w	ip, ip, #15
 80265d0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80265d4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80265d8:	fa5f fc8c 	uxtb.w	ip, ip
 80265dc:	2a00      	cmp	r2, #0
 80265de:	f000 80dd 	beq.w	802679c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80265e2:	1c58      	adds	r0, r3, #1
 80265e4:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80265e8:	07c0      	lsls	r0, r0, #31
 80265ea:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80265ee:	bf54      	ite	pl
 80265f0:	f00e 0e0f 	andpl.w	lr, lr, #15
 80265f4:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80265f8:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80265fc:	fa5f f08e 	uxtb.w	r0, lr
 8026600:	9010      	str	r0, [sp, #64]	; 0x40
 8026602:	b1d9      	cbz	r1, 802663c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 8026604:	4453      	add	r3, sl
 8026606:	0858      	lsrs	r0, r3, #1
 8026608:	07dd      	lsls	r5, r3, #31
 802660a:	f103 0301 	add.w	r3, r3, #1
 802660e:	5c38      	ldrb	r0, [r7, r0]
 8026610:	bf54      	ite	pl
 8026612:	f000 000f 	andpl.w	r0, r0, #15
 8026616:	1100      	asrmi	r0, r0, #4
 8026618:	07dd      	lsls	r5, r3, #31
 802661a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802661e:	b2c0      	uxtb	r0, r0
 8026620:	900b      	str	r0, [sp, #44]	; 0x2c
 8026622:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8026626:	f817 e000 	ldrb.w	lr, [r7, r0]
 802662a:	bf54      	ite	pl
 802662c:	f00e 030f 	andpl.w	r3, lr, #15
 8026630:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8026634:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8026638:	b2db      	uxtb	r3, r3
 802663a:	9311      	str	r3, [sp, #68]	; 0x44
 802663c:	b292      	uxth	r2, r2
 802663e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8026640:	b289      	uxth	r1, r1
 8026642:	fb02 f301 	mul.w	r3, r2, r1
 8026646:	0112      	lsls	r2, r2, #4
 8026648:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802664c:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8026650:	1ad2      	subs	r2, r2, r3
 8026652:	b289      	uxth	r1, r1
 8026654:	b292      	uxth	r2, r2
 8026656:	1a40      	subs	r0, r0, r1
 8026658:	436a      	muls	r2, r5
 802665a:	b280      	uxth	r0, r0
 802665c:	fb0c 2c00 	mla	ip, ip, r0, r2
 8026660:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8026662:	fb01 c102 	mla	r1, r1, r2, ip
 8026666:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8026668:	fb03 1302 	mla	r3, r3, r2, r1
 802666c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026670:	b1db      	cbz	r3, 80266aa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8026672:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026674:	4353      	muls	r3, r2
 8026676:	1c5a      	adds	r2, r3, #1
 8026678:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802667c:	4ac6      	ldr	r2, [pc, #792]	; (8026998 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 802667e:	121b      	asrs	r3, r3, #8
 8026680:	6812      	ldr	r2, [r2, #0]
 8026682:	2bff      	cmp	r3, #255	; 0xff
 8026684:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8026688:	f040 8099 	bne.w	80267be <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 802668c:	0953      	lsrs	r3, r2, #5
 802668e:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8026692:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8026696:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802669a:	f02c 0c07 	bic.w	ip, ip, #7
 802669e:	ea43 0c0c 	orr.w	ip, r3, ip
 80266a2:	ea4c 0202 	orr.w	r2, ip, r2
 80266a6:	f8a8 2000 	strh.w	r2, [r8]
 80266aa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80266ac:	f108 0802 	add.w	r8, r8, #2
 80266b0:	441c      	add	r4, r3
 80266b2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80266b4:	441e      	add	r6, r3
 80266b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80266b8:	3b01      	subs	r3, #1
 80266ba:	930e      	str	r3, [sp, #56]	; 0x38
 80266bc:	e762      	b.n	8026584 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 80266be:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80266c0:	f109 0902 	add.w	r9, r9, #2
 80266c4:	441c      	add	r4, r3
 80266c6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80266c8:	441e      	add	r6, r3
 80266ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80266cc:	3b01      	subs	r3, #1
 80266ce:	9309      	str	r3, [sp, #36]	; 0x24
 80266d0:	e736      	b.n	8026540 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80266d2:	d024      	beq.n	802671e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 80266d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80266d6:	982b      	ldr	r0, [sp, #172]	; 0xac
 80266d8:	3b01      	subs	r3, #1
 80266da:	fb00 4003 	mla	r0, r0, r3, r4
 80266de:	1400      	asrs	r0, r0, #16
 80266e0:	f53f af4b 	bmi.w	802657a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80266e4:	3901      	subs	r1, #1
 80266e6:	4288      	cmp	r0, r1
 80266e8:	f6bf af47 	bge.w	802657a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80266ec:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80266ee:	fb01 6303 	mla	r3, r1, r3, r6
 80266f2:	141b      	asrs	r3, r3, #16
 80266f4:	f53f af41 	bmi.w	802657a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80266f8:	3a01      	subs	r2, #1
 80266fa:	4293      	cmp	r3, r2
 80266fc:	f6bf af3d 	bge.w	802657a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8026700:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8026704:	46c8      	mov	r8, r9
 8026706:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 802670a:	930e      	str	r3, [sp, #56]	; 0x38
 802670c:	f1bb 0f00 	cmp.w	fp, #0
 8026710:	f300 80b7 	bgt.w	8026882 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8026714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026716:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802671a:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802671e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026720:	2b00      	cmp	r3, #0
 8026722:	f340 818e 	ble.w	8026a42 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8026726:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802672a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802672c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026730:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026734:	eef0 6a48 	vmov.f32	s13, s16
 8026738:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802673c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026740:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026744:	ee16 4a90 	vmov	r4, s13
 8026748:	eef0 6a68 	vmov.f32	s13, s17
 802674c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026750:	ee16 6a90 	vmov	r6, s13
 8026754:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8026758:	ee69 7a27 	vmul.f32	s15, s18, s15
 802675c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8026760:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8026764:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8026768:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802676c:	ee18 2a10 	vmov	r2, s16
 8026770:	eeb0 8a47 	vmov.f32	s16, s14
 8026774:	fb92 f3f3 	sdiv	r3, r2, r3
 8026778:	ee18 2a90 	vmov	r2, s17
 802677c:	932b      	str	r3, [sp, #172]	; 0xac
 802677e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026780:	eef0 8a67 	vmov.f32	s17, s15
 8026784:	fb92 f3f3 	sdiv	r3, r2, r3
 8026788:	932c      	str	r3, [sp, #176]	; 0xb0
 802678a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802678c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802678e:	3b01      	subs	r3, #1
 8026790:	930d      	str	r3, [sp, #52]	; 0x34
 8026792:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026794:	bf08      	it	eq
 8026796:	4613      	moveq	r3, r2
 8026798:	9309      	str	r3, [sp, #36]	; 0x24
 802679a:	e6c2      	b.n	8026522 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802679c:	2900      	cmp	r1, #0
 802679e:	f43f af4d 	beq.w	802663c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 80267a2:	eb0a 0003 	add.w	r0, sl, r3
 80267a6:	0843      	lsrs	r3, r0, #1
 80267a8:	07c0      	lsls	r0, r0, #31
 80267aa:	5cfb      	ldrb	r3, [r7, r3]
 80267ac:	bf54      	ite	pl
 80267ae:	f003 030f 	andpl.w	r3, r3, #15
 80267b2:	111b      	asrmi	r3, r3, #4
 80267b4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80267b8:	b2db      	uxtb	r3, r3
 80267ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80267bc:	e73e      	b.n	802663c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 80267be:	f8b8 e000 	ldrh.w	lr, [r8]
 80267c2:	fa1f fb83 	uxth.w	fp, r3
 80267c6:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80267ca:	43db      	mvns	r3, r3
 80267cc:	ea4f 202e 	mov.w	r0, lr, asr #8
 80267d0:	fb11 f10b 	smulbb	r1, r1, fp
 80267d4:	b2db      	uxtb	r3, r3
 80267d6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80267da:	fa5f fc8c 	uxtb.w	ip, ip
 80267de:	b2d2      	uxtb	r2, r2
 80267e0:	fb00 1003 	mla	r0, r0, r3, r1
 80267e4:	ea4f 01ee 	mov.w	r1, lr, asr #3
 80267e8:	fb1c fc0b 	smulbb	ip, ip, fp
 80267ec:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80267f0:	b280      	uxth	r0, r0
 80267f2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80267f6:	fb12 fb0b 	smulbb	fp, r2, fp
 80267fa:	fa5f fe8e 	uxtb.w	lr, lr
 80267fe:	fb01 cc03 	mla	ip, r1, r3, ip
 8026802:	fb0e bb03 	mla	fp, lr, r3, fp
 8026806:	1c43      	adds	r3, r0, #1
 8026808:	fa1f fc8c 	uxth.w	ip, ip
 802680c:	fa1f fb8b 	uxth.w	fp, fp
 8026810:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8026814:	f10c 0101 	add.w	r1, ip, #1
 8026818:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 802681c:	f10b 0001 	add.w	r0, fp, #1
 8026820:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8026824:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8026828:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802682c:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8026830:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8026834:	4318      	orrs	r0, r3
 8026836:	ea40 000c 	orr.w	r0, r0, ip
 802683a:	f8a8 0000 	strh.w	r0, [r8]
 802683e:	e734      	b.n	80266aa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8026840:	f113 0b01 	adds.w	fp, r3, #1
 8026844:	f53f af31 	bmi.w	80266aa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8026848:	45dc      	cmp	ip, fp
 802684a:	f6ff af2e 	blt.w	80266aa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802684e:	f110 0b01 	adds.w	fp, r0, #1
 8026852:	f53f af2a 	bmi.w	80266aa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8026856:	45de      	cmp	lr, fp
 8026858:	f6ff af27 	blt.w	80266aa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802685c:	9302      	str	r3, [sp, #8]
 802685e:	fa0f f38e 	sxth.w	r3, lr
 8026862:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8026864:	9301      	str	r3, [sp, #4]
 8026866:	fa0f f38c 	sxth.w	r3, ip
 802686a:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802686e:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8026872:	9300      	str	r3, [sp, #0]
 8026874:	463a      	mov	r2, r7
 8026876:	4653      	mov	r3, sl
 8026878:	4641      	mov	r1, r8
 802687a:	9815      	ldr	r0, [sp, #84]	; 0x54
 802687c:	f7ff fd2a 	bl	80262d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8026880:	e713      	b.n	80266aa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8026882:	1422      	asrs	r2, r4, #16
 8026884:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8026886:	1433      	asrs	r3, r6, #16
 8026888:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802688c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8026890:	fb05 2303 	mla	r3, r5, r3, r2
 8026894:	085a      	lsrs	r2, r3, #1
 8026896:	07dd      	lsls	r5, r3, #31
 8026898:	5cba      	ldrb	r2, [r7, r2]
 802689a:	bf54      	ite	pl
 802689c:	f002 020f 	andpl.w	r2, r2, #15
 80268a0:	1112      	asrmi	r2, r2, #4
 80268a2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80268a6:	b2d2      	uxtb	r2, r2
 80268a8:	2900      	cmp	r1, #0
 80268aa:	d077      	beq.n	802699c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80268ac:	f103 0e01 	add.w	lr, r3, #1
 80268b0:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80268b4:	f01e 0f01 	tst.w	lr, #1
 80268b8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80268bc:	bf0c      	ite	eq
 80268be:	f00c 0c0f 	andeq.w	ip, ip, #15
 80268c2:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80268c6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80268ca:	fa5f f58c 	uxtb.w	r5, ip
 80268ce:	9512      	str	r5, [sp, #72]	; 0x48
 80268d0:	b308      	cbz	r0, 8026916 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80268d2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80268d4:	442b      	add	r3, r5
 80268d6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80268da:	07dd      	lsls	r5, r3, #31
 80268dc:	f103 0301 	add.w	r3, r3, #1
 80268e0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80268e4:	bf54      	ite	pl
 80268e6:	f00c 0c0f 	andpl.w	ip, ip, #15
 80268ea:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80268ee:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80268f2:	fa5f f58c 	uxtb.w	r5, ip
 80268f6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80268fa:	950c      	str	r5, [sp, #48]	; 0x30
 80268fc:	07dd      	lsls	r5, r3, #31
 80268fe:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8026902:	bf54      	ite	pl
 8026904:	f00c 0c0f 	andpl.w	ip, ip, #15
 8026908:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802690c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026910:	fa5f f38c 	uxtb.w	r3, ip
 8026914:	9313      	str	r3, [sp, #76]	; 0x4c
 8026916:	b289      	uxth	r1, r1
 8026918:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802691a:	b280      	uxth	r0, r0
 802691c:	fb01 f300 	mul.w	r3, r1, r0
 8026920:	0109      	lsls	r1, r1, #4
 8026922:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8026926:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 802692a:	1ac9      	subs	r1, r1, r3
 802692c:	b280      	uxth	r0, r0
 802692e:	b289      	uxth	r1, r1
 8026930:	ebac 0c00 	sub.w	ip, ip, r0
 8026934:	4369      	muls	r1, r5
 8026936:	fa1f fc8c 	uxth.w	ip, ip
 802693a:	fb02 120c 	mla	r2, r2, ip, r1
 802693e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8026940:	fb00 2001 	mla	r0, r0, r1, r2
 8026944:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8026946:	fb03 0302 	mla	r3, r3, r2, r0
 802694a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802694e:	b1d3      	cbz	r3, 8026986 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8026950:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026952:	4353      	muls	r3, r2
 8026954:	1c5a      	adds	r2, r3, #1
 8026956:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802695a:	4a0f      	ldr	r2, [pc, #60]	; (8026998 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 802695c:	121b      	asrs	r3, r3, #8
 802695e:	6812      	ldr	r2, [r2, #0]
 8026960:	2bff      	cmp	r3, #255	; 0xff
 8026962:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8026966:	d12d      	bne.n	80269c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8026968:	0953      	lsrs	r3, r2, #5
 802696a:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802696e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8026972:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026976:	f02c 0c07 	bic.w	ip, ip, #7
 802697a:	ea43 0c0c 	orr.w	ip, r3, ip
 802697e:	ea4c 0202 	orr.w	r2, ip, r2
 8026982:	f8a8 2000 	strh.w	r2, [r8]
 8026986:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8026988:	f108 0802 	add.w	r8, r8, #2
 802698c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026990:	441c      	add	r4, r3
 8026992:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026994:	441e      	add	r6, r3
 8026996:	e6b9      	b.n	802670c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8026998:	20014bec 	.word	0x20014bec
 802699c:	2800      	cmp	r0, #0
 802699e:	d0ba      	beq.n	8026916 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80269a0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80269a2:	442b      	add	r3, r5
 80269a4:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80269a8:	07db      	lsls	r3, r3, #31
 80269aa:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80269ae:	bf54      	ite	pl
 80269b0:	f00c 0c0f 	andpl.w	ip, ip, #15
 80269b4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80269b8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80269bc:	fa5f f38c 	uxtb.w	r3, ip
 80269c0:	930c      	str	r3, [sp, #48]	; 0x30
 80269c2:	e7a8      	b.n	8026916 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80269c4:	f8b8 e000 	ldrh.w	lr, [r8]
 80269c8:	fa1f fa83 	uxth.w	sl, r3
 80269cc:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80269d0:	43db      	mvns	r3, r3
 80269d2:	ea4f 202e 	mov.w	r0, lr, asr #8
 80269d6:	fb11 f10a 	smulbb	r1, r1, sl
 80269da:	b2db      	uxtb	r3, r3
 80269dc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80269e0:	b2d2      	uxtb	r2, r2
 80269e2:	fa5f fc8c 	uxtb.w	ip, ip
 80269e6:	fb00 1003 	mla	r0, r0, r3, r1
 80269ea:	ea4f 01ee 	mov.w	r1, lr, asr #3
 80269ee:	fb12 f20a 	smulbb	r2, r2, sl
 80269f2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80269f6:	b280      	uxth	r0, r0
 80269f8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80269fc:	fb1c fc0a 	smulbb	ip, ip, sl
 8026a00:	fa5f fe8e 	uxtb.w	lr, lr
 8026a04:	fb0e 2203 	mla	r2, lr, r3, r2
 8026a08:	fb01 cc03 	mla	ip, r1, r3, ip
 8026a0c:	1c43      	adds	r3, r0, #1
 8026a0e:	b292      	uxth	r2, r2
 8026a10:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8026a14:	1c51      	adds	r1, r2, #1
 8026a16:	fa1f fc8c 	uxth.w	ip, ip
 8026a1a:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8026a1e:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8026a22:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8026a26:	4308      	orrs	r0, r1
 8026a28:	f10c 0101 	add.w	r1, ip, #1
 8026a2c:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8026a30:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8026a34:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8026a38:	ea40 000c 	orr.w	r0, r0, ip
 8026a3c:	f8a8 0000 	strh.w	r0, [r8]
 8026a40:	e7a1      	b.n	8026986 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8026a42:	b017      	add	sp, #92	; 0x5c
 8026a44:	ecbd 8b08 	vpop	{d8-d11}
 8026a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026a4c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8026a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026a50:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 8026a54:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8026a58:	2c00      	cmp	r4, #0
 8026a5a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8026a5e:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8026a62:	fb04 ce03 	mla	lr, r4, r3, ip
 8026a66:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8026a6a:	db60      	blt.n	8026b2e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 8026a6c:	45a1      	cmp	r9, r4
 8026a6e:	dd5e      	ble.n	8026b2e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 8026a70:	f1bc 0f00 	cmp.w	ip, #0
 8026a74:	db59      	blt.n	8026b2a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 8026a76:	45e0      	cmp	r8, ip
 8026a78:	dd57      	ble.n	8026b2a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 8026a7a:	ea4f 005e 	mov.w	r0, lr, lsr #1
 8026a7e:	f01e 0f01 	tst.w	lr, #1
 8026a82:	5c16      	ldrb	r6, [r2, r0]
 8026a84:	bf0c      	ite	eq
 8026a86:	f006 060f 	andeq.w	r6, r6, #15
 8026a8a:	1136      	asrne	r6, r6, #4
 8026a8c:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8026a90:	b2f6      	uxtb	r6, r6
 8026a92:	f11c 0001 	adds.w	r0, ip, #1
 8026a96:	d44d      	bmi.n	8026b34 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 8026a98:	4580      	cmp	r8, r0
 8026a9a:	dd4b      	ble.n	8026b34 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 8026a9c:	2d00      	cmp	r5, #0
 8026a9e:	d04b      	beq.n	8026b38 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 8026aa0:	f10e 0a01 	add.w	sl, lr, #1
 8026aa4:	ea4f 005a 	mov.w	r0, sl, lsr #1
 8026aa8:	f01a 0f01 	tst.w	sl, #1
 8026aac:	5c10      	ldrb	r0, [r2, r0]
 8026aae:	bf0c      	ite	eq
 8026ab0:	f000 000f 	andeq.w	r0, r0, #15
 8026ab4:	1100      	asrne	r0, r0, #4
 8026ab6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8026aba:	b2c0      	uxtb	r0, r0
 8026abc:	3401      	adds	r4, #1
 8026abe:	d43f      	bmi.n	8026b40 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 8026ac0:	45a1      	cmp	r9, r4
 8026ac2:	dd3d      	ble.n	8026b40 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 8026ac4:	2f00      	cmp	r7, #0
 8026ac6:	f000 8093 	beq.w	8026bf0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 8026aca:	f1bc 0f00 	cmp.w	ip, #0
 8026ace:	db35      	blt.n	8026b3c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 8026ad0:	45e0      	cmp	r8, ip
 8026ad2:	dd33      	ble.n	8026b3c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 8026ad4:	eb03 090e 	add.w	r9, r3, lr
 8026ad8:	ea4f 0459 	mov.w	r4, r9, lsr #1
 8026adc:	f019 0f01 	tst.w	r9, #1
 8026ae0:	5d14      	ldrb	r4, [r2, r4]
 8026ae2:	bf0c      	ite	eq
 8026ae4:	f004 040f 	andeq.w	r4, r4, #15
 8026ae8:	1124      	asrne	r4, r4, #4
 8026aea:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8026aee:	b2e4      	uxtb	r4, r4
 8026af0:	f11c 0c01 	adds.w	ip, ip, #1
 8026af4:	d427      	bmi.n	8026b46 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 8026af6:	45e0      	cmp	r8, ip
 8026af8:	dd25      	ble.n	8026b46 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 8026afa:	b335      	cbz	r5, 8026b4a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 8026afc:	3301      	adds	r3, #1
 8026afe:	449e      	add	lr, r3
 8026b00:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8026b04:	f01e 0f01 	tst.w	lr, #1
 8026b08:	5cd2      	ldrb	r2, [r2, r3]
 8026b0a:	bf0c      	ite	eq
 8026b0c:	f002 020f 	andeq.w	r2, r2, #15
 8026b10:	1112      	asrne	r2, r2, #4
 8026b12:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8026b16:	b2d3      	uxtb	r3, r2
 8026b18:	2d0f      	cmp	r5, #15
 8026b1a:	d917      	bls.n	8026b4c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 8026b1c:	4b37      	ldr	r3, [pc, #220]	; (8026bfc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b0>)
 8026b1e:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8026b22:	4a37      	ldr	r2, [pc, #220]	; (8026c00 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b4>)
 8026b24:	4837      	ldr	r0, [pc, #220]	; (8026c04 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b8>)
 8026b26:	f000 fc6d 	bl	8027404 <__assert_func>
 8026b2a:	2600      	movs	r6, #0
 8026b2c:	e7b1      	b.n	8026a92 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 8026b2e:	2000      	movs	r0, #0
 8026b30:	4606      	mov	r6, r0
 8026b32:	e7c3      	b.n	8026abc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8026b34:	2000      	movs	r0, #0
 8026b36:	e7c1      	b.n	8026abc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8026b38:	4628      	mov	r0, r5
 8026b3a:	e7bf      	b.n	8026abc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8026b3c:	2400      	movs	r4, #0
 8026b3e:	e7d7      	b.n	8026af0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 8026b40:	2300      	movs	r3, #0
 8026b42:	461c      	mov	r4, r3
 8026b44:	e7e8      	b.n	8026b18 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 8026b46:	2300      	movs	r3, #0
 8026b48:	e7e6      	b.n	8026b18 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 8026b4a:	462b      	mov	r3, r5
 8026b4c:	2f0f      	cmp	r7, #15
 8026b4e:	d8e5      	bhi.n	8026b1c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 8026b50:	b2ad      	uxth	r5, r5
 8026b52:	b2bf      	uxth	r7, r7
 8026b54:	fb05 fc07 	mul.w	ip, r5, r7
 8026b58:	012d      	lsls	r5, r5, #4
 8026b5a:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8026b5e:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 8026b62:	eba5 050c 	sub.w	r5, r5, ip
 8026b66:	b2bf      	uxth	r7, r7
 8026b68:	b2ad      	uxth	r5, r5
 8026b6a:	1bd2      	subs	r2, r2, r7
 8026b6c:	4368      	muls	r0, r5
 8026b6e:	b292      	uxth	r2, r2
 8026b70:	fb06 0002 	mla	r0, r6, r2, r0
 8026b74:	fb07 0404 	mla	r4, r7, r4, r0
 8026b78:	fb0c 4303 	mla	r3, ip, r3, r4
 8026b7c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026b80:	b3a3      	cbz	r3, 8026bec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8026b82:	4a21      	ldr	r2, [pc, #132]	; (8026c08 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 8026b84:	880e      	ldrh	r6, [r1, #0]
 8026b86:	6815      	ldr	r5, [r2, #0]
 8026b88:	b29a      	uxth	r2, r3
 8026b8a:	1234      	asrs	r4, r6, #8
 8026b8c:	43db      	mvns	r3, r3
 8026b8e:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8026b92:	f3c5 2707 	ubfx	r7, r5, #8, #8
 8026b96:	b2db      	uxtb	r3, r3
 8026b98:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8026b9c:	fb10 f002 	smulbb	r0, r0, r2
 8026ba0:	b2ed      	uxtb	r5, r5
 8026ba2:	fb17 f702 	smulbb	r7, r7, r2
 8026ba6:	fb04 0403 	mla	r4, r4, r3, r0
 8026baa:	10f0      	asrs	r0, r6, #3
 8026bac:	fb15 f202 	smulbb	r2, r5, r2
 8026bb0:	00f6      	lsls	r6, r6, #3
 8026bb2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8026bb6:	b2a4      	uxth	r4, r4
 8026bb8:	b2f6      	uxtb	r6, r6
 8026bba:	fb00 7003 	mla	r0, r0, r3, r7
 8026bbe:	fb06 2303 	mla	r3, r6, r3, r2
 8026bc2:	b280      	uxth	r0, r0
 8026bc4:	b29a      	uxth	r2, r3
 8026bc6:	1c63      	adds	r3, r4, #1
 8026bc8:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8026bcc:	1c53      	adds	r3, r2, #1
 8026bce:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026bd2:	1c42      	adds	r2, r0, #1
 8026bd4:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8026bd8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026bdc:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026be0:	0940      	lsrs	r0, r0, #5
 8026be2:	4323      	orrs	r3, r4
 8026be4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026be8:	4303      	orrs	r3, r0
 8026bea:	800b      	strh	r3, [r1, #0]
 8026bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026bf0:	2d0f      	cmp	r5, #15
 8026bf2:	d893      	bhi.n	8026b1c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 8026bf4:	463b      	mov	r3, r7
 8026bf6:	463c      	mov	r4, r7
 8026bf8:	e7aa      	b.n	8026b50 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 8026bfa:	bf00      	nop
 8026bfc:	0802e3b6 	.word	0x0802e3b6
 8026c00:	0802e986 	.word	0x0802e986
 8026c04:	0802e43a 	.word	0x0802e43a
 8026c08:	20014bec 	.word	0x20014bec

08026c0c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026c10:	ed2d 8b08 	vpush	{d8-d11}
 8026c14:	b093      	sub	sp, #76	; 0x4c
 8026c16:	461d      	mov	r5, r3
 8026c18:	eeb0 aa40 	vmov.f32	s20, s0
 8026c1c:	920c      	str	r2, [sp, #48]	; 0x30
 8026c1e:	eef0 9a60 	vmov.f32	s19, s1
 8026c22:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8026c24:	eeb0 9a41 	vmov.f32	s18, s2
 8026c28:	9011      	str	r0, [sp, #68]	; 0x44
 8026c2a:	eeb0 8a62 	vmov.f32	s16, s5
 8026c2e:	6850      	ldr	r0, [r2, #4]
 8026c30:	eef0 8a43 	vmov.f32	s17, s6
 8026c34:	9107      	str	r1, [sp, #28]
 8026c36:	eef0 ba44 	vmov.f32	s23, s8
 8026c3a:	6812      	ldr	r2, [r2, #0]
 8026c3c:	eeb0 ba64 	vmov.f32	s22, s9
 8026c40:	eef0 aa45 	vmov.f32	s21, s10
 8026c44:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8026c48:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8026c4c:	fb00 1303 	mla	r3, r0, r3, r1
 8026c50:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8026c54:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026c56:	689b      	ldr	r3, [r3, #8]
 8026c58:	3301      	adds	r3, #1
 8026c5a:	f023 0301 	bic.w	r3, r3, #1
 8026c5e:	9306      	str	r3, [sp, #24]
 8026c60:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026c62:	681f      	ldr	r7, [r3, #0]
 8026c64:	9b07      	ldr	r3, [sp, #28]
 8026c66:	2b00      	cmp	r3, #0
 8026c68:	dc03      	bgt.n	8026c72 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8026c6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026c6c:	2b00      	cmp	r3, #0
 8026c6e:	f340 8267 	ble.w	8027140 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 8026c72:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026c74:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026c78:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026c7c:	1e48      	subs	r0, r1, #1
 8026c7e:	f102 3cff 	add.w	ip, r2, #4294967295
 8026c82:	2d00      	cmp	r5, #0
 8026c84:	f340 80b7 	ble.w	8026df6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8026c88:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8026c8c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026c90:	d406      	bmi.n	8026ca0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8026c92:	4586      	cmp	lr, r0
 8026c94:	da04      	bge.n	8026ca0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8026c96:	2b00      	cmp	r3, #0
 8026c98:	db02      	blt.n	8026ca0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8026c9a:	4563      	cmp	r3, ip
 8026c9c:	f2c0 80ac 	blt.w	8026df8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8026ca0:	f11e 0e01 	adds.w	lr, lr, #1
 8026ca4:	f100 809f 	bmi.w	8026de6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8026ca8:	4571      	cmp	r1, lr
 8026caa:	f2c0 809c 	blt.w	8026de6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8026cae:	3301      	adds	r3, #1
 8026cb0:	f100 8099 	bmi.w	8026de6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8026cb4:	429a      	cmp	r2, r3
 8026cb6:	f2c0 8096 	blt.w	8026de6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8026cba:	46c8      	mov	r8, r9
 8026cbc:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8026cc0:	9509      	str	r5, [sp, #36]	; 0x24
 8026cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026cc4:	2b00      	cmp	r3, #0
 8026cc6:	f340 80b5 	ble.w	8026e34 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8026cca:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8026cce:	1430      	asrs	r0, r6, #16
 8026cd0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8026cd4:	9308      	str	r3, [sp, #32]
 8026cd6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026cd8:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8026cdc:	1423      	asrs	r3, r4, #16
 8026cde:	f100 813f 	bmi.w	8026f60 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8026ce2:	f10c 3bff 	add.w	fp, ip, #4294967295
 8026ce6:	455b      	cmp	r3, fp
 8026ce8:	f280 813a 	bge.w	8026f60 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8026cec:	2800      	cmp	r0, #0
 8026cee:	f2c0 8137 	blt.w	8026f60 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8026cf2:	f10e 3bff 	add.w	fp, lr, #4294967295
 8026cf6:	4558      	cmp	r0, fp
 8026cf8:	f280 8132 	bge.w	8026f60 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8026cfc:	9a06      	ldr	r2, [sp, #24]
 8026cfe:	fb00 3302 	mla	r3, r0, r2, r3
 8026d02:	0858      	lsrs	r0, r3, #1
 8026d04:	07da      	lsls	r2, r3, #31
 8026d06:	9a08      	ldr	r2, [sp, #32]
 8026d08:	f817 c000 	ldrb.w	ip, [r7, r0]
 8026d0c:	bf54      	ite	pl
 8026d0e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8026d12:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8026d16:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026d1a:	fa5f fc8c 	uxtb.w	ip, ip
 8026d1e:	2a00      	cmp	r2, #0
 8026d20:	f000 80cc 	beq.w	8026ebc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8026d24:	1c58      	adds	r0, r3, #1
 8026d26:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8026d2a:	07c0      	lsls	r0, r0, #31
 8026d2c:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8026d30:	bf54      	ite	pl
 8026d32:	f00e 0e0f 	andpl.w	lr, lr, #15
 8026d36:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8026d3a:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8026d3e:	fa5f fe8e 	uxtb.w	lr, lr
 8026d42:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8026d46:	b1b9      	cbz	r1, 8026d78 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8026d48:	4453      	add	r3, sl
 8026d4a:	0858      	lsrs	r0, r3, #1
 8026d4c:	07da      	lsls	r2, r3, #31
 8026d4e:	5c38      	ldrb	r0, [r7, r0]
 8026d50:	bf54      	ite	pl
 8026d52:	f000 000f 	andpl.w	r0, r0, #15
 8026d56:	1100      	asrmi	r0, r0, #4
 8026d58:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8026d5c:	b2c0      	uxtb	r0, r0
 8026d5e:	900a      	str	r0, [sp, #40]	; 0x28
 8026d60:	1c58      	adds	r0, r3, #1
 8026d62:	0843      	lsrs	r3, r0, #1
 8026d64:	07c2      	lsls	r2, r0, #31
 8026d66:	5cfb      	ldrb	r3, [r7, r3]
 8026d68:	bf54      	ite	pl
 8026d6a:	f003 030f 	andpl.w	r3, r3, #15
 8026d6e:	111b      	asrmi	r3, r3, #4
 8026d70:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8026d74:	b2db      	uxtb	r3, r3
 8026d76:	930e      	str	r3, [sp, #56]	; 0x38
 8026d78:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8026d7c:	b289      	uxth	r1, r1
 8026d7e:	fb02 f301 	mul.w	r3, r2, r1
 8026d82:	0112      	lsls	r2, r2, #4
 8026d84:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8026d88:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8026d8c:	1ad2      	subs	r2, r2, r3
 8026d8e:	b289      	uxth	r1, r1
 8026d90:	b292      	uxth	r2, r2
 8026d92:	1a40      	subs	r0, r0, r1
 8026d94:	fa1f fe80 	uxth.w	lr, r0
 8026d98:	980d      	ldr	r0, [sp, #52]	; 0x34
 8026d9a:	4342      	muls	r2, r0
 8026d9c:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8026da0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026da2:	fb01 c102 	mla	r1, r1, r2, ip
 8026da6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026da8:	fb03 1302 	mla	r3, r3, r2, r1
 8026dac:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026db0:	2bff      	cmp	r3, #255	; 0xff
 8026db2:	f040 8094 	bne.w	8026ede <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 8026db6:	4bbf      	ldr	r3, [pc, #764]	; (80270b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 8026db8:	681a      	ldr	r2, [r3, #0]
 8026dba:	4bbf      	ldr	r3, [pc, #764]	; (80270b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 8026dbc:	0951      	lsrs	r1, r2, #5
 8026dbe:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8026dc2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8026dc6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026dca:	430b      	orrs	r3, r1
 8026dcc:	4313      	orrs	r3, r2
 8026dce:	f8a8 3000 	strh.w	r3, [r8]
 8026dd2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8026dd4:	f108 0802 	add.w	r8, r8, #2
 8026dd8:	441c      	add	r4, r3
 8026dda:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026ddc:	441e      	add	r6, r3
 8026dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026de0:	3b01      	subs	r3, #1
 8026de2:	9309      	str	r3, [sp, #36]	; 0x24
 8026de4:	e76d      	b.n	8026cc2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8026de6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8026de8:	3d01      	subs	r5, #1
 8026dea:	f109 0902 	add.w	r9, r9, #2
 8026dee:	441c      	add	r4, r3
 8026df0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026df2:	441e      	add	r6, r3
 8026df4:	e745      	b.n	8026c82 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8026df6:	d021      	beq.n	8026e3c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8026df8:	1e6b      	subs	r3, r5, #1
 8026dfa:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8026dfc:	fb00 4003 	mla	r0, r0, r3, r4
 8026e00:	1400      	asrs	r0, r0, #16
 8026e02:	f53f af5a 	bmi.w	8026cba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8026e06:	3901      	subs	r1, #1
 8026e08:	4288      	cmp	r0, r1
 8026e0a:	f6bf af56 	bge.w	8026cba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8026e0e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8026e10:	fb01 6303 	mla	r3, r1, r3, r6
 8026e14:	141b      	asrs	r3, r3, #16
 8026e16:	f53f af50 	bmi.w	8026cba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8026e1a:	3a01      	subs	r2, #1
 8026e1c:	4293      	cmp	r3, r2
 8026e1e:	f6bf af4c 	bge.w	8026cba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8026e22:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8026e26:	46a8      	mov	r8, r5
 8026e28:	46ce      	mov	lr, r9
 8026e2a:	9308      	str	r3, [sp, #32]
 8026e2c:	f1b8 0f00 	cmp.w	r8, #0
 8026e30:	f300 80b6 	bgt.w	8026fa0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8026e34:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8026e38:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8026e3c:	9b07      	ldr	r3, [sp, #28]
 8026e3e:	2b00      	cmp	r3, #0
 8026e40:	f340 817e 	ble.w	8027140 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 8026e44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026e48:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026e4a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026e4e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026e52:	eef0 6a48 	vmov.f32	s13, s16
 8026e56:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8026e5a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026e5e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026e62:	ee16 4a90 	vmov	r4, s13
 8026e66:	eef0 6a68 	vmov.f32	s13, s17
 8026e6a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026e6e:	ee16 6a90 	vmov	r6, s13
 8026e72:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8026e76:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026e7a:	ee37 8a48 	vsub.f32	s16, s14, s16
 8026e7e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8026e82:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8026e86:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8026e8a:	ee18 2a10 	vmov	r2, s16
 8026e8e:	eeb0 8a47 	vmov.f32	s16, s14
 8026e92:	fb92 f3f3 	sdiv	r3, r2, r3
 8026e96:	ee18 2a90 	vmov	r2, s17
 8026e9a:	9327      	str	r3, [sp, #156]	; 0x9c
 8026e9c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026e9e:	eef0 8a67 	vmov.f32	s17, s15
 8026ea2:	fb92 f3f3 	sdiv	r3, r2, r3
 8026ea6:	9328      	str	r3, [sp, #160]	; 0xa0
 8026ea8:	9b07      	ldr	r3, [sp, #28]
 8026eaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026eac:	3b01      	subs	r3, #1
 8026eae:	9307      	str	r3, [sp, #28]
 8026eb0:	bf08      	it	eq
 8026eb2:	4615      	moveq	r5, r2
 8026eb4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026eb6:	bf18      	it	ne
 8026eb8:	461d      	movne	r5, r3
 8026eba:	e6d3      	b.n	8026c64 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8026ebc:	2900      	cmp	r1, #0
 8026ebe:	f43f af5b 	beq.w	8026d78 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8026ec2:	eb0a 0003 	add.w	r0, sl, r3
 8026ec6:	0843      	lsrs	r3, r0, #1
 8026ec8:	07c0      	lsls	r0, r0, #31
 8026eca:	5cfb      	ldrb	r3, [r7, r3]
 8026ecc:	bf54      	ite	pl
 8026ece:	f003 030f 	andpl.w	r3, r3, #15
 8026ed2:	111b      	asrmi	r3, r3, #4
 8026ed4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8026ed8:	b2db      	uxtb	r3, r3
 8026eda:	930a      	str	r3, [sp, #40]	; 0x28
 8026edc:	e74c      	b.n	8026d78 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8026ede:	2b00      	cmp	r3, #0
 8026ee0:	f43f af77 	beq.w	8026dd2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8026ee4:	4a73      	ldr	r2, [pc, #460]	; (80270b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 8026ee6:	fa1f fe83 	uxth.w	lr, r3
 8026eea:	f8b8 c000 	ldrh.w	ip, [r8]
 8026eee:	43db      	mvns	r3, r3
 8026ef0:	6810      	ldr	r0, [r2, #0]
 8026ef2:	ea4f 212c 	mov.w	r1, ip, asr #8
 8026ef6:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8026efa:	b2db      	uxtb	r3, r3
 8026efc:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8026f00:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8026f04:	fb12 f20e 	smulbb	r2, r2, lr
 8026f08:	b2c0      	uxtb	r0, r0
 8026f0a:	fb1b fb0e 	smulbb	fp, fp, lr
 8026f0e:	fb01 2103 	mla	r1, r1, r3, r2
 8026f12:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8026f16:	fb10 fe0e 	smulbb	lr, r0, lr
 8026f1a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8026f1e:	b289      	uxth	r1, r1
 8026f20:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8026f24:	fa5f fc8c 	uxtb.w	ip, ip
 8026f28:	fb02 b203 	mla	r2, r2, r3, fp
 8026f2c:	1c48      	adds	r0, r1, #1
 8026f2e:	fb0c e303 	mla	r3, ip, r3, lr
 8026f32:	b292      	uxth	r2, r2
 8026f34:	b29b      	uxth	r3, r3
 8026f36:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8026f3a:	f102 0b01 	add.w	fp, r2, #1
 8026f3e:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 8026f42:	1c59      	adds	r1, r3, #1
 8026f44:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8026f48:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8026f4c:	0952      	lsrs	r2, r2, #5
 8026f4e:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8026f52:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026f56:	4301      	orrs	r1, r0
 8026f58:	4311      	orrs	r1, r2
 8026f5a:	f8a8 1000 	strh.w	r1, [r8]
 8026f5e:	e738      	b.n	8026dd2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8026f60:	f113 0b01 	adds.w	fp, r3, #1
 8026f64:	f53f af35 	bmi.w	8026dd2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8026f68:	45dc      	cmp	ip, fp
 8026f6a:	f6ff af32 	blt.w	8026dd2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8026f6e:	f110 0b01 	adds.w	fp, r0, #1
 8026f72:	f53f af2e 	bmi.w	8026dd2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8026f76:	45de      	cmp	lr, fp
 8026f78:	f6ff af2b 	blt.w	8026dd2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8026f7c:	9302      	str	r3, [sp, #8]
 8026f7e:	fa0f f38e 	sxth.w	r3, lr
 8026f82:	9a08      	ldr	r2, [sp, #32]
 8026f84:	9301      	str	r3, [sp, #4]
 8026f86:	fa0f f38c 	sxth.w	r3, ip
 8026f8a:	9105      	str	r1, [sp, #20]
 8026f8c:	4641      	mov	r1, r8
 8026f8e:	9300      	str	r3, [sp, #0]
 8026f90:	4653      	mov	r3, sl
 8026f92:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8026f96:	463a      	mov	r2, r7
 8026f98:	9811      	ldr	r0, [sp, #68]	; 0x44
 8026f9a:	f7ff fd57 	bl	8026a4c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 8026f9e:	e718      	b.n	8026dd2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8026fa0:	1422      	asrs	r2, r4, #16
 8026fa2:	9906      	ldr	r1, [sp, #24]
 8026fa4:	1433      	asrs	r3, r6, #16
 8026fa6:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8026faa:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8026fae:	fb01 2303 	mla	r3, r1, r3, r2
 8026fb2:	085a      	lsrs	r2, r3, #1
 8026fb4:	07d9      	lsls	r1, r3, #31
 8026fb6:	5cba      	ldrb	r2, [r7, r2]
 8026fb8:	bf54      	ite	pl
 8026fba:	f002 020f 	andpl.w	r2, r2, #15
 8026fbe:	1112      	asrmi	r2, r2, #4
 8026fc0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8026fc4:	b2d2      	uxtb	r2, r2
 8026fc6:	2800      	cmp	r0, #0
 8026fc8:	d063      	beq.n	8027092 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 8026fca:	f103 0a01 	add.w	sl, r3, #1
 8026fce:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8026fd2:	f01a 0f01 	tst.w	sl, #1
 8026fd6:	5c79      	ldrb	r1, [r7, r1]
 8026fd8:	bf0c      	ite	eq
 8026fda:	f001 010f 	andeq.w	r1, r1, #15
 8026fde:	1109      	asrne	r1, r1, #4
 8026fe0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8026fe4:	b2c9      	uxtb	r1, r1
 8026fe6:	910f      	str	r1, [sp, #60]	; 0x3c
 8026fe8:	f1bc 0f00 	cmp.w	ip, #0
 8026fec:	d01a      	beq.n	8027024 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 8026fee:	9908      	ldr	r1, [sp, #32]
 8026ff0:	440b      	add	r3, r1
 8026ff2:	0859      	lsrs	r1, r3, #1
 8026ff4:	f013 0f01 	tst.w	r3, #1
 8026ff8:	f103 0301 	add.w	r3, r3, #1
 8026ffc:	5c79      	ldrb	r1, [r7, r1]
 8026ffe:	bf0c      	ite	eq
 8027000:	f001 010f 	andeq.w	r1, r1, #15
 8027004:	1109      	asrne	r1, r1, #4
 8027006:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802700a:	b2c9      	uxtb	r1, r1
 802700c:	910b      	str	r1, [sp, #44]	; 0x2c
 802700e:	0859      	lsrs	r1, r3, #1
 8027010:	07db      	lsls	r3, r3, #31
 8027012:	5c79      	ldrb	r1, [r7, r1]
 8027014:	bf54      	ite	pl
 8027016:	f001 010f 	andpl.w	r1, r1, #15
 802701a:	1109      	asrmi	r1, r1, #4
 802701c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8027020:	b2c9      	uxtb	r1, r1
 8027022:	9110      	str	r1, [sp, #64]	; 0x40
 8027024:	b280      	uxth	r0, r0
 8027026:	fa1f fc8c 	uxth.w	ip, ip
 802702a:	fb00 f30c 	mul.w	r3, r0, ip
 802702e:	0100      	lsls	r0, r0, #4
 8027030:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8027034:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8027038:	1ac0      	subs	r0, r0, r3
 802703a:	fa1f fc8c 	uxth.w	ip, ip
 802703e:	b280      	uxth	r0, r0
 8027040:	eba1 010c 	sub.w	r1, r1, ip
 8027044:	fa1f fa81 	uxth.w	sl, r1
 8027048:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802704a:	4348      	muls	r0, r1
 802704c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802704e:	fb02 020a 	mla	r2, r2, sl, r0
 8027052:	fb0c 2c01 	mla	ip, ip, r1, r2
 8027056:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8027058:	fb03 c302 	mla	r3, r3, r2, ip
 802705c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027060:	2bff      	cmp	r3, #255	; 0xff
 8027062:	d12b      	bne.n	80270bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8027064:	4b13      	ldr	r3, [pc, #76]	; (80270b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 8027066:	681a      	ldr	r2, [r3, #0]
 8027068:	4b13      	ldr	r3, [pc, #76]	; (80270b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802706a:	0951      	lsrs	r1, r2, #5
 802706c:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8027070:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8027074:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8027078:	430b      	orrs	r3, r1
 802707a:	4313      	orrs	r3, r2
 802707c:	f8ae 3000 	strh.w	r3, [lr]
 8027080:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8027082:	f10e 0e02 	add.w	lr, lr, #2
 8027086:	f108 38ff 	add.w	r8, r8, #4294967295
 802708a:	441c      	add	r4, r3
 802708c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802708e:	441e      	add	r6, r3
 8027090:	e6cc      	b.n	8026e2c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8027092:	f1bc 0f00 	cmp.w	ip, #0
 8027096:	d0c5      	beq.n	8027024 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 8027098:	9908      	ldr	r1, [sp, #32]
 802709a:	440b      	add	r3, r1
 802709c:	0859      	lsrs	r1, r3, #1
 802709e:	07db      	lsls	r3, r3, #31
 80270a0:	5c79      	ldrb	r1, [r7, r1]
 80270a2:	bf54      	ite	pl
 80270a4:	f001 010f 	andpl.w	r1, r1, #15
 80270a8:	1109      	asrmi	r1, r1, #4
 80270aa:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80270ae:	b2c9      	uxtb	r1, r1
 80270b0:	910b      	str	r1, [sp, #44]	; 0x2c
 80270b2:	e7b7      	b.n	8027024 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 80270b4:	20014bec 	.word	0x20014bec
 80270b8:	fffff800 	.word	0xfffff800
 80270bc:	2b00      	cmp	r3, #0
 80270be:	d0df      	beq.n	8027080 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x474>
 80270c0:	4a22      	ldr	r2, [pc, #136]	; (802714c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x540>)
 80270c2:	fa1f fa83 	uxth.w	sl, r3
 80270c6:	f8be c000 	ldrh.w	ip, [lr]
 80270ca:	43db      	mvns	r3, r3
 80270cc:	6810      	ldr	r0, [r2, #0]
 80270ce:	ea4f 212c 	mov.w	r1, ip, asr #8
 80270d2:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80270d6:	b2db      	uxtb	r3, r3
 80270d8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80270dc:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 80270e0:	fb12 f20a 	smulbb	r2, r2, sl
 80270e4:	b2c0      	uxtb	r0, r0
 80270e6:	fb1b fb0a 	smulbb	fp, fp, sl
 80270ea:	fb01 2103 	mla	r1, r1, r3, r2
 80270ee:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80270f2:	fb10 f00a 	smulbb	r0, r0, sl
 80270f6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80270fa:	b289      	uxth	r1, r1
 80270fc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8027100:	fa5f fc8c 	uxtb.w	ip, ip
 8027104:	fb02 b203 	mla	r2, r2, r3, fp
 8027108:	fb0c 0003 	mla	r0, ip, r3, r0
 802710c:	1c4b      	adds	r3, r1, #1
 802710e:	b292      	uxth	r2, r2
 8027110:	b280      	uxth	r0, r0
 8027112:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8027116:	f100 0b01 	add.w	fp, r0, #1
 802711a:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802711e:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 8027122:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8027126:	ea4b 0101 	orr.w	r1, fp, r1
 802712a:	f102 0b01 	add.w	fp, r2, #1
 802712e:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8027132:	0952      	lsrs	r2, r2, #5
 8027134:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027138:	4311      	orrs	r1, r2
 802713a:	f8ae 1000 	strh.w	r1, [lr]
 802713e:	e79f      	b.n	8027080 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x474>
 8027140:	b013      	add	sp, #76	; 0x4c
 8027142:	ecbd 8b08 	vpop	{d8-d11}
 8027146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802714a:	bf00      	nop
 802714c:	20014bec 	.word	0x20014bec

08027150 <CRC_Lock>:
 8027150:	4a20      	ldr	r2, [pc, #128]	; (80271d4 <CRC_Lock+0x84>)
 8027152:	b530      	push	{r4, r5, lr}
 8027154:	6813      	ldr	r3, [r2, #0]
 8027156:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 802715a:	f24c 2540 	movw	r5, #49728	; 0xc240
 802715e:	f023 0301 	bic.w	r3, r3, #1
 8027162:	6013      	str	r3, [r2, #0]
 8027164:	4b1c      	ldr	r3, [pc, #112]	; (80271d8 <CRC_Lock+0x88>)
 8027166:	681a      	ldr	r2, [r3, #0]
 8027168:	4022      	ands	r2, r4
 802716a:	42aa      	cmp	r2, r5
 802716c:	d005      	beq.n	802717a <CRC_Lock+0x2a>
 802716e:	681b      	ldr	r3, [r3, #0]
 8027170:	f24c 2270 	movw	r2, #49776	; 0xc270
 8027174:	4023      	ands	r3, r4
 8027176:	4293      	cmp	r3, r2
 8027178:	d124      	bne.n	80271c4 <CRC_Lock+0x74>
 802717a:	4b18      	ldr	r3, [pc, #96]	; (80271dc <CRC_Lock+0x8c>)
 802717c:	681b      	ldr	r3, [r3, #0]
 802717e:	bb0b      	cbnz	r3, 80271c4 <CRC_Lock+0x74>
 8027180:	4b17      	ldr	r3, [pc, #92]	; (80271e0 <CRC_Lock+0x90>)
 8027182:	681a      	ldr	r2, [r3, #0]
 8027184:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8027188:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 802718c:	d00d      	beq.n	80271aa <CRC_Lock+0x5a>
 802718e:	681a      	ldr	r2, [r3, #0]
 8027190:	f240 4483 	movw	r4, #1155	; 0x483
 8027194:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8027198:	42a2      	cmp	r2, r4
 802719a:	d006      	beq.n	80271aa <CRC_Lock+0x5a>
 802719c:	681b      	ldr	r3, [r3, #0]
 802719e:	f240 4285 	movw	r2, #1157	; 0x485
 80271a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80271a6:	4293      	cmp	r3, r2
 80271a8:	d10c      	bne.n	80271c4 <CRC_Lock+0x74>
 80271aa:	4b0e      	ldr	r3, [pc, #56]	; (80271e4 <CRC_Lock+0x94>)
 80271ac:	2201      	movs	r2, #1
 80271ae:	601a      	str	r2, [r3, #0]
 80271b0:	681a      	ldr	r2, [r3, #0]
 80271b2:	2a00      	cmp	r2, #0
 80271b4:	d1fc      	bne.n	80271b0 <CRC_Lock+0x60>
 80271b6:	4b0c      	ldr	r3, [pc, #48]	; (80271e8 <CRC_Lock+0x98>)
 80271b8:	6018      	str	r0, [r3, #0]
 80271ba:	6818      	ldr	r0, [r3, #0]
 80271bc:	1a43      	subs	r3, r0, r1
 80271be:	4258      	negs	r0, r3
 80271c0:	4158      	adcs	r0, r3
 80271c2:	bd30      	pop	{r4, r5, pc}
 80271c4:	4b09      	ldr	r3, [pc, #36]	; (80271ec <CRC_Lock+0x9c>)
 80271c6:	2201      	movs	r2, #1
 80271c8:	601a      	str	r2, [r3, #0]
 80271ca:	681a      	ldr	r2, [r3, #0]
 80271cc:	2a00      	cmp	r2, #0
 80271ce:	d1fc      	bne.n	80271ca <CRC_Lock+0x7a>
 80271d0:	4b07      	ldr	r3, [pc, #28]	; (80271f0 <CRC_Lock+0xa0>)
 80271d2:	e7f1      	b.n	80271b8 <CRC_Lock+0x68>
 80271d4:	e0002000 	.word	0xe0002000
 80271d8:	e000ed00 	.word	0xe000ed00
 80271dc:	e0042000 	.word	0xe0042000
 80271e0:	5c001000 	.word	0x5c001000
 80271e4:	58024c08 	.word	0x58024c08
 80271e8:	58024c00 	.word	0x58024c00
 80271ec:	40023008 	.word	0x40023008
 80271f0:	40023000 	.word	0x40023000

080271f4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80271f4:	6101      	str	r1, [r0, #16]
 80271f6:	4770      	bx	lr

080271f8 <_ZN8touchgfx8Gestures4tickEv>:
 80271f8:	7b83      	ldrb	r3, [r0, #14]
 80271fa:	b14b      	cbz	r3, 8027210 <_ZN8touchgfx8Gestures4tickEv+0x18>
 80271fc:	8903      	ldrh	r3, [r0, #8]
 80271fe:	3301      	adds	r3, #1
 8027200:	b29b      	uxth	r3, r3
 8027202:	2b07      	cmp	r3, #7
 8027204:	8103      	strh	r3, [r0, #8]
 8027206:	bf81      	itttt	hi
 8027208:	2300      	movhi	r3, #0
 802720a:	8143      	strhhi	r3, [r0, #10]
 802720c:	8183      	strhhi	r3, [r0, #12]
 802720e:	7383      	strbhi	r3, [r0, #14]
 8027210:	4770      	bx	lr
	...

08027214 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8027214:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8027218:	4604      	mov	r4, r0
 802721a:	4698      	mov	r8, r3
 802721c:	8880      	ldrh	r0, [r0, #4]
 802721e:	4617      	mov	r7, r2
 8027220:	4b1d      	ldr	r3, [pc, #116]	; (8027298 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8027222:	460e      	mov	r6, r1
 8027224:	f8ad 0006 	strh.w	r0, [sp, #6]
 8027228:	eba8 0000 	sub.w	r0, r8, r0
 802722c:	9300      	str	r3, [sp, #0]
 802722e:	2300      	movs	r3, #0
 8027230:	b280      	uxth	r0, r0
 8027232:	8aa2      	ldrh	r2, [r4, #20]
 8027234:	f88d 3004 	strb.w	r3, [sp, #4]
 8027238:	b203      	sxth	r3, r0
 802723a:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802723e:	88e1      	ldrh	r1, [r4, #6]
 8027240:	2b00      	cmp	r3, #0
 8027242:	f8ad 800a 	strh.w	r8, [sp, #10]
 8027246:	f8ad 1008 	strh.w	r1, [sp, #8]
 802724a:	bfb8      	it	lt
 802724c:	4240      	neglt	r0, r0
 802724e:	f8ad 500c 	strh.w	r5, [sp, #12]
 8027252:	bfb8      	it	lt
 8027254:	b203      	sxthlt	r3, r0
 8027256:	4293      	cmp	r3, r2
 8027258:	dc08      	bgt.n	802726c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 802725a:	1a69      	subs	r1, r5, r1
 802725c:	b289      	uxth	r1, r1
 802725e:	b20b      	sxth	r3, r1
 8027260:	2b00      	cmp	r3, #0
 8027262:	bfbc      	itt	lt
 8027264:	4249      	neglt	r1, r1
 8027266:	b20b      	sxthlt	r3, r1
 8027268:	429a      	cmp	r2, r3
 802726a:	da13      	bge.n	8027294 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 802726c:	6920      	ldr	r0, [r4, #16]
 802726e:	4669      	mov	r1, sp
 8027270:	eba8 0606 	sub.w	r6, r8, r6
 8027274:	1bef      	subs	r7, r5, r7
 8027276:	6803      	ldr	r3, [r0, #0]
 8027278:	685b      	ldr	r3, [r3, #4]
 802727a:	4798      	blx	r3
 802727c:	2300      	movs	r3, #0
 802727e:	2001      	movs	r0, #1
 8027280:	8166      	strh	r6, [r4, #10]
 8027282:	8123      	strh	r3, [r4, #8]
 8027284:	81a7      	strh	r7, [r4, #12]
 8027286:	f8a4 8004 	strh.w	r8, [r4, #4]
 802728a:	80e5      	strh	r5, [r4, #6]
 802728c:	73a0      	strb	r0, [r4, #14]
 802728e:	b004      	add	sp, #16
 8027290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027294:	2000      	movs	r0, #0
 8027296:	e7fa      	b.n	802728e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8027298:	0802d888 	.word	0x0802d888

0802729c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802729c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802729e:	461e      	mov	r6, r3
 80272a0:	1e4b      	subs	r3, r1, #1
 80272a2:	b085      	sub	sp, #20
 80272a4:	4604      	mov	r4, r0
 80272a6:	2b01      	cmp	r3, #1
 80272a8:	460d      	mov	r5, r1
 80272aa:	4617      	mov	r7, r2
 80272ac:	d84b      	bhi.n	8027346 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 80272ae:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80272b2:	1cd3      	adds	r3, r2, #3
 80272b4:	b29b      	uxth	r3, r3
 80272b6:	2b06      	cmp	r3, #6
 80272b8:	d916      	bls.n	80272e8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 80272ba:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 802735c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80272be:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80272c2:	f8cd c004 	str.w	ip, [sp, #4]
 80272c6:	f04f 0c00 	mov.w	ip, #0
 80272ca:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80272ce:	6900      	ldr	r0, [r0, #16]
 80272d0:	f8ad 100c 	strh.w	r1, [sp, #12]
 80272d4:	a901      	add	r1, sp, #4
 80272d6:	f88d c008 	strb.w	ip, [sp, #8]
 80272da:	f8ad 200a 	strh.w	r2, [sp, #10]
 80272de:	f8ad 300e 	strh.w	r3, [sp, #14]
 80272e2:	6803      	ldr	r3, [r0, #0]
 80272e4:	689b      	ldr	r3, [r3, #8]
 80272e6:	4798      	blx	r3
 80272e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80272ec:	1cd3      	adds	r3, r2, #3
 80272ee:	b29b      	uxth	r3, r3
 80272f0:	2b06      	cmp	r3, #6
 80272f2:	d916      	bls.n	8027322 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80272f4:	f8df c064 	ldr.w	ip, [pc, #100]	; 802735c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80272f8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80272fc:	f8cd c004 	str.w	ip, [sp, #4]
 8027300:	f04f 0c01 	mov.w	ip, #1
 8027304:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8027308:	6920      	ldr	r0, [r4, #16]
 802730a:	f8ad 100c 	strh.w	r1, [sp, #12]
 802730e:	a901      	add	r1, sp, #4
 8027310:	f88d c008 	strb.w	ip, [sp, #8]
 8027314:	f8ad 200a 	strh.w	r2, [sp, #10]
 8027318:	f8ad 300e 	strh.w	r3, [sp, #14]
 802731c:	6803      	ldr	r3, [r0, #0]
 802731e:	689b      	ldr	r3, [r3, #8]
 8027320:	4798      	blx	r3
 8027322:	4b0d      	ldr	r3, [pc, #52]	; (8027358 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8027324:	a901      	add	r1, sp, #4
 8027326:	6920      	ldr	r0, [r4, #16]
 8027328:	9301      	str	r3, [sp, #4]
 802732a:	2300      	movs	r3, #0
 802732c:	f88d 5008 	strb.w	r5, [sp, #8]
 8027330:	f8ad 700a 	strh.w	r7, [sp, #10]
 8027334:	f8ad 600c 	strh.w	r6, [sp, #12]
 8027338:	f8ad 300e 	strh.w	r3, [sp, #14]
 802733c:	6803      	ldr	r3, [r0, #0]
 802733e:	681b      	ldr	r3, [r3, #0]
 8027340:	4798      	blx	r3
 8027342:	b005      	add	sp, #20
 8027344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027346:	2900      	cmp	r1, #0
 8027348:	d1eb      	bne.n	8027322 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802734a:	80a2      	strh	r2, [r4, #4]
 802734c:	80c6      	strh	r6, [r0, #6]
 802734e:	60a1      	str	r1, [r4, #8]
 8027350:	81a1      	strh	r1, [r4, #12]
 8027352:	73a1      	strb	r1, [r4, #14]
 8027354:	e7e5      	b.n	8027322 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8027356:	bf00      	nop
 8027358:	0802d874 	.word	0x0802d874
 802735c:	0802d89c 	.word	0x0802d89c

08027360 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8027360:	790b      	ldrb	r3, [r1, #4]
 8027362:	2b00      	cmp	r3, #0
 8027364:	bf0c      	ite	eq
 8027366:	2301      	moveq	r3, #1
 8027368:	2300      	movne	r3, #0
 802736a:	b570      	push	{r4, r5, r6, lr}
 802736c:	4604      	mov	r4, r0
 802736e:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8027372:	460e      	mov	r6, r1
 8027374:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8027378:	d109      	bne.n	802738e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 802737a:	b14d      	cbz	r5, 8027390 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 802737c:	7933      	ldrb	r3, [r6, #4]
 802737e:	2b01      	cmp	r3, #1
 8027380:	d10c      	bne.n	802739c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8027382:	6823      	ldr	r3, [r4, #0]
 8027384:	4620      	mov	r0, r4
 8027386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027388:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802738c:	4718      	bx	r3
 802738e:	b12d      	cbz	r5, 802739c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8027390:	6823      	ldr	r3, [r4, #0]
 8027392:	4620      	mov	r0, r4
 8027394:	695b      	ldr	r3, [r3, #20]
 8027396:	4798      	blx	r3
 8027398:	2d00      	cmp	r5, #0
 802739a:	d1ef      	bne.n	802737c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 802739c:	bd70      	pop	{r4, r5, r6, pc}

0802739e <__aeabi_atexit>:
 802739e:	460b      	mov	r3, r1
 80273a0:	4601      	mov	r1, r0
 80273a2:	4618      	mov	r0, r3
 80273a4:	f000 b852 	b.w	802744c <__cxa_atexit>

080273a8 <_ZdlPvj>:
 80273a8:	f000 b812 	b.w	80273d0 <_ZdlPv>

080273ac <__cxa_guard_acquire>:
 80273ac:	6803      	ldr	r3, [r0, #0]
 80273ae:	07db      	lsls	r3, r3, #31
 80273b0:	d406      	bmi.n	80273c0 <__cxa_guard_acquire+0x14>
 80273b2:	7843      	ldrb	r3, [r0, #1]
 80273b4:	b103      	cbz	r3, 80273b8 <__cxa_guard_acquire+0xc>
 80273b6:	deff      	udf	#255	; 0xff
 80273b8:	2301      	movs	r3, #1
 80273ba:	7043      	strb	r3, [r0, #1]
 80273bc:	4618      	mov	r0, r3
 80273be:	4770      	bx	lr
 80273c0:	2000      	movs	r0, #0
 80273c2:	4770      	bx	lr

080273c4 <__cxa_guard_release>:
 80273c4:	2301      	movs	r3, #1
 80273c6:	6003      	str	r3, [r0, #0]
 80273c8:	4770      	bx	lr

080273ca <__cxa_pure_virtual>:
 80273ca:	b508      	push	{r3, lr}
 80273cc:	f000 f80e 	bl	80273ec <_ZSt9terminatev>

080273d0 <_ZdlPv>:
 80273d0:	f000 b892 	b.w	80274f8 <free>

080273d4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80273d4:	b508      	push	{r3, lr}
 80273d6:	4780      	blx	r0
 80273d8:	f000 f80d 	bl	80273f6 <abort>

080273dc <_ZSt13get_terminatev>:
 80273dc:	4b02      	ldr	r3, [pc, #8]	; (80273e8 <_ZSt13get_terminatev+0xc>)
 80273de:	6818      	ldr	r0, [r3, #0]
 80273e0:	f3bf 8f5b 	dmb	ish
 80273e4:	4770      	bx	lr
 80273e6:	bf00      	nop
 80273e8:	200000b8 	.word	0x200000b8

080273ec <_ZSt9terminatev>:
 80273ec:	b508      	push	{r3, lr}
 80273ee:	f7ff fff5 	bl	80273dc <_ZSt13get_terminatev>
 80273f2:	f7ff ffef 	bl	80273d4 <_ZN10__cxxabiv111__terminateEPFvvE>

080273f6 <abort>:
 80273f6:	b508      	push	{r3, lr}
 80273f8:	2006      	movs	r0, #6
 80273fa:	f000 fc6b 	bl	8027cd4 <raise>
 80273fe:	2001      	movs	r0, #1
 8027400:	f7da fa44 	bl	800188c <_exit>

08027404 <__assert_func>:
 8027404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8027406:	4614      	mov	r4, r2
 8027408:	461a      	mov	r2, r3
 802740a:	4b09      	ldr	r3, [pc, #36]	; (8027430 <__assert_func+0x2c>)
 802740c:	681b      	ldr	r3, [r3, #0]
 802740e:	4605      	mov	r5, r0
 8027410:	68d8      	ldr	r0, [r3, #12]
 8027412:	b14c      	cbz	r4, 8027428 <__assert_func+0x24>
 8027414:	4b07      	ldr	r3, [pc, #28]	; (8027434 <__assert_func+0x30>)
 8027416:	9100      	str	r1, [sp, #0]
 8027418:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802741c:	4906      	ldr	r1, [pc, #24]	; (8027438 <__assert_func+0x34>)
 802741e:	462b      	mov	r3, r5
 8027420:	f000 f828 	bl	8027474 <fiprintf>
 8027424:	f7ff ffe7 	bl	80273f6 <abort>
 8027428:	4b04      	ldr	r3, [pc, #16]	; (802743c <__assert_func+0x38>)
 802742a:	461c      	mov	r4, r3
 802742c:	e7f3      	b.n	8027416 <__assert_func+0x12>
 802742e:	bf00      	nop
 8027430:	200000bc 	.word	0x200000bc
 8027434:	0802ebc1 	.word	0x0802ebc1
 8027438:	0802ebce 	.word	0x0802ebce
 802743c:	0802ebfc 	.word	0x0802ebfc

08027440 <atexit>:
 8027440:	2300      	movs	r3, #0
 8027442:	4601      	mov	r1, r0
 8027444:	461a      	mov	r2, r3
 8027446:	4618      	mov	r0, r3
 8027448:	f000 bd52 	b.w	8027ef0 <__register_exitproc>

0802744c <__cxa_atexit>:
 802744c:	b510      	push	{r4, lr}
 802744e:	4c05      	ldr	r4, [pc, #20]	; (8027464 <__cxa_atexit+0x18>)
 8027450:	4613      	mov	r3, r2
 8027452:	b12c      	cbz	r4, 8027460 <__cxa_atexit+0x14>
 8027454:	460a      	mov	r2, r1
 8027456:	4601      	mov	r1, r0
 8027458:	2002      	movs	r0, #2
 802745a:	f000 fd49 	bl	8027ef0 <__register_exitproc>
 802745e:	bd10      	pop	{r4, pc}
 8027460:	4620      	mov	r0, r4
 8027462:	e7fc      	b.n	802745e <__cxa_atexit+0x12>
 8027464:	08027ef1 	.word	0x08027ef1

08027468 <__errno>:
 8027468:	4b01      	ldr	r3, [pc, #4]	; (8027470 <__errno+0x8>)
 802746a:	6818      	ldr	r0, [r3, #0]
 802746c:	4770      	bx	lr
 802746e:	bf00      	nop
 8027470:	200000bc 	.word	0x200000bc

08027474 <fiprintf>:
 8027474:	b40e      	push	{r1, r2, r3}
 8027476:	b503      	push	{r0, r1, lr}
 8027478:	4601      	mov	r1, r0
 802747a:	ab03      	add	r3, sp, #12
 802747c:	4805      	ldr	r0, [pc, #20]	; (8027494 <fiprintf+0x20>)
 802747e:	f853 2b04 	ldr.w	r2, [r3], #4
 8027482:	6800      	ldr	r0, [r0, #0]
 8027484:	9301      	str	r3, [sp, #4]
 8027486:	f000 f929 	bl	80276dc <_vfiprintf_r>
 802748a:	b002      	add	sp, #8
 802748c:	f85d eb04 	ldr.w	lr, [sp], #4
 8027490:	b003      	add	sp, #12
 8027492:	4770      	bx	lr
 8027494:	200000bc 	.word	0x200000bc

08027498 <__libc_init_array>:
 8027498:	b570      	push	{r4, r5, r6, lr}
 802749a:	4d0d      	ldr	r5, [pc, #52]	; (80274d0 <__libc_init_array+0x38>)
 802749c:	4c0d      	ldr	r4, [pc, #52]	; (80274d4 <__libc_init_array+0x3c>)
 802749e:	1b64      	subs	r4, r4, r5
 80274a0:	10a4      	asrs	r4, r4, #2
 80274a2:	2600      	movs	r6, #0
 80274a4:	42a6      	cmp	r6, r4
 80274a6:	d109      	bne.n	80274bc <__libc_init_array+0x24>
 80274a8:	4d0b      	ldr	r5, [pc, #44]	; (80274d8 <__libc_init_array+0x40>)
 80274aa:	4c0c      	ldr	r4, [pc, #48]	; (80274dc <__libc_init_array+0x44>)
 80274ac:	f001 f9fa 	bl	80288a4 <_init>
 80274b0:	1b64      	subs	r4, r4, r5
 80274b2:	10a4      	asrs	r4, r4, #2
 80274b4:	2600      	movs	r6, #0
 80274b6:	42a6      	cmp	r6, r4
 80274b8:	d105      	bne.n	80274c6 <__libc_init_array+0x2e>
 80274ba:	bd70      	pop	{r4, r5, r6, pc}
 80274bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80274c0:	4798      	blx	r3
 80274c2:	3601      	adds	r6, #1
 80274c4:	e7ee      	b.n	80274a4 <__libc_init_array+0xc>
 80274c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80274ca:	4798      	blx	r3
 80274cc:	3601      	adds	r6, #1
 80274ce:	e7f2      	b.n	80274b6 <__libc_init_array+0x1e>
 80274d0:	0802ecbc 	.word	0x0802ecbc
 80274d4:	0802ecbc 	.word	0x0802ecbc
 80274d8:	0802ecbc 	.word	0x0802ecbc
 80274dc:	0802ecd8 	.word	0x0802ecd8

080274e0 <__retarget_lock_init_recursive>:
 80274e0:	4770      	bx	lr

080274e2 <__retarget_lock_acquire_recursive>:
 80274e2:	4770      	bx	lr

080274e4 <__retarget_lock_release>:
 80274e4:	4770      	bx	lr

080274e6 <__retarget_lock_release_recursive>:
 80274e6:	4770      	bx	lr

080274e8 <malloc>:
 80274e8:	4b02      	ldr	r3, [pc, #8]	; (80274f4 <malloc+0xc>)
 80274ea:	4601      	mov	r1, r0
 80274ec:	6818      	ldr	r0, [r3, #0]
 80274ee:	f000 b871 	b.w	80275d4 <_malloc_r>
 80274f2:	bf00      	nop
 80274f4:	200000bc 	.word	0x200000bc

080274f8 <free>:
 80274f8:	4b02      	ldr	r3, [pc, #8]	; (8027504 <free+0xc>)
 80274fa:	4601      	mov	r1, r0
 80274fc:	6818      	ldr	r0, [r3, #0]
 80274fe:	f000 b819 	b.w	8027534 <_free_r>
 8027502:	bf00      	nop
 8027504:	200000bc 	.word	0x200000bc

08027508 <memcpy>:
 8027508:	440a      	add	r2, r1
 802750a:	4291      	cmp	r1, r2
 802750c:	f100 33ff 	add.w	r3, r0, #4294967295
 8027510:	d100      	bne.n	8027514 <memcpy+0xc>
 8027512:	4770      	bx	lr
 8027514:	b510      	push	{r4, lr}
 8027516:	f811 4b01 	ldrb.w	r4, [r1], #1
 802751a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802751e:	4291      	cmp	r1, r2
 8027520:	d1f9      	bne.n	8027516 <memcpy+0xe>
 8027522:	bd10      	pop	{r4, pc}

08027524 <memset>:
 8027524:	4402      	add	r2, r0
 8027526:	4603      	mov	r3, r0
 8027528:	4293      	cmp	r3, r2
 802752a:	d100      	bne.n	802752e <memset+0xa>
 802752c:	4770      	bx	lr
 802752e:	f803 1b01 	strb.w	r1, [r3], #1
 8027532:	e7f9      	b.n	8027528 <memset+0x4>

08027534 <_free_r>:
 8027534:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8027536:	2900      	cmp	r1, #0
 8027538:	d048      	beq.n	80275cc <_free_r+0x98>
 802753a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802753e:	9001      	str	r0, [sp, #4]
 8027540:	2b00      	cmp	r3, #0
 8027542:	f1a1 0404 	sub.w	r4, r1, #4
 8027546:	bfb8      	it	lt
 8027548:	18e4      	addlt	r4, r4, r3
 802754a:	f000 ff69 	bl	8028420 <__malloc_lock>
 802754e:	4a20      	ldr	r2, [pc, #128]	; (80275d0 <_free_r+0x9c>)
 8027550:	9801      	ldr	r0, [sp, #4]
 8027552:	6813      	ldr	r3, [r2, #0]
 8027554:	4615      	mov	r5, r2
 8027556:	b933      	cbnz	r3, 8027566 <_free_r+0x32>
 8027558:	6063      	str	r3, [r4, #4]
 802755a:	6014      	str	r4, [r2, #0]
 802755c:	b003      	add	sp, #12
 802755e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8027562:	f000 bf63 	b.w	802842c <__malloc_unlock>
 8027566:	42a3      	cmp	r3, r4
 8027568:	d90b      	bls.n	8027582 <_free_r+0x4e>
 802756a:	6821      	ldr	r1, [r4, #0]
 802756c:	1862      	adds	r2, r4, r1
 802756e:	4293      	cmp	r3, r2
 8027570:	bf04      	itt	eq
 8027572:	681a      	ldreq	r2, [r3, #0]
 8027574:	685b      	ldreq	r3, [r3, #4]
 8027576:	6063      	str	r3, [r4, #4]
 8027578:	bf04      	itt	eq
 802757a:	1852      	addeq	r2, r2, r1
 802757c:	6022      	streq	r2, [r4, #0]
 802757e:	602c      	str	r4, [r5, #0]
 8027580:	e7ec      	b.n	802755c <_free_r+0x28>
 8027582:	461a      	mov	r2, r3
 8027584:	685b      	ldr	r3, [r3, #4]
 8027586:	b10b      	cbz	r3, 802758c <_free_r+0x58>
 8027588:	42a3      	cmp	r3, r4
 802758a:	d9fa      	bls.n	8027582 <_free_r+0x4e>
 802758c:	6811      	ldr	r1, [r2, #0]
 802758e:	1855      	adds	r5, r2, r1
 8027590:	42a5      	cmp	r5, r4
 8027592:	d10b      	bne.n	80275ac <_free_r+0x78>
 8027594:	6824      	ldr	r4, [r4, #0]
 8027596:	4421      	add	r1, r4
 8027598:	1854      	adds	r4, r2, r1
 802759a:	42a3      	cmp	r3, r4
 802759c:	6011      	str	r1, [r2, #0]
 802759e:	d1dd      	bne.n	802755c <_free_r+0x28>
 80275a0:	681c      	ldr	r4, [r3, #0]
 80275a2:	685b      	ldr	r3, [r3, #4]
 80275a4:	6053      	str	r3, [r2, #4]
 80275a6:	4421      	add	r1, r4
 80275a8:	6011      	str	r1, [r2, #0]
 80275aa:	e7d7      	b.n	802755c <_free_r+0x28>
 80275ac:	d902      	bls.n	80275b4 <_free_r+0x80>
 80275ae:	230c      	movs	r3, #12
 80275b0:	6003      	str	r3, [r0, #0]
 80275b2:	e7d3      	b.n	802755c <_free_r+0x28>
 80275b4:	6825      	ldr	r5, [r4, #0]
 80275b6:	1961      	adds	r1, r4, r5
 80275b8:	428b      	cmp	r3, r1
 80275ba:	bf04      	itt	eq
 80275bc:	6819      	ldreq	r1, [r3, #0]
 80275be:	685b      	ldreq	r3, [r3, #4]
 80275c0:	6063      	str	r3, [r4, #4]
 80275c2:	bf04      	itt	eq
 80275c4:	1949      	addeq	r1, r1, r5
 80275c6:	6021      	streq	r1, [r4, #0]
 80275c8:	6054      	str	r4, [r2, #4]
 80275ca:	e7c7      	b.n	802755c <_free_r+0x28>
 80275cc:	b003      	add	sp, #12
 80275ce:	bd30      	pop	{r4, r5, pc}
 80275d0:	20014ce0 	.word	0x20014ce0

080275d4 <_malloc_r>:
 80275d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80275d6:	1ccd      	adds	r5, r1, #3
 80275d8:	f025 0503 	bic.w	r5, r5, #3
 80275dc:	3508      	adds	r5, #8
 80275de:	2d0c      	cmp	r5, #12
 80275e0:	bf38      	it	cc
 80275e2:	250c      	movcc	r5, #12
 80275e4:	2d00      	cmp	r5, #0
 80275e6:	4606      	mov	r6, r0
 80275e8:	db01      	blt.n	80275ee <_malloc_r+0x1a>
 80275ea:	42a9      	cmp	r1, r5
 80275ec:	d903      	bls.n	80275f6 <_malloc_r+0x22>
 80275ee:	230c      	movs	r3, #12
 80275f0:	6033      	str	r3, [r6, #0]
 80275f2:	2000      	movs	r0, #0
 80275f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80275f6:	f000 ff13 	bl	8028420 <__malloc_lock>
 80275fa:	4921      	ldr	r1, [pc, #132]	; (8027680 <_malloc_r+0xac>)
 80275fc:	680a      	ldr	r2, [r1, #0]
 80275fe:	4614      	mov	r4, r2
 8027600:	b99c      	cbnz	r4, 802762a <_malloc_r+0x56>
 8027602:	4f20      	ldr	r7, [pc, #128]	; (8027684 <_malloc_r+0xb0>)
 8027604:	683b      	ldr	r3, [r7, #0]
 8027606:	b923      	cbnz	r3, 8027612 <_malloc_r+0x3e>
 8027608:	4621      	mov	r1, r4
 802760a:	4630      	mov	r0, r6
 802760c:	f000 fb2a 	bl	8027c64 <_sbrk_r>
 8027610:	6038      	str	r0, [r7, #0]
 8027612:	4629      	mov	r1, r5
 8027614:	4630      	mov	r0, r6
 8027616:	f000 fb25 	bl	8027c64 <_sbrk_r>
 802761a:	1c43      	adds	r3, r0, #1
 802761c:	d123      	bne.n	8027666 <_malloc_r+0x92>
 802761e:	230c      	movs	r3, #12
 8027620:	6033      	str	r3, [r6, #0]
 8027622:	4630      	mov	r0, r6
 8027624:	f000 ff02 	bl	802842c <__malloc_unlock>
 8027628:	e7e3      	b.n	80275f2 <_malloc_r+0x1e>
 802762a:	6823      	ldr	r3, [r4, #0]
 802762c:	1b5b      	subs	r3, r3, r5
 802762e:	d417      	bmi.n	8027660 <_malloc_r+0x8c>
 8027630:	2b0b      	cmp	r3, #11
 8027632:	d903      	bls.n	802763c <_malloc_r+0x68>
 8027634:	6023      	str	r3, [r4, #0]
 8027636:	441c      	add	r4, r3
 8027638:	6025      	str	r5, [r4, #0]
 802763a:	e004      	b.n	8027646 <_malloc_r+0x72>
 802763c:	6863      	ldr	r3, [r4, #4]
 802763e:	42a2      	cmp	r2, r4
 8027640:	bf0c      	ite	eq
 8027642:	600b      	streq	r3, [r1, #0]
 8027644:	6053      	strne	r3, [r2, #4]
 8027646:	4630      	mov	r0, r6
 8027648:	f000 fef0 	bl	802842c <__malloc_unlock>
 802764c:	f104 000b 	add.w	r0, r4, #11
 8027650:	1d23      	adds	r3, r4, #4
 8027652:	f020 0007 	bic.w	r0, r0, #7
 8027656:	1ac2      	subs	r2, r0, r3
 8027658:	d0cc      	beq.n	80275f4 <_malloc_r+0x20>
 802765a:	1a1b      	subs	r3, r3, r0
 802765c:	50a3      	str	r3, [r4, r2]
 802765e:	e7c9      	b.n	80275f4 <_malloc_r+0x20>
 8027660:	4622      	mov	r2, r4
 8027662:	6864      	ldr	r4, [r4, #4]
 8027664:	e7cc      	b.n	8027600 <_malloc_r+0x2c>
 8027666:	1cc4      	adds	r4, r0, #3
 8027668:	f024 0403 	bic.w	r4, r4, #3
 802766c:	42a0      	cmp	r0, r4
 802766e:	d0e3      	beq.n	8027638 <_malloc_r+0x64>
 8027670:	1a21      	subs	r1, r4, r0
 8027672:	4630      	mov	r0, r6
 8027674:	f000 faf6 	bl	8027c64 <_sbrk_r>
 8027678:	3001      	adds	r0, #1
 802767a:	d1dd      	bne.n	8027638 <_malloc_r+0x64>
 802767c:	e7cf      	b.n	802761e <_malloc_r+0x4a>
 802767e:	bf00      	nop
 8027680:	20014ce0 	.word	0x20014ce0
 8027684:	20014ce4 	.word	0x20014ce4

08027688 <__sfputc_r>:
 8027688:	6893      	ldr	r3, [r2, #8]
 802768a:	3b01      	subs	r3, #1
 802768c:	2b00      	cmp	r3, #0
 802768e:	b410      	push	{r4}
 8027690:	6093      	str	r3, [r2, #8]
 8027692:	da08      	bge.n	80276a6 <__sfputc_r+0x1e>
 8027694:	6994      	ldr	r4, [r2, #24]
 8027696:	42a3      	cmp	r3, r4
 8027698:	db01      	blt.n	802769e <__sfputc_r+0x16>
 802769a:	290a      	cmp	r1, #10
 802769c:	d103      	bne.n	80276a6 <__sfputc_r+0x1e>
 802769e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80276a2:	f000 bb65 	b.w	8027d70 <__swbuf_r>
 80276a6:	6813      	ldr	r3, [r2, #0]
 80276a8:	1c58      	adds	r0, r3, #1
 80276aa:	6010      	str	r0, [r2, #0]
 80276ac:	7019      	strb	r1, [r3, #0]
 80276ae:	4608      	mov	r0, r1
 80276b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80276b4:	4770      	bx	lr

080276b6 <__sfputs_r>:
 80276b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80276b8:	4606      	mov	r6, r0
 80276ba:	460f      	mov	r7, r1
 80276bc:	4614      	mov	r4, r2
 80276be:	18d5      	adds	r5, r2, r3
 80276c0:	42ac      	cmp	r4, r5
 80276c2:	d101      	bne.n	80276c8 <__sfputs_r+0x12>
 80276c4:	2000      	movs	r0, #0
 80276c6:	e007      	b.n	80276d8 <__sfputs_r+0x22>
 80276c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80276cc:	463a      	mov	r2, r7
 80276ce:	4630      	mov	r0, r6
 80276d0:	f7ff ffda 	bl	8027688 <__sfputc_r>
 80276d4:	1c43      	adds	r3, r0, #1
 80276d6:	d1f3      	bne.n	80276c0 <__sfputs_r+0xa>
 80276d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080276dc <_vfiprintf_r>:
 80276dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80276e0:	460d      	mov	r5, r1
 80276e2:	b09d      	sub	sp, #116	; 0x74
 80276e4:	4614      	mov	r4, r2
 80276e6:	4698      	mov	r8, r3
 80276e8:	4606      	mov	r6, r0
 80276ea:	b118      	cbz	r0, 80276f4 <_vfiprintf_r+0x18>
 80276ec:	6983      	ldr	r3, [r0, #24]
 80276ee:	b90b      	cbnz	r3, 80276f4 <_vfiprintf_r+0x18>
 80276f0:	f000 fd7a 	bl	80281e8 <__sinit>
 80276f4:	4b89      	ldr	r3, [pc, #548]	; (802791c <_vfiprintf_r+0x240>)
 80276f6:	429d      	cmp	r5, r3
 80276f8:	d11b      	bne.n	8027732 <_vfiprintf_r+0x56>
 80276fa:	6875      	ldr	r5, [r6, #4]
 80276fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80276fe:	07d9      	lsls	r1, r3, #31
 8027700:	d405      	bmi.n	802770e <_vfiprintf_r+0x32>
 8027702:	89ab      	ldrh	r3, [r5, #12]
 8027704:	059a      	lsls	r2, r3, #22
 8027706:	d402      	bmi.n	802770e <_vfiprintf_r+0x32>
 8027708:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802770a:	f7ff feea 	bl	80274e2 <__retarget_lock_acquire_recursive>
 802770e:	89ab      	ldrh	r3, [r5, #12]
 8027710:	071b      	lsls	r3, r3, #28
 8027712:	d501      	bpl.n	8027718 <_vfiprintf_r+0x3c>
 8027714:	692b      	ldr	r3, [r5, #16]
 8027716:	b9eb      	cbnz	r3, 8027754 <_vfiprintf_r+0x78>
 8027718:	4629      	mov	r1, r5
 802771a:	4630      	mov	r0, r6
 802771c:	f000 fb7a 	bl	8027e14 <__swsetup_r>
 8027720:	b1c0      	cbz	r0, 8027754 <_vfiprintf_r+0x78>
 8027722:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027724:	07dc      	lsls	r4, r3, #31
 8027726:	d50e      	bpl.n	8027746 <_vfiprintf_r+0x6a>
 8027728:	f04f 30ff 	mov.w	r0, #4294967295
 802772c:	b01d      	add	sp, #116	; 0x74
 802772e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027732:	4b7b      	ldr	r3, [pc, #492]	; (8027920 <_vfiprintf_r+0x244>)
 8027734:	429d      	cmp	r5, r3
 8027736:	d101      	bne.n	802773c <_vfiprintf_r+0x60>
 8027738:	68b5      	ldr	r5, [r6, #8]
 802773a:	e7df      	b.n	80276fc <_vfiprintf_r+0x20>
 802773c:	4b79      	ldr	r3, [pc, #484]	; (8027924 <_vfiprintf_r+0x248>)
 802773e:	429d      	cmp	r5, r3
 8027740:	bf08      	it	eq
 8027742:	68f5      	ldreq	r5, [r6, #12]
 8027744:	e7da      	b.n	80276fc <_vfiprintf_r+0x20>
 8027746:	89ab      	ldrh	r3, [r5, #12]
 8027748:	0598      	lsls	r0, r3, #22
 802774a:	d4ed      	bmi.n	8027728 <_vfiprintf_r+0x4c>
 802774c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802774e:	f7ff feca 	bl	80274e6 <__retarget_lock_release_recursive>
 8027752:	e7e9      	b.n	8027728 <_vfiprintf_r+0x4c>
 8027754:	2300      	movs	r3, #0
 8027756:	9309      	str	r3, [sp, #36]	; 0x24
 8027758:	2320      	movs	r3, #32
 802775a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802775e:	f8cd 800c 	str.w	r8, [sp, #12]
 8027762:	2330      	movs	r3, #48	; 0x30
 8027764:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8027928 <_vfiprintf_r+0x24c>
 8027768:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802776c:	f04f 0901 	mov.w	r9, #1
 8027770:	4623      	mov	r3, r4
 8027772:	469a      	mov	sl, r3
 8027774:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027778:	b10a      	cbz	r2, 802777e <_vfiprintf_r+0xa2>
 802777a:	2a25      	cmp	r2, #37	; 0x25
 802777c:	d1f9      	bne.n	8027772 <_vfiprintf_r+0x96>
 802777e:	ebba 0b04 	subs.w	fp, sl, r4
 8027782:	d00b      	beq.n	802779c <_vfiprintf_r+0xc0>
 8027784:	465b      	mov	r3, fp
 8027786:	4622      	mov	r2, r4
 8027788:	4629      	mov	r1, r5
 802778a:	4630      	mov	r0, r6
 802778c:	f7ff ff93 	bl	80276b6 <__sfputs_r>
 8027790:	3001      	adds	r0, #1
 8027792:	f000 80aa 	beq.w	80278ea <_vfiprintf_r+0x20e>
 8027796:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027798:	445a      	add	r2, fp
 802779a:	9209      	str	r2, [sp, #36]	; 0x24
 802779c:	f89a 3000 	ldrb.w	r3, [sl]
 80277a0:	2b00      	cmp	r3, #0
 80277a2:	f000 80a2 	beq.w	80278ea <_vfiprintf_r+0x20e>
 80277a6:	2300      	movs	r3, #0
 80277a8:	f04f 32ff 	mov.w	r2, #4294967295
 80277ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80277b0:	f10a 0a01 	add.w	sl, sl, #1
 80277b4:	9304      	str	r3, [sp, #16]
 80277b6:	9307      	str	r3, [sp, #28]
 80277b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80277bc:	931a      	str	r3, [sp, #104]	; 0x68
 80277be:	4654      	mov	r4, sl
 80277c0:	2205      	movs	r2, #5
 80277c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80277c6:	4858      	ldr	r0, [pc, #352]	; (8027928 <_vfiprintf_r+0x24c>)
 80277c8:	f7d8 fd22 	bl	8000210 <memchr>
 80277cc:	9a04      	ldr	r2, [sp, #16]
 80277ce:	b9d8      	cbnz	r0, 8027808 <_vfiprintf_r+0x12c>
 80277d0:	06d1      	lsls	r1, r2, #27
 80277d2:	bf44      	itt	mi
 80277d4:	2320      	movmi	r3, #32
 80277d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80277da:	0713      	lsls	r3, r2, #28
 80277dc:	bf44      	itt	mi
 80277de:	232b      	movmi	r3, #43	; 0x2b
 80277e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80277e4:	f89a 3000 	ldrb.w	r3, [sl]
 80277e8:	2b2a      	cmp	r3, #42	; 0x2a
 80277ea:	d015      	beq.n	8027818 <_vfiprintf_r+0x13c>
 80277ec:	9a07      	ldr	r2, [sp, #28]
 80277ee:	4654      	mov	r4, sl
 80277f0:	2000      	movs	r0, #0
 80277f2:	f04f 0c0a 	mov.w	ip, #10
 80277f6:	4621      	mov	r1, r4
 80277f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80277fc:	3b30      	subs	r3, #48	; 0x30
 80277fe:	2b09      	cmp	r3, #9
 8027800:	d94e      	bls.n	80278a0 <_vfiprintf_r+0x1c4>
 8027802:	b1b0      	cbz	r0, 8027832 <_vfiprintf_r+0x156>
 8027804:	9207      	str	r2, [sp, #28]
 8027806:	e014      	b.n	8027832 <_vfiprintf_r+0x156>
 8027808:	eba0 0308 	sub.w	r3, r0, r8
 802780c:	fa09 f303 	lsl.w	r3, r9, r3
 8027810:	4313      	orrs	r3, r2
 8027812:	9304      	str	r3, [sp, #16]
 8027814:	46a2      	mov	sl, r4
 8027816:	e7d2      	b.n	80277be <_vfiprintf_r+0xe2>
 8027818:	9b03      	ldr	r3, [sp, #12]
 802781a:	1d19      	adds	r1, r3, #4
 802781c:	681b      	ldr	r3, [r3, #0]
 802781e:	9103      	str	r1, [sp, #12]
 8027820:	2b00      	cmp	r3, #0
 8027822:	bfbb      	ittet	lt
 8027824:	425b      	neglt	r3, r3
 8027826:	f042 0202 	orrlt.w	r2, r2, #2
 802782a:	9307      	strge	r3, [sp, #28]
 802782c:	9307      	strlt	r3, [sp, #28]
 802782e:	bfb8      	it	lt
 8027830:	9204      	strlt	r2, [sp, #16]
 8027832:	7823      	ldrb	r3, [r4, #0]
 8027834:	2b2e      	cmp	r3, #46	; 0x2e
 8027836:	d10c      	bne.n	8027852 <_vfiprintf_r+0x176>
 8027838:	7863      	ldrb	r3, [r4, #1]
 802783a:	2b2a      	cmp	r3, #42	; 0x2a
 802783c:	d135      	bne.n	80278aa <_vfiprintf_r+0x1ce>
 802783e:	9b03      	ldr	r3, [sp, #12]
 8027840:	1d1a      	adds	r2, r3, #4
 8027842:	681b      	ldr	r3, [r3, #0]
 8027844:	9203      	str	r2, [sp, #12]
 8027846:	2b00      	cmp	r3, #0
 8027848:	bfb8      	it	lt
 802784a:	f04f 33ff 	movlt.w	r3, #4294967295
 802784e:	3402      	adds	r4, #2
 8027850:	9305      	str	r3, [sp, #20]
 8027852:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8027938 <_vfiprintf_r+0x25c>
 8027856:	7821      	ldrb	r1, [r4, #0]
 8027858:	2203      	movs	r2, #3
 802785a:	4650      	mov	r0, sl
 802785c:	f7d8 fcd8 	bl	8000210 <memchr>
 8027860:	b140      	cbz	r0, 8027874 <_vfiprintf_r+0x198>
 8027862:	2340      	movs	r3, #64	; 0x40
 8027864:	eba0 000a 	sub.w	r0, r0, sl
 8027868:	fa03 f000 	lsl.w	r0, r3, r0
 802786c:	9b04      	ldr	r3, [sp, #16]
 802786e:	4303      	orrs	r3, r0
 8027870:	3401      	adds	r4, #1
 8027872:	9304      	str	r3, [sp, #16]
 8027874:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027878:	482c      	ldr	r0, [pc, #176]	; (802792c <_vfiprintf_r+0x250>)
 802787a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802787e:	2206      	movs	r2, #6
 8027880:	f7d8 fcc6 	bl	8000210 <memchr>
 8027884:	2800      	cmp	r0, #0
 8027886:	d03f      	beq.n	8027908 <_vfiprintf_r+0x22c>
 8027888:	4b29      	ldr	r3, [pc, #164]	; (8027930 <_vfiprintf_r+0x254>)
 802788a:	bb1b      	cbnz	r3, 80278d4 <_vfiprintf_r+0x1f8>
 802788c:	9b03      	ldr	r3, [sp, #12]
 802788e:	3307      	adds	r3, #7
 8027890:	f023 0307 	bic.w	r3, r3, #7
 8027894:	3308      	adds	r3, #8
 8027896:	9303      	str	r3, [sp, #12]
 8027898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802789a:	443b      	add	r3, r7
 802789c:	9309      	str	r3, [sp, #36]	; 0x24
 802789e:	e767      	b.n	8027770 <_vfiprintf_r+0x94>
 80278a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80278a4:	460c      	mov	r4, r1
 80278a6:	2001      	movs	r0, #1
 80278a8:	e7a5      	b.n	80277f6 <_vfiprintf_r+0x11a>
 80278aa:	2300      	movs	r3, #0
 80278ac:	3401      	adds	r4, #1
 80278ae:	9305      	str	r3, [sp, #20]
 80278b0:	4619      	mov	r1, r3
 80278b2:	f04f 0c0a 	mov.w	ip, #10
 80278b6:	4620      	mov	r0, r4
 80278b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80278bc:	3a30      	subs	r2, #48	; 0x30
 80278be:	2a09      	cmp	r2, #9
 80278c0:	d903      	bls.n	80278ca <_vfiprintf_r+0x1ee>
 80278c2:	2b00      	cmp	r3, #0
 80278c4:	d0c5      	beq.n	8027852 <_vfiprintf_r+0x176>
 80278c6:	9105      	str	r1, [sp, #20]
 80278c8:	e7c3      	b.n	8027852 <_vfiprintf_r+0x176>
 80278ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80278ce:	4604      	mov	r4, r0
 80278d0:	2301      	movs	r3, #1
 80278d2:	e7f0      	b.n	80278b6 <_vfiprintf_r+0x1da>
 80278d4:	ab03      	add	r3, sp, #12
 80278d6:	9300      	str	r3, [sp, #0]
 80278d8:	462a      	mov	r2, r5
 80278da:	4b16      	ldr	r3, [pc, #88]	; (8027934 <_vfiprintf_r+0x258>)
 80278dc:	a904      	add	r1, sp, #16
 80278de:	4630      	mov	r0, r6
 80278e0:	f3af 8000 	nop.w
 80278e4:	4607      	mov	r7, r0
 80278e6:	1c78      	adds	r0, r7, #1
 80278e8:	d1d6      	bne.n	8027898 <_vfiprintf_r+0x1bc>
 80278ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80278ec:	07d9      	lsls	r1, r3, #31
 80278ee:	d405      	bmi.n	80278fc <_vfiprintf_r+0x220>
 80278f0:	89ab      	ldrh	r3, [r5, #12]
 80278f2:	059a      	lsls	r2, r3, #22
 80278f4:	d402      	bmi.n	80278fc <_vfiprintf_r+0x220>
 80278f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80278f8:	f7ff fdf5 	bl	80274e6 <__retarget_lock_release_recursive>
 80278fc:	89ab      	ldrh	r3, [r5, #12]
 80278fe:	065b      	lsls	r3, r3, #25
 8027900:	f53f af12 	bmi.w	8027728 <_vfiprintf_r+0x4c>
 8027904:	9809      	ldr	r0, [sp, #36]	; 0x24
 8027906:	e711      	b.n	802772c <_vfiprintf_r+0x50>
 8027908:	ab03      	add	r3, sp, #12
 802790a:	9300      	str	r3, [sp, #0]
 802790c:	462a      	mov	r2, r5
 802790e:	4b09      	ldr	r3, [pc, #36]	; (8027934 <_vfiprintf_r+0x258>)
 8027910:	a904      	add	r1, sp, #16
 8027912:	4630      	mov	r0, r6
 8027914:	f000 f880 	bl	8027a18 <_printf_i>
 8027918:	e7e4      	b.n	80278e4 <_vfiprintf_r+0x208>
 802791a:	bf00      	nop
 802791c:	0802ec5c 	.word	0x0802ec5c
 8027920:	0802ec7c 	.word	0x0802ec7c
 8027924:	0802ec3c 	.word	0x0802ec3c
 8027928:	0802ec04 	.word	0x0802ec04
 802792c:	0802ec0e 	.word	0x0802ec0e
 8027930:	00000000 	.word	0x00000000
 8027934:	080276b7 	.word	0x080276b7
 8027938:	0802ec0a 	.word	0x0802ec0a

0802793c <_printf_common>:
 802793c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027940:	4616      	mov	r6, r2
 8027942:	4699      	mov	r9, r3
 8027944:	688a      	ldr	r2, [r1, #8]
 8027946:	690b      	ldr	r3, [r1, #16]
 8027948:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802794c:	4293      	cmp	r3, r2
 802794e:	bfb8      	it	lt
 8027950:	4613      	movlt	r3, r2
 8027952:	6033      	str	r3, [r6, #0]
 8027954:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8027958:	4607      	mov	r7, r0
 802795a:	460c      	mov	r4, r1
 802795c:	b10a      	cbz	r2, 8027962 <_printf_common+0x26>
 802795e:	3301      	adds	r3, #1
 8027960:	6033      	str	r3, [r6, #0]
 8027962:	6823      	ldr	r3, [r4, #0]
 8027964:	0699      	lsls	r1, r3, #26
 8027966:	bf42      	ittt	mi
 8027968:	6833      	ldrmi	r3, [r6, #0]
 802796a:	3302      	addmi	r3, #2
 802796c:	6033      	strmi	r3, [r6, #0]
 802796e:	6825      	ldr	r5, [r4, #0]
 8027970:	f015 0506 	ands.w	r5, r5, #6
 8027974:	d106      	bne.n	8027984 <_printf_common+0x48>
 8027976:	f104 0a19 	add.w	sl, r4, #25
 802797a:	68e3      	ldr	r3, [r4, #12]
 802797c:	6832      	ldr	r2, [r6, #0]
 802797e:	1a9b      	subs	r3, r3, r2
 8027980:	42ab      	cmp	r3, r5
 8027982:	dc26      	bgt.n	80279d2 <_printf_common+0x96>
 8027984:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8027988:	1e13      	subs	r3, r2, #0
 802798a:	6822      	ldr	r2, [r4, #0]
 802798c:	bf18      	it	ne
 802798e:	2301      	movne	r3, #1
 8027990:	0692      	lsls	r2, r2, #26
 8027992:	d42b      	bmi.n	80279ec <_printf_common+0xb0>
 8027994:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8027998:	4649      	mov	r1, r9
 802799a:	4638      	mov	r0, r7
 802799c:	47c0      	blx	r8
 802799e:	3001      	adds	r0, #1
 80279a0:	d01e      	beq.n	80279e0 <_printf_common+0xa4>
 80279a2:	6823      	ldr	r3, [r4, #0]
 80279a4:	68e5      	ldr	r5, [r4, #12]
 80279a6:	6832      	ldr	r2, [r6, #0]
 80279a8:	f003 0306 	and.w	r3, r3, #6
 80279ac:	2b04      	cmp	r3, #4
 80279ae:	bf08      	it	eq
 80279b0:	1aad      	subeq	r5, r5, r2
 80279b2:	68a3      	ldr	r3, [r4, #8]
 80279b4:	6922      	ldr	r2, [r4, #16]
 80279b6:	bf0c      	ite	eq
 80279b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80279bc:	2500      	movne	r5, #0
 80279be:	4293      	cmp	r3, r2
 80279c0:	bfc4      	itt	gt
 80279c2:	1a9b      	subgt	r3, r3, r2
 80279c4:	18ed      	addgt	r5, r5, r3
 80279c6:	2600      	movs	r6, #0
 80279c8:	341a      	adds	r4, #26
 80279ca:	42b5      	cmp	r5, r6
 80279cc:	d11a      	bne.n	8027a04 <_printf_common+0xc8>
 80279ce:	2000      	movs	r0, #0
 80279d0:	e008      	b.n	80279e4 <_printf_common+0xa8>
 80279d2:	2301      	movs	r3, #1
 80279d4:	4652      	mov	r2, sl
 80279d6:	4649      	mov	r1, r9
 80279d8:	4638      	mov	r0, r7
 80279da:	47c0      	blx	r8
 80279dc:	3001      	adds	r0, #1
 80279de:	d103      	bne.n	80279e8 <_printf_common+0xac>
 80279e0:	f04f 30ff 	mov.w	r0, #4294967295
 80279e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80279e8:	3501      	adds	r5, #1
 80279ea:	e7c6      	b.n	802797a <_printf_common+0x3e>
 80279ec:	18e1      	adds	r1, r4, r3
 80279ee:	1c5a      	adds	r2, r3, #1
 80279f0:	2030      	movs	r0, #48	; 0x30
 80279f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80279f6:	4422      	add	r2, r4
 80279f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80279fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8027a00:	3302      	adds	r3, #2
 8027a02:	e7c7      	b.n	8027994 <_printf_common+0x58>
 8027a04:	2301      	movs	r3, #1
 8027a06:	4622      	mov	r2, r4
 8027a08:	4649      	mov	r1, r9
 8027a0a:	4638      	mov	r0, r7
 8027a0c:	47c0      	blx	r8
 8027a0e:	3001      	adds	r0, #1
 8027a10:	d0e6      	beq.n	80279e0 <_printf_common+0xa4>
 8027a12:	3601      	adds	r6, #1
 8027a14:	e7d9      	b.n	80279ca <_printf_common+0x8e>
	...

08027a18 <_printf_i>:
 8027a18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8027a1c:	460c      	mov	r4, r1
 8027a1e:	4691      	mov	r9, r2
 8027a20:	7e27      	ldrb	r7, [r4, #24]
 8027a22:	990c      	ldr	r1, [sp, #48]	; 0x30
 8027a24:	2f78      	cmp	r7, #120	; 0x78
 8027a26:	4680      	mov	r8, r0
 8027a28:	469a      	mov	sl, r3
 8027a2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8027a2e:	d807      	bhi.n	8027a40 <_printf_i+0x28>
 8027a30:	2f62      	cmp	r7, #98	; 0x62
 8027a32:	d80a      	bhi.n	8027a4a <_printf_i+0x32>
 8027a34:	2f00      	cmp	r7, #0
 8027a36:	f000 80d8 	beq.w	8027bea <_printf_i+0x1d2>
 8027a3a:	2f58      	cmp	r7, #88	; 0x58
 8027a3c:	f000 80a3 	beq.w	8027b86 <_printf_i+0x16e>
 8027a40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8027a44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8027a48:	e03a      	b.n	8027ac0 <_printf_i+0xa8>
 8027a4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8027a4e:	2b15      	cmp	r3, #21
 8027a50:	d8f6      	bhi.n	8027a40 <_printf_i+0x28>
 8027a52:	a001      	add	r0, pc, #4	; (adr r0, 8027a58 <_printf_i+0x40>)
 8027a54:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8027a58:	08027ab1 	.word	0x08027ab1
 8027a5c:	08027ac5 	.word	0x08027ac5
 8027a60:	08027a41 	.word	0x08027a41
 8027a64:	08027a41 	.word	0x08027a41
 8027a68:	08027a41 	.word	0x08027a41
 8027a6c:	08027a41 	.word	0x08027a41
 8027a70:	08027ac5 	.word	0x08027ac5
 8027a74:	08027a41 	.word	0x08027a41
 8027a78:	08027a41 	.word	0x08027a41
 8027a7c:	08027a41 	.word	0x08027a41
 8027a80:	08027a41 	.word	0x08027a41
 8027a84:	08027bd1 	.word	0x08027bd1
 8027a88:	08027af5 	.word	0x08027af5
 8027a8c:	08027bb3 	.word	0x08027bb3
 8027a90:	08027a41 	.word	0x08027a41
 8027a94:	08027a41 	.word	0x08027a41
 8027a98:	08027bf3 	.word	0x08027bf3
 8027a9c:	08027a41 	.word	0x08027a41
 8027aa0:	08027af5 	.word	0x08027af5
 8027aa4:	08027a41 	.word	0x08027a41
 8027aa8:	08027a41 	.word	0x08027a41
 8027aac:	08027bbb 	.word	0x08027bbb
 8027ab0:	680b      	ldr	r3, [r1, #0]
 8027ab2:	1d1a      	adds	r2, r3, #4
 8027ab4:	681b      	ldr	r3, [r3, #0]
 8027ab6:	600a      	str	r2, [r1, #0]
 8027ab8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8027abc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8027ac0:	2301      	movs	r3, #1
 8027ac2:	e0a3      	b.n	8027c0c <_printf_i+0x1f4>
 8027ac4:	6825      	ldr	r5, [r4, #0]
 8027ac6:	6808      	ldr	r0, [r1, #0]
 8027ac8:	062e      	lsls	r6, r5, #24
 8027aca:	f100 0304 	add.w	r3, r0, #4
 8027ace:	d50a      	bpl.n	8027ae6 <_printf_i+0xce>
 8027ad0:	6805      	ldr	r5, [r0, #0]
 8027ad2:	600b      	str	r3, [r1, #0]
 8027ad4:	2d00      	cmp	r5, #0
 8027ad6:	da03      	bge.n	8027ae0 <_printf_i+0xc8>
 8027ad8:	232d      	movs	r3, #45	; 0x2d
 8027ada:	426d      	negs	r5, r5
 8027adc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027ae0:	485e      	ldr	r0, [pc, #376]	; (8027c5c <_printf_i+0x244>)
 8027ae2:	230a      	movs	r3, #10
 8027ae4:	e019      	b.n	8027b1a <_printf_i+0x102>
 8027ae6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8027aea:	6805      	ldr	r5, [r0, #0]
 8027aec:	600b      	str	r3, [r1, #0]
 8027aee:	bf18      	it	ne
 8027af0:	b22d      	sxthne	r5, r5
 8027af2:	e7ef      	b.n	8027ad4 <_printf_i+0xbc>
 8027af4:	680b      	ldr	r3, [r1, #0]
 8027af6:	6825      	ldr	r5, [r4, #0]
 8027af8:	1d18      	adds	r0, r3, #4
 8027afa:	6008      	str	r0, [r1, #0]
 8027afc:	0628      	lsls	r0, r5, #24
 8027afe:	d501      	bpl.n	8027b04 <_printf_i+0xec>
 8027b00:	681d      	ldr	r5, [r3, #0]
 8027b02:	e002      	b.n	8027b0a <_printf_i+0xf2>
 8027b04:	0669      	lsls	r1, r5, #25
 8027b06:	d5fb      	bpl.n	8027b00 <_printf_i+0xe8>
 8027b08:	881d      	ldrh	r5, [r3, #0]
 8027b0a:	4854      	ldr	r0, [pc, #336]	; (8027c5c <_printf_i+0x244>)
 8027b0c:	2f6f      	cmp	r7, #111	; 0x6f
 8027b0e:	bf0c      	ite	eq
 8027b10:	2308      	moveq	r3, #8
 8027b12:	230a      	movne	r3, #10
 8027b14:	2100      	movs	r1, #0
 8027b16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8027b1a:	6866      	ldr	r6, [r4, #4]
 8027b1c:	60a6      	str	r6, [r4, #8]
 8027b1e:	2e00      	cmp	r6, #0
 8027b20:	bfa2      	ittt	ge
 8027b22:	6821      	ldrge	r1, [r4, #0]
 8027b24:	f021 0104 	bicge.w	r1, r1, #4
 8027b28:	6021      	strge	r1, [r4, #0]
 8027b2a:	b90d      	cbnz	r5, 8027b30 <_printf_i+0x118>
 8027b2c:	2e00      	cmp	r6, #0
 8027b2e:	d04d      	beq.n	8027bcc <_printf_i+0x1b4>
 8027b30:	4616      	mov	r6, r2
 8027b32:	fbb5 f1f3 	udiv	r1, r5, r3
 8027b36:	fb03 5711 	mls	r7, r3, r1, r5
 8027b3a:	5dc7      	ldrb	r7, [r0, r7]
 8027b3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8027b40:	462f      	mov	r7, r5
 8027b42:	42bb      	cmp	r3, r7
 8027b44:	460d      	mov	r5, r1
 8027b46:	d9f4      	bls.n	8027b32 <_printf_i+0x11a>
 8027b48:	2b08      	cmp	r3, #8
 8027b4a:	d10b      	bne.n	8027b64 <_printf_i+0x14c>
 8027b4c:	6823      	ldr	r3, [r4, #0]
 8027b4e:	07df      	lsls	r7, r3, #31
 8027b50:	d508      	bpl.n	8027b64 <_printf_i+0x14c>
 8027b52:	6923      	ldr	r3, [r4, #16]
 8027b54:	6861      	ldr	r1, [r4, #4]
 8027b56:	4299      	cmp	r1, r3
 8027b58:	bfde      	ittt	le
 8027b5a:	2330      	movle	r3, #48	; 0x30
 8027b5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8027b60:	f106 36ff 	addle.w	r6, r6, #4294967295
 8027b64:	1b92      	subs	r2, r2, r6
 8027b66:	6122      	str	r2, [r4, #16]
 8027b68:	f8cd a000 	str.w	sl, [sp]
 8027b6c:	464b      	mov	r3, r9
 8027b6e:	aa03      	add	r2, sp, #12
 8027b70:	4621      	mov	r1, r4
 8027b72:	4640      	mov	r0, r8
 8027b74:	f7ff fee2 	bl	802793c <_printf_common>
 8027b78:	3001      	adds	r0, #1
 8027b7a:	d14c      	bne.n	8027c16 <_printf_i+0x1fe>
 8027b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8027b80:	b004      	add	sp, #16
 8027b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027b86:	4835      	ldr	r0, [pc, #212]	; (8027c5c <_printf_i+0x244>)
 8027b88:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8027b8c:	6823      	ldr	r3, [r4, #0]
 8027b8e:	680e      	ldr	r6, [r1, #0]
 8027b90:	061f      	lsls	r7, r3, #24
 8027b92:	f856 5b04 	ldr.w	r5, [r6], #4
 8027b96:	600e      	str	r6, [r1, #0]
 8027b98:	d514      	bpl.n	8027bc4 <_printf_i+0x1ac>
 8027b9a:	07d9      	lsls	r1, r3, #31
 8027b9c:	bf44      	itt	mi
 8027b9e:	f043 0320 	orrmi.w	r3, r3, #32
 8027ba2:	6023      	strmi	r3, [r4, #0]
 8027ba4:	b91d      	cbnz	r5, 8027bae <_printf_i+0x196>
 8027ba6:	6823      	ldr	r3, [r4, #0]
 8027ba8:	f023 0320 	bic.w	r3, r3, #32
 8027bac:	6023      	str	r3, [r4, #0]
 8027bae:	2310      	movs	r3, #16
 8027bb0:	e7b0      	b.n	8027b14 <_printf_i+0xfc>
 8027bb2:	6823      	ldr	r3, [r4, #0]
 8027bb4:	f043 0320 	orr.w	r3, r3, #32
 8027bb8:	6023      	str	r3, [r4, #0]
 8027bba:	2378      	movs	r3, #120	; 0x78
 8027bbc:	4828      	ldr	r0, [pc, #160]	; (8027c60 <_printf_i+0x248>)
 8027bbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8027bc2:	e7e3      	b.n	8027b8c <_printf_i+0x174>
 8027bc4:	065e      	lsls	r6, r3, #25
 8027bc6:	bf48      	it	mi
 8027bc8:	b2ad      	uxthmi	r5, r5
 8027bca:	e7e6      	b.n	8027b9a <_printf_i+0x182>
 8027bcc:	4616      	mov	r6, r2
 8027bce:	e7bb      	b.n	8027b48 <_printf_i+0x130>
 8027bd0:	680b      	ldr	r3, [r1, #0]
 8027bd2:	6826      	ldr	r6, [r4, #0]
 8027bd4:	6960      	ldr	r0, [r4, #20]
 8027bd6:	1d1d      	adds	r5, r3, #4
 8027bd8:	600d      	str	r5, [r1, #0]
 8027bda:	0635      	lsls	r5, r6, #24
 8027bdc:	681b      	ldr	r3, [r3, #0]
 8027bde:	d501      	bpl.n	8027be4 <_printf_i+0x1cc>
 8027be0:	6018      	str	r0, [r3, #0]
 8027be2:	e002      	b.n	8027bea <_printf_i+0x1d2>
 8027be4:	0671      	lsls	r1, r6, #25
 8027be6:	d5fb      	bpl.n	8027be0 <_printf_i+0x1c8>
 8027be8:	8018      	strh	r0, [r3, #0]
 8027bea:	2300      	movs	r3, #0
 8027bec:	6123      	str	r3, [r4, #16]
 8027bee:	4616      	mov	r6, r2
 8027bf0:	e7ba      	b.n	8027b68 <_printf_i+0x150>
 8027bf2:	680b      	ldr	r3, [r1, #0]
 8027bf4:	1d1a      	adds	r2, r3, #4
 8027bf6:	600a      	str	r2, [r1, #0]
 8027bf8:	681e      	ldr	r6, [r3, #0]
 8027bfa:	6862      	ldr	r2, [r4, #4]
 8027bfc:	2100      	movs	r1, #0
 8027bfe:	4630      	mov	r0, r6
 8027c00:	f7d8 fb06 	bl	8000210 <memchr>
 8027c04:	b108      	cbz	r0, 8027c0a <_printf_i+0x1f2>
 8027c06:	1b80      	subs	r0, r0, r6
 8027c08:	6060      	str	r0, [r4, #4]
 8027c0a:	6863      	ldr	r3, [r4, #4]
 8027c0c:	6123      	str	r3, [r4, #16]
 8027c0e:	2300      	movs	r3, #0
 8027c10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027c14:	e7a8      	b.n	8027b68 <_printf_i+0x150>
 8027c16:	6923      	ldr	r3, [r4, #16]
 8027c18:	4632      	mov	r2, r6
 8027c1a:	4649      	mov	r1, r9
 8027c1c:	4640      	mov	r0, r8
 8027c1e:	47d0      	blx	sl
 8027c20:	3001      	adds	r0, #1
 8027c22:	d0ab      	beq.n	8027b7c <_printf_i+0x164>
 8027c24:	6823      	ldr	r3, [r4, #0]
 8027c26:	079b      	lsls	r3, r3, #30
 8027c28:	d413      	bmi.n	8027c52 <_printf_i+0x23a>
 8027c2a:	68e0      	ldr	r0, [r4, #12]
 8027c2c:	9b03      	ldr	r3, [sp, #12]
 8027c2e:	4298      	cmp	r0, r3
 8027c30:	bfb8      	it	lt
 8027c32:	4618      	movlt	r0, r3
 8027c34:	e7a4      	b.n	8027b80 <_printf_i+0x168>
 8027c36:	2301      	movs	r3, #1
 8027c38:	4632      	mov	r2, r6
 8027c3a:	4649      	mov	r1, r9
 8027c3c:	4640      	mov	r0, r8
 8027c3e:	47d0      	blx	sl
 8027c40:	3001      	adds	r0, #1
 8027c42:	d09b      	beq.n	8027b7c <_printf_i+0x164>
 8027c44:	3501      	adds	r5, #1
 8027c46:	68e3      	ldr	r3, [r4, #12]
 8027c48:	9903      	ldr	r1, [sp, #12]
 8027c4a:	1a5b      	subs	r3, r3, r1
 8027c4c:	42ab      	cmp	r3, r5
 8027c4e:	dcf2      	bgt.n	8027c36 <_printf_i+0x21e>
 8027c50:	e7eb      	b.n	8027c2a <_printf_i+0x212>
 8027c52:	2500      	movs	r5, #0
 8027c54:	f104 0619 	add.w	r6, r4, #25
 8027c58:	e7f5      	b.n	8027c46 <_printf_i+0x22e>
 8027c5a:	bf00      	nop
 8027c5c:	0802ec15 	.word	0x0802ec15
 8027c60:	0802ec26 	.word	0x0802ec26

08027c64 <_sbrk_r>:
 8027c64:	b538      	push	{r3, r4, r5, lr}
 8027c66:	4d06      	ldr	r5, [pc, #24]	; (8027c80 <_sbrk_r+0x1c>)
 8027c68:	2300      	movs	r3, #0
 8027c6a:	4604      	mov	r4, r0
 8027c6c:	4608      	mov	r0, r1
 8027c6e:	602b      	str	r3, [r5, #0]
 8027c70:	f7d9 fe38 	bl	80018e4 <_sbrk>
 8027c74:	1c43      	adds	r3, r0, #1
 8027c76:	d102      	bne.n	8027c7e <_sbrk_r+0x1a>
 8027c78:	682b      	ldr	r3, [r5, #0]
 8027c7a:	b103      	cbz	r3, 8027c7e <_sbrk_r+0x1a>
 8027c7c:	6023      	str	r3, [r4, #0]
 8027c7e:	bd38      	pop	{r3, r4, r5, pc}
 8027c80:	2001514c 	.word	0x2001514c

08027c84 <_raise_r>:
 8027c84:	291f      	cmp	r1, #31
 8027c86:	b538      	push	{r3, r4, r5, lr}
 8027c88:	4604      	mov	r4, r0
 8027c8a:	460d      	mov	r5, r1
 8027c8c:	d904      	bls.n	8027c98 <_raise_r+0x14>
 8027c8e:	2316      	movs	r3, #22
 8027c90:	6003      	str	r3, [r0, #0]
 8027c92:	f04f 30ff 	mov.w	r0, #4294967295
 8027c96:	bd38      	pop	{r3, r4, r5, pc}
 8027c98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8027c9a:	b112      	cbz	r2, 8027ca2 <_raise_r+0x1e>
 8027c9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8027ca0:	b94b      	cbnz	r3, 8027cb6 <_raise_r+0x32>
 8027ca2:	4620      	mov	r0, r4
 8027ca4:	f000 f830 	bl	8027d08 <_getpid_r>
 8027ca8:	462a      	mov	r2, r5
 8027caa:	4601      	mov	r1, r0
 8027cac:	4620      	mov	r0, r4
 8027cae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8027cb2:	f000 b817 	b.w	8027ce4 <_kill_r>
 8027cb6:	2b01      	cmp	r3, #1
 8027cb8:	d00a      	beq.n	8027cd0 <_raise_r+0x4c>
 8027cba:	1c59      	adds	r1, r3, #1
 8027cbc:	d103      	bne.n	8027cc6 <_raise_r+0x42>
 8027cbe:	2316      	movs	r3, #22
 8027cc0:	6003      	str	r3, [r0, #0]
 8027cc2:	2001      	movs	r0, #1
 8027cc4:	e7e7      	b.n	8027c96 <_raise_r+0x12>
 8027cc6:	2400      	movs	r4, #0
 8027cc8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8027ccc:	4628      	mov	r0, r5
 8027cce:	4798      	blx	r3
 8027cd0:	2000      	movs	r0, #0
 8027cd2:	e7e0      	b.n	8027c96 <_raise_r+0x12>

08027cd4 <raise>:
 8027cd4:	4b02      	ldr	r3, [pc, #8]	; (8027ce0 <raise+0xc>)
 8027cd6:	4601      	mov	r1, r0
 8027cd8:	6818      	ldr	r0, [r3, #0]
 8027cda:	f7ff bfd3 	b.w	8027c84 <_raise_r>
 8027cde:	bf00      	nop
 8027ce0:	200000bc 	.word	0x200000bc

08027ce4 <_kill_r>:
 8027ce4:	b538      	push	{r3, r4, r5, lr}
 8027ce6:	4d07      	ldr	r5, [pc, #28]	; (8027d04 <_kill_r+0x20>)
 8027ce8:	2300      	movs	r3, #0
 8027cea:	4604      	mov	r4, r0
 8027cec:	4608      	mov	r0, r1
 8027cee:	4611      	mov	r1, r2
 8027cf0:	602b      	str	r3, [r5, #0]
 8027cf2:	f7d9 fdc3 	bl	800187c <_kill>
 8027cf6:	1c43      	adds	r3, r0, #1
 8027cf8:	d102      	bne.n	8027d00 <_kill_r+0x1c>
 8027cfa:	682b      	ldr	r3, [r5, #0]
 8027cfc:	b103      	cbz	r3, 8027d00 <_kill_r+0x1c>
 8027cfe:	6023      	str	r3, [r4, #0]
 8027d00:	bd38      	pop	{r3, r4, r5, pc}
 8027d02:	bf00      	nop
 8027d04:	2001514c 	.word	0x2001514c

08027d08 <_getpid_r>:
 8027d08:	f7d9 bdb6 	b.w	8001878 <_getpid>

08027d0c <siprintf>:
 8027d0c:	b40e      	push	{r1, r2, r3}
 8027d0e:	b500      	push	{lr}
 8027d10:	b09c      	sub	sp, #112	; 0x70
 8027d12:	ab1d      	add	r3, sp, #116	; 0x74
 8027d14:	9002      	str	r0, [sp, #8]
 8027d16:	9006      	str	r0, [sp, #24]
 8027d18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8027d1c:	4809      	ldr	r0, [pc, #36]	; (8027d44 <siprintf+0x38>)
 8027d1e:	9107      	str	r1, [sp, #28]
 8027d20:	9104      	str	r1, [sp, #16]
 8027d22:	4909      	ldr	r1, [pc, #36]	; (8027d48 <siprintf+0x3c>)
 8027d24:	f853 2b04 	ldr.w	r2, [r3], #4
 8027d28:	9105      	str	r1, [sp, #20]
 8027d2a:	6800      	ldr	r0, [r0, #0]
 8027d2c:	9301      	str	r3, [sp, #4]
 8027d2e:	a902      	add	r1, sp, #8
 8027d30:	f000 fc04 	bl	802853c <_svfiprintf_r>
 8027d34:	9b02      	ldr	r3, [sp, #8]
 8027d36:	2200      	movs	r2, #0
 8027d38:	701a      	strb	r2, [r3, #0]
 8027d3a:	b01c      	add	sp, #112	; 0x70
 8027d3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8027d40:	b003      	add	sp, #12
 8027d42:	4770      	bx	lr
 8027d44:	200000bc 	.word	0x200000bc
 8027d48:	ffff0208 	.word	0xffff0208

08027d4c <strncmp>:
 8027d4c:	b510      	push	{r4, lr}
 8027d4e:	b16a      	cbz	r2, 8027d6c <strncmp+0x20>
 8027d50:	3901      	subs	r1, #1
 8027d52:	1884      	adds	r4, r0, r2
 8027d54:	f810 3b01 	ldrb.w	r3, [r0], #1
 8027d58:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8027d5c:	4293      	cmp	r3, r2
 8027d5e:	d103      	bne.n	8027d68 <strncmp+0x1c>
 8027d60:	42a0      	cmp	r0, r4
 8027d62:	d001      	beq.n	8027d68 <strncmp+0x1c>
 8027d64:	2b00      	cmp	r3, #0
 8027d66:	d1f5      	bne.n	8027d54 <strncmp+0x8>
 8027d68:	1a98      	subs	r0, r3, r2
 8027d6a:	bd10      	pop	{r4, pc}
 8027d6c:	4610      	mov	r0, r2
 8027d6e:	e7fc      	b.n	8027d6a <strncmp+0x1e>

08027d70 <__swbuf_r>:
 8027d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027d72:	460e      	mov	r6, r1
 8027d74:	4614      	mov	r4, r2
 8027d76:	4605      	mov	r5, r0
 8027d78:	b118      	cbz	r0, 8027d82 <__swbuf_r+0x12>
 8027d7a:	6983      	ldr	r3, [r0, #24]
 8027d7c:	b90b      	cbnz	r3, 8027d82 <__swbuf_r+0x12>
 8027d7e:	f000 fa33 	bl	80281e8 <__sinit>
 8027d82:	4b21      	ldr	r3, [pc, #132]	; (8027e08 <__swbuf_r+0x98>)
 8027d84:	429c      	cmp	r4, r3
 8027d86:	d12b      	bne.n	8027de0 <__swbuf_r+0x70>
 8027d88:	686c      	ldr	r4, [r5, #4]
 8027d8a:	69a3      	ldr	r3, [r4, #24]
 8027d8c:	60a3      	str	r3, [r4, #8]
 8027d8e:	89a3      	ldrh	r3, [r4, #12]
 8027d90:	071a      	lsls	r2, r3, #28
 8027d92:	d52f      	bpl.n	8027df4 <__swbuf_r+0x84>
 8027d94:	6923      	ldr	r3, [r4, #16]
 8027d96:	b36b      	cbz	r3, 8027df4 <__swbuf_r+0x84>
 8027d98:	6923      	ldr	r3, [r4, #16]
 8027d9a:	6820      	ldr	r0, [r4, #0]
 8027d9c:	1ac0      	subs	r0, r0, r3
 8027d9e:	6963      	ldr	r3, [r4, #20]
 8027da0:	b2f6      	uxtb	r6, r6
 8027da2:	4283      	cmp	r3, r0
 8027da4:	4637      	mov	r7, r6
 8027da6:	dc04      	bgt.n	8027db2 <__swbuf_r+0x42>
 8027da8:	4621      	mov	r1, r4
 8027daa:	4628      	mov	r0, r5
 8027dac:	f000 f988 	bl	80280c0 <_fflush_r>
 8027db0:	bb30      	cbnz	r0, 8027e00 <__swbuf_r+0x90>
 8027db2:	68a3      	ldr	r3, [r4, #8]
 8027db4:	3b01      	subs	r3, #1
 8027db6:	60a3      	str	r3, [r4, #8]
 8027db8:	6823      	ldr	r3, [r4, #0]
 8027dba:	1c5a      	adds	r2, r3, #1
 8027dbc:	6022      	str	r2, [r4, #0]
 8027dbe:	701e      	strb	r6, [r3, #0]
 8027dc0:	6963      	ldr	r3, [r4, #20]
 8027dc2:	3001      	adds	r0, #1
 8027dc4:	4283      	cmp	r3, r0
 8027dc6:	d004      	beq.n	8027dd2 <__swbuf_r+0x62>
 8027dc8:	89a3      	ldrh	r3, [r4, #12]
 8027dca:	07db      	lsls	r3, r3, #31
 8027dcc:	d506      	bpl.n	8027ddc <__swbuf_r+0x6c>
 8027dce:	2e0a      	cmp	r6, #10
 8027dd0:	d104      	bne.n	8027ddc <__swbuf_r+0x6c>
 8027dd2:	4621      	mov	r1, r4
 8027dd4:	4628      	mov	r0, r5
 8027dd6:	f000 f973 	bl	80280c0 <_fflush_r>
 8027dda:	b988      	cbnz	r0, 8027e00 <__swbuf_r+0x90>
 8027ddc:	4638      	mov	r0, r7
 8027dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027de0:	4b0a      	ldr	r3, [pc, #40]	; (8027e0c <__swbuf_r+0x9c>)
 8027de2:	429c      	cmp	r4, r3
 8027de4:	d101      	bne.n	8027dea <__swbuf_r+0x7a>
 8027de6:	68ac      	ldr	r4, [r5, #8]
 8027de8:	e7cf      	b.n	8027d8a <__swbuf_r+0x1a>
 8027dea:	4b09      	ldr	r3, [pc, #36]	; (8027e10 <__swbuf_r+0xa0>)
 8027dec:	429c      	cmp	r4, r3
 8027dee:	bf08      	it	eq
 8027df0:	68ec      	ldreq	r4, [r5, #12]
 8027df2:	e7ca      	b.n	8027d8a <__swbuf_r+0x1a>
 8027df4:	4621      	mov	r1, r4
 8027df6:	4628      	mov	r0, r5
 8027df8:	f000 f80c 	bl	8027e14 <__swsetup_r>
 8027dfc:	2800      	cmp	r0, #0
 8027dfe:	d0cb      	beq.n	8027d98 <__swbuf_r+0x28>
 8027e00:	f04f 37ff 	mov.w	r7, #4294967295
 8027e04:	e7ea      	b.n	8027ddc <__swbuf_r+0x6c>
 8027e06:	bf00      	nop
 8027e08:	0802ec5c 	.word	0x0802ec5c
 8027e0c:	0802ec7c 	.word	0x0802ec7c
 8027e10:	0802ec3c 	.word	0x0802ec3c

08027e14 <__swsetup_r>:
 8027e14:	4b32      	ldr	r3, [pc, #200]	; (8027ee0 <__swsetup_r+0xcc>)
 8027e16:	b570      	push	{r4, r5, r6, lr}
 8027e18:	681d      	ldr	r5, [r3, #0]
 8027e1a:	4606      	mov	r6, r0
 8027e1c:	460c      	mov	r4, r1
 8027e1e:	b125      	cbz	r5, 8027e2a <__swsetup_r+0x16>
 8027e20:	69ab      	ldr	r3, [r5, #24]
 8027e22:	b913      	cbnz	r3, 8027e2a <__swsetup_r+0x16>
 8027e24:	4628      	mov	r0, r5
 8027e26:	f000 f9df 	bl	80281e8 <__sinit>
 8027e2a:	4b2e      	ldr	r3, [pc, #184]	; (8027ee4 <__swsetup_r+0xd0>)
 8027e2c:	429c      	cmp	r4, r3
 8027e2e:	d10f      	bne.n	8027e50 <__swsetup_r+0x3c>
 8027e30:	686c      	ldr	r4, [r5, #4]
 8027e32:	89a3      	ldrh	r3, [r4, #12]
 8027e34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027e38:	0719      	lsls	r1, r3, #28
 8027e3a:	d42c      	bmi.n	8027e96 <__swsetup_r+0x82>
 8027e3c:	06dd      	lsls	r5, r3, #27
 8027e3e:	d411      	bmi.n	8027e64 <__swsetup_r+0x50>
 8027e40:	2309      	movs	r3, #9
 8027e42:	6033      	str	r3, [r6, #0]
 8027e44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8027e48:	81a3      	strh	r3, [r4, #12]
 8027e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8027e4e:	e03e      	b.n	8027ece <__swsetup_r+0xba>
 8027e50:	4b25      	ldr	r3, [pc, #148]	; (8027ee8 <__swsetup_r+0xd4>)
 8027e52:	429c      	cmp	r4, r3
 8027e54:	d101      	bne.n	8027e5a <__swsetup_r+0x46>
 8027e56:	68ac      	ldr	r4, [r5, #8]
 8027e58:	e7eb      	b.n	8027e32 <__swsetup_r+0x1e>
 8027e5a:	4b24      	ldr	r3, [pc, #144]	; (8027eec <__swsetup_r+0xd8>)
 8027e5c:	429c      	cmp	r4, r3
 8027e5e:	bf08      	it	eq
 8027e60:	68ec      	ldreq	r4, [r5, #12]
 8027e62:	e7e6      	b.n	8027e32 <__swsetup_r+0x1e>
 8027e64:	0758      	lsls	r0, r3, #29
 8027e66:	d512      	bpl.n	8027e8e <__swsetup_r+0x7a>
 8027e68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8027e6a:	b141      	cbz	r1, 8027e7e <__swsetup_r+0x6a>
 8027e6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027e70:	4299      	cmp	r1, r3
 8027e72:	d002      	beq.n	8027e7a <__swsetup_r+0x66>
 8027e74:	4630      	mov	r0, r6
 8027e76:	f7ff fb5d 	bl	8027534 <_free_r>
 8027e7a:	2300      	movs	r3, #0
 8027e7c:	6363      	str	r3, [r4, #52]	; 0x34
 8027e7e:	89a3      	ldrh	r3, [r4, #12]
 8027e80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8027e84:	81a3      	strh	r3, [r4, #12]
 8027e86:	2300      	movs	r3, #0
 8027e88:	6063      	str	r3, [r4, #4]
 8027e8a:	6923      	ldr	r3, [r4, #16]
 8027e8c:	6023      	str	r3, [r4, #0]
 8027e8e:	89a3      	ldrh	r3, [r4, #12]
 8027e90:	f043 0308 	orr.w	r3, r3, #8
 8027e94:	81a3      	strh	r3, [r4, #12]
 8027e96:	6923      	ldr	r3, [r4, #16]
 8027e98:	b94b      	cbnz	r3, 8027eae <__swsetup_r+0x9a>
 8027e9a:	89a3      	ldrh	r3, [r4, #12]
 8027e9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8027ea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8027ea4:	d003      	beq.n	8027eae <__swsetup_r+0x9a>
 8027ea6:	4621      	mov	r1, r4
 8027ea8:	4630      	mov	r0, r6
 8027eaa:	f000 fa5f 	bl	802836c <__smakebuf_r>
 8027eae:	89a0      	ldrh	r0, [r4, #12]
 8027eb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027eb4:	f010 0301 	ands.w	r3, r0, #1
 8027eb8:	d00a      	beq.n	8027ed0 <__swsetup_r+0xbc>
 8027eba:	2300      	movs	r3, #0
 8027ebc:	60a3      	str	r3, [r4, #8]
 8027ebe:	6963      	ldr	r3, [r4, #20]
 8027ec0:	425b      	negs	r3, r3
 8027ec2:	61a3      	str	r3, [r4, #24]
 8027ec4:	6923      	ldr	r3, [r4, #16]
 8027ec6:	b943      	cbnz	r3, 8027eda <__swsetup_r+0xc6>
 8027ec8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8027ecc:	d1ba      	bne.n	8027e44 <__swsetup_r+0x30>
 8027ece:	bd70      	pop	{r4, r5, r6, pc}
 8027ed0:	0781      	lsls	r1, r0, #30
 8027ed2:	bf58      	it	pl
 8027ed4:	6963      	ldrpl	r3, [r4, #20]
 8027ed6:	60a3      	str	r3, [r4, #8]
 8027ed8:	e7f4      	b.n	8027ec4 <__swsetup_r+0xb0>
 8027eda:	2000      	movs	r0, #0
 8027edc:	e7f7      	b.n	8027ece <__swsetup_r+0xba>
 8027ede:	bf00      	nop
 8027ee0:	200000bc 	.word	0x200000bc
 8027ee4:	0802ec5c 	.word	0x0802ec5c
 8027ee8:	0802ec7c 	.word	0x0802ec7c
 8027eec:	0802ec3c 	.word	0x0802ec3c

08027ef0 <__register_exitproc>:
 8027ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027ef4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8027fb0 <__register_exitproc+0xc0>
 8027ef8:	4606      	mov	r6, r0
 8027efa:	f8d8 0000 	ldr.w	r0, [r8]
 8027efe:	461f      	mov	r7, r3
 8027f00:	460d      	mov	r5, r1
 8027f02:	4691      	mov	r9, r2
 8027f04:	f7ff faed 	bl	80274e2 <__retarget_lock_acquire_recursive>
 8027f08:	4b25      	ldr	r3, [pc, #148]	; (8027fa0 <__register_exitproc+0xb0>)
 8027f0a:	681c      	ldr	r4, [r3, #0]
 8027f0c:	b934      	cbnz	r4, 8027f1c <__register_exitproc+0x2c>
 8027f0e:	4c25      	ldr	r4, [pc, #148]	; (8027fa4 <__register_exitproc+0xb4>)
 8027f10:	601c      	str	r4, [r3, #0]
 8027f12:	4b25      	ldr	r3, [pc, #148]	; (8027fa8 <__register_exitproc+0xb8>)
 8027f14:	b113      	cbz	r3, 8027f1c <__register_exitproc+0x2c>
 8027f16:	681b      	ldr	r3, [r3, #0]
 8027f18:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8027f1c:	6863      	ldr	r3, [r4, #4]
 8027f1e:	2b1f      	cmp	r3, #31
 8027f20:	dd07      	ble.n	8027f32 <__register_exitproc+0x42>
 8027f22:	f8d8 0000 	ldr.w	r0, [r8]
 8027f26:	f7ff fade 	bl	80274e6 <__retarget_lock_release_recursive>
 8027f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8027f2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027f32:	b34e      	cbz	r6, 8027f88 <__register_exitproc+0x98>
 8027f34:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8027f38:	b988      	cbnz	r0, 8027f5e <__register_exitproc+0x6e>
 8027f3a:	4b1c      	ldr	r3, [pc, #112]	; (8027fac <__register_exitproc+0xbc>)
 8027f3c:	b923      	cbnz	r3, 8027f48 <__register_exitproc+0x58>
 8027f3e:	f8d8 0000 	ldr.w	r0, [r8]
 8027f42:	f7ff facf 	bl	80274e4 <__retarget_lock_release>
 8027f46:	e7f0      	b.n	8027f2a <__register_exitproc+0x3a>
 8027f48:	f44f 7084 	mov.w	r0, #264	; 0x108
 8027f4c:	f7ff facc 	bl	80274e8 <malloc>
 8027f50:	2800      	cmp	r0, #0
 8027f52:	d0f4      	beq.n	8027f3e <__register_exitproc+0x4e>
 8027f54:	2300      	movs	r3, #0
 8027f56:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8027f5a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8027f5e:	6863      	ldr	r3, [r4, #4]
 8027f60:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8027f64:	2201      	movs	r2, #1
 8027f66:	409a      	lsls	r2, r3
 8027f68:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8027f6c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8027f70:	4313      	orrs	r3, r2
 8027f72:	2e02      	cmp	r6, #2
 8027f74:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8027f78:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8027f7c:	bf02      	ittt	eq
 8027f7e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8027f82:	431a      	orreq	r2, r3
 8027f84:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8027f88:	6863      	ldr	r3, [r4, #4]
 8027f8a:	f8d8 0000 	ldr.w	r0, [r8]
 8027f8e:	1c5a      	adds	r2, r3, #1
 8027f90:	3302      	adds	r3, #2
 8027f92:	6062      	str	r2, [r4, #4]
 8027f94:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8027f98:	f7ff faa5 	bl	80274e6 <__retarget_lock_release_recursive>
 8027f9c:	2000      	movs	r0, #0
 8027f9e:	e7c6      	b.n	8027f2e <__register_exitproc+0x3e>
 8027fa0:	20014e7c 	.word	0x20014e7c
 8027fa4:	20014df0 	.word	0x20014df0
 8027fa8:	0802ec38 	.word	0x0802ec38
 8027fac:	080274e9 	.word	0x080274e9
 8027fb0:	20000120 	.word	0x20000120

08027fb4 <__sflush_r>:
 8027fb4:	898a      	ldrh	r2, [r1, #12]
 8027fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027fba:	4605      	mov	r5, r0
 8027fbc:	0710      	lsls	r0, r2, #28
 8027fbe:	460c      	mov	r4, r1
 8027fc0:	d458      	bmi.n	8028074 <__sflush_r+0xc0>
 8027fc2:	684b      	ldr	r3, [r1, #4]
 8027fc4:	2b00      	cmp	r3, #0
 8027fc6:	dc05      	bgt.n	8027fd4 <__sflush_r+0x20>
 8027fc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8027fca:	2b00      	cmp	r3, #0
 8027fcc:	dc02      	bgt.n	8027fd4 <__sflush_r+0x20>
 8027fce:	2000      	movs	r0, #0
 8027fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027fd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8027fd6:	2e00      	cmp	r6, #0
 8027fd8:	d0f9      	beq.n	8027fce <__sflush_r+0x1a>
 8027fda:	2300      	movs	r3, #0
 8027fdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8027fe0:	682f      	ldr	r7, [r5, #0]
 8027fe2:	602b      	str	r3, [r5, #0]
 8027fe4:	d032      	beq.n	802804c <__sflush_r+0x98>
 8027fe6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8027fe8:	89a3      	ldrh	r3, [r4, #12]
 8027fea:	075a      	lsls	r2, r3, #29
 8027fec:	d505      	bpl.n	8027ffa <__sflush_r+0x46>
 8027fee:	6863      	ldr	r3, [r4, #4]
 8027ff0:	1ac0      	subs	r0, r0, r3
 8027ff2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8027ff4:	b10b      	cbz	r3, 8027ffa <__sflush_r+0x46>
 8027ff6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8027ff8:	1ac0      	subs	r0, r0, r3
 8027ffa:	2300      	movs	r3, #0
 8027ffc:	4602      	mov	r2, r0
 8027ffe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8028000:	6a21      	ldr	r1, [r4, #32]
 8028002:	4628      	mov	r0, r5
 8028004:	47b0      	blx	r6
 8028006:	1c43      	adds	r3, r0, #1
 8028008:	89a3      	ldrh	r3, [r4, #12]
 802800a:	d106      	bne.n	802801a <__sflush_r+0x66>
 802800c:	6829      	ldr	r1, [r5, #0]
 802800e:	291d      	cmp	r1, #29
 8028010:	d82c      	bhi.n	802806c <__sflush_r+0xb8>
 8028012:	4a2a      	ldr	r2, [pc, #168]	; (80280bc <__sflush_r+0x108>)
 8028014:	40ca      	lsrs	r2, r1
 8028016:	07d6      	lsls	r6, r2, #31
 8028018:	d528      	bpl.n	802806c <__sflush_r+0xb8>
 802801a:	2200      	movs	r2, #0
 802801c:	6062      	str	r2, [r4, #4]
 802801e:	04d9      	lsls	r1, r3, #19
 8028020:	6922      	ldr	r2, [r4, #16]
 8028022:	6022      	str	r2, [r4, #0]
 8028024:	d504      	bpl.n	8028030 <__sflush_r+0x7c>
 8028026:	1c42      	adds	r2, r0, #1
 8028028:	d101      	bne.n	802802e <__sflush_r+0x7a>
 802802a:	682b      	ldr	r3, [r5, #0]
 802802c:	b903      	cbnz	r3, 8028030 <__sflush_r+0x7c>
 802802e:	6560      	str	r0, [r4, #84]	; 0x54
 8028030:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8028032:	602f      	str	r7, [r5, #0]
 8028034:	2900      	cmp	r1, #0
 8028036:	d0ca      	beq.n	8027fce <__sflush_r+0x1a>
 8028038:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802803c:	4299      	cmp	r1, r3
 802803e:	d002      	beq.n	8028046 <__sflush_r+0x92>
 8028040:	4628      	mov	r0, r5
 8028042:	f7ff fa77 	bl	8027534 <_free_r>
 8028046:	2000      	movs	r0, #0
 8028048:	6360      	str	r0, [r4, #52]	; 0x34
 802804a:	e7c1      	b.n	8027fd0 <__sflush_r+0x1c>
 802804c:	6a21      	ldr	r1, [r4, #32]
 802804e:	2301      	movs	r3, #1
 8028050:	4628      	mov	r0, r5
 8028052:	47b0      	blx	r6
 8028054:	1c41      	adds	r1, r0, #1
 8028056:	d1c7      	bne.n	8027fe8 <__sflush_r+0x34>
 8028058:	682b      	ldr	r3, [r5, #0]
 802805a:	2b00      	cmp	r3, #0
 802805c:	d0c4      	beq.n	8027fe8 <__sflush_r+0x34>
 802805e:	2b1d      	cmp	r3, #29
 8028060:	d001      	beq.n	8028066 <__sflush_r+0xb2>
 8028062:	2b16      	cmp	r3, #22
 8028064:	d101      	bne.n	802806a <__sflush_r+0xb6>
 8028066:	602f      	str	r7, [r5, #0]
 8028068:	e7b1      	b.n	8027fce <__sflush_r+0x1a>
 802806a:	89a3      	ldrh	r3, [r4, #12]
 802806c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028070:	81a3      	strh	r3, [r4, #12]
 8028072:	e7ad      	b.n	8027fd0 <__sflush_r+0x1c>
 8028074:	690f      	ldr	r7, [r1, #16]
 8028076:	2f00      	cmp	r7, #0
 8028078:	d0a9      	beq.n	8027fce <__sflush_r+0x1a>
 802807a:	0793      	lsls	r3, r2, #30
 802807c:	680e      	ldr	r6, [r1, #0]
 802807e:	bf08      	it	eq
 8028080:	694b      	ldreq	r3, [r1, #20]
 8028082:	600f      	str	r7, [r1, #0]
 8028084:	bf18      	it	ne
 8028086:	2300      	movne	r3, #0
 8028088:	eba6 0807 	sub.w	r8, r6, r7
 802808c:	608b      	str	r3, [r1, #8]
 802808e:	f1b8 0f00 	cmp.w	r8, #0
 8028092:	dd9c      	ble.n	8027fce <__sflush_r+0x1a>
 8028094:	6a21      	ldr	r1, [r4, #32]
 8028096:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8028098:	4643      	mov	r3, r8
 802809a:	463a      	mov	r2, r7
 802809c:	4628      	mov	r0, r5
 802809e:	47b0      	blx	r6
 80280a0:	2800      	cmp	r0, #0
 80280a2:	dc06      	bgt.n	80280b2 <__sflush_r+0xfe>
 80280a4:	89a3      	ldrh	r3, [r4, #12]
 80280a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80280aa:	81a3      	strh	r3, [r4, #12]
 80280ac:	f04f 30ff 	mov.w	r0, #4294967295
 80280b0:	e78e      	b.n	8027fd0 <__sflush_r+0x1c>
 80280b2:	4407      	add	r7, r0
 80280b4:	eba8 0800 	sub.w	r8, r8, r0
 80280b8:	e7e9      	b.n	802808e <__sflush_r+0xda>
 80280ba:	bf00      	nop
 80280bc:	20400001 	.word	0x20400001

080280c0 <_fflush_r>:
 80280c0:	b538      	push	{r3, r4, r5, lr}
 80280c2:	690b      	ldr	r3, [r1, #16]
 80280c4:	4605      	mov	r5, r0
 80280c6:	460c      	mov	r4, r1
 80280c8:	b913      	cbnz	r3, 80280d0 <_fflush_r+0x10>
 80280ca:	2500      	movs	r5, #0
 80280cc:	4628      	mov	r0, r5
 80280ce:	bd38      	pop	{r3, r4, r5, pc}
 80280d0:	b118      	cbz	r0, 80280da <_fflush_r+0x1a>
 80280d2:	6983      	ldr	r3, [r0, #24]
 80280d4:	b90b      	cbnz	r3, 80280da <_fflush_r+0x1a>
 80280d6:	f000 f887 	bl	80281e8 <__sinit>
 80280da:	4b14      	ldr	r3, [pc, #80]	; (802812c <_fflush_r+0x6c>)
 80280dc:	429c      	cmp	r4, r3
 80280de:	d11b      	bne.n	8028118 <_fflush_r+0x58>
 80280e0:	686c      	ldr	r4, [r5, #4]
 80280e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80280e6:	2b00      	cmp	r3, #0
 80280e8:	d0ef      	beq.n	80280ca <_fflush_r+0xa>
 80280ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80280ec:	07d0      	lsls	r0, r2, #31
 80280ee:	d404      	bmi.n	80280fa <_fflush_r+0x3a>
 80280f0:	0599      	lsls	r1, r3, #22
 80280f2:	d402      	bmi.n	80280fa <_fflush_r+0x3a>
 80280f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80280f6:	f7ff f9f4 	bl	80274e2 <__retarget_lock_acquire_recursive>
 80280fa:	4628      	mov	r0, r5
 80280fc:	4621      	mov	r1, r4
 80280fe:	f7ff ff59 	bl	8027fb4 <__sflush_r>
 8028102:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8028104:	07da      	lsls	r2, r3, #31
 8028106:	4605      	mov	r5, r0
 8028108:	d4e0      	bmi.n	80280cc <_fflush_r+0xc>
 802810a:	89a3      	ldrh	r3, [r4, #12]
 802810c:	059b      	lsls	r3, r3, #22
 802810e:	d4dd      	bmi.n	80280cc <_fflush_r+0xc>
 8028110:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8028112:	f7ff f9e8 	bl	80274e6 <__retarget_lock_release_recursive>
 8028116:	e7d9      	b.n	80280cc <_fflush_r+0xc>
 8028118:	4b05      	ldr	r3, [pc, #20]	; (8028130 <_fflush_r+0x70>)
 802811a:	429c      	cmp	r4, r3
 802811c:	d101      	bne.n	8028122 <_fflush_r+0x62>
 802811e:	68ac      	ldr	r4, [r5, #8]
 8028120:	e7df      	b.n	80280e2 <_fflush_r+0x22>
 8028122:	4b04      	ldr	r3, [pc, #16]	; (8028134 <_fflush_r+0x74>)
 8028124:	429c      	cmp	r4, r3
 8028126:	bf08      	it	eq
 8028128:	68ec      	ldreq	r4, [r5, #12]
 802812a:	e7da      	b.n	80280e2 <_fflush_r+0x22>
 802812c:	0802ec5c 	.word	0x0802ec5c
 8028130:	0802ec7c 	.word	0x0802ec7c
 8028134:	0802ec3c 	.word	0x0802ec3c

08028138 <std>:
 8028138:	2300      	movs	r3, #0
 802813a:	b510      	push	{r4, lr}
 802813c:	4604      	mov	r4, r0
 802813e:	e9c0 3300 	strd	r3, r3, [r0]
 8028142:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8028146:	6083      	str	r3, [r0, #8]
 8028148:	8181      	strh	r1, [r0, #12]
 802814a:	6643      	str	r3, [r0, #100]	; 0x64
 802814c:	81c2      	strh	r2, [r0, #14]
 802814e:	6183      	str	r3, [r0, #24]
 8028150:	4619      	mov	r1, r3
 8028152:	2208      	movs	r2, #8
 8028154:	305c      	adds	r0, #92	; 0x5c
 8028156:	f7ff f9e5 	bl	8027524 <memset>
 802815a:	4b05      	ldr	r3, [pc, #20]	; (8028170 <std+0x38>)
 802815c:	6263      	str	r3, [r4, #36]	; 0x24
 802815e:	4b05      	ldr	r3, [pc, #20]	; (8028174 <std+0x3c>)
 8028160:	62a3      	str	r3, [r4, #40]	; 0x28
 8028162:	4b05      	ldr	r3, [pc, #20]	; (8028178 <std+0x40>)
 8028164:	62e3      	str	r3, [r4, #44]	; 0x2c
 8028166:	4b05      	ldr	r3, [pc, #20]	; (802817c <std+0x44>)
 8028168:	6224      	str	r4, [r4, #32]
 802816a:	6323      	str	r3, [r4, #48]	; 0x30
 802816c:	bd10      	pop	{r4, pc}
 802816e:	bf00      	nop
 8028170:	0802873d 	.word	0x0802873d
 8028174:	0802875f 	.word	0x0802875f
 8028178:	08028797 	.word	0x08028797
 802817c:	080287bb 	.word	0x080287bb

08028180 <_cleanup_r>:
 8028180:	4901      	ldr	r1, [pc, #4]	; (8028188 <_cleanup_r+0x8>)
 8028182:	f000 b8af 	b.w	80282e4 <_fwalk_reent>
 8028186:	bf00      	nop
 8028188:	080280c1 	.word	0x080280c1

0802818c <__sfmoreglue>:
 802818c:	b570      	push	{r4, r5, r6, lr}
 802818e:	1e4a      	subs	r2, r1, #1
 8028190:	2568      	movs	r5, #104	; 0x68
 8028192:	4355      	muls	r5, r2
 8028194:	460e      	mov	r6, r1
 8028196:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802819a:	f7ff fa1b 	bl	80275d4 <_malloc_r>
 802819e:	4604      	mov	r4, r0
 80281a0:	b140      	cbz	r0, 80281b4 <__sfmoreglue+0x28>
 80281a2:	2100      	movs	r1, #0
 80281a4:	e9c0 1600 	strd	r1, r6, [r0]
 80281a8:	300c      	adds	r0, #12
 80281aa:	60a0      	str	r0, [r4, #8]
 80281ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80281b0:	f7ff f9b8 	bl	8027524 <memset>
 80281b4:	4620      	mov	r0, r4
 80281b6:	bd70      	pop	{r4, r5, r6, pc}

080281b8 <__sfp_lock_acquire>:
 80281b8:	4801      	ldr	r0, [pc, #4]	; (80281c0 <__sfp_lock_acquire+0x8>)
 80281ba:	f7ff b992 	b.w	80274e2 <__retarget_lock_acquire_recursive>
 80281be:	bf00      	nop
 80281c0:	20015148 	.word	0x20015148

080281c4 <__sfp_lock_release>:
 80281c4:	4801      	ldr	r0, [pc, #4]	; (80281cc <__sfp_lock_release+0x8>)
 80281c6:	f7ff b98e 	b.w	80274e6 <__retarget_lock_release_recursive>
 80281ca:	bf00      	nop
 80281cc:	20015148 	.word	0x20015148

080281d0 <__sinit_lock_acquire>:
 80281d0:	4801      	ldr	r0, [pc, #4]	; (80281d8 <__sinit_lock_acquire+0x8>)
 80281d2:	f7ff b986 	b.w	80274e2 <__retarget_lock_acquire_recursive>
 80281d6:	bf00      	nop
 80281d8:	20015143 	.word	0x20015143

080281dc <__sinit_lock_release>:
 80281dc:	4801      	ldr	r0, [pc, #4]	; (80281e4 <__sinit_lock_release+0x8>)
 80281de:	f7ff b982 	b.w	80274e6 <__retarget_lock_release_recursive>
 80281e2:	bf00      	nop
 80281e4:	20015143 	.word	0x20015143

080281e8 <__sinit>:
 80281e8:	b510      	push	{r4, lr}
 80281ea:	4604      	mov	r4, r0
 80281ec:	f7ff fff0 	bl	80281d0 <__sinit_lock_acquire>
 80281f0:	69a3      	ldr	r3, [r4, #24]
 80281f2:	b11b      	cbz	r3, 80281fc <__sinit+0x14>
 80281f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80281f8:	f7ff bff0 	b.w	80281dc <__sinit_lock_release>
 80281fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8028200:	6523      	str	r3, [r4, #80]	; 0x50
 8028202:	4b13      	ldr	r3, [pc, #76]	; (8028250 <__sinit+0x68>)
 8028204:	4a13      	ldr	r2, [pc, #76]	; (8028254 <__sinit+0x6c>)
 8028206:	681b      	ldr	r3, [r3, #0]
 8028208:	62a2      	str	r2, [r4, #40]	; 0x28
 802820a:	42a3      	cmp	r3, r4
 802820c:	bf04      	itt	eq
 802820e:	2301      	moveq	r3, #1
 8028210:	61a3      	streq	r3, [r4, #24]
 8028212:	4620      	mov	r0, r4
 8028214:	f000 f820 	bl	8028258 <__sfp>
 8028218:	6060      	str	r0, [r4, #4]
 802821a:	4620      	mov	r0, r4
 802821c:	f000 f81c 	bl	8028258 <__sfp>
 8028220:	60a0      	str	r0, [r4, #8]
 8028222:	4620      	mov	r0, r4
 8028224:	f000 f818 	bl	8028258 <__sfp>
 8028228:	2200      	movs	r2, #0
 802822a:	60e0      	str	r0, [r4, #12]
 802822c:	2104      	movs	r1, #4
 802822e:	6860      	ldr	r0, [r4, #4]
 8028230:	f7ff ff82 	bl	8028138 <std>
 8028234:	68a0      	ldr	r0, [r4, #8]
 8028236:	2201      	movs	r2, #1
 8028238:	2109      	movs	r1, #9
 802823a:	f7ff ff7d 	bl	8028138 <std>
 802823e:	68e0      	ldr	r0, [r4, #12]
 8028240:	2202      	movs	r2, #2
 8028242:	2112      	movs	r1, #18
 8028244:	f7ff ff78 	bl	8028138 <std>
 8028248:	2301      	movs	r3, #1
 802824a:	61a3      	str	r3, [r4, #24]
 802824c:	e7d2      	b.n	80281f4 <__sinit+0xc>
 802824e:	bf00      	nop
 8028250:	0802ec00 	.word	0x0802ec00
 8028254:	08028181 	.word	0x08028181

08028258 <__sfp>:
 8028258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802825a:	4607      	mov	r7, r0
 802825c:	f7ff ffac 	bl	80281b8 <__sfp_lock_acquire>
 8028260:	4b1e      	ldr	r3, [pc, #120]	; (80282dc <__sfp+0x84>)
 8028262:	681e      	ldr	r6, [r3, #0]
 8028264:	69b3      	ldr	r3, [r6, #24]
 8028266:	b913      	cbnz	r3, 802826e <__sfp+0x16>
 8028268:	4630      	mov	r0, r6
 802826a:	f7ff ffbd 	bl	80281e8 <__sinit>
 802826e:	3648      	adds	r6, #72	; 0x48
 8028270:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8028274:	3b01      	subs	r3, #1
 8028276:	d503      	bpl.n	8028280 <__sfp+0x28>
 8028278:	6833      	ldr	r3, [r6, #0]
 802827a:	b30b      	cbz	r3, 80282c0 <__sfp+0x68>
 802827c:	6836      	ldr	r6, [r6, #0]
 802827e:	e7f7      	b.n	8028270 <__sfp+0x18>
 8028280:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8028284:	b9d5      	cbnz	r5, 80282bc <__sfp+0x64>
 8028286:	4b16      	ldr	r3, [pc, #88]	; (80282e0 <__sfp+0x88>)
 8028288:	60e3      	str	r3, [r4, #12]
 802828a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802828e:	6665      	str	r5, [r4, #100]	; 0x64
 8028290:	f7ff f926 	bl	80274e0 <__retarget_lock_init_recursive>
 8028294:	f7ff ff96 	bl	80281c4 <__sfp_lock_release>
 8028298:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802829c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80282a0:	6025      	str	r5, [r4, #0]
 80282a2:	61a5      	str	r5, [r4, #24]
 80282a4:	2208      	movs	r2, #8
 80282a6:	4629      	mov	r1, r5
 80282a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80282ac:	f7ff f93a 	bl	8027524 <memset>
 80282b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80282b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80282b8:	4620      	mov	r0, r4
 80282ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80282bc:	3468      	adds	r4, #104	; 0x68
 80282be:	e7d9      	b.n	8028274 <__sfp+0x1c>
 80282c0:	2104      	movs	r1, #4
 80282c2:	4638      	mov	r0, r7
 80282c4:	f7ff ff62 	bl	802818c <__sfmoreglue>
 80282c8:	4604      	mov	r4, r0
 80282ca:	6030      	str	r0, [r6, #0]
 80282cc:	2800      	cmp	r0, #0
 80282ce:	d1d5      	bne.n	802827c <__sfp+0x24>
 80282d0:	f7ff ff78 	bl	80281c4 <__sfp_lock_release>
 80282d4:	230c      	movs	r3, #12
 80282d6:	603b      	str	r3, [r7, #0]
 80282d8:	e7ee      	b.n	80282b8 <__sfp+0x60>
 80282da:	bf00      	nop
 80282dc:	0802ec00 	.word	0x0802ec00
 80282e0:	ffff0001 	.word	0xffff0001

080282e4 <_fwalk_reent>:
 80282e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80282e8:	4606      	mov	r6, r0
 80282ea:	4688      	mov	r8, r1
 80282ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80282f0:	2700      	movs	r7, #0
 80282f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80282f6:	f1b9 0901 	subs.w	r9, r9, #1
 80282fa:	d505      	bpl.n	8028308 <_fwalk_reent+0x24>
 80282fc:	6824      	ldr	r4, [r4, #0]
 80282fe:	2c00      	cmp	r4, #0
 8028300:	d1f7      	bne.n	80282f2 <_fwalk_reent+0xe>
 8028302:	4638      	mov	r0, r7
 8028304:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028308:	89ab      	ldrh	r3, [r5, #12]
 802830a:	2b01      	cmp	r3, #1
 802830c:	d907      	bls.n	802831e <_fwalk_reent+0x3a>
 802830e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8028312:	3301      	adds	r3, #1
 8028314:	d003      	beq.n	802831e <_fwalk_reent+0x3a>
 8028316:	4629      	mov	r1, r5
 8028318:	4630      	mov	r0, r6
 802831a:	47c0      	blx	r8
 802831c:	4307      	orrs	r7, r0
 802831e:	3568      	adds	r5, #104	; 0x68
 8028320:	e7e9      	b.n	80282f6 <_fwalk_reent+0x12>

08028322 <__swhatbuf_r>:
 8028322:	b570      	push	{r4, r5, r6, lr}
 8028324:	460e      	mov	r6, r1
 8028326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802832a:	2900      	cmp	r1, #0
 802832c:	b096      	sub	sp, #88	; 0x58
 802832e:	4614      	mov	r4, r2
 8028330:	461d      	mov	r5, r3
 8028332:	da07      	bge.n	8028344 <__swhatbuf_r+0x22>
 8028334:	2300      	movs	r3, #0
 8028336:	602b      	str	r3, [r5, #0]
 8028338:	89b3      	ldrh	r3, [r6, #12]
 802833a:	061a      	lsls	r2, r3, #24
 802833c:	d410      	bmi.n	8028360 <__swhatbuf_r+0x3e>
 802833e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8028342:	e00e      	b.n	8028362 <__swhatbuf_r+0x40>
 8028344:	466a      	mov	r2, sp
 8028346:	f000 fa5f 	bl	8028808 <_fstat_r>
 802834a:	2800      	cmp	r0, #0
 802834c:	dbf2      	blt.n	8028334 <__swhatbuf_r+0x12>
 802834e:	9a01      	ldr	r2, [sp, #4]
 8028350:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8028354:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8028358:	425a      	negs	r2, r3
 802835a:	415a      	adcs	r2, r3
 802835c:	602a      	str	r2, [r5, #0]
 802835e:	e7ee      	b.n	802833e <__swhatbuf_r+0x1c>
 8028360:	2340      	movs	r3, #64	; 0x40
 8028362:	2000      	movs	r0, #0
 8028364:	6023      	str	r3, [r4, #0]
 8028366:	b016      	add	sp, #88	; 0x58
 8028368:	bd70      	pop	{r4, r5, r6, pc}
	...

0802836c <__smakebuf_r>:
 802836c:	898b      	ldrh	r3, [r1, #12]
 802836e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8028370:	079d      	lsls	r5, r3, #30
 8028372:	4606      	mov	r6, r0
 8028374:	460c      	mov	r4, r1
 8028376:	d507      	bpl.n	8028388 <__smakebuf_r+0x1c>
 8028378:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802837c:	6023      	str	r3, [r4, #0]
 802837e:	6123      	str	r3, [r4, #16]
 8028380:	2301      	movs	r3, #1
 8028382:	6163      	str	r3, [r4, #20]
 8028384:	b002      	add	sp, #8
 8028386:	bd70      	pop	{r4, r5, r6, pc}
 8028388:	ab01      	add	r3, sp, #4
 802838a:	466a      	mov	r2, sp
 802838c:	f7ff ffc9 	bl	8028322 <__swhatbuf_r>
 8028390:	9900      	ldr	r1, [sp, #0]
 8028392:	4605      	mov	r5, r0
 8028394:	4630      	mov	r0, r6
 8028396:	f7ff f91d 	bl	80275d4 <_malloc_r>
 802839a:	b948      	cbnz	r0, 80283b0 <__smakebuf_r+0x44>
 802839c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80283a0:	059a      	lsls	r2, r3, #22
 80283a2:	d4ef      	bmi.n	8028384 <__smakebuf_r+0x18>
 80283a4:	f023 0303 	bic.w	r3, r3, #3
 80283a8:	f043 0302 	orr.w	r3, r3, #2
 80283ac:	81a3      	strh	r3, [r4, #12]
 80283ae:	e7e3      	b.n	8028378 <__smakebuf_r+0xc>
 80283b0:	4b0d      	ldr	r3, [pc, #52]	; (80283e8 <__smakebuf_r+0x7c>)
 80283b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80283b4:	89a3      	ldrh	r3, [r4, #12]
 80283b6:	6020      	str	r0, [r4, #0]
 80283b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80283bc:	81a3      	strh	r3, [r4, #12]
 80283be:	9b00      	ldr	r3, [sp, #0]
 80283c0:	6163      	str	r3, [r4, #20]
 80283c2:	9b01      	ldr	r3, [sp, #4]
 80283c4:	6120      	str	r0, [r4, #16]
 80283c6:	b15b      	cbz	r3, 80283e0 <__smakebuf_r+0x74>
 80283c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80283cc:	4630      	mov	r0, r6
 80283ce:	f000 fa2d 	bl	802882c <_isatty_r>
 80283d2:	b128      	cbz	r0, 80283e0 <__smakebuf_r+0x74>
 80283d4:	89a3      	ldrh	r3, [r4, #12]
 80283d6:	f023 0303 	bic.w	r3, r3, #3
 80283da:	f043 0301 	orr.w	r3, r3, #1
 80283de:	81a3      	strh	r3, [r4, #12]
 80283e0:	89a0      	ldrh	r0, [r4, #12]
 80283e2:	4305      	orrs	r5, r0
 80283e4:	81a5      	strh	r5, [r4, #12]
 80283e6:	e7cd      	b.n	8028384 <__smakebuf_r+0x18>
 80283e8:	08028181 	.word	0x08028181

080283ec <memmove>:
 80283ec:	4288      	cmp	r0, r1
 80283ee:	b510      	push	{r4, lr}
 80283f0:	eb01 0402 	add.w	r4, r1, r2
 80283f4:	d902      	bls.n	80283fc <memmove+0x10>
 80283f6:	4284      	cmp	r4, r0
 80283f8:	4623      	mov	r3, r4
 80283fa:	d807      	bhi.n	802840c <memmove+0x20>
 80283fc:	1e43      	subs	r3, r0, #1
 80283fe:	42a1      	cmp	r1, r4
 8028400:	d008      	beq.n	8028414 <memmove+0x28>
 8028402:	f811 2b01 	ldrb.w	r2, [r1], #1
 8028406:	f803 2f01 	strb.w	r2, [r3, #1]!
 802840a:	e7f8      	b.n	80283fe <memmove+0x12>
 802840c:	4402      	add	r2, r0
 802840e:	4601      	mov	r1, r0
 8028410:	428a      	cmp	r2, r1
 8028412:	d100      	bne.n	8028416 <memmove+0x2a>
 8028414:	bd10      	pop	{r4, pc}
 8028416:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802841a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802841e:	e7f7      	b.n	8028410 <memmove+0x24>

08028420 <__malloc_lock>:
 8028420:	4801      	ldr	r0, [pc, #4]	; (8028428 <__malloc_lock+0x8>)
 8028422:	f7ff b85e 	b.w	80274e2 <__retarget_lock_acquire_recursive>
 8028426:	bf00      	nop
 8028428:	20015144 	.word	0x20015144

0802842c <__malloc_unlock>:
 802842c:	4801      	ldr	r0, [pc, #4]	; (8028434 <__malloc_unlock+0x8>)
 802842e:	f7ff b85a 	b.w	80274e6 <__retarget_lock_release_recursive>
 8028432:	bf00      	nop
 8028434:	20015144 	.word	0x20015144

08028438 <_realloc_r>:
 8028438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802843a:	4607      	mov	r7, r0
 802843c:	4614      	mov	r4, r2
 802843e:	460e      	mov	r6, r1
 8028440:	b921      	cbnz	r1, 802844c <_realloc_r+0x14>
 8028442:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8028446:	4611      	mov	r1, r2
 8028448:	f7ff b8c4 	b.w	80275d4 <_malloc_r>
 802844c:	b922      	cbnz	r2, 8028458 <_realloc_r+0x20>
 802844e:	f7ff f871 	bl	8027534 <_free_r>
 8028452:	4625      	mov	r5, r4
 8028454:	4628      	mov	r0, r5
 8028456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028458:	f000 fa0a 	bl	8028870 <_malloc_usable_size_r>
 802845c:	42a0      	cmp	r0, r4
 802845e:	d20f      	bcs.n	8028480 <_realloc_r+0x48>
 8028460:	4621      	mov	r1, r4
 8028462:	4638      	mov	r0, r7
 8028464:	f7ff f8b6 	bl	80275d4 <_malloc_r>
 8028468:	4605      	mov	r5, r0
 802846a:	2800      	cmp	r0, #0
 802846c:	d0f2      	beq.n	8028454 <_realloc_r+0x1c>
 802846e:	4631      	mov	r1, r6
 8028470:	4622      	mov	r2, r4
 8028472:	f7ff f849 	bl	8027508 <memcpy>
 8028476:	4631      	mov	r1, r6
 8028478:	4638      	mov	r0, r7
 802847a:	f7ff f85b 	bl	8027534 <_free_r>
 802847e:	e7e9      	b.n	8028454 <_realloc_r+0x1c>
 8028480:	4635      	mov	r5, r6
 8028482:	e7e7      	b.n	8028454 <_realloc_r+0x1c>

08028484 <__ssputs_r>:
 8028484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028488:	688e      	ldr	r6, [r1, #8]
 802848a:	429e      	cmp	r6, r3
 802848c:	4682      	mov	sl, r0
 802848e:	460c      	mov	r4, r1
 8028490:	4690      	mov	r8, r2
 8028492:	461f      	mov	r7, r3
 8028494:	d838      	bhi.n	8028508 <__ssputs_r+0x84>
 8028496:	898a      	ldrh	r2, [r1, #12]
 8028498:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802849c:	d032      	beq.n	8028504 <__ssputs_r+0x80>
 802849e:	6825      	ldr	r5, [r4, #0]
 80284a0:	6909      	ldr	r1, [r1, #16]
 80284a2:	eba5 0901 	sub.w	r9, r5, r1
 80284a6:	6965      	ldr	r5, [r4, #20]
 80284a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80284ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80284b0:	3301      	adds	r3, #1
 80284b2:	444b      	add	r3, r9
 80284b4:	106d      	asrs	r5, r5, #1
 80284b6:	429d      	cmp	r5, r3
 80284b8:	bf38      	it	cc
 80284ba:	461d      	movcc	r5, r3
 80284bc:	0553      	lsls	r3, r2, #21
 80284be:	d531      	bpl.n	8028524 <__ssputs_r+0xa0>
 80284c0:	4629      	mov	r1, r5
 80284c2:	f7ff f887 	bl	80275d4 <_malloc_r>
 80284c6:	4606      	mov	r6, r0
 80284c8:	b950      	cbnz	r0, 80284e0 <__ssputs_r+0x5c>
 80284ca:	230c      	movs	r3, #12
 80284cc:	f8ca 3000 	str.w	r3, [sl]
 80284d0:	89a3      	ldrh	r3, [r4, #12]
 80284d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80284d6:	81a3      	strh	r3, [r4, #12]
 80284d8:	f04f 30ff 	mov.w	r0, #4294967295
 80284dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80284e0:	6921      	ldr	r1, [r4, #16]
 80284e2:	464a      	mov	r2, r9
 80284e4:	f7ff f810 	bl	8027508 <memcpy>
 80284e8:	89a3      	ldrh	r3, [r4, #12]
 80284ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80284ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80284f2:	81a3      	strh	r3, [r4, #12]
 80284f4:	6126      	str	r6, [r4, #16]
 80284f6:	6165      	str	r5, [r4, #20]
 80284f8:	444e      	add	r6, r9
 80284fa:	eba5 0509 	sub.w	r5, r5, r9
 80284fe:	6026      	str	r6, [r4, #0]
 8028500:	60a5      	str	r5, [r4, #8]
 8028502:	463e      	mov	r6, r7
 8028504:	42be      	cmp	r6, r7
 8028506:	d900      	bls.n	802850a <__ssputs_r+0x86>
 8028508:	463e      	mov	r6, r7
 802850a:	4632      	mov	r2, r6
 802850c:	6820      	ldr	r0, [r4, #0]
 802850e:	4641      	mov	r1, r8
 8028510:	f7ff ff6c 	bl	80283ec <memmove>
 8028514:	68a3      	ldr	r3, [r4, #8]
 8028516:	6822      	ldr	r2, [r4, #0]
 8028518:	1b9b      	subs	r3, r3, r6
 802851a:	4432      	add	r2, r6
 802851c:	60a3      	str	r3, [r4, #8]
 802851e:	6022      	str	r2, [r4, #0]
 8028520:	2000      	movs	r0, #0
 8028522:	e7db      	b.n	80284dc <__ssputs_r+0x58>
 8028524:	462a      	mov	r2, r5
 8028526:	f7ff ff87 	bl	8028438 <_realloc_r>
 802852a:	4606      	mov	r6, r0
 802852c:	2800      	cmp	r0, #0
 802852e:	d1e1      	bne.n	80284f4 <__ssputs_r+0x70>
 8028530:	6921      	ldr	r1, [r4, #16]
 8028532:	4650      	mov	r0, sl
 8028534:	f7fe fffe 	bl	8027534 <_free_r>
 8028538:	e7c7      	b.n	80284ca <__ssputs_r+0x46>
	...

0802853c <_svfiprintf_r>:
 802853c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028540:	4698      	mov	r8, r3
 8028542:	898b      	ldrh	r3, [r1, #12]
 8028544:	061b      	lsls	r3, r3, #24
 8028546:	b09d      	sub	sp, #116	; 0x74
 8028548:	4607      	mov	r7, r0
 802854a:	460d      	mov	r5, r1
 802854c:	4614      	mov	r4, r2
 802854e:	d50e      	bpl.n	802856e <_svfiprintf_r+0x32>
 8028550:	690b      	ldr	r3, [r1, #16]
 8028552:	b963      	cbnz	r3, 802856e <_svfiprintf_r+0x32>
 8028554:	2140      	movs	r1, #64	; 0x40
 8028556:	f7ff f83d 	bl	80275d4 <_malloc_r>
 802855a:	6028      	str	r0, [r5, #0]
 802855c:	6128      	str	r0, [r5, #16]
 802855e:	b920      	cbnz	r0, 802856a <_svfiprintf_r+0x2e>
 8028560:	230c      	movs	r3, #12
 8028562:	603b      	str	r3, [r7, #0]
 8028564:	f04f 30ff 	mov.w	r0, #4294967295
 8028568:	e0d1      	b.n	802870e <_svfiprintf_r+0x1d2>
 802856a:	2340      	movs	r3, #64	; 0x40
 802856c:	616b      	str	r3, [r5, #20]
 802856e:	2300      	movs	r3, #0
 8028570:	9309      	str	r3, [sp, #36]	; 0x24
 8028572:	2320      	movs	r3, #32
 8028574:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8028578:	f8cd 800c 	str.w	r8, [sp, #12]
 802857c:	2330      	movs	r3, #48	; 0x30
 802857e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8028728 <_svfiprintf_r+0x1ec>
 8028582:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8028586:	f04f 0901 	mov.w	r9, #1
 802858a:	4623      	mov	r3, r4
 802858c:	469a      	mov	sl, r3
 802858e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8028592:	b10a      	cbz	r2, 8028598 <_svfiprintf_r+0x5c>
 8028594:	2a25      	cmp	r2, #37	; 0x25
 8028596:	d1f9      	bne.n	802858c <_svfiprintf_r+0x50>
 8028598:	ebba 0b04 	subs.w	fp, sl, r4
 802859c:	d00b      	beq.n	80285b6 <_svfiprintf_r+0x7a>
 802859e:	465b      	mov	r3, fp
 80285a0:	4622      	mov	r2, r4
 80285a2:	4629      	mov	r1, r5
 80285a4:	4638      	mov	r0, r7
 80285a6:	f7ff ff6d 	bl	8028484 <__ssputs_r>
 80285aa:	3001      	adds	r0, #1
 80285ac:	f000 80aa 	beq.w	8028704 <_svfiprintf_r+0x1c8>
 80285b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80285b2:	445a      	add	r2, fp
 80285b4:	9209      	str	r2, [sp, #36]	; 0x24
 80285b6:	f89a 3000 	ldrb.w	r3, [sl]
 80285ba:	2b00      	cmp	r3, #0
 80285bc:	f000 80a2 	beq.w	8028704 <_svfiprintf_r+0x1c8>
 80285c0:	2300      	movs	r3, #0
 80285c2:	f04f 32ff 	mov.w	r2, #4294967295
 80285c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80285ca:	f10a 0a01 	add.w	sl, sl, #1
 80285ce:	9304      	str	r3, [sp, #16]
 80285d0:	9307      	str	r3, [sp, #28]
 80285d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80285d6:	931a      	str	r3, [sp, #104]	; 0x68
 80285d8:	4654      	mov	r4, sl
 80285da:	2205      	movs	r2, #5
 80285dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80285e0:	4851      	ldr	r0, [pc, #324]	; (8028728 <_svfiprintf_r+0x1ec>)
 80285e2:	f7d7 fe15 	bl	8000210 <memchr>
 80285e6:	9a04      	ldr	r2, [sp, #16]
 80285e8:	b9d8      	cbnz	r0, 8028622 <_svfiprintf_r+0xe6>
 80285ea:	06d0      	lsls	r0, r2, #27
 80285ec:	bf44      	itt	mi
 80285ee:	2320      	movmi	r3, #32
 80285f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80285f4:	0711      	lsls	r1, r2, #28
 80285f6:	bf44      	itt	mi
 80285f8:	232b      	movmi	r3, #43	; 0x2b
 80285fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80285fe:	f89a 3000 	ldrb.w	r3, [sl]
 8028602:	2b2a      	cmp	r3, #42	; 0x2a
 8028604:	d015      	beq.n	8028632 <_svfiprintf_r+0xf6>
 8028606:	9a07      	ldr	r2, [sp, #28]
 8028608:	4654      	mov	r4, sl
 802860a:	2000      	movs	r0, #0
 802860c:	f04f 0c0a 	mov.w	ip, #10
 8028610:	4621      	mov	r1, r4
 8028612:	f811 3b01 	ldrb.w	r3, [r1], #1
 8028616:	3b30      	subs	r3, #48	; 0x30
 8028618:	2b09      	cmp	r3, #9
 802861a:	d94e      	bls.n	80286ba <_svfiprintf_r+0x17e>
 802861c:	b1b0      	cbz	r0, 802864c <_svfiprintf_r+0x110>
 802861e:	9207      	str	r2, [sp, #28]
 8028620:	e014      	b.n	802864c <_svfiprintf_r+0x110>
 8028622:	eba0 0308 	sub.w	r3, r0, r8
 8028626:	fa09 f303 	lsl.w	r3, r9, r3
 802862a:	4313      	orrs	r3, r2
 802862c:	9304      	str	r3, [sp, #16]
 802862e:	46a2      	mov	sl, r4
 8028630:	e7d2      	b.n	80285d8 <_svfiprintf_r+0x9c>
 8028632:	9b03      	ldr	r3, [sp, #12]
 8028634:	1d19      	adds	r1, r3, #4
 8028636:	681b      	ldr	r3, [r3, #0]
 8028638:	9103      	str	r1, [sp, #12]
 802863a:	2b00      	cmp	r3, #0
 802863c:	bfbb      	ittet	lt
 802863e:	425b      	neglt	r3, r3
 8028640:	f042 0202 	orrlt.w	r2, r2, #2
 8028644:	9307      	strge	r3, [sp, #28]
 8028646:	9307      	strlt	r3, [sp, #28]
 8028648:	bfb8      	it	lt
 802864a:	9204      	strlt	r2, [sp, #16]
 802864c:	7823      	ldrb	r3, [r4, #0]
 802864e:	2b2e      	cmp	r3, #46	; 0x2e
 8028650:	d10c      	bne.n	802866c <_svfiprintf_r+0x130>
 8028652:	7863      	ldrb	r3, [r4, #1]
 8028654:	2b2a      	cmp	r3, #42	; 0x2a
 8028656:	d135      	bne.n	80286c4 <_svfiprintf_r+0x188>
 8028658:	9b03      	ldr	r3, [sp, #12]
 802865a:	1d1a      	adds	r2, r3, #4
 802865c:	681b      	ldr	r3, [r3, #0]
 802865e:	9203      	str	r2, [sp, #12]
 8028660:	2b00      	cmp	r3, #0
 8028662:	bfb8      	it	lt
 8028664:	f04f 33ff 	movlt.w	r3, #4294967295
 8028668:	3402      	adds	r4, #2
 802866a:	9305      	str	r3, [sp, #20]
 802866c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8028738 <_svfiprintf_r+0x1fc>
 8028670:	7821      	ldrb	r1, [r4, #0]
 8028672:	2203      	movs	r2, #3
 8028674:	4650      	mov	r0, sl
 8028676:	f7d7 fdcb 	bl	8000210 <memchr>
 802867a:	b140      	cbz	r0, 802868e <_svfiprintf_r+0x152>
 802867c:	2340      	movs	r3, #64	; 0x40
 802867e:	eba0 000a 	sub.w	r0, r0, sl
 8028682:	fa03 f000 	lsl.w	r0, r3, r0
 8028686:	9b04      	ldr	r3, [sp, #16]
 8028688:	4303      	orrs	r3, r0
 802868a:	3401      	adds	r4, #1
 802868c:	9304      	str	r3, [sp, #16]
 802868e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028692:	4826      	ldr	r0, [pc, #152]	; (802872c <_svfiprintf_r+0x1f0>)
 8028694:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8028698:	2206      	movs	r2, #6
 802869a:	f7d7 fdb9 	bl	8000210 <memchr>
 802869e:	2800      	cmp	r0, #0
 80286a0:	d038      	beq.n	8028714 <_svfiprintf_r+0x1d8>
 80286a2:	4b23      	ldr	r3, [pc, #140]	; (8028730 <_svfiprintf_r+0x1f4>)
 80286a4:	bb1b      	cbnz	r3, 80286ee <_svfiprintf_r+0x1b2>
 80286a6:	9b03      	ldr	r3, [sp, #12]
 80286a8:	3307      	adds	r3, #7
 80286aa:	f023 0307 	bic.w	r3, r3, #7
 80286ae:	3308      	adds	r3, #8
 80286b0:	9303      	str	r3, [sp, #12]
 80286b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80286b4:	4433      	add	r3, r6
 80286b6:	9309      	str	r3, [sp, #36]	; 0x24
 80286b8:	e767      	b.n	802858a <_svfiprintf_r+0x4e>
 80286ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80286be:	460c      	mov	r4, r1
 80286c0:	2001      	movs	r0, #1
 80286c2:	e7a5      	b.n	8028610 <_svfiprintf_r+0xd4>
 80286c4:	2300      	movs	r3, #0
 80286c6:	3401      	adds	r4, #1
 80286c8:	9305      	str	r3, [sp, #20]
 80286ca:	4619      	mov	r1, r3
 80286cc:	f04f 0c0a 	mov.w	ip, #10
 80286d0:	4620      	mov	r0, r4
 80286d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80286d6:	3a30      	subs	r2, #48	; 0x30
 80286d8:	2a09      	cmp	r2, #9
 80286da:	d903      	bls.n	80286e4 <_svfiprintf_r+0x1a8>
 80286dc:	2b00      	cmp	r3, #0
 80286de:	d0c5      	beq.n	802866c <_svfiprintf_r+0x130>
 80286e0:	9105      	str	r1, [sp, #20]
 80286e2:	e7c3      	b.n	802866c <_svfiprintf_r+0x130>
 80286e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80286e8:	4604      	mov	r4, r0
 80286ea:	2301      	movs	r3, #1
 80286ec:	e7f0      	b.n	80286d0 <_svfiprintf_r+0x194>
 80286ee:	ab03      	add	r3, sp, #12
 80286f0:	9300      	str	r3, [sp, #0]
 80286f2:	462a      	mov	r2, r5
 80286f4:	4b0f      	ldr	r3, [pc, #60]	; (8028734 <_svfiprintf_r+0x1f8>)
 80286f6:	a904      	add	r1, sp, #16
 80286f8:	4638      	mov	r0, r7
 80286fa:	f3af 8000 	nop.w
 80286fe:	1c42      	adds	r2, r0, #1
 8028700:	4606      	mov	r6, r0
 8028702:	d1d6      	bne.n	80286b2 <_svfiprintf_r+0x176>
 8028704:	89ab      	ldrh	r3, [r5, #12]
 8028706:	065b      	lsls	r3, r3, #25
 8028708:	f53f af2c 	bmi.w	8028564 <_svfiprintf_r+0x28>
 802870c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802870e:	b01d      	add	sp, #116	; 0x74
 8028710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028714:	ab03      	add	r3, sp, #12
 8028716:	9300      	str	r3, [sp, #0]
 8028718:	462a      	mov	r2, r5
 802871a:	4b06      	ldr	r3, [pc, #24]	; (8028734 <_svfiprintf_r+0x1f8>)
 802871c:	a904      	add	r1, sp, #16
 802871e:	4638      	mov	r0, r7
 8028720:	f7ff f97a 	bl	8027a18 <_printf_i>
 8028724:	e7eb      	b.n	80286fe <_svfiprintf_r+0x1c2>
 8028726:	bf00      	nop
 8028728:	0802ec04 	.word	0x0802ec04
 802872c:	0802ec0e 	.word	0x0802ec0e
 8028730:	00000000 	.word	0x00000000
 8028734:	08028485 	.word	0x08028485
 8028738:	0802ec0a 	.word	0x0802ec0a

0802873c <__sread>:
 802873c:	b510      	push	{r4, lr}
 802873e:	460c      	mov	r4, r1
 8028740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028744:	f000 f89c 	bl	8028880 <_read_r>
 8028748:	2800      	cmp	r0, #0
 802874a:	bfab      	itete	ge
 802874c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802874e:	89a3      	ldrhlt	r3, [r4, #12]
 8028750:	181b      	addge	r3, r3, r0
 8028752:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8028756:	bfac      	ite	ge
 8028758:	6563      	strge	r3, [r4, #84]	; 0x54
 802875a:	81a3      	strhlt	r3, [r4, #12]
 802875c:	bd10      	pop	{r4, pc}

0802875e <__swrite>:
 802875e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028762:	461f      	mov	r7, r3
 8028764:	898b      	ldrh	r3, [r1, #12]
 8028766:	05db      	lsls	r3, r3, #23
 8028768:	4605      	mov	r5, r0
 802876a:	460c      	mov	r4, r1
 802876c:	4616      	mov	r6, r2
 802876e:	d505      	bpl.n	802877c <__swrite+0x1e>
 8028770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028774:	2302      	movs	r3, #2
 8028776:	2200      	movs	r2, #0
 8028778:	f000 f868 	bl	802884c <_lseek_r>
 802877c:	89a3      	ldrh	r3, [r4, #12]
 802877e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8028782:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8028786:	81a3      	strh	r3, [r4, #12]
 8028788:	4632      	mov	r2, r6
 802878a:	463b      	mov	r3, r7
 802878c:	4628      	mov	r0, r5
 802878e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8028792:	f000 b817 	b.w	80287c4 <_write_r>

08028796 <__sseek>:
 8028796:	b510      	push	{r4, lr}
 8028798:	460c      	mov	r4, r1
 802879a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802879e:	f000 f855 	bl	802884c <_lseek_r>
 80287a2:	1c43      	adds	r3, r0, #1
 80287a4:	89a3      	ldrh	r3, [r4, #12]
 80287a6:	bf15      	itete	ne
 80287a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80287aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80287ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80287b2:	81a3      	strheq	r3, [r4, #12]
 80287b4:	bf18      	it	ne
 80287b6:	81a3      	strhne	r3, [r4, #12]
 80287b8:	bd10      	pop	{r4, pc}

080287ba <__sclose>:
 80287ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80287be:	f000 b813 	b.w	80287e8 <_close_r>
	...

080287c4 <_write_r>:
 80287c4:	b538      	push	{r3, r4, r5, lr}
 80287c6:	4d07      	ldr	r5, [pc, #28]	; (80287e4 <_write_r+0x20>)
 80287c8:	4604      	mov	r4, r0
 80287ca:	4608      	mov	r0, r1
 80287cc:	4611      	mov	r1, r2
 80287ce:	2200      	movs	r2, #0
 80287d0:	602a      	str	r2, [r5, #0]
 80287d2:	461a      	mov	r2, r3
 80287d4:	f7d9 f86d 	bl	80018b2 <_write>
 80287d8:	1c43      	adds	r3, r0, #1
 80287da:	d102      	bne.n	80287e2 <_write_r+0x1e>
 80287dc:	682b      	ldr	r3, [r5, #0]
 80287de:	b103      	cbz	r3, 80287e2 <_write_r+0x1e>
 80287e0:	6023      	str	r3, [r4, #0]
 80287e2:	bd38      	pop	{r3, r4, r5, pc}
 80287e4:	2001514c 	.word	0x2001514c

080287e8 <_close_r>:
 80287e8:	b538      	push	{r3, r4, r5, lr}
 80287ea:	4d06      	ldr	r5, [pc, #24]	; (8028804 <_close_r+0x1c>)
 80287ec:	2300      	movs	r3, #0
 80287ee:	4604      	mov	r4, r0
 80287f0:	4608      	mov	r0, r1
 80287f2:	602b      	str	r3, [r5, #0]
 80287f4:	f7d9 f86a 	bl	80018cc <_close>
 80287f8:	1c43      	adds	r3, r0, #1
 80287fa:	d102      	bne.n	8028802 <_close_r+0x1a>
 80287fc:	682b      	ldr	r3, [r5, #0]
 80287fe:	b103      	cbz	r3, 8028802 <_close_r+0x1a>
 8028800:	6023      	str	r3, [r4, #0]
 8028802:	bd38      	pop	{r3, r4, r5, pc}
 8028804:	2001514c 	.word	0x2001514c

08028808 <_fstat_r>:
 8028808:	b538      	push	{r3, r4, r5, lr}
 802880a:	4d07      	ldr	r5, [pc, #28]	; (8028828 <_fstat_r+0x20>)
 802880c:	2300      	movs	r3, #0
 802880e:	4604      	mov	r4, r0
 8028810:	4608      	mov	r0, r1
 8028812:	4611      	mov	r1, r2
 8028814:	602b      	str	r3, [r5, #0]
 8028816:	f7d9 f85c 	bl	80018d2 <_fstat>
 802881a:	1c43      	adds	r3, r0, #1
 802881c:	d102      	bne.n	8028824 <_fstat_r+0x1c>
 802881e:	682b      	ldr	r3, [r5, #0]
 8028820:	b103      	cbz	r3, 8028824 <_fstat_r+0x1c>
 8028822:	6023      	str	r3, [r4, #0]
 8028824:	bd38      	pop	{r3, r4, r5, pc}
 8028826:	bf00      	nop
 8028828:	2001514c 	.word	0x2001514c

0802882c <_isatty_r>:
 802882c:	b538      	push	{r3, r4, r5, lr}
 802882e:	4d06      	ldr	r5, [pc, #24]	; (8028848 <_isatty_r+0x1c>)
 8028830:	2300      	movs	r3, #0
 8028832:	4604      	mov	r4, r0
 8028834:	4608      	mov	r0, r1
 8028836:	602b      	str	r3, [r5, #0]
 8028838:	f7d9 f850 	bl	80018dc <_isatty>
 802883c:	1c43      	adds	r3, r0, #1
 802883e:	d102      	bne.n	8028846 <_isatty_r+0x1a>
 8028840:	682b      	ldr	r3, [r5, #0]
 8028842:	b103      	cbz	r3, 8028846 <_isatty_r+0x1a>
 8028844:	6023      	str	r3, [r4, #0]
 8028846:	bd38      	pop	{r3, r4, r5, pc}
 8028848:	2001514c 	.word	0x2001514c

0802884c <_lseek_r>:
 802884c:	b538      	push	{r3, r4, r5, lr}
 802884e:	4d07      	ldr	r5, [pc, #28]	; (802886c <_lseek_r+0x20>)
 8028850:	4604      	mov	r4, r0
 8028852:	4608      	mov	r0, r1
 8028854:	4611      	mov	r1, r2
 8028856:	2200      	movs	r2, #0
 8028858:	602a      	str	r2, [r5, #0]
 802885a:	461a      	mov	r2, r3
 802885c:	f7d9 f840 	bl	80018e0 <_lseek>
 8028860:	1c43      	adds	r3, r0, #1
 8028862:	d102      	bne.n	802886a <_lseek_r+0x1e>
 8028864:	682b      	ldr	r3, [r5, #0]
 8028866:	b103      	cbz	r3, 802886a <_lseek_r+0x1e>
 8028868:	6023      	str	r3, [r4, #0]
 802886a:	bd38      	pop	{r3, r4, r5, pc}
 802886c:	2001514c 	.word	0x2001514c

08028870 <_malloc_usable_size_r>:
 8028870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8028874:	1f18      	subs	r0, r3, #4
 8028876:	2b00      	cmp	r3, #0
 8028878:	bfbc      	itt	lt
 802887a:	580b      	ldrlt	r3, [r1, r0]
 802887c:	18c0      	addlt	r0, r0, r3
 802887e:	4770      	bx	lr

08028880 <_read_r>:
 8028880:	b538      	push	{r3, r4, r5, lr}
 8028882:	4d07      	ldr	r5, [pc, #28]	; (80288a0 <_read_r+0x20>)
 8028884:	4604      	mov	r4, r0
 8028886:	4608      	mov	r0, r1
 8028888:	4611      	mov	r1, r2
 802888a:	2200      	movs	r2, #0
 802888c:	602a      	str	r2, [r5, #0]
 802888e:	461a      	mov	r2, r3
 8028890:	f7d9 f802 	bl	8001898 <_read>
 8028894:	1c43      	adds	r3, r0, #1
 8028896:	d102      	bne.n	802889e <_read_r+0x1e>
 8028898:	682b      	ldr	r3, [r5, #0]
 802889a:	b103      	cbz	r3, 802889e <_read_r+0x1e>
 802889c:	6023      	str	r3, [r4, #0]
 802889e:	bd38      	pop	{r3, r4, r5, pc}
 80288a0:	2001514c 	.word	0x2001514c

080288a4 <_init>:
 80288a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80288a6:	bf00      	nop
 80288a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80288aa:	bc08      	pop	{r3}
 80288ac:	469e      	mov	lr, r3
 80288ae:	4770      	bx	lr

080288b0 <_fini>:
 80288b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80288b2:	bf00      	nop
 80288b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80288b6:	bc08      	pop	{r3}
 80288b8:	469e      	mov	lr, r3
 80288ba:	4770      	bx	lr
