
STM32746G_DISCOVERY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f328  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007424  0800f4f8  0800f4f8  0001f4f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801691c  0801691c  0002691c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08016924  08016924  00026924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08016928  08016928  00026928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000ac  20000000  0801692c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00010cd8  200000ac  080169d8  000300ac  2**2
                  ALLOC
  8 ._user_heap_stack 00000664  20010d84  080169d8  00030d84  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY
 10 .TxDescripSection 00000080  2004c080  2004c080  0003c080  2**2
                  ALLOC
 11 .debug_line   00051e2c  00000000  00000000  000300dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_info   00061787  00000000  00000000  00081f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000c4f8  00000000  00000000  000e368f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002418  00000000  00000000  000efb88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001211e7  00000000  00000000  000f1fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003c30  00000000  00000000  00213188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    00029c0a  00000000  00000000  00216db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00038173  00000000  00000000  002409c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00278b35  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079dc  00000000  00000000  00278b88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .RxDecripSection 00000080  2004c000  2004c000  0003c000  2**2
                  ALLOC
 22 .RxarraySection 000017d0  2004c100  2004c100  0003c100  2**0
                  ALLOC
 23 .TxarraySection 000017d0  2004d8d0  2004d8d0  0003d8d0  2**0
                  ALLOC

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000ac 	.word	0x200000ac
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f4e0 	.word	0x0800f4e0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b0 	.word	0x200000b0
 800020c:	0800f4e0 	.word	0x0800f4e0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80005a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80005ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80005ae:	e003      	b.n	80005b8 <LoopCopyDataInit>

080005b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80005b0:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80005b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80005b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80005b6:	3104      	adds	r1, #4

080005b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005b8:	480b      	ldr	r0, [pc, #44]	; (80005e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80005ba:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80005bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80005be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80005c0:	d3f6      	bcc.n	80005b0 <CopyDataInit>
  ldr  r2, =_sbss
 80005c2:	4a0b      	ldr	r2, [pc, #44]	; (80005f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80005c4:	e002      	b.n	80005cc <LoopFillZerobss>

080005c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80005c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80005c8:	f842 3b04 	str.w	r3, [r2], #4

080005cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80005cc:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80005ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80005d0:	d3f9      	bcc.n	80005c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80005d2:	f001 fa83 	bl	8001adc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005d6:	f00d fe91 	bl	800e2fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005da:	f000 fb69 	bl	8000cb0 <main>
  bx  lr    
 80005de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80005e0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80005e4:	0801692c 	.word	0x0801692c
  ldr  r0, =_sdata
 80005e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80005ec:	200000ac 	.word	0x200000ac
  ldr  r2, =_sbss
 80005f0:	200000ac 	.word	0x200000ac
  ldr  r3, = _ebss
 80005f4:	20010d84 	.word	0x20010d84

080005f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005f8:	e7fe      	b.n	80005f8 <ADC_IRQHandler>
	...

080005fc <_sbrk>:




caddr_t _sbrk(int incr)
{
 80005fc:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end,*min_stack_ptr;

	if (heap_end == 0)
 80005fe:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <_sbrk+0x34>)
{
 8000600:	4602      	mov	r2, r0
	if (heap_end == 0)
 8000602:	6819      	ldr	r1, [r3, #0]
 8000604:	b909      	cbnz	r1, 800060a <_sbrk+0xe>
		heap_end = &end;
 8000606:	490b      	ldr	r1, [pc, #44]	; (8000634 <_sbrk+0x38>)
 8000608:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;

#ifdef FreeRTOS
	/* Use the NVIC offset register to locate the main stack pointer. */
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 800060a:	490b      	ldr	r1, [pc, #44]	; (8000638 <_sbrk+0x3c>)
	prev_heap_end = heap_end;
 800060c:	6818      	ldr	r0, [r3, #0]
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 800060e:	6809      	ldr	r1, [r1, #0]
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;

	if (heap_end + incr > min_stack_ptr)
 8000610:	4402      	add	r2, r0
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 8000612:	6809      	ldr	r1, [r1, #0]
	min_stack_ptr -= MAX_STACK_SIZE;
 8000614:	f5a1 5100 	sub.w	r1, r1, #8192	; 0x2000
	if (heap_end + incr > min_stack_ptr)
 8000618:	428a      	cmp	r2, r1
 800061a:	d906      	bls.n	800062a <_sbrk+0x2e>
	if (heap_end + incr > stack_ptr)
#endif
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800061c:	f00d fe68 	bl	800e2f0 <__errno>
 8000620:	230c      	movs	r3, #12
 8000622:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8000624:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8000628:	bd08      	pop	{r3, pc}
	heap_end += incr;
 800062a:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 800062c:	e7fc      	b.n	8000628 <_sbrk+0x2c>
 800062e:	bf00      	nop
 8000630:	200000c8 	.word	0x200000c8
 8000634:	20010d88 	.word	0x20010d88
 8000638:	e000ed08 	.word	0xe000ed08

0800063c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800063c:	2001      	movs	r0, #1
 800063e:	4770      	bx	lr

08000640 <_kill>:

int _kill(int pid, int sig)
{
 8000640:	b508      	push	{r3, lr}
	errno = EINVAL;
 8000642:	f00d fe55 	bl	800e2f0 <__errno>
 8000646:	2316      	movs	r3, #22
 8000648:	6003      	str	r3, [r0, #0]
	return -1;
}
 800064a:	f04f 30ff 	mov.w	r0, #4294967295
 800064e:	bd08      	pop	{r3, pc}

08000650 <_exit>:

void _exit (int status)
{
 8000650:	b508      	push	{r3, lr}
	errno = EINVAL;
 8000652:	f00d fe4d 	bl	800e2f0 <__errno>
 8000656:	2316      	movs	r3, #22
 8000658:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}
 800065a:	e7fe      	b.n	800065a <_exit+0xa>

0800065c <_write>:
}

int _write(int file, char *ptr, int len)
{
 800065c:	b570      	push	{r4, r5, r6, lr}
 800065e:	460e      	mov	r6, r1
 8000660:	4614      	mov	r4, r2
	int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000662:	2500      	movs	r5, #0
 8000664:	42a5      	cmp	r5, r4
 8000666:	db01      	blt.n	800066c <_write+0x10>
		{
		   __io_putchar( *ptr++ );
		}
	return len;
}
 8000668:	4620      	mov	r0, r4
 800066a:	bd70      	pop	{r4, r5, r6, pc}
		   __io_putchar( *ptr++ );
 800066c:	5d70      	ldrb	r0, [r6, r5]
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 800066e:	3501      	adds	r5, #1
		   __io_putchar( *ptr++ );
 8000670:	f000 fd3c 	bl	80010ec <__io_putchar>
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000674:	e7f6      	b.n	8000664 <_write+0x8>

08000676 <_close>:

int _close(int file)
{
	return -1;
}
 8000676:	f04f 30ff 	mov.w	r0, #4294967295
 800067a:	4770      	bx	lr

0800067c <_fstat>:

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800067c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8000680:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8000682:	604b      	str	r3, [r1, #4]
}
 8000684:	4770      	bx	lr

08000686 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000686:	2001      	movs	r0, #1
 8000688:	4770      	bx	lr

0800068a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800068a:	2000      	movs	r0, #0
 800068c:	4770      	bx	lr

0800068e <_read>:

int _read(int file, char *ptr, int len)
{
 800068e:	b570      	push	{r4, r5, r6, lr}
 8000690:	460e      	mov	r6, r1
 8000692:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000694:	2500      	movs	r5, #0
 8000696:	42a5      	cmp	r5, r4
 8000698:	db01      	blt.n	800069e <_read+0x10>
	{
	  *ptr++ = __io_getchar();
	}

   return len;
}
 800069a:	4620      	mov	r0, r4
 800069c:	bd70      	pop	{r4, r5, r6, pc}
	  *ptr++ = __io_getchar();
 800069e:	f3af 8000 	nop.w
 80006a2:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006a4:	3501      	adds	r5, #1
 80006a6:	e7f6      	b.n	8000696 <_read+0x8>

080006a8 <User_notification>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
void User_notification(struct netif *netif) 
{
 80006a8:	b510      	push	{r4, lr}
  if (netif_is_up(netif))
 80006aa:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
{
 80006ae:	b086      	sub	sp, #24
 80006b0:	4c0c      	ldr	r4, [pc, #48]	; (80006e4 <User_notification+0x3c>)
  if (netif_is_up(netif))
 80006b2:	f013 0f01 	tst.w	r3, #1
 80006b6:	d00e      	beq.n	80006d6 <User_notification+0x2e>
  {
    uint8_t iptxt[20];
    sprintf((char *)iptxt, "%s", ip4addr_ntoa((const ip4_addr_t *)&netif->ip_addr));
 80006b8:	3004      	adds	r0, #4
 80006ba:	f008 fb73 	bl	8008da4 <ip4addr_ntoa>
 80006be:	4601      	mov	r1, r0
 80006c0:	a801      	add	r0, sp, #4
 80006c2:	f00d ff31 	bl	800e528 <strcpy>
    LCD_UsrLog ("Static IP address: %s\n", iptxt);
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <User_notification+0x40>)
 80006c8:	a901      	add	r1, sp, #4
 80006ca:	4808      	ldr	r0, [pc, #32]	; (80006ec <User_notification+0x44>)
 80006cc:	6023      	str	r3, [r4, #0]
 80006ce:	f00d fe5d 	bl	800e38c <iprintf>
  }
  else
  {  
    LCD_UsrLog ("The network cable is not connected \n");
  } 
}
 80006d2:	b006      	add	sp, #24
 80006d4:	bd10      	pop	{r4, pc}
    LCD_UsrLog ("The network cable is not connected \n");
 80006d6:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <User_notification+0x40>)
 80006d8:	4805      	ldr	r0, [pc, #20]	; (80006f0 <User_notification+0x48>)
 80006da:	6023      	str	r3, [r4, #0]
 80006dc:	f00d fedc 	bl	800e498 <puts>
}
 80006e0:	e7f7      	b.n	80006d2 <User_notification+0x2a>
 80006e2:	bf00      	nop
 80006e4:	2000a6cc 	.word	0x2000a6cc
 80006e8:	ff000080 	.word	0xff000080
 80006ec:	080133a0 	.word	0x080133a0
 80006f0:	080133b7 	.word	0x080133b7

080006f4 <low_level_output>:
  *       strange results. You might consider waiting for space in the DMA queue
  *       to become available since the stack doesn't retry to send a packet
  *       dropped because of memory failure (except for the TCP timers).
  */
static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80006f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(EthHandle.TxDesc->Buffer1Addr);
 80006f8:	4a24      	ldr	r2, [pc, #144]	; (800078c <low_level_output+0x98>)
  uint32_t bufferoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t payloadoffset = 0;

  DmaTxDesc = EthHandle.TxDesc;
  bufferoffset = 0;
 80006fa:	f04f 0800 	mov.w	r8, #0
{
 80006fe:	460c      	mov	r4, r1
    /* Get bytes in current lwIP buffer */
    byteslefttocopy = q->len;
    payloadoffset = 0;
    
    /* Check if the length of data to copy is bigger than Tx buffer size*/
    while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8000700:	f240 5bf4 	movw	fp, #1524	; 0x5f4
  uint8_t *buffer = (uint8_t *)(EthHandle.TxDesc->Buffer1Addr);
 8000704:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  uint32_t framelength = 0;
 8000706:	4647      	mov	r7, r8
 8000708:	4691      	mov	r9, r2
  uint8_t *buffer = (uint8_t *)(EthHandle.TxDesc->Buffer1Addr);
 800070a:	68b3      	ldr	r3, [r6, #8]
  for(q = p; q != NULL; q = q->next)
 800070c:	b92c      	cbnz	r4, 800071a <low_level_output+0x26>
    bufferoffset = bufferoffset + byteslefttocopy;
    framelength = framelength + byteslefttocopy;
  }
 
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&EthHandle, framelength);
 800070e:	4639      	mov	r1, r7
 8000710:	481e      	ldr	r0, [pc, #120]	; (800078c <low_level_output+0x98>)
 8000712:	f001 fded 	bl	80022f0 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8000716:	4620      	mov	r0, r4
 8000718:	e004      	b.n	8000724 <low_level_output+0x30>
    if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800071a:	6832      	ldr	r2, [r6, #0]
 800071c:	2a00      	cmp	r2, #0
 800071e:	da11      	bge.n	8000744 <low_level_output+0x50>
      errval = ERR_USE;
 8000720:	f06f 0007 	mvn.w	r0, #7
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((EthHandle.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8000724:	f8d9 3000 	ldr.w	r3, [r9]
 8000728:	f241 0214 	movw	r2, #4116	; 0x1014
 800072c:	5899      	ldr	r1, [r3, r2]
 800072e:	0689      	lsls	r1, r1, #26
 8000730:	d505      	bpl.n	800073e <low_level_output+0x4a>
  {
    /* Clear TUS ETHERNET DMA flag */
    EthHandle.Instance->DMASR = ETH_DMASR_TUS;
 8000732:	2120      	movs	r1, #32
 8000734:	5099      	str	r1, [r3, r2]
    
    /* Resume DMA transmission*/
    EthHandle.Instance->DMATPDR = 0;
 8000736:	f241 0204 	movw	r2, #4100	; 0x1004
 800073a:	2100      	movs	r1, #0
 800073c:	5099      	str	r1, [r3, r2]
  }
  return errval;
}
 800073e:	b003      	add	sp, #12
 8000740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    byteslefttocopy = q->len;
 8000744:	8962      	ldrh	r2, [r4, #10]
    while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8000746:	4645      	mov	r5, r8
    payloadoffset = 0;
 8000748:	f04f 0a00 	mov.w	sl, #0
    while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800074c:	eb05 0802 	add.w	r8, r5, r2
 8000750:	6861      	ldr	r1, [r4, #4]
 8000752:	1958      	adds	r0, r3, r5
 8000754:	45d8      	cmp	r8, fp
 8000756:	4451      	add	r1, sl
 8000758:	d808      	bhi.n	800076c <low_level_output+0x78>
    memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800075a:	e9cd 2300 	strd	r2, r3, [sp]
 800075e:	f00d fdff 	bl	800e360 <memcpy>
    framelength = framelength + byteslefttocopy;
 8000762:	9a00      	ldr	r2, [sp, #0]
  for(q = p; q != NULL; q = q->next)
 8000764:	6824      	ldr	r4, [r4, #0]
    framelength = framelength + byteslefttocopy;
 8000766:	4417      	add	r7, r2
  for(q = p; q != NULL; q = q->next)
 8000768:	9b01      	ldr	r3, [sp, #4]
 800076a:	e7cf      	b.n	800070c <low_level_output+0x18>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800076c:	ebab 0505 	sub.w	r5, fp, r5
 8000770:	462a      	mov	r2, r5
 8000772:	f00d fdf5 	bl	800e360 <memcpy>
      DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8000776:	68f6      	ldr	r6, [r6, #12]
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8000778:	6833      	ldr	r3, [r6, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	dbd0      	blt.n	8000720 <low_level_output+0x2c>
      payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800077e:	44aa      	add	sl, r5
      framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8000780:	442f      	add	r7, r5
      buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8000782:	68b3      	ldr	r3, [r6, #8]
      byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8000784:	f2a8 52f4 	subw	r2, r8, #1524	; 0x5f4
      bufferoffset = 0;
 8000788:	2500      	movs	r5, #0
 800078a:	e7df      	b.n	800074c <low_level_output+0x58>
 800078c:	2000699c 	.word	0x2000699c

08000790 <ethernetif_input>:
  * the appropriate input function is called.
  *
  * @param netif the lwip network interface structure for this ethernetif
  */
void ethernetif_input( void const * argument )
{
 8000790:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000794:	4680      	mov	r8, r0
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
  
  for( ;; )
  {
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 8000796:	4c3a      	ldr	r4, [pc, #232]	; (8000880 <ethernetif_input+0xf0>)
 8000798:	f04f 31ff 	mov.w	r1, #4294967295
 800079c:	6820      	ldr	r0, [r4, #0]
 800079e:	f004 fc9f 	bl	80050e0 <osSemaphoreWait>
 80007a2:	2800      	cmp	r0, #0
 80007a4:	d1f8      	bne.n	8000798 <ethernetif_input+0x8>
  if(HAL_ETH_GetReceivedFrame_IT(&EthHandle) != HAL_OK)
 80007a6:	4e37      	ldr	r6, [pc, #220]	; (8000884 <ethernetif_input+0xf4>)
    {
      do
      {
        LOCK_TCPIP_CORE();
 80007a8:	4837      	ldr	r0, [pc, #220]	; (8000888 <ethernetif_input+0xf8>)
 80007aa:	f00d fd77 	bl	800e29c <sys_mutex_lock>
  if(HAL_ETH_GetReceivedFrame_IT(&EthHandle) != HAL_OK)
 80007ae:	4630      	mov	r0, r6
 80007b0:	f001 fe10 	bl	80023d4 <HAL_ETH_GetReceivedFrame_IT>
 80007b4:	4605      	mov	r5, r0
 80007b6:	b130      	cbz	r0, 80007c6 <ethernetif_input+0x36>
    return NULL;
 80007b8:	2400      	movs	r4, #0
          {
            pbuf_free(p);
          }
        }

        UNLOCK_TCPIP_CORE();
 80007ba:	4833      	ldr	r0, [pc, #204]	; (8000888 <ethernetif_input+0xf8>)
 80007bc:	f00d fd73 	bl	800e2a6 <sys_mutex_unlock>

      }while(p!=NULL);
 80007c0:	2c00      	cmp	r4, #0
 80007c2:	d1f0      	bne.n	80007a6 <ethernetif_input+0x16>
 80007c4:	e7e7      	b.n	8000796 <ethernetif_input+0x6>
  len = EthHandle.RxFrameInfos.length;
 80007c6:	8fb1      	ldrh	r1, [r6, #60]	; 0x3c
  if (len > 0)
 80007c8:	bb01      	cbnz	r1, 800080c <ethernetif_input+0x7c>
  struct pbuf *p = NULL, *q = NULL;
 80007ca:	2400      	movs	r4, #0
  dmarxdesc = EthHandle.RxFrameInfos.FSRxDesc;
 80007cc:	6b33      	ldr	r3, [r6, #48]	; 0x30
  for (i=0; i< EthHandle.RxFrameInfos.SegCount; i++)
 80007ce:	2200      	movs	r2, #0
 80007d0:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 80007d2:	4282      	cmp	r2, r0
 80007d4:	d14d      	bne.n	8000872 <ethernetif_input+0xe2>
  EthHandle.RxFrameInfos.SegCount =0;
 80007d6:	2300      	movs	r3, #0
  if ((EthHandle.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 80007d8:	f241 0214 	movw	r2, #4116	; 0x1014
  EthHandle.RxFrameInfos.SegCount =0;
 80007dc:	63b3      	str	r3, [r6, #56]	; 0x38
  if ((EthHandle.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 80007de:	6833      	ldr	r3, [r6, #0]
 80007e0:	5899      	ldr	r1, [r3, r2]
 80007e2:	0609      	lsls	r1, r1, #24
 80007e4:	d505      	bpl.n	80007f2 <ethernetif_input+0x62>
    EthHandle.Instance->DMASR = ETH_DMASR_RBUS;
 80007e6:	2180      	movs	r1, #128	; 0x80
 80007e8:	5099      	str	r1, [r3, r2]
    EthHandle.Instance->DMARPDR = 0;
 80007ea:	f241 0208 	movw	r2, #4104	; 0x1008
 80007ee:	2100      	movs	r1, #0
 80007f0:	5099      	str	r1, [r3, r2]
        if (p != NULL)
 80007f2:	2c00      	cmp	r4, #0
 80007f4:	d0e0      	beq.n	80007b8 <ethernetif_input+0x28>
          if (netif->input( p, netif) != ERR_OK )
 80007f6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80007fa:	4641      	mov	r1, r8
 80007fc:	4620      	mov	r0, r4
 80007fe:	4798      	blx	r3
 8000800:	2800      	cmp	r0, #0
 8000802:	d0da      	beq.n	80007ba <ethernetif_input+0x2a>
            pbuf_free(p);
 8000804:	4620      	mov	r0, r4
 8000806:	f009 fc0f 	bl	800a028 <pbuf_free>
 800080a:	e7d6      	b.n	80007ba <ethernetif_input+0x2a>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800080c:	f44f 72c1 	mov.w	r2, #386	; 0x182
  buffer = (uint8_t *)EthHandle.RxFrameInfos.buffer;
 8000810:	6c37      	ldr	r7, [r6, #64]	; 0x40
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8000812:	f009 fc71 	bl	800a0f8 <pbuf_alloc>
  if (p != NULL)
 8000816:	4604      	mov	r4, r0
 8000818:	2800      	cmp	r0, #0
 800081a:	d0d6      	beq.n	80007ca <ethernetif_input+0x3a>
  buffer = (uint8_t *)EthHandle.RxFrameInfos.buffer;
 800081c:	46b9      	mov	r9, r7
    dmarxdesc = EthHandle.RxFrameInfos.FSRxDesc;
 800081e:	f8d6 a030 	ldr.w	sl, [r6, #48]	; 0x30
 8000822:	4607      	mov	r7, r0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8000824:	f240 5bf4 	movw	fp, #1524	; 0x5f4
      byteslefttocopy = q->len;
 8000828:	f8b7 e00a 	ldrh.w	lr, [r7, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800082c:	46ac      	mov	ip, r5
      payloadoffset = 0;
 800082e:	2300      	movs	r3, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8000830:	eb0c 050e 	add.w	r5, ip, lr
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	eb09 010c 	add.w	r1, r9, ip
 800083a:	455d      	cmp	r5, fp
 800083c:	4418      	add	r0, r3
 800083e:	d806      	bhi.n	800084e <ethernetif_input+0xbe>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8000840:	4672      	mov	r2, lr
 8000842:	f00d fd8d 	bl	800e360 <memcpy>
    for(q = p; q != NULL; q = q->next)
 8000846:	683f      	ldr	r7, [r7, #0]
 8000848:	2f00      	cmp	r7, #0
 800084a:	d1ed      	bne.n	8000828 <ethernetif_input+0x98>
 800084c:	e7be      	b.n	80007cc <ethernetif_input+0x3c>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800084e:	ebab 020c 	sub.w	r2, fp, ip
 8000852:	9301      	str	r3, [sp, #4]
 8000854:	9200      	str	r2, [sp, #0]
 8000856:	f00d fd83 	bl	800e360 <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800085a:	f8da a00c 	ldr.w	sl, [sl, #12]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800085e:	f2a5 5ef4 	subw	lr, r5, #1524	; 0x5f4
        bufferoffset = 0;
 8000862:	f04f 0c00 	mov.w	ip, #0
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8000866:	f8da 9008 	ldr.w	r9, [sl, #8]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800086a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800086e:	4413      	add	r3, r2
        bufferoffset = 0;
 8000870:	e7de      	b.n	8000830 <ethernetif_input+0xa0>
    dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8000872:	6819      	ldr	r1, [r3, #0]
  for (i=0; i< EthHandle.RxFrameInfos.SegCount; i++)
 8000874:	3201      	adds	r2, #1
    dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8000876:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800087a:	6019      	str	r1, [r3, #0]
    dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800087c:	68db      	ldr	r3, [r3, #12]
  for (i=0; i< EthHandle.RxFrameInfos.SegCount; i++)
 800087e:	e7a8      	b.n	80007d2 <ethernetif_input+0x42>
 8000880:	200000cc 	.word	0x200000cc
 8000884:	2000699c 	.word	0x2000699c
 8000888:	2000a7f4 	.word	0x2000a7f4

0800088c <HAL_ETH_MspInit>:
{
 800088c:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	4c2e      	ldr	r4, [pc, #184]	; (8000948 <HAL_ETH_MspInit+0xbc>)
{
 8000890:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitStructure.Pull = GPIO_NOPULL; 
 8000892:	2500      	movs	r5, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000894:	482d      	ldr	r0, [pc, #180]	; (800094c <HAL_ETH_MspInit+0xc0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	6b23      	ldr	r3, [r4, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000898:	a907      	add	r1, sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	f043 0301 	orr.w	r3, r3, #1
 800089e:	6323      	str	r3, [r4, #48]	; 0x30
 80008a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	9301      	str	r3, [sp, #4]
 80008a8:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80008ac:	f043 0304 	orr.w	r3, r3, #4
 80008b0:	6323      	str	r3, [r4, #48]	; 0x30
 80008b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80008b4:	f003 0304 	and.w	r3, r3, #4
 80008b8:	9302      	str	r3, [sp, #8]
 80008ba:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80008be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008c2:	6323      	str	r3, [r4, #48]	; 0x30
 80008c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80008c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ca:	9303      	str	r3, [sp, #12]
 80008cc:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80008ce:	2303      	movs	r3, #3
 80008d0:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL; 
 80008d2:	2302      	movs	r3, #2
 80008d4:	e9cd 3508 	strd	r3, r5, [sp, #32]
  GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
 80008d8:	230b      	movs	r3, #11
 80008da:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 80008dc:	2386      	movs	r3, #134	; 0x86
 80008de:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80008e0:	f001 ffa4 	bl	800282c <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 80008e4:	2332      	movs	r3, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80008e6:	a907      	add	r1, sp, #28
 80008e8:	4819      	ldr	r0, [pc, #100]	; (8000950 <HAL_ETH_MspInit+0xc4>)
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 80008ea:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80008ec:	f001 ff9e 	bl	800282c <HAL_GPIO_Init>
  GPIO_InitStructure.Pin =  GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_13 | GPIO_PIN_14;
 80008f0:	f646 0304 	movw	r3, #26628	; 0x6804
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80008f4:	a907      	add	r1, sp, #28
 80008f6:	4817      	ldr	r0, [pc, #92]	; (8000954 <HAL_ETH_MspInit+0xc8>)
  GPIO_InitStructure.Pin =  GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_13 | GPIO_PIN_14;
 80008f8:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80008fa:	f001 ff97 	bl	800282c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(ETH_IRQn, 0x7, 0);
 80008fe:	462a      	mov	r2, r5
 8000900:	2107      	movs	r1, #7
 8000902:	203d      	movs	r0, #61	; 0x3d
 8000904:	f001 f952 	bl	8001bac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000908:	203d      	movs	r0, #61	; 0x3d
 800090a:	f001 f981 	bl	8001c10 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_ETH_CLK_ENABLE();
 800090e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000910:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000914:	6323      	str	r3, [r4, #48]	; 0x30
 8000916:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800091c:	9304      	str	r3, [sp, #16]
 800091e:	9b04      	ldr	r3, [sp, #16]
 8000920:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000922:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000926:	6323      	str	r3, [r4, #48]	; 0x30
 8000928:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800092a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800092e:	9305      	str	r3, [sp, #20]
 8000930:	9b05      	ldr	r3, [sp, #20]
 8000932:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000934:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000938:	6323      	str	r3, [r4, #48]	; 0x30
 800093a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800093c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000940:	9306      	str	r3, [sp, #24]
 8000942:	9b06      	ldr	r3, [sp, #24]
}
 8000944:	b00d      	add	sp, #52	; 0x34
 8000946:	bd30      	pop	{r4, r5, pc}
 8000948:	40023800 	.word	0x40023800
 800094c:	40020000 	.word	0x40020000
 8000950:	40020800 	.word	0x40020800
 8000954:	40021800 	.word	0x40021800

08000958 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(s_xSemaphore);
 8000958:	4b01      	ldr	r3, [pc, #4]	; (8000960 <HAL_ETH_RxCpltCallback+0x8>)
 800095a:	6818      	ldr	r0, [r3, #0]
 800095c:	f004 bbe6 	b.w	800512c <osSemaphoreRelease>
 8000960:	200000cc 	.word	0x200000cc

08000964 <ethernetif_init>:
  * @return ERR_OK if the loopif is initialized
  *         ERR_MEM if private data couldn't be allocated
  *         any other err_t on error
  */
err_t ethernetif_init(struct netif *netif)
{
 8000964:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8000966:	4604      	mov	r4, r0
{
 8000968:	b089      	sub	sp, #36	; 0x24
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800096a:	b930      	cbnz	r0, 800097a <ethernetif_init+0x16>
 800096c:	4b30      	ldr	r3, [pc, #192]	; (8000a30 <ethernetif_init+0xcc>)
 800096e:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8000972:	4930      	ldr	r1, [pc, #192]	; (8000a34 <ethernetif_init+0xd0>)
 8000974:	4830      	ldr	r0, [pc, #192]	; (8000a38 <ethernetif_init+0xd4>)
 8000976:	f00d fd09 	bl	800e38c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800097a:	f247 4373 	movw	r3, #29811	; 0x7473
  EthHandle.Init.Speed = ETH_SPEED_100M;
 800097e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  netif->name[0] = IFNAME0;
 8000982:	8663      	strh	r3, [r4, #50]	; 0x32

  /* We directly use etharp_output() here to save a function call.
   * You can instead declare your own function an call etharp_output()
   * from it if you have to do some checks before sending (e.g. if link
   * is available...) */
  netif->output = etharp_output;
 8000984:	4b2d      	ldr	r3, [pc, #180]	; (8000a3c <ethernetif_init+0xd8>)
 8000986:	6163      	str	r3, [r4, #20]
  netif->linkoutput = low_level_output;
 8000988:	4b2d      	ldr	r3, [pc, #180]	; (8000a40 <ethernetif_init+0xdc>)
 800098a:	61a3      	str	r3, [r4, #24]
  uint8_t macaddress[6]= { MAC_ADDR0, MAC_ADDR1, MAC_ADDR2, MAC_ADDR3, MAC_ADDR4, MAC_ADDR5 };
 800098c:	4b2d      	ldr	r3, [pc, #180]	; (8000a44 <ethernetif_init+0xe0>)
 800098e:	6818      	ldr	r0, [r3, #0]
 8000990:	889b      	ldrh	r3, [r3, #4]
 8000992:	9001      	str	r0, [sp, #4]
 8000994:	f8ad 3008 	strh.w	r3, [sp, #8]
  EthHandle.Instance = ETH;  
 8000998:	482b      	ldr	r0, [pc, #172]	; (8000a48 <ethernetif_init+0xe4>)
 800099a:	4b2c      	ldr	r3, [pc, #176]	; (8000a4c <ethernetif_init+0xe8>)
 800099c:	6003      	str	r3, [r0, #0]
  EthHandle.Init.MACAddr = macaddress;
 800099e:	ab01      	add	r3, sp, #4
 80009a0:	6143      	str	r3, [r0, #20]
  EthHandle.Init.Speed = ETH_SPEED_100M;
 80009a2:	2301      	movs	r3, #1
 80009a4:	e9c0 3201 	strd	r3, r2, [r0, #4]
  EthHandle.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80009a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
  EthHandle.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80009ac:	6183      	str	r3, [r0, #24]
  EthHandle.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80009ae:	2300      	movs	r3, #0
  EthHandle.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80009b0:	60c2      	str	r2, [r0, #12]
  EthHandle.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80009b2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  EthHandle.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80009b6:	61c3      	str	r3, [r0, #28]
  EthHandle.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80009b8:	6202      	str	r2, [r0, #32]
  EthHandle.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80009ba:	8203      	strh	r3, [r0, #16]
  if (HAL_ETH_Init(&EthHandle) == HAL_OK)
 80009bc:	f001 fdfc 	bl	80025b8 <HAL_ETH_Init>
 80009c0:	b928      	cbnz	r0, 80009ce <ethernetif_init+0x6a>
    netif->flags |= NETIF_FLAG_LINK_UP;
 80009c2:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80009c6:	f043 0304 	orr.w	r3, r3, #4
 80009ca:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  HAL_ETH_DMATxDescListInit(&EthHandle, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80009ce:	2304      	movs	r3, #4
 80009d0:	4a1f      	ldr	r2, [pc, #124]	; (8000a50 <ethernetif_init+0xec>)
 80009d2:	4920      	ldr	r1, [pc, #128]	; (8000a54 <ethernetif_init+0xf0>)
  netif->hwaddr[2] =  MAC_ADDR2;
 80009d4:	2700      	movs	r7, #0
  HAL_ETH_DMATxDescListInit(&EthHandle, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80009d6:	481c      	ldr	r0, [pc, #112]	; (8000a48 <ethernetif_init+0xe4>)
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80009d8:	ad03      	add	r5, sp, #12
  HAL_ETH_DMATxDescListInit(&EthHandle, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80009da:	f001 fc13 	bl	8002204 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&EthHandle, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80009de:	4a1e      	ldr	r2, [pc, #120]	; (8000a58 <ethernetif_init+0xf4>)
 80009e0:	2304      	movs	r3, #4
 80009e2:	491e      	ldr	r1, [pc, #120]	; (8000a5c <ethernetif_init+0xf8>)
 80009e4:	4818      	ldr	r0, [pc, #96]	; (8000a48 <ethernetif_init+0xe4>)
 80009e6:	f001 fc49 	bl	800227c <HAL_ETH_DMARxDescListInit>
  netif->hwaddr[2] =  MAC_ADDR2;
 80009ea:	4b1d      	ldr	r3, [pc, #116]	; (8000a60 <ethernetif_init+0xfc>)
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 80009ec:	2101      	movs	r1, #1
 80009ee:	4668      	mov	r0, sp
  osSemaphoreDef(SEM);
 80009f0:	9700      	str	r7, [sp, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80009f2:	4e1c      	ldr	r6, [pc, #112]	; (8000a64 <ethernetif_init+0x100>)
  netif->hwaddr[2] =  MAC_ADDR2;
 80009f4:	e9c4 370a 	strd	r3, r7, [r4, #40]	; 0x28
  netif->hwaddr_len = ETHARP_HWADDR_LEN;
 80009f8:	2306      	movs	r3, #6
 80009fa:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80009fe:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8000a02:	f043 030a 	orr.w	r3, r3, #10
 8000a06:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 8000a0a:	f004 fb53 	bl	80050b4 <osSemaphoreCreate>
 8000a0e:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <ethernetif_init+0x104>)
 8000a10:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8000a12:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000a14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a16:	6833      	ldr	r3, [r6, #0]
  osThreadCreate (osThread(EthIf), netif);
 8000a18:	4621      	mov	r1, r4
 8000a1a:	a803      	add	r0, sp, #12
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8000a1c:	602b      	str	r3, [r5, #0]
  osThreadCreate (osThread(EthIf), netif);
 8000a1e:	f004 fad5 	bl	8004fcc <osThreadCreate>
  HAL_ETH_Start(&EthHandle);
 8000a22:	4809      	ldr	r0, [pc, #36]	; (8000a48 <ethernetif_init+0xe4>)
 8000a24:	f001 fec4 	bl	80027b0 <HAL_ETH_Start>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 8000a28:	4638      	mov	r0, r7
 8000a2a:	b009      	add	sp, #36	; 0x24
 8000a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	080133e1 	.word	0x080133e1
 8000a34:	08014197 	.word	0x08014197
 8000a38:	0801342c 	.word	0x0801342c
 8000a3c:	0800869d 	.word	0x0800869d
 8000a40:	080006f5 	.word	0x080006f5
 8000a44:	0800f4f8 	.word	0x0800f4f8
 8000a48:	2000699c 	.word	0x2000699c
 8000a4c:	40028000 	.word	0x40028000
 8000a50:	2004d8d0 	.word	0x2004d8d0
 8000a54:	2004c080 	.word	0x2004c080
 8000a58:	2004c100 	.word	0x2004c100
 8000a5c:	2004c000 	.word	0x2004c000
 8000a60:	000205dc 	.word	0x000205dc
 8000a64:	0800f500 	.word	0x0800f500
 8000a68:	200000cc 	.word	0x200000cc

08000a6c <sys_now>:
  * @param  None
  * @retval Time
  */
u32_t sys_now(void)
{
  return HAL_GetTick();
 8000a6c:	f001 b874 	b.w	8001b58 <HAL_GetTick>

08000a70 <http_server_netconn_thread>:
{ 
  struct netconn *conn, *newconn;
  err_t err, accept_err;
  
  /* Create a new TCP connection handle */
  conn = netconn_new(NETCONN_TCP);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2010      	movs	r0, #16
{ 
 8000a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  conn = netconn_new(NETCONN_TCP);
 8000a78:	4611      	mov	r1, r2
{ 
 8000a7a:	b08f      	sub	sp, #60	; 0x3c
  conn = netconn_new(NETCONN_TCP);
 8000a7c:	f004 fe76 	bl	800576c <netconn_new_with_proto_and_callback>
  
  if (conn!= NULL)
 8000a80:	4605      	mov	r5, r0
 8000a82:	2800      	cmp	r0, #0
 8000a84:	f000 8089 	beq.w	8000b9a <http_server_netconn_thread+0x12a>
  {
    /* Bind to port 8080 (HTTP) with default IP address */
    err = netconn_bind(conn, NULL, 8080);
 8000a88:	f641 7290 	movw	r2, #8080	; 0x1f90
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	f004 ff17 	bl	80058c0 <netconn_bind>
    
    if (err == ERR_OK)
 8000a92:	2800      	cmp	r0, #0
 8000a94:	f040 8081 	bne.w	8000b9a <http_server_netconn_thread+0x12a>
  netconn_getaddr(conn, &ipaddr, &port, 0);
 8000a98:	4e41      	ldr	r6, [pc, #260]	; (8000ba0 <http_server_netconn_thread+0x130>)
    {
      /* Put the connection into LISTEN state */
      netconn_listen(conn);
 8000a9a:	21ff      	movs	r1, #255	; 0xff
  char resp1[] = "Led is on";
 8000a9c:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8000bb4 <http_server_netconn_thread+0x144>
      netconn_listen(conn);
 8000aa0:	4628      	mov	r0, r5
  netconn_getaddr(conn, &ipaddr, &port, 0);
 8000aa2:	f106 0a04 	add.w	sl, r6, #4
      netconn_listen(conn);
 8000aa6:	f004 ff31 	bl	800590c <netconn_listen_with_backlog>
  
      while(1) 
      {
        /* accept any incoming connection */
        accept_err = netconn_accept(conn, &newconn);
 8000aaa:	a904      	add	r1, sp, #16
 8000aac:	4628      	mov	r0, r5
 8000aae:	f004 ffd5 	bl	8005a5c <netconn_accept>
        if(accept_err == ERR_OK)
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2800      	cmp	r0, #0
 8000ab6:	d1f8      	bne.n	8000aaa <http_server_netconn_thread+0x3a>
  char resp1[] = "Led is on";
 8000ab8:	f8d9 0000 	ldr.w	r0, [r9]
 8000abc:	aa08      	add	r2, sp, #32
 8000abe:	f8d9 1004 	ldr.w	r1, [r9, #4]
  char resp2[] = "Led is off";
 8000ac2:	4f38      	ldr	r7, [pc, #224]	; (8000ba4 <http_server_netconn_thread+0x134>)
        {
          /* serve connection */
          http_server_serve(newconn);
 8000ac4:	9c04      	ldr	r4, [sp, #16]
  size_t bytes_written = 0;
 8000ac6:	9307      	str	r3, [sp, #28]
  LCD_UsrLog ("Connected with %d\n", lastIP);
 8000ac8:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8000bb8 <http_server_netconn_thread+0x148>
  char resp1[] = "Led is on";
 8000acc:	c203      	stmia	r2!, {r0, r1}
 8000ace:	f8b9 1008 	ldrh.w	r1, [r9, #8]
  char resp2[] = "Led is off";
 8000ad2:	6838      	ldr	r0, [r7, #0]
  char resp1[] = "Led is on";
 8000ad4:	8011      	strh	r1, [r2, #0]
  char resp2[] = "Led is off";
 8000ad6:	aa0b      	add	r2, sp, #44	; 0x2c
 8000ad8:	6879      	ldr	r1, [r7, #4]
 8000ada:	c203      	stmia	r2!, {r0, r1}
 8000adc:	8938      	ldrh	r0, [r7, #8]
 8000ade:	7ab9      	ldrb	r1, [r7, #10]
 8000ae0:	8010      	strh	r0, [r2, #0]
  netconn_getaddr(conn, &ipaddr, &port, 0);
 8000ae2:	4620      	mov	r0, r4
  char resp2[] = "Led is off";
 8000ae4:	7091      	strb	r1, [r2, #2]
  netconn_getaddr(conn, &ipaddr, &port, 0);
 8000ae6:	4651      	mov	r1, sl
 8000ae8:	4a2d      	ldr	r2, [pc, #180]	; (8000ba0 <http_server_netconn_thread+0x130>)
 8000aea:	f004 feb7 	bl	800585c <netconn_getaddr>
  lastIP = (uint8_t)(ipaddr.addr >> 24);
 8000aee:	f896 b007 	ldrb.w	fp, [r6, #7]
  LCD_UsrLog ("Connected with %d\n", lastIP);
 8000af2:	4f2d      	ldr	r7, [pc, #180]	; (8000ba8 <http_server_netconn_thread+0x138>)
 8000af4:	4659      	mov	r1, fp
 8000af6:	482d      	ldr	r0, [pc, #180]	; (8000bac <http_server_netconn_thread+0x13c>)
 8000af8:	f8c7 8000 	str.w	r8, [r7]
 8000afc:	f00d fc46 	bl	800e38c <iprintf>
  if (lastIP == 71) {
 8000b00:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8000b04:	d142      	bne.n	8000b8c <http_server_netconn_thread+0x11c>
				  if ((buflen >= 6) && (strncmp(buf, "switch", 6) == 0)) {
 8000b06:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8000bbc <http_server_netconn_thread+0x14c>
						  LCD_UsrLog ("Led is off.\n");
 8000b0a:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 8000bc0 <http_server_netconn_thread+0x150>
		  recv_err = netconn_recv(conn, &inbuf);
 8000b0e:	a905      	add	r1, sp, #20
 8000b10:	4620      	mov	r0, r4
 8000b12:	f005 f8d3 	bl	8005cbc <netconn_recv>
		  if (recv_err == ERR_OK) {
 8000b16:	bb40      	cbnz	r0, 8000b6a <http_server_netconn_thread+0xfa>
			  if (netconn_err(conn) == ERR_OK) {
 8000b18:	4620      	mov	r0, r4
 8000b1a:	f004 ff90 	bl	8005a3e <netconn_err>
 8000b1e:	bb20      	cbnz	r0, 8000b6a <http_server_netconn_thread+0xfa>
				  netbuf_data(inbuf, (void**)&buf, &buflen);
 8000b20:	f10d 020e 	add.w	r2, sp, #14
 8000b24:	a906      	add	r1, sp, #24
 8000b26:	9805      	ldr	r0, [sp, #20]
 8000b28:	f006 f8fe 	bl	8006d28 <netbuf_data>
				  if ((buflen >= 6) && (strncmp(buf, "switch", 6) == 0)) {
 8000b2c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8000b30:	2b05      	cmp	r3, #5
 8000b32:	d91a      	bls.n	8000b6a <http_server_netconn_thread+0xfa>
 8000b34:	2206      	movs	r2, #6
 8000b36:	4649      	mov	r1, r9
 8000b38:	9806      	ldr	r0, [sp, #24]
 8000b3a:	f00d fcfd 	bl	800e538 <strncmp>
 8000b3e:	b9a0      	cbnz	r0, 8000b6a <http_server_netconn_thread+0xfa>
					  if (led_status == 0) {
 8000b40:	68b2      	ldr	r2, [r6, #8]
 8000b42:	ad07      	add	r5, sp, #28
 8000b44:	b9aa      	cbnz	r2, 8000b72 <http_server_netconn_thread+0x102>
						  led_status = 1;
 8000b46:	f04f 0b01 	mov.w	fp, #1
 8000b4a:	f8c6 b008 	str.w	fp, [r6, #8]
						  BSP_LED_On(LED1);
 8000b4e:	f000 fb89 	bl	8001264 <BSP_LED_On>
						  LCD_UsrLog ("Led is on.\n");
 8000b52:	4817      	ldr	r0, [pc, #92]	; (8000bb0 <http_server_netconn_thread+0x140>)
 8000b54:	f8c7 8000 	str.w	r8, [r7]
 8000b58:	f00d fc9e 	bl	800e498 <puts>
						  netconn_write_partly (conn, resp1, sizeof(resp1), NETCONN_COPY, &bytes_written);
 8000b5c:	465b      	mov	r3, fp
 8000b5e:	220a      	movs	r2, #10
 8000b60:	a908      	add	r1, sp, #32
 8000b62:	9500      	str	r5, [sp, #0]
						  netconn_write_partly (conn, resp2, sizeof(resp2), NETCONN_COPY, &bytes_written);
 8000b64:	4620      	mov	r0, r4
 8000b66:	f004 ff5b 	bl	8005a20 <netconn_write_partly>
		  netbuf_delete(inbuf);
 8000b6a:	9805      	ldr	r0, [sp, #20]
 8000b6c:	f006 f8ca 	bl	8006d04 <netbuf_delete>
		  recv_err = netconn_recv(conn, &inbuf);
 8000b70:	e7cd      	b.n	8000b0e <http_server_netconn_thread+0x9e>
						  led_status = 0;
 8000b72:	60b0      	str	r0, [r6, #8]
						  BSP_LED_Off(LED1);
 8000b74:	f000 fb80 	bl	8001278 <BSP_LED_Off>
						  LCD_UsrLog ("Led is off.\n");
 8000b78:	4650      	mov	r0, sl
 8000b7a:	f8c7 8000 	str.w	r8, [r7]
 8000b7e:	f00d fc8b 	bl	800e498 <puts>
						  netconn_write_partly (conn, resp2, sizeof(resp2), NETCONN_COPY, &bytes_written);
 8000b82:	2301      	movs	r3, #1
 8000b84:	220b      	movs	r2, #11
 8000b86:	a90b      	add	r1, sp, #44	; 0x2c
 8000b88:	9500      	str	r5, [sp, #0]
 8000b8a:	e7eb      	b.n	8000b64 <http_server_netconn_thread+0xf4>
  netconn_close(conn);
 8000b8c:	4620      	mov	r0, r4
 8000b8e:	f004 ff53 	bl	8005a38 <netconn_close>

          /* delete connection */
          netconn_delete(newconn);
 8000b92:	9804      	ldr	r0, [sp, #16]
 8000b94:	f004 fe54 	bl	8005840 <netconn_delete>
 8000b98:	e787      	b.n	8000aaa <http_server_netconn_thread+0x3a>
        }
      }
    }
  }
}
 8000b9a:	b00f      	add	sp, #60	; 0x3c
 8000b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ba0:	200000d0 	.word	0x200000d0
 8000ba4:	08013485 	.word	0x08013485
 8000ba8:	2000a6cc 	.word	0x2000a6cc
 8000bac:	08013454 	.word	0x08013454
 8000bb0:	0801346e 	.word	0x0801346e
 8000bb4:	08013490 	.word	0x08013490
 8000bb8:	ff000080 	.word	0xff000080
 8000bbc:	08013467 	.word	0x08013467
 8000bc0:	08013479 	.word	0x08013479

08000bc4 <http_server_netconn_init>:
  * @param  none
  * @retval None
  */
void http_server_netconn_init()
{
  sys_thread_new("HTTP", http_server_netconn_thread, NULL, DEFAULT_THREAD_STACKSIZE, WEBSERVER_THREAD_PRIO);
 8000bc4:	2301      	movs	r3, #1
{
 8000bc6:	b507      	push	{r0, r1, r2, lr}
  sys_thread_new("HTTP", http_server_netconn_thread, NULL, DEFAULT_THREAD_STACKSIZE, WEBSERVER_THREAD_PRIO);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	9300      	str	r3, [sp, #0]
 8000bcc:	4904      	ldr	r1, [pc, #16]	; (8000be0 <http_server_netconn_init+0x1c>)
 8000bce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000bd2:	4804      	ldr	r0, [pc, #16]	; (8000be4 <http_server_netconn_init+0x20>)
 8000bd4:	f00d fb6a 	bl	800e2ac <sys_thread_new>
}
 8000bd8:	b003      	add	sp, #12
 8000bda:	f85d fb04 	ldr.w	pc, [sp], #4
 8000bde:	bf00      	nop
 8000be0:	08000a71 	.word	0x08000a71
 8000be4:	0801349a 	.word	0x0801349a

08000be8 <StartThread>:
  * @brief  Start Thread 
  * @param  argument not used
  * @retval None
  */
static void StartThread(void const * argument)
{ 
 8000be8:	b500      	push	{lr}
 8000bea:	b089      	sub	sp, #36	; 0x24
 
  IP_ADDR4(&ipaddr,IP_ADDR0,IP_ADDR1,IP_ADDR2,IP_ADDR3);
  IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
  IP_ADDR4(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
  
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8000bec:	4c26      	ldr	r4, [pc, #152]	; (8000c88 <StartThread+0xa0>)
  * @retval None
  */
static void BSP_Config(void)
{
  /* Initialize the LCD */
  BSP_LCD_Init();
 8000bee:	f000 fdd7 	bl	80017a0 <BSP_LCD_Init>
  
  BSP_LED_Init (LED1);
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f000 fb12 	bl	800121c <BSP_LED_Init>

  /* Initialize the LCD Layers */
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS);
 8000bf8:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f000 fb99 	bl	8001334 <BSP_LCD_LayerDefaultInit>
  
  /* Set LCD Foreground Layer  */
  BSP_LCD_SelectLayer(1);
 8000c02:	2001      	movs	r0, #1
 8000c04:	f000 fbce 	bl	80013a4 <BSP_LCD_SelectLayer>
  
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8000c08:	4820      	ldr	r0, [pc, #128]	; (8000c8c <StartThread+0xa4>)
 8000c0a:	f000 fbe5 	bl	80013d8 <BSP_LCD_SetFont>
  
  /* Initialize LCD Log module */
  LCD_LOG_Init();
 8000c0e:	f000 f9a9 	bl	8000f64 <LCD_LOG_Init>
  
  /* Show Header and Footer texts */
  LCD_LOG_SetHeader((uint8_t *)"Webserver Application Netconn API");
 8000c12:	481f      	ldr	r0, [pc, #124]	; (8000c90 <StartThread+0xa8>)
 8000c14:	f000 f9b0 	bl	8000f78 <LCD_LOG_SetHeader>
  LCD_LOG_SetFooter((uint8_t *)"STM32746G-DISCO board");
 8000c18:	481e      	ldr	r0, [pc, #120]	; (8000c94 <StartThread+0xac>)
 8000c1a:	f000 f9e3 	bl	8000fe4 <LCD_LOG_SetFooter>
  
  LCD_UsrLog ((char *)"  State: Ethernet Initialization ...\n");
 8000c1e:	4b1e      	ldr	r3, [pc, #120]	; (8000c98 <StartThread+0xb0>)
 8000c20:	4a1e      	ldr	r2, [pc, #120]	; (8000c9c <StartThread+0xb4>)
 8000c22:	481f      	ldr	r0, [pc, #124]	; (8000ca0 <StartThread+0xb8>)
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	f00d fc37 	bl	800e498 <puts>
  tcpip_init(NULL, NULL);
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4608      	mov	r0, r1
 8000c2e:	f006 f955 	bl	8006edc <tcpip_init>
  IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
 8000c32:	4a1c      	ldr	r2, [pc, #112]	; (8000ca4 <StartThread+0xbc>)
 8000c34:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8000c38:	a905      	add	r1, sp, #20
 8000c3a:	4620      	mov	r0, r4
  IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
 8000c3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
  IP_ADDR4(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
 8000c40:	f503 4328 	add.w	r3, r3, #43008	; 0xa800
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8000c44:	aa06      	add	r2, sp, #24
  IP_ADDR4(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
 8000c46:	33c1      	adds	r3, #193	; 0xc1
 8000c48:	9307      	str	r3, [sp, #28]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8000c4a:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <StartThread+0xc0>)
 8000c4c:	9302      	str	r3, [sp, #8]
 8000c4e:	4b17      	ldr	r3, [pc, #92]	; (8000cac <StartThread+0xc4>)
 8000c50:	9301      	str	r3, [sp, #4]
 8000c52:	2300      	movs	r3, #0
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	ab07      	add	r3, sp, #28
 8000c58:	f009 f858 	bl	8009d0c <netif_add>
  netif_set_default(&gnetif);
 8000c5c:	4620      	mov	r0, r4
 8000c5e:	f009 f8ed 	bl	8009e3c <netif_set_default>
  if (netif_is_link_up(&gnetif))
 8000c62:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    netif_set_up(&gnetif);
 8000c66:	4620      	mov	r0, r4
  if (netif_is_link_up(&gnetif))
 8000c68:	0759      	lsls	r1, r3, #29
 8000c6a:	d50a      	bpl.n	8000c82 <StartThread+0x9a>
    netif_set_up(&gnetif);
 8000c6c:	f009 f8ec 	bl	8009e48 <netif_set_up>
  http_server_netconn_init();
 8000c70:	f7ff ffa8 	bl	8000bc4 <http_server_netconn_init>
  User_notification(&gnetif);
 8000c74:	4804      	ldr	r0, [pc, #16]	; (8000c88 <StartThread+0xa0>)
 8000c76:	f7ff fd17 	bl	80006a8 <User_notification>
    osThreadTerminate(NULL);
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f004 f9be 	bl	8004ffc <osThreadTerminate>
  for( ;; )
 8000c80:	e7fb      	b.n	8000c7a <StartThread+0x92>
    netif_set_down(&gnetif);
 8000c82:	f009 f8fb 	bl	8009e7c <netif_set_down>
 8000c86:	e7f3      	b.n	8000c70 <StartThread+0x88>
 8000c88:	200069e4 	.word	0x200069e4
 8000c8c:	20000000 	.word	0x20000000
 8000c90:	080134a5 	.word	0x080134a5
 8000c94:	080134c7 	.word	0x080134c7
 8000c98:	2000a6cc 	.word	0x2000a6cc
 8000c9c:	ff000080 	.word	0xff000080
 8000ca0:	080134dd 	.word	0x080134dd
 8000ca4:	4601a8c0 	.word	0x4601a8c0
 8000ca8:	08006ea1 	.word	0x08006ea1
 8000cac:	08000965 	.word	0x08000965

08000cb0 <main>:
{
 8000cb0:	b500      	push	{lr}
 8000cb2:	b093      	sub	sp, #76	; 0x4c
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x87;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000cb4:	f240 1501 	movw	r5, #257	; 0x101
  HAL_MPU_Disable();
 8000cb8:	f000 ffb8 	bl	8001c2c <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000cbc:	2301      	movs	r3, #1
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000cbe:	2400      	movs	r4, #0

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000cc0:	a806      	add	r0, sp, #24
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000cc2:	f8ad 3018 	strh.w	r3, [sp, #24]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000cc6:	f248 731f 	movw	r3, #34591	; 0x871f
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000cca:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_MPU_ConfigRegion(&MPU_InitStruct);

  /* Configure the MPU attributes as WT for SDRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0xC0000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8000ccc:	f04f 4640 	mov.w	r6, #3221225472	; 0xc0000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000cd0:	e9cd 4307 	strd	r4, r3, [sp, #28]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000cd4:	f000 ffcc 	bl	8001c70 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000cd8:	f8ad 5018 	strh.w	r5, [sp, #24]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000cdc:	4b54      	ldr	r3, [pc, #336]	; (8000e30 <main+0x180>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000cde:	a806      	add	r0, sp, #24
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000ce0:	4d54      	ldr	r5, [pc, #336]	; (8000e34 <main+0x184>)
 8000ce2:	e9cd 5307 	strd	r5, r3, [sp, #28]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000ce6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cea:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000cec:	f000 ffc0 	bl	8001c70 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000cf0:	f240 2301 	movw	r3, #513	; 0x201
  MPU_InitStruct.BaseAddress = 0x2004C000;
 8000cf4:	9507      	str	r5, [sp, #28]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000cf6:	4d50      	ldr	r5, [pc, #320]	; (8000e38 <main+0x188>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000cf8:	a806      	add	r0, sp, #24
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000cfa:	f8ad 3018 	strh.w	r3, [sp, #24]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000cfe:	f04f 2301 	mov.w	r3, #16777472	; 0x1000100
 8000d02:	e9cd 5308 	strd	r5, r3, [sp, #32]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d06:	f000 ffb3 	bl	8001c70 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d0a:	f240 3301 	movw	r3, #769	; 0x301
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x00;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d0e:	a806      	add	r0, sp, #24
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d10:	f8ad 3018 	strh.w	r3, [sp, #24]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8000d14:	4b49      	ldr	r3, [pc, #292]	; (8000e3c <main+0x18c>)
 8000d16:	e9cd 6307 	strd	r6, r3, [sp, #28]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000d1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d1e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d20:	f000 ffa6 	bl	8001c70 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes FMC control registers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d24:	f240 4301 	movw	r3, #1025	; 0x401
  MPU_InitStruct.BaseAddress = 0xA0000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
 8000d28:	f04f 4c20 	mov.w	ip, #2684354560	; 0xa0000000
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d2c:	a806      	add	r0, sp, #24
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d2e:	f8ad 3018 	strh.w	r3, [sp, #24]
  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
 8000d32:	4b43      	ldr	r3, [pc, #268]	; (8000e40 <main+0x190>)
 8000d34:	e9cd c307 	strd	ip, r3, [sp, #28]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d38:	4b42      	ldr	r3, [pc, #264]	; (8000e44 <main+0x194>)
 8000d3a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d3c:	f000 ff98 	bl	8001c70 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d40:	2004      	movs	r0, #4
 8000d42:	f000 ff83 	bl	8001c4c <HAL_MPU_Enable>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d46:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d4a:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000d4e:	4b3e      	ldr	r3, [pc, #248]	; (8000e48 <main+0x198>)
 8000d50:	f8c3 4250 	str.w	r4, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000d54:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d58:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000d5c:	695a      	ldr	r2, [r3, #20]
 8000d5e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000d62:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d64:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d68:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000d6c:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000d70:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000d74:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d78:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000d7c:	f3c2 00c9 	ubfx	r0, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000d80:	f3c2 324e 	ubfx	r2, r2, #13, #15
 8000d84:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d86:	ea02 0604 	and.w	r6, r2, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000d8a:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d8c:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000d90:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d92:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 8000d96:	d2f9      	bcs.n	8000d8c <main+0xdc>
    } while(sets-- != 0U);
 8000d98:	3a20      	subs	r2, #32
 8000d9a:	f112 0f20 	cmn.w	r2, #32
 8000d9e:	d1f2      	bne.n	8000d86 <main+0xd6>
 8000da0:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000da4:	695a      	ldr	r2, [r3, #20]
 8000da6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000daa:	615a      	str	r2, [r3, #20]
 8000dac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000db0:	f3bf 8f6f 	isb	sy
  HAL_Init();  
 8000db4:	f000 feb9 	bl	8001b2a <HAL_Init>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000db8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dbc:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dbe:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000dc0:	2019      	movs	r0, #25
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dc2:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dc4:	e9cd 1306 	strd	r1, r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dcc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dd0:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000dd4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000dd8:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000ddc:	2309      	movs	r3, #9
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dde:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000de0:	9311      	str	r3, [sp, #68]	; 0x44
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de2:	f001 ff67 	bl	8002cb4 <HAL_RCC_OscConfig>
 8000de6:	b100      	cbz	r0, 8000dea <main+0x13a>
  while(1)
 8000de8:	e7fe      	b.n	8000de8 <main+0x138>
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000dea:	f001 ff2b 	bl	8002c44 <HAL_PWREx_EnableOverDrive>
 8000dee:	b100      	cbz	r0, 8000df2 <main+0x142>
  while(1)
 8000df0:	e7fe      	b.n	8000df0 <main+0x140>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000df2:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8000df4:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000df8:	9003      	str	r0, [sp, #12]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000dfa:	2107      	movs	r1, #7
 8000dfc:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dfe:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8000e02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e06:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e0a:	f002 f93f 	bl	800308c <HAL_RCC_ClockConfig>
 8000e0e:	4606      	mov	r6, r0
 8000e10:	b100      	cbz	r0, 8000e14 <main+0x164>
  while(1)
 8000e12:	e7fe      	b.n	8000e12 <main+0x162>
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 5);
 8000e14:	4d0d      	ldr	r5, [pc, #52]	; (8000e4c <main+0x19c>)
 8000e16:	ac06      	add	r4, sp, #24
 8000e18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e1c:	682b      	ldr	r3, [r5, #0]
  osThreadCreate (osThread(Start), NULL);
 8000e1e:	4631      	mov	r1, r6
 8000e20:	a806      	add	r0, sp, #24
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 5);
 8000e22:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(Start), NULL);
 8000e24:	f004 f8d2 	bl	8004fcc <osThreadCreate>
  osKernelStart();
 8000e28:	f004 f8c4 	bl	8004fb4 <osKernelStart>
  for( ;; );
 8000e2c:	e7fe      	b.n	8000e2c <main+0x17c>
 8000e2e:	bf00      	nop
 8000e30:	0301000d 	.word	0x0301000d
 8000e34:	2004c000 	.word	0x2004c000
 8000e38:	03000007 	.word	0x03000007
 8000e3c:	03000018 	.word	0x03000018
 8000e40:	0300000c 	.word	0x0300000c
 8000e44:	01000101 	.word	0x01000101
 8000e48:	e000ed00 	.word	0xe000ed00
 8000e4c:	0800f514 	.word	0x0800f514

08000e50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 8000e50:	4601      	mov	r1, r0
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  
    /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2036      	movs	r0, #54	; 0x36
{
 8000e56:	b510      	push	{r4, lr}
 8000e58:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000e5a:	f000 fea7 	bl	8001bac <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e5e:	2036      	movs	r0, #54	; 0x36
 8000e60:	f000 fed6 	bl	8001c10 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e64:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <HAL_InitTick+0x74>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e66:	a901      	add	r1, sp, #4
 8000e68:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e6c:	f042 0210 	orr.w	r2, r2, #16
 8000e70:	641a      	str	r2, [r3, #64]	; 0x40
 8000e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e74:	f003 0310 	and.w	r3, r3, #16
 8000e78:	9302      	str	r3, [sp, #8]
 8000e7a:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e7c:	f002 f9bc 	bl	80031f8 <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 8000e80:	9b06      	ldr	r3, [sp, #24]
 8000e82:	b9c3      	cbnz	r3, 8000eb6 <HAL_InitTick+0x66>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e84:	f002 f9a8 	bl	80031d8 <HAL_RCC_GetPCLK1Freq>
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
  
  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 8000e88:	4c0f      	ldr	r4, [pc, #60]	; (8000ec8 <HAL_InitTick+0x78>)
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <HAL_InitTick+0x7c>)
 8000e8c:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 8000e8e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000e92:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e94:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <HAL_InitTick+0x80>)
 8000e96:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e9a:	3801      	subs	r0, #1
  TimHandle.Init.Prescaler = uwPrescalerValue;
  TimHandle.Init.ClockDivision = 0;
 8000e9c:	2300      	movs	r3, #0
  TimHandle.Init.Prescaler = uwPrescalerValue;
 8000e9e:	6060      	str	r0, [r4, #4]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8000ea0:	4620      	mov	r0, r4
  TimHandle.Init.ClockDivision = 0;
 8000ea2:	6123      	str	r3, [r4, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea4:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8000ea6:	f002 fdff 	bl	8003aa8 <HAL_TIM_Base_Init>
 8000eaa:	b940      	cbnz	r0, 8000ebe <HAL_InitTick+0x6e>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
 8000eac:	4620      	mov	r0, r4
 8000eae:	f002 fca3 	bl	80037f8 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8000eb2:	b008      	add	sp, #32
 8000eb4:	bd10      	pop	{r4, pc}
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000eb6:	f002 f98f 	bl	80031d8 <HAL_RCC_GetPCLK1Freq>
 8000eba:	0040      	lsls	r0, r0, #1
 8000ebc:	e7e4      	b.n	8000e88 <HAL_InitTick+0x38>
  return HAL_ERROR;
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	e7f7      	b.n	8000eb2 <HAL_InitTick+0x62>
 8000ec2:	bf00      	nop
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	20006a1c 	.word	0x20006a1c
 8000ecc:	40001000 	.word	0x40001000
 8000ed0:	000f4240 	.word	0x000f4240

08000ed4 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  HAL_IncTick();
 8000ed4:	f000 be34 	b.w	8001b40 <HAL_IncTick>

08000ed8 <TIM6_DAC_IRQHandler>:
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimHandle);
 8000ed8:	4801      	ldr	r0, [pc, #4]	; (8000ee0 <TIM6_DAC_IRQHandler+0x8>)
 8000eda:	f002 bccf 	b.w	800387c <HAL_TIM_IRQHandler>
 8000ede:	bf00      	nop
 8000ee0:	20006a1c 	.word	0x20006a1c

08000ee4 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8000ee4:	4770      	bx	lr

08000ee6 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000ee6:	e7fe      	b.n	8000ee6 <HardFault_Handler>

08000ee8 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <MemManage_Handler>

08000eea <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <BusFault_Handler>

08000eec <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <UsageFault_Handler>

08000eee <DebugMon_Handler>:
 8000eee:	4770      	bx	lr

08000ef0 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  osSystickHandler();
 8000ef0:	f004 b986 	b.w	8005200 <osSystickHandler>

08000ef4 <ETH_IRQHandler>:
  * @param  None
  * @retval None
  */
void ETH_IRQHandler(void)
{
  HAL_ETH_IRQHandler(&EthHandle);
 8000ef4:	4801      	ldr	r0, [pc, #4]	; (8000efc <ETH_IRQHandler+0x8>)
 8000ef6:	f001 bab4 	b.w	8002462 <HAL_ETH_IRQHandler>
 8000efa:	bf00      	nop
 8000efc:	2000699c 	.word	0x2000699c

08000f00 <LCD_LOG_DeInit>:
  * @param  None
  * @retval None
  */
void LCD_LOG_DeInit(void)
{
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <LCD_LOG_DeInit+0x34>)
  LCD_CacheBuffer_yptr_bottom = 0;
  
  LCD_CacheBuffer_yptr_top_bak = 0;
  LCD_CacheBuffer_yptr_bottom_bak = 0;
  
  LCD_CacheBuffer_yptr_invert= ENABLE;
 8000f02:	2101      	movs	r1, #1
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
 8000f04:	4a0c      	ldr	r2, [pc, #48]	; (8000f38 <LCD_LOG_DeInit+0x38>)
 8000f06:	601a      	str	r2, [r3, #0]
  LCD_CacheBuffer_xptr = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	4a0c      	ldr	r2, [pc, #48]	; (8000f3c <LCD_LOG_DeInit+0x3c>)
 8000f0c:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_top = 0;
 8000f0e:	4a0c      	ldr	r2, [pc, #48]	; (8000f40 <LCD_LOG_DeInit+0x40>)
 8000f10:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_bottom = 0;
 8000f12:	4a0c      	ldr	r2, [pc, #48]	; (8000f44 <LCD_LOG_DeInit+0x44>)
 8000f14:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_top_bak = 0;
 8000f16:	4a0c      	ldr	r2, [pc, #48]	; (8000f48 <LCD_LOG_DeInit+0x48>)
 8000f18:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_bottom_bak = 0;
 8000f1a:	4a0c      	ldr	r2, [pc, #48]	; (8000f4c <LCD_LOG_DeInit+0x4c>)
 8000f1c:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_invert= ENABLE;
 8000f1e:	4a0c      	ldr	r2, [pc, #48]	; (8000f50 <LCD_LOG_DeInit+0x50>)
 8000f20:	7011      	strb	r1, [r2, #0]
  LCD_ScrollActive = DISABLE;
 8000f22:	4a0c      	ldr	r2, [pc, #48]	; (8000f54 <LCD_LOG_DeInit+0x54>)
 8000f24:	7013      	strb	r3, [r2, #0]
  LCD_Lock = DISABLE;
 8000f26:	4a0c      	ldr	r2, [pc, #48]	; (8000f58 <LCD_LOG_DeInit+0x58>)
 8000f28:	7013      	strb	r3, [r2, #0]
  LCD_Scrolled = DISABLE;
 8000f2a:	4a0c      	ldr	r2, [pc, #48]	; (8000f5c <LCD_LOG_DeInit+0x5c>)
 8000f2c:	7013      	strb	r3, [r2, #0]
  LCD_ScrollBackStep = 0;
 8000f2e:	4a0c      	ldr	r2, [pc, #48]	; (8000f60 <LCD_LOG_DeInit+0x60>)
 8000f30:	8013      	strh	r3, [r2, #0]
}
 8000f32:	4770      	bx	lr
 8000f34:	2000a6cc 	.word	0x2000a6cc
 8000f38:	ff000080 	.word	0xff000080
 8000f3c:	20006a6e 	.word	0x20006a6e
 8000f40:	20006a74 	.word	0x20006a74
 8000f44:	20006a6c 	.word	0x20006a6c
 8000f48:	20006a6a 	.word	0x20006a6a
 8000f4c:	20006a68 	.word	0x20006a68
 8000f50:	20006a70 	.word	0x20006a70
 8000f54:	20006a76 	.word	0x20006a76
 8000f58:	20006a71 	.word	0x20006a71
 8000f5c:	20006a72 	.word	0x20006a72
 8000f60:	2000a6d0 	.word	0x2000a6d0

08000f64 <LCD_LOG_Init>:
{
 8000f64:	b508      	push	{r3, lr}
  LCD_LOG_DeInit();
 8000f66:	f7ff ffcb 	bl	8000f00 <LCD_LOG_DeInit>
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
 8000f6a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000f6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
 8000f72:	f000 ba45 	b.w	8001400 <BSP_LCD_Clear>
	...

08000f78 <LCD_LOG_SetHeader>:
  * @brief  Display the application header on the LCD screen 
  * @param  header: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetHeader (uint8_t *header)
{
 8000f78:	b570      	push	{r4, r5, r6, lr}
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
 8000f7a:	4c16      	ldr	r4, [pc, #88]	; (8000fd4 <LCD_LOG_SetHeader+0x5c>)
{
 8000f7c:	4605      	mov	r5, r0

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8000f7e:	4e16      	ldr	r6, [pc, #88]	; (8000fd8 <LCD_LOG_SetHeader+0x60>)
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
 8000f80:	4620      	mov	r0, r4
 8000f82:	f000 fa29 	bl	80013d8 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8000f86:	4630      	mov	r0, r6
 8000f88:	f000 fa12 	bl	80013b0 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), LCD_LOG_HEADER_FONT.Height * 3);
 8000f8c:	f000 f9ba 	bl	8001304 <BSP_LCD_GetXSize>
 8000f90:	88e3      	ldrh	r3, [r4, #6]
 8000f92:	2100      	movs	r1, #0
 8000f94:	b282      	uxth	r2, r0
 8000f96:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000f9a:	4608      	mov	r0, r1
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	f000 fb27 	bl	80015f0 <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 8000fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa6:	f000 fa03 	bl	80013b0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8000faa:	4630      	mov	r0, r6
 8000fac:	f000 fa0a 	bl	80013c4 <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, LCD_LOG_HEADER_FONT.Height, header, CENTER_MODE);
 8000fb0:	462a      	mov	r2, r5
 8000fb2:	88e1      	ldrh	r1, [r4, #6]
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f000 faae 	bl	8001518 <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 8000fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc0:	f000 fa00 	bl	80013c4 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 8000fc4:	4805      	ldr	r0, [pc, #20]	; (8000fdc <LCD_LOG_SetHeader+0x64>)
 8000fc6:	f000 f9f3 	bl	80013b0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 8000fca:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <LCD_LOG_SetHeader+0x68>)
}
 8000fcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 8000fd0:	f000 ba02 	b.w	80013d8 <BSP_LCD_SetFont>
 8000fd4:	20000018 	.word	0x20000018
 8000fd8:	ff0000ff 	.word	0xff0000ff
 8000fdc:	ff000080 	.word	0xff000080
 8000fe0:	20000010 	.word	0x20000010

08000fe4 <LCD_LOG_SetFooter>:
  * @brief  Display the application footer on the LCD screen 
  * @param  footer: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetFooter(uint8_t *footer)
{
 8000fe4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_FOOTER_FONT);
 8000fe6:	4c1d      	ldr	r4, [pc, #116]	; (800105c <LCD_LOG_SetFooter+0x78>)
{
 8000fe8:	4605      	mov	r5, r0

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8000fea:	4e1d      	ldr	r6, [pc, #116]	; (8001060 <LCD_LOG_SetFooter+0x7c>)
  BSP_LCD_SetFont (&LCD_LOG_FOOTER_FONT);
 8000fec:	4620      	mov	r0, r4
 8000fee:	f000 f9f3 	bl	80013d8 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8000ff2:	4630      	mov	r0, r6
 8000ff4:	f000 f9dc 	bl	80013b0 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, BSP_LCD_GetYSize() - LCD_LOG_FOOTER_FONT.Height - 4, BSP_LCD_GetXSize(), LCD_LOG_FOOTER_FONT.Height + 4);
 8000ff8:	f000 f990 	bl	800131c <BSP_LCD_GetYSize>
 8000ffc:	88e3      	ldrh	r3, [r4, #6]
 8000ffe:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001002:	33fc      	adds	r3, #252	; 0xfc
 8001004:	1819      	adds	r1, r3, r0
 8001006:	b289      	uxth	r1, r1
 8001008:	9101      	str	r1, [sp, #4]
 800100a:	f000 f97b 	bl	8001304 <BSP_LCD_GetXSize>
 800100e:	88e3      	ldrh	r3, [r4, #6]
 8001010:	b282      	uxth	r2, r0
 8001012:	9901      	ldr	r1, [sp, #4]
 8001014:	2000      	movs	r0, #0
 8001016:	3304      	adds	r3, #4
 8001018:	b29b      	uxth	r3, r3
 800101a:	f000 fae9 	bl	80015f0 <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 800101e:	f04f 30ff 	mov.w	r0, #4294967295
 8001022:	f000 f9c5 	bl	80013b0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8001026:	4630      	mov	r0, r6
 8001028:	f000 f9cc 	bl	80013c4 <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - LCD_LOG_FOOTER_FONT.Height, footer, CENTER_MODE);
 800102c:	f000 f976 	bl	800131c <BSP_LCD_GetYSize>
 8001030:	88e1      	ldrh	r1, [r4, #6]
 8001032:	2301      	movs	r3, #1
 8001034:	462a      	mov	r2, r5
 8001036:	1a41      	subs	r1, r0, r1
 8001038:	2000      	movs	r0, #0
 800103a:	b289      	uxth	r1, r1
 800103c:	f000 fa6c 	bl	8001518 <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 8001040:	f04f 30ff 	mov.w	r0, #4294967295
 8001044:	f000 f9be 	bl	80013c4 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 8001048:	4806      	ldr	r0, [pc, #24]	; (8001064 <LCD_LOG_SetFooter+0x80>)
 800104a:	f000 f9b1 	bl	80013b0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 800104e:	4620      	mov	r0, r4
}
 8001050:	b002      	add	sp, #8
 8001052:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 8001056:	f000 b9bf 	b.w	80013d8 <BSP_LCD_SetFont>
 800105a:	bf00      	nop
 800105c:	20000010 	.word	0x20000010
 8001060:	ff0000ff 	.word	0xff0000ff
 8001064:	ff000080 	.word	0xff000080

08001068 <LCD_LOG_UpdateDisplay>:
  * @brief  Update the text area display
  * @param  None
  * @retval None
  */
void LCD_LOG_UpdateDisplay (void)
{
 8001068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint8_t cnt = 0 ;
  uint16_t length = 0 ;
  uint16_t ptr = 0, index = 0;
  
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 800106c:	4d1c      	ldr	r5, [pc, #112]	; (80010e0 <LCD_LOG_UpdateDisplay+0x78>)
 800106e:	4a1d      	ldr	r2, [pc, #116]	; (80010e4 <LCD_LOG_UpdateDisplay+0x7c>)
 8001070:	882b      	ldrh	r3, [r5, #0]
 8001072:	8812      	ldrh	r2, [r2, #0]
 8001074:	2b0f      	cmp	r3, #15
 8001076:	4f1c      	ldr	r7, [pc, #112]	; (80010e8 <LCD_LOG_UpdateDisplay+0x80>)
 8001078:	d811      	bhi.n	800109e <LCD_LOG_UpdateDisplay+0x36>
 800107a:	4293      	cmp	r3, r2
 800107c:	d311      	bcc.n	80010a2 <LCD_LOG_UpdateDisplay+0x3a>
     (LCD_CacheBuffer_yptr_bottom  >= LCD_CacheBuffer_yptr_top))
  {
    BSP_LCD_SetTextColor(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].color);
 800107e:	2484      	movs	r4, #132	; 0x84
 8001080:	fb04 7303 	mla	r3, r4, r3, r7
 8001084:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8001088:	f000 f992 	bl	80013b0 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 800108c:	8829      	ldrh	r1, [r5, #0]
 800108e:	1d08      	adds	r0, r1, #4
 8001090:	fb04 7101 	mla	r1, r4, r1, r7
 8001094:	b280      	uxth	r0, r0
                             (uint8_t *)(LCD_CacheBuffer[index].line));
      
    }
  }
  
}
 8001096:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 800109a:	f000 ba95 	b.w	80015c8 <BSP_LCD_DisplayStringAtLine>
    if(LCD_CacheBuffer_yptr_bottom < LCD_CacheBuffer_yptr_top)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d201      	bcs.n	80010a6 <LCD_LOG_UpdateDisplay+0x3e>
      length = LCD_CACHE_DEPTH + LCD_CacheBuffer_yptr_bottom ;
 80010a2:	3375      	adds	r3, #117	; 0x75
 80010a4:	b29b      	uxth	r3, r3
    ptr = length - YWINDOW_SIZE + 1;
 80010a6:	3b10      	subs	r3, #16
 80010a8:	2600      	movs	r6, #0
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 80010aa:	f04f 0875 	mov.w	r8, #117	; 0x75
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 80010ae:	f04f 0984 	mov.w	r9, #132	; 0x84
    ptr = length - YWINDOW_SIZE + 1;
 80010b2:	b29c      	uxth	r4, r3
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 80010b4:	19a1      	adds	r1, r4, r6
 80010b6:	fbb1 f5f8 	udiv	r5, r1, r8
 80010ba:	fb08 1515 	mls	r5, r8, r5, r1
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 80010be:	fb09 7505 	mla	r5, r9, r5, r7
 80010c2:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
 80010c6:	f000 f973 	bl	80013b0 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 80010ca:	1d30      	adds	r0, r6, #4
 80010cc:	3601      	adds	r6, #1
 80010ce:	4629      	mov	r1, r5
 80010d0:	b280      	uxth	r0, r0
 80010d2:	f000 fa79 	bl	80015c8 <BSP_LCD_DisplayStringAtLine>
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 80010d6:	2e11      	cmp	r6, #17
 80010d8:	d1ec      	bne.n	80010b4 <LCD_LOG_UpdateDisplay+0x4c>
}
 80010da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80010de:	bf00      	nop
 80010e0:	20006a6c 	.word	0x20006a6c
 80010e4:	20006a74 	.word	0x20006a74
 80010e8:	20006a78 	.word	0x20006a78

080010ec <__io_putchar>:
{
 80010ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010f0:	4605      	mov	r5, r0
  sFONT *cFont = BSP_LCD_GetFont();
 80010f2:	f000 f97b 	bl	80013ec <BSP_LCD_GetFont>
  if(LCD_Lock == DISABLE)
 80010f6:	4b3d      	ldr	r3, [pc, #244]	; (80011ec <__io_putchar+0x100>)
  sFONT *cFont = BSP_LCD_GetFont();
 80010f8:	4680      	mov	r8, r0
  if(LCD_Lock == DISABLE)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	bb43      	cbnz	r3, 8001150 <__io_putchar+0x64>
    if(LCD_ScrollActive == ENABLE)
 80010fe:	4a3c      	ldr	r2, [pc, #240]	; (80011f0 <__io_putchar+0x104>)
 8001100:	4c3c      	ldr	r4, [pc, #240]	; (80011f4 <__io_putchar+0x108>)
 8001102:	7811      	ldrb	r1, [r2, #0]
 8001104:	2901      	cmp	r1, #1
 8001106:	d10b      	bne.n	8001120 <__io_putchar+0x34>
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 8001108:	493b      	ldr	r1, [pc, #236]	; (80011f8 <__io_putchar+0x10c>)
      LCD_ScrollActive = DISABLE;
 800110a:	7013      	strb	r3, [r2, #0]
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 800110c:	8809      	ldrh	r1, [r1, #0]
      LCD_Scrolled = DISABLE;
 800110e:	4a3b      	ldr	r2, [pc, #236]	; (80011fc <__io_putchar+0x110>)
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 8001110:	8021      	strh	r1, [r4, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 8001112:	493b      	ldr	r1, [pc, #236]	; (8001200 <__io_putchar+0x114>)
      LCD_Scrolled = DISABLE;
 8001114:	7013      	strb	r3, [r2, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 8001116:	8808      	ldrh	r0, [r1, #0]
      LCD_ScrollBackStep = 0;
 8001118:	4a3a      	ldr	r2, [pc, #232]	; (8001204 <__io_putchar+0x118>)
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 800111a:	493b      	ldr	r1, [pc, #236]	; (8001208 <__io_putchar+0x11c>)
      LCD_ScrollBackStep = 0;
 800111c:	8013      	strh	r3, [r2, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 800111e:	8008      	strh	r0, [r1, #0]
    if(( LCD_CacheBuffer_xptr < (BSP_LCD_GetXSize()) /cFont->Width ) &&  ( ch != '\n'))
 8001120:	4f3a      	ldr	r7, [pc, #232]	; (800120c <__io_putchar+0x120>)
 8001122:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8001218 <__io_putchar+0x12c>
 8001126:	883e      	ldrh	r6, [r7, #0]
 8001128:	f000 f8ec 	bl	8001304 <BSP_LCD_GetXSize>
 800112c:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8001130:	fbb0 f0f3 	udiv	r0, r0, r3
 8001134:	4286      	cmp	r6, r0
 8001136:	463e      	mov	r6, r7
 8001138:	d20d      	bcs.n	8001156 <__io_putchar+0x6a>
 800113a:	2d0a      	cmp	r5, #10
 800113c:	d00b      	beq.n	8001156 <__io_putchar+0x6a>
 800113e:	883a      	ldrh	r2, [r7, #0]
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 8001140:	8823      	ldrh	r3, [r4, #0]
 8001142:	1c51      	adds	r1, r2, #1
 8001144:	8039      	strh	r1, [r7, #0]
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 8001146:	2184      	movs	r1, #132	; 0x84
 8001148:	fb01 9903 	mla	r9, r1, r3, r9
 800114c:	f809 5002 	strb.w	r5, [r9, r2]
}
 8001150:	4628      	mov	r0, r5
 8001152:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(LCD_CacheBuffer_yptr_top >= LCD_CacheBuffer_yptr_bottom)
 8001156:	4f2c      	ldr	r7, [pc, #176]	; (8001208 <__io_putchar+0x11c>)
 8001158:	8822      	ldrh	r2, [r4, #0]
 800115a:	883b      	ldrh	r3, [r7, #0]
 800115c:	429a      	cmp	r2, r3
 800115e:	d809      	bhi.n	8001174 <__io_putchar+0x88>
        if(LCD_CacheBuffer_yptr_invert == DISABLE)
 8001160:	4a2b      	ldr	r2, [pc, #172]	; (8001210 <__io_putchar+0x124>)
 8001162:	7811      	ldrb	r1, [r2, #0]
 8001164:	2900      	cmp	r1, #0
 8001166:	d134      	bne.n	80011d2 <__io_putchar+0xe6>
          LCD_CacheBuffer_yptr_top++;
 8001168:	3301      	adds	r3, #1
 800116a:	b29b      	uxth	r3, r3
          if(LCD_CacheBuffer_yptr_top == LCD_CACHE_DEPTH)
 800116c:	2b75      	cmp	r3, #117	; 0x75
          LCD_CacheBuffer_yptr_top++;
 800116e:	bf14      	ite	ne
 8001170:	803b      	strhne	r3, [r7, #0]
            LCD_CacheBuffer_yptr_top = 0;  
 8001172:	8039      	strheq	r1, [r7, #0]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8001174:	f8b6 a000 	ldrh.w	sl, [r6]
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 8001178:	f04f 0b84 	mov.w	fp, #132	; 0x84
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 800117c:	f000 f8c2 	bl	8001304 <BSP_LCD_GetXSize>
 8001180:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8001184:	2320      	movs	r3, #32
 8001186:	fbb0 f0f2 	udiv	r0, r0, r2
 800118a:	4550      	cmp	r0, sl
 800118c:	d824      	bhi.n	80011d8 <__io_putchar+0xec>
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 800118e:	8823      	ldrh	r3, [r4, #0]
 8001190:	2284      	movs	r2, #132	; 0x84
      LCD_CacheBuffer_xptr = 0;
 8001192:	f04f 0800 	mov.w	r8, #0
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 8001196:	fb02 9303 	mla	r3, r2, r3, r9
 800119a:	4a1e      	ldr	r2, [pc, #120]	; (8001214 <__io_putchar+0x128>)
      LCD_CacheBuffer_xptr = 0;
 800119c:	f8a6 8000 	strh.w	r8, [r6]
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 80011a0:	6812      	ldr	r2, [r2, #0]
 80011a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      LCD_LOG_UpdateDisplay (); 
 80011a6:	f7ff ff5f 	bl	8001068 <LCD_LOG_UpdateDisplay>
      LCD_CacheBuffer_yptr_bottom ++; 
 80011aa:	8823      	ldrh	r3, [r4, #0]
 80011ac:	3301      	adds	r3, #1
 80011ae:	b29b      	uxth	r3, r3
      if (LCD_CacheBuffer_yptr_bottom == LCD_CACHE_DEPTH) 
 80011b0:	2b75      	cmp	r3, #117	; 0x75
        LCD_CacheBuffer_yptr_top = 1;    
 80011b2:	bf05      	ittet	eq
 80011b4:	2301      	moveq	r3, #1
        LCD_CacheBuffer_yptr_invert = ENABLE;
 80011b6:	4a16      	ldreq	r2, [pc, #88]	; (8001210 <__io_putchar+0x124>)
      LCD_CacheBuffer_yptr_bottom ++; 
 80011b8:	8023      	strhne	r3, [r4, #0]
        LCD_CacheBuffer_yptr_bottom = 0;
 80011ba:	f8a4 8000 	strheq.w	r8, [r4]
        LCD_CacheBuffer_yptr_top = 1;    
 80011be:	bf04      	itt	eq
 80011c0:	803b      	strheq	r3, [r7, #0]
        LCD_CacheBuffer_yptr_invert = ENABLE;
 80011c2:	7013      	strbeq	r3, [r2, #0]
      if( ch != '\n')
 80011c4:	2d0a      	cmp	r5, #10
 80011c6:	d0c3      	beq.n	8001150 <__io_putchar+0x64>
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 80011c8:	8832      	ldrh	r2, [r6, #0]
 80011ca:	8823      	ldrh	r3, [r4, #0]
 80011cc:	1c51      	adds	r1, r2, #1
 80011ce:	8031      	strh	r1, [r6, #0]
 80011d0:	e7b9      	b.n	8001146 <__io_putchar+0x5a>
          LCD_CacheBuffer_yptr_invert= DISABLE;
 80011d2:	2300      	movs	r3, #0
 80011d4:	7013      	strb	r3, [r2, #0]
 80011d6:	e7cd      	b.n	8001174 <__io_putchar+0x88>
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 80011d8:	8831      	ldrh	r1, [r6, #0]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 80011da:	f10a 0a01 	add.w	sl, sl, #1
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 80011de:	8822      	ldrh	r2, [r4, #0]
 80011e0:	1c48      	adds	r0, r1, #1
 80011e2:	fb0b 9202 	mla	r2, fp, r2, r9
 80011e6:	8030      	strh	r0, [r6, #0]
 80011e8:	5453      	strb	r3, [r2, r1]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 80011ea:	e7c7      	b.n	800117c <__io_putchar+0x90>
 80011ec:	20006a71 	.word	0x20006a71
 80011f0:	20006a76 	.word	0x20006a76
 80011f4:	20006a6c 	.word	0x20006a6c
 80011f8:	20006a68 	.word	0x20006a68
 80011fc:	20006a72 	.word	0x20006a72
 8001200:	20006a6a 	.word	0x20006a6a
 8001204:	2000a6d0 	.word	0x2000a6d0
 8001208:	20006a74 	.word	0x20006a74
 800120c:	20006a6e 	.word	0x20006a6e
 8001210:	20006a70 	.word	0x20006a70
 8001214:	2000a6cc 	.word	0x2000a6cc
 8001218:	20006a78 	.word	0x20006a78

0800121c <BSP_LED_Init>:
  *          This parameter can be one of the following values:
  *            @arg  LED1
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800121c:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef  gpio_init_structure;
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1)
 800121e:	4604      	mov	r4, r0
{
 8001220:	b087      	sub	sp, #28
  if (Led == LED1)
 8001222:	b9c8      	cbnz	r0, 8001258 <BSP_LED_Init+0x3c>
  {
    gpio_led = LED1_GPIO_PORT;
    /* Enable the GPIO_LED clock */
    LED1_GPIO_CLK_ENABLE();
 8001224:	4b0d      	ldr	r3, [pc, #52]	; (800125c <BSP_LED_Init+0x40>)

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin = GPIO_PIN[Led];
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001226:	2502      	movs	r5, #2
    gpio_init_structure.Pull = GPIO_PULLUP;
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
  
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 8001228:	a901      	add	r1, sp, #4
 800122a:	480d      	ldr	r0, [pc, #52]	; (8001260 <BSP_LED_Init+0x44>)
    LED1_GPIO_CLK_ENABLE();
 800122c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800122e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001232:	631a      	str	r2, [r3, #48]	; 0x30
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	9b00      	ldr	r3, [sp, #0]
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800123e:	2301      	movs	r3, #1
 8001240:	e9cd 5301 	strd	r5, r3, [sp, #4]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8001244:	9303      	str	r3, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001246:	2303      	movs	r3, #3
 8001248:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 800124a:	f001 faef 	bl	800282c <HAL_GPIO_Init>
    
    /* By default, turn off LED */
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_RESET);
 800124e:	4622      	mov	r2, r4
 8001250:	4629      	mov	r1, r5
 8001252:	4803      	ldr	r0, [pc, #12]	; (8001260 <BSP_LED_Init+0x44>)
 8001254:	f001 fbce 	bl	80029f4 <HAL_GPIO_WritePin>
  }
}
 8001258:	b007      	add	sp, #28
 800125a:	bd30      	pop	{r4, r5, pc}
 800125c:	40023800 	.word	0x40023800
 8001260:	40022000 	.word	0x40022000

08001264 <BSP_LED_On>:
  */
void BSP_LED_On(Led_TypeDef Led)
{
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1)	/* Switch On LED connected to GPIO */
 8001264:	b920      	cbnz	r0, 8001270 <BSP_LED_On+0xc>
  {
    gpio_led = LED1_GPIO_PORT;
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_SET);
 8001266:	2201      	movs	r2, #1
 8001268:	2102      	movs	r1, #2
 800126a:	4802      	ldr	r0, [pc, #8]	; (8001274 <BSP_LED_On+0x10>)
 800126c:	f001 bbc2 	b.w	80029f4 <HAL_GPIO_WritePin>
  }
}
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40022000 	.word	0x40022000

08001278 <BSP_LED_Off>:
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1) /* Switch Off LED connected to GPIO */
 8001278:	4602      	mov	r2, r0
 800127a:	b918      	cbnz	r0, 8001284 <BSP_LED_Off+0xc>
  {
    gpio_led = LED1_GPIO_PORT;
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_RESET);
 800127c:	2102      	movs	r1, #2
 800127e:	4802      	ldr	r0, [pc, #8]	; (8001288 <BSP_LED_Off+0x10>)
 8001280:	f001 bbb8 	b.w	80029f4 <HAL_GPIO_WritePin>
  }
}
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40022000 	.word	0x40022000

0800128c <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800128c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8001290:	4c19      	ldr	r4, [pc, #100]	; (80012f8 <LL_FillBuffer+0x6c>)
{
 8001292:	4698      	mov	r8, r3
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8001294:	f44f 3340 	mov.w	r3, #196608	; 0x30000
{
 8001298:	460e      	mov	r6, r1
 800129a:	4617      	mov	r7, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800129c:	2134      	movs	r1, #52	; 0x34
 800129e:	4a17      	ldr	r2, [pc, #92]	; (80012fc <LL_FillBuffer+0x70>)
{
 80012a0:	4681      	mov	r9, r0
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80012a2:	6063      	str	r3, [r4, #4]
  hDma2dHandler.Init.OutputOffset = OffLine;      
  
  hDma2dHandler.Instance = DMA2D;
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80012a4:	4620      	mov	r0, r4
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80012a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
{
 80012a8:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80012ac:	fb01 2303 	mla	r3, r1, r3, r2
 80012b0:	6c9d      	ldr	r5, [r3, #72]	; 0x48
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80012b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80012b4:	2d02      	cmp	r5, #2
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80012b6:	60e3      	str	r3, [r4, #12]
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80012b8:	bf18      	it	ne
 80012ba:	2500      	movne	r5, #0
  hDma2dHandler.Instance = DMA2D;
 80012bc:	4b10      	ldr	r3, [pc, #64]	; (8001300 <LL_FillBuffer+0x74>)
 80012be:	60a5      	str	r5, [r4, #8]
 80012c0:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80012c2:	f000 fe00 	bl	8001ec6 <HAL_DMA2D_Init>
 80012c6:	b9a0      	cbnz	r0, 80012f2 <LL_FillBuffer+0x66>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80012c8:	4649      	mov	r1, r9
 80012ca:	4620      	mov	r0, r4
 80012cc:	f000 fec2 	bl	8002054 <HAL_DMA2D_ConfigLayer>
 80012d0:	b978      	cbnz	r0, 80012f2 <LL_FillBuffer+0x66>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80012d2:	463b      	mov	r3, r7
 80012d4:	4632      	mov	r2, r6
 80012d6:	4651      	mov	r1, sl
 80012d8:	4620      	mov	r0, r4
 80012da:	f8cd 8000 	str.w	r8, [sp]
 80012de:	f000 fe1e 	bl	8001f1e <HAL_DMA2D_Start>
 80012e2:	b930      	cbnz	r0, 80012f2 <LL_FillBuffer+0x66>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80012e4:	210a      	movs	r1, #10
 80012e6:	4620      	mov	r0, r4
      }
    }
  } 
}
 80012e8:	b002      	add	sp, #8
 80012ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80012ee:	f000 be30 	b.w	8001f52 <HAL_DMA2D_PollForTransfer>
}
 80012f2:	b002      	add	sp, #8
 80012f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012f8:	200000dc 	.word	0x200000dc
 80012fc:	2000a6d4 	.word	0x2000a6d4
 8001300:	4002b000 	.word	0x4002b000

08001304 <BSP_LCD_GetXSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001304:	4b03      	ldr	r3, [pc, #12]	; (8001314 <BSP_LCD_GetXSize+0x10>)
 8001306:	2134      	movs	r1, #52	; 0x34
 8001308:	4a03      	ldr	r2, [pc, #12]	; (8001318 <BSP_LCD_GetXSize+0x14>)
 800130a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130c:	fb01 2303 	mla	r3, r1, r3, r2
}
 8001310:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8001312:	4770      	bx	lr
 8001314:	200000dc 	.word	0x200000dc
 8001318:	2000a6d4 	.word	0x2000a6d4

0800131c <BSP_LCD_GetYSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 800131c:	4b03      	ldr	r3, [pc, #12]	; (800132c <BSP_LCD_GetYSize+0x10>)
 800131e:	2134      	movs	r1, #52	; 0x34
 8001320:	4a03      	ldr	r2, [pc, #12]	; (8001330 <BSP_LCD_GetYSize+0x14>)
 8001322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001324:	fb01 2303 	mla	r3, r1, r3, r2
}
 8001328:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800132a:	4770      	bx	lr
 800132c:	200000dc 	.word	0x200000dc
 8001330:	2000a6d4 	.word	0x2000a6d4

08001334 <BSP_LCD_LayerDefaultInit>:
{     
 8001334:	b570      	push	{r4, r5, r6, lr}
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001336:	4d18      	ldr	r5, [pc, #96]	; (8001398 <BSP_LCD_LayerDefaultInit+0x64>)
{     
 8001338:	4604      	mov	r4, r0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800133a:	2634      	movs	r6, #52	; 0x34
 800133c:	4817      	ldr	r0, [pc, #92]	; (800139c <BSP_LCD_LayerDefaultInit+0x68>)
 800133e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
{     
 8001340:	b08e      	sub	sp, #56	; 0x38
  layer_cfg.WindowX0 = 0;
 8001342:	2300      	movs	r3, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001344:	fb06 0202 	mla	r2, r6, r2, r0
  layer_cfg.FBStartAdress = FB_Address;
 8001348:	910a      	str	r1, [sp, #40]	; 0x28
  layer_cfg.Alpha = 255;
 800134a:	21ff      	movs	r1, #255	; 0xff
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800134c:	6e16      	ldr	r6, [r2, #96]	; 0x60
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 800134e:	6e52      	ldr	r2, [r2, #100]	; 0x64
  layer_cfg.WindowX0 = 0;
 8001350:	9301      	str	r3, [sp, #4]
  layer_cfg.Backcolor.Blue = 0;
 8001352:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  layer_cfg.Backcolor.Red = 0;
 8001356:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800135a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  layer_cfg.Alpha0 = 0;
 800135e:	e9cd 1306 	strd	r1, r3, [sp, #24]
  layer_cfg.WindowY0 = 0;
 8001362:	e9cd 6302 	strd	r6, r3, [sp, #8]
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001366:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800136a:	2307      	movs	r3, #7
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 800136c:	e9cd 620b 	strd	r6, r2, [sp, #44]	; 0x2c
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001370:	e9cd 1308 	strd	r1, r3, [sp, #32]
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8001374:	4622      	mov	r2, r4
 8001376:	a901      	add	r1, sp, #4
 8001378:	f001 fc34 	bl	8002be4 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800137c:	200c      	movs	r0, #12
 800137e:	f04f 33ff 	mov.w	r3, #4294967295
 8001382:	fb00 5004 	mla	r0, r0, r4, r5
 8001386:	6483      	str	r3, [r0, #72]	; 0x48
  DrawProp[LayerIndex].pFont     = &Font24;
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <BSP_LCD_LayerDefaultInit+0x6c>)
 800138a:	64c3      	str	r3, [r0, #76]	; 0x4c
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800138c:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001390:	6443      	str	r3, [r0, #68]	; 0x44
}
 8001392:	b00e      	add	sp, #56	; 0x38
 8001394:	bd70      	pop	{r4, r5, r6, pc}
 8001396:	bf00      	nop
 8001398:	200000dc 	.word	0x200000dc
 800139c:	2000a6d4 	.word	0x2000a6d4
 80013a0:	20000000 	.word	0x20000000

080013a4 <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 80013a4:	4b01      	ldr	r3, [pc, #4]	; (80013ac <BSP_LCD_SelectLayer+0x8>)
 80013a6:	6418      	str	r0, [r3, #64]	; 0x40
} 
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	200000dc 	.word	0x200000dc

080013b0 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 80013b0:	4a03      	ldr	r2, [pc, #12]	; (80013c0 <BSP_LCD_SetTextColor+0x10>)
 80013b2:	210c      	movs	r1, #12
 80013b4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80013b6:	fb01 2303 	mla	r3, r1, r3, r2
 80013ba:	6458      	str	r0, [r3, #68]	; 0x44
}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	200000dc 	.word	0x200000dc

080013c4 <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
 80013c4:	4a03      	ldr	r2, [pc, #12]	; (80013d4 <BSP_LCD_SetBackColor+0x10>)
 80013c6:	210c      	movs	r1, #12
 80013c8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80013ca:	fb01 2303 	mla	r3, r1, r3, r2
 80013ce:	6498      	str	r0, [r3, #72]	; 0x48
}
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	200000dc 	.word	0x200000dc

080013d8 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
 80013d8:	4a03      	ldr	r2, [pc, #12]	; (80013e8 <BSP_LCD_SetFont+0x10>)
 80013da:	210c      	movs	r1, #12
 80013dc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80013de:	fb01 2303 	mla	r3, r1, r3, r2
 80013e2:	64d8      	str	r0, [r3, #76]	; 0x4c
}
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	200000dc 	.word	0x200000dc

080013ec <BSP_LCD_GetFont>:
  return DrawProp[ActiveLayer].pFont;
 80013ec:	4a03      	ldr	r2, [pc, #12]	; (80013fc <BSP_LCD_GetFont+0x10>)
 80013ee:	210c      	movs	r1, #12
 80013f0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80013f2:	fb01 2303 	mla	r3, r1, r3, r2
}
 80013f6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	200000dc 	.word	0x200000dc

08001400 <BSP_LCD_Clear>:
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001400:	4b08      	ldr	r3, [pc, #32]	; (8001424 <BSP_LCD_Clear+0x24>)
{ 
 8001402:	b513      	push	{r0, r1, r4, lr}
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001404:	6c1c      	ldr	r4, [r3, #64]	; 0x40
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8001406:	2134      	movs	r1, #52	; 0x34
 8001408:	4b07      	ldr	r3, [pc, #28]	; (8001428 <BSP_LCD_Clear+0x28>)
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800140a:	9001      	str	r0, [sp, #4]
 800140c:	4620      	mov	r0, r4
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 800140e:	fb01 3104 	mla	r1, r1, r4, r3
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001412:	2300      	movs	r3, #0
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	e9d1 2318 	ldrd	r2, r3, [r1, #96]	; 0x60
 800141a:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
 800141c:	f7ff ff36 	bl	800128c <LL_FillBuffer>
}
 8001420:	b002      	add	sp, #8
 8001422:	bd10      	pop	{r4, pc}
 8001424:	200000dc 	.word	0x200000dc
 8001428:	2000a6d4 	.word	0x2000a6d4

0800142c <BSP_LCD_DrawPixel>:
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800142c:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <BSP_LCD_DrawPixel+0x2c>)
{
 800142e:	b530      	push	{r4, r5, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	2534      	movs	r5, #52	; 0x34
 8001434:	4c09      	ldr	r4, [pc, #36]	; (800145c <BSP_LCD_DrawPixel+0x30>)
 8001436:	fb05 4303 	mla	r3, r5, r3, r4
 800143a:	e9d3 4517 	ldrd	r4, r5, [r3, #92]	; 0x5c
 800143e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001440:	fb05 0101 	mla	r1, r5, r1, r0
 8001444:	2b02      	cmp	r3, #2
 8001446:	d103      	bne.n	8001450 <BSP_LCD_DrawPixel+0x24>
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8001448:	b292      	uxth	r2, r2
 800144a:	f824 2011 	strh.w	r2, [r4, r1, lsl #1]
}
 800144e:	bd30      	pop	{r4, r5, pc}
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001450:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
}
 8001454:	e7fb      	b.n	800144e <BSP_LCD_DrawPixel+0x22>
 8001456:	bf00      	nop
 8001458:	200000dc 	.word	0x200000dc
 800145c:	2000a6d4 	.word	0x2000a6d4

08001460 <BSP_LCD_DisplayChar>:
{
 8001460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001464:	b085      	sub	sp, #20
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001466:	f1a2 0520 	sub.w	r5, r2, #32
  for(i = 0; i < height; i++)
 800146a:	f04f 0800 	mov.w	r8, #0
{
 800146e:	e9cd 0100 	strd	r0, r1, [sp]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001472:	4828      	ldr	r0, [pc, #160]	; (8001514 <BSP_LCD_DisplayChar+0xb4>)
 8001474:	210c      	movs	r1, #12
 8001476:	f8d0 b040 	ldr.w	fp, [r0, #64]	; 0x40
 800147a:	fb01 010b 	mla	r1, r1, fp, r0
 800147e:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001480:	f8b1 9004 	ldrh.w	r9, [r1, #4]
 8001484:	f8b1 a006 	ldrh.w	sl, [r1, #6]
 8001488:	f109 0607 	add.w	r6, r9, #7
 800148c:	680a      	ldr	r2, [r1, #0]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800148e:	fb0a f505 	mul.w	r5, sl, r5
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001492:	10f6      	asrs	r6, r6, #3
  offset =  8 *((width + 7)/8) -  width ;
 8001494:	ebc9 00c6 	rsb	r0, r9, r6, lsl #3
  for(i = 0; i < height; i++)
 8001498:	fb06 2505 	mla	r5, r6, r5, r2
      if(line & (1 << (width- j + offset- 1))) 
 800149c:	f109 32ff 	add.w	r2, r9, #4294967295
 80014a0:	fa52 f380 	uxtab	r3, r2, r0
 80014a4:	9302      	str	r3, [sp, #8]
 80014a6:	9b01      	ldr	r3, [sp, #4]
  for(i = 0; i < height; i++)
 80014a8:	45d0      	cmp	r8, sl
 80014aa:	eb03 0108 	add.w	r1, r3, r8
 80014ae:	b289      	uxth	r1, r1
 80014b0:	d302      	bcc.n	80014b8 <BSP_LCD_DisplayChar+0x58>
}
 80014b2:	b005      	add	sp, #20
 80014b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
 80014b8:	2e01      	cmp	r6, #1
 80014ba:	782c      	ldrb	r4, [r5, #0]
 80014bc:	d004      	beq.n	80014c8 <BSP_LCD_DisplayChar+0x68>
 80014be:	2e02      	cmp	r6, #2
 80014c0:	d109      	bne.n	80014d6 <BSP_LCD_DisplayChar+0x76>
      line =  (pchar[0]<< 8) | pchar[1];      
 80014c2:	882c      	ldrh	r4, [r5, #0]
 80014c4:	ba64      	rev16	r4, r4
 80014c6:	b2a4      	uxth	r4, r4
    for (j = 0; j < width; j++)
 80014c8:	2700      	movs	r7, #0
 80014ca:	45b9      	cmp	r9, r7
 80014cc:	d80a      	bhi.n	80014e4 <BSP_LCD_DisplayChar+0x84>
  for(i = 0; i < height; i++)
 80014ce:	f108 0801 	add.w	r8, r8, #1
 80014d2:	4435      	add	r5, r6
 80014d4:	e7e7      	b.n	80014a6 <BSP_LCD_DisplayChar+0x46>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80014d6:	786a      	ldrb	r2, [r5, #1]
 80014d8:	0424      	lsls	r4, r4, #16
 80014da:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 80014de:	78aa      	ldrb	r2, [r5, #2]
 80014e0:	4314      	orrs	r4, r2
      break;
 80014e2:	e7f1      	b.n	80014c8 <BSP_LCD_DisplayChar+0x68>
      if(line & (1 << (width- j + offset- 1))) 
 80014e4:	9b00      	ldr	r3, [sp, #0]
 80014e6:	2201      	movs	r2, #1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80014e8:	9103      	str	r1, [sp, #12]
 80014ea:	19d8      	adds	r0, r3, r7
      if(line & (1 << (width- j + offset- 1))) 
 80014ec:	9b02      	ldr	r3, [sp, #8]
 80014ee:	eba3 0c07 	sub.w	ip, r3, r7
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80014f2:	4b08      	ldr	r3, [pc, #32]	; (8001514 <BSP_LCD_DisplayChar+0xb4>)
 80014f4:	b280      	uxth	r0, r0
    for (j = 0; j < width; j++)
 80014f6:	3701      	adds	r7, #1
      if(line & (1 << (width- j + offset- 1))) 
 80014f8:	fa02 f20c 	lsl.w	r2, r2, ip
 80014fc:	4222      	tst	r2, r4
 80014fe:	f04f 020c 	mov.w	r2, #12
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001502:	fb02 320b 	mla	r2, r2, fp, r3
 8001506:	bf14      	ite	ne
 8001508:	6c52      	ldrne	r2, [r2, #68]	; 0x44
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800150a:	6c92      	ldreq	r2, [r2, #72]	; 0x48
 800150c:	f7ff ff8e 	bl	800142c <BSP_LCD_DrawPixel>
 8001510:	9903      	ldr	r1, [sp, #12]
    for (j = 0; j < width; j++)
 8001512:	e7da      	b.n	80014ca <BSP_LCD_DisplayChar+0x6a>
 8001514:	200000dc 	.word	0x200000dc

08001518 <BSP_LCD_DisplayStringAt>:
{
 8001518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800151c:	4605      	mov	r5, r0
 800151e:	468a      	mov	sl, r1
 8001520:	4616      	mov	r6, r2
  while (*ptr++) size ++ ;
 8001522:	4614      	mov	r4, r2
 8001524:	f812 0b01 	ldrb.w	r0, [r2], #1
 8001528:	2800      	cmp	r0, #0
 800152a:	d1fa      	bne.n	8001522 <BSP_LCD_DisplayStringAt+0xa>
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800152c:	4824      	ldr	r0, [pc, #144]	; (80015c0 <BSP_LCD_DisplayStringAt+0xa8>)
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800152e:	220c      	movs	r2, #12
  switch (Mode)
 8001530:	2b01      	cmp	r3, #1
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001532:	6c01      	ldr	r1, [r0, #64]	; 0x40
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001534:	fb02 0201 	mla	r2, r2, r1, r0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001538:	f04f 0034 	mov.w	r0, #52	; 0x34
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800153c:	6cd7      	ldr	r7, [r2, #76]	; 0x4c
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800153e:	4a21      	ldr	r2, [pc, #132]	; (80015c4 <BSP_LCD_DisplayStringAt+0xac>)
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001540:	f8b7 e004 	ldrh.w	lr, [r7, #4]
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001544:	fb00 2001 	mla	r0, r0, r1, r2
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001548:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800154a:	fbb0 f0fe 	udiv	r0, r0, lr
  switch (Mode)
 800154e:	d021      	beq.n	8001594 <BSP_LCD_DisplayStringAt+0x7c>
 8001550:	2b02      	cmp	r3, #2
 8001552:	d027      	beq.n	80015a4 <BSP_LCD_DisplayStringAt+0x8c>
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8001554:	b22b      	sxth	r3, r5
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001556:	f04f 0834 	mov.w	r8, #52	; 0x34
    ref_column = 1;
 800155a:	f04f 0900 	mov.w	r9, #0
 800155e:	2b00      	cmp	r3, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001560:	fb08 2801 	mla	r8, r8, r1, r2
    ref_column = 1;
 8001564:	bfd8      	it	le
 8001566:	2501      	movle	r5, #1
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001568:	88bc      	ldrh	r4, [r7, #4]
 800156a:	fa1f f389 	uxth.w	r3, r9
 800156e:	f8d8 0060 	ldr.w	r0, [r8, #96]	; 0x60
 8001572:	f816 2009 	ldrb.w	r2, [r6, r9]
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001576:	f109 0901 	add.w	r9, r9, #1
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800157a:	fb04 0313 	mls	r3, r4, r3, r0
 800157e:	b29b      	uxth	r3, r3
 8001580:	42a3      	cmp	r3, r4
 8001582:	bf34      	ite	cc
 8001584:	2300      	movcc	r3, #0
 8001586:	2301      	movcs	r3, #1
 8001588:	2a00      	cmp	r2, #0
 800158a:	bf08      	it	eq
 800158c:	2300      	moveq	r3, #0
 800158e:	b97b      	cbnz	r3, 80015b0 <BSP_LCD_DisplayStringAt+0x98>
}
 8001590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8001594:	1b34      	subs	r4, r6, r4
 8001596:	4404      	add	r4, r0
 8001598:	fb0e f404 	mul.w	r4, lr, r4
 800159c:	eb05 0054 	add.w	r0, r5, r4, lsr #1
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80015a0:	b285      	uxth	r5, r0
      break;
 80015a2:	e7d7      	b.n	8001554 <BSP_LCD_DisplayStringAt+0x3c>
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80015a4:	1b34      	subs	r4, r6, r4
 80015a6:	4404      	add	r4, r0
 80015a8:	fb14 f40e 	smulbb	r4, r4, lr
 80015ac:	1b60      	subs	r0, r4, r5
 80015ae:	e7f7      	b.n	80015a0 <BSP_LCD_DisplayStringAt+0x88>
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80015b0:	4628      	mov	r0, r5
 80015b2:	4651      	mov	r1, sl
 80015b4:	f7ff ff54 	bl	8001460 <BSP_LCD_DisplayChar>
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 80015b8:	88b8      	ldrh	r0, [r7, #4]
 80015ba:	4428      	add	r0, r5
 80015bc:	b285      	uxth	r5, r0
    i++;
 80015be:	e7d3      	b.n	8001568 <BSP_LCD_DisplayStringAt+0x50>
 80015c0:	200000dc 	.word	0x200000dc
 80015c4:	2000a6d4 	.word	0x2000a6d4

080015c8 <BSP_LCD_DisplayStringAtLine>:
{  
 80015c8:	b410      	push	{r4}
  return DrawProp[ActiveLayer].pFont;
 80015ca:	4c08      	ldr	r4, [pc, #32]	; (80015ec <BSP_LCD_DisplayStringAtLine+0x24>)
{  
 80015cc:	460a      	mov	r2, r1
  return DrawProp[ActiveLayer].pFont;
 80015ce:	210c      	movs	r1, #12
 80015d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015d2:	fb01 4303 	mla	r3, r1, r3, r4
}
 80015d6:	f85d 4b04 	ldr.w	r4, [sp], #4
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80015da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015dc:	88db      	ldrh	r3, [r3, #6]
 80015de:	fb13 f000 	smulbb	r0, r3, r0
 80015e2:	2303      	movs	r3, #3
 80015e4:	b281      	uxth	r1, r0
 80015e6:	2000      	movs	r0, #0
 80015e8:	f7ff bf96 	b.w	8001518 <BSP_LCD_DisplayStringAt>
 80015ec:	200000dc 	.word	0x200000dc

080015f0 <BSP_LCD_FillRect>:
{
 80015f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80015f2:	4d0f      	ldr	r5, [pc, #60]	; (8001630 <BSP_LCD_FillRect+0x40>)
 80015f4:	240c      	movs	r4, #12
 80015f6:	6c2f      	ldr	r7, [r5, #64]	; 0x40
 80015f8:	fb04 5407 	mla	r4, r4, r7, r5
 80015fc:	2534      	movs	r5, #52	; 0x34
 80015fe:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001602:	4c0c      	ldr	r4, [pc, #48]	; (8001634 <BSP_LCD_FillRect+0x44>)
 8001604:	fb05 4507 	mla	r5, r5, r7, r4
 8001608:	e9d5 4617 	ldrd	r4, r6, [r5, #92]	; 0x5c
 800160c:	fb06 0101 	mla	r1, r6, r1, r0
 8001610:	6ca8      	ldr	r0, [r5, #72]	; 0x48
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001612:	1ab6      	subs	r6, r6, r2
 8001614:	f8cd c004 	str.w	ip, [sp, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001618:	2802      	cmp	r0, #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 800161a:	4638      	mov	r0, r7
 800161c:	9600      	str	r6, [sp, #0]
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800161e:	bf0c      	ite	eq
 8001620:	eb04 0141 	addeq.w	r1, r4, r1, lsl #1
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001624:	eb04 0181 	addne.w	r1, r4, r1, lsl #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001628:	f7ff fe30 	bl	800128c <LL_FillBuffer>
}
 800162c:	b003      	add	sp, #12
 800162e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001630:	200000dc 	.word	0x200000dc
 8001634:	2000a6d4 	.word	0x2000a6d4

08001638 <BSP_LCD_MspInit>:
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001638:	4b4b      	ldr	r3, [pc, #300]	; (8001768 <BSP_LCD_MspInit+0x130>)
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800163a:	484c      	ldr	r0, [pc, #304]	; (800176c <BSP_LCD_MspInit+0x134>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 800163c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800163e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
{
 8001642:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001644:	645a      	str	r2, [r3, #68]	; 0x44
{
 8001646:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001648:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800164a:	2402      	movs	r4, #2
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800164c:	250e      	movs	r5, #14
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800164e:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001650:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8001654:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8001658:	4e45      	ldr	r6, [pc, #276]	; (8001770 <BSP_LCD_MspInit+0x138>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 800165a:	9200      	str	r2, [sp, #0]
 800165c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800165e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001660:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001664:	631a      	str	r2, [r3, #48]	; 0x30
 8001666:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001668:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 800166c:	9201      	str	r2, [sp, #4]
 800166e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001672:	f042 0210 	orr.w	r2, r2, #16
 8001676:	631a      	str	r2, [r3, #48]	; 0x30
 8001678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800167a:	f002 0210 	and.w	r2, r2, #16
 800167e:	9202      	str	r2, [sp, #8]
 8001680:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001684:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001688:	631a      	str	r2, [r3, #48]	; 0x30
 800168a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800168c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001690:	9203      	str	r2, [sp, #12]
 8001692:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001694:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001696:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800169a:	631a      	str	r2, [r3, #48]	; 0x30
 800169c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800169e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80016a2:	9204      	str	r2, [sp, #16]
 80016a4:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80016a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016ac:	631a      	str	r2, [r3, #48]	; 0x30
 80016ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016b0:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80016b4:	9205      	str	r2, [sp, #20]
 80016b6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80016b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80016be:	631a      	str	r2, [r3, #48]	; 0x30
 80016c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016c2:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80016c6:	9206      	str	r2, [sp, #24]
 80016c8:	9a06      	ldr	r2, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
 80016ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016d0:	631a      	str	r2, [r3, #48]	; 0x30
 80016d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016d4:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80016d8:	9207      	str	r2, [sp, #28]
 80016da:	9a07      	ldr	r2, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80016dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80016e2:	631a      	str	r2, [r3, #48]	; 0x30
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80016e6:	950d      	str	r5, [sp, #52]	; 0x34
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80016e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ec:	9308      	str	r3, [sp, #32]
 80016ee:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80016f0:	2310      	movs	r3, #16
 80016f2:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80016f8:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80016fc:	f001 f896 	bl	800282c <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8001700:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001702:	a909      	add	r1, sp, #36	; 0x24
 8001704:	481b      	ldr	r0, [pc, #108]	; (8001774 <BSP_LCD_MspInit+0x13c>)
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8001706:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001708:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800170c:	f001 f88e 	bl	800282c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8001710:	f44f 4366 	mov.w	r3, #58880	; 0xe600
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8001714:	a909      	add	r1, sp, #36	; 0x24
 8001716:	4630      	mov	r0, r6
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001718:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800171a:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800171e:	f001 f885 	bl	800282c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8001722:	f64e 73ff 	movw	r3, #61439	; 0xefff
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8001726:	a909      	add	r1, sp, #36	; 0x24
 8001728:	4813      	ldr	r0, [pc, #76]	; (8001778 <BSP_LCD_MspInit+0x140>)
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800172a:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800172c:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8001730:	f001 f87c 	bl	800282c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8001734:	23f7      	movs	r3, #247	; 0xf7
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8001736:	a909      	add	r1, sp, #36	; 0x24
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001738:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800173a:	2501      	movs	r5, #1
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800173c:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8001740:	4c0e      	ldr	r4, [pc, #56]	; (800177c <BSP_LCD_MspInit+0x144>)
 8001742:	4620      	mov	r0, r4
 8001744:	f001 f872 	bl	800282c <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8001748:	a909      	add	r1, sp, #36	; 0x24
 800174a:	4630      	mov	r0, r6
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 800174c:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800174e:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8001750:	f001 f86c 	bl	800282c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8001754:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8001756:	a909      	add	r1, sp, #36	; 0x24
 8001758:	4620      	mov	r0, r4
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800175a:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800175e:	f001 f865 	bl	800282c <HAL_GPIO_Init>
}
 8001762:	b00f      	add	sp, #60	; 0x3c
 8001764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001766:	bf00      	nop
 8001768:	40023800 	.word	0x40023800
 800176c:	40021000 	.word	0x40021000
 8001770:	40022000 	.word	0x40022000
 8001774:	40021800 	.word	0x40021800
 8001778:	40022400 	.word	0x40022400
 800177c:	40022800 	.word	0x40022800

08001780 <BSP_LCD_ClockConfig>:
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001780:	4806      	ldr	r0, [pc, #24]	; (800179c <BSP_LCD_ClockConfig+0x1c>)
 8001782:	2308      	movs	r3, #8
 8001784:	65c3      	str	r3, [r0, #92]	; 0x5c
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8001786:	23c0      	movs	r3, #192	; 0xc0
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8001788:	305c      	adds	r0, #92	; 0x5c
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 800178a:	6143      	str	r3, [r0, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800178c:	2305      	movs	r3, #5
 800178e:	61c3      	str	r3, [r0, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001790:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001794:	62c3      	str	r3, [r0, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8001796:	f001 bd4d 	b.w	8003234 <HAL_RCCEx_PeriphCLKConfig>
 800179a:	bf00      	nop
 800179c:	200000dc 	.word	0x200000dc

080017a0 <BSP_LCD_Init>:
{    
 80017a0:	b510      	push	{r4, lr}
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80017a2:	2228      	movs	r2, #40	; 0x28
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80017a4:	4c24      	ldr	r4, [pc, #144]	; (8001838 <BSP_LCD_Init+0x98>)
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80017a6:	2309      	movs	r3, #9
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80017a8:	2135      	movs	r1, #53	; 0x35
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80017aa:	f240 101b 	movw	r0, #283	; 0x11b
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80017ae:	f240 1c1d 	movw	ip, #285	; 0x11d
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80017b2:	e9c4 2305 	strd	r2, r3, [r4, #20]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80017b6:	230b      	movs	r3, #11
 80017b8:	e9c4 1307 	strd	r1, r3, [r4, #28]
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80017bc:	f240 2315 	movw	r3, #533	; 0x215
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80017c0:	2100      	movs	r1, #0
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80017c2:	e9c4 3009 	strd	r3, r0, [r4, #36]	; 0x24
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80017c6:	f240 2335 	movw	r3, #565	; 0x235
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80017ca:	4620      	mov	r0, r4
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80017cc:	e9c4 3c0b 	strd	r3, ip, [r4, #44]	; 0x2c
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80017d0:	f7ff ffd6 	bl	8001780 <BSP_LCD_ClockConfig>
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80017d4:	f44f 7ef0 	mov.w	lr, #480	; 0x1e0
 80017d8:	f44f 7388 	mov.w	r3, #272	; 0x110
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80017dc:	4620      	mov	r0, r4
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80017de:	e9c4 e318 	strd	lr, r3, [r4, #96]	; 0x60
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	86a3      	strh	r3, [r4, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Red = 0;
 80017e6:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80017ea:	e9c4 3301 	strd	r3, r3, [r4, #4]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80017ee:	e9c4 3303 	strd	r3, r3, [r4, #12]
  hLtdcHandler.Instance = LTDC;
 80017f2:	4b12      	ldr	r3, [pc, #72]	; (800183c <BSP_LCD_Init+0x9c>)
 80017f4:	6023      	str	r3, [r4, #0]
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80017f6:	f001 fa22 	bl	8002c3e <HAL_LTDC_GetState>
 80017fa:	4601      	mov	r1, r0
 80017fc:	b910      	cbnz	r0, 8001804 <BSP_LCD_Init+0x64>
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80017fe:	4620      	mov	r0, r4
 8001800:	f7ff ff1a 	bl	8001638 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&hLtdcHandler);
 8001804:	480c      	ldr	r0, [pc, #48]	; (8001838 <BSP_LCD_Init+0x98>)
 8001806:	f001 f981 	bl	8002b0c <HAL_LTDC_Init>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 800180a:	2201      	movs	r2, #1
 800180c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001810:	480b      	ldr	r0, [pc, #44]	; (8001840 <BSP_LCD_Init+0xa0>)
 8001812:	f001 f8ef 	bl	80029f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8001816:	2201      	movs	r2, #1
 8001818:	2108      	movs	r1, #8
 800181a:	480a      	ldr	r0, [pc, #40]	; (8001844 <BSP_LCD_Init+0xa4>)
 800181c:	f001 f8ea 	bl	80029f4 <HAL_GPIO_WritePin>
  BSP_SDRAM_Init();
 8001820:	f000 f91e 	bl	8001a60 <BSP_SDRAM_Init>
  DrawProp[ActiveLayer].pFont = fonts;
 8001824:	4a08      	ldr	r2, [pc, #32]	; (8001848 <BSP_LCD_Init+0xa8>)
 8001826:	210c      	movs	r1, #12
}
 8001828:	2000      	movs	r0, #0
  DrawProp[ActiveLayer].pFont = fonts;
 800182a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800182c:	fb01 2303 	mla	r3, r1, r3, r2
 8001830:	4a06      	ldr	r2, [pc, #24]	; (800184c <BSP_LCD_Init+0xac>)
 8001832:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001834:	bd10      	pop	{r4, pc}
 8001836:	bf00      	nop
 8001838:	2000a6d4 	.word	0x2000a6d4
 800183c:	40016800 	.word	0x40016800
 8001840:	40022000 	.word	0x40022000
 8001844:	40022800 	.word	0x40022800
 8001848:	200000dc 	.word	0x200000dc
 800184c:	20000000 	.word	0x20000000

08001850 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001850:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001854:	4c21      	ldr	r4, [pc, #132]	; (80018dc <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001856:	2601      	movs	r6, #1
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001858:	4d21      	ldr	r5, [pc, #132]	; (80018e0 <BSP_SDRAM_Initialization_sequence+0x90>)
  __IO uint32_t tmpmrd = 0;
 800185a:	f04f 0800 	mov.w	r8, #0
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800185e:	2710      	movs	r7, #16
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001860:	4621      	mov	r1, r4
{
 8001862:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001864:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001868:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
 800186a:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800186e:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 8001872:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001876:	f001 ff86 	bl	8003786 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800187a:	4630      	mov	r0, r6
 800187c:	f000 f972 	bl	8001b64 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8001880:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8001882:	4621      	mov	r1, r4
 8001884:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001888:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800188a:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 800188e:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8001892:	f001 ff78 	bl	8003786 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001896:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001898:	4621      	mov	r1, r4
 800189a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800189e:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80018a0:	e9c4 3700 	strd	r3, r7, [r4]
  Command.AutoRefreshNumber      = 8;
 80018a4:	2308      	movs	r3, #8
  Command.ModeRegisterDefinition = 0;
 80018a6:	e9c4 3802 	strd	r3, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80018aa:	f001 ff6c 	bl	8003786 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80018ae:	f44f 7308 	mov.w	r3, #544	; 0x220
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80018b2:	4621      	mov	r1, r4
 80018b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80018b8:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80018ba:	2304      	movs	r3, #4
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80018bc:	4628      	mov	r0, r5
  Command.AutoRefreshNumber      = 1;
 80018be:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80018c0:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
 80018c4:	9b01      	ldr	r3, [sp, #4]
 80018c6:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80018c8:	f001 ff5d 	bl	8003786 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80018cc:	4649      	mov	r1, r9
 80018ce:	4628      	mov	r0, r5
}
 80018d0:	b003      	add	sp, #12
 80018d2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80018d6:	f001 bf75 	b.w	80037c4 <HAL_SDRAM_ProgramRefreshRate>
 80018da:	bf00      	nop
 80018dc:	200001bc 	.word	0x200001bc
 80018e0:	2000a77c 	.word	0x2000a77c

080018e4 <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80018e4:	4b55      	ldr	r3, [pc, #340]	; (8001a3c <BSP_SDRAM_MspInit+0x158>)
 80018e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018e8:	f042 0201 	orr.w	r2, r2, #1
{  
 80018ec:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 80018ee:	639a      	str	r2, [r3, #56]	; 0x38
{  
 80018f0:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
 80018f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{  
 80018f4:	4606      	mov	r6, r0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80018f6:	a909      	add	r1, sp, #36	; 0x24
 80018f8:	4851      	ldr	r0, [pc, #324]	; (8001a40 <BSP_SDRAM_MspInit+0x15c>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80018fa:	f002 0201 	and.w	r2, r2, #1
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80018fe:	2400      	movs	r4, #0
  __HAL_RCC_FMC_CLK_ENABLE();
 8001900:	9201      	str	r2, [sp, #4]
 8001902:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 8001904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001906:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800190a:	631a      	str	r2, [r3, #48]	; 0x30
 800190c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800190e:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001912:	9202      	str	r2, [sp, #8]
 8001914:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001916:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001918:	f042 0204 	orr.w	r2, r2, #4
 800191c:	631a      	str	r2, [r3, #48]	; 0x30
 800191e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001920:	f002 0204 	and.w	r2, r2, #4
 8001924:	9203      	str	r2, [sp, #12]
 8001926:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001928:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800192a:	f042 0208 	orr.w	r2, r2, #8
 800192e:	631a      	str	r2, [r3, #48]	; 0x30
 8001930:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001932:	f002 0208 	and.w	r2, r2, #8
 8001936:	9204      	str	r2, [sp, #16]
 8001938:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800193a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800193c:	f042 0210 	orr.w	r2, r2, #16
 8001940:	631a      	str	r2, [r3, #48]	; 0x30
 8001942:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001944:	f002 0210 	and.w	r2, r2, #16
 8001948:	9205      	str	r2, [sp, #20]
 800194a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800194c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800194e:	f042 0220 	orr.w	r2, r2, #32
 8001952:	631a      	str	r2, [r3, #48]	; 0x30
 8001954:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001956:	f002 0220 	and.w	r2, r2, #32
 800195a:	9206      	str	r2, [sp, #24]
 800195c:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800195e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001960:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001964:	631a      	str	r2, [r3, #48]	; 0x30
 8001966:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001968:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800196c:	9207      	str	r2, [sp, #28]
 800196e:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001970:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001972:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001976:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001978:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800197a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001980:	9308      	str	r3, [sp, #32]
 8001982:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001984:	2302      	movs	r3, #2
 8001986:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800198a:	930c      	str	r3, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800198c:	230c      	movs	r3, #12
 800198e:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8001990:	2308      	movs	r3, #8
 8001992:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8001994:	f000 ff4a 	bl	800282c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8001998:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800199c:	a909      	add	r1, sp, #36	; 0x24
 800199e:	4829      	ldr	r0, [pc, #164]	; (8001a44 <BSP_SDRAM_MspInit+0x160>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80019a0:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80019a2:	f000 ff43 	bl	800282c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80019a6:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80019aa:	a909      	add	r1, sp, #36	; 0x24
 80019ac:	4826      	ldr	r0, [pc, #152]	; (8001a48 <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80019ae:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80019b0:	f000 ff3c 	bl	800282c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80019b4:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80019b8:	a909      	add	r1, sp, #36	; 0x24
 80019ba:	4824      	ldr	r0, [pc, #144]	; (8001a4c <BSP_SDRAM_MspInit+0x168>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80019bc:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80019be:	f000 ff35 	bl	800282c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80019c2:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80019c6:	a909      	add	r1, sp, #36	; 0x24
 80019c8:	4821      	ldr	r0, [pc, #132]	; (8001a50 <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80019ca:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80019cc:	f000 ff2e 	bl	800282c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80019d0:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80019d2:	a909      	add	r1, sp, #36	; 0x24
 80019d4:	481f      	ldr	r0, [pc, #124]	; (8001a54 <BSP_SDRAM_MspInit+0x170>)
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80019d6:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80019d8:	f000 ff28 	bl	800282c <HAL_GPIO_Init>
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80019dc:	4b1e      	ldr	r3, [pc, #120]	; (8001a58 <BSP_SDRAM_MspInit+0x174>)
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80019de:	2280      	movs	r2, #128	; 0x80
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80019e0:	f44f 7100 	mov.w	r1, #512	; 0x200
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80019e4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80019e8:	461d      	mov	r5, r3
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80019ea:	641c      	str	r4, [r3, #64]	; 0x40
  dma_handle.Init.Mode                = DMA_NORMAL;
 80019ec:	62dc      	str	r4, [r3, #44]	; 0x2c
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80019ee:	e9c3 4205 	strd	r4, r2, [r3, #20]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80019f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019f6:	e9c3 1207 	strd	r1, r2, [r3, #28]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80019fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019fe:	e9c3 0209 	strd	r0, r2, [r3, #36]	; 0x24
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001a02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8001a06:	e9c3 240c 	strd	r2, r4, [r3, #48]	; 0x30
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001a0a:	2203      	movs	r2, #3
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001a0c:	e9c3 240e 	strd	r2, r4, [r3, #56]	; 0x38
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8001a10:	4a12      	ldr	r2, [pc, #72]	; (8001a5c <BSP_SDRAM_MspInit+0x178>)
 8001a12:	f845 2f10 	str.w	r2, [r5, #16]!
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8001a16:	4628      	mov	r0, r5
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8001a18:	6335      	str	r5, [r6, #48]	; 0x30
 8001a1a:	649e      	str	r6, [r3, #72]	; 0x48
  HAL_DMA_DeInit(&dma_handle);
 8001a1c:	f000 f9e6 	bl	8001dec <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8001a20:	4628      	mov	r0, r5
 8001a22:	f000 f963 	bl	8001cec <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8001a26:	4622      	mov	r2, r4
 8001a28:	210f      	movs	r1, #15
 8001a2a:	2038      	movs	r0, #56	; 0x38
 8001a2c:	f000 f8be 	bl	8001bac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001a30:	2038      	movs	r0, #56	; 0x38
 8001a32:	f000 f8ed 	bl	8001c10 <HAL_NVIC_EnableIRQ>
}
 8001a36:	b00e      	add	sp, #56	; 0x38
 8001a38:	bd70      	pop	{r4, r5, r6, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40020800 	.word	0x40020800
 8001a44:	40020c00 	.word	0x40020c00
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40021400 	.word	0x40021400
 8001a50:	40021800 	.word	0x40021800
 8001a54:	40021c00 	.word	0x40021c00
 8001a58:	200001bc 	.word	0x200001bc
 8001a5c:	40026410 	.word	0x40026410

08001a60 <BSP_SDRAM_Init>:
{ 
 8001a60:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001a62:	4c1a      	ldr	r4, [pc, #104]	; (8001acc <BSP_SDRAM_Init+0x6c>)
  Timing.ExitSelfRefreshDelay = 7;
 8001a64:	2107      	movs	r1, #7
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001a66:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <BSP_SDRAM_Init+0x70>)
  Timing.SelfRefreshTime      = 4;
 8001a68:	2204      	movs	r2, #4
  Timing.LoadToActiveDelay    = 2;
 8001a6a:	4d1a      	ldr	r5, [pc, #104]	; (8001ad4 <BSP_SDRAM_Init+0x74>)
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001a6c:	f44f 6000 	mov.w	r0, #2048	; 0x800
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001a70:	6023      	str	r3, [r4, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8001a72:	2302      	movs	r3, #2
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001a74:	60e2      	str	r2, [r4, #12]
  Timing.RCDDelay             = 2;
 8001a76:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
  Timing.ExitSelfRefreshDelay = 7;
 8001a7a:	e9c5 311c 	strd	r3, r1, [r5, #112]	; 0x70
  Timing.RowCycleDelay        = 7;
 8001a7e:	e9c5 211e 	strd	r2, r1, [r5, #120]	; 0x78
  Timing.RPDelay              = 2;
 8001a82:	e9c5 3320 	strd	r3, r3, [r5, #128]	; 0x80
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001a86:	2210      	movs	r2, #16
 8001a88:	2340      	movs	r3, #64	; 0x40
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8001a8a:	2100      	movs	r1, #0
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001a8c:	e9c4 2304 	strd	r2, r3, [r4, #16]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8001a90:	f44f 7380 	mov.w	r3, #256	; 0x100
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8001a94:	62a1      	str	r1, [r4, #40]	; 0x28
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001a96:	e9c4 3106 	strd	r3, r1, [r4, #24]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001a9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a9e:	e9c4 0308 	strd	r0, r3, [r4, #32]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8001aa2:	4620      	mov	r0, r4
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001aa4:	e9c4 1101 	strd	r1, r1, [r4, #4]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8001aa8:	f7ff ff1c 	bl	80018e4 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8001aac:	f105 0170 	add.w	r1, r5, #112	; 0x70
 8001ab0:	4620      	mov	r0, r4
 8001ab2:	4c09      	ldr	r4, [pc, #36]	; (8001ad8 <BSP_SDRAM_Init+0x78>)
 8001ab4:	f001 fe47 	bl	8003746 <HAL_SDRAM_Init>
 8001ab8:	3800      	subs	r0, #0
 8001aba:	bf18      	it	ne
 8001abc:	2001      	movne	r0, #1
 8001abe:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001ac0:	f240 6003 	movw	r0, #1539	; 0x603
 8001ac4:	f7ff fec4 	bl	8001850 <BSP_SDRAM_Initialization_sequence>
}
 8001ac8:	7820      	ldrb	r0, [r4, #0]
 8001aca:	bd38      	pop	{r3, r4, r5, pc}
 8001acc:	2000a77c 	.word	0x2000a77c
 8001ad0:	a0000140 	.word	0xa0000140
 8001ad4:	200001bc 	.word	0x200001bc
 8001ad8:	20000028 	.word	0x20000028

08001adc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001adc:	490f      	ldr	r1, [pc, #60]	; (8001b1c <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ade:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ae0:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001ae4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ae8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8001aec:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <SystemInit+0x44>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	f042 0201 	orr.w	r2, r2, #1
 8001af4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001af6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001afe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b02:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001b04:	4a07      	ldr	r2, [pc, #28]	; (8001b24 <SystemInit+0x48>)
 8001b06:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b0e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001b10:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001b16:	608b      	str	r3, [r1, #8]
#endif
}
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	e000ed00 	.word	0xe000ed00
 8001b20:	40023800 	.word	0x40023800
 8001b24:	24003010 	.word	0x24003010

08001b28 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001b28:	4770      	bx	lr

08001b2a <HAL_Init>:
{
 8001b2a:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b2c:	2003      	movs	r0, #3
 8001b2e:	f000 f82b 	bl	8001b88 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b32:	200f      	movs	r0, #15
 8001b34:	f7ff f98c 	bl	8000e50 <HAL_InitTick>
  HAL_MspInit();
 8001b38:	f7ff fff6 	bl	8001b28 <HAL_MspInit>
}
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	bd08      	pop	{r3, pc}

08001b40 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001b40:	4a03      	ldr	r2, [pc, #12]	; (8001b50 <HAL_IncTick+0x10>)
 8001b42:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <HAL_IncTick+0x14>)
 8001b44:	6811      	ldr	r1, [r2, #0]
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	440b      	add	r3, r1
 8001b4a:	6013      	str	r3, [r2, #0]
}
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	2000a7b0 	.word	0x2000a7b0
 8001b54:	20000030 	.word	0x20000030

08001b58 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001b58:	4b01      	ldr	r3, [pc, #4]	; (8001b60 <HAL_GetTick+0x8>)
 8001b5a:	6818      	ldr	r0, [r3, #0]
}
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	2000a7b0 	.word	0x2000a7b0

08001b64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b64:	b538      	push	{r3, r4, r5, lr}
 8001b66:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001b68:	f7ff fff6 	bl	8001b58 <HAL_GetTick>
 8001b6c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b6e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001b70:	bf1e      	ittt	ne
 8001b72:	4b04      	ldrne	r3, [pc, #16]	; (8001b84 <HAL_Delay+0x20>)
 8001b74:	781b      	ldrbne	r3, [r3, #0]
 8001b76:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b78:	f7ff ffee 	bl	8001b58 <HAL_GetTick>
 8001b7c:	1b43      	subs	r3, r0, r5
 8001b7e:	42a3      	cmp	r3, r4
 8001b80:	d3fa      	bcc.n	8001b78 <HAL_Delay+0x14>
  {
  }
}
 8001b82:	bd38      	pop	{r3, r4, r5, pc}
 8001b84:	20000030 	.word	0x20000030

08001b88 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b88:	4907      	ldr	r1, [pc, #28]	; (8001ba8 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b8a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b8c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b8e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001b96:	0412      	lsls	r2, r2, #16
 8001b98:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001ba4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001ba6:	4770      	bx	lr
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bac:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bae:	b530      	push	{r4, r5, lr}
 8001bb0:	68dc      	ldr	r4, [r3, #12]
 8001bb2:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb6:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bba:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bbc:	2d04      	cmp	r5, #4
 8001bbe:	bf28      	it	cs
 8001bc0:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bc2:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc4:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bc8:	bf8c      	ite	hi
 8001bca:	3c03      	subhi	r4, #3
 8001bcc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bce:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 8001bd2:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bd4:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd8:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bdc:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be0:	fa01 f104 	lsl.w	r1, r1, r4
 8001be4:	ea41 0302 	orr.w	r3, r1, r2
 8001be8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001bec:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8001bee:	db06      	blt.n	8001bfe <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001bf4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001bf8:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001bfc:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfe:	f000 000f 	and.w	r0, r0, #15
 8001c02:	4a02      	ldr	r2, [pc, #8]	; (8001c0c <HAL_NVIC_SetPriority+0x60>)
 8001c04:	5413      	strb	r3, [r2, r0]
 8001c06:	e7f9      	b.n	8001bfc <HAL_NVIC_SetPriority+0x50>
 8001c08:	e000ed00 	.word	0xe000ed00
 8001c0c:	e000ed14 	.word	0xe000ed14

08001c10 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001c10:	2800      	cmp	r0, #0
 8001c12:	db08      	blt.n	8001c26 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c14:	0942      	lsrs	r2, r0, #5
 8001c16:	2301      	movs	r3, #1
 8001c18:	f000 001f 	and.w	r0, r0, #31
 8001c1c:	fa03 f000 	lsl.w	r0, r3, r0
 8001c20:	4b01      	ldr	r3, [pc, #4]	; (8001c28 <HAL_NVIC_EnableIRQ+0x18>)
 8001c22:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001c26:	4770      	bx	lr
 8001c28:	e000e100 	.word	0xe000e100

08001c2c <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001c2c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001c30:	4a04      	ldr	r2, [pc, #16]	; (8001c44 <HAL_MPU_Disable+0x18>)
 8001c32:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001c34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c38:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	4b02      	ldr	r3, [pc, #8]	; (8001c48 <HAL_MPU_Disable+0x1c>)
 8001c3e:	605a      	str	r2, [r3, #4]
}
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	e000ed00 	.word	0xe000ed00
 8001c48:	e000ed90 	.word	0xe000ed90

08001c4c <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001c4c:	4a06      	ldr	r2, [pc, #24]	; (8001c68 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001c4e:	f040 0001 	orr.w	r0, r0, #1
 8001c52:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <HAL_MPU_Enable+0x20>)
 8001c54:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001c56:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c5c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001c5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001c62:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001c66:	4770      	bx	lr
 8001c68:	e000ed00 	.word	0xe000ed00
 8001c6c:	e000ed90 	.word	0xe000ed90

08001c70 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001c70:	7843      	ldrb	r3, [r0, #1]
 8001c72:	4a12      	ldr	r2, [pc, #72]	; (8001cbc <HAL_MPU_ConfigRegion+0x4c>)
{
 8001c74:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8001c76:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != RESET)
 8001c78:	7801      	ldrb	r1, [r0, #0]
 8001c7a:	b1d9      	cbz	r1, 8001cb4 <HAL_MPU_ConfigRegion+0x44>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001c7c:	6843      	ldr	r3, [r0, #4]
 8001c7e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001c80:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c82:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001c84:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c86:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001c8a:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001c8c:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001c8e:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001c92:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001c94:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001c98:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001c9a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001c9e:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ca0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ca4:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ca6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001caa:	7a01      	ldrb	r1, [r0, #8]
 8001cac:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001cb0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001cb2:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8001cb4:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 8001cb6:	6111      	str	r1, [r2, #16]
}
 8001cb8:	e7fb      	b.n	8001cb2 <HAL_MPU_ConfigRegion+0x42>
 8001cba:	bf00      	nop
 8001cbc:	e000ed90 	.word	0xe000ed90

08001cc0 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001cc0:	6803      	ldr	r3, [r0, #0]
{
 8001cc2:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001cc4:	2018      	movs	r0, #24
 8001cc6:	b2d9      	uxtb	r1, r3
 8001cc8:	3910      	subs	r1, #16
 8001cca:	fbb1 f0f0 	udiv	r0, r1, r0
{
 8001cce:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001cd0:	4c05      	ldr	r4, [pc, #20]	; (8001ce8 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8001cd2:	295f      	cmp	r1, #95	; 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001cd4:	5c20      	ldrb	r0, [r4, r0]
 8001cd6:	65d0      	str	r0, [r2, #92]	; 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001cd8:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8001cdc:	f020 0003 	bic.w	r0, r0, #3
 8001ce0:	bf88      	it	hi
 8001ce2:	3004      	addhi	r0, #4
 8001ce4:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8001ce6:	bd10      	pop	{r4, pc}
 8001ce8:	0801321c 	.word	0x0801321c

08001cec <HAL_DMA_Init>:
{
 8001cec:	b570      	push	{r4, r5, r6, lr}
 8001cee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001cf0:	f7ff ff32 	bl	8001b58 <HAL_GetTick>
 8001cf4:	4605      	mov	r5, r0
  if(hdma == NULL)
 8001cf6:	2c00      	cmp	r4, #0
 8001cf8:	d073      	beq.n	8001de2 <HAL_DMA_Init+0xf6>
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cfa:	2302      	movs	r3, #2
  __HAL_DMA_DISABLE(hdma);
 8001cfc:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cfe:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8001d02:	2300      	movs	r3, #0
 8001d04:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8001d08:	6813      	ldr	r3, [r2, #0]
 8001d0a:	f023 0301 	bic.w	r3, r3, #1
 8001d0e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d10:	6821      	ldr	r1, [r4, #0]
 8001d12:	680b      	ldr	r3, [r1, #0]
 8001d14:	07d8      	lsls	r0, r3, #31
 8001d16:	d42f      	bmi.n	8001d78 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 8001d18:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d1a:	4d33      	ldr	r5, [pc, #204]	; (8001de8 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d1c:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d1e:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d20:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	68e2      	ldr	r2, [r4, #12]
 8001d28:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d2a:	6922      	ldr	r2, [r4, #16]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	6962      	ldr	r2, [r4, #20]
 8001d30:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d32:	69e2      	ldr	r2, [r4, #28]
 8001d34:	4303      	orrs	r3, r0
 8001d36:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d38:	6a22      	ldr	r2, [r4, #32]
 8001d3a:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d3c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d3e:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d40:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d44:	bf02      	ittt	eq
 8001d46:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8001d4a:	4335      	orreq	r5, r6
 8001d4c:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d4e:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 8001d50:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8001d52:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d54:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8001d58:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d5c:	d133      	bne.n	8001dc6 <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 8001d5e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d60:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8001d62:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d64:	b37d      	cbz	r5, 8001dc6 <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d66:	b990      	cbnz	r0, 8001d8e <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 8001d68:	2a01      	cmp	r2, #1
 8001d6a:	d021      	beq.n	8001db0 <HAL_DMA_Init+0xc4>
 8001d6c:	f032 0202 	bics.w	r2, r2, #2
 8001d70:	d129      	bne.n	8001dc6 <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d72:	01ea      	lsls	r2, r5, #7
 8001d74:	d527      	bpl.n	8001dc6 <HAL_DMA_Init+0xda>
 8001d76:	e01e      	b.n	8001db6 <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d78:	f7ff feee 	bl	8001b58 <HAL_GetTick>
 8001d7c:	1b40      	subs	r0, r0, r5
 8001d7e:	2805      	cmp	r0, #5
 8001d80:	d9c6      	bls.n	8001d10 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d82:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d84:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d86:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001d88:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001d8c:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d8e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001d92:	d114      	bne.n	8001dbe <HAL_DMA_Init+0xd2>
    switch (tmp)
 8001d94:	2a03      	cmp	r2, #3
 8001d96:	d816      	bhi.n	8001dc6 <HAL_DMA_Init+0xda>
 8001d98:	a001      	add	r0, pc, #4	; (adr r0, 8001da0 <HAL_DMA_Init+0xb4>)
 8001d9a:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8001d9e:	bf00      	nop
 8001da0:	08001db7 	.word	0x08001db7
 8001da4:	08001d73 	.word	0x08001d73
 8001da8:	08001db7 	.word	0x08001db7
 8001dac:	08001db1 	.word	0x08001db1
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001db0:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8001db4:	d107      	bne.n	8001dc6 <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001db6:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8001db8:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001dba:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001dbc:	e7e4      	b.n	8001d88 <HAL_DMA_Init+0x9c>
    switch (tmp)
 8001dbe:	2a02      	cmp	r2, #2
 8001dc0:	d9f9      	bls.n	8001db6 <HAL_DMA_Init+0xca>
 8001dc2:	2a03      	cmp	r2, #3
 8001dc4:	d0d5      	beq.n	8001d72 <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 8001dc6:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dc8:	4620      	mov	r0, r4
 8001dca:	f7ff ff79 	bl	8001cc0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dce:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001dd0:	233f      	movs	r3, #63	; 0x3f
 8001dd2:	4093      	lsls	r3, r2
 8001dd4:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dd6:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001dd8:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dda:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001ddc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001de0:	e7d4      	b.n	8001d8c <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 8001de2:	2001      	movs	r0, #1
 8001de4:	e7d2      	b.n	8001d8c <HAL_DMA_Init+0xa0>
 8001de6:	bf00      	nop
 8001de8:	f010803f 	.word	0xf010803f

08001dec <HAL_DMA_DeInit>:
{
 8001dec:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8001dee:	4605      	mov	r5, r0
 8001df0:	b320      	cbz	r0, 8001e3c <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001df2:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	b2dc      	uxtb	r4, r3
 8001dfa:	d01d      	beq.n	8001e38 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8001dfc:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
 8001dfe:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	f022 0201 	bic.w	r2, r2, #1
 8001e06:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8001e08:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 8001e0a:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8001e0c:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8001e0e:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8001e10:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8001e12:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8001e14:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e16:	f7ff ff53 	bl	8001cc0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e1a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001e1c:	233f      	movs	r3, #63	; 0x3f
 8001e1e:	4093      	lsls	r3, r2
 8001e20:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e22:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8001e24:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8001e28:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 8001e2c:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8001e30:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 8001e34:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
}
 8001e38:	4620      	mov	r0, r4
 8001e3a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001e3c:	2401      	movs	r4, #1
 8001e3e:	e7fb      	b.n	8001e38 <HAL_DMA_DeInit+0x4c>

08001e40 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8001e40:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8001e42:	6804      	ldr	r4, [r0, #0]
 8001e44:	9d04      	ldr	r5, [sp, #16]
 8001e46:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8001e48:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8001e4c:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
 8001e50:	4333      	orrs	r3, r6
 8001e52:	6463      	str	r3, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001e54:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001e56:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001e58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001e5c:	d130      	bne.n	8001ec0 <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8001e5e:	6886      	ldr	r6, [r0, #8]
 8001e60:	b11e      	cbz	r6, 8001e6a <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8001e62:	2e01      	cmp	r6, #1
 8001e64:	d103      	bne.n	8001e6e <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8001e66:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U);
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8001e6a:	63a1      	str	r1, [r4, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8001e6c:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001e6e:	2e02      	cmp	r6, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8001e70:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8001e74:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8001e78:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001e7a:	d107      	bne.n	8001e8c <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19U);
 8001e7c:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
 8001e7e:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8001e80:	02db      	lsls	r3, r3, #11
 8001e82:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8001e86:	ea43 01d0 	orr.w	r1, r3, r0, lsr #3
 8001e8a:	e7ee      	b.n	8001e6a <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001e8c:	2e03      	cmp	r6, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8001e8e:	f001 427f 	and.w	r2, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001e92:	d10a      	bne.n	8001eaa <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19U);
 8001e94:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 8001e96:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001e98:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
 8001e9a:	0fd1      	lsrs	r1, r2, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001e9c:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8001ea0:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 8001ea4:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8001ea8:	e7df      	b.n	8001e6a <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20U);
 8001eaa:	0d19      	lsrs	r1, r3, #20
      tmp3 = (tmp3 >> 12U);
 8001eac:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8001eae:	0209      	lsls	r1, r1, #8
      tmp1 = (tmp1 >> 28U);
 8001eb0:	0f13      	lsrs	r3, r2, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8001eb2:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8001eb6:	ea41 1110 	orr.w	r1, r1, r0, lsr #4
 8001eba:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
 8001ebe:	e7d4      	b.n	8001e6a <DMA2D_SetConfig+0x2a>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001ec0:	60e1      	str	r1, [r4, #12]
}
 8001ec2:	e7d3      	b.n	8001e6c <DMA2D_SetConfig+0x2c>

08001ec4 <HAL_DMA2D_MspInit>:
}
 8001ec4:	4770      	bx	lr

08001ec6 <HAL_DMA2D_Init>:
{
 8001ec6:	b510      	push	{r4, lr}
  if (hdma2d == NULL)
 8001ec8:	4604      	mov	r4, r0
 8001eca:	b330      	cbz	r0, 8001f1a <HAL_DMA2D_Init+0x54>
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001ecc:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001ed0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ed4:	b91b      	cbnz	r3, 8001ede <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
 8001ed6:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8001eda:	f7ff fff3 	bl	8001ec4 <HAL_DMA2D_MspInit>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001ede:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001ee0:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001ee2:	6861      	ldr	r1, [r4, #4]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001ee4:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001ee6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001eea:	6813      	ldr	r3, [r2, #0]
 8001eec:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001ef0:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001ef2:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001ef4:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001ef6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001ef8:	f023 0307 	bic.w	r3, r3, #7
 8001efc:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001efe:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001f00:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001f02:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001f04:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f0c:	430b      	orrs	r3, r1
 8001f0e:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001f10:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001f12:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001f14:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8001f18:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001f1a:	2001      	movs	r0, #1
 8001f1c:	e7fc      	b.n	8001f18 <HAL_DMA2D_Init+0x52>

08001f1e <HAL_DMA2D_Start>:
{
 8001f1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 8001f20:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
{
 8001f24:	4604      	mov	r4, r0
  __HAL_LOCK(hdma2d);
 8001f26:	2d01      	cmp	r5, #1
 8001f28:	f04f 0502 	mov.w	r5, #2
 8001f2c:	d00f      	beq.n	8001f4e <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001f2e:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 8001f32:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001f34:	9d06      	ldr	r5, [sp, #24]
  __HAL_LOCK(hdma2d);
 8001f36:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001f3a:	9500      	str	r5, [sp, #0]
 8001f3c:	f7ff ff80 	bl	8001e40 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8001f40:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
 8001f42:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 8001f44:	6813      	ldr	r3, [r2, #0]
 8001f46:	4333      	orrs	r3, r6
 8001f48:	6013      	str	r3, [r2, #0]
}
 8001f4a:	b002      	add	sp, #8
 8001f4c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 8001f4e:	4628      	mov	r0, r5
 8001f50:	e7fb      	b.n	8001f4a <HAL_DMA2D_Start+0x2c>

08001f52 <HAL_DMA2D_PollForTransfer>:
  __IO uint32_t isrflags = 0x0U;
 8001f52:	2300      	movs	r3, #0
{
 8001f54:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 8001f56:	9301      	str	r3, [sp, #4]
{
 8001f58:	4604      	mov	r4, r0
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8001f5a:	6803      	ldr	r3, [r0, #0]
{
 8001f5c:	460d      	mov	r5, r1
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	07db      	lsls	r3, r3, #31
 8001f62:	d417      	bmi.n	8001f94 <HAL_DMA2D_PollForTransfer+0x42>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8001f64:	6822      	ldr	r2, [r4, #0]
 8001f66:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8001f68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f6a:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 8001f6c:	069e      	lsls	r6, r3, #26
 8001f6e:	d506      	bpl.n	8001f7e <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
 8001f70:	f7ff fdf2 	bl	8001b58 <HAL_GetTick>
 8001f74:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001f76:	6823      	ldr	r3, [r4, #0]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	06d2      	lsls	r2, r2, #27
 8001f7c:	d543      	bpl.n	8002006 <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8001f7e:	6823      	ldr	r3, [r4, #0]
 8001f80:	2212      	movs	r2, #18
  __HAL_UNLOCK(hdma2d);
 8001f82:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8001f84:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001f86:	2301      	movs	r3, #1
  __HAL_UNLOCK(hdma2d);
 8001f88:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001f8c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8001f90:	b002      	add	sp, #8
 8001f92:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8001f94:	f7ff fde0 	bl	8001b58 <HAL_GetTick>
 8001f98:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001f9a:	6823      	ldr	r3, [r4, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	0792      	lsls	r2, r2, #30
 8001fa0:	d4e0      	bmi.n	8001f64 <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8001fa6:	9a01      	ldr	r2, [sp, #4]
 8001fa8:	f012 0f21 	tst.w	r2, #33	; 0x21
 8001fac:	d017      	beq.n	8001fde <HAL_DMA2D_PollForTransfer+0x8c>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001fae:	9a01      	ldr	r2, [sp, #4]
 8001fb0:	0695      	lsls	r5, r2, #26
 8001fb2:	d503      	bpl.n	8001fbc <HAL_DMA2D_PollForTransfer+0x6a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001fb4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001fb6:	f042 0202 	orr.w	r2, r2, #2
 8001fba:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001fbc:	9a01      	ldr	r2, [sp, #4]
 8001fbe:	07d0      	lsls	r0, r2, #31
 8001fc0:	d503      	bpl.n	8001fca <HAL_DMA2D_PollForTransfer+0x78>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001fc2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001fc4:	f042 0201 	orr.w	r2, r2, #1
 8001fc8:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001fca:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001fcc:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001fce:	2304      	movs	r3, #4
        return HAL_ERROR;
 8001fd0:	2001      	movs	r0, #1
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001fd2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 8001fdc:	e7d8      	b.n	8001f90 <HAL_DMA2D_PollForTransfer+0x3e>
      if (Timeout != HAL_MAX_DELAY)
 8001fde:	1c69      	adds	r1, r5, #1
 8001fe0:	d0dc      	beq.n	8001f9c <HAL_DMA2D_PollForTransfer+0x4a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001fe2:	f7ff fdb9 	bl	8001b58 <HAL_GetTick>
 8001fe6:	1b80      	subs	r0, r0, r6
 8001fe8:	42a8      	cmp	r0, r5
 8001fea:	d801      	bhi.n	8001ff0 <HAL_DMA2D_PollForTransfer+0x9e>
 8001fec:	2d00      	cmp	r5, #0
 8001fee:	d1d4      	bne.n	8001f9a <HAL_DMA2D_PollForTransfer+0x48>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001ff0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001ff2:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001ff4:	f043 0320 	orr.w	r3, r3, #32
 8001ff8:	63e3      	str	r3, [r4, #60]	; 0x3c
          __HAL_UNLOCK(hdma2d);
 8001ffa:	2300      	movs	r3, #0
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001ffc:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 8002000:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 8002004:	e7c4      	b.n	8001f90 <HAL_DMA2D_PollForTransfer+0x3e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800200a:	9a01      	ldr	r2, [sp, #4]
 800200c:	f012 0f29 	tst.w	r2, #41	; 0x29
 8002010:	d016      	beq.n	8002040 <HAL_DMA2D_PollForTransfer+0xee>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002012:	9a01      	ldr	r2, [sp, #4]
 8002014:	0716      	lsls	r6, r2, #28
 8002016:	d503      	bpl.n	8002020 <HAL_DMA2D_PollForTransfer+0xce>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002018:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800201a:	f042 0204 	orr.w	r2, r2, #4
 800201e:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002020:	9a01      	ldr	r2, [sp, #4]
 8002022:	0695      	lsls	r5, r2, #26
 8002024:	d503      	bpl.n	800202e <HAL_DMA2D_PollForTransfer+0xdc>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002026:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002028:	f042 0202 	orr.w	r2, r2, #2
 800202c:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800202e:	9a01      	ldr	r2, [sp, #4]
 8002030:	07d0      	lsls	r0, r2, #31
 8002032:	d503      	bpl.n	800203c <HAL_DMA2D_PollForTransfer+0xea>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002034:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002036:	f042 0201 	orr.w	r2, r2, #1
 800203a:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800203c:	2229      	movs	r2, #41	; 0x29
 800203e:	e7c5      	b.n	8001fcc <HAL_DMA2D_PollForTransfer+0x7a>
      if (Timeout != HAL_MAX_DELAY)
 8002040:	1c69      	adds	r1, r5, #1
 8002042:	d099      	beq.n	8001f78 <HAL_DMA2D_PollForTransfer+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002044:	f7ff fd88 	bl	8001b58 <HAL_GetTick>
 8002048:	1b80      	subs	r0, r0, r6
 800204a:	42a8      	cmp	r0, r5
 800204c:	d8d0      	bhi.n	8001ff0 <HAL_DMA2D_PollForTransfer+0x9e>
 800204e:	2d00      	cmp	r5, #0
 8002050:	d191      	bne.n	8001f76 <HAL_DMA2D_PollForTransfer+0x24>
 8002052:	e7cd      	b.n	8001ff0 <HAL_DMA2D_PollForTransfer+0x9e>

08002054 <HAL_DMA2D_ConfigLayer>:
{
 8002054:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 8002056:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800205a:	2b01      	cmp	r3, #1
 800205c:	f04f 0302 	mov.w	r3, #2
 8002060:	d02b      	beq.n	80020ba <HAL_DMA2D_ConfigLayer+0x66>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002062:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 8002066:	2201      	movs	r2, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002068:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 800206c:	4f1c      	ldr	r7, [pc, #112]	; (80020e0 <HAL_DMA2D_ConfigLayer+0x8c>)
  __HAL_LOCK(hdma2d);
 800206e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002072:	010e      	lsls	r6, r1, #4
 8002074:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8002076:	e9d3 4207 	ldrd	r4, r2, [r3, #28]
 800207a:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800207e:	3c09      	subs	r4, #9
 8002080:	2c01      	cmp	r4, #1
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002082:	bf96      	itet	ls
 8002084:	f005 437f 	andls.w	r3, r5, #4278190080	; 0xff000000
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002088:	ea42 6205 	orrhi.w	r2, r2, r5, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800208c:	431a      	orrls	r2, r3
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800208e:	6803      	ldr	r3, [r0, #0]
 8002090:	b9a9      	cbnz	r1, 80020be <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002092:	6a59      	ldr	r1, [r3, #36]	; 0x24
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002094:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002096:	ea01 0107 	and.w	r1, r1, r7
 800209a:	ea42 0201 	orr.w	r2, r2, r1
 800209e:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80020a0:	6982      	ldr	r2, [r0, #24]
 80020a2:	619a      	str	r2, [r3, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80020a4:	d803      	bhi.n	80020ae <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80020a6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80020a8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80020ac:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80020ae:	2301      	movs	r3, #1
 80020b0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 80020b4:	2300      	movs	r3, #0
 80020b6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 80020ba:	4618      	mov	r0, r3
}
 80020bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80020be:	69d9      	ldr	r1, [r3, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80020c0:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80020c2:	ea01 0107 	and.w	r1, r1, r7
 80020c6:	ea42 0201 	orr.w	r2, r2, r1
 80020ca:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80020cc:	eb00 0206 	add.w	r2, r0, r6
 80020d0:	6992      	ldr	r2, [r2, #24]
 80020d2:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80020d4:	d8eb      	bhi.n	80020ae <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80020d6:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 80020da:	621d      	str	r5, [r3, #32]
 80020dc:	e7e7      	b.n	80020ae <HAL_DMA2D_ConfigLayer+0x5a>
 80020de:	bf00      	nop
 80020e0:	00fcfff0 	.word	0x00fcfff0

080020e4 <ETH_FlushTransmitFIFO>:
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
  __IO uint32_t tmpreg = 0;
 80020e4:	2300      	movs	r3, #0
{
 80020e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80020e8:	f241 0418 	movw	r4, #4120	; 0x1018
  __IO uint32_t tmpreg = 0;
 80020ec:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80020ee:	6803      	ldr	r3, [r0, #0]
{
 80020f0:	4605      	mov	r5, r0
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020f2:	2001      	movs	r0, #1
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80020f4:	591a      	ldr	r2, [r3, r4]
 80020f6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80020fa:	511a      	str	r2, [r3, r4]
  tmpreg = (heth->Instance)->DMAOMR;
 80020fc:	591b      	ldr	r3, [r3, r4]
 80020fe:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002100:	f7ff fd30 	bl	8001b64 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002104:	682b      	ldr	r3, [r5, #0]
 8002106:	9a01      	ldr	r2, [sp, #4]
 8002108:	511a      	str	r2, [r3, r4]
}
 800210a:	b003      	add	sp, #12
 800210c:	bd30      	pop	{r4, r5, pc}
	...

08002110 <ETH_MACDMAConfig>:
{
 8002110:	b570      	push	{r4, r5, r6, lr}
 8002112:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002114:	b129      	cbz	r1, 8002122 <ETH_MACDMAConfig+0x12>
    (heth->Init).Speed = ETH_SPEED_100M;
 8002116:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800211a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800211e:	e9c0 3202 	strd	r3, r2, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002122:	69e3      	ldr	r3, [r4, #28]
  tmpreg = (heth->Instance)->MACCR;
 8002124:	6822      	ldr	r2, [r4, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002126:	2b00      	cmp	r3, #0
  tmpreg = (heth->Instance)->MACCR;
 8002128:	6810      	ldr	r0, [r2, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800212a:	bf0c      	ite	eq
 800212c:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 8002130:	2100      	movne	r1, #0
                       macinit.LoopbackMode |
 8002132:	e9d4 3502 	ldrd	r3, r5, [r4, #8]
 8002136:	432b      	orrs	r3, r5
                       (heth->Init).DuplexMode | 
 8002138:	430b      	orrs	r3, r1
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800213a:	492d      	ldr	r1, [pc, #180]	; (80021f0 <ETH_MACDMAConfig+0xe0>)
 800213c:	4001      	ands	r1, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800213e:	2001      	movs	r0, #1
 8002140:	430b      	orrs	r3, r1
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002142:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002146:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 8002148:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800214a:	f7ff fd0b 	bl	8001b64 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800214e:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002150:	2240      	movs	r2, #64	; 0x40
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002152:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 8002154:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002156:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 8002158:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800215a:	f7ff fd03 	bl	8001b64 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800215e:	6823      	ldr	r3, [r4, #0]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002160:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 8002162:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002164:	2500      	movs	r5, #0
 8002166:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002168:	60dd      	str	r5, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 800216a:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800216c:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 8002170:	0412      	lsls	r2, r2, #16
 8002172:	0c12      	lsrs	r2, r2, #16
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002174:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002178:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 800217a:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800217c:	f7ff fcf2 	bl	8001b64 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002180:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002182:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 8002184:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002186:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 8002188:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800218a:	f7ff fceb 	bl	8001b64 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 800218e:	6822      	ldr	r2, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002190:	2001      	movs	r0, #1
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002192:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <ETH_MACDMAConfig+0xe4>)
    (heth->Instance)->MACVLANTR = tmpreg;
 8002194:	61d5      	str	r5, [r2, #28]
    tmpreg = (heth->Instance)->DMAOMR;
 8002196:	f241 0518 	movw	r5, #4120	; 0x1018
 800219a:	5951      	ldr	r1, [r2, r5]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800219c:	400b      	ands	r3, r1
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800219e:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 80021a2:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80021a6:	5153      	str	r3, [r2, r5]
    tmpreg = (heth->Instance)->DMAOMR;
 80021a8:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80021aa:	f7ff fcdb 	bl	8001b64 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80021ae:	6823      	ldr	r3, [r4, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80021b0:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80021b2:	4a11      	ldr	r2, [pc, #68]	; (80021f8 <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->DMAOMR = tmpreg;
 80021b4:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80021b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ba:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 80021bc:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80021be:	f7ff fcd1 	bl	8001b64 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80021c2:	6822      	ldr	r2, [r4, #0]
 80021c4:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 80021c8:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80021ca:	69a3      	ldr	r3, [r4, #24]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d107      	bne.n	80021e0 <ETH_MACDMAConfig+0xd0>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80021d0:	f241 011c 	movw	r1, #4124	; 0x101c
 80021d4:	5853      	ldr	r3, [r2, r1]
 80021d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021de:	5053      	str	r3, [r2, r1]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80021e0:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80021e2:	4a06      	ldr	r2, [pc, #24]	; (80021fc <ETH_MACDMAConfig+0xec>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80021e4:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80021e6:	6011      	str	r1, [r2, #0]
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80021e8:	681a      	ldr	r2, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80021ea:	4b05      	ldr	r3, [pc, #20]	; (8002200 <ETH_MACDMAConfig+0xf0>)
 80021ec:	601a      	str	r2, [r3, #0]
}
 80021ee:	bd70      	pop	{r4, r5, r6, pc}
 80021f0:	ff20810f 	.word	0xff20810f
 80021f4:	f8de3f23 	.word	0xf8de3f23
 80021f8:	02c12080 	.word	0x02c12080
 80021fc:	40028040 	.word	0x40028040
 8002200:	40028044 	.word	0x40028044

08002204 <HAL_ETH_DMATxDescListInit>:
{
 8002204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 8002208:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 800220c:	2c01      	cmp	r4, #1
 800220e:	f04f 0402 	mov.w	r4, #2
 8002212:	d031      	beq.n	8002278 <HAL_ETH_DMATxDescListInit+0x74>
 8002214:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8002216:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800221a:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
  for(i=0; i < TxBuffCount; i++)
 800221e:	460c      	mov	r4, r1
  __HAL_LOCK(heth);
 8002220:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8002224:	f240 5cf4 	movw	ip, #1524	; 0x5f4
  for(i=0; i < TxBuffCount; i++)
 8002228:	2500      	movs	r5, #0
    if(i < (TxBuffCount-1))
 800222a:	f103 3eff 	add.w	lr, r3, #4294967295
  heth->TxDesc = DMATxDescTab;
 800222e:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0; i < TxBuffCount; i++)
 8002230:	429d      	cmp	r5, r3
 8002232:	d10c      	bne.n	800224e <HAL_ETH_DMATxDescListInit+0x4a>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8002234:	6802      	ldr	r2, [r0, #0]
 8002236:	f241 0310 	movw	r3, #4112	; 0x1010
 800223a:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 800223c:	2301      	movs	r3, #1
 800223e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8002242:	2300      	movs	r3, #0
 8002244:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8002248:	4618      	mov	r0, r3
}
 800224a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800224e:	fb0c 2605 	mla	r6, ip, r5, r2
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8002252:	6027      	str	r7, [r4, #0]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8002254:	60a6      	str	r6, [r4, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002256:	69c6      	ldr	r6, [r0, #28]
 8002258:	b91e      	cbnz	r6, 8002262 <HAL_ETH_DMATxDescListInit+0x5e>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800225a:	6826      	ldr	r6, [r4, #0]
 800225c:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 8002260:	6026      	str	r6, [r4, #0]
    if(i < (TxBuffCount-1))
 8002262:	f104 0620 	add.w	r6, r4, #32
 8002266:	45ae      	cmp	lr, r5
 8002268:	bf94      	ite	ls
 800226a:	4688      	movls	r8, r1
 800226c:	46b0      	movhi	r8, r6
 800226e:	3501      	adds	r5, #1
 8002270:	f8c4 800c 	str.w	r8, [r4, #12]
  for(i=0; i < TxBuffCount; i++)
 8002274:	4634      	mov	r4, r6
 8002276:	e7db      	b.n	8002230 <HAL_ETH_DMATxDescListInit+0x2c>
  __HAL_LOCK(heth);
 8002278:	4620      	mov	r0, r4
 800227a:	e7e6      	b.n	800224a <HAL_ETH_DMATxDescListInit+0x46>

0800227c <HAL_ETH_DMARxDescListInit>:
{
 800227c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(heth);
 8002280:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8002284:	2c01      	cmp	r4, #1
 8002286:	f04f 0402 	mov.w	r4, #2
 800228a:	d02f      	beq.n	80022ec <HAL_ETH_DMARxDescListInit+0x70>
 800228c:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800228e:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002292:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
  for(i=0; i < RxBuffCount; i++)
 8002296:	460c      	mov	r4, r1
  __HAL_LOCK(heth);
 8002298:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800229c:	f244 5cf4 	movw	ip, #17908	; 0x45f4
  for(i=0; i < RxBuffCount; i++)
 80022a0:	2500      	movs	r5, #0
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80022a2:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (RxBuffCount-1))
 80022a6:	f103 38ff 	add.w	r8, r3, #4294967295
  heth->RxDesc = DMARxDescTab; 
 80022aa:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0; i < RxBuffCount; i++)
 80022ac:	42ab      	cmp	r3, r5
 80022ae:	d10c      	bne.n	80022ca <HAL_ETH_DMARxDescListInit+0x4e>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80022b0:	6802      	ldr	r2, [r0, #0]
 80022b2:	f241 030c 	movw	r3, #4108	; 0x100c
 80022b6:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 80022b8:	2301      	movs	r3, #1
 80022ba:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80022be:	2300      	movs	r3, #0
 80022c0:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80022c4:	4618      	mov	r0, r3
}
 80022c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80022ca:	fb0e 2605 	mla	r6, lr, r5, r2
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80022ce:	6027      	str	r7, [r4, #0]
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80022d0:	60a6      	str	r6, [r4, #8]
 80022d2:	f104 0620 	add.w	r6, r4, #32
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80022d6:	f8c4 c004 	str.w	ip, [r4, #4]
    if(i < (RxBuffCount-1))
 80022da:	45a8      	cmp	r8, r5
 80022dc:	bf94      	ite	ls
 80022de:	4689      	movls	r9, r1
 80022e0:	46b1      	movhi	r9, r6
 80022e2:	3501      	adds	r5, #1
 80022e4:	f8c4 900c 	str.w	r9, [r4, #12]
  for(i=0; i < RxBuffCount; i++)
 80022e8:	4634      	mov	r4, r6
 80022ea:	e7df      	b.n	80022ac <HAL_ETH_DMARxDescListInit+0x30>
  __HAL_LOCK(heth);
 80022ec:	4620      	mov	r0, r4
 80022ee:	e7ea      	b.n	80022c6 <HAL_ETH_DMARxDescListInit+0x4a>

080022f0 <HAL_ETH_TransmitFrame>:
{
 80022f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 80022f2:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	f04f 0302 	mov.w	r3, #2
 80022fc:	d066      	beq.n	80023cc <HAL_ETH_TransmitFrame+0xdc>
 80022fe:	2201      	movs	r2, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8002300:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 8002304:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  if (FrameLength == 0) 
 8002308:	b929      	cbnz	r1, 8002316 <HAL_ETH_TransmitFrame+0x26>
    heth->State = HAL_ETH_STATE_READY;
 800230a:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800230e:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
    return HAL_ERROR;
 8002312:	4610      	mov	r0, r2
}
 8002314:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002316:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002318:	681c      	ldr	r4, [r3, #0]
 800231a:	2c00      	cmp	r4, #0
 800231c:	da06      	bge.n	800232c <HAL_ETH_TransmitFrame+0x3c>
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800231e:	2312      	movs	r3, #18
 8002320:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8002324:	2300      	movs	r3, #0
 8002326:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 800232a:	e7f2      	b.n	8002312 <HAL_ETH_TransmitFrame+0x22>
  if (FrameLength > ETH_TX_BUF_SIZE)
 800232c:	f240 54f4 	movw	r4, #1524	; 0x5f4
 8002330:	42a1      	cmp	r1, r4
 8002332:	d92c      	bls.n	800238e <HAL_ETH_TransmitFrame+0x9e>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8002334:	fbb1 f2f4 	udiv	r2, r1, r4
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8002338:	fb04 1412 	mls	r4, r4, r2, r1
 800233c:	b32c      	cbz	r4, 800238a <HAL_ETH_TransmitFrame+0x9a>
      bufcount++;
 800233e:	3201      	adds	r2, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8002340:	4c23      	ldr	r4, [pc, #140]	; (80023d0 <HAL_ETH_TransmitFrame+0xe0>)
 8002342:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8002346:	f240 56f4 	movw	r6, #1524	; 0x5f4
      if (i == (bufcount-1))
 800234a:	1e57      	subs	r7, r2, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800234c:	fb04 1102 	mla	r1, r4, r2, r1
    for (i=0; i< bufcount; i++)
 8002350:	2400      	movs	r4, #0
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002352:	f3c1 010c 	ubfx	r1, r1, #0, #13
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002356:	681d      	ldr	r5, [r3, #0]
 8002358:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
 800235c:	601d      	str	r5, [r3, #0]
      if (i == 0) 
 800235e:	b91c      	cbnz	r4, 8002368 <HAL_ETH_TransmitFrame+0x78>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8002360:	681d      	ldr	r5, [r3, #0]
 8002362:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 8002366:	601d      	str	r5, [r3, #0]
      if (i == (bufcount-1))
 8002368:	42a7      	cmp	r7, r4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800236a:	605e      	str	r6, [r3, #4]
      if (i == (bufcount-1))
 800236c:	d104      	bne.n	8002378 <HAL_ETH_TransmitFrame+0x88>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800236e:	681d      	ldr	r5, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002370:	6059      	str	r1, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002372:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8002376:	601d      	str	r5, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002378:	681d      	ldr	r5, [r3, #0]
    for (i=0; i< bufcount; i++)
 800237a:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800237c:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    for (i=0; i< bufcount; i++)
 8002380:	4294      	cmp	r4, r2
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002382:	601d      	str	r5, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002384:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< bufcount; i++)
 8002386:	d1e6      	bne.n	8002356 <HAL_ETH_TransmitFrame+0x66>
 8002388:	e00d      	b.n	80023a6 <HAL_ETH_TransmitFrame+0xb6>
  if (bufcount == 1)
 800238a:	2a01      	cmp	r2, #1
 800238c:	d1d8      	bne.n	8002340 <HAL_ETH_TransmitFrame+0x50>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800238e:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002390:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002394:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002398:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800239a:	601a      	str	r2, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80023a2:	601a      	str	r2, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80023a4:	68db      	ldr	r3, [r3, #12]
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80023a6:	f241 0214 	movw	r2, #4116	; 0x1014
 80023aa:	62c3      	str	r3, [r0, #44]	; 0x2c
 80023ac:	6803      	ldr	r3, [r0, #0]
 80023ae:	5899      	ldr	r1, [r3, r2]
 80023b0:	0749      	lsls	r1, r1, #29
 80023b2:	d505      	bpl.n	80023c0 <HAL_ETH_TransmitFrame+0xd0>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80023b4:	2104      	movs	r1, #4
 80023b6:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0;
 80023b8:	f241 0204 	movw	r2, #4100	; 0x1004
 80023bc:	2100      	movs	r1, #0
 80023be:	5099      	str	r1, [r3, r2]
  heth->State = HAL_ETH_STATE_READY;
 80023c0:	2301      	movs	r3, #1
 80023c2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80023c6:	2300      	movs	r3, #0
 80023c8:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 80023cc:	4618      	mov	r0, r3
 80023ce:	e7a1      	b.n	8002314 <HAL_ETH_TransmitFrame+0x24>
 80023d0:	fffffa0c 	.word	0xfffffa0c

080023d4 <HAL_ETH_GetReceivedFrame_IT>:
{
 80023d4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(heth);
 80023d6:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80023da:	2b01      	cmp	r3, #1
 80023dc:	f04f 0302 	mov.w	r3, #2
 80023e0:	d03b      	beq.n	800245a <HAL_ETH_GetReceivedFrame_IT+0x86>
 80023e2:	2201      	movs	r2, #1
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80023e4:	2405      	movs	r4, #5
  heth->State = HAL_ETH_STATE_BUSY;
 80023e6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      heth->RxFrameInfos.SegCount = 1;   
 80023ea:	4611      	mov	r1, r2
  __HAL_LOCK(heth);
 80023ec:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80023f0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	2a00      	cmp	r2, #0
 80023f6:	db01      	blt.n	80023fc <HAL_ETH_GetReceivedFrame_IT+0x28>
 80023f8:	3c01      	subs	r4, #1
 80023fa:	d106      	bne.n	800240a <HAL_ETH_GetReceivedFrame_IT+0x36>
  heth->State = HAL_ETH_STATE_READY;
 80023fc:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 80023fe:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
 8002400:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8002404:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8002408:	e027      	b.n	800245a <HAL_ETH_GetReceivedFrame_IT+0x86>
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68dd      	ldr	r5, [r3, #12]
 800240e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002412:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002416:	d103      	bne.n	8002420 <HAL_ETH_GetReceivedFrame_IT+0x4c>
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8002418:	6303      	str	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 800241a:	6381      	str	r1, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800241c:	6285      	str	r5, [r0, #40]	; 0x28
 800241e:	e7e7      	b.n	80023f0 <HAL_ETH_GetReceivedFrame_IT+0x1c>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8002420:	681e      	ldr	r6, [r3, #0]
 8002422:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8002424:	f416 7f40 	tst.w	r6, #768	; 0x300
 8002428:	f102 0201 	add.w	r2, r2, #1
 800242c:	d101      	bne.n	8002432 <HAL_ETH_GetReceivedFrame_IT+0x5e>
      (heth->RxFrameInfos.SegCount)++;
 800242e:	6382      	str	r2, [r0, #56]	; 0x38
 8002430:	e7f4      	b.n	800241c <HAL_ETH_GetReceivedFrame_IT+0x48>
      if ((heth->RxFrameInfos.SegCount) == 1)
 8002432:	2a01      	cmp	r2, #1
      (heth->RxFrameInfos.SegCount)++;
 8002434:	e9c0 320d 	strd	r3, r2, [r0, #52]	; 0x34
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8002438:	bf08      	it	eq
 800243a:	6303      	streq	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f3c3 430d 	ubfx	r3, r3, #16, #14
 8002442:	3b04      	subs	r3, #4
 8002444:	63c3      	str	r3, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002446:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002448:	689b      	ldr	r3, [r3, #8]
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800244a:	6285      	str	r5, [r0, #40]	; 0x28
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800244c:	6403      	str	r3, [r0, #64]	; 0x40
      heth->State = HAL_ETH_STATE_READY;
 800244e:	2301      	movs	r3, #1
 8002450:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8002454:	2300      	movs	r3, #0
 8002456:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 800245a:	4618      	mov	r0, r3
 800245c:	bd70      	pop	{r4, r5, r6, pc}

0800245e <HAL_ETH_TxCpltCallback>:
 800245e:	4770      	bx	lr

08002460 <HAL_ETH_ErrorCallback>:
 8002460:	4770      	bx	lr

08002462 <HAL_ETH_IRQHandler>:
{
 8002462:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8002464:	6802      	ldr	r2, [r0, #0]
 8002466:	f241 0614 	movw	r6, #4116	; 0x1014
{
 800246a:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800246c:	5995      	ldr	r5, [r2, r6]
 800246e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002472:	d021      	beq.n	80024b8 <HAL_ETH_IRQHandler+0x56>
    HAL_ETH_RxCpltCallback(heth);
 8002474:	f7fe fa70 	bl	8000958 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8002478:	6823      	ldr	r3, [r4, #0]
 800247a:	2240      	movs	r2, #64	; 0x40
 800247c:	519a      	str	r2, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
 800247e:	2301      	movs	r3, #1
 8002480:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8002484:	2300      	movs	r3, #0
 8002486:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800248a:	6823      	ldr	r3, [r4, #0]
 800248c:	f241 0514 	movw	r5, #4116	; 0x1014
 8002490:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002494:	515a      	str	r2, [r3, r5]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8002496:	595b      	ldr	r3, [r3, r5]
 8002498:	041b      	lsls	r3, r3, #16
 800249a:	d50c      	bpl.n	80024b6 <HAL_ETH_IRQHandler+0x54>
    HAL_ETH_ErrorCallback(heth);
 800249c:	4620      	mov	r0, r4
 800249e:	f7ff ffdf 	bl	8002460 <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80024a2:	6823      	ldr	r3, [r4, #0]
 80024a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80024a8:	515a      	str	r2, [r3, r5]
    heth->State = HAL_ETH_STATE_READY;
 80024aa:	2301      	movs	r3, #1
 80024ac:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80024b0:	2300      	movs	r3, #0
 80024b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 80024b6:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80024b8:	5993      	ldr	r3, [r2, r6]
 80024ba:	07da      	lsls	r2, r3, #31
 80024bc:	d5e5      	bpl.n	800248a <HAL_ETH_IRQHandler+0x28>
    HAL_ETH_TxCpltCallback(heth);
 80024be:	f7ff ffce 	bl	800245e <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80024c2:	2301      	movs	r3, #1
 80024c4:	6822      	ldr	r2, [r4, #0]
 80024c6:	5193      	str	r3, [r2, r6]
    heth->State = HAL_ETH_STATE_READY;
 80024c8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80024cc:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 80024d0:	e7db      	b.n	800248a <HAL_ETH_IRQHandler+0x28>

080024d2 <HAL_ETH_ReadPHYRegister>:
{
 80024d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80024d4:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
{
 80024d8:	4606      	mov	r6, r0
 80024da:	4615      	mov	r5, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80024dc:	2b82      	cmp	r3, #130	; 0x82
 80024de:	d031      	beq.n	8002544 <HAL_ETH_ReadPHYRegister+0x72>
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80024e0:	2382      	movs	r3, #130	; 0x82
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80024e2:	0189      	lsls	r1, r1, #6
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80024e4:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80024e8:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80024ec:	8a34      	ldrh	r4, [r6, #16]
  tmpreg = heth->Instance->MACMIIAR;
 80024ee:	6803      	ldr	r3, [r0, #0]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80024f0:	02e4      	lsls	r4, r4, #11
  tmpreg = heth->Instance->MACMIIAR;
 80024f2:	6918      	ldr	r0, [r3, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80024f4:	b2a4      	uxth	r4, r4
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80024f6:	f000 001c 	and.w	r0, r0, #28
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80024fa:	430c      	orrs	r4, r1
 80024fc:	4304      	orrs	r4, r0
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80024fe:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg;
 8002502:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8002504:	f7ff fb28 	bl	8001b58 <HAL_GetTick>
 8002508:	4607      	mov	r7, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800250a:	f014 0401 	ands.w	r4, r4, #1
 800250e:	d108      	bne.n	8002522 <HAL_ETH_ReadPHYRegister+0x50>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002510:	6833      	ldr	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8002512:	4620      	mov	r0, r4
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	b29b      	uxth	r3, r3
 8002518:	602b      	str	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_READY;
 800251a:	2301      	movs	r3, #1
 800251c:	f886 3044 	strb.w	r3, [r6, #68]	; 0x44
  return HAL_OK;
 8002520:	e00c      	b.n	800253c <HAL_ETH_ReadPHYRegister+0x6a>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002522:	f7ff fb19 	bl	8001b58 <HAL_GetTick>
 8002526:	1bc0      	subs	r0, r0, r7
 8002528:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800252c:	d307      	bcc.n	800253e <HAL_ETH_ReadPHYRegister+0x6c>
      heth->State= HAL_ETH_STATE_READY;
 800252e:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8002530:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8002532:	f886 3044 	strb.w	r3, [r6, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8002536:	2300      	movs	r3, #0
 8002538:	f886 3045 	strb.w	r3, [r6, #69]	; 0x45
}
 800253c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg = heth->Instance->MACMIIAR;
 800253e:	6833      	ldr	r3, [r6, #0]
 8002540:	691c      	ldr	r4, [r3, #16]
 8002542:	e7e2      	b.n	800250a <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 8002544:	2002      	movs	r0, #2
 8002546:	e7f9      	b.n	800253c <HAL_ETH_ReadPHYRegister+0x6a>

08002548 <HAL_ETH_WritePHYRegister>:
{
 8002548:	b570      	push	{r4, r5, r6, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800254a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
{
 800254e:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002550:	2b42      	cmp	r3, #66	; 0x42
 8002552:	d02f      	beq.n	80025b4 <HAL_ETH_WritePHYRegister+0x6c>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002554:	2342      	movs	r3, #66	; 0x42
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002556:	0189      	lsls	r1, r1, #6
 8002558:	b292      	uxth	r2, r2
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800255a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800255e:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002562:	8a2c      	ldrh	r4, [r5, #16]
  tmpreg = heth->Instance->MACMIIAR;
 8002564:	6803      	ldr	r3, [r0, #0]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002566:	02e4      	lsls	r4, r4, #11
  tmpreg = heth->Instance->MACMIIAR;
 8002568:	6918      	ldr	r0, [r3, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800256a:	b2a4      	uxth	r4, r4
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800256c:	615a      	str	r2, [r3, #20]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800256e:	f000 001c 	and.w	r0, r0, #28
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002572:	430c      	orrs	r4, r1
 8002574:	4304      	orrs	r4, r0
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8002576:	f044 0403 	orr.w	r4, r4, #3
  heth->Instance->MACMIIAR = tmpreg;
 800257a:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 800257c:	f7ff faec 	bl	8001b58 <HAL_GetTick>
 8002580:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002582:	f014 0401 	ands.w	r4, r4, #1
 8002586:	d104      	bne.n	8002592 <HAL_ETH_WritePHYRegister+0x4a>
  heth->State = HAL_ETH_STATE_READY;
 8002588:	2301      	movs	r3, #1
  return HAL_OK; 
 800258a:	4620      	mov	r0, r4
  heth->State = HAL_ETH_STATE_READY;
 800258c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK; 
 8002590:	e00c      	b.n	80025ac <HAL_ETH_WritePHYRegister+0x64>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002592:	f7ff fae1 	bl	8001b58 <HAL_GetTick>
 8002596:	1b80      	subs	r0, r0, r6
 8002598:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800259c:	d307      	bcc.n	80025ae <HAL_ETH_WritePHYRegister+0x66>
      heth->State= HAL_ETH_STATE_READY;
 800259e:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 80025a0:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 80025a2:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80025a6:	2300      	movs	r3, #0
 80025a8:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
}
 80025ac:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg = heth->Instance->MACMIIAR;
 80025ae:	682b      	ldr	r3, [r5, #0]
 80025b0:	691c      	ldr	r4, [r3, #16]
 80025b2:	e7e6      	b.n	8002582 <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 80025b4:	2002      	movs	r0, #2
 80025b6:	e7f9      	b.n	80025ac <HAL_ETH_WritePHYRegister+0x64>

080025b8 <HAL_ETH_Init>:
  uint32_t tempreg = 0, phyreg = 0;
 80025b8:	2300      	movs	r3, #0
{
 80025ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(heth == NULL)
 80025bc:	4604      	mov	r4, r0
  uint32_t tempreg = 0, phyreg = 0;
 80025be:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 80025c0:	2800      	cmp	r0, #0
 80025c2:	f000 80de 	beq.w	8002782 <HAL_ETH_Init+0x1ca>
  if(heth->State == HAL_ETH_STATE_RESET)
 80025c6:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80025ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80025ce:	b91b      	cbnz	r3, 80025d8 <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 80025d0:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 80025d4:	f7fe f95a 	bl	800088c <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025d8:	4b6b      	ldr	r3, [pc, #428]	; (8002788 <HAL_ETH_Init+0x1d0>)
 80025da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025e0:	645a      	str	r2, [r3, #68]	; 0x44
 80025e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025e8:	9301      	str	r3, [sp, #4]
 80025ea:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80025ec:	4b67      	ldr	r3, [pc, #412]	; (800278c <HAL_ETH_Init+0x1d4>)
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80025f4:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	6a21      	ldr	r1, [r4, #32]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80025fe:	6823      	ldr	r3, [r4, #0]
 8002600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	f042 0201 	orr.w	r2, r2, #1
 800260a:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800260c:	f7ff faa4 	bl	8001b58 <HAL_GetTick>
 8002610:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002612:	6823      	ldr	r3, [r4, #0]
 8002614:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8002618:	6812      	ldr	r2, [r2, #0]
 800261a:	07d0      	lsls	r0, r2, #31
 800261c:	d41d      	bmi.n	800265a <HAL_ETH_Init+0xa2>
  tempreg = (heth->Instance)->MACMIIAR;
 800261e:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8002620:	f000 fdd4 	bl	80031cc <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 8002624:	4b5a      	ldr	r3, [pc, #360]	; (8002790 <HAL_ETH_Init+0x1d8>)
 8002626:	4a5b      	ldr	r2, [pc, #364]	; (8002794 <HAL_ETH_Init+0x1dc>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8002628:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 800262c:	4403      	add	r3, r0
 800262e:	4293      	cmp	r3, r2
 8002630:	d222      	bcs.n	8002678 <HAL_ETH_Init+0xc0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002632:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8002636:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002638:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800263c:	2100      	movs	r1, #0
 800263e:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8002640:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002642:	f7ff ff81 	bl	8002548 <HAL_ETH_WritePHYRegister>
 8002646:	4605      	mov	r5, r0
 8002648:	b368      	cbz	r0, 80026a6 <HAL_ETH_Init+0xee>
      heth->State = HAL_ETH_STATE_READY;
 800264a:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 800264c:	2101      	movs	r1, #1
 800264e:	4620      	mov	r0, r4
 8002650:	f7ff fd5e 	bl	8002110 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8002654:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8002658:	e00b      	b.n	8002672 <HAL_ETH_Init+0xba>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800265a:	f7ff fa7d 	bl	8001b58 <HAL_GetTick>
 800265e:	1b40      	subs	r0, r0, r5
 8002660:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8002664:	d9d5      	bls.n	8002612 <HAL_ETH_Init+0x5a>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002666:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 8002668:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800266a:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800266e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8002672:	4628      	mov	r0, r5
 8002674:	b003      	add	sp, #12
 8002676:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8002678:	4b47      	ldr	r3, [pc, #284]	; (8002798 <HAL_ETH_Init+0x1e0>)
 800267a:	4a48      	ldr	r2, [pc, #288]	; (800279c <HAL_ETH_Init+0x1e4>)
 800267c:	4403      	add	r3, r0
 800267e:	4293      	cmp	r3, r2
 8002680:	d802      	bhi.n	8002688 <HAL_ETH_Init+0xd0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002682:	f045 050c 	orr.w	r5, r5, #12
 8002686:	e7d6      	b.n	8002636 <HAL_ETH_Init+0x7e>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8002688:	4b45      	ldr	r3, [pc, #276]	; (80027a0 <HAL_ETH_Init+0x1e8>)
 800268a:	4a46      	ldr	r2, [pc, #280]	; (80027a4 <HAL_ETH_Init+0x1ec>)
 800268c:	4403      	add	r3, r0
 800268e:	4293      	cmp	r3, r2
 8002690:	d3d1      	bcc.n	8002636 <HAL_ETH_Init+0x7e>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8002692:	4b45      	ldr	r3, [pc, #276]	; (80027a8 <HAL_ETH_Init+0x1f0>)
 8002694:	4a45      	ldr	r2, [pc, #276]	; (80027ac <HAL_ETH_Init+0x1f4>)
 8002696:	4403      	add	r3, r0
 8002698:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800269a:	bf94      	ite	ls
 800269c:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80026a0:	f045 0510 	orrhi.w	r5, r5, #16
 80026a4:	e7c7      	b.n	8002636 <HAL_ETH_Init+0x7e>
  HAL_Delay(PHY_RESET_DELAY);
 80026a6:	f640 70ff 	movw	r0, #4095	; 0xfff
 80026aa:	f7ff fa5b 	bl	8001b64 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80026ae:	6863      	ldr	r3, [r4, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d054      	beq.n	800275e <HAL_ETH_Init+0x1a6>
    tickstart = HAL_GetTick();
 80026b4:	f7ff fa50 	bl	8001b58 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80026b8:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80026bc:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80026be:	466a      	mov	r2, sp
 80026c0:	2101      	movs	r1, #1
 80026c2:	4620      	mov	r0, r4
 80026c4:	f7ff ff05 	bl	80024d2 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80026c8:	f7ff fa46 	bl	8001b58 <HAL_GetTick>
 80026cc:	1b80      	subs	r0, r0, r6
 80026ce:	42b8      	cmp	r0, r7
 80026d0:	d90b      	bls.n	80026ea <HAL_ETH_Init+0x132>
        ETH_MACDMAConfig(heth, err);
 80026d2:	2101      	movs	r1, #1
 80026d4:	4620      	mov	r0, r4
 80026d6:	f7ff fd1b 	bl	8002110 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 80026da:	2301      	movs	r3, #1
        return HAL_TIMEOUT;
 80026dc:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 80026de:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 80026e2:	2300      	movs	r3, #0
 80026e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 80026e8:	e7c3      	b.n	8002672 <HAL_ETH_Init+0xba>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80026ea:	9b00      	ldr	r3, [sp, #0]
 80026ec:	0759      	lsls	r1, r3, #29
 80026ee:	d5e6      	bpl.n	80026be <HAL_ETH_Init+0x106>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80026f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026f4:	2100      	movs	r1, #0
 80026f6:	4620      	mov	r0, r4
 80026f8:	f7ff ff26 	bl	8002548 <HAL_ETH_WritePHYRegister>
 80026fc:	2800      	cmp	r0, #0
 80026fe:	d1a4      	bne.n	800264a <HAL_ETH_Init+0x92>
    tickstart = HAL_GetTick();
 8002700:	f7ff fa2a 	bl	8001b58 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002704:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002708:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800270a:	466a      	mov	r2, sp
 800270c:	2101      	movs	r1, #1
 800270e:	4620      	mov	r0, r4
 8002710:	f7ff fedf 	bl	80024d2 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002714:	f7ff fa20 	bl	8001b58 <HAL_GetTick>
 8002718:	1b80      	subs	r0, r0, r6
 800271a:	42b8      	cmp	r0, r7
 800271c:	d8d9      	bhi.n	80026d2 <HAL_ETH_Init+0x11a>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800271e:	9b00      	ldr	r3, [sp, #0]
 8002720:	069a      	lsls	r2, r3, #26
 8002722:	d5f2      	bpl.n	800270a <HAL_ETH_Init+0x152>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002724:	466a      	mov	r2, sp
 8002726:	211f      	movs	r1, #31
 8002728:	4620      	mov	r0, r4
 800272a:	f7ff fed2 	bl	80024d2 <HAL_ETH_ReadPHYRegister>
 800272e:	2800      	cmp	r0, #0
 8002730:	d18b      	bne.n	800264a <HAL_ETH_Init+0x92>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002732:	9b00      	ldr	r3, [sp, #0]
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002734:	f013 0210 	ands.w	r2, r3, #16
 8002738:	bf18      	it	ne
 800273a:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800273e:	075b      	lsls	r3, r3, #29
      (heth->Init).Speed = ETH_SPEED_100M;
 8002740:	bf58      	it	pl
 8002742:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
 8002746:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002748:	bf4c      	ite	mi
 800274a:	60a0      	strmi	r0, [r4, #8]
      (heth->Init).Speed = ETH_SPEED_100M;
 800274c:	60a3      	strpl	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 800274e:	2100      	movs	r1, #0
 8002750:	4620      	mov	r0, r4
 8002752:	f7ff fcdd 	bl	8002110 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8002756:	2301      	movs	r3, #1
 8002758:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 800275c:	e789      	b.n	8002672 <HAL_ETH_Init+0xba>
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800275e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002762:	4629      	mov	r1, r5
 8002764:	4620      	mov	r0, r4
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8002766:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002768:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 800276c:	b292      	uxth	r2, r2
 800276e:	f7ff feeb 	bl	8002548 <HAL_ETH_WritePHYRegister>
 8002772:	2800      	cmp	r0, #0
 8002774:	f47f af69 	bne.w	800264a <HAL_ETH_Init+0x92>
    HAL_Delay(PHY_CONFIG_DELAY);
 8002778:	f640 70ff 	movw	r0, #4095	; 0xfff
 800277c:	f7ff f9f2 	bl	8001b64 <HAL_Delay>
 8002780:	e7e5      	b.n	800274e <HAL_ETH_Init+0x196>
    return HAL_ERROR;
 8002782:	2501      	movs	r5, #1
 8002784:	e775      	b.n	8002672 <HAL_ETH_Init+0xba>
 8002786:	bf00      	nop
 8002788:	40023800 	.word	0x40023800
 800278c:	40013800 	.word	0x40013800
 8002790:	feced300 	.word	0xfeced300
 8002794:	00e4e1c0 	.word	0x00e4e1c0
 8002798:	fde9f140 	.word	0xfde9f140
 800279c:	017d783f 	.word	0x017d783f
 80027a0:	fc6c7900 	.word	0xfc6c7900
 80027a4:	02625a00 	.word	0x02625a00
 80027a8:	fa0a1f00 	.word	0xfa0a1f00
 80027ac:	02faf07f 	.word	0x02faf07f

080027b0 <HAL_ETH_Start>:
{  
 80027b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(heth);
 80027b2:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
{  
 80027b6:	4604      	mov	r4, r0
 80027b8:	2002      	movs	r0, #2
  __HAL_LOCK(heth);
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d033      	beq.n	8002826 <HAL_ETH_Start+0x76>
 80027be:	2601      	movs	r6, #1
  __IO uint32_t tmpreg = 0;
 80027c0:	2500      	movs	r5, #0
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80027c2:	6823      	ldr	r3, [r4, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 80027c4:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027c8:	4630      	mov	r0, r6
  __IO uint32_t tmpreg = 0;
 80027ca:	9501      	str	r5, [sp, #4]
  __HAL_LOCK(heth);
 80027cc:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	f042 0208 	orr.w	r2, r2, #8
 80027d6:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027dc:	f7ff f9c2 	bl	8001b64 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80027e0:	9a01      	ldr	r2, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027e2:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 80027e4:	6823      	ldr	r3, [r4, #0]
 80027e6:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 80027e8:	9500      	str	r5, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	f042 0204 	orr.w	r2, r2, #4
 80027f0:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	9300      	str	r3, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027f6:	f7ff f9b5 	bl	8001b64 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80027fa:	6823      	ldr	r3, [r4, #0]
  ETH_FlushTransmitFIFO(heth);
 80027fc:	4620      	mov	r0, r4
  (heth->Instance)->MACCR = tmpreg;
 80027fe:	9a00      	ldr	r2, [sp, #0]
 8002800:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8002802:	f7ff fc6f 	bl	80020e4 <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002806:	6822      	ldr	r2, [r4, #0]
 8002808:	f241 0318 	movw	r3, #4120	; 0x1018
  return HAL_OK;
 800280c:	4628      	mov	r0, r5
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800280e:	58d1      	ldr	r1, [r2, r3]
 8002810:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8002814:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002816:	58d1      	ldr	r1, [r2, r3]
 8002818:	f041 0102 	orr.w	r1, r1, #2
 800281c:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 800281e:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8002822:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
 8002826:	b002      	add	sp, #8
 8002828:	bd70      	pop	{r4, r5, r6, pc}
	...

0800282c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800282c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002830:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002832:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 80029f0 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002836:	4a6c      	ldr	r2, [pc, #432]	; (80029e8 <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 8002838:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800283a:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 800283c:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800283e:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8002842:	43ac      	bics	r4, r5
 8002844:	f040 80b6 	bne.w	80029b4 <HAL_GPIO_Init+0x188>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002848:	684d      	ldr	r5, [r1, #4]
 800284a:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800284e:	2603      	movs	r6, #3
 8002850:	f005 0403 	and.w	r4, r5, #3
 8002854:	fa06 f608 	lsl.w	r6, r6, r8
 8002858:	1e67      	subs	r7, r4, #1
 800285a:	43f6      	mvns	r6, r6
 800285c:	2f01      	cmp	r7, #1
 800285e:	d834      	bhi.n	80028ca <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR; 
 8002860:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002862:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8002866:	68cf      	ldr	r7, [r1, #12]
 8002868:	fa07 f708 	lsl.w	r7, r7, r8
 800286c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8002870:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002872:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002874:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002878:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800287c:	409f      	lsls	r7, r3
 800287e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002882:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8002884:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002886:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002888:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800288c:	688f      	ldr	r7, [r1, #8]
 800288e:	fa07 f708 	lsl.w	r7, r7, r8
 8002892:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8002896:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002898:	d119      	bne.n	80028ce <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 800289a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800289e:	f003 0b07 	and.w	fp, r3, #7
 80028a2:	f04f 0e0f 	mov.w	lr, #15
 80028a6:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80028aa:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80028ae:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80028b2:	fa0e fe0b 	lsl.w	lr, lr, fp
 80028b6:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80028ba:	690f      	ldr	r7, [r1, #16]
 80028bc:	fa07 f70b 	lsl.w	r7, r7, fp
 80028c0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 80028c4:	f8ca 7020 	str.w	r7, [sl, #32]
 80028c8:	e001      	b.n	80028ce <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028ca:	2c03      	cmp	r4, #3
 80028cc:	d1da      	bne.n	8002884 <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 80028ce:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80028d0:	fa04 f408 	lsl.w	r4, r4, r8
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028d4:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80028d8:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80028dc:	ea46 0604 	orr.w	r6, r6, r4
      GPIOx->MODER = temp;
 80028e0:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028e2:	d067      	beq.n	80029b4 <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028e4:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 80028e8:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80028ec:	f003 0703 	and.w	r7, r3, #3
 80028f0:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028f4:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80028f8:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80028fc:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028fe:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 8002902:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 8002906:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 800290a:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 800290e:	9401      	str	r4, [sp, #4]
 8002910:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002912:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2];
 8002916:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800291a:	ea28 0e04 	bic.w	lr, r8, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800291e:	4c33      	ldr	r4, [pc, #204]	; (80029ec <HAL_GPIO_Init+0x1c0>)
 8002920:	42a0      	cmp	r0, r4
 8002922:	d04e      	beq.n	80029c2 <HAL_GPIO_Init+0x196>
 8002924:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002928:	42a0      	cmp	r0, r4
 800292a:	d04c      	beq.n	80029c6 <HAL_GPIO_Init+0x19a>
 800292c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002930:	42a0      	cmp	r0, r4
 8002932:	d04a      	beq.n	80029ca <HAL_GPIO_Init+0x19e>
 8002934:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002938:	42a0      	cmp	r0, r4
 800293a:	d048      	beq.n	80029ce <HAL_GPIO_Init+0x1a2>
 800293c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002940:	42a0      	cmp	r0, r4
 8002942:	d046      	beq.n	80029d2 <HAL_GPIO_Init+0x1a6>
 8002944:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002948:	42a0      	cmp	r0, r4
 800294a:	d044      	beq.n	80029d6 <HAL_GPIO_Init+0x1aa>
 800294c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002950:	42a0      	cmp	r0, r4
 8002952:	d042      	beq.n	80029da <HAL_GPIO_Init+0x1ae>
 8002954:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002958:	42a0      	cmp	r0, r4
 800295a:	d040      	beq.n	80029de <HAL_GPIO_Init+0x1b2>
 800295c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002960:	42a0      	cmp	r0, r4
 8002962:	d03e      	beq.n	80029e2 <HAL_GPIO_Init+0x1b6>
 8002964:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002968:	42a0      	cmp	r0, r4
 800296a:	bf0c      	ite	eq
 800296c:	2409      	moveq	r4, #9
 800296e:	240a      	movne	r4, #10
 8002970:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002972:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002974:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8002978:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 800297a:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 800297e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8002980:	bf54      	ite	pl
 8002982:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002984:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002988:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 800298a:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 800298c:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 800298e:	bf54      	ite	pl
 8002990:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002992:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002996:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 8002998:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 800299a:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 800299c:	bf54      	ite	pl
 800299e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80029a0:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029a4:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 80029a6:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 80029a8:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80029aa:	bf54      	ite	pl
 80029ac:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80029ae:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 80029b2:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80029b4:	3301      	adds	r3, #1
 80029b6:	2b10      	cmp	r3, #16
 80029b8:	f47f af3e 	bne.w	8002838 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 80029bc:	b003      	add	sp, #12
 80029be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80029c2:	2400      	movs	r4, #0
 80029c4:	e7d4      	b.n	8002970 <HAL_GPIO_Init+0x144>
 80029c6:	2401      	movs	r4, #1
 80029c8:	e7d2      	b.n	8002970 <HAL_GPIO_Init+0x144>
 80029ca:	2402      	movs	r4, #2
 80029cc:	e7d0      	b.n	8002970 <HAL_GPIO_Init+0x144>
 80029ce:	2403      	movs	r4, #3
 80029d0:	e7ce      	b.n	8002970 <HAL_GPIO_Init+0x144>
 80029d2:	2404      	movs	r4, #4
 80029d4:	e7cc      	b.n	8002970 <HAL_GPIO_Init+0x144>
 80029d6:	2405      	movs	r4, #5
 80029d8:	e7ca      	b.n	8002970 <HAL_GPIO_Init+0x144>
 80029da:	2406      	movs	r4, #6
 80029dc:	e7c8      	b.n	8002970 <HAL_GPIO_Init+0x144>
 80029de:	2407      	movs	r4, #7
 80029e0:	e7c6      	b.n	8002970 <HAL_GPIO_Init+0x144>
 80029e2:	2408      	movs	r4, #8
 80029e4:	e7c4      	b.n	8002970 <HAL_GPIO_Init+0x144>
 80029e6:	bf00      	nop
 80029e8:	40013c00 	.word	0x40013c00
 80029ec:	40020000 	.word	0x40020000
 80029f0:	40023800 	.word	0x40023800

080029f4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029f4:	b10a      	cbz	r2, 80029fa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80029f6:	6181      	str	r1, [r0, #24]
  }
}
 80029f8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80029fa:	0409      	lsls	r1, r1, #16
 80029fc:	e7fb      	b.n	80029f6 <HAL_GPIO_WritePin+0x2>

080029fe <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80029fe:	01d2      	lsls	r2, r2, #7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002a00:	f8d1 c000 	ldr.w	ip, [r1]
{
 8002a04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002a08:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002a0a:	6804      	ldr	r4, [r0, #0]
 8002a0c:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002a0e:	f10c 0601 	add.w	r6, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002a12:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002a14:	68e5      	ldr	r5, [r4, #12]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002a16:	f04f 0e00 	mov.w	lr, #0
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002a1a:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002a1e:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002a20:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002a24:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002a28:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002a2a:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002a2c:	68e0      	ldr	r0, [r4, #12]
 8002a2e:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8002a32:	4430      	add	r0, r6
 8002a34:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002a38:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002a3a:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002a3c:	68e0      	ldr	r0, [r4, #12]
 8002a3e:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8002a42:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002a44:	6898      	ldr	r0, [r3, #8]
 8002a46:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8002a4a:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002a4c:	6888      	ldr	r0, [r1, #8]
 8002a4e:	68e6      	ldr	r6, [r4, #12]
 8002a50:	3001      	adds	r0, #1
 8002a52:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8002a56:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002a58:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002a5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8002a5e:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002a60:	6918      	ldr	r0, [r3, #16]
 8002a62:	f020 0007 	bic.w	r0, r0, #7
 8002a66:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002a68:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002a6a:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002a6c:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002a70:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002a74:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002a78:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8002a7c:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8002a80:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8002a84:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8002a88:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002a8a:	6958      	ldr	r0, [r3, #20]
 8002a8c:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8002a90:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002a92:	6948      	ldr	r0, [r1, #20]
 8002a94:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002a96:	69d8      	ldr	r0, [r3, #28]
 8002a98:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8002a9c:	f020 0007 	bic.w	r0, r0, #7
 8002aa0:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002aa2:	e9d1 5007 	ldrd	r5, r0, [r1, #28]
 8002aa6:	4305      	orrs	r5, r0
 8002aa8:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002aaa:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002aac:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002aae:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002ab2:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002ab4:	b31e      	cbz	r6, 8002afe <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002ab6:	2e01      	cmp	r6, #1
 8002ab8:	d023      	beq.n	8002b02 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002aba:	1eb0      	subs	r0, r6, #2
 8002abc:	2802      	cmp	r0, #2
 8002abe:	d922      	bls.n	8002b06 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002ac0:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8002ac2:	bf0c      	ite	eq
 8002ac4:	2002      	moveq	r0, #2
 8002ac6:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002ac8:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002aca:	eba7 070c 	sub.w	r7, r7, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002ace:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8002ad2:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002ad4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002ad6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002ad8:	4345      	muls	r5, r0
 8002ada:	4378      	muls	r0, r7
 8002adc:	3003      	adds	r0, #3
 8002ade:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8002ae2:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002ae4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002ae6:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8002aea:	f020 0007 	bic.w	r0, r0, #7
 8002aee:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002af0:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002af2:	58a3      	ldr	r3, [r4, r2]
 8002af4:	f043 0301 	orr.w	r3, r3, #1
 8002af8:	50a3      	str	r3, [r4, r2]
}
 8002afa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8002afe:	2004      	movs	r0, #4
 8002b00:	e7e2      	b.n	8002ac8 <LTDC_SetConfig+0xca>
    tmp = 3U;
 8002b02:	2003      	movs	r0, #3
 8002b04:	e7e0      	b.n	8002ac8 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8002b06:	2002      	movs	r0, #2
 8002b08:	e7de      	b.n	8002ac8 <LTDC_SetConfig+0xca>

08002b0a <HAL_LTDC_MspInit>:
}
 8002b0a:	4770      	bx	lr

08002b0c <HAL_LTDC_Init>:
{
 8002b0c:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8002b0e:	4604      	mov	r4, r0
 8002b10:	2800      	cmp	r0, #0
 8002b12:	d063      	beq.n	8002bdc <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002b14:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8002b18:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002b1c:	b91b      	cbnz	r3, 8002b26 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8002b1e:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8002b22:	f7ff fff2 	bl	8002b0a <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002b26:	2302      	movs	r3, #2
 8002b28:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002b2c:	6823      	ldr	r3, [r4, #0]
 8002b2e:	699a      	ldr	r2, [r3, #24]
 8002b30:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002b34:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002b36:	6999      	ldr	r1, [r3, #24]
 8002b38:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8002b3c:	4302      	orrs	r2, r0
 8002b3e:	68e0      	ldr	r0, [r4, #12]
 8002b40:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002b42:	6920      	ldr	r0, [r4, #16]
 8002b44:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002b46:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002b48:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002b4a:	4925      	ldr	r1, [pc, #148]	; (8002be0 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002b4c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	400a      	ands	r2, r1
 8002b52:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002b5a:	69a0      	ldr	r0, [r4, #24]
 8002b5c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002b5e:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002b60:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002b62:	68da      	ldr	r2, [r3, #12]
 8002b64:	400a      	ands	r2, r1
 8002b66:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002b68:	68da      	ldr	r2, [r3, #12]
 8002b6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002b6e:	6a20      	ldr	r0, [r4, #32]
 8002b70:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002b72:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002b74:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002b76:	691a      	ldr	r2, [r3, #16]
 8002b78:	400a      	ands	r2, r1
 8002b7a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002b7c:	691a      	ldr	r2, [r3, #16]
 8002b7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002b82:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002b84:	4302      	orrs	r2, r0
 8002b86:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002b88:	695a      	ldr	r2, [r3, #20]
 8002b8a:	4011      	ands	r1, r2
 8002b8c:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002b8e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002b90:	695a      	ldr	r2, [r3, #20]
 8002b92:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002b96:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002b9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002b9e:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002ba2:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002ba6:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002baa:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002bac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bae:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8002bb8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002bbc:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002bbe:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002bc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bc2:	f042 0206 	orr.w	r2, r2, #6
 8002bc6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8002bc8:	699a      	ldr	r2, [r3, #24]
 8002bca:	f042 0201 	orr.w	r2, r2, #1
 8002bce:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8002bd0:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002bd2:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8002bd6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8002bda:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002bdc:	2001      	movs	r0, #1
 8002bde:	e7fc      	b.n	8002bda <HAL_LTDC_Init+0xce>
 8002be0:	f000f800 	.word	0xf000f800

08002be4 <HAL_LTDC_ConfigLayer>:
{
 8002be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8002be8:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 8002bec:	4606      	mov	r6, r0
 8002bee:	460f      	mov	r7, r1
 8002bf0:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	f04f 0002 	mov.w	r0, #2
 8002bf8:	d01f      	beq.n	8002c3a <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002bfa:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 8002bfc:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002c00:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002c02:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002c06:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8002c0a:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002c0e:	3438      	adds	r4, #56	; 0x38
 8002c10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c1c:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002c1e:	4630      	mov	r0, r6
 8002c20:	4662      	mov	r2, ip
 8002c22:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002c24:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002c26:	f7ff feea 	bl	80029fe <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002c2a:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8002c2c:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002c2e:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002c32:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8002c36:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8002c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002c3e <HAL_LTDC_GetState>:
  return hltdc->State;
 8002c3e:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
}
 8002c42:	4770      	bx	lr

08002c44 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c44:	4b19      	ldr	r3, [pc, #100]	; (8002cac <HAL_PWREx_EnableOverDrive+0x68>)
{
 8002c46:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002c4a:	4c19      	ldr	r4, [pc, #100]	; (8002cb0 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c4c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c50:	641a      	str	r2, [r3, #64]	; 0x40
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c58:	9301      	str	r3, [sp, #4]
 8002c5a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002c5c:	6823      	ldr	r3, [r4, #0]
 8002c5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c62:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c64:	f7fe ff78 	bl	8001b58 <HAL_GetTick>
 8002c68:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c6a:	6863      	ldr	r3, [r4, #4]
 8002c6c:	03da      	lsls	r2, r3, #15
 8002c6e:	d50c      	bpl.n	8002c8a <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c70:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c72:	4d0f      	ldr	r5, [pc, #60]	; (8002cb0 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c78:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002c7a:	f7fe ff6d 	bl	8001b58 <HAL_GetTick>
 8002c7e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c80:	686b      	ldr	r3, [r5, #4]
 8002c82:	039b      	lsls	r3, r3, #14
 8002c84:	d50a      	bpl.n	8002c9c <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8002c86:	2000      	movs	r0, #0
 8002c88:	e006      	b.n	8002c98 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c8a:	f7fe ff65 	bl	8001b58 <HAL_GetTick>
 8002c8e:	1b40      	subs	r0, r0, r5
 8002c90:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002c94:	d9e9      	bls.n	8002c6a <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8002c96:	2003      	movs	r0, #3
}
 8002c98:	b003      	add	sp, #12
 8002c9a:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c9c:	f7fe ff5c 	bl	8001b58 <HAL_GetTick>
 8002ca0:	1b00      	subs	r0, r0, r4
 8002ca2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002ca6:	d9eb      	bls.n	8002c80 <HAL_PWREx_EnableOverDrive+0x3c>
 8002ca8:	e7f5      	b.n	8002c96 <HAL_PWREx_EnableOverDrive+0x52>
 8002caa:	bf00      	nop
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	40007000 	.word	0x40007000

08002cb4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cb4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cb8:	4604      	mov	r4, r0
 8002cba:	b340      	cbz	r0, 8002d0e <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cbc:	6803      	ldr	r3, [r0, #0]
 8002cbe:	07d8      	lsls	r0, r3, #31
 8002cc0:	d410      	bmi.n	8002ce4 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cc2:	6823      	ldr	r3, [r4, #0]
 8002cc4:	0799      	lsls	r1, r3, #30
 8002cc6:	d464      	bmi.n	8002d92 <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cc8:	6823      	ldr	r3, [r4, #0]
 8002cca:	0719      	lsls	r1, r3, #28
 8002ccc:	f100 80aa 	bmi.w	8002e24 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cd0:	6823      	ldr	r3, [r4, #0]
 8002cd2:	075a      	lsls	r2, r3, #29
 8002cd4:	f100 80cb 	bmi.w	8002e6e <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cd8:	69a2      	ldr	r2, [r4, #24]
 8002cda:	2a00      	cmp	r2, #0
 8002cdc:	f040 8134 	bne.w	8002f48 <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	e02b      	b.n	8002d3c <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ce4:	4b96      	ldr	r3, [pc, #600]	; (8002f40 <HAL_RCC_OscConfig+0x28c>)
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	f002 020c 	and.w	r2, r2, #12
 8002cec:	2a04      	cmp	r2, #4
 8002cee:	d007      	beq.n	8002d00 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	f002 020c 	and.w	r2, r2, #12
 8002cf6:	2a08      	cmp	r2, #8
 8002cf8:	d10b      	bne.n	8002d12 <HAL_RCC_OscConfig+0x5e>
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	0252      	lsls	r2, r2, #9
 8002cfe:	d508      	bpl.n	8002d12 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d00:	4b8f      	ldr	r3, [pc, #572]	; (8002f40 <HAL_RCC_OscConfig+0x28c>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	039b      	lsls	r3, r3, #14
 8002d06:	d5dc      	bpl.n	8002cc2 <HAL_RCC_OscConfig+0xe>
 8002d08:	6863      	ldr	r3, [r4, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1d9      	bne.n	8002cc2 <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 8002d0e:	2001      	movs	r0, #1
 8002d10:	e014      	b.n	8002d3c <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d12:	6862      	ldr	r2, [r4, #4]
 8002d14:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002d18:	d113      	bne.n	8002d42 <HAL_RCC_OscConfig+0x8e>
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002d20:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002d22:	f7fe ff19 	bl	8001b58 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d26:	4e86      	ldr	r6, [pc, #536]	; (8002f40 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8002d28:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2a:	6833      	ldr	r3, [r6, #0]
 8002d2c:	039f      	lsls	r7, r3, #14
 8002d2e:	d4c8      	bmi.n	8002cc2 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d30:	f7fe ff12 	bl	8001b58 <HAL_GetTick>
 8002d34:	1b40      	subs	r0, r0, r5
 8002d36:	2864      	cmp	r0, #100	; 0x64
 8002d38:	d9f7      	bls.n	8002d2a <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8002d3a:	2003      	movs	r0, #3
}
 8002d3c:	b002      	add	sp, #8
 8002d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d42:	4d7f      	ldr	r5, [pc, #508]	; (8002f40 <HAL_RCC_OscConfig+0x28c>)
 8002d44:	682b      	ldr	r3, [r5, #0]
 8002d46:	b992      	cbnz	r2, 8002d6e <HAL_RCC_OscConfig+0xba>
 8002d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d4c:	602b      	str	r3, [r5, #0]
 8002d4e:	682b      	ldr	r3, [r5, #0]
 8002d50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d54:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002d56:	f7fe feff 	bl	8001b58 <HAL_GetTick>
 8002d5a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d5c:	682b      	ldr	r3, [r5, #0]
 8002d5e:	0398      	lsls	r0, r3, #14
 8002d60:	d5af      	bpl.n	8002cc2 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d62:	f7fe fef9 	bl	8001b58 <HAL_GetTick>
 8002d66:	1b80      	subs	r0, r0, r6
 8002d68:	2864      	cmp	r0, #100	; 0x64
 8002d6a:	d9f7      	bls.n	8002d5c <HAL_RCC_OscConfig+0xa8>
 8002d6c:	e7e5      	b.n	8002d3a <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d6e:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8002d72:	d107      	bne.n	8002d84 <HAL_RCC_OscConfig+0xd0>
 8002d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d78:	602b      	str	r3, [r5, #0]
 8002d7a:	682b      	ldr	r3, [r5, #0]
 8002d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d80:	602b      	str	r3, [r5, #0]
 8002d82:	e7ce      	b.n	8002d22 <HAL_RCC_OscConfig+0x6e>
 8002d84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d88:	602b      	str	r3, [r5, #0]
 8002d8a:	682b      	ldr	r3, [r5, #0]
 8002d8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d90:	e7f6      	b.n	8002d80 <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d92:	4b6b      	ldr	r3, [pc, #428]	; (8002f40 <HAL_RCC_OscConfig+0x28c>)
 8002d94:	689a      	ldr	r2, [r3, #8]
 8002d96:	f012 0f0c 	tst.w	r2, #12
 8002d9a:	d007      	beq.n	8002dac <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d9c:	689a      	ldr	r2, [r3, #8]
 8002d9e:	f002 020c 	and.w	r2, r2, #12
 8002da2:	2a08      	cmp	r2, #8
 8002da4:	d111      	bne.n	8002dca <HAL_RCC_OscConfig+0x116>
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	0251      	lsls	r1, r2, #9
 8002daa:	d40e      	bmi.n	8002dca <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dac:	4b64      	ldr	r3, [pc, #400]	; (8002f40 <HAL_RCC_OscConfig+0x28c>)
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	0792      	lsls	r2, r2, #30
 8002db2:	d502      	bpl.n	8002dba <HAL_RCC_OscConfig+0x106>
 8002db4:	68e2      	ldr	r2, [r4, #12]
 8002db6:	2a01      	cmp	r2, #1
 8002db8:	d1a9      	bne.n	8002d0e <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	6921      	ldr	r1, [r4, #16]
 8002dbe:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002dc2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002dc6:	601a      	str	r2, [r3, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dc8:	e77e      	b.n	8002cc8 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002dca:	68e2      	ldr	r2, [r4, #12]
 8002dcc:	b1c2      	cbz	r2, 8002e00 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
 8002dce:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd0:	4d5b      	ldr	r5, [pc, #364]	; (8002f40 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 8002dd2:	f042 0201 	orr.w	r2, r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002dd8:	f7fe febe 	bl	8001b58 <HAL_GetTick>
 8002ddc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dde:	682b      	ldr	r3, [r5, #0]
 8002de0:	079f      	lsls	r7, r3, #30
 8002de2:	d507      	bpl.n	8002df4 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de4:	682b      	ldr	r3, [r5, #0]
 8002de6:	6922      	ldr	r2, [r4, #16]
 8002de8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002dec:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002df0:	602b      	str	r3, [r5, #0]
 8002df2:	e769      	b.n	8002cc8 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002df4:	f7fe feb0 	bl	8001b58 <HAL_GetTick>
 8002df8:	1b80      	subs	r0, r0, r6
 8002dfa:	2802      	cmp	r0, #2
 8002dfc:	d9ef      	bls.n	8002dde <HAL_RCC_OscConfig+0x12a>
 8002dfe:	e79c      	b.n	8002d3a <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8002e00:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e02:	4e4f      	ldr	r6, [pc, #316]	; (8002f40 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
 8002e04:	f022 0201 	bic.w	r2, r2, #1
 8002e08:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002e0a:	f7fe fea5 	bl	8001b58 <HAL_GetTick>
 8002e0e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e10:	6833      	ldr	r3, [r6, #0]
 8002e12:	0798      	lsls	r0, r3, #30
 8002e14:	f57f af58 	bpl.w	8002cc8 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e18:	f7fe fe9e 	bl	8001b58 <HAL_GetTick>
 8002e1c:	1b40      	subs	r0, r0, r5
 8002e1e:	2802      	cmp	r0, #2
 8002e20:	d9f6      	bls.n	8002e10 <HAL_RCC_OscConfig+0x15c>
 8002e22:	e78a      	b.n	8002d3a <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e24:	6963      	ldr	r3, [r4, #20]
 8002e26:	4d46      	ldr	r5, [pc, #280]	; (8002f40 <HAL_RCC_OscConfig+0x28c>)
 8002e28:	b183      	cbz	r3, 8002e4c <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
 8002e2a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002e2c:	f043 0301 	orr.w	r3, r3, #1
 8002e30:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002e32:	f7fe fe91 	bl	8001b58 <HAL_GetTick>
 8002e36:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e38:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002e3a:	079b      	lsls	r3, r3, #30
 8002e3c:	f53f af48 	bmi.w	8002cd0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e40:	f7fe fe8a 	bl	8001b58 <HAL_GetTick>
 8002e44:	1b80      	subs	r0, r0, r6
 8002e46:	2802      	cmp	r0, #2
 8002e48:	d9f6      	bls.n	8002e38 <HAL_RCC_OscConfig+0x184>
 8002e4a:	e776      	b.n	8002d3a <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8002e4c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002e4e:	f023 0301 	bic.w	r3, r3, #1
 8002e52:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002e54:	f7fe fe80 	bl	8001b58 <HAL_GetTick>
 8002e58:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e5a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002e5c:	079f      	lsls	r7, r3, #30
 8002e5e:	f57f af37 	bpl.w	8002cd0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e62:	f7fe fe79 	bl	8001b58 <HAL_GetTick>
 8002e66:	1b80      	subs	r0, r0, r6
 8002e68:	2802      	cmp	r0, #2
 8002e6a:	d9f6      	bls.n	8002e5a <HAL_RCC_OscConfig+0x1a6>
 8002e6c:	e765      	b.n	8002d3a <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e6e:	4b34      	ldr	r3, [pc, #208]	; (8002f40 <HAL_RCC_OscConfig+0x28c>)
 8002e70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e72:	00d0      	lsls	r0, r2, #3
 8002e74:	d427      	bmi.n	8002ec6 <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8002e78:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e7a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e7e:	641a      	str	r2, [r3, #64]	; 0x40
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e86:	9301      	str	r3, [sp, #4]
 8002e88:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e8a:	4d2e      	ldr	r5, [pc, #184]	; (8002f44 <HAL_RCC_OscConfig+0x290>)
 8002e8c:	682b      	ldr	r3, [r5, #0]
 8002e8e:	05d9      	lsls	r1, r3, #23
 8002e90:	d51b      	bpl.n	8002eca <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e92:	68a3      	ldr	r3, [r4, #8]
 8002e94:	4d2a      	ldr	r5, [pc, #168]	; (8002f40 <HAL_RCC_OscConfig+0x28c>)
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d127      	bne.n	8002eea <HAL_RCC_OscConfig+0x236>
 8002e9a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002e9c:	f043 0301 	orr.w	r3, r3, #1
 8002ea0:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ea2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002ea6:	f7fe fe57 	bl	8001b58 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eaa:	4e25      	ldr	r6, [pc, #148]	; (8002f40 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8002eac:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eae:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002eb0:	079b      	lsls	r3, r3, #30
 8002eb2:	d53f      	bpl.n	8002f34 <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
 8002eb4:	2f00      	cmp	r7, #0
 8002eb6:	f43f af0f 	beq.w	8002cd8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eba:	4a21      	ldr	r2, [pc, #132]	; (8002f40 <HAL_RCC_OscConfig+0x28c>)
 8002ebc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002ebe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ec2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ec4:	e708      	b.n	8002cd8 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 8002ec6:	2700      	movs	r7, #0
 8002ec8:	e7df      	b.n	8002e8a <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
 8002eca:	682b      	ldr	r3, [r5, #0]
 8002ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002ed2:	f7fe fe41 	bl	8001b58 <HAL_GetTick>
 8002ed6:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ed8:	682b      	ldr	r3, [r5, #0]
 8002eda:	05da      	lsls	r2, r3, #23
 8002edc:	d4d9      	bmi.n	8002e92 <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ede:	f7fe fe3b 	bl	8001b58 <HAL_GetTick>
 8002ee2:	1b80      	subs	r0, r0, r6
 8002ee4:	2864      	cmp	r0, #100	; 0x64
 8002ee6:	d9f7      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x224>
 8002ee8:	e727      	b.n	8002d3a <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eea:	b9ab      	cbnz	r3, 8002f18 <HAL_RCC_OscConfig+0x264>
 8002eec:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eee:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ef2:	f023 0301 	bic.w	r3, r3, #1
 8002ef6:	672b      	str	r3, [r5, #112]	; 0x70
 8002ef8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002efa:	f023 0304 	bic.w	r3, r3, #4
 8002efe:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002f00:	f7fe fe2a 	bl	8001b58 <HAL_GetTick>
 8002f04:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f06:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002f08:	0798      	lsls	r0, r3, #30
 8002f0a:	d5d3      	bpl.n	8002eb4 <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f0c:	f7fe fe24 	bl	8001b58 <HAL_GetTick>
 8002f10:	1b80      	subs	r0, r0, r6
 8002f12:	4540      	cmp	r0, r8
 8002f14:	d9f7      	bls.n	8002f06 <HAL_RCC_OscConfig+0x252>
 8002f16:	e710      	b.n	8002d3a <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f18:	2b05      	cmp	r3, #5
 8002f1a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002f1c:	d103      	bne.n	8002f26 <HAL_RCC_OscConfig+0x272>
 8002f1e:	f043 0304 	orr.w	r3, r3, #4
 8002f22:	672b      	str	r3, [r5, #112]	; 0x70
 8002f24:	e7b9      	b.n	8002e9a <HAL_RCC_OscConfig+0x1e6>
 8002f26:	f023 0301 	bic.w	r3, r3, #1
 8002f2a:	672b      	str	r3, [r5, #112]	; 0x70
 8002f2c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002f2e:	f023 0304 	bic.w	r3, r3, #4
 8002f32:	e7b5      	b.n	8002ea0 <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f34:	f7fe fe10 	bl	8001b58 <HAL_GetTick>
 8002f38:	1b40      	subs	r0, r0, r5
 8002f3a:	4540      	cmp	r0, r8
 8002f3c:	d9b7      	bls.n	8002eae <HAL_RCC_OscConfig+0x1fa>
 8002f3e:	e6fc      	b.n	8002d3a <HAL_RCC_OscConfig+0x86>
 8002f40:	40023800 	.word	0x40023800
 8002f44:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f48:	4d38      	ldr	r5, [pc, #224]	; (800302c <HAL_RCC_OscConfig+0x378>)
 8002f4a:	68ab      	ldr	r3, [r5, #8]
 8002f4c:	f003 030c 	and.w	r3, r3, #12
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d041      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x324>
        __HAL_RCC_PLL_DISABLE();
 8002f54:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f56:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002f58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f5c:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f5e:	d12e      	bne.n	8002fbe <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 8002f60:	f7fe fdfa 	bl	8001b58 <HAL_GetTick>
 8002f64:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f66:	682b      	ldr	r3, [r5, #0]
 8002f68:	0199      	lsls	r1, r3, #6
 8002f6a:	d422      	bmi.n	8002fb2 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002f6e:	085b      	lsrs	r3, r3, #1
 8002f70:	1e5a      	subs	r2, r3, #1
 8002f72:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8002f76:	430b      	orrs	r3, r1
 8002f78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002f7c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002f7e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002f82:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002f84:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002f88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002f8c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002f8e:	682b      	ldr	r3, [r5, #0]
 8002f90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f94:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002f96:	f7fe fddf 	bl	8001b58 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f9a:	4d24      	ldr	r5, [pc, #144]	; (800302c <HAL_RCC_OscConfig+0x378>)
        tickstart = HAL_GetTick();
 8002f9c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f9e:	682b      	ldr	r3, [r5, #0]
 8002fa0:	019a      	lsls	r2, r3, #6
 8002fa2:	f53f ae9d 	bmi.w	8002ce0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa6:	f7fe fdd7 	bl	8001b58 <HAL_GetTick>
 8002faa:	1b00      	subs	r0, r0, r4
 8002fac:	2802      	cmp	r0, #2
 8002fae:	d9f6      	bls.n	8002f9e <HAL_RCC_OscConfig+0x2ea>
 8002fb0:	e6c3      	b.n	8002d3a <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb2:	f7fe fdd1 	bl	8001b58 <HAL_GetTick>
 8002fb6:	1b80      	subs	r0, r0, r6
 8002fb8:	2802      	cmp	r0, #2
 8002fba:	d9d4      	bls.n	8002f66 <HAL_RCC_OscConfig+0x2b2>
 8002fbc:	e6bd      	b.n	8002d3a <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8002fbe:	f7fe fdcb 	bl	8001b58 <HAL_GetTick>
 8002fc2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fc4:	682b      	ldr	r3, [r5, #0]
 8002fc6:	019b      	lsls	r3, r3, #6
 8002fc8:	f57f ae8a 	bpl.w	8002ce0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fcc:	f7fe fdc4 	bl	8001b58 <HAL_GetTick>
 8002fd0:	1b00      	subs	r0, r0, r4
 8002fd2:	2802      	cmp	r0, #2
 8002fd4:	d9f6      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x310>
 8002fd6:	e6b0      	b.n	8002d3a <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fd8:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 8002fda:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fdc:	f43f ae97 	beq.w	8002d0e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fe4:	69e1      	ldr	r1, [r4, #28]
 8002fe6:	428a      	cmp	r2, r1
 8002fe8:	f47f ae91 	bne.w	8002d0e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff0:	6a21      	ldr	r1, [r4, #32]
 8002ff2:	428a      	cmp	r2, r1
 8002ff4:	f47f ae8b 	bne.w	8002d0e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ff8:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ffc:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ffe:	401a      	ands	r2, r3
 8003000:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8003004:	f47f ae83 	bne.w	8002d0e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003008:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800300a:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800300e:	0852      	lsrs	r2, r2, #1
 8003010:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003012:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003016:	f47f ae7a 	bne.w	8002d0e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800301a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800301e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003020:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8003024:	f43f ae5c 	beq.w	8002ce0 <HAL_RCC_OscConfig+0x2c>
 8003028:	e671      	b.n	8002d0e <HAL_RCC_OscConfig+0x5a>
 800302a:	bf00      	nop
 800302c:	40023800 	.word	0x40023800

08003030 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003030:	4913      	ldr	r1, [pc, #76]	; (8003080 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8003032:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003034:	688b      	ldr	r3, [r1, #8]
 8003036:	f003 030c 	and.w	r3, r3, #12
 800303a:	2b04      	cmp	r3, #4
 800303c:	d01b      	beq.n	8003076 <HAL_RCC_GetSysClockFreq+0x46>
 800303e:	2b08      	cmp	r3, #8
 8003040:	d11b      	bne.n	800307a <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003042:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003044:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003046:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003048:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800304c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003050:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003054:	bf1a      	itte	ne
 8003056:	480b      	ldrne	r0, [pc, #44]	; (8003084 <HAL_RCC_GetSysClockFreq+0x54>)
 8003058:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800305a:	480b      	ldreq	r0, [pc, #44]	; (8003088 <HAL_RCC_GetSysClockFreq+0x58>)
 800305c:	fba1 0100 	umull	r0, r1, r1, r0
 8003060:	f7fd f926 	bl	80002b0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003064:	4b06      	ldr	r3, [pc, #24]	; (8003080 <HAL_RCC_GetSysClockFreq+0x50>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800306c:	3301      	adds	r3, #1
 800306e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8003070:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003074:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003076:	4803      	ldr	r0, [pc, #12]	; (8003084 <HAL_RCC_GetSysClockFreq+0x54>)
 8003078:	e7fc      	b.n	8003074 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 800307a:	4803      	ldr	r0, [pc, #12]	; (8003088 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 800307c:	e7fa      	b.n	8003074 <HAL_RCC_GetSysClockFreq+0x44>
 800307e:	bf00      	nop
 8003080:	40023800 	.word	0x40023800
 8003084:	017d7840 	.word	0x017d7840
 8003088:	00f42400 	.word	0x00f42400

0800308c <HAL_RCC_ClockConfig>:
{
 800308c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003090:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8003092:	4604      	mov	r4, r0
 8003094:	b910      	cbnz	r0, 800309c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003096:	2001      	movs	r0, #1
}
 8003098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800309c:	4a46      	ldr	r2, [pc, #280]	; (80031b8 <HAL_RCC_ClockConfig+0x12c>)
 800309e:	6813      	ldr	r3, [r2, #0]
 80030a0:	f003 030f 	and.w	r3, r3, #15
 80030a4:	428b      	cmp	r3, r1
 80030a6:	d328      	bcc.n	80030fa <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030a8:	6822      	ldr	r2, [r4, #0]
 80030aa:	0797      	lsls	r7, r2, #30
 80030ac:	d430      	bmi.n	8003110 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ae:	07d0      	lsls	r0, r2, #31
 80030b0:	d444      	bmi.n	800313c <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030b2:	4a41      	ldr	r2, [pc, #260]	; (80031b8 <HAL_RCC_ClockConfig+0x12c>)
 80030b4:	6813      	ldr	r3, [r2, #0]
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	42ab      	cmp	r3, r5
 80030bc:	d867      	bhi.n	800318e <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030be:	6822      	ldr	r2, [r4, #0]
 80030c0:	0751      	lsls	r1, r2, #29
 80030c2:	d470      	bmi.n	80031a6 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030c4:	0713      	lsls	r3, r2, #28
 80030c6:	d507      	bpl.n	80030d8 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030c8:	4a3c      	ldr	r2, [pc, #240]	; (80031bc <HAL_RCC_ClockConfig+0x130>)
 80030ca:	6921      	ldr	r1, [r4, #16]
 80030cc:	6893      	ldr	r3, [r2, #8]
 80030ce:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80030d2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80030d6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030d8:	f7ff ffaa 	bl	8003030 <HAL_RCC_GetSysClockFreq>
 80030dc:	4b37      	ldr	r3, [pc, #220]	; (80031bc <HAL_RCC_ClockConfig+0x130>)
 80030de:	4a38      	ldr	r2, [pc, #224]	; (80031c0 <HAL_RCC_ClockConfig+0x134>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80030e6:	5cd3      	ldrb	r3, [r2, r3]
 80030e8:	40d8      	lsrs	r0, r3
 80030ea:	4b36      	ldr	r3, [pc, #216]	; (80031c4 <HAL_RCC_ClockConfig+0x138>)
 80030ec:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80030ee:	4b36      	ldr	r3, [pc, #216]	; (80031c8 <HAL_RCC_ClockConfig+0x13c>)
 80030f0:	6818      	ldr	r0, [r3, #0]
 80030f2:	f7fd fead 	bl	8000e50 <HAL_InitTick>
  return HAL_OK;
 80030f6:	2000      	movs	r0, #0
 80030f8:	e7ce      	b.n	8003098 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fa:	6813      	ldr	r3, [r2, #0]
 80030fc:	f023 030f 	bic.w	r3, r3, #15
 8003100:	430b      	orrs	r3, r1
 8003102:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003104:	6813      	ldr	r3, [r2, #0]
 8003106:	f003 030f 	and.w	r3, r3, #15
 800310a:	428b      	cmp	r3, r1
 800310c:	d1c3      	bne.n	8003096 <HAL_RCC_ClockConfig+0xa>
 800310e:	e7cb      	b.n	80030a8 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003110:	f012 0f04 	tst.w	r2, #4
 8003114:	4b29      	ldr	r3, [pc, #164]	; (80031bc <HAL_RCC_ClockConfig+0x130>)
 8003116:	d003      	beq.n	8003120 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003118:	6899      	ldr	r1, [r3, #8]
 800311a:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 800311e:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003120:	0716      	lsls	r6, r2, #28
 8003122:	d503      	bpl.n	800312c <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003124:	6899      	ldr	r1, [r3, #8]
 8003126:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 800312a:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800312c:	4923      	ldr	r1, [pc, #140]	; (80031bc <HAL_RCC_ClockConfig+0x130>)
 800312e:	68a0      	ldr	r0, [r4, #8]
 8003130:	688b      	ldr	r3, [r1, #8]
 8003132:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003136:	4303      	orrs	r3, r0
 8003138:	608b      	str	r3, [r1, #8]
 800313a:	e7b8      	b.n	80030ae <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800313c:	6861      	ldr	r1, [r4, #4]
 800313e:	4b1f      	ldr	r3, [pc, #124]	; (80031bc <HAL_RCC_ClockConfig+0x130>)
 8003140:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003142:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003144:	d11b      	bne.n	800317e <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003146:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800314a:	d0a4      	beq.n	8003096 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800314c:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800314e:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003152:	4f1a      	ldr	r7, [pc, #104]	; (80031bc <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003154:	f022 0203 	bic.w	r2, r2, #3
 8003158:	430a      	orrs	r2, r1
 800315a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800315c:	f7fe fcfc 	bl	8001b58 <HAL_GetTick>
 8003160:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	6862      	ldr	r2, [r4, #4]
 8003166:	f003 030c 	and.w	r3, r3, #12
 800316a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800316e:	d0a0      	beq.n	80030b2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003170:	f7fe fcf2 	bl	8001b58 <HAL_GetTick>
 8003174:	1b80      	subs	r0, r0, r6
 8003176:	4540      	cmp	r0, r8
 8003178:	d9f3      	bls.n	8003162 <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 800317a:	2003      	movs	r0, #3
 800317c:	e78c      	b.n	8003098 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800317e:	2902      	cmp	r1, #2
 8003180:	d102      	bne.n	8003188 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003182:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003186:	e7e0      	b.n	800314a <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003188:	f012 0f02 	tst.w	r2, #2
 800318c:	e7dd      	b.n	800314a <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800318e:	6813      	ldr	r3, [r2, #0]
 8003190:	f023 030f 	bic.w	r3, r3, #15
 8003194:	432b      	orrs	r3, r5
 8003196:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003198:	6813      	ldr	r3, [r2, #0]
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	42ab      	cmp	r3, r5
 80031a0:	f47f af79 	bne.w	8003096 <HAL_RCC_ClockConfig+0xa>
 80031a4:	e78b      	b.n	80030be <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031a6:	4905      	ldr	r1, [pc, #20]	; (80031bc <HAL_RCC_ClockConfig+0x130>)
 80031a8:	68e0      	ldr	r0, [r4, #12]
 80031aa:	688b      	ldr	r3, [r1, #8]
 80031ac:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80031b0:	4303      	orrs	r3, r0
 80031b2:	608b      	str	r3, [r1, #8]
 80031b4:	e786      	b.n	80030c4 <HAL_RCC_ClockConfig+0x38>
 80031b6:	bf00      	nop
 80031b8:	40023c00 	.word	0x40023c00
 80031bc:	40023800 	.word	0x40023800
 80031c0:	08013204 	.word	0x08013204
 80031c4:	2000002c 	.word	0x2000002c
 80031c8:	20000034 	.word	0x20000034

080031cc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80031cc:	4b01      	ldr	r3, [pc, #4]	; (80031d4 <HAL_RCC_GetHCLKFreq+0x8>)
 80031ce:	6818      	ldr	r0, [r3, #0]
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	2000002c 	.word	0x2000002c

080031d8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031d8:	4b04      	ldr	r3, [pc, #16]	; (80031ec <HAL_RCC_GetPCLK1Freq+0x14>)
 80031da:	4a05      	ldr	r2, [pc, #20]	; (80031f0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80031e2:	5cd3      	ldrb	r3, [r2, r3]
 80031e4:	4a03      	ldr	r2, [pc, #12]	; (80031f4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80031e6:	6810      	ldr	r0, [r2, #0]
}
 80031e8:	40d8      	lsrs	r0, r3
 80031ea:	4770      	bx	lr
 80031ec:	40023800 	.word	0x40023800
 80031f0:	08013214 	.word	0x08013214
 80031f4:	2000002c 	.word	0x2000002c

080031f8 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80031f8:	230f      	movs	r3, #15
 80031fa:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80031fc:	4b0b      	ldr	r3, [pc, #44]	; (800322c <HAL_RCC_GetClockConfig+0x34>)
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	f002 0203 	and.w	r2, r2, #3
 8003204:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800320c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8003214:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	08db      	lsrs	r3, r3, #3
 800321a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800321e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003220:	4b03      	ldr	r3, [pc, #12]	; (8003230 <HAL_RCC_GetClockConfig+0x38>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 030f 	and.w	r3, r3, #15
 8003228:	600b      	str	r3, [r1, #0]
}
 800322a:	4770      	bx	lr
 800322c:	40023800 	.word	0x40023800
 8003230:	40023c00 	.word	0x40023c00

08003234 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003234:	6803      	ldr	r3, [r0, #0]
{
 8003236:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800323a:	f013 0601 	ands.w	r6, r3, #1
{
 800323e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003240:	d00b      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003242:	4aaa      	ldr	r2, [pc, #680]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003244:	6891      	ldr	r1, [r2, #8]
 8003246:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800324a:	6091      	str	r1, [r2, #8]
 800324c:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800324e:	6891      	ldr	r1, [r2, #8]
 8003250:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003252:	fab6 f686 	clz	r6, r6
 8003256:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003258:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800325a:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 800325e:	d012      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003260:	49a2      	ldr	r1, [pc, #648]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003262:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8003264:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003268:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800326c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 8003270:	bf08      	it	eq
 8003272:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003274:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003278:	bf16      	itet	ne
 800327a:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 800327e:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003280:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003282:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003286:	02df      	lsls	r7, r3, #11
 8003288:	d510      	bpl.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800328a:	4898      	ldr	r0, [pc, #608]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800328c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800328e:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003292:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003296:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800329a:	ea42 0201 	orr.w	r2, r2, r1
 800329e:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80032a2:	f000 8184 	beq.w	80035ae <HAL_RCCEx_PeriphCLKConfig+0x37a>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 80032a6:	2900      	cmp	r1, #0
 80032a8:	bf08      	it	eq
 80032aa:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 80032ac:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80032b0:	bf18      	it	ne
 80032b2:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032b4:	0698      	lsls	r0, r3, #26
 80032b6:	d531      	bpl.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80032b8:	4b8c      	ldr	r3, [pc, #560]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80032ba:	4f8d      	ldr	r7, [pc, #564]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80032bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032be:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80032c2:	641a      	str	r2, [r3, #64]	; 0x40
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ca:	9301      	str	r3, [sp, #4]
 80032cc:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d4:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032d6:	f7fe fc3f 	bl	8001b58 <HAL_GetTick>
 80032da:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	05d9      	lsls	r1, r3, #23
 80032e0:	f140 8167 	bpl.w	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032e4:	4f81      	ldr	r7, [pc, #516]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80032e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032e8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80032ec:	f040 816c 	bne.w	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x394>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80032f2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80032f6:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80032fa:	4a7c      	ldr	r2, [pc, #496]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80032fc:	f040 818a 	bne.w	8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003300:	6891      	ldr	r1, [r2, #8]
 8003302:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8003306:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800330a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800330e:	4301      	orrs	r1, r0
 8003310:	6091      	str	r1, [r2, #8]
 8003312:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003316:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8003318:	430b      	orrs	r3, r1
 800331a:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800331c:	6823      	ldr	r3, [r4, #0]
 800331e:	06d8      	lsls	r0, r3, #27
 8003320:	d50c      	bpl.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003322:	4a72      	ldr	r2, [pc, #456]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003324:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8003328:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800332c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8003330:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8003334:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003336:	4301      	orrs	r1, r0
 8003338:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800333c:	0459      	lsls	r1, r3, #17
 800333e:	d508      	bpl.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003340:	496a      	ldr	r1, [pc, #424]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003342:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003344:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003348:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800334c:	4302      	orrs	r2, r0
 800334e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003352:	041a      	lsls	r2, r3, #16
 8003354:	d508      	bpl.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003356:	4965      	ldr	r1, [pc, #404]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003358:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800335a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800335e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8003362:	4302      	orrs	r2, r0
 8003364:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003368:	03df      	lsls	r7, r3, #15
 800336a:	d508      	bpl.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800336c:	495f      	ldr	r1, [pc, #380]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800336e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003370:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003374:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003378:	4302      	orrs	r2, r0
 800337a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800337e:	0398      	lsls	r0, r3, #14
 8003380:	d508      	bpl.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003382:	495a      	ldr	r1, [pc, #360]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003384:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8003386:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800338a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800338e:	4302      	orrs	r2, r0
 8003390:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003394:	0659      	lsls	r1, r3, #25
 8003396:	d508      	bpl.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003398:	4954      	ldr	r1, [pc, #336]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800339a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800339c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80033a0:	f022 0203 	bic.w	r2, r2, #3
 80033a4:	4302      	orrs	r2, r0
 80033a6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033aa:	061a      	lsls	r2, r3, #24
 80033ac:	d508      	bpl.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033ae:	494f      	ldr	r1, [pc, #316]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80033b0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80033b2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80033b6:	f022 020c 	bic.w	r2, r2, #12
 80033ba:	4302      	orrs	r2, r0
 80033bc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033c0:	05df      	lsls	r7, r3, #23
 80033c2:	d508      	bpl.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033c4:	4949      	ldr	r1, [pc, #292]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80033c6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80033c8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80033cc:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80033d0:	4302      	orrs	r2, r0
 80033d2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033d6:	0598      	lsls	r0, r3, #22
 80033d8:	d508      	bpl.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033da:	4944      	ldr	r1, [pc, #272]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80033dc:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80033de:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80033e2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80033e6:	4302      	orrs	r2, r0
 80033e8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033ec:	0559      	lsls	r1, r3, #21
 80033ee:	d508      	bpl.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033f0:	493e      	ldr	r1, [pc, #248]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80033f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80033f4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80033f8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80033fc:	4302      	orrs	r2, r0
 80033fe:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003402:	051a      	lsls	r2, r3, #20
 8003404:	d508      	bpl.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003406:	4939      	ldr	r1, [pc, #228]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003408:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800340a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800340e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003412:	4302      	orrs	r2, r0
 8003414:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003418:	04df      	lsls	r7, r3, #19
 800341a:	d508      	bpl.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800341c:	4933      	ldr	r1, [pc, #204]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800341e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8003420:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003424:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003428:	4302      	orrs	r2, r0
 800342a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800342e:	0498      	lsls	r0, r3, #18
 8003430:	d508      	bpl.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003432:	492e      	ldr	r1, [pc, #184]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003434:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003436:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800343a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800343e:	4302      	orrs	r2, r0
 8003440:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003444:	0259      	lsls	r1, r3, #9
 8003446:	d508      	bpl.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003448:	4928      	ldr	r1, [pc, #160]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800344a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800344c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003450:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003454:	4302      	orrs	r2, r0
 8003456:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800345a:	029a      	lsls	r2, r3, #10
 800345c:	d50c      	bpl.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800345e:	4823      	ldr	r0, [pc, #140]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003460:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8003462:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8003466:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800346a:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 800346e:	bf08      	it	eq
 8003470:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003472:	430a      	orrs	r2, r1
 8003474:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8003478:	f013 0f08 	tst.w	r3, #8
 800347c:	bf18      	it	ne
 800347e:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003480:	035f      	lsls	r7, r3, #13
 8003482:	d508      	bpl.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003484:	4919      	ldr	r1, [pc, #100]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003486:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003488:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800348c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003490:	4302      	orrs	r2, r0
 8003492:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003496:	0218      	lsls	r0, r3, #8
 8003498:	d509      	bpl.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800349a:	4914      	ldr	r1, [pc, #80]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800349c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80034a0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80034a4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80034a8:	4302      	orrs	r2, r0
 80034aa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80034ae:	2e01      	cmp	r6, #1
 80034b0:	f000 80b4 	beq.w	800361c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80034b4:	0199      	lsls	r1, r3, #6
 80034b6:	f100 80b1 	bmi.w	800361c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80034ba:	2d01      	cmp	r5, #1
 80034bc:	d175      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x376>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80034be:	4d0b      	ldr	r5, [pc, #44]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80034c0:	682b      	ldr	r3, [r5, #0]
 80034c2:	462e      	mov	r6, r5
 80034c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034c8:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034ca:	f7fe fb45 	bl	8001b58 <HAL_GetTick>
 80034ce:	4607      	mov	r7, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034d0:	682b      	ldr	r3, [r5, #0]
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	f100 8126 	bmi.w	8003724 <HAL_RCCEx_PeriphCLKConfig+0x4f0>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80034d8:	6822      	ldr	r2, [r4, #0]
 80034da:	0315      	lsls	r5, r2, #12
 80034dc:	d501      	bpl.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 80034de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80034e0:	b143      	cbz	r3, 80034f4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80034e2:	02d0      	lsls	r0, r2, #11
 80034e4:	d521      	bpl.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80034e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034e8:	b9fb      	cbnz	r3, 800352a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 80034ea:	e003      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80034ec:	40023800 	.word	0x40023800
 80034f0:	40007000 	.word	0x40007000
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80034f4:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80034f8:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80034fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003500:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003504:	430b      	orrs	r3, r1
 8003506:	6961      	ldr	r1, [r4, #20]
 8003508:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800350c:	69a1      	ldr	r1, [r4, #24]
 800350e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003512:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003516:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 800351a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800351c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003520:	3901      	subs	r1, #1
 8003522:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003526:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800352a:	0291      	lsls	r1, r2, #10
 800352c:	d515      	bpl.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x326>
 800352e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003530:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003534:	d111      	bne.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x326>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003536:	4982      	ldr	r1, [pc, #520]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003538:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800353c:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003540:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8003544:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8003548:	4303      	orrs	r3, r0
 800354a:	6960      	ldr	r0, [r4, #20]
 800354c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003550:	6a20      	ldr	r0, [r4, #32]
 8003552:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800355a:	0712      	lsls	r2, r2, #28
 800355c:	d519      	bpl.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x35e>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800355e:	4a78      	ldr	r2, [pc, #480]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003560:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003564:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003568:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800356c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003570:	430b      	orrs	r3, r1
 8003572:	6961      	ldr	r1, [r4, #20]
 8003574:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8003578:	69e1      	ldr	r1, [r4, #28]
 800357a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800357e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003582:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003586:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003588:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800358c:	430b      	orrs	r3, r1
 800358e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003592:	4c6b      	ldr	r4, [pc, #428]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003594:	6823      	ldr	r3, [r4, #0]
 8003596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800359a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800359c:	f7fe fadc 	bl	8001b58 <HAL_GetTick>
 80035a0:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80035a2:	6823      	ldr	r3, [r4, #0]
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	f140 80c4 	bpl.w	8003732 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80035aa:	2000      	movs	r0, #0
 80035ac:	e009      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      plli2sused = 1;
 80035ae:	2601      	movs	r6, #1
 80035b0:	e67c      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b2:	f7fe fad1 	bl	8001b58 <HAL_GetTick>
 80035b6:	eba0 0008 	sub.w	r0, r0, r8
 80035ba:	2864      	cmp	r0, #100	; 0x64
 80035bc:	f67f ae8e 	bls.w	80032dc <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 80035c0:	2003      	movs	r0, #3
}
 80035c2:	b003      	add	sp, #12
 80035c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035c8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80035ca:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80035ce:	4293      	cmp	r3, r2
 80035d0:	f43f ae8e 	beq.w	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80035d6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80035dc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80035e0:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035e2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80035e4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80035e8:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80035ea:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80035ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035ee:	07da      	lsls	r2, r3, #31
 80035f0:	f57f ae7e 	bpl.w	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 80035f4:	f7fe fab0 	bl	8001b58 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035f8:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80035fc:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003600:	079b      	lsls	r3, r3, #30
 8003602:	f53f ae75 	bmi.w	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003606:	f7fe faa7 	bl	8001b58 <HAL_GetTick>
 800360a:	eba0 0008 	sub.w	r0, r0, r8
 800360e:	4548      	cmp	r0, r9
 8003610:	d9f5      	bls.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8003612:	e7d5      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003614:	6891      	ldr	r1, [r2, #8]
 8003616:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800361a:	e679      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 800361c:	4e48      	ldr	r6, [pc, #288]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800361e:	6833      	ldr	r3, [r6, #0]
 8003620:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003624:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003626:	f7fe fa97 	bl	8001b58 <HAL_GetTick>
 800362a:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800362c:	6833      	ldr	r3, [r6, #0]
 800362e:	011a      	lsls	r2, r3, #4
 8003630:	d472      	bmi.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003632:	6822      	ldr	r2, [r4, #0]
 8003634:	07d3      	lsls	r3, r2, #31
 8003636:	d512      	bpl.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8003638:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800363a:	b983      	cbnz	r3, 800365e <HAL_RCCEx_PeriphCLKConfig+0x42a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800363c:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003640:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003644:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003648:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800364c:	430b      	orrs	r3, r1
 800364e:	6861      	ldr	r1, [r4, #4]
 8003650:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8003654:	68a1      	ldr	r1, [r4, #8]
 8003656:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800365a:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800365e:	0317      	lsls	r7, r2, #12
 8003660:	d503      	bpl.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003662:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003664:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003668:	d005      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800366a:	02d6      	lsls	r6, r2, #11
 800366c:	d51e      	bpl.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x478>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800366e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003670:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003674:	d11a      	bne.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x478>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003676:	4932      	ldr	r1, [pc, #200]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003678:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800367c:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003680:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003684:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8003688:	4303      	orrs	r3, r0
 800368a:	6860      	ldr	r0, [r4, #4]
 800368c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003690:	68e0      	ldr	r0, [r4, #12]
 8003692:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003696:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800369a:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 800369e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036a0:	f020 001f 	bic.w	r0, r0, #31
 80036a4:	3b01      	subs	r3, #1
 80036a6:	4303      	orrs	r3, r0
 80036a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036ac:	01d0      	lsls	r0, r2, #7
 80036ae:	d511      	bpl.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80036b0:	4923      	ldr	r1, [pc, #140]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036b2:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036b6:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80036ba:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80036be:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80036c2:	4303      	orrs	r3, r0
 80036c4:	6860      	ldr	r0, [r4, #4]
 80036c6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80036ca:	6920      	ldr	r0, [r4, #16]
 80036cc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80036d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80036d4:	0191      	lsls	r1, r2, #6
 80036d6:	d50d      	bpl.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80036d8:	6923      	ldr	r3, [r4, #16]
 80036da:	6862      	ldr	r2, [r4, #4]
 80036dc:	041b      	lsls	r3, r3, #16
 80036de:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80036e2:	68e2      	ldr	r2, [r4, #12]
 80036e4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80036e8:	68a2      	ldr	r2, [r4, #8]
 80036ea:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80036ee:	4a14      	ldr	r2, [pc, #80]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036f0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80036f4:	4e12      	ldr	r6, [pc, #72]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036f6:	6833      	ldr	r3, [r6, #0]
 80036f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80036fc:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80036fe:	f7fe fa2b 	bl	8001b58 <HAL_GetTick>
 8003702:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003704:	6833      	ldr	r3, [r6, #0]
 8003706:	011a      	lsls	r2, r3, #4
 8003708:	f53f aed7 	bmi.w	80034ba <HAL_RCCEx_PeriphCLKConfig+0x286>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800370c:	f7fe fa24 	bl	8001b58 <HAL_GetTick>
 8003710:	1bc0      	subs	r0, r0, r7
 8003712:	2864      	cmp	r0, #100	; 0x64
 8003714:	d9f6      	bls.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003716:	e753      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003718:	f7fe fa1e 	bl	8001b58 <HAL_GetTick>
 800371c:	1bc0      	subs	r0, r0, r7
 800371e:	2864      	cmp	r0, #100	; 0x64
 8003720:	d984      	bls.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003722:	e74d      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003724:	f7fe fa18 	bl	8001b58 <HAL_GetTick>
 8003728:	1bc0      	subs	r0, r0, r7
 800372a:	2864      	cmp	r0, #100	; 0x64
 800372c:	f67f aed0 	bls.w	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 8003730:	e746      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003732:	f7fe fa11 	bl	8001b58 <HAL_GetTick>
 8003736:	1b40      	subs	r0, r0, r5
 8003738:	2864      	cmp	r0, #100	; 0x64
 800373a:	f67f af32 	bls.w	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800373e:	e73f      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8003740:	40023800 	.word	0x40023800

08003744 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8003744:	4770      	bx	lr

08003746 <HAL_SDRAM_Init>:
{
 8003746:	b538      	push	{r3, r4, r5, lr}
 8003748:	460d      	mov	r5, r1
  if (hsdram == NULL)
 800374a:	4604      	mov	r4, r0
 800374c:	b1c8      	cbz	r0, 8003782 <HAL_SDRAM_Init+0x3c>
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800374e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8003752:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003756:	b91b      	cbnz	r3, 8003760 <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
 8003758:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 800375c:	f7ff fff2 	bl	8003744 <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003760:	2302      	movs	r3, #2
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003762:	1d21      	adds	r1, r4, #4
 8003764:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003766:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800376a:	f000 f9d0 	bl	8003b0e <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800376e:	6862      	ldr	r2, [r4, #4]
 8003770:	4629      	mov	r1, r5
 8003772:	6820      	ldr	r0, [r4, #0]
 8003774:	f000 fa06 	bl	8003b84 <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003778:	2301      	movs	r3, #1
  return HAL_OK;
 800377a:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 800377c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8003780:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003782:	2001      	movs	r0, #1
 8003784:	e7fc      	b.n	8003780 <HAL_SDRAM_Init+0x3a>

08003786 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8003786:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8003788:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800378c:	4605      	mov	r5, r0
 800378e:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8003790:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8003792:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8003794:	d010      	beq.n	80037b8 <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8003796:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 800379a:	2c01      	cmp	r4, #1
 800379c:	d110      	bne.n	80037c0 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800379e:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80037a0:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80037a2:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80037a6:	f000 fa23 	bl	8003bf0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80037aa:	6833      	ldr	r3, [r6, #0]
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d104      	bne.n	80037ba <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80037b0:	2305      	movs	r3, #5
 80037b2:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80037b6:	2000      	movs	r0, #0
}
 80037b8:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 80037ba:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 80037be:	e7fa      	b.n	80037b6 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 80037c0:	2001      	movs	r0, #1
 80037c2:	e7f9      	b.n	80037b8 <HAL_SDRAM_SendCommand+0x32>

080037c4 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80037c4:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80037c6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 80037ca:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	b2d8      	uxtb	r0, r3
 80037d0:	d00d      	beq.n	80037ee <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80037d2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	b2dd      	uxtb	r5, r3
 80037da:	d109      	bne.n	80037f0 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80037dc:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80037de:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80037e0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80037e4:	f000 fa16 	bl	8003c14 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80037e8:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 80037ea:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 80037ee:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80037f0:	2001      	movs	r0, #1
 80037f2:	e7fc      	b.n	80037ee <HAL_SDRAM_ProgramRefreshRate+0x2a>

080037f4 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80037f4:	4770      	bx	lr
	...

080037f8 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037f8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d133      	bne.n	8003868 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003800:	2302      	movs	r3, #2
 8003802:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003806:	6803      	ldr	r3, [r0, #0]
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	f042 0201 	orr.w	r2, r2, #1
 800380e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003810:	4a16      	ldr	r2, [pc, #88]	; (800386c <HAL_TIM_Base_Start_IT+0x74>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d01a      	beq.n	800384c <HAL_TIM_Base_Start_IT+0x54>
 8003816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800381a:	d017      	beq.n	800384c <HAL_TIM_Base_Start_IT+0x54>
 800381c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003820:	4293      	cmp	r3, r2
 8003822:	d013      	beq.n	800384c <HAL_TIM_Base_Start_IT+0x54>
 8003824:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003828:	4293      	cmp	r3, r2
 800382a:	d00f      	beq.n	800384c <HAL_TIM_Base_Start_IT+0x54>
 800382c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003830:	4293      	cmp	r3, r2
 8003832:	d00b      	beq.n	800384c <HAL_TIM_Base_Start_IT+0x54>
 8003834:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003838:	4293      	cmp	r3, r2
 800383a:	d007      	beq.n	800384c <HAL_TIM_Base_Start_IT+0x54>
 800383c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003840:	4293      	cmp	r3, r2
 8003842:	d003      	beq.n	800384c <HAL_TIM_Base_Start_IT+0x54>
 8003844:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003848:	4293      	cmp	r3, r2
 800384a:	d107      	bne.n	800385c <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800384c:	6899      	ldr	r1, [r3, #8]
 800384e:	4a08      	ldr	r2, [pc, #32]	; (8003870 <HAL_TIM_Base_Start_IT+0x78>)
 8003850:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003852:	2a06      	cmp	r2, #6
 8003854:	d006      	beq.n	8003864 <HAL_TIM_Base_Start_IT+0x6c>
 8003856:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800385a:	d003      	beq.n	8003864 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	f042 0201 	orr.w	r2, r2, #1
 8003862:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003864:	2000      	movs	r0, #0
}
 8003866:	4770      	bx	lr
    return HAL_ERROR;
 8003868:	2001      	movs	r0, #1
 800386a:	4770      	bx	lr
 800386c:	40010000 	.word	0x40010000
 8003870:	00010007 	.word	0x00010007

08003874 <HAL_TIM_OC_DelayElapsedCallback>:
 8003874:	4770      	bx	lr

08003876 <HAL_TIM_IC_CaptureCallback>:
 8003876:	4770      	bx	lr

08003878 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003878:	4770      	bx	lr

0800387a <HAL_TIM_TriggerCallback>:
 800387a:	4770      	bx	lr

0800387c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800387c:	6803      	ldr	r3, [r0, #0]
 800387e:	691a      	ldr	r2, [r3, #16]
 8003880:	0791      	lsls	r1, r2, #30
{
 8003882:	b510      	push	{r4, lr}
 8003884:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003886:	d50f      	bpl.n	80038a8 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003888:	68da      	ldr	r2, [r3, #12]
 800388a:	0792      	lsls	r2, r2, #30
 800388c:	d50c      	bpl.n	80038a8 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800388e:	f06f 0202 	mvn.w	r2, #2
 8003892:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003894:	2201      	movs	r2, #1
 8003896:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	0799      	lsls	r1, r3, #30
 800389c:	f000 8085 	beq.w	80039aa <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038a0:	f7ff ffe9 	bl	8003876 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038a4:	2300      	movs	r3, #0
 80038a6:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038a8:	6823      	ldr	r3, [r4, #0]
 80038aa:	691a      	ldr	r2, [r3, #16]
 80038ac:	0752      	lsls	r2, r2, #29
 80038ae:	d510      	bpl.n	80038d2 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038b0:	68da      	ldr	r2, [r3, #12]
 80038b2:	0750      	lsls	r0, r2, #29
 80038b4:	d50d      	bpl.n	80038d2 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038b6:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ba:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038be:	2202      	movs	r2, #2
 80038c0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	f413 7f40 	tst.w	r3, #768	; 0x300
 80038c8:	d075      	beq.n	80039b6 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80038ca:	f7ff ffd4 	bl	8003876 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ce:	2300      	movs	r3, #0
 80038d0:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038d2:	6823      	ldr	r3, [r4, #0]
 80038d4:	691a      	ldr	r2, [r3, #16]
 80038d6:	0711      	lsls	r1, r2, #28
 80038d8:	d50f      	bpl.n	80038fa <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038da:	68da      	ldr	r2, [r3, #12]
 80038dc:	0712      	lsls	r2, r2, #28
 80038de:	d50c      	bpl.n	80038fa <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038e0:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038e4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038e8:	2204      	movs	r2, #4
 80038ea:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	079b      	lsls	r3, r3, #30
 80038f0:	d067      	beq.n	80039c2 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80038f2:	f7ff ffc0 	bl	8003876 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038f6:	2300      	movs	r3, #0
 80038f8:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038fa:	6823      	ldr	r3, [r4, #0]
 80038fc:	691a      	ldr	r2, [r3, #16]
 80038fe:	06d0      	lsls	r0, r2, #27
 8003900:	d510      	bpl.n	8003924 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003902:	68da      	ldr	r2, [r3, #12]
 8003904:	06d1      	lsls	r1, r2, #27
 8003906:	d50d      	bpl.n	8003924 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003908:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800390c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800390e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003910:	2208      	movs	r2, #8
 8003912:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	f413 7f40 	tst.w	r3, #768	; 0x300
 800391a:	d058      	beq.n	80039ce <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800391c:	f7ff ffab 	bl	8003876 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003920:	2300      	movs	r3, #0
 8003922:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003924:	6823      	ldr	r3, [r4, #0]
 8003926:	691a      	ldr	r2, [r3, #16]
 8003928:	07d2      	lsls	r2, r2, #31
 800392a:	d508      	bpl.n	800393e <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800392c:	68da      	ldr	r2, [r3, #12]
 800392e:	07d0      	lsls	r0, r2, #31
 8003930:	d505      	bpl.n	800393e <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003932:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003936:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003938:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800393a:	f7fd facb 	bl	8000ed4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800393e:	6823      	ldr	r3, [r4, #0]
 8003940:	691a      	ldr	r2, [r3, #16]
 8003942:	0611      	lsls	r1, r2, #24
 8003944:	d508      	bpl.n	8003958 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003946:	68da      	ldr	r2, [r3, #12]
 8003948:	0612      	lsls	r2, r2, #24
 800394a:	d505      	bpl.n	8003958 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800394c:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003950:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003952:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003954:	f000 f8d9 	bl	8003b0a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003958:	6823      	ldr	r3, [r4, #0]
 800395a:	691a      	ldr	r2, [r3, #16]
 800395c:	05d0      	lsls	r0, r2, #23
 800395e:	d508      	bpl.n	8003972 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003960:	68da      	ldr	r2, [r3, #12]
 8003962:	0611      	lsls	r1, r2, #24
 8003964:	d505      	bpl.n	8003972 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003966:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800396a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800396c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800396e:	f000 f8cd 	bl	8003b0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003972:	6823      	ldr	r3, [r4, #0]
 8003974:	691a      	ldr	r2, [r3, #16]
 8003976:	0652      	lsls	r2, r2, #25
 8003978:	d508      	bpl.n	800398c <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800397a:	68da      	ldr	r2, [r3, #12]
 800397c:	0650      	lsls	r0, r2, #25
 800397e:	d505      	bpl.n	800398c <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003980:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003984:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003986:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003988:	f7ff ff77 	bl	800387a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800398c:	6823      	ldr	r3, [r4, #0]
 800398e:	691a      	ldr	r2, [r3, #16]
 8003990:	0691      	lsls	r1, r2, #26
 8003992:	d522      	bpl.n	80039da <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	0692      	lsls	r2, r2, #26
 8003998:	d51f      	bpl.n	80039da <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800399a:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800399e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039a0:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80039a6:	f000 b8af 	b.w	8003b08 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039aa:	f7ff ff63 	bl	8003874 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039ae:	4620      	mov	r0, r4
 80039b0:	f7ff ff62 	bl	8003878 <HAL_TIM_PWM_PulseFinishedCallback>
 80039b4:	e776      	b.n	80038a4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039b6:	f7ff ff5d 	bl	8003874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039ba:	4620      	mov	r0, r4
 80039bc:	f7ff ff5c 	bl	8003878 <HAL_TIM_PWM_PulseFinishedCallback>
 80039c0:	e785      	b.n	80038ce <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039c2:	f7ff ff57 	bl	8003874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039c6:	4620      	mov	r0, r4
 80039c8:	f7ff ff56 	bl	8003878 <HAL_TIM_PWM_PulseFinishedCallback>
 80039cc:	e793      	b.n	80038f6 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ce:	f7ff ff51 	bl	8003874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039d2:	4620      	mov	r0, r4
 80039d4:	f7ff ff50 	bl	8003878 <HAL_TIM_PWM_PulseFinishedCallback>
 80039d8:	e7a2      	b.n	8003920 <HAL_TIM_IRQHandler+0xa4>
}
 80039da:	bd10      	pop	{r4, pc}

080039dc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039dc:	4a30      	ldr	r2, [pc, #192]	; (8003aa0 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80039de:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039e0:	4290      	cmp	r0, r2
 80039e2:	d012      	beq.n	8003a0a <TIM_Base_SetConfig+0x2e>
 80039e4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80039e8:	d00f      	beq.n	8003a0a <TIM_Base_SetConfig+0x2e>
 80039ea:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80039ee:	4290      	cmp	r0, r2
 80039f0:	d00b      	beq.n	8003a0a <TIM_Base_SetConfig+0x2e>
 80039f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039f6:	4290      	cmp	r0, r2
 80039f8:	d007      	beq.n	8003a0a <TIM_Base_SetConfig+0x2e>
 80039fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039fe:	4290      	cmp	r0, r2
 8003a00:	d003      	beq.n	8003a0a <TIM_Base_SetConfig+0x2e>
 8003a02:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003a06:	4290      	cmp	r0, r2
 8003a08:	d119      	bne.n	8003a3e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8003a0a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003a10:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a12:	4a23      	ldr	r2, [pc, #140]	; (8003aa0 <TIM_Base_SetConfig+0xc4>)
 8003a14:	4290      	cmp	r0, r2
 8003a16:	d029      	beq.n	8003a6c <TIM_Base_SetConfig+0x90>
 8003a18:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003a1c:	d026      	beq.n	8003a6c <TIM_Base_SetConfig+0x90>
 8003a1e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003a22:	4290      	cmp	r0, r2
 8003a24:	d022      	beq.n	8003a6c <TIM_Base_SetConfig+0x90>
 8003a26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a2a:	4290      	cmp	r0, r2
 8003a2c:	d01e      	beq.n	8003a6c <TIM_Base_SetConfig+0x90>
 8003a2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a32:	4290      	cmp	r0, r2
 8003a34:	d01a      	beq.n	8003a6c <TIM_Base_SetConfig+0x90>
 8003a36:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003a3a:	4290      	cmp	r0, r2
 8003a3c:	d016      	beq.n	8003a6c <TIM_Base_SetConfig+0x90>
 8003a3e:	4a19      	ldr	r2, [pc, #100]	; (8003aa4 <TIM_Base_SetConfig+0xc8>)
 8003a40:	4290      	cmp	r0, r2
 8003a42:	d013      	beq.n	8003a6c <TIM_Base_SetConfig+0x90>
 8003a44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a48:	4290      	cmp	r0, r2
 8003a4a:	d00f      	beq.n	8003a6c <TIM_Base_SetConfig+0x90>
 8003a4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a50:	4290      	cmp	r0, r2
 8003a52:	d00b      	beq.n	8003a6c <TIM_Base_SetConfig+0x90>
 8003a54:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003a58:	4290      	cmp	r0, r2
 8003a5a:	d007      	beq.n	8003a6c <TIM_Base_SetConfig+0x90>
 8003a5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a60:	4290      	cmp	r0, r2
 8003a62:	d003      	beq.n	8003a6c <TIM_Base_SetConfig+0x90>
 8003a64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a68:	4290      	cmp	r0, r2
 8003a6a:	d103      	bne.n	8003a74 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a70:	68ca      	ldr	r2, [r1, #12]
 8003a72:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a74:	694a      	ldr	r2, [r1, #20]
 8003a76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a7a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003a7c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a7e:	688b      	ldr	r3, [r1, #8]
 8003a80:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a82:	680b      	ldr	r3, [r1, #0]
 8003a84:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a86:	4b06      	ldr	r3, [pc, #24]	; (8003aa0 <TIM_Base_SetConfig+0xc4>)
 8003a88:	4298      	cmp	r0, r3
 8003a8a:	d003      	beq.n	8003a94 <TIM_Base_SetConfig+0xb8>
 8003a8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a90:	4298      	cmp	r0, r3
 8003a92:	d101      	bne.n	8003a98 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a94:	690b      	ldr	r3, [r1, #16]
 8003a96:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	6143      	str	r3, [r0, #20]
}
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	40010000 	.word	0x40010000
 8003aa4:	40014000 	.word	0x40014000

08003aa8 <HAL_TIM_Base_Init>:
{
 8003aa8:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003aaa:	4604      	mov	r4, r0
 8003aac:	b350      	cbz	r0, 8003b04 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003aae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003ab2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003ab6:	b91b      	cbnz	r3, 8003ac0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003ab8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003abc:	f7ff fe9a 	bl	80037f4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ac2:	6820      	ldr	r0, [r4, #0]
 8003ac4:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003aca:	f7ff ff87 	bl	80039dc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ace:	2301      	movs	r3, #1
  return HAL_OK;
 8003ad0:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ad2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ad6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003ada:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003ade:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003ae2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003ae6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003aea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003af2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003af6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8003afa:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003afe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003b02:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003b04:	2001      	movs	r0, #1
 8003b06:	e7fc      	b.n	8003b02 <HAL_TIM_Base_Init+0x5a>

08003b08 <HAL_TIMEx_CommutCallback>:
 8003b08:	4770      	bx	lr

08003b0a <HAL_TIMEx_BreakCallback>:
 8003b0a:	4770      	bx	lr

08003b0c <HAL_TIMEx_Break2Callback>:
 8003b0c:	4770      	bx	lr

08003b0e <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8003b0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8003b12:	680a      	ldr	r2, [r1, #0]
 8003b14:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 8003b18:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 8003b1c:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 8003b20:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 8003b24:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 8003b28:	4323      	orrs	r3, r4
 8003b2a:	b9a2      	cbnz	r2, 8003b56 <FMC_SDRAM_Init+0x48>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8003b2c:	ea43 0209 	orr.w	r2, r3, r9
 8003b30:	6801      	ldr	r1, [r0, #0]
 8003b32:	432a      	orrs	r2, r5
 8003b34:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8003b38:	ea42 0308 	orr.w	r3, r2, r8
 8003b3c:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8003b40:	ea43 030e 	orr.w	r3, r3, lr
 8003b44:	ea43 030c 	orr.w	r3, r3, ip
 8003b48:	433b      	orrs	r3, r7
 8003b4a:	4333      	orrs	r3, r6
 8003b4c:	430b      	orrs	r3, r1
 8003b4e:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8003b50:	2000      	movs	r0, #0
 8003b52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8003b56:	6802      	ldr	r2, [r0, #0]
 8003b58:	ea43 0309 	orr.w	r3, r3, r9
 8003b5c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003b60:	4313      	orrs	r3, r2
 8003b62:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8003b64:	ea45 0308 	orr.w	r3, r5, r8
 8003b68:	6842      	ldr	r2, [r0, #4]
 8003b6a:	ea43 030e 	orr.w	r3, r3, lr
 8003b6e:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8003b72:	ea43 030c 	orr.w	r3, r3, ip
 8003b76:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8003b7a:	433b      	orrs	r3, r7
 8003b7c:	4333      	orrs	r3, r6
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	6043      	str	r3, [r0, #4]
 8003b82:	e7e5      	b.n	8003b50 <FMC_SDRAM_Init+0x42>

08003b84 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8003b84:	68cb      	ldr	r3, [r1, #12]
 8003b86:	f103 3cff 	add.w	ip, r3, #4294967295
 8003b8a:	694b      	ldr	r3, [r1, #20]
{
 8003b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	680f      	ldr	r7, [r1, #0]
 8003b92:	684c      	ldr	r4, [r1, #4]
 8003b94:	688e      	ldr	r6, [r1, #8]
 8003b96:	051b      	lsls	r3, r3, #20
 8003b98:	690d      	ldr	r5, [r1, #16]
 8003b9a:	3c01      	subs	r4, #1
 8003b9c:	6989      	ldr	r1, [r1, #24]
 8003b9e:	3e01      	subs	r6, #1
 8003ba0:	3d01      	subs	r5, #1
 8003ba2:	3f01      	subs	r7, #1
 8003ba4:	3901      	subs	r1, #1
 8003ba6:	0124      	lsls	r4, r4, #4
 8003ba8:	0236      	lsls	r6, r6, #8
 8003baa:	042d      	lsls	r5, r5, #16
 8003bac:	0609      	lsls	r1, r1, #24
 8003bae:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 8003bb2:	b95a      	cbnz	r2, 8003bcc <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8003bb4:	433b      	orrs	r3, r7
 8003bb6:	6882      	ldr	r2, [r0, #8]
 8003bb8:	4323      	orrs	r3, r4
 8003bba:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8003bbe:	4333      	orrs	r3, r6
 8003bc0:	432b      	orrs	r3, r5
 8003bc2:	430b      	orrs	r3, r1
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 8003bc8:	2000      	movs	r0, #0
 8003bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8003bcc:	6882      	ldr	r2, [r0, #8]
 8003bce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003bd2:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8003bd6:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8003bd8:	ea44 0306 	orr.w	r3, r4, r6
 8003bdc:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8003bde:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8003be0:	68c2      	ldr	r2, [r0, #12]
 8003be2:	432b      	orrs	r3, r5
 8003be4:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8003be8:	430b      	orrs	r3, r1
 8003bea:	4313      	orrs	r3, r2
 8003bec:	60c3      	str	r3, [r0, #12]
 8003bee:	e7eb      	b.n	8003bc8 <FMC_SDRAM_Timing_Init+0x44>

08003bf0 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8003bf0:	6902      	ldr	r2, [r0, #16]
{
 8003bf2:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8003bf4:	e9d1 3400 	ldrd	r3, r4, [r1]
 8003bf8:	0d92      	lsrs	r2, r2, #22
 8003bfa:	4323      	orrs	r3, r4
 8003bfc:	68cc      	ldr	r4, [r1, #12]
 8003bfe:	0592      	lsls	r2, r2, #22
 8003c00:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 8003c04:	4313      	orrs	r3, r2
 8003c06:	688a      	ldr	r2, [r1, #8]
 8003c08:	3a01      	subs	r2, #1
 8003c0a:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8003c0e:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8003c10:	2000      	movs	r0, #0
 8003c12:	bd10      	pop	{r4, pc}

08003c14 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8003c14:	6943      	ldr	r3, [r0, #20]
 8003c16:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003c1a:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8003c1e:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8003c22:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 8003c24:	2000      	movs	r0, #0
 8003c26:	4770      	bx	lr

08003c28 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c28:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c2c:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c30:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c32:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c34:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c3c:	4770      	bx	lr

08003c3e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c42:	4770      	bx	lr

08003c44 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c44:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c46:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8003c48:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c4a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c50:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8003c52:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8003c54:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003c56:	3301      	adds	r3, #1
 8003c58:	6003      	str	r3, [r0, #0]
}
 8003c5a:	4770      	bx	lr

08003c5c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c5c:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c5e:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c60:	1c63      	adds	r3, r4, #1
 8003c62:	d10a      	bne.n	8003c7a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c64:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c6a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c6c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c6e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8003c70:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8003c72:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003c74:	3301      	adds	r3, #1
 8003c76:	6003      	str	r3, [r0, #0]
}
 8003c78:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003c7a:	f100 0208 	add.w	r2, r0, #8
 8003c7e:	4613      	mov	r3, r2
 8003c80:	6852      	ldr	r2, [r2, #4]
 8003c82:	6815      	ldr	r5, [r2, #0]
 8003c84:	42a5      	cmp	r5, r4
 8003c86:	d9fa      	bls.n	8003c7e <vListInsert+0x22>
 8003c88:	e7ed      	b.n	8003c66 <vListInsert+0xa>

08003c8a <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003c8a:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c8c:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8003c90:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c92:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c94:	6859      	ldr	r1, [r3, #4]
 8003c96:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c98:	bf08      	it	eq
 8003c9a:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	3a01      	subs	r2, #1
 8003ca4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ca6:	6818      	ldr	r0, [r3, #0]
}
 8003ca8:	4770      	bx	lr

08003caa <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003caa:	b510      	push	{r4, lr}
 8003cac:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003cae:	f001 fc01 	bl	80054b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003cb2:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8003cb4:	f001 fc24 	bl	8005500 <vPortExitCritical>

	return xReturn;
}
 8003cb8:	fab4 f084 	clz	r0, r4
 8003cbc:	0940      	lsrs	r0, r0, #5
 8003cbe:	bd10      	pop	{r4, pc}

08003cc0 <prvCopyDataToQueue>:
{
 8003cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc2:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003cc4:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8003cc6:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cc8:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003cca:	b952      	cbnz	r2, 8003ce2 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ccc:	6807      	ldr	r7, [r0, #0]
 8003cce:	bb47      	cbnz	r7, 8003d22 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003cd0:	6880      	ldr	r0, [r0, #8]
 8003cd2:	f001 f8b3 	bl	8004e3c <xTaskPriorityDisinherit>
 8003cd6:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003cd8:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003cda:	3601      	adds	r6, #1
}
 8003cdc:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003cde:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8003ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8003ce2:	b965      	cbnz	r5, 8003cfe <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ce4:	6840      	ldr	r0, [r0, #4]
 8003ce6:	f00a fb3b 	bl	800e360 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003cea:	6863      	ldr	r3, [r4, #4]
 8003cec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003cee:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003cf0:	68a2      	ldr	r2, [r4, #8]
 8003cf2:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003cf4:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003cf6:	d3f0      	bcc.n	8003cda <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003cf8:	6823      	ldr	r3, [r4, #0]
 8003cfa:	6063      	str	r3, [r4, #4]
 8003cfc:	e7ed      	b.n	8003cda <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003cfe:	68c0      	ldr	r0, [r0, #12]
 8003d00:	f00a fb2e 	bl	800e360 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003d04:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003d06:	68e3      	ldr	r3, [r4, #12]
 8003d08:	4251      	negs	r1, r2
 8003d0a:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d0c:	6822      	ldr	r2, [r4, #0]
 8003d0e:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003d10:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003d12:	bf3e      	ittt	cc
 8003d14:	68a3      	ldrcc	r3, [r4, #8]
 8003d16:	185b      	addcc	r3, r3, r1
 8003d18:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8003d1a:	2d02      	cmp	r5, #2
 8003d1c:	d101      	bne.n	8003d22 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d1e:	b116      	cbz	r6, 8003d26 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 8003d20:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8003d22:	2500      	movs	r5, #0
 8003d24:	e7d9      	b.n	8003cda <prvCopyDataToQueue+0x1a>
 8003d26:	4635      	mov	r5, r6
 8003d28:	e7d7      	b.n	8003cda <prvCopyDataToQueue+0x1a>

08003d2a <prvCopyDataFromQueue>:
{
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003d2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8003d30:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003d32:	b162      	cbz	r2, 8003d4e <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003d34:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003d36:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003d38:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003d3a:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003d3c:	60dc      	str	r4, [r3, #12]
}
 8003d3e:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003d42:	bf24      	itt	cs
 8003d44:	6819      	ldrcs	r1, [r3, #0]
 8003d46:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003d48:	68d9      	ldr	r1, [r3, #12]
 8003d4a:	f00a bb09 	b.w	800e360 <memcpy>
}
 8003d4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <prvUnlockQueue>:
{
 8003d54:	b570      	push	{r4, r5, r6, lr}
 8003d56:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8003d58:	f001 fbac 	bl	80054b4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8003d5c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d60:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8003d64:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d66:	2d00      	cmp	r5, #0
 8003d68:	dc14      	bgt.n	8003d94 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8003d6a:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d6c:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8003d70:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8003d74:	f001 fbc4 	bl	8005500 <vPortExitCritical>
	taskENTER_CRITICAL();
 8003d78:	f001 fb9c 	bl	80054b4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8003d7c:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8003d80:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d82:	2d00      	cmp	r5, #0
 8003d84:	dc12      	bgt.n	8003dac <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8003d86:	23ff      	movs	r3, #255	; 0xff
 8003d88:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8003d8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8003d90:	f001 bbb6 	b.w	8005500 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d0e7      	beq.n	8003d6a <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d9a:	4630      	mov	r0, r6
 8003d9c:	f000 ff64 	bl	8004c68 <xTaskRemoveFromEventList>
 8003da0:	b108      	cbz	r0, 8003da6 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8003da2:	f000 ffe5 	bl	8004d70 <vTaskMissedYield>
			--cTxLock;
 8003da6:	3d01      	subs	r5, #1
 8003da8:	b26d      	sxtb	r5, r5
 8003daa:	e7dc      	b.n	8003d66 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003dac:	6923      	ldr	r3, [r4, #16]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0e9      	beq.n	8003d86 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003db2:	4630      	mov	r0, r6
 8003db4:	f000 ff58 	bl	8004c68 <xTaskRemoveFromEventList>
 8003db8:	b108      	cbz	r0, 8003dbe <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8003dba:	f000 ffd9 	bl	8004d70 <vTaskMissedYield>
				--cRxLock;
 8003dbe:	3d01      	subs	r5, #1
 8003dc0:	b26d      	sxtb	r5, r5
 8003dc2:	e7de      	b.n	8003d82 <prvUnlockQueue+0x2e>

08003dc4 <xQueueGenericReset>:
{
 8003dc4:	b538      	push	{r3, r4, r5, lr}
 8003dc6:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8003dc8:	4604      	mov	r4, r0
 8003dca:	b950      	cbnz	r0, 8003de2 <xQueueGenericReset+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd0:	b672      	cpsid	i
 8003dd2:	f383 8811 	msr	BASEPRI, r3
 8003dd6:	f3bf 8f6f 	isb	sy
 8003dda:	f3bf 8f4f 	dsb	sy
 8003dde:	b662      	cpsie	i
 8003de0:	e7fe      	b.n	8003de0 <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 8003de2:	f001 fb67 	bl	80054b4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003de6:	6822      	ldr	r2, [r4, #0]
 8003de8:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003dec:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003dee:	434b      	muls	r3, r1
 8003df0:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003df2:	1a5b      	subs	r3, r3, r1
 8003df4:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003df6:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003df8:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003dfa:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003dfc:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003dfe:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8003e00:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003e04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8003e08:	b995      	cbnz	r5, 8003e30 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e0a:	6923      	ldr	r3, [r4, #16]
 8003e0c:	b163      	cbz	r3, 8003e28 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e0e:	f104 0010 	add.w	r0, r4, #16
 8003e12:	f000 ff29 	bl	8004c68 <xTaskRemoveFromEventList>
 8003e16:	b138      	cbz	r0, 8003e28 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8003e18:	4b0a      	ldr	r3, [pc, #40]	; (8003e44 <xQueueGenericReset+0x80>)
 8003e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	f3bf 8f4f 	dsb	sy
 8003e24:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8003e28:	f001 fb6a 	bl	8005500 <vPortExitCritical>
}
 8003e2c:	2001      	movs	r0, #1
 8003e2e:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003e30:	f104 0010 	add.w	r0, r4, #16
 8003e34:	f7ff fef8 	bl	8003c28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003e38:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003e3c:	f7ff fef4 	bl	8003c28 <vListInitialise>
 8003e40:	e7f2      	b.n	8003e28 <xQueueGenericReset+0x64>
 8003e42:	bf00      	nop
 8003e44:	e000ed04 	.word	0xe000ed04

08003e48 <xQueueGenericCreate>:
	{
 8003e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4a:	460d      	mov	r5, r1
 8003e4c:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e4e:	4606      	mov	r6, r0
 8003e50:	b950      	cbnz	r0, 8003e68 <xQueueGenericCreate+0x20>
 8003e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e56:	b672      	cpsid	i
 8003e58:	f383 8811 	msr	BASEPRI, r3
 8003e5c:	f3bf 8f6f 	isb	sy
 8003e60:	f3bf 8f4f 	dsb	sy
 8003e64:	b662      	cpsie	i
 8003e66:	e7fe      	b.n	8003e66 <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e68:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003e6a:	3050      	adds	r0, #80	; 0x50
 8003e6c:	f001 f9fe 	bl	800526c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8003e70:	4604      	mov	r4, r0
 8003e72:	b158      	cbz	r0, 8003e8c <xQueueGenericCreate+0x44>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8003e74:	b165      	cbz	r5, 8003e90 <xQueueGenericCreate+0x48>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e76:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	4620      	mov	r0, r4
 8003e7e:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8003e80:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003e84:	f7ff ff9e 	bl	8003dc4 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8003e88:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e90:	4603      	mov	r3, r0
 8003e92:	e7f2      	b.n	8003e7a <xQueueGenericCreate+0x32>

08003e94 <xQueueCreateCountingSemaphore>:
	{
 8003e94:	b510      	push	{r4, lr}
 8003e96:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8003e98:	b950      	cbnz	r0, 8003eb0 <xQueueCreateCountingSemaphore+0x1c>
 8003e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9e:	b672      	cpsid	i
 8003ea0:	f383 8811 	msr	BASEPRI, r3
 8003ea4:	f3bf 8f6f 	isb	sy
 8003ea8:	f3bf 8f4f 	dsb	sy
 8003eac:	b662      	cpsie	i
 8003eae:	e7fe      	b.n	8003eae <xQueueCreateCountingSemaphore+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003eb0:	4288      	cmp	r0, r1
 8003eb2:	d20a      	bcs.n	8003eca <xQueueCreateCountingSemaphore+0x36>
 8003eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb8:	b672      	cpsid	i
 8003eba:	f383 8811 	msr	BASEPRI, r3
 8003ebe:	f3bf 8f6f 	isb	sy
 8003ec2:	f3bf 8f4f 	dsb	sy
 8003ec6:	b662      	cpsie	i
 8003ec8:	e7fe      	b.n	8003ec8 <xQueueCreateCountingSemaphore+0x34>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003eca:	2202      	movs	r2, #2
 8003ecc:	2100      	movs	r1, #0
 8003ece:	f7ff ffbb 	bl	8003e48 <xQueueGenericCreate>
		if( xHandle != NULL )
 8003ed2:	b100      	cbz	r0, 8003ed6 <xQueueCreateCountingSemaphore+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003ed4:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8003ed6:	bd10      	pop	{r4, pc}

08003ed8 <xQueueGenericSend>:
{
 8003ed8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003edc:	4688      	mov	r8, r1
 8003ede:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8003ee0:	4604      	mov	r4, r0
{
 8003ee2:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8003ee4:	b950      	cbnz	r0, 8003efc <xQueueGenericSend+0x24>
 8003ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eea:	b672      	cpsid	i
 8003eec:	f383 8811 	msr	BASEPRI, r3
 8003ef0:	f3bf 8f6f 	isb	sy
 8003ef4:	f3bf 8f4f 	dsb	sy
 8003ef8:	b662      	cpsie	i
 8003efa:	e7fe      	b.n	8003efa <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003efc:	b961      	cbnz	r1, 8003f18 <xQueueGenericSend+0x40>
 8003efe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003f00:	b153      	cbz	r3, 8003f18 <xQueueGenericSend+0x40>
 8003f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f06:	b672      	cpsid	i
 8003f08:	f383 8811 	msr	BASEPRI, r3
 8003f0c:	f3bf 8f6f 	isb	sy
 8003f10:	f3bf 8f4f 	dsb	sy
 8003f14:	b662      	cpsie	i
 8003f16:	e7fe      	b.n	8003f16 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f18:	2f02      	cmp	r7, #2
 8003f1a:	d10d      	bne.n	8003f38 <xQueueGenericSend+0x60>
 8003f1c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d00a      	beq.n	8003f38 <xQueueGenericSend+0x60>
 8003f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f26:	b672      	cpsid	i
 8003f28:	f383 8811 	msr	BASEPRI, r3
 8003f2c:	f3bf 8f6f 	isb	sy
 8003f30:	f3bf 8f4f 	dsb	sy
 8003f34:	b662      	cpsie	i
 8003f36:	e7fe      	b.n	8003f36 <xQueueGenericSend+0x5e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f38:	f000 ff22 	bl	8004d80 <xTaskGetSchedulerState>
 8003f3c:	4606      	mov	r6, r0
 8003f3e:	b960      	cbnz	r0, 8003f5a <xQueueGenericSend+0x82>
 8003f40:	9b01      	ldr	r3, [sp, #4]
 8003f42:	b15b      	cbz	r3, 8003f5c <xQueueGenericSend+0x84>
 8003f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f48:	b672      	cpsid	i
 8003f4a:	f383 8811 	msr	BASEPRI, r3
 8003f4e:	f3bf 8f6f 	isb	sy
 8003f52:	f3bf 8f4f 	dsb	sy
 8003f56:	b662      	cpsie	i
 8003f58:	e7fe      	b.n	8003f58 <xQueueGenericSend+0x80>
 8003f5a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8003f5c:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 8003f60:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004048 <xQueueGenericSend+0x170>
 8003f64:	e037      	b.n	8003fd6 <xQueueGenericSend+0xfe>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f66:	9d01      	ldr	r5, [sp, #4]
 8003f68:	b91d      	cbnz	r5, 8003f72 <xQueueGenericSend+0x9a>
					taskEXIT_CRITICAL();
 8003f6a:	f001 fac9 	bl	8005500 <vPortExitCritical>
			return errQUEUE_FULL;
 8003f6e:	2000      	movs	r0, #0
 8003f70:	e050      	b.n	8004014 <xQueueGenericSend+0x13c>
				else if( xEntryTimeSet == pdFALSE )
 8003f72:	b916      	cbnz	r6, 8003f7a <xQueueGenericSend+0xa2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f74:	a802      	add	r0, sp, #8
 8003f76:	f000 feb5 	bl	8004ce4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8003f7a:	f001 fac1 	bl	8005500 <vPortExitCritical>
		vTaskSuspendAll();
 8003f7e:	f000 fd27 	bl	80049d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f82:	f001 fa97 	bl	80054b4 <vPortEnterCritical>
 8003f86:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003f8a:	2bff      	cmp	r3, #255	; 0xff
 8003f8c:	d101      	bne.n	8003f92 <xQueueGenericSend+0xba>
 8003f8e:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8003f92:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003f96:	2bff      	cmp	r3, #255	; 0xff
 8003f98:	d101      	bne.n	8003f9e <xQueueGenericSend+0xc6>
 8003f9a:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 8003f9e:	f001 faaf 	bl	8005500 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003fa2:	a901      	add	r1, sp, #4
 8003fa4:	a802      	add	r0, sp, #8
 8003fa6:	f000 fea7 	bl	8004cf8 <xTaskCheckForTimeOut>
 8003faa:	2800      	cmp	r0, #0
 8003fac:	d146      	bne.n	800403c <xQueueGenericSend+0x164>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003fae:	f001 fa81 	bl	80054b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003fb2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003fb4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d12f      	bne.n	800401a <xQueueGenericSend+0x142>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8003fba:	f001 faa1 	bl	8005500 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003fbe:	9901      	ldr	r1, [sp, #4]
 8003fc0:	f104 0010 	add.w	r0, r4, #16
 8003fc4:	f000 fe36 	bl	8004c34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003fc8:	4620      	mov	r0, r4
 8003fca:	f7ff fec3 	bl	8003d54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003fce:	f000 fd8d 	bl	8004aec <xTaskResumeAll>
 8003fd2:	b350      	cbz	r0, 800402a <xQueueGenericSend+0x152>
 8003fd4:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8003fd6:	f001 fa6d 	bl	80054b4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003fda:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003fdc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d301      	bcc.n	8003fe6 <xQueueGenericSend+0x10e>
 8003fe2:	2f02      	cmp	r7, #2
 8003fe4:	d1bf      	bne.n	8003f66 <xQueueGenericSend+0x8e>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003fe6:	463a      	mov	r2, r7
 8003fe8:	4641      	mov	r1, r8
 8003fea:	4620      	mov	r0, r4
 8003fec:	f7ff fe68 	bl	8003cc0 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ff0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ff2:	b11b      	cbz	r3, 8003ffc <xQueueGenericSend+0x124>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ff4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003ff8:	f000 fe36 	bl	8004c68 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8003ffc:	b138      	cbz	r0, 800400e <xQueueGenericSend+0x136>
						queueYIELD_IF_USING_PREEMPTION();
 8003ffe:	4b12      	ldr	r3, [pc, #72]	; (8004048 <xQueueGenericSend+0x170>)
 8004000:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004004:	601a      	str	r2, [r3, #0]
 8004006:	f3bf 8f4f 	dsb	sy
 800400a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800400e:	f001 fa77 	bl	8005500 <vPortExitCritical>
				return pdPASS;
 8004012:	2001      	movs	r0, #1
}
 8004014:	b004      	add	sp, #16
 8004016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 800401a:	f001 fa71 	bl	8005500 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800401e:	4620      	mov	r0, r4
 8004020:	f7ff fe98 	bl	8003d54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004024:	f000 fd62 	bl	8004aec <xTaskResumeAll>
 8004028:	e7d4      	b.n	8003fd4 <xQueueGenericSend+0xfc>
					portYIELD_WITHIN_API();
 800402a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800402e:	f8ca 3000 	str.w	r3, [sl]
 8004032:	f3bf 8f4f 	dsb	sy
 8004036:	f3bf 8f6f 	isb	sy
 800403a:	e7cb      	b.n	8003fd4 <xQueueGenericSend+0xfc>
			prvUnlockQueue( pxQueue );
 800403c:	4620      	mov	r0, r4
 800403e:	f7ff fe89 	bl	8003d54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004042:	f000 fd53 	bl	8004aec <xTaskResumeAll>
 8004046:	e792      	b.n	8003f6e <xQueueGenericSend+0x96>
 8004048:	e000ed04 	.word	0xe000ed04

0800404c <xQueueCreateMutex>:
	{
 800404c:	b570      	push	{r4, r5, r6, lr}
 800404e:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004050:	2050      	movs	r0, #80	; 0x50
 8004052:	f001 f90b 	bl	800526c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8004056:	4604      	mov	r4, r0
 8004058:	b188      	cbz	r0, 800407e <xQueueCreateMutex+0x32>
	pxNewQueue->uxItemSize = uxItemSize;
 800405a:	2500      	movs	r5, #0
 800405c:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800405e:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8004060:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004064:	f7ff feae 	bl	8003dc4 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004068:	462b      	mov	r3, r5
 800406a:	462a      	mov	r2, r5
 800406c:	4629      	mov	r1, r5
 800406e:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8004070:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004074:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004076:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004078:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800407a:	f7ff ff2d 	bl	8003ed8 <xQueueGenericSend>
	}
 800407e:	4620      	mov	r0, r4
 8004080:	bd70      	pop	{r4, r5, r6, pc}

08004082 <xQueueGenericSendFromISR>:
{
 8004082:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004086:	4689      	mov	r9, r1
 8004088:	4690      	mov	r8, r2
 800408a:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800408c:	4604      	mov	r4, r0
 800408e:	b950      	cbnz	r0, 80040a6 <xQueueGenericSendFromISR+0x24>
 8004090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004094:	b672      	cpsid	i
 8004096:	f383 8811 	msr	BASEPRI, r3
 800409a:	f3bf 8f6f 	isb	sy
 800409e:	f3bf 8f4f 	dsb	sy
 80040a2:	b662      	cpsie	i
 80040a4:	e7fe      	b.n	80040a4 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040a6:	b961      	cbnz	r1, 80040c2 <xQueueGenericSendFromISR+0x40>
 80040a8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80040aa:	b153      	cbz	r3, 80040c2 <xQueueGenericSendFromISR+0x40>
 80040ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b0:	b672      	cpsid	i
 80040b2:	f383 8811 	msr	BASEPRI, r3
 80040b6:	f3bf 8f6f 	isb	sy
 80040ba:	f3bf 8f4f 	dsb	sy
 80040be:	b662      	cpsie	i
 80040c0:	e7fe      	b.n	80040c0 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040c2:	2f02      	cmp	r7, #2
 80040c4:	d10d      	bne.n	80040e2 <xQueueGenericSendFromISR+0x60>
 80040c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d00a      	beq.n	80040e2 <xQueueGenericSendFromISR+0x60>
 80040cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d0:	b672      	cpsid	i
 80040d2:	f383 8811 	msr	BASEPRI, r3
 80040d6:	f3bf 8f6f 	isb	sy
 80040da:	f3bf 8f4f 	dsb	sy
 80040de:	b662      	cpsie	i
 80040e0:	e7fe      	b.n	80040e0 <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80040e2:	f001 fae9 	bl	80056b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80040e6:	f3ef 8611 	mrs	r6, BASEPRI
 80040ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ee:	b672      	cpsid	i
 80040f0:	f383 8811 	msr	BASEPRI, r3
 80040f4:	f3bf 8f6f 	isb	sy
 80040f8:	f3bf 8f4f 	dsb	sy
 80040fc:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80040fe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004100:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004102:	429a      	cmp	r2, r3
 8004104:	d301      	bcc.n	800410a <xQueueGenericSendFromISR+0x88>
 8004106:	2f02      	cmp	r7, #2
 8004108:	d122      	bne.n	8004150 <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 800410a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800410e:	463a      	mov	r2, r7
 8004110:	4649      	mov	r1, r9
 8004112:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8004114:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004116:	f7ff fdd3 	bl	8003cc0 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800411a:	1c6b      	adds	r3, r5, #1
 800411c:	d113      	bne.n	8004146 <xQueueGenericSendFromISR+0xc4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800411e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004120:	b90b      	cbnz	r3, 8004126 <xQueueGenericSendFromISR+0xa4>
			xReturn = pdPASS;
 8004122:	2001      	movs	r0, #1
 8004124:	e00b      	b.n	800413e <xQueueGenericSendFromISR+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004126:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800412a:	f000 fd9d 	bl	8004c68 <xTaskRemoveFromEventList>
 800412e:	2800      	cmp	r0, #0
 8004130:	d0f7      	beq.n	8004122 <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 8004132:	f1b8 0f00 	cmp.w	r8, #0
 8004136:	d0f4      	beq.n	8004122 <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004138:	2001      	movs	r0, #1
 800413a:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800413e:	f386 8811 	msr	BASEPRI, r6
}
 8004142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004146:	3501      	adds	r5, #1
 8004148:	b26d      	sxtb	r5, r5
 800414a:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800414e:	e7e8      	b.n	8004122 <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 8004150:	2000      	movs	r0, #0
 8004152:	e7f4      	b.n	800413e <xQueueGenericSendFromISR+0xbc>

08004154 <xQueueGiveFromISR>:
{
 8004154:	b570      	push	{r4, r5, r6, lr}
 8004156:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8004158:	4604      	mov	r4, r0
 800415a:	b950      	cbnz	r0, 8004172 <xQueueGiveFromISR+0x1e>
	__asm volatile
 800415c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004160:	b672      	cpsid	i
 8004162:	f383 8811 	msr	BASEPRI, r3
 8004166:	f3bf 8f6f 	isb	sy
 800416a:	f3bf 8f4f 	dsb	sy
 800416e:	b662      	cpsie	i
 8004170:	e7fe      	b.n	8004170 <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 8004172:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004174:	b153      	cbz	r3, 800418c <xQueueGiveFromISR+0x38>
 8004176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417a:	b672      	cpsid	i
 800417c:	f383 8811 	msr	BASEPRI, r3
 8004180:	f3bf 8f6f 	isb	sy
 8004184:	f3bf 8f4f 	dsb	sy
 8004188:	b662      	cpsie	i
 800418a:	e7fe      	b.n	800418a <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800418c:	6803      	ldr	r3, [r0, #0]
 800418e:	b963      	cbnz	r3, 80041aa <xQueueGiveFromISR+0x56>
 8004190:	6883      	ldr	r3, [r0, #8]
 8004192:	b153      	cbz	r3, 80041aa <xQueueGiveFromISR+0x56>
 8004194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004198:	b672      	cpsid	i
 800419a:	f383 8811 	msr	BASEPRI, r3
 800419e:	f3bf 8f6f 	isb	sy
 80041a2:	f3bf 8f4f 	dsb	sy
 80041a6:	b662      	cpsie	i
 80041a8:	e7fe      	b.n	80041a8 <xQueueGiveFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80041aa:	f001 fa85 	bl	80056b8 <vPortValidateInterruptPriority>
	__asm volatile
 80041ae:	f3ef 8611 	mrs	r6, BASEPRI
 80041b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b6:	b672      	cpsid	i
 80041b8:	f383 8811 	msr	BASEPRI, r3
 80041bc:	f3bf 8f6f 	isb	sy
 80041c0:	f3bf 8f4f 	dsb	sy
 80041c4:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041c6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80041c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d91c      	bls.n	8004208 <xQueueGiveFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 80041ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80041d2:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 80041d4:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 80041d6:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80041d8:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 80041da:	d110      	bne.n	80041fe <xQueueGiveFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041de:	b90b      	cbnz	r3, 80041e4 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 80041e0:	2001      	movs	r0, #1
 80041e2:	e009      	b.n	80041f8 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80041e8:	f000 fd3e 	bl	8004c68 <xTaskRemoveFromEventList>
 80041ec:	2800      	cmp	r0, #0
 80041ee:	d0f7      	beq.n	80041e0 <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 80041f0:	2d00      	cmp	r5, #0
 80041f2:	d0f5      	beq.n	80041e0 <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80041f4:	2001      	movs	r0, #1
 80041f6:	6028      	str	r0, [r5, #0]
	__asm volatile
 80041f8:	f386 8811 	msr	BASEPRI, r6
}
 80041fc:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80041fe:	3301      	adds	r3, #1
 8004200:	b25b      	sxtb	r3, r3
 8004202:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004206:	e7eb      	b.n	80041e0 <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 8004208:	2000      	movs	r0, #0
 800420a:	e7f5      	b.n	80041f8 <xQueueGiveFromISR+0xa4>

0800420c <xQueueReceive>:
{
 800420c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004210:	b085      	sub	sp, #20
 8004212:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 8004214:	4604      	mov	r4, r0
{
 8004216:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004218:	b950      	cbnz	r0, 8004230 <xQueueReceive+0x24>
	__asm volatile
 800421a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421e:	b672      	cpsid	i
 8004220:	f383 8811 	msr	BASEPRI, r3
 8004224:	f3bf 8f6f 	isb	sy
 8004228:	f3bf 8f4f 	dsb	sy
 800422c:	b662      	cpsie	i
 800422e:	e7fe      	b.n	800422e <xQueueReceive+0x22>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004230:	b961      	cbnz	r1, 800424c <xQueueReceive+0x40>
 8004232:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004234:	b153      	cbz	r3, 800424c <xQueueReceive+0x40>
 8004236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423a:	b672      	cpsid	i
 800423c:	f383 8811 	msr	BASEPRI, r3
 8004240:	f3bf 8f6f 	isb	sy
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	b662      	cpsie	i
 800424a:	e7fe      	b.n	800424a <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800424c:	f000 fd98 	bl	8004d80 <xTaskGetSchedulerState>
 8004250:	4606      	mov	r6, r0
 8004252:	b960      	cbnz	r0, 800426e <xQueueReceive+0x62>
 8004254:	9b01      	ldr	r3, [sp, #4]
 8004256:	b15b      	cbz	r3, 8004270 <xQueueReceive+0x64>
 8004258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425c:	b672      	cpsid	i
 800425e:	f383 8811 	msr	BASEPRI, r3
 8004262:	f3bf 8f6f 	isb	sy
 8004266:	f3bf 8f4f 	dsb	sy
 800426a:	b662      	cpsie	i
 800426c:	e7fe      	b.n	800426c <xQueueReceive+0x60>
 800426e:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8004270:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8004274:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8004354 <xQueueReceive+0x148>
 8004278:	e03b      	b.n	80042f2 <xQueueReceive+0xe6>
				if( xTicksToWait == ( TickType_t ) 0 )
 800427a:	9d01      	ldr	r5, [sp, #4]
 800427c:	b91d      	cbnz	r5, 8004286 <xQueueReceive+0x7a>
					taskEXIT_CRITICAL();
 800427e:	f001 f93f 	bl	8005500 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8004282:	2000      	movs	r0, #0
 8004284:	e052      	b.n	800432c <xQueueReceive+0x120>
				else if( xEntryTimeSet == pdFALSE )
 8004286:	b916      	cbnz	r6, 800428e <xQueueReceive+0x82>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004288:	a802      	add	r0, sp, #8
 800428a:	f000 fd2b 	bl	8004ce4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800428e:	f001 f937 	bl	8005500 <vPortExitCritical>
		vTaskSuspendAll();
 8004292:	f000 fb9d 	bl	80049d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004296:	f001 f90d 	bl	80054b4 <vPortEnterCritical>
 800429a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800429e:	2bff      	cmp	r3, #255	; 0xff
 80042a0:	d101      	bne.n	80042a6 <xQueueReceive+0x9a>
 80042a2:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 80042a6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80042aa:	2bff      	cmp	r3, #255	; 0xff
 80042ac:	d101      	bne.n	80042b2 <xQueueReceive+0xa6>
 80042ae:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 80042b2:	f001 f925 	bl	8005500 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042b6:	a901      	add	r1, sp, #4
 80042b8:	a802      	add	r0, sp, #8
 80042ba:	f000 fd1d 	bl	8004cf8 <xTaskCheckForTimeOut>
 80042be:	2800      	cmp	r0, #0
 80042c0:	d13d      	bne.n	800433e <xQueueReceive+0x132>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042c2:	4620      	mov	r0, r4
 80042c4:	f7ff fcf1 	bl	8003caa <prvIsQueueEmpty>
 80042c8:	b398      	cbz	r0, 8004332 <xQueueReceive+0x126>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80042ca:	9901      	ldr	r1, [sp, #4]
 80042cc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80042d0:	f000 fcb0 	bl	8004c34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80042d4:	4620      	mov	r0, r4
 80042d6:	f7ff fd3d 	bl	8003d54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80042da:	f000 fc07 	bl	8004aec <xTaskResumeAll>
 80042de:	b938      	cbnz	r0, 80042f0 <xQueueReceive+0xe4>
					portYIELD_WITHIN_API();
 80042e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80042e4:	f8c9 3000 	str.w	r3, [r9]
 80042e8:	f3bf 8f4f 	dsb	sy
 80042ec:	f3bf 8f6f 	isb	sy
 80042f0:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80042f2:	f001 f8df 	bl	80054b4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042f6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042f8:	2d00      	cmp	r5, #0
 80042fa:	d0be      	beq.n	800427a <xQueueReceive+0x6e>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80042fc:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80042fe:	4639      	mov	r1, r7
 8004300:	4620      	mov	r0, r4
 8004302:	f7ff fd12 	bl	8003d2a <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004306:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004308:	6923      	ldr	r3, [r4, #16]
 800430a:	b163      	cbz	r3, 8004326 <xQueueReceive+0x11a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800430c:	f104 0010 	add.w	r0, r4, #16
 8004310:	f000 fcaa 	bl	8004c68 <xTaskRemoveFromEventList>
 8004314:	b138      	cbz	r0, 8004326 <xQueueReceive+0x11a>
						queueYIELD_IF_USING_PREEMPTION();
 8004316:	4b0f      	ldr	r3, [pc, #60]	; (8004354 <xQueueReceive+0x148>)
 8004318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	f3bf 8f4f 	dsb	sy
 8004322:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004326:	f001 f8eb 	bl	8005500 <vPortExitCritical>
				return pdPASS;
 800432a:	2001      	movs	r0, #1
}
 800432c:	b005      	add	sp, #20
 800432e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 8004332:	4620      	mov	r0, r4
 8004334:	f7ff fd0e 	bl	8003d54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004338:	f000 fbd8 	bl	8004aec <xTaskResumeAll>
 800433c:	e7d8      	b.n	80042f0 <xQueueReceive+0xe4>
			prvUnlockQueue( pxQueue );
 800433e:	4620      	mov	r0, r4
 8004340:	f7ff fd08 	bl	8003d54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004344:	f000 fbd2 	bl	8004aec <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004348:	4620      	mov	r0, r4
 800434a:	f7ff fcae 	bl	8003caa <prvIsQueueEmpty>
 800434e:	2800      	cmp	r0, #0
 8004350:	d0ce      	beq.n	80042f0 <xQueueReceive+0xe4>
 8004352:	e796      	b.n	8004282 <xQueueReceive+0x76>
 8004354:	e000ed04 	.word	0xe000ed04

08004358 <xQueueSemaphoreTake>:
{
 8004358:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 800435c:	4604      	mov	r4, r0
{
 800435e:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004360:	b950      	cbnz	r0, 8004378 <xQueueSemaphoreTake+0x20>
 8004362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004366:	b672      	cpsid	i
 8004368:	f383 8811 	msr	BASEPRI, r3
 800436c:	f3bf 8f6f 	isb	sy
 8004370:	f3bf 8f4f 	dsb	sy
 8004374:	b662      	cpsie	i
 8004376:	e7fe      	b.n	8004376 <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 8004378:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800437a:	b155      	cbz	r5, 8004392 <xQueueSemaphoreTake+0x3a>
 800437c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004380:	b672      	cpsid	i
 8004382:	f383 8811 	msr	BASEPRI, r3
 8004386:	f3bf 8f6f 	isb	sy
 800438a:	f3bf 8f4f 	dsb	sy
 800438e:	b662      	cpsie	i
 8004390:	e7fe      	b.n	8004390 <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004392:	f000 fcf5 	bl	8004d80 <xTaskGetSchedulerState>
 8004396:	4606      	mov	r6, r0
 8004398:	b960      	cbnz	r0, 80043b4 <xQueueSemaphoreTake+0x5c>
 800439a:	9b01      	ldr	r3, [sp, #4]
 800439c:	b17b      	cbz	r3, 80043be <xQueueSemaphoreTake+0x66>
 800439e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a2:	b672      	cpsid	i
 80043a4:	f383 8811 	msr	BASEPRI, r3
 80043a8:	f3bf 8f6f 	isb	sy
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	b662      	cpsie	i
 80043b2:	e7fe      	b.n	80043b2 <xQueueSemaphoreTake+0x5a>
 80043b4:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 80043b6:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 80043b8:	f8df 8130 	ldr.w	r8, [pc, #304]	; 80044ec <xQueueSemaphoreTake+0x194>
 80043bc:	e053      	b.n	8004466 <xQueueSemaphoreTake+0x10e>
 80043be:	4605      	mov	r5, r0
 80043c0:	e7f9      	b.n	80043b6 <xQueueSemaphoreTake+0x5e>
				if( xTicksToWait == ( TickType_t ) 0 )
 80043c2:	9b01      	ldr	r3, [sp, #4]
 80043c4:	b973      	cbnz	r3, 80043e4 <xQueueSemaphoreTake+0x8c>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80043c6:	b155      	cbz	r5, 80043de <xQueueSemaphoreTake+0x86>
 80043c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043cc:	b672      	cpsid	i
 80043ce:	f383 8811 	msr	BASEPRI, r3
 80043d2:	f3bf 8f6f 	isb	sy
 80043d6:	f3bf 8f4f 	dsb	sy
 80043da:	b662      	cpsie	i
 80043dc:	e7fe      	b.n	80043dc <xQueueSemaphoreTake+0x84>
					taskEXIT_CRITICAL();
 80043de:	f001 f88f 	bl	8005500 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80043e2:	e05e      	b.n	80044a2 <xQueueSemaphoreTake+0x14a>
				else if( xEntryTimeSet == pdFALSE )
 80043e4:	b916      	cbnz	r6, 80043ec <xQueueSemaphoreTake+0x94>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043e6:	a802      	add	r0, sp, #8
 80043e8:	f000 fc7c 	bl	8004ce4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80043ec:	f001 f888 	bl	8005500 <vPortExitCritical>
		vTaskSuspendAll();
 80043f0:	f000 faee 	bl	80049d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043f4:	f001 f85e 	bl	80054b4 <vPortEnterCritical>
 80043f8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80043fc:	2bff      	cmp	r3, #255	; 0xff
 80043fe:	d101      	bne.n	8004404 <xQueueSemaphoreTake+0xac>
 8004400:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8004404:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004408:	2bff      	cmp	r3, #255	; 0xff
 800440a:	d101      	bne.n	8004410 <xQueueSemaphoreTake+0xb8>
 800440c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004410:	f001 f876 	bl	8005500 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004414:	a901      	add	r1, sp, #4
 8004416:	a802      	add	r0, sp, #8
 8004418:	f000 fc6e 	bl	8004cf8 <xTaskCheckForTimeOut>
 800441c:	2800      	cmp	r0, #0
 800441e:	d14a      	bne.n	80044b6 <xQueueSemaphoreTake+0x15e>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004420:	4620      	mov	r0, r4
 8004422:	f7ff fc42 	bl	8003caa <prvIsQueueEmpty>
 8004426:	2800      	cmp	r0, #0
 8004428:	d03f      	beq.n	80044aa <xQueueSemaphoreTake+0x152>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800442a:	6823      	ldr	r3, [r4, #0]
 800442c:	b93b      	cbnz	r3, 800443e <xQueueSemaphoreTake+0xe6>
						taskENTER_CRITICAL();
 800442e:	f001 f841 	bl	80054b4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004432:	68a0      	ldr	r0, [r4, #8]
 8004434:	f000 fcb4 	bl	8004da0 <xTaskPriorityInherit>
 8004438:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800443a:	f001 f861 	bl	8005500 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800443e:	9901      	ldr	r1, [sp, #4]
 8004440:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004444:	f000 fbf6 	bl	8004c34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004448:	4620      	mov	r0, r4
 800444a:	f7ff fc83 	bl	8003d54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800444e:	f000 fb4d 	bl	8004aec <xTaskResumeAll>
 8004452:	b938      	cbnz	r0, 8004464 <xQueueSemaphoreTake+0x10c>
					portYIELD_WITHIN_API();
 8004454:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004458:	f8c8 3000 	str.w	r3, [r8]
 800445c:	f3bf 8f4f 	dsb	sy
 8004460:	f3bf 8f6f 	isb	sy
 8004464:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004466:	f001 f825 	bl	80054b4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800446a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800446c:	2b00      	cmp	r3, #0
 800446e:	d0a8      	beq.n	80043c2 <xQueueSemaphoreTake+0x6a>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004470:	3b01      	subs	r3, #1
 8004472:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004474:	6823      	ldr	r3, [r4, #0]
 8004476:	b913      	cbnz	r3, 800447e <xQueueSemaphoreTake+0x126>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004478:	f000 fd90 	bl	8004f9c <pvTaskIncrementMutexHeldCount>
 800447c:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800447e:	6923      	ldr	r3, [r4, #16]
 8004480:	b163      	cbz	r3, 800449c <xQueueSemaphoreTake+0x144>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004482:	f104 0010 	add.w	r0, r4, #16
 8004486:	f000 fbef 	bl	8004c68 <xTaskRemoveFromEventList>
 800448a:	b138      	cbz	r0, 800449c <xQueueSemaphoreTake+0x144>
						queueYIELD_IF_USING_PREEMPTION();
 800448c:	4b17      	ldr	r3, [pc, #92]	; (80044ec <xQueueSemaphoreTake+0x194>)
 800448e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	f3bf 8f4f 	dsb	sy
 8004498:	f3bf 8f6f 	isb	sy
				return pdPASS;
 800449c:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 800449e:	f001 f82f 	bl	8005500 <vPortExitCritical>
}
 80044a2:	4628      	mov	r0, r5
 80044a4:	b004      	add	sp, #16
 80044a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 80044aa:	4620      	mov	r0, r4
 80044ac:	f7ff fc52 	bl	8003d54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044b0:	f000 fb1c 	bl	8004aec <xTaskResumeAll>
 80044b4:	e7d6      	b.n	8004464 <xQueueSemaphoreTake+0x10c>
			prvUnlockQueue( pxQueue );
 80044b6:	4620      	mov	r0, r4
 80044b8:	f7ff fc4c 	bl	8003d54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044bc:	f000 fb16 	bl	8004aec <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044c0:	4620      	mov	r0, r4
 80044c2:	f7ff fbf2 	bl	8003caa <prvIsQueueEmpty>
 80044c6:	2800      	cmp	r0, #0
 80044c8:	d0cc      	beq.n	8004464 <xQueueSemaphoreTake+0x10c>
					if( xInheritanceOccurred != pdFALSE )
 80044ca:	2d00      	cmp	r5, #0
 80044cc:	d0e9      	beq.n	80044a2 <xQueueSemaphoreTake+0x14a>
						taskENTER_CRITICAL();
 80044ce:	f000 fff1 	bl	80054b4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80044d2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80044d4:	b119      	cbz	r1, 80044de <xQueueSemaphoreTake+0x186>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80044d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80044d8:	6819      	ldr	r1, [r3, #0]
 80044da:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80044de:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 80044e0:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80044e2:	f000 fcff 	bl	8004ee4 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80044e6:	f001 f80b 	bl	8005500 <vPortExitCritical>
 80044ea:	e7da      	b.n	80044a2 <xQueueSemaphoreTake+0x14a>
 80044ec:	e000ed04 	.word	0xe000ed04

080044f0 <xQueueReceiveFromISR>:
{
 80044f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044f4:	4689      	mov	r9, r1
 80044f6:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 80044f8:	4605      	mov	r5, r0
 80044fa:	b950      	cbnz	r0, 8004512 <xQueueReceiveFromISR+0x22>
 80044fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004500:	b672      	cpsid	i
 8004502:	f383 8811 	msr	BASEPRI, r3
 8004506:	f3bf 8f6f 	isb	sy
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	b662      	cpsie	i
 8004510:	e7fe      	b.n	8004510 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004512:	b961      	cbnz	r1, 800452e <xQueueReceiveFromISR+0x3e>
 8004514:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004516:	b153      	cbz	r3, 800452e <xQueueReceiveFromISR+0x3e>
 8004518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451c:	b672      	cpsid	i
 800451e:	f383 8811 	msr	BASEPRI, r3
 8004522:	f3bf 8f6f 	isb	sy
 8004526:	f3bf 8f4f 	dsb	sy
 800452a:	b662      	cpsie	i
 800452c:	e7fe      	b.n	800452c <xQueueReceiveFromISR+0x3c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800452e:	f001 f8c3 	bl	80056b8 <vPortValidateInterruptPriority>
	__asm volatile
 8004532:	f3ef 8711 	mrs	r7, BASEPRI
 8004536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453a:	b672      	cpsid	i
 800453c:	f383 8811 	msr	BASEPRI, r3
 8004540:	f3bf 8f6f 	isb	sy
 8004544:	f3bf 8f4f 	dsb	sy
 8004548:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800454a:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800454c:	b31c      	cbz	r4, 8004596 <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 800454e:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004552:	4649      	mov	r1, r9
 8004554:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004556:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8004558:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800455a:	f7ff fbe6 	bl	8003d2a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800455e:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8004560:	1c73      	adds	r3, r6, #1
 8004562:	d113      	bne.n	800458c <xQueueReceiveFromISR+0x9c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004564:	692b      	ldr	r3, [r5, #16]
 8004566:	b90b      	cbnz	r3, 800456c <xQueueReceiveFromISR+0x7c>
			xReturn = pdPASS;
 8004568:	2001      	movs	r0, #1
 800456a:	e00b      	b.n	8004584 <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800456c:	f105 0010 	add.w	r0, r5, #16
 8004570:	f000 fb7a 	bl	8004c68 <xTaskRemoveFromEventList>
 8004574:	2800      	cmp	r0, #0
 8004576:	d0f7      	beq.n	8004568 <xQueueReceiveFromISR+0x78>
						if( pxHigherPriorityTaskWoken != NULL )
 8004578:	f1b8 0f00 	cmp.w	r8, #0
 800457c:	d0f4      	beq.n	8004568 <xQueueReceiveFromISR+0x78>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800457e:	2001      	movs	r0, #1
 8004580:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8004584:	f387 8811 	msr	BASEPRI, r7
}
 8004588:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800458c:	3601      	adds	r6, #1
 800458e:	b276      	sxtb	r6, r6
 8004590:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8004594:	e7e8      	b.n	8004568 <xQueueReceiveFromISR+0x78>
			xReturn = pdFAIL;
 8004596:	4620      	mov	r0, r4
 8004598:	e7f4      	b.n	8004584 <xQueueReceiveFromISR+0x94>

0800459a <uxQueueMessagesWaiting>:
{
 800459a:	b513      	push	{r0, r1, r4, lr}
	configASSERT( xQueue );
 800459c:	4604      	mov	r4, r0
 800459e:	b950      	cbnz	r0, 80045b6 <uxQueueMessagesWaiting+0x1c>
	__asm volatile
 80045a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a4:	b672      	cpsid	i
 80045a6:	f383 8811 	msr	BASEPRI, r3
 80045aa:	f3bf 8f6f 	isb	sy
 80045ae:	f3bf 8f4f 	dsb	sy
 80045b2:	b662      	cpsie	i
 80045b4:	e7fe      	b.n	80045b4 <uxQueueMessagesWaiting+0x1a>
	taskENTER_CRITICAL();
 80045b6:	f000 ff7d 	bl	80054b4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80045ba:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80045bc:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 80045be:	f000 ff9f 	bl	8005500 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80045c2:	9801      	ldr	r0, [sp, #4]
 80045c4:	b002      	add	sp, #8
 80045c6:	bd10      	pop	{r4, pc}

080045c8 <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 80045c8:	b950      	cbnz	r0, 80045e0 <uxQueueMessagesWaitingFromISR+0x18>
 80045ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ce:	b672      	cpsid	i
 80045d0:	f383 8811 	msr	BASEPRI, r3
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	f3bf 8f4f 	dsb	sy
 80045dc:	b662      	cpsie	i
 80045de:	e7fe      	b.n	80045de <uxQueueMessagesWaitingFromISR+0x16>
	uxReturn = pxQueue->uxMessagesWaiting;
 80045e0:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80045e2:	4770      	bx	lr

080045e4 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80045e4:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80045e6:	4909      	ldr	r1, [pc, #36]	; (800460c <vQueueUnregisterQueue+0x28>)
	{
 80045e8:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80045ea:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 80045ee:	00dc      	lsls	r4, r3, #3
 80045f0:	4282      	cmp	r2, r0
 80045f2:	d106      	bne.n	8004602 <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80045f4:	4a06      	ldr	r2, [pc, #24]	; (8004610 <vQueueUnregisterQueue+0x2c>)
 80045f6:	2100      	movs	r1, #0
 80045f8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80045fc:	4422      	add	r2, r4
 80045fe:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004600:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004602:	3301      	adds	r3, #1
 8004604:	2b08      	cmp	r3, #8
 8004606:	d1f0      	bne.n	80045ea <vQueueUnregisterQueue+0x6>
 8004608:	e7fa      	b.n	8004600 <vQueueUnregisterQueue+0x1c>
 800460a:	bf00      	nop
 800460c:	2000a7b8 	.word	0x2000a7b8
 8004610:	2000a7b4 	.word	0x2000a7b4

08004614 <vQueueDelete>:
{
 8004614:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8004616:	b950      	cbnz	r0, 800462e <vQueueDelete+0x1a>
 8004618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461c:	b672      	cpsid	i
 800461e:	f383 8811 	msr	BASEPRI, r3
 8004622:	f3bf 8f6f 	isb	sy
 8004626:	f3bf 8f4f 	dsb	sy
 800462a:	b662      	cpsie	i
 800462c:	e7fe      	b.n	800462c <vQueueDelete+0x18>
		vQueueUnregisterQueue( pxQueue );
 800462e:	f7ff ffd9 	bl	80045e4 <vQueueUnregisterQueue>
}
 8004632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vPortFree( pxQueue );
 8004636:	f000 be99 	b.w	800536c <vPortFree>
	...

0800463c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800463c:	4b06      	ldr	r3, [pc, #24]	; (8004658 <prvResetNextTaskUnblockTime+0x1c>)
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	6812      	ldr	r2, [r2, #0]
 8004642:	b91a      	cbnz	r2, 800464c <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004644:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004648:	605a      	str	r2, [r3, #4]
	}
}
 800464a:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004650:	68d2      	ldr	r2, [r2, #12]
 8004652:	6852      	ldr	r2, [r2, #4]
 8004654:	e7f8      	b.n	8004648 <prvResetNextTaskUnblockTime+0xc>
 8004656:	bf00      	nop
 8004658:	200002a8 	.word	0x200002a8

0800465c <prvAddCurrentTaskToDelayedList.isra.0>:
		return xIdleTaskHandle->ulRunTimeCounter;
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
 800465c:	b570      	push	{r4, r5, r6, lr}
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800465e:	4c12      	ldr	r4, [pc, #72]	; (80046a8 <prvAddCurrentTaskToDelayedList.isra.0+0x4c>)
static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
 8004660:	4605      	mov	r5, r0
const TickType_t xConstTickCount = xTickCount;
 8004662:	68a6      	ldr	r6, [r4, #8]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004664:	68e0      	ldr	r0, [r4, #12]
 8004666:	3004      	adds	r0, #4
 8004668:	f7ff fb0f 	bl	8003c8a <uxListRemove>
 800466c:	b938      	cbnz	r0, 800467e <prvAddCurrentTaskToDelayedList.isra.0+0x22>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800466e:	68e2      	ldr	r2, [r4, #12]
 8004670:	6923      	ldr	r3, [r4, #16]
 8004672:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004674:	2201      	movs	r2, #1
 8004676:	408a      	lsls	r2, r1
 8004678:	ea23 0302 	bic.w	r3, r3, r2
 800467c:	6123      	str	r3, [r4, #16]
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
 800467e:	1975      	adds	r5, r6, r5

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004680:	68e3      	ldr	r3, [r4, #12]
 8004682:	605d      	str	r5, [r3, #4]

		if( xTimeToWake < xConstTickCount )
 8004684:	d306      	bcc.n	8004694 <prvAddCurrentTaskToDelayedList.isra.0+0x38>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004686:	6960      	ldr	r0, [r4, #20]
 8004688:	68e1      	ldr	r1, [r4, #12]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800468a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800468e:	3104      	adds	r1, #4
 8004690:	f7ff bae4 	b.w	8003c5c <vListInsert>
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004694:	6820      	ldr	r0, [r4, #0]
 8004696:	68e1      	ldr	r1, [r4, #12]
 8004698:	3104      	adds	r1, #4
 800469a:	f7ff fadf 	bl	8003c5c <vListInsert>
			if( xTimeToWake < xNextTaskUnblockTime )
 800469e:	6863      	ldr	r3, [r4, #4]
 80046a0:	429d      	cmp	r5, r3
 80046a2:	d200      	bcs.n	80046a6 <prvAddCurrentTaskToDelayedList.isra.0+0x4a>
				xNextTaskUnblockTime = xTimeToWake;
 80046a4:	6065      	str	r5, [r4, #4]
}
 80046a6:	bd70      	pop	{r4, r5, r6, pc}
 80046a8:	200002a8 	.word	0x200002a8

080046ac <prvIdleTask>:
{
 80046ac:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046ae:	4c12      	ldr	r4, [pc, #72]	; (80046f8 <prvIdleTask+0x4c>)
				taskYIELD();
 80046b0:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
 80046b4:	4e11      	ldr	r6, [pc, #68]	; (80046fc <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80046b8:	b943      	cbnz	r3, 80046cc <prvIdleTask+0x20>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80046ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d9fa      	bls.n	80046b6 <prvIdleTask+0xa>
				taskYIELD();
 80046c0:	6037      	str	r7, [r6, #0]
 80046c2:	f3bf 8f4f 	dsb	sy
 80046c6:	f3bf 8f6f 	isb	sy
 80046ca:	e7f4      	b.n	80046b6 <prvIdleTask+0xa>
			taskENTER_CRITICAL();
 80046cc:	f000 fef2 	bl	80054b4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046d2:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046d4:	1d28      	adds	r0, r5, #4
 80046d6:	f7ff fad8 	bl	8003c8a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80046da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80046dc:	3b01      	subs	r3, #1
 80046de:	62e3      	str	r3, [r4, #44]	; 0x2c
				--uxDeletedTasksWaitingCleanUp;
 80046e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80046e2:	3b01      	subs	r3, #1
 80046e4:	6323      	str	r3, [r4, #48]	; 0x30
			taskEXIT_CRITICAL();
 80046e6:	f000 ff0b 	bl	8005500 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 80046ea:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80046ec:	f000 fe3e 	bl	800536c <vPortFree>
			vPortFree( pxTCB );
 80046f0:	4628      	mov	r0, r5
 80046f2:	f000 fe3b 	bl	800536c <vPortFree>
	}
 80046f6:	e7de      	b.n	80046b6 <prvIdleTask+0xa>
 80046f8:	200002a8 	.word	0x200002a8
 80046fc:	e000ed04 	.word	0xe000ed04

08004700 <xTaskCreate>:
	{
 8004700:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004704:	0096      	lsls	r6, r2, #2
	{
 8004706:	4607      	mov	r7, r0
 8004708:	460c      	mov	r4, r1
 800470a:	4698      	mov	r8, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800470c:	4630      	mov	r0, r6
 800470e:	f000 fdad 	bl	800526c <pvPortMalloc>
			if( pxStack != NULL )
 8004712:	4681      	mov	r9, r0
 8004714:	b1a0      	cbz	r0, 8004740 <xTaskCreate+0x40>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004716:	205c      	movs	r0, #92	; 0x5c
 8004718:	f000 fda8 	bl	800526c <pvPortMalloc>
				if( pxNewTCB != NULL )
 800471c:	4605      	mov	r5, r0
 800471e:	b160      	cbz	r0, 800473a <xTaskCreate+0x3a>
					pxNewTCB->pxStack = pxStack;
 8004720:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004724:	4632      	mov	r2, r6
 8004726:	21a5      	movs	r1, #165	; 0xa5
 8004728:	4648      	mov	r0, r9
 800472a:	f009 fe27 	bl	800e37c <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800472e:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
	if( pcName != NULL )
 8004732:	b944      	cbnz	r4, 8004746 <xTaskCreate+0x46>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004734:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
 8004738:	e014      	b.n	8004764 <xTaskCreate+0x64>
					vPortFree( pxStack );
 800473a:	4648      	mov	r0, r9
 800473c:	f000 fe16 	bl	800536c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004740:	f04f 36ff 	mov.w	r6, #4294967295
 8004744:	e09a      	b.n	800487c <xTaskCreate+0x17c>
 8004746:	1e63      	subs	r3, r4, #1
 8004748:	f105 0234 	add.w	r2, r5, #52	; 0x34
 800474c:	340f      	adds	r4, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800474e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8004752:	f802 1b01 	strb.w	r1, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 8004756:	7819      	ldrb	r1, [r3, #0]
 8004758:	b109      	cbz	r1, 800475e <xTaskCreate+0x5e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800475a:	429c      	cmp	r4, r3
 800475c:	d1f7      	bne.n	800474e <xTaskCreate+0x4e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800475e:	2300      	movs	r3, #0
 8004760:	f885 3043 	strb.w	r3, [r5, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004764:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxNewTCB->uxMutexesHeld = 0;
 8004766:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800476a:	f105 0904 	add.w	r9, r5, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800476e:	3e04      	subs	r6, #4
 8004770:	2c06      	cmp	r4, #6
		pxNewTCB->uxMutexesHeld = 0;
 8004772:	f8c5 a050 	str.w	sl, [r5, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004776:	4648      	mov	r0, r9
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004778:	445e      	add	r6, fp
 800477a:	bf28      	it	cs
 800477c:	2406      	movcs	r4, #6
	pxNewTCB->uxPriority = uxPriority;
 800477e:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8004780:	64ec      	str	r4, [r5, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004782:	f1c4 0407 	rsb	r4, r4, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004786:	f7ff fa5a 	bl	8003c3e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800478a:	f105 0018 	add.w	r0, r5, #24
 800478e:	f7ff fa56 	bl	8003c3e <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8004792:	f8c5 a054 	str.w	sl, [r5, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004796:	4642      	mov	r2, r8
 8004798:	4639      	mov	r1, r7
 800479a:	f026 0007 	bic.w	r0, r6, #7
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800479e:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047a0:	61ac      	str	r4, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80047a2:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80047a4:	f885 a058 	strb.w	sl, [r5, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80047a8:	f000 fe5a 	bl	8005460 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 80047ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80047ae:	6028      	str	r0, [r5, #0]
	if( pxCreatedTask != NULL )
 80047b0:	b103      	cbz	r3, 80047b4 <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80047b2:	601d      	str	r5, [r3, #0]
		uxCurrentNumberOfTasks++;
 80047b4:	4c38      	ldr	r4, [pc, #224]	; (8004898 <xTaskCreate+0x198>)
	taskENTER_CRITICAL();
 80047b6:	f000 fe7d 	bl	80054b4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80047ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80047bc:	f104 0734 	add.w	r7, r4, #52	; 0x34
 80047c0:	3301      	adds	r3, #1
 80047c2:	62e3      	str	r3, [r4, #44]	; 0x2c
		if( pxCurrentTCB == NULL )
 80047c4:	68e3      	ldr	r3, [r4, #12]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d15b      	bne.n	8004882 <xTaskCreate+0x182>
			pxCurrentTCB = pxNewTCB;
 80047ca:	60e5      	str	r5, [r4, #12]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80047cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d12f      	bne.n	8004832 <xTaskCreate+0x132>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80047d2:	4638      	mov	r0, r7
	vListInitialise( &xDelayedTaskList1 );
 80047d4:	f104 08c0 	add.w	r8, r4, #192	; 0xc0
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80047d8:	f7ff fa26 	bl	8003c28 <vListInitialise>
 80047dc:	f104 0048 	add.w	r0, r4, #72	; 0x48
 80047e0:	f7ff fa22 	bl	8003c28 <vListInitialise>
 80047e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80047e8:	f7ff fa1e 	bl	8003c28 <vListInitialise>
 80047ec:	f104 0070 	add.w	r0, r4, #112	; 0x70
 80047f0:	f7ff fa1a 	bl	8003c28 <vListInitialise>
 80047f4:	f104 0084 	add.w	r0, r4, #132	; 0x84
 80047f8:	f7ff fa16 	bl	8003c28 <vListInitialise>
 80047fc:	f104 0098 	add.w	r0, r4, #152	; 0x98
	vListInitialise( &xDelayedTaskList2 );
 8004800:	f104 06d4 	add.w	r6, r4, #212	; 0xd4
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004804:	f7ff fa10 	bl	8003c28 <vListInitialise>
 8004808:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 800480c:	f7ff fa0c 	bl	8003c28 <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
 8004810:	4640      	mov	r0, r8
 8004812:	f7ff fa09 	bl	8003c28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004816:	4630      	mov	r0, r6
 8004818:	f7ff fa06 	bl	8003c28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800481c:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 8004820:	f7ff fa02 	bl	8003c28 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8004824:	f104 0018 	add.w	r0, r4, #24
 8004828:	f7ff f9fe 	bl	8003c28 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800482c:	f8c4 8000 	str.w	r8, [r4]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004830:	6166      	str	r6, [r4, #20]
		uxTaskNumber++;
 8004832:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
		prvAddTaskToReadyList( pxNewTCB );
 8004836:	2601      	movs	r6, #1
 8004838:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800483a:	2014      	movs	r0, #20
		uxTaskNumber++;
 800483c:	3301      	adds	r3, #1
		prvAddTaskToReadyList( pxNewTCB );
 800483e:	6921      	ldr	r1, [r4, #16]
 8004840:	fb00 7002 	mla	r0, r0, r2, r7
		uxTaskNumber++;
 8004844:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004848:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800484a:	fa06 f302 	lsl.w	r3, r6, r2
 800484e:	430b      	orrs	r3, r1
 8004850:	4649      	mov	r1, r9
 8004852:	6123      	str	r3, [r4, #16]
 8004854:	f7ff f9f6 	bl	8003c44 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8004858:	f000 fe52 	bl	8005500 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800485c:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8004860:	b163      	cbz	r3, 800487c <xTaskCreate+0x17c>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004862:	68e3      	ldr	r3, [r4, #12]
 8004864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004866:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004868:	429a      	cmp	r2, r3
 800486a:	d207      	bcs.n	800487c <xTaskCreate+0x17c>
			taskYIELD_IF_USING_PREEMPTION();
 800486c:	4b0b      	ldr	r3, [pc, #44]	; (800489c <xTaskCreate+0x19c>)
 800486e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004872:	601a      	str	r2, [r3, #0]
 8004874:	f3bf 8f4f 	dsb	sy
 8004878:	f3bf 8f6f 	isb	sy
	}
 800487c:	4630      	mov	r0, r6
 800487e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if( xSchedulerRunning == pdFALSE )
 8004882:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1d3      	bne.n	8004832 <xTaskCreate+0x132>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800488a:	68e3      	ldr	r3, [r4, #12]
 800488c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800488e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004890:	429a      	cmp	r2, r3
 8004892:	d3ce      	bcc.n	8004832 <xTaskCreate+0x132>
					pxCurrentTCB = pxNewTCB;
 8004894:	60e5      	str	r5, [r4, #12]
 8004896:	e7cc      	b.n	8004832 <xTaskCreate+0x132>
 8004898:	200002a8 	.word	0x200002a8
 800489c:	e000ed04 	.word	0xe000ed04

080048a0 <vTaskDelete>:
	{
 80048a0:	b570      	push	{r4, r5, r6, lr}
 80048a2:	4605      	mov	r5, r0
 80048a4:	4c2a      	ldr	r4, [pc, #168]	; (8004950 <vTaskDelete+0xb0>)
		taskENTER_CRITICAL();
 80048a6:	f000 fe05 	bl	80054b4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80048aa:	b905      	cbnz	r5, 80048ae <vTaskDelete+0xe>
 80048ac:	68e5      	ldr	r5, [r4, #12]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048ae:	1d2e      	adds	r6, r5, #4
 80048b0:	4630      	mov	r0, r6
 80048b2:	f7ff f9ea 	bl	8003c8a <uxListRemove>
 80048b6:	b958      	cbnz	r0, 80048d0 <vTaskDelete+0x30>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80048b8:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80048ba:	2014      	movs	r0, #20
 80048bc:	fb00 4001 	mla	r0, r0, r1, r4
 80048c0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80048c2:	b92b      	cbnz	r3, 80048d0 <vTaskDelete+0x30>
 80048c4:	2201      	movs	r2, #1
 80048c6:	6923      	ldr	r3, [r4, #16]
 80048c8:	408a      	lsls	r2, r1
 80048ca:	ea23 0302 	bic.w	r3, r3, r2
 80048ce:	6123      	str	r3, [r4, #16]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80048d0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80048d2:	b11b      	cbz	r3, 80048dc <vTaskDelete+0x3c>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048d4:	f105 0018 	add.w	r0, r5, #24
 80048d8:	f7ff f9d7 	bl	8003c8a <uxListRemove>
			uxTaskNumber++;
 80048dc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80048e0:	3301      	adds	r3, #1
 80048e2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			if( pxTCB == pxCurrentTCB )
 80048e6:	68e3      	ldr	r3, [r4, #12]
 80048e8:	42ab      	cmp	r3, r5
 80048ea:	d11c      	bne.n	8004926 <vTaskDelete+0x86>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80048ec:	4631      	mov	r1, r6
 80048ee:	4819      	ldr	r0, [pc, #100]	; (8004954 <vTaskDelete+0xb4>)
 80048f0:	f7ff f9a8 	bl	8003c44 <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 80048f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80048f6:	3301      	adds	r3, #1
 80048f8:	6323      	str	r3, [r4, #48]	; 0x30
		taskEXIT_CRITICAL();
 80048fa:	f000 fe01 	bl	8005500 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 80048fe:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8004902:	b323      	cbz	r3, 800494e <vTaskDelete+0xae>
			if( pxTCB == pxCurrentTCB )
 8004904:	68e3      	ldr	r3, [r4, #12]
 8004906:	42ab      	cmp	r3, r5
 8004908:	d121      	bne.n	800494e <vTaskDelete+0xae>
				configASSERT( uxSchedulerSuspended == 0 );
 800490a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 800490e:	b1b3      	cbz	r3, 800493e <vTaskDelete+0x9e>
 8004910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004914:	b672      	cpsid	i
 8004916:	f383 8811 	msr	BASEPRI, r3
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	b662      	cpsie	i
 8004924:	e7fe      	b.n	8004924 <vTaskDelete+0x84>
				--uxCurrentNumberOfTasks;
 8004926:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			vPortFree( pxTCB->pxStack );
 8004928:	6b28      	ldr	r0, [r5, #48]	; 0x30
				--uxCurrentNumberOfTasks;
 800492a:	3b01      	subs	r3, #1
 800492c:	62e3      	str	r3, [r4, #44]	; 0x2c
			vPortFree( pxTCB->pxStack );
 800492e:	f000 fd1d 	bl	800536c <vPortFree>
			vPortFree( pxTCB );
 8004932:	4628      	mov	r0, r5
 8004934:	f000 fd1a 	bl	800536c <vPortFree>
				prvResetNextTaskUnblockTime();
 8004938:	f7ff fe80 	bl	800463c <prvResetNextTaskUnblockTime>
 800493c:	e7dd      	b.n	80048fa <vTaskDelete+0x5a>
				portYIELD_WITHIN_API();
 800493e:	4b06      	ldr	r3, [pc, #24]	; (8004958 <vTaskDelete+0xb8>)
 8004940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004944:	601a      	str	r2, [r3, #0]
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	f3bf 8f6f 	isb	sy
	}
 800494e:	bd70      	pop	{r4, r5, r6, pc}
 8004950:	200002a8 	.word	0x200002a8
 8004954:	200002c0 	.word	0x200002c0
 8004958:	e000ed04 	.word	0xe000ed04

0800495c <vTaskStartScheduler>:
{
 800495c:	b537      	push	{r0, r1, r2, r4, r5, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 800495e:	4c19      	ldr	r4, [pc, #100]	; (80049c4 <vTaskStartScheduler+0x68>)
 8004960:	2500      	movs	r5, #0
 8004962:	2280      	movs	r2, #128	; 0x80
 8004964:	4918      	ldr	r1, [pc, #96]	; (80049c8 <vTaskStartScheduler+0x6c>)
 8004966:	f504 7384 	add.w	r3, r4, #264	; 0x108
 800496a:	4818      	ldr	r0, [pc, #96]	; (80049cc <vTaskStartScheduler+0x70>)
 800496c:	9500      	str	r5, [sp, #0]
 800496e:	9301      	str	r3, [sp, #4]
 8004970:	462b      	mov	r3, r5
 8004972:	f7ff fec5 	bl	8004700 <xTaskCreate>
	if( xReturn == pdPASS )
 8004976:	2801      	cmp	r0, #1
 8004978:	d114      	bne.n	80049a4 <vTaskStartScheduler+0x48>
 800497a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497e:	b672      	cpsid	i
 8004980:	f383 8811 	msr	BASEPRI, r3
 8004984:	f3bf 8f6f 	isb	sy
 8004988:	f3bf 8f4f 	dsb	sy
 800498c:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 800498e:	f04f 33ff 	mov.w	r3, #4294967295
 8004992:	6063      	str	r3, [r4, #4]
		xSchedulerRunning = pdTRUE;
 8004994:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004998:	60a5      	str	r5, [r4, #8]
}
 800499a:	b003      	add	sp, #12
 800499c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 80049a0:	f000 be2a 	b.w	80055f8 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80049a4:	3001      	adds	r0, #1
 80049a6:	d10a      	bne.n	80049be <vTaskStartScheduler+0x62>
 80049a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ac:	b672      	cpsid	i
 80049ae:	f383 8811 	msr	BASEPRI, r3
 80049b2:	f3bf 8f6f 	isb	sy
 80049b6:	f3bf 8f4f 	dsb	sy
 80049ba:	b662      	cpsie	i
 80049bc:	e7fe      	b.n	80049bc <vTaskStartScheduler+0x60>
}
 80049be:	b003      	add	sp, #12
 80049c0:	bd30      	pop	{r4, r5, pc}
 80049c2:	bf00      	nop
 80049c4:	200002a8 	.word	0x200002a8
 80049c8:	08013502 	.word	0x08013502
 80049cc:	080046ad 	.word	0x080046ad

080049d0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80049d0:	4a03      	ldr	r2, [pc, #12]	; (80049e0 <vTaskSuspendAll+0x10>)
 80049d2:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
 80049d6:	3301      	adds	r3, #1
 80049d8:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
}
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	200002a8 	.word	0x200002a8

080049e4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80049e4:	4b01      	ldr	r3, [pc, #4]	; (80049ec <xTaskGetTickCount+0x8>)
 80049e6:	6898      	ldr	r0, [r3, #8]
}
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	200002a8 	.word	0x200002a8

080049f0 <xTaskGetTickCountFromISR>:
{
 80049f0:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80049f2:	f000 fe61 	bl	80056b8 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 80049f6:	4b01      	ldr	r3, [pc, #4]	; (80049fc <xTaskGetTickCountFromISR+0xc>)
 80049f8:	6898      	ldr	r0, [r3, #8]
}
 80049fa:	bd08      	pop	{r3, pc}
 80049fc:	200002a8 	.word	0x200002a8

08004a00 <xTaskIncrementTick>:
{
 8004a00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a04:	4b37      	ldr	r3, [pc, #220]	; (8004ae4 <xTaskIncrementTick+0xe4>)
 8004a06:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8004a0a:	461c      	mov	r4, r3
 8004a0c:	2a00      	cmp	r2, #0
 8004a0e:	d161      	bne.n	8004ad4 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004a10:	689f      	ldr	r7, [r3, #8]
 8004a12:	3701      	adds	r7, #1
		xTickCount = xConstTickCount;
 8004a14:	609f      	str	r7, [r3, #8]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004a16:	b9c7      	cbnz	r7, 8004a4a <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	b153      	cbz	r3, 8004a34 <xTaskIncrementTick+0x34>
 8004a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a22:	b672      	cpsid	i
 8004a24:	f383 8811 	msr	BASEPRI, r3
 8004a28:	f3bf 8f6f 	isb	sy
 8004a2c:	f3bf 8f4f 	dsb	sy
 8004a30:	b662      	cpsie	i
 8004a32:	e7fe      	b.n	8004a32 <xTaskIncrementTick+0x32>
 8004a34:	6823      	ldr	r3, [r4, #0]
 8004a36:	6962      	ldr	r2, [r4, #20]
 8004a38:	6022      	str	r2, [r4, #0]
 8004a3a:	6163      	str	r3, [r4, #20]
 8004a3c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8004a40:	3301      	adds	r3, #1
 8004a42:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
 8004a46:	f7ff fdf9 	bl	800463c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004a4a:	6863      	ldr	r3, [r4, #4]
BaseType_t xSwitchRequired = pdFALSE;
 8004a4c:	2500      	movs	r5, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004a4e:	42bb      	cmp	r3, r7
 8004a50:	d910      	bls.n	8004a74 <xTaskIncrementTick+0x74>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a52:	68e3      	ldr	r3, [r4, #12]
 8004a54:	2214      	movs	r2, #20
 8004a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a58:	fb02 4303 	mla	r3, r2, r3, r4
 8004a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
				xSwitchRequired = pdTRUE;
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	bf28      	it	cs
 8004a62:	2501      	movcs	r5, #1
		if( xYieldPending != pdFALSE )
 8004a64:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
			xSwitchRequired = pdTRUE;
 8004a68:	2b00      	cmp	r3, #0
}
 8004a6a:	bf0c      	ite	eq
 8004a6c:	4628      	moveq	r0, r5
 8004a6e:	2001      	movne	r0, #1
 8004a70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					prvAddTaskToReadyList( pxTCB );
 8004a74:	f04f 0a01 	mov.w	sl, #1
 8004a78:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8004ae8 <xTaskIncrementTick+0xe8>
 8004a7c:	f04f 0914 	mov.w	r9, #20
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a80:	6823      	ldr	r3, [r4, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	b91b      	cbnz	r3, 8004a8e <xTaskIncrementTick+0x8e>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a86:	f04f 33ff 	mov.w	r3, #4294967295
						xNextTaskUnblockTime = xItemValue;
 8004a8a:	6063      	str	r3, [r4, #4]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004a8c:	e7e1      	b.n	8004a52 <xTaskIncrementTick+0x52>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a8e:	6823      	ldr	r3, [r4, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a94:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8004a96:	429f      	cmp	r7, r3
 8004a98:	d3f7      	bcc.n	8004a8a <xTaskIncrementTick+0x8a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a9a:	f106 0b04 	add.w	fp, r6, #4
 8004a9e:	4658      	mov	r0, fp
 8004aa0:	f7ff f8f3 	bl	8003c8a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004aa4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8004aa6:	b11b      	cbz	r3, 8004ab0 <xTaskIncrementTick+0xb0>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004aa8:	f106 0018 	add.w	r0, r6, #24
 8004aac:	f7ff f8ed 	bl	8003c8a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ab0:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8004ab2:	4659      	mov	r1, fp
 8004ab4:	6922      	ldr	r2, [r4, #16]
 8004ab6:	fa0a f300 	lsl.w	r3, sl, r0
 8004aba:	fb09 8000 	mla	r0, r9, r0, r8
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	6123      	str	r3, [r4, #16]
 8004ac2:	f7ff f8bf 	bl	8003c44 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ac6:	68e3      	ldr	r3, [r4, #12]
 8004ac8:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8004aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8004acc:	429a      	cmp	r2, r3
 8004ace:	bf28      	it	cs
 8004ad0:	2501      	movcs	r5, #1
 8004ad2:	e7d5      	b.n	8004a80 <xTaskIncrementTick+0x80>
		++uxPendedTicks;
 8004ad4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
BaseType_t xSwitchRequired = pdFALSE;
 8004ad8:	2500      	movs	r5, #0
		++uxPendedTicks;
 8004ada:	3301      	adds	r3, #1
 8004adc:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004ae0:	e7c0      	b.n	8004a64 <xTaskIncrementTick+0x64>
 8004ae2:	bf00      	nop
 8004ae4:	200002a8 	.word	0x200002a8
 8004ae8:	200002dc 	.word	0x200002dc

08004aec <xTaskResumeAll>:
{
 8004aec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8004af0:	4c34      	ldr	r4, [pc, #208]	; (8004bc4 <xTaskResumeAll+0xd8>)
 8004af2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8004af6:	b953      	cbnz	r3, 8004b0e <xTaskResumeAll+0x22>
 8004af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afc:	b672      	cpsid	i
 8004afe:	f383 8811 	msr	BASEPRI, r3
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	b662      	cpsie	i
 8004b0c:	e7fe      	b.n	8004b0c <xTaskResumeAll+0x20>
	taskENTER_CRITICAL();
 8004b0e:	f000 fcd1 	bl	80054b4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8004b12:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8004b16:	3b01      	subs	r3, #1
 8004b18:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b1c:	f8d4 5104 	ldr.w	r5, [r4, #260]	; 0x104
 8004b20:	b135      	cbz	r5, 8004b30 <xTaskResumeAll+0x44>
BaseType_t xAlreadyYielded = pdFALSE;
 8004b22:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004b24:	f000 fcec 	bl	8005500 <vPortExitCritical>
}
 8004b28:	4620      	mov	r0, r4
 8004b2a:	b002      	add	sp, #8
 8004b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004b30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d0f5      	beq.n	8004b22 <xTaskResumeAll+0x36>
					prvAddTaskToReadyList( pxTCB );
 8004b36:	2601      	movs	r6, #1
 8004b38:	f104 0734 	add.w	r7, r4, #52	; 0x34
 8004b3c:	f04f 0814 	mov.w	r8, #20
 8004b40:	e01d      	b.n	8004b7e <xTaskResumeAll+0x92>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b42:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8004b46:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b48:	f105 0018 	add.w	r0, r5, #24
 8004b4c:	f7ff f89d 	bl	8003c8a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b50:	1d29      	adds	r1, r5, #4
 8004b52:	4608      	mov	r0, r1
 8004b54:	9101      	str	r1, [sp, #4]
 8004b56:	f7ff f898 	bl	8003c8a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b5a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8004b5c:	6922      	ldr	r2, [r4, #16]
 8004b5e:	fa06 f300 	lsl.w	r3, r6, r0
 8004b62:	9901      	ldr	r1, [sp, #4]
 8004b64:	fb08 7000 	mla	r0, r8, r0, r7
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	6123      	str	r3, [r4, #16]
 8004b6c:	f7ff f86a 	bl	8003c44 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b70:	68e3      	ldr	r3, [r4, #12]
 8004b72:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8004b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d301      	bcc.n	8004b7e <xTaskResumeAll+0x92>
						xYieldPending = pdTRUE;
 8004b7a:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b7e:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1dd      	bne.n	8004b42 <xTaskResumeAll+0x56>
				if( pxTCB != NULL )
 8004b86:	b10d      	cbz	r5, 8004b8c <xTaskResumeAll+0xa0>
					prvResetNextTaskUnblockTime();
 8004b88:	f7ff fd58 	bl	800463c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004b8c:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004b90:	b14d      	cbz	r5, 8004ba6 <xTaskResumeAll+0xba>
								xYieldPending = pdTRUE;
 8004b92:	2601      	movs	r6, #1
							if( xTaskIncrementTick() != pdFALSE )
 8004b94:	f7ff ff34 	bl	8004a00 <xTaskIncrementTick>
 8004b98:	b108      	cbz	r0, 8004b9e <xTaskResumeAll+0xb2>
								xYieldPending = pdTRUE;
 8004b9a:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004b9e:	3d01      	subs	r5, #1
 8004ba0:	d1f8      	bne.n	8004b94 <xTaskResumeAll+0xa8>
						uxPendedTicks = 0;
 8004ba2:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
				if( xYieldPending != pdFALSE )
 8004ba6:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d0b9      	beq.n	8004b22 <xTaskResumeAll+0x36>
					taskYIELD_IF_USING_PREEMPTION();
 8004bae:	4b06      	ldr	r3, [pc, #24]	; (8004bc8 <xTaskResumeAll+0xdc>)
 8004bb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8004bbe:	2401      	movs	r4, #1
 8004bc0:	e7b0      	b.n	8004b24 <xTaskResumeAll+0x38>
 8004bc2:	bf00      	nop
 8004bc4:	200002a8 	.word	0x200002a8
 8004bc8:	e000ed04 	.word	0xe000ed04

08004bcc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004bcc:	4b18      	ldr	r3, [pc, #96]	; (8004c30 <vTaskSwitchContext+0x64>)
 8004bce:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8004bd2:	4618      	mov	r0, r3
{
 8004bd4:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004bd6:	b11a      	cbz	r2, 8004be0 <vTaskSwitchContext+0x14>
		xYieldPending = pdTRUE;
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
 8004bde:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8004be0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004be4:	691a      	ldr	r2, [r3, #16]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004be6:	fab2 f282 	clz	r2, r2
 8004bea:	b2d2      	uxtb	r2, r2
 8004bec:	2114      	movs	r1, #20
 8004bee:	f1c2 021f 	rsb	r2, r2, #31
 8004bf2:	4351      	muls	r1, r2
 8004bf4:	440b      	add	r3, r1
 8004bf6:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8004bf8:	b954      	cbnz	r4, 8004c10 <vTaskSwitchContext+0x44>
	__asm volatile
 8004bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfe:	b672      	cpsid	i
 8004c00:	f383 8811 	msr	BASEPRI, r3
 8004c04:	f3bf 8f6f 	isb	sy
 8004c08:	f3bf 8f4f 	dsb	sy
 8004c0c:	b662      	cpsie	i
 8004c0e:	e7fe      	b.n	8004c0e <vTaskSwitchContext+0x42>
 8004c10:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8004c12:	4401      	add	r1, r0
 8004c14:	6864      	ldr	r4, [r4, #4]
 8004c16:	313c      	adds	r1, #60	; 0x3c
 8004c18:	428c      	cmp	r4, r1
 8004c1a:	639c      	str	r4, [r3, #56]	; 0x38
 8004c1c:	bf04      	itt	eq
 8004c1e:	6861      	ldreq	r1, [r4, #4]
 8004c20:	6399      	streq	r1, [r3, #56]	; 0x38
 8004c22:	2314      	movs	r3, #20
 8004c24:	fb03 0202 	mla	r2, r3, r2, r0
 8004c28:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	60c3      	str	r3, [r0, #12]
}
 8004c2e:	e7d6      	b.n	8004bde <vTaskSwitchContext+0x12>
 8004c30:	200002a8 	.word	0x200002a8

08004c34 <vTaskPlaceOnEventList>:
{
 8004c34:	b510      	push	{r4, lr}
 8004c36:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8004c38:	b950      	cbnz	r0, 8004c50 <vTaskPlaceOnEventList+0x1c>
 8004c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3e:	b672      	cpsid	i
 8004c40:	f383 8811 	msr	BASEPRI, r3
 8004c44:	f3bf 8f6f 	isb	sy
 8004c48:	f3bf 8f4f 	dsb	sy
 8004c4c:	b662      	cpsie	i
 8004c4e:	e7fe      	b.n	8004c4e <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c50:	4b04      	ldr	r3, [pc, #16]	; (8004c64 <vTaskPlaceOnEventList+0x30>)
 8004c52:	68d9      	ldr	r1, [r3, #12]
 8004c54:	3118      	adds	r1, #24
 8004c56:	f7ff f801 	bl	8003c5c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c5a:	4620      	mov	r0, r4
}
 8004c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c60:	f7ff bcfc 	b.w	800465c <prvAddCurrentTaskToDelayedList.isra.0>
 8004c64:	200002a8 	.word	0x200002a8

08004c68 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c68:	68c3      	ldr	r3, [r0, #12]
{
 8004c6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c6c:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8004c6e:	b955      	cbnz	r5, 8004c86 <xTaskRemoveFromEventList+0x1e>
 8004c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c74:	b672      	cpsid	i
 8004c76:	f383 8811 	msr	BASEPRI, r3
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	b662      	cpsie	i
 8004c84:	e7fe      	b.n	8004c84 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004c86:	f105 0118 	add.w	r1, r5, #24
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c8a:	4c15      	ldr	r4, [pc, #84]	; (8004ce0 <xTaskRemoveFromEventList+0x78>)
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004c8c:	4608      	mov	r0, r1
 8004c8e:	9101      	str	r1, [sp, #4]
 8004c90:	f7fe fffb 	bl	8003c8a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c94:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8004c98:	9901      	ldr	r1, [sp, #4]
 8004c9a:	b9e3      	cbnz	r3, 8004cd6 <xTaskRemoveFromEventList+0x6e>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c9c:	1d29      	adds	r1, r5, #4
 8004c9e:	4608      	mov	r0, r1
 8004ca0:	9101      	str	r1, [sp, #4]
 8004ca2:	f7fe fff2 	bl	8003c8a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004ca6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8004ca8:	2301      	movs	r3, #1
 8004caa:	6920      	ldr	r0, [r4, #16]
 8004cac:	9901      	ldr	r1, [sp, #4]
 8004cae:	4093      	lsls	r3, r2
 8004cb0:	4303      	orrs	r3, r0
 8004cb2:	2014      	movs	r0, #20
 8004cb4:	6123      	str	r3, [r4, #16]
 8004cb6:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8004cba:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004cbe:	f7fe ffc1 	bl	8003c44 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004cc2:	68e3      	ldr	r3, [r4, #12]
 8004cc4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8004cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d907      	bls.n	8004cdc <xTaskRemoveFromEventList+0x74>
		xYieldPending = pdTRUE;
 8004ccc:	2001      	movs	r0, #1
 8004cce:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
}
 8004cd2:	b003      	add	sp, #12
 8004cd4:	bd30      	pop	{r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004cd6:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 8004cda:	e7f0      	b.n	8004cbe <xTaskRemoveFromEventList+0x56>
		xReturn = pdFALSE;
 8004cdc:	2000      	movs	r0, #0
	return xReturn;
 8004cde:	e7f8      	b.n	8004cd2 <xTaskRemoveFromEventList+0x6a>
 8004ce0:	200002a8 	.word	0x200002a8

08004ce4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004ce4:	4b03      	ldr	r3, [pc, #12]	; (8004cf4 <vTaskInternalSetTimeOutState+0x10>)
 8004ce6:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004cea:	689b      	ldr	r3, [r3, #8]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004cec:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004cee:	6043      	str	r3, [r0, #4]
}
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	200002a8 	.word	0x200002a8

08004cf8 <xTaskCheckForTimeOut>:
{
 8004cf8:	b538      	push	{r3, r4, r5, lr}
 8004cfa:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8004cfc:	4605      	mov	r5, r0
 8004cfe:	b950      	cbnz	r0, 8004d16 <xTaskCheckForTimeOut+0x1e>
 8004d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d04:	b672      	cpsid	i
 8004d06:	f383 8811 	msr	BASEPRI, r3
 8004d0a:	f3bf 8f6f 	isb	sy
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	b662      	cpsie	i
 8004d14:	e7fe      	b.n	8004d14 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 8004d16:	b951      	cbnz	r1, 8004d2e <xTaskCheckForTimeOut+0x36>
 8004d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1c:	b672      	cpsid	i
 8004d1e:	f383 8811 	msr	BASEPRI, r3
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	f3bf 8f4f 	dsb	sy
 8004d2a:	b662      	cpsie	i
 8004d2c:	e7fe      	b.n	8004d2c <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 8004d2e:	f000 fbc1 	bl	80054b4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8004d32:	4b0e      	ldr	r3, [pc, #56]	; (8004d6c <xTaskCheckForTimeOut+0x74>)
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d34:	6828      	ldr	r0, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8004d36:	6899      	ldr	r1, [r3, #8]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d38:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d3c:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d3e:	4298      	cmp	r0, r3
 8004d40:	d001      	beq.n	8004d46 <xTaskCheckForTimeOut+0x4e>
 8004d42:	428a      	cmp	r2, r1
 8004d44:	d910      	bls.n	8004d68 <xTaskCheckForTimeOut+0x70>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d46:	6823      	ldr	r3, [r4, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d48:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d4a:	4283      	cmp	r3, r0
 8004d4c:	d90a      	bls.n	8004d64 <xTaskCheckForTimeOut+0x6c>
			*pxTicksToWait -= xElapsedTime;
 8004d4e:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004d50:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 8004d52:	4413      	add	r3, r2
 8004d54:	6023      	str	r3, [r4, #0]
			xReturn = pdFALSE;
 8004d56:	2400      	movs	r4, #0
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004d58:	f7ff ffc4 	bl	8004ce4 <vTaskInternalSetTimeOutState>
	taskEXIT_CRITICAL();
 8004d5c:	f000 fbd0 	bl	8005500 <vPortExitCritical>
}
 8004d60:	4620      	mov	r0, r4
 8004d62:	bd38      	pop	{r3, r4, r5, pc}
			*pxTicksToWait = 0;
 8004d64:	2300      	movs	r3, #0
 8004d66:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8004d68:	2401      	movs	r4, #1
 8004d6a:	e7f7      	b.n	8004d5c <xTaskCheckForTimeOut+0x64>
 8004d6c:	200002a8 	.word	0x200002a8

08004d70 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8004d70:	4b02      	ldr	r3, [pc, #8]	; (8004d7c <vTaskMissedYield+0xc>)
 8004d72:	2201      	movs	r2, #1
 8004d74:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	200002a8 	.word	0x200002a8

08004d80 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8004d80:	4b06      	ldr	r3, [pc, #24]	; (8004d9c <xTaskGetSchedulerState+0x1c>)
 8004d82:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8004d86:	b132      	cbz	r2, 8004d96 <xTaskGetSchedulerState+0x16>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d88:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8004d8c:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d8e:	bf0c      	ite	eq
 8004d90:	2002      	moveq	r0, #2
 8004d92:	2000      	movne	r0, #0
 8004d94:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d96:	2001      	movs	r0, #1
	}
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	200002a8 	.word	0x200002a8

08004da0 <xTaskPriorityInherit>:
	{
 8004da0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8004da2:	4604      	mov	r4, r0
 8004da4:	2800      	cmp	r0, #0
 8004da6:	d035      	beq.n	8004e14 <xTaskPriorityInherit+0x74>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004da8:	4a22      	ldr	r2, [pc, #136]	; (8004e34 <xTaskPriorityInherit+0x94>)
 8004daa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004dac:	68d1      	ldr	r1, [r2, #12]
 8004dae:	4615      	mov	r5, r2
 8004db0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8004db2:	428b      	cmp	r3, r1
 8004db4:	d236      	bcs.n	8004e24 <xTaskPriorityInherit+0x84>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004db6:	6982      	ldr	r2, [r0, #24]
 8004db8:	2a00      	cmp	r2, #0
 8004dba:	db04      	blt.n	8004dc6 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dbc:	68ea      	ldr	r2, [r5, #12]
 8004dbe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004dc0:	f1c2 0207 	rsb	r2, r2, #7
 8004dc4:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004dc6:	4e1c      	ldr	r6, [pc, #112]	; (8004e38 <xTaskPriorityInherit+0x98>)
 8004dc8:	2714      	movs	r7, #20
 8004dca:	6962      	ldr	r2, [r4, #20]
 8004dcc:	fb07 6303 	mla	r3, r7, r3, r6
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d121      	bne.n	8004e18 <xTaskPriorityInherit+0x78>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004dd4:	1d21      	adds	r1, r4, #4
 8004dd6:	4608      	mov	r0, r1
 8004dd8:	9101      	str	r1, [sp, #4]
 8004dda:	f7fe ff56 	bl	8003c8a <uxListRemove>
 8004dde:	9901      	ldr	r1, [sp, #4]
 8004de0:	b950      	cbnz	r0, 8004df8 <xTaskPriorityInherit+0x58>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004de2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004de4:	fb07 5700 	mla	r7, r7, r0, r5
 8004de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dea:	b92b      	cbnz	r3, 8004df8 <xTaskPriorityInherit+0x58>
 8004dec:	2201      	movs	r2, #1
 8004dee:	692b      	ldr	r3, [r5, #16]
 8004df0:	4082      	lsls	r2, r0
 8004df2:	ea23 0302 	bic.w	r3, r3, r2
 8004df6:	612b      	str	r3, [r5, #16]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004df8:	68eb      	ldr	r3, [r5, #12]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004dfa:	6928      	ldr	r0, [r5, #16]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfe:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004e00:	2401      	movs	r4, #1
 8004e02:	fa04 f203 	lsl.w	r2, r4, r3
 8004e06:	4302      	orrs	r2, r0
 8004e08:	2014      	movs	r0, #20
 8004e0a:	fb00 6003 	mla	r0, r0, r3, r6
 8004e0e:	612a      	str	r2, [r5, #16]
 8004e10:	f7fe ff18 	bl	8003c44 <vListInsertEnd>
	BaseType_t xReturn = pdFALSE;
 8004e14:	4620      	mov	r0, r4
		return xReturn;
 8004e16:	e003      	b.n	8004e20 <xTaskPriorityInherit+0x80>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e18:	68eb      	ldr	r3, [r5, #12]
				xReturn = pdTRUE;
 8004e1a:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1e:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 8004e20:	b003      	add	sp, #12
 8004e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004e24:	68d3      	ldr	r3, [r2, #12]
 8004e26:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8004e28:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8004e2a:	42a0      	cmp	r0, r4
 8004e2c:	bf2c      	ite	cs
 8004e2e:	2000      	movcs	r0, #0
 8004e30:	2001      	movcc	r0, #1
 8004e32:	e7f5      	b.n	8004e20 <xTaskPriorityInherit+0x80>
 8004e34:	200002a8 	.word	0x200002a8
 8004e38:	200002dc 	.word	0x200002dc

08004e3c <xTaskPriorityDisinherit>:
	{
 8004e3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8004e3e:	4604      	mov	r4, r0
 8004e40:	b910      	cbnz	r0, 8004e48 <xTaskPriorityDisinherit+0xc>
	BaseType_t xReturn = pdFALSE;
 8004e42:	2000      	movs	r0, #0
	}
 8004e44:	b002      	add	sp, #8
 8004e46:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8004e48:	4d24      	ldr	r5, [pc, #144]	; (8004edc <xTaskPriorityDisinherit+0xa0>)
 8004e4a:	68eb      	ldr	r3, [r5, #12]
 8004e4c:	4283      	cmp	r3, r0
 8004e4e:	d00a      	beq.n	8004e66 <xTaskPriorityDisinherit+0x2a>
 8004e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e54:	b672      	cpsid	i
 8004e56:	f383 8811 	msr	BASEPRI, r3
 8004e5a:	f3bf 8f6f 	isb	sy
 8004e5e:	f3bf 8f4f 	dsb	sy
 8004e62:	b662      	cpsie	i
 8004e64:	e7fe      	b.n	8004e64 <xTaskPriorityDisinherit+0x28>
			configASSERT( pxTCB->uxMutexesHeld );
 8004e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e68:	b953      	cbnz	r3, 8004e80 <xTaskPriorityDisinherit+0x44>
 8004e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6e:	b672      	cpsid	i
 8004e70:	f383 8811 	msr	BASEPRI, r3
 8004e74:	f3bf 8f6f 	isb	sy
 8004e78:	f3bf 8f4f 	dsb	sy
 8004e7c:	b662      	cpsie	i
 8004e7e:	e7fe      	b.n	8004e7e <xTaskPriorityDisinherit+0x42>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004e80:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8004e82:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004e84:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 8004e86:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004e88:	4291      	cmp	r1, r2
 8004e8a:	d0da      	beq.n	8004e42 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1d8      	bne.n	8004e42 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e90:	1d01      	adds	r1, r0, #4
 8004e92:	4608      	mov	r0, r1
 8004e94:	9101      	str	r1, [sp, #4]
 8004e96:	f7fe fef8 	bl	8003c8a <uxListRemove>
 8004e9a:	9901      	ldr	r1, [sp, #4]
 8004e9c:	b958      	cbnz	r0, 8004eb6 <xTaskPriorityDisinherit+0x7a>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004e9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ea0:	2014      	movs	r0, #20
 8004ea2:	fb00 5006 	mla	r0, r0, r6, r5
 8004ea6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004ea8:	b92b      	cbnz	r3, 8004eb6 <xTaskPriorityDisinherit+0x7a>
 8004eaa:	2201      	movs	r2, #1
 8004eac:	692b      	ldr	r3, [r5, #16]
 8004eae:	40b2      	lsls	r2, r6
 8004eb0:	ea23 0302 	bic.w	r3, r3, r2
 8004eb4:	612b      	str	r3, [r5, #16]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004eb6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 8004eb8:	6928      	ldr	r0, [r5, #16]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004eba:	f1c3 0207 	rsb	r2, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ebe:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ec0:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8004ec2:	2401      	movs	r4, #1
 8004ec4:	fa04 f203 	lsl.w	r2, r4, r3
 8004ec8:	4302      	orrs	r2, r0
 8004eca:	2014      	movs	r0, #20
 8004ecc:	612a      	str	r2, [r5, #16]
 8004ece:	4a04      	ldr	r2, [pc, #16]	; (8004ee0 <xTaskPriorityDisinherit+0xa4>)
 8004ed0:	fb00 2003 	mla	r0, r0, r3, r2
 8004ed4:	f7fe feb6 	bl	8003c44 <vListInsertEnd>
					xReturn = pdTRUE;
 8004ed8:	4620      	mov	r0, r4
		return xReturn;
 8004eda:	e7b3      	b.n	8004e44 <xTaskPriorityDisinherit+0x8>
 8004edc:	200002a8 	.word	0x200002a8
 8004ee0:	200002dc 	.word	0x200002dc

08004ee4 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8004ee4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8004ee6:	4604      	mov	r4, r0
 8004ee8:	2800      	cmp	r0, #0
 8004eea:	d051      	beq.n	8004f90 <vTaskPriorityDisinheritAfterTimeout+0xac>
			configASSERT( pxTCB->uxMutexesHeld );
 8004eec:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004eee:	b952      	cbnz	r2, 8004f06 <vTaskPriorityDisinheritAfterTimeout+0x22>
 8004ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef4:	b672      	cpsid	i
 8004ef6:	f383 8811 	msr	BASEPRI, r3
 8004efa:	f3bf 8f6f 	isb	sy
 8004efe:	f3bf 8f4f 	dsb	sy
 8004f02:	b662      	cpsie	i
 8004f04:	e7fe      	b.n	8004f04 <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004f06:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004f08:	4299      	cmp	r1, r3
 8004f0a:	bf38      	it	cc
 8004f0c:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004f0e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004f10:	428b      	cmp	r3, r1
 8004f12:	d03d      	beq.n	8004f90 <vTaskPriorityDisinheritAfterTimeout+0xac>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004f14:	2a01      	cmp	r2, #1
 8004f16:	d13b      	bne.n	8004f90 <vTaskPriorityDisinheritAfterTimeout+0xac>
					configASSERT( pxTCB != pxCurrentTCB );
 8004f18:	4d1e      	ldr	r5, [pc, #120]	; (8004f94 <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 8004f1a:	68ea      	ldr	r2, [r5, #12]
 8004f1c:	4282      	cmp	r2, r0
 8004f1e:	d10a      	bne.n	8004f36 <vTaskPriorityDisinheritAfterTimeout+0x52>
 8004f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f24:	b672      	cpsid	i
 8004f26:	f383 8811 	msr	BASEPRI, r3
 8004f2a:	f3bf 8f6f 	isb	sy
 8004f2e:	f3bf 8f4f 	dsb	sy
 8004f32:	b662      	cpsie	i
 8004f34:	e7fe      	b.n	8004f34 <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004f36:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004f38:	2714      	movs	r7, #20
 8004f3a:	4e17      	ldr	r6, [pc, #92]	; (8004f98 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004f3c:	2a00      	cmp	r2, #0
					pxTCB->uxPriority = uxPriorityToUse;
 8004f3e:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004f40:	fb07 6303 	mla	r3, r7, r3, r6
 8004f44:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f46:	bfa4      	itt	ge
 8004f48:	f1c1 0107 	rsbge	r1, r1, #7
 8004f4c:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d11e      	bne.n	8004f90 <vTaskPriorityDisinheritAfterTimeout+0xac>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f52:	1d01      	adds	r1, r0, #4
 8004f54:	4608      	mov	r0, r1
 8004f56:	9101      	str	r1, [sp, #4]
 8004f58:	f7fe fe97 	bl	8003c8a <uxListRemove>
 8004f5c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004f5e:	9901      	ldr	r1, [sp, #4]
 8004f60:	b948      	cbnz	r0, 8004f76 <vTaskPriorityDisinheritAfterTimeout+0x92>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004f62:	fb07 5702 	mla	r7, r7, r2, r5
 8004f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f68:	b92b      	cbnz	r3, 8004f76 <vTaskPriorityDisinheritAfterTimeout+0x92>
 8004f6a:	2001      	movs	r0, #1
 8004f6c:	692b      	ldr	r3, [r5, #16]
 8004f6e:	4090      	lsls	r0, r2
 8004f70:	ea23 0300 	bic.w	r3, r3, r0
 8004f74:	612b      	str	r3, [r5, #16]
						prvAddTaskToReadyList( pxTCB );
 8004f76:	2301      	movs	r3, #1
 8004f78:	6928      	ldr	r0, [r5, #16]
 8004f7a:	4093      	lsls	r3, r2
 8004f7c:	4303      	orrs	r3, r0
 8004f7e:	2014      	movs	r0, #20
 8004f80:	fb00 6002 	mla	r0, r0, r2, r6
 8004f84:	612b      	str	r3, [r5, #16]
	}
 8004f86:	b003      	add	sp, #12
 8004f88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 8004f8c:	f7fe be5a 	b.w	8003c44 <vListInsertEnd>
	}
 8004f90:	b003      	add	sp, #12
 8004f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f94:	200002a8 	.word	0x200002a8
 8004f98:	200002dc 	.word	0x200002dc

08004f9c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8004f9c:	4b04      	ldr	r3, [pc, #16]	; (8004fb0 <pvTaskIncrementMutexHeldCount+0x14>)
 8004f9e:	68da      	ldr	r2, [r3, #12]
 8004fa0:	b11a      	cbz	r2, 8004faa <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8004fa2:	68d9      	ldr	r1, [r3, #12]
 8004fa4:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8004fa6:	3201      	adds	r2, #1
 8004fa8:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 8004faa:	68d8      	ldr	r0, [r3, #12]
	}
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	200002a8 	.word	0x200002a8

08004fb4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004fb4:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8004fb6:	f7ff fcd1 	bl	800495c <vTaskStartScheduler>
  
  return osOK;
}
 8004fba:	2000      	movs	r0, #0
 8004fbc:	bd08      	pop	{r3, pc}

08004fbe <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fbe:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 8004fc2:	b10b      	cbz	r3, 8004fc8 <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 8004fc4:	f7ff bd14 	b.w	80049f0 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 8004fc8:	f7ff bd0c 	b.w	80049e4 <xTaskGetTickCount>

08004fcc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004fcc:	b530      	push	{r4, r5, lr}
 8004fce:	4604      	mov	r4, r0
 8004fd0:	b085      	sub	sp, #20
 8004fd2:	460b      	mov	r3, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fd4:	8a22      	ldrh	r2, [r4, #16]
 8004fd6:	ad03      	add	r5, sp, #12
 8004fd8:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
  if (priority != osPriorityError) {
 8004fdc:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8004fde:	bf14      	ite	ne
 8004fe0:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004fe2:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fe4:	e9d0 1000 	ldrd	r1, r0, [r0]
 8004fe8:	e9cd 4500 	strd	r4, r5, [sp]
 8004fec:	f7ff fb88 	bl	8004700 <xTaskCreate>
 8004ff0:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004ff2:	bf0c      	ite	eq
 8004ff4:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8004ff6:	2000      	movne	r0, #0
}
 8004ff8:	b005      	add	sp, #20
 8004ffa:	bd30      	pop	{r4, r5, pc}

08004ffc <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8004ffc:	b508      	push	{r3, lr}
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8004ffe:	f7ff fc4f 	bl	80048a0 <vTaskDelete>
  return osOK;
#else
  return osErrorOS;
#endif
}
 8005002:	2000      	movs	r0, #0
 8005004:	bd08      	pop	{r3, pc}

08005006 <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8005006:	2001      	movs	r0, #1
 8005008:	f7ff b820 	b.w	800404c <xQueueCreateMutex>

0800500c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800500c:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800500e:	2400      	movs	r4, #0
 8005010:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8005012:	b1e0      	cbz	r0, 800504e <osMutexWait+0x42>
 8005014:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8005018:	b19b      	cbz	r3, 8005042 <osMutexWait+0x36>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800501a:	aa01      	add	r2, sp, #4
 800501c:	4621      	mov	r1, r4
 800501e:	f7ff fa67 	bl	80044f0 <xQueueReceiveFromISR>
 8005022:	2801      	cmp	r0, #1
 8005024:	d111      	bne.n	800504a <osMutexWait+0x3e>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005026:	9b01      	ldr	r3, [sp, #4]
 8005028:	b913      	cbnz	r3, 8005030 <osMutexWait+0x24>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800502a:	2000      	movs	r0, #0
}
 800502c:	b002      	add	sp, #8
 800502e:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8005030:	4b08      	ldr	r3, [pc, #32]	; (8005054 <osMutexWait+0x48>)
 8005032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	f3bf 8f4f 	dsb	sy
 800503c:	f3bf 8f6f 	isb	sy
 8005040:	e7f3      	b.n	800502a <osMutexWait+0x1e>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005042:	f7ff f989 	bl	8004358 <xQueueSemaphoreTake>
 8005046:	2801      	cmp	r0, #1
 8005048:	d0ef      	beq.n	800502a <osMutexWait+0x1e>
    return osErrorOS;
 800504a:	20ff      	movs	r0, #255	; 0xff
 800504c:	e7ee      	b.n	800502c <osMutexWait+0x20>
    return osErrorParameter;
 800504e:	2080      	movs	r0, #128	; 0x80
 8005050:	e7ec      	b.n	800502c <osMutexWait+0x20>
 8005052:	bf00      	nop
 8005054:	e000ed04 	.word	0xe000ed04

08005058 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005058:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800505a:	2400      	movs	r4, #0
 800505c:	9401      	str	r4, [sp, #4]
 800505e:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 8005062:	b193      	cbz	r3, 800508a <osMutexRelease+0x32>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005064:	a901      	add	r1, sp, #4
 8005066:	f7ff f875 	bl	8004154 <xQueueGiveFromISR>
 800506a:	2801      	cmp	r0, #1
 800506c:	d113      	bne.n	8005096 <osMutexRelease+0x3e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800506e:	9b01      	ldr	r3, [sp, #4]
 8005070:	b913      	cbnz	r3, 8005078 <osMutexRelease+0x20>
  osStatus result = osOK;
 8005072:	2000      	movs	r0, #0
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 8005074:	b002      	add	sp, #8
 8005076:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8005078:	4b08      	ldr	r3, [pc, #32]	; (800509c <osMutexRelease+0x44>)
 800507a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800507e:	601a      	str	r2, [r3, #0]
 8005080:	f3bf 8f4f 	dsb	sy
 8005084:	f3bf 8f6f 	isb	sy
 8005088:	e7f3      	b.n	8005072 <osMutexRelease+0x1a>
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800508a:	461a      	mov	r2, r3
 800508c:	4619      	mov	r1, r3
 800508e:	f7fe ff23 	bl	8003ed8 <xQueueGenericSend>
 8005092:	2801      	cmp	r0, #1
 8005094:	d0ed      	beq.n	8005072 <osMutexRelease+0x1a>
    result = osErrorOS;
 8005096:	20ff      	movs	r0, #255	; 0xff
 8005098:	e7ec      	b.n	8005074 <osMutexRelease+0x1c>
 800509a:	bf00      	nop
 800509c:	e000ed04 	.word	0xe000ed04

080050a0 <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 80050a0:	b510      	push	{r4, lr}
 80050a2:	f3ef 8405 	mrs	r4, IPSR
  if (inHandlerMode()) {
 80050a6:	b91c      	cbnz	r4, 80050b0 <osMutexDelete+0x10>
    return osErrorISR;
  }

  vQueueDelete(mutex_id);
 80050a8:	f7ff fab4 	bl	8004614 <vQueueDelete>

  return osOK;
}
 80050ac:	4620      	mov	r0, r4
 80050ae:	bd10      	pop	{r4, pc}
    return osErrorISR;
 80050b0:	2482      	movs	r4, #130	; 0x82
 80050b2:	e7fb      	b.n	80050ac <osMutexDelete+0xc>

080050b4 <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 80050b4:	2901      	cmp	r1, #1
{ 
 80050b6:	4608      	mov	r0, r1
 80050b8:	b510      	push	{r4, lr}
  if (count == 1) {
 80050ba:	d10c      	bne.n	80050d6 <osSemaphoreCreate+0x22>
    vSemaphoreCreateBinary(sema);
 80050bc:	2203      	movs	r2, #3
 80050be:	2100      	movs	r1, #0
 80050c0:	f7fe fec2 	bl	8003e48 <xQueueGenericCreate>
 80050c4:	4604      	mov	r4, r0
 80050c6:	b120      	cbz	r0, 80050d2 <osSemaphoreCreate+0x1e>
 80050c8:	2300      	movs	r3, #0
 80050ca:	461a      	mov	r2, r3
 80050cc:	4619      	mov	r1, r3
 80050ce:	f7fe ff03 	bl	8003ed8 <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 80050d2:	4620      	mov	r0, r4
 80050d4:	bd10      	pop	{r4, pc}
 80050d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return xSemaphoreCreateCounting(count, count);
 80050da:	f7fe bedb 	b.w	8003e94 <xQueueCreateCountingSemaphore>
	...

080050e0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80050e0:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80050e2:	2400      	movs	r4, #0
 80050e4:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 80050e6:	b1e0      	cbz	r0, 8005122 <osSemaphoreWait+0x42>
 80050e8:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80050ec:	b19b      	cbz	r3, 8005116 <osSemaphoreWait+0x36>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80050ee:	aa01      	add	r2, sp, #4
 80050f0:	4621      	mov	r1, r4
 80050f2:	f7ff f9fd 	bl	80044f0 <xQueueReceiveFromISR>
 80050f6:	2801      	cmp	r0, #1
 80050f8:	d111      	bne.n	800511e <osSemaphoreWait+0x3e>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 80050fa:	9b01      	ldr	r3, [sp, #4]
 80050fc:	b913      	cbnz	r3, 8005104 <osSemaphoreWait+0x24>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 80050fe:	2000      	movs	r0, #0
}
 8005100:	b002      	add	sp, #8
 8005102:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8005104:	4b08      	ldr	r3, [pc, #32]	; (8005128 <osSemaphoreWait+0x48>)
 8005106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	f3bf 8f4f 	dsb	sy
 8005110:	f3bf 8f6f 	isb	sy
 8005114:	e7f3      	b.n	80050fe <osSemaphoreWait+0x1e>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005116:	f7ff f91f 	bl	8004358 <xQueueSemaphoreTake>
 800511a:	2801      	cmp	r0, #1
 800511c:	d0ef      	beq.n	80050fe <osSemaphoreWait+0x1e>
    return osErrorOS;
 800511e:	20ff      	movs	r0, #255	; 0xff
 8005120:	e7ee      	b.n	8005100 <osSemaphoreWait+0x20>
    return osErrorParameter;
 8005122:	2080      	movs	r0, #128	; 0x80
 8005124:	e7ec      	b.n	8005100 <osSemaphoreWait+0x20>
 8005126:	bf00      	nop
 8005128:	e000ed04 	.word	0xe000ed04

0800512c <osSemaphoreRelease>:
 800512c:	f7ff bf94 	b.w	8005058 <osMutexRelease>

08005130 <osSemaphoreDelete>:
 8005130:	f7ff bfb6 	b.w	80050a0 <osMutexDelete>

08005134 <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005134:	2200      	movs	r2, #0
 8005136:	e9d0 0100 	ldrd	r0, r1, [r0]
 800513a:	f7fe be85 	b.w	8003e48 <xQueueGenericCreate>
	...

08005140 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005140:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 8005142:	2400      	movs	r4, #0
{
 8005144:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005146:	9403      	str	r4, [sp, #12]
 8005148:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 800514c:	b1a3      	cbz	r3, 8005178 <osMessagePut+0x38>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800514e:	4623      	mov	r3, r4
 8005150:	aa03      	add	r2, sp, #12
 8005152:	a901      	add	r1, sp, #4
 8005154:	f7fe ff95 	bl	8004082 <xQueueGenericSendFromISR>
 8005158:	2801      	cmp	r0, #1
 800515a:	d115      	bne.n	8005188 <osMessagePut+0x48>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800515c:	9b03      	ldr	r3, [sp, #12]
 800515e:	b913      	cbnz	r3, 8005166 <osMessagePut+0x26>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8005160:	2000      	movs	r0, #0
}
 8005162:	b004      	add	sp, #16
 8005164:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8005166:	4b09      	ldr	r3, [pc, #36]	; (800518c <osMessagePut+0x4c>)
 8005168:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800516c:	601a      	str	r2, [r3, #0]
 800516e:	f3bf 8f4f 	dsb	sy
 8005172:	f3bf 8f6f 	isb	sy
 8005176:	e7f3      	b.n	8005160 <osMessagePut+0x20>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005178:	2a01      	cmp	r2, #1
 800517a:	a901      	add	r1, sp, #4
 800517c:	bf38      	it	cc
 800517e:	2201      	movcc	r2, #1
 8005180:	f7fe feaa 	bl	8003ed8 <xQueueGenericSend>
 8005184:	2801      	cmp	r0, #1
 8005186:	d0eb      	beq.n	8005160 <osMessagePut+0x20>
      return osErrorOS;
 8005188:	20ff      	movs	r0, #255	; 0xff
 800518a:	e7ea      	b.n	8005162 <osMessagePut+0x22>
 800518c:	e000ed04 	.word	0xe000ed04

08005190 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005190:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8005192:	2300      	movs	r3, #0
{
 8005194:	4604      	mov	r4, r0
 8005196:	4616      	mov	r6, r2
 8005198:	4608      	mov	r0, r1
 800519a:	ad01      	add	r5, sp, #4
  event.def.message_id = queue_id;
 800519c:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 800519e:	9302      	str	r3, [sp, #8]
  
  if (queue_id == NULL) {
 80051a0:	b911      	cbnz	r1, 80051a8 <osMessageGet+0x18>
    event.status = osErrorParameter;
 80051a2:	2380      	movs	r3, #128	; 0x80
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
 80051a4:	9301      	str	r3, [sp, #4]
 80051a6:	e016      	b.n	80051d6 <osMessageGet+0x46>
  taskWoken = pdFALSE;
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 80051ae:	b1cb      	cbz	r3, 80051e4 <osMessageGet+0x54>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80051b0:	466a      	mov	r2, sp
 80051b2:	a902      	add	r1, sp, #8
 80051b4:	f7ff f99c 	bl	80044f0 <xQueueReceiveFromISR>
      event.status = osOK;
 80051b8:	2801      	cmp	r0, #1
 80051ba:	bf0c      	ite	eq
 80051bc:	2310      	moveq	r3, #16
 80051be:	2300      	movne	r3, #0
 80051c0:	9301      	str	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 80051c2:	9b00      	ldr	r3, [sp, #0]
 80051c4:	b13b      	cbz	r3, 80051d6 <osMessageGet+0x46>
 80051c6:	4b0d      	ldr	r3, [pc, #52]	; (80051fc <osMessageGet+0x6c>)
 80051c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	f3bf 8f6f 	isb	sy
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
    }
  }
  
  return event;
 80051d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80051da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80051de:	4620      	mov	r0, r4
 80051e0:	b004      	add	sp, #16
 80051e2:	bd70      	pop	{r4, r5, r6, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80051e4:	a902      	add	r1, sp, #8
 80051e6:	f7ff f811 	bl	800420c <xQueueReceive>
 80051ea:	2801      	cmp	r0, #1
 80051ec:	d101      	bne.n	80051f2 <osMessageGet+0x62>
      event.status = osEventMessage;
 80051ee:	2310      	movs	r3, #16
 80051f0:	e7d8      	b.n	80051a4 <osMessageGet+0x14>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80051f2:	2e00      	cmp	r6, #0
 80051f4:	bf18      	it	ne
 80051f6:	2640      	movne	r6, #64	; 0x40
 80051f8:	9601      	str	r6, [sp, #4]
 80051fa:	e7ec      	b.n	80051d6 <osMessageGet+0x46>
 80051fc:	e000ed04 	.word	0xe000ed04

08005200 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8005200:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8005202:	f7ff fdbd 	bl	8004d80 <xTaskGetSchedulerState>
 8005206:	2801      	cmp	r0, #1
 8005208:	d003      	beq.n	8005212 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800520a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800520e:	f000 b9c1 	b.w	8005594 <xPortSysTickHandler>
}
 8005212:	bd08      	pop	{r3, pc}

08005214 <osMessageWaiting>:
 8005214:	f3ef 8305 	mrs	r3, IPSR
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
  if (inHandlerMode()) {
 8005218:	b10b      	cbz	r3, 800521e <osMessageWaiting+0xa>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800521a:	f7ff b9d5 	b.w	80045c8 <uxQueueMessagesWaitingFromISR>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800521e:	f7ff b9bc 	b.w	800459a <uxQueueMessagesWaiting>

08005222 <osMessageDelete>:
 8005222:	f7ff bf3d 	b.w	80050a0 <osMutexDelete>
	...

08005228 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005228:	4b0f      	ldr	r3, [pc, #60]	; (8005268 <prvInsertBlockIntoFreeList+0x40>)
{
 800522a:	b530      	push	{r4, r5, lr}
 800522c:	461d      	mov	r5, r3
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800522e:	461a      	mov	r2, r3
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4283      	cmp	r3, r0
 8005234:	d3fb      	bcc.n	800522e <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005236:	6854      	ldr	r4, [r2, #4]
 8005238:	1911      	adds	r1, r2, r4
 800523a:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800523c:	bf01      	itttt	eq
 800523e:	6841      	ldreq	r1, [r0, #4]
 8005240:	4610      	moveq	r0, r2
 8005242:	1909      	addeq	r1, r1, r4
 8005244:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005246:	6844      	ldr	r4, [r0, #4]
 8005248:	1901      	adds	r1, r0, r4
 800524a:	428b      	cmp	r3, r1
 800524c:	d106      	bne.n	800525c <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800524e:	68a9      	ldr	r1, [r5, #8]
 8005250:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005252:	bf1f      	itttt	ne
 8005254:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005256:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005258:	1909      	addne	r1, r1, r4
 800525a:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800525c:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800525e:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005260:	bf18      	it	ne
 8005262:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005264:	bd30      	pop	{r4, r5, pc}
 8005266:	bf00      	nop
 8005268:	200003c0 	.word	0x200003c0

0800526c <pvPortMalloc>:
{
 800526c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 8005270:	4d3b      	ldr	r5, [pc, #236]	; (8005360 <pvPortMalloc+0xf4>)
{
 8005272:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8005274:	f7ff fbac 	bl	80049d0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8005278:	68ab      	ldr	r3, [r5, #8]
 800527a:	b9bb      	cbnz	r3, 80052ac <pvPortMalloc+0x40>
	uxAddress = ( size_t ) ucHeap;
 800527c:	4a39      	ldr	r2, [pc, #228]	; (8005364 <pvPortMalloc+0xf8>)
	xStart.xBlockSize = ( size_t ) 0;
 800527e:	2100      	movs	r1, #0
	uxAddress -= xHeapStructSize;
 8005280:	4b39      	ldr	r3, [pc, #228]	; (8005368 <pvPortMalloc+0xfc>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005282:	0756      	lsls	r6, r2, #29
	xStart.xBlockSize = ( size_t ) 0;
 8005284:	6069      	str	r1, [r5, #4]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005286:	f023 0307 	bic.w	r3, r3, #7
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800528a:	bf18      	it	ne
 800528c:	3207      	addne	r2, #7
	pxEnd = ( void * ) uxAddress;
 800528e:	60ab      	str	r3, [r5, #8]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005290:	bf18      	it	ne
 8005292:	f022 0207 	bicne.w	r2, r2, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005296:	602a      	str	r2, [r5, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8005298:	e9c3 1100 	strd	r1, r1, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800529c:	1a99      	subs	r1, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800529e:	e9c2 3100 	strd	r3, r1, [r2]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80052a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052a6:	e9c5 1103 	strd	r1, r1, [r5, #12]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80052aa:	616b      	str	r3, [r5, #20]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80052ac:	f8d5 8014 	ldr.w	r8, [r5, #20]
 80052b0:	ea18 0f04 	tst.w	r8, r4
 80052b4:	d14f      	bne.n	8005356 <pvPortMalloc+0xea>
			if( xWantedSize > 0 )
 80052b6:	2c00      	cmp	r4, #0
 80052b8:	d03e      	beq.n	8005338 <pvPortMalloc+0xcc>
				xWantedSize += xHeapStructSize;
 80052ba:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80052be:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80052c0:	bf1c      	itt	ne
 80052c2:	f023 0307 	bicne.w	r3, r3, #7
 80052c6:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d044      	beq.n	8005356 <pvPortMalloc+0xea>
 80052cc:	692f      	ldr	r7, [r5, #16]
 80052ce:	429f      	cmp	r7, r3
 80052d0:	d341      	bcc.n	8005356 <pvPortMalloc+0xea>
				pxBlock = xStart.pxNextFreeBlock;
 80052d2:	682e      	ldr	r6, [r5, #0]
				pxPreviousBlock = &xStart;
 80052d4:	4822      	ldr	r0, [pc, #136]	; (8005360 <pvPortMalloc+0xf4>)
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052d6:	6872      	ldr	r2, [r6, #4]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d201      	bcs.n	80052e0 <pvPortMalloc+0x74>
 80052dc:	6831      	ldr	r1, [r6, #0]
 80052de:	b9b1      	cbnz	r1, 800530e <pvPortMalloc+0xa2>
				if( pxBlock != pxEnd )
 80052e0:	68a9      	ldr	r1, [r5, #8]
 80052e2:	42b1      	cmp	r1, r6
 80052e4:	d037      	beq.n	8005356 <pvPortMalloc+0xea>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80052e6:	1ad2      	subs	r2, r2, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80052e8:	6831      	ldr	r1, [r6, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80052ea:	6804      	ldr	r4, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80052ec:	2a10      	cmp	r2, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80052ee:	6001      	str	r1, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80052f0:	d914      	bls.n	800531c <pvPortMalloc+0xb0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80052f2:	18f0      	adds	r0, r6, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052f4:	0741      	lsls	r1, r0, #29
 80052f6:	d00d      	beq.n	8005314 <pvPortMalloc+0xa8>
 80052f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fc:	b672      	cpsid	i
 80052fe:	f383 8811 	msr	BASEPRI, r3
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	b662      	cpsie	i
 800530c:	e7fe      	b.n	800530c <pvPortMalloc+0xa0>
 800530e:	4630      	mov	r0, r6
 8005310:	460e      	mov	r6, r1
 8005312:	e7e0      	b.n	80052d6 <pvPortMalloc+0x6a>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005314:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005316:	6073      	str	r3, [r6, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005318:	f7ff ff86 	bl	8005228 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800531c:	6873      	ldr	r3, [r6, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800531e:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005320:	68e9      	ldr	r1, [r5, #12]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005322:	1aff      	subs	r7, r7, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005324:	ea48 0303 	orr.w	r3, r8, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005328:	428f      	cmp	r7, r1
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800532a:	6073      	str	r3, [r6, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800532c:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005330:	612f      	str	r7, [r5, #16]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005332:	bf38      	it	cc
 8005334:	60ef      	strcc	r7, [r5, #12]
					pxBlock->pxNextFreeBlock = NULL;
 8005336:	6033      	str	r3, [r6, #0]
	( void ) xTaskResumeAll();
 8005338:	f7ff fbd8 	bl	8004aec <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800533c:	0763      	lsls	r3, r4, #29
 800533e:	d00c      	beq.n	800535a <pvPortMalloc+0xee>
 8005340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005344:	b672      	cpsid	i
 8005346:	f383 8811 	msr	BASEPRI, r3
 800534a:	f3bf 8f6f 	isb	sy
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	b662      	cpsie	i
 8005354:	e7fe      	b.n	8005354 <pvPortMalloc+0xe8>
void *pvReturn = NULL;
 8005356:	2400      	movs	r4, #0
 8005358:	e7ee      	b.n	8005338 <pvPortMalloc+0xcc>
}
 800535a:	4620      	mov	r0, r4
 800535c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005360:	200003c0 	.word	0x200003c0
 8005364:	200003d8 	.word	0x200003d8
 8005368:	200067d0 	.word	0x200067d0

0800536c <vPortFree>:
{
 800536c:	b538      	push	{r3, r4, r5, lr}
	if( pv != NULL )
 800536e:	4604      	mov	r4, r0
 8005370:	b388      	cbz	r0, 80053d6 <vPortFree+0x6a>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005372:	4d19      	ldr	r5, [pc, #100]	; (80053d8 <vPortFree+0x6c>)
 8005374:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005378:	696a      	ldr	r2, [r5, #20]
 800537a:	4213      	tst	r3, r2
 800537c:	d10a      	bne.n	8005394 <vPortFree+0x28>
 800537e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005382:	b672      	cpsid	i
 8005384:	f383 8811 	msr	BASEPRI, r3
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	b662      	cpsie	i
 8005392:	e7fe      	b.n	8005392 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005394:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8005398:	b151      	cbz	r1, 80053b0 <vPortFree+0x44>
 800539a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539e:	b672      	cpsid	i
 80053a0:	f383 8811 	msr	BASEPRI, r3
 80053a4:	f3bf 8f6f 	isb	sy
 80053a8:	f3bf 8f4f 	dsb	sy
 80053ac:	b662      	cpsie	i
 80053ae:	e7fe      	b.n	80053ae <vPortFree+0x42>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80053b0:	ea23 0302 	bic.w	r3, r3, r2
 80053b4:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80053b8:	f7ff fb0a 	bl	80049d0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80053bc:	692a      	ldr	r2, [r5, #16]
 80053be:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80053c2:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80053c6:	4413      	add	r3, r2
 80053c8:	612b      	str	r3, [r5, #16]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80053ca:	f7ff ff2d 	bl	8005228 <prvInsertBlockIntoFreeList>
}
 80053ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				( void ) xTaskResumeAll();
 80053d2:	f7ff bb8b 	b.w	8004aec <xTaskResumeAll>
}
 80053d6:	bd38      	pop	{r3, r4, r5, pc}
 80053d8:	200003c0 	.word	0x200003c0

080053dc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80053dc:	4808      	ldr	r0, [pc, #32]	; (8005400 <prvPortStartFirstTask+0x24>)
 80053de:	6800      	ldr	r0, [r0, #0]
 80053e0:	6800      	ldr	r0, [r0, #0]
 80053e2:	f380 8808 	msr	MSP, r0
 80053e6:	f04f 0000 	mov.w	r0, #0
 80053ea:	f380 8814 	msr	CONTROL, r0
 80053ee:	b662      	cpsie	i
 80053f0:	b661      	cpsie	f
 80053f2:	f3bf 8f4f 	dsb	sy
 80053f6:	f3bf 8f6f 	isb	sy
 80053fa:	df00      	svc	0
 80053fc:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80053fe:	0000      	.short	0x0000
 8005400:	e000ed08 	.word	0xe000ed08

08005404 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005404:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005414 <vPortEnableVFP+0x10>
 8005408:	6801      	ldr	r1, [r0, #0]
 800540a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800540e:	6001      	str	r1, [r0, #0]
 8005410:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005412:	0000      	.short	0x0000
 8005414:	e000ed88 	.word	0xe000ed88

08005418 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 8005418:	2300      	movs	r3, #0
{
 800541a:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800541c:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800541e:	4b0f      	ldr	r3, [pc, #60]	; (800545c <prvTaskExitError+0x44>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	3301      	adds	r3, #1
 8005424:	d00a      	beq.n	800543c <prvTaskExitError+0x24>
 8005426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542a:	b672      	cpsid	i
 800542c:	f383 8811 	msr	BASEPRI, r3
 8005430:	f3bf 8f6f 	isb	sy
 8005434:	f3bf 8f4f 	dsb	sy
 8005438:	b662      	cpsie	i
 800543a:	e7fe      	b.n	800543a <prvTaskExitError+0x22>
 800543c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005440:	b672      	cpsid	i
 8005442:	f383 8811 	msr	BASEPRI, r3
 8005446:	f3bf 8f6f 	isb	sy
 800544a:	f3bf 8f4f 	dsb	sy
 800544e:	b662      	cpsie	i
	while( ulDummy == 0 )
 8005450:	9b01      	ldr	r3, [sp, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d0fc      	beq.n	8005450 <prvTaskExitError+0x38>
}
 8005456:	b002      	add	sp, #8
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	20000038 	.word	0x20000038

08005460 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005460:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005464:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005468:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800546c:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800546e:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005470:	4b03      	ldr	r3, [pc, #12]	; (8005480 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005472:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005474:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005476:	f06f 0302 	mvn.w	r3, #2
 800547a:	6203      	str	r3, [r0, #32]
}
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	08005419 	.word	0x08005419
	...

08005490 <SVC_Handler>:
	__asm volatile (
 8005490:	4b07      	ldr	r3, [pc, #28]	; (80054b0 <pxCurrentTCBConst2>)
 8005492:	6819      	ldr	r1, [r3, #0]
 8005494:	6808      	ldr	r0, [r1, #0]
 8005496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800549a:	f380 8809 	msr	PSP, r0
 800549e:	f3bf 8f6f 	isb	sy
 80054a2:	f04f 0000 	mov.w	r0, #0
 80054a6:	f380 8811 	msr	BASEPRI, r0
 80054aa:	4770      	bx	lr
 80054ac:	f3af 8000 	nop.w

080054b0 <pxCurrentTCBConst2>:
 80054b0:	200002b4 	.word	0x200002b4

080054b4 <vPortEnterCritical>:
 80054b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b8:	b672      	cpsid	i
 80054ba:	f383 8811 	msr	BASEPRI, r3
 80054be:	f3bf 8f6f 	isb	sy
 80054c2:	f3bf 8f4f 	dsb	sy
 80054c6:	b662      	cpsie	i
	uxCriticalNesting++;
 80054c8:	4a0b      	ldr	r2, [pc, #44]	; (80054f8 <vPortEnterCritical+0x44>)
 80054ca:	6813      	ldr	r3, [r2, #0]
 80054cc:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80054ce:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80054d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80054d2:	d10f      	bne.n	80054f4 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80054d4:	4b09      	ldr	r3, [pc, #36]	; (80054fc <vPortEnterCritical+0x48>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80054dc:	d00a      	beq.n	80054f4 <vPortEnterCritical+0x40>
 80054de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e2:	b672      	cpsid	i
 80054e4:	f383 8811 	msr	BASEPRI, r3
 80054e8:	f3bf 8f6f 	isb	sy
 80054ec:	f3bf 8f4f 	dsb	sy
 80054f0:	b662      	cpsie	i
 80054f2:	e7fe      	b.n	80054f2 <vPortEnterCritical+0x3e>
}
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	20000038 	.word	0x20000038
 80054fc:	e000ed04 	.word	0xe000ed04

08005500 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8005500:	4a09      	ldr	r2, [pc, #36]	; (8005528 <vPortExitCritical+0x28>)
 8005502:	6813      	ldr	r3, [r2, #0]
 8005504:	b953      	cbnz	r3, 800551c <vPortExitCritical+0x1c>
 8005506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550a:	b672      	cpsid	i
 800550c:	f383 8811 	msr	BASEPRI, r3
 8005510:	f3bf 8f6f 	isb	sy
 8005514:	f3bf 8f4f 	dsb	sy
 8005518:	b662      	cpsie	i
 800551a:	e7fe      	b.n	800551a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800551c:	3b01      	subs	r3, #1
 800551e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005520:	b90b      	cbnz	r3, 8005526 <vPortExitCritical+0x26>
	__asm volatile
 8005522:	f383 8811 	msr	BASEPRI, r3
}
 8005526:	4770      	bx	lr
 8005528:	20000038 	.word	0x20000038
 800552c:	00000000 	.word	0x00000000

08005530 <PendSV_Handler>:
	__asm volatile
 8005530:	f3ef 8009 	mrs	r0, PSP
 8005534:	f3bf 8f6f 	isb	sy
 8005538:	4b15      	ldr	r3, [pc, #84]	; (8005590 <pxCurrentTCBConst>)
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	f01e 0f10 	tst.w	lr, #16
 8005540:	bf08      	it	eq
 8005542:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005546:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800554a:	6010      	str	r0, [r2, #0]
 800554c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005550:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005554:	b672      	cpsid	i
 8005556:	f380 8811 	msr	BASEPRI, r0
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	f3bf 8f6f 	isb	sy
 8005562:	b662      	cpsie	i
 8005564:	f7ff fb32 	bl	8004bcc <vTaskSwitchContext>
 8005568:	f04f 0000 	mov.w	r0, #0
 800556c:	f380 8811 	msr	BASEPRI, r0
 8005570:	bc09      	pop	{r0, r3}
 8005572:	6819      	ldr	r1, [r3, #0]
 8005574:	6808      	ldr	r0, [r1, #0]
 8005576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800557a:	f01e 0f10 	tst.w	lr, #16
 800557e:	bf08      	it	eq
 8005580:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005584:	f380 8809 	msr	PSP, r0
 8005588:	f3bf 8f6f 	isb	sy
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop

08005590 <pxCurrentTCBConst>:
 8005590:	200002b4 	.word	0x200002b4

08005594 <xPortSysTickHandler>:
{
 8005594:	b508      	push	{r3, lr}
	__asm volatile
 8005596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559a:	b672      	cpsid	i
 800559c:	f383 8811 	msr	BASEPRI, r3
 80055a0:	f3bf 8f6f 	isb	sy
 80055a4:	f3bf 8f4f 	dsb	sy
 80055a8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 80055aa:	f7ff fa29 	bl	8004a00 <xTaskIncrementTick>
 80055ae:	b118      	cbz	r0, 80055b8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80055b0:	4b03      	ldr	r3, [pc, #12]	; (80055c0 <xPortSysTickHandler+0x2c>)
 80055b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055b6:	601a      	str	r2, [r3, #0]
	__asm volatile
 80055b8:	2300      	movs	r3, #0
 80055ba:	f383 8811 	msr	BASEPRI, r3
}
 80055be:	bd08      	pop	{r3, pc}
 80055c0:	e000ed04 	.word	0xe000ed04

080055c4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80055c4:	2300      	movs	r3, #0
 80055c6:	4a08      	ldr	r2, [pc, #32]	; (80055e8 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80055c8:	4908      	ldr	r1, [pc, #32]	; (80055ec <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80055ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80055cc:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80055ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80055d2:	4b07      	ldr	r3, [pc, #28]	; (80055f0 <vPortSetupTimerInterrupt+0x2c>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80055da:	4906      	ldr	r1, [pc, #24]	; (80055f4 <vPortSetupTimerInterrupt+0x30>)
 80055dc:	3b01      	subs	r3, #1
 80055de:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80055e0:	2307      	movs	r3, #7
 80055e2:	6013      	str	r3, [r2, #0]
}
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	e000e010 	.word	0xe000e010
 80055ec:	e000e018 	.word	0xe000e018
 80055f0:	2000002c 	.word	0x2000002c
 80055f4:	e000e014 	.word	0xe000e014

080055f8 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80055f8:	4b2a      	ldr	r3, [pc, #168]	; (80056a4 <xPortStartScheduler+0xac>)
{
 80055fa:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80055fc:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80055fe:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005600:	b2d2      	uxtb	r2, r2
 8005602:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005604:	22ff      	movs	r2, #255	; 0xff
 8005606:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005608:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800560a:	4a27      	ldr	r2, [pc, #156]	; (80056a8 <xPortStartScheduler+0xb0>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800560c:	b2db      	uxtb	r3, r3
 800560e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005612:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005616:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800561a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800561c:	2307      	movs	r3, #7
 800561e:	6053      	str	r3, [r2, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005620:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8005624:	1e5c      	subs	r4, r3, #1
 8005626:	0600      	lsls	r0, r0, #24
 8005628:	d40e      	bmi.n	8005648 <xPortStartScheduler+0x50>
 800562a:	b111      	cbz	r1, 8005632 <xPortStartScheduler+0x3a>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800562c:	2b03      	cmp	r3, #3
 800562e:	6053      	str	r3, [r2, #4]
 8005630:	d013      	beq.n	800565a <xPortStartScheduler+0x62>
	__asm volatile
 8005632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005636:	b672      	cpsid	i
 8005638:	f383 8811 	msr	BASEPRI, r3
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	b662      	cpsie	i
 8005646:	e7fe      	b.n	8005646 <xPortStartScheduler+0x4e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005648:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800564c:	2101      	movs	r1, #1
 800564e:	005b      	lsls	r3, r3, #1
 8005650:	b2db      	uxtb	r3, r3
 8005652:	f88d 3003 	strb.w	r3, [sp, #3]
 8005656:	4623      	mov	r3, r4
 8005658:	e7e2      	b.n	8005620 <xPortStartScheduler+0x28>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800565a:	f44f 7340 	mov.w	r3, #768	; 0x300
	uxCriticalNesting = 0;
 800565e:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005660:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005662:	9b01      	ldr	r3, [sp, #4]
 8005664:	4a0f      	ldr	r2, [pc, #60]	; (80056a4 <xPortStartScheduler+0xac>)
 8005666:	b2db      	uxtb	r3, r3
 8005668:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800566a:	4b10      	ldr	r3, [pc, #64]	; (80056ac <xPortStartScheduler+0xb4>)
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8005672:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800567a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800567c:	f7ff ffa2 	bl	80055c4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8005680:	4b0b      	ldr	r3, [pc, #44]	; (80056b0 <xPortStartScheduler+0xb8>)
 8005682:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8005684:	f7ff febe 	bl	8005404 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005688:	4a0a      	ldr	r2, [pc, #40]	; (80056b4 <xPortStartScheduler+0xbc>)
 800568a:	6813      	ldr	r3, [r2, #0]
 800568c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005690:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8005692:	f7ff fea3 	bl	80053dc <prvPortStartFirstTask>
	vTaskSwitchContext();
 8005696:	f7ff fa99 	bl	8004bcc <vTaskSwitchContext>
	prvTaskExitError();
 800569a:	f7ff febd 	bl	8005418 <prvTaskExitError>
}
 800569e:	4620      	mov	r0, r4
 80056a0:	b002      	add	sp, #8
 80056a2:	bd10      	pop	{r4, pc}
 80056a4:	e000e400 	.word	0xe000e400
 80056a8:	200067d8 	.word	0x200067d8
 80056ac:	e000ed20 	.word	0xe000ed20
 80056b0:	20000038 	.word	0x20000038
 80056b4:	e000ef34 	.word	0xe000ef34

080056b8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80056b8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80056bc:	2b0f      	cmp	r3, #15
 80056be:	4a12      	ldr	r2, [pc, #72]	; (8005708 <vPortValidateInterruptPriority+0x50>)
 80056c0:	d90f      	bls.n	80056e2 <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80056c2:	4912      	ldr	r1, [pc, #72]	; (800570c <vPortValidateInterruptPriority+0x54>)
 80056c4:	5c5b      	ldrb	r3, [r3, r1]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80056c6:	7811      	ldrb	r1, [r2, #0]
 80056c8:	4299      	cmp	r1, r3
 80056ca:	d90a      	bls.n	80056e2 <vPortValidateInterruptPriority+0x2a>
 80056cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d0:	b672      	cpsid	i
 80056d2:	f383 8811 	msr	BASEPRI, r3
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	b662      	cpsie	i
 80056e0:	e7fe      	b.n	80056e0 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80056e2:	4b0b      	ldr	r3, [pc, #44]	; (8005710 <vPortValidateInterruptPriority+0x58>)
 80056e4:	6852      	ldr	r2, [r2, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d90a      	bls.n	8005706 <vPortValidateInterruptPriority+0x4e>
 80056f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f4:	b672      	cpsid	i
 80056f6:	f383 8811 	msr	BASEPRI, r3
 80056fa:	f3bf 8f6f 	isb	sy
 80056fe:	f3bf 8f4f 	dsb	sy
 8005702:	b662      	cpsie	i
 8005704:	e7fe      	b.n	8005704 <vPortValidateInterruptPriority+0x4c>
	}
 8005706:	4770      	bx	lr
 8005708:	200067d8 	.word	0x200067d8
 800570c:	e000e3f0 	.word	0xe000e3f0
 8005710:	e000ed0c 	.word	0xe000ed0c

08005714 <netconn_apimsg>:

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8005714:	680a      	ldr	r2, [r1, #0]
{
 8005716:	b510      	push	{r4, lr}
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8005718:	320c      	adds	r2, #12
{
 800571a:	460c      	mov	r4, r1
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800571c:	f001 fbce 	bl	8006ebc <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8005720:	b908      	cbnz	r0, 8005726 <netconn_apimsg+0x12>
    return apimsg->err;
 8005722:	f994 0004 	ldrsb.w	r0, [r4, #4]
  }
  return err;
}
 8005726:	bd10      	pop	{r4, pc}

08005728 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8005728:	b500      	push	{lr}
 800572a:	b089      	sub	sp, #36	; 0x24
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800572c:	b958      	cbnz	r0, 8005746 <netconn_close_shutdown+0x1e>
 800572e:	4b0b      	ldr	r3, [pc, #44]	; (800575c <netconn_close_shutdown+0x34>)
 8005730:	f240 4247 	movw	r2, #1095	; 0x447
 8005734:	490a      	ldr	r1, [pc, #40]	; (8005760 <netconn_close_shutdown+0x38>)
 8005736:	480b      	ldr	r0, [pc, #44]	; (8005764 <netconn_close_shutdown+0x3c>)
 8005738:	f008 fe28 	bl	800e38c <iprintf>
 800573c:	f06f 000f 	mvn.w	r0, #15
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);

  return err;
}
 8005740:	b009      	add	sp, #36	; 0x24
 8005742:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8005746:	2329      	movs	r3, #41	; 0x29
  API_MSG_VAR_REF(msg).conn = conn;
 8005748:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800574a:	f88d 1008 	strb.w	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800574e:	4669      	mov	r1, sp
 8005750:	4805      	ldr	r0, [pc, #20]	; (8005768 <netconn_close_shutdown+0x40>)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8005752:	f88d 3009 	strb.w	r3, [sp, #9]
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8005756:	f7ff ffdd 	bl	8005714 <netconn_apimsg>
  return err;
 800575a:	e7f1      	b.n	8005740 <netconn_close_shutdown+0x18>
 800575c:	08013516 	.word	0x08013516
 8005760:	0801357f 	.word	0x0801357f
 8005764:	0801342c 	.word	0x0801342c
 8005768:	08006c49 	.word	0x08006c49

0800576c <netconn_new_with_proto_and_callback>:
{
 800576c:	b570      	push	{r4, r5, r6, lr}
 800576e:	460d      	mov	r5, r1
 8005770:	b088      	sub	sp, #32
  conn = netconn_alloc(t, callback);
 8005772:	4611      	mov	r1, r2
 8005774:	f000 ff68 	bl	8006648 <netconn_alloc>
  if (conn != NULL) {
 8005778:	4604      	mov	r4, r0
 800577a:	2800      	cmp	r0, #0
 800577c:	d03e      	beq.n	80057fc <netconn_new_with_proto_and_callback+0x90>
    API_MSG_VAR_REF(msg).conn = conn;
 800577e:	9000      	str	r0, [sp, #0]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8005780:	4669      	mov	r1, sp
 8005782:	4820      	ldr	r0, [pc, #128]	; (8005804 <netconn_new_with_proto_and_callback+0x98>)
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8005784:	f88d 5008 	strb.w	r5, [sp, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8005788:	f7ff ffc4 	bl	8005714 <netconn_apimsg>
    if (err != ERR_OK) {
 800578c:	2800      	cmp	r0, #0
 800578e:	d035      	beq.n	80057fc <netconn_new_with_proto_and_callback+0x90>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8005790:	6863      	ldr	r3, [r4, #4]
 8005792:	b12b      	cbz	r3, 80057a0 <netconn_new_with_proto_and_callback+0x34>
 8005794:	4b1c      	ldr	r3, [pc, #112]	; (8005808 <netconn_new_with_proto_and_callback+0x9c>)
 8005796:	22a3      	movs	r2, #163	; 0xa3
 8005798:	491c      	ldr	r1, [pc, #112]	; (800580c <netconn_new_with_proto_and_callback+0xa0>)
 800579a:	481d      	ldr	r0, [pc, #116]	; (8005810 <netconn_new_with_proto_and_callback+0xa4>)
 800579c:	f008 fdf6 	bl	800e38c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80057a0:	f104 0510 	add.w	r5, r4, #16
 80057a4:	4628      	mov	r0, r5
 80057a6:	f008 fd16 	bl	800e1d6 <sys_mbox_valid>
 80057aa:	b928      	cbnz	r0, 80057b8 <netconn_new_with_proto_and_callback+0x4c>
 80057ac:	4b16      	ldr	r3, [pc, #88]	; (8005808 <netconn_new_with_proto_and_callback+0x9c>)
 80057ae:	22a4      	movs	r2, #164	; 0xa4
 80057b0:	4918      	ldr	r1, [pc, #96]	; (8005814 <netconn_new_with_proto_and_callback+0xa8>)
 80057b2:	4817      	ldr	r0, [pc, #92]	; (8005810 <netconn_new_with_proto_and_callback+0xa4>)
 80057b4:	f008 fdea 	bl	800e38c <iprintf>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80057b8:	f104 0014 	add.w	r0, r4, #20
 80057bc:	f008 fd0b 	bl	800e1d6 <sys_mbox_valid>
 80057c0:	b128      	cbz	r0, 80057ce <netconn_new_with_proto_and_callback+0x62>
 80057c2:	4b11      	ldr	r3, [pc, #68]	; (8005808 <netconn_new_with_proto_and_callback+0x9c>)
 80057c4:	22a6      	movs	r2, #166	; 0xa6
 80057c6:	4914      	ldr	r1, [pc, #80]	; (8005818 <netconn_new_with_proto_and_callback+0xac>)
 80057c8:	4811      	ldr	r0, [pc, #68]	; (8005810 <netconn_new_with_proto_and_callback+0xa4>)
 80057ca:	f008 fddf 	bl	800e38c <iprintf>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80057ce:	f104 060c 	add.w	r6, r4, #12
 80057d2:	4630      	mov	r0, r6
 80057d4:	f008 fd3f 	bl	800e256 <sys_sem_valid>
 80057d8:	b928      	cbnz	r0, 80057e6 <netconn_new_with_proto_and_callback+0x7a>
 80057da:	4b0b      	ldr	r3, [pc, #44]	; (8005808 <netconn_new_with_proto_and_callback+0x9c>)
 80057dc:	22a9      	movs	r2, #169	; 0xa9
 80057de:	490f      	ldr	r1, [pc, #60]	; (800581c <netconn_new_with_proto_and_callback+0xb0>)
 80057e0:	480b      	ldr	r0, [pc, #44]	; (8005810 <netconn_new_with_proto_and_callback+0xa4>)
 80057e2:	f008 fdd3 	bl	800e38c <iprintf>
      sys_sem_free(&conn->op_completed);
 80057e6:	4630      	mov	r0, r6
 80057e8:	f008 fd32 	bl	800e250 <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 80057ec:	4628      	mov	r0, r5
 80057ee:	f008 fcab 	bl	800e148 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80057f2:	4621      	mov	r1, r4
      return NULL;
 80057f4:	2400      	movs	r4, #0
      memp_free(MEMP_NETCONN, conn);
 80057f6:	2007      	movs	r0, #7
 80057f8:	f004 f9ec 	bl	8009bd4 <memp_free>
}
 80057fc:	4620      	mov	r0, r4
 80057fe:	b008      	add	sp, #32
 8005800:	bd70      	pop	{r4, r5, r6, pc}
 8005802:	bf00      	nop
 8005804:	080065e9 	.word	0x080065e9
 8005808:	08013516 	.word	0x08013516
 800580c:	0801359b 	.word	0x0801359b
 8005810:	0801342c 	.word	0x0801342c
 8005814:	080135bc 	.word	0x080135bc
 8005818:	080135d1 	.word	0x080135d1
 800581c:	080135f2 	.word	0x080135f2

08005820 <netconn_prepare_delete>:
{
 8005820:	b500      	push	{lr}
 8005822:	b089      	sub	sp, #36	; 0x24
  if (conn == NULL) {
 8005824:	b138      	cbz	r0, 8005836 <netconn_prepare_delete+0x16>
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8005826:	2329      	movs	r3, #41	; 0x29
  API_MSG_VAR_REF(msg).conn = conn;
 8005828:	9000      	str	r0, [sp, #0]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800582a:	4669      	mov	r1, sp
 800582c:	4803      	ldr	r0, [pc, #12]	; (800583c <netconn_prepare_delete+0x1c>)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800582e:	f88d 3009 	strb.w	r3, [sp, #9]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8005832:	f7ff ff6f 	bl	8005714 <netconn_apimsg>
}
 8005836:	b009      	add	sp, #36	; 0x24
 8005838:	f85d fb04 	ldr.w	pc, [sp], #4
 800583c:	080068d9 	.word	0x080068d9

08005840 <netconn_delete>:
{
 8005840:	b538      	push	{r3, r4, r5, lr}
  if (conn == NULL) {
 8005842:	4605      	mov	r5, r0
 8005844:	b140      	cbz	r0, 8005858 <netconn_delete+0x18>
    err = netconn_prepare_delete(conn);
 8005846:	f7ff ffeb 	bl	8005820 <netconn_prepare_delete>
  if (err == ERR_OK) {
 800584a:	4604      	mov	r4, r0
 800584c:	b910      	cbnz	r0, 8005854 <netconn_delete+0x14>
    netconn_free(conn);
 800584e:	4628      	mov	r0, r5
 8005850:	f000 ff3c 	bl	80066cc <netconn_free>
}
 8005854:	4620      	mov	r0, r4
 8005856:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
 8005858:	4604      	mov	r4, r0
 800585a:	e7fb      	b.n	8005854 <netconn_delete+0x14>

0800585c <netconn_getaddr>:
{
 800585c:	b500      	push	{lr}
 800585e:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 8005860:	b958      	cbnz	r0, 800587a <netconn_getaddr+0x1e>
 8005862:	4b11      	ldr	r3, [pc, #68]	; (80058a8 <netconn_getaddr+0x4c>)
 8005864:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005868:	4910      	ldr	r1, [pc, #64]	; (80058ac <netconn_getaddr+0x50>)
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 800586a:	4811      	ldr	r0, [pc, #68]	; (80058b0 <netconn_getaddr+0x54>)
 800586c:	f008 fd8e 	bl	800e38c <iprintf>
 8005870:	f06f 000f 	mvn.w	r0, #15
}
 8005874:	b009      	add	sp, #36	; 0x24
 8005876:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 800587a:	b921      	cbnz	r1, 8005886 <netconn_getaddr+0x2a>
 800587c:	4b0a      	ldr	r3, [pc, #40]	; (80058a8 <netconn_getaddr+0x4c>)
 800587e:	f240 1213 	movw	r2, #275	; 0x113
 8005882:	490c      	ldr	r1, [pc, #48]	; (80058b4 <netconn_getaddr+0x58>)
 8005884:	e7f1      	b.n	800586a <netconn_getaddr+0xe>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 8005886:	b922      	cbnz	r2, 8005892 <netconn_getaddr+0x36>
 8005888:	4b07      	ldr	r3, [pc, #28]	; (80058a8 <netconn_getaddr+0x4c>)
 800588a:	f44f 728a 	mov.w	r2, #276	; 0x114
 800588e:	490a      	ldr	r1, [pc, #40]	; (80058b8 <netconn_getaddr+0x5c>)
 8005890:	e7eb      	b.n	800586a <netconn_getaddr+0xe>
  API_MSG_VAR_REF(msg).conn = conn;
 8005892:	9000      	str	r0, [sp, #0]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 8005894:	4809      	ldr	r0, [pc, #36]	; (80058bc <netconn_getaddr+0x60>)
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 8005896:	f88d 3010 	strb.w	r3, [sp, #16]
  msg.msg.ad.port = port;
 800589a:	e9cd 1202 	strd	r1, r2, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 800589e:	4669      	mov	r1, sp
 80058a0:	f7ff ff38 	bl	8005714 <netconn_apimsg>
  return err;
 80058a4:	e7e6      	b.n	8005874 <netconn_getaddr+0x18>
 80058a6:	bf00      	nop
 80058a8:	08013516 	.word	0x08013516
 80058ac:	0801360b 	.word	0x0801360b
 80058b0:	0801342c 	.word	0x0801342c
 80058b4:	08013629 	.word	0x08013629
 80058b8:	08013647 	.word	0x08013647
 80058bc:	08006bd5 	.word	0x08006bd5

080058c0 <netconn_bind>:
{
 80058c0:	b500      	push	{lr}
 80058c2:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80058c4:	b958      	cbnz	r0, 80058de <netconn_bind+0x1e>
 80058c6:	4b0c      	ldr	r3, [pc, #48]	; (80058f8 <netconn_bind+0x38>)
 80058c8:	f44f 729c 	mov.w	r2, #312	; 0x138
 80058cc:	490b      	ldr	r1, [pc, #44]	; (80058fc <netconn_bind+0x3c>)
 80058ce:	480c      	ldr	r0, [pc, #48]	; (8005900 <netconn_bind+0x40>)
 80058d0:	f008 fd5c 	bl	800e38c <iprintf>
 80058d4:	f06f 000f 	mvn.w	r0, #15
}
 80058d8:	b009      	add	sp, #36	; 0x24
 80058da:	f85d fb04 	ldr.w	pc, [sp], #4
    addr = IP4_ADDR_ANY;
 80058de:	4b09      	ldr	r3, [pc, #36]	; (8005904 <netconn_bind+0x44>)
  API_MSG_VAR_REF(msg).conn = conn;
 80058e0:	9000      	str	r0, [sp, #0]
    addr = IP4_ADDR_ANY;
 80058e2:	2900      	cmp	r1, #0
 80058e4:	bf08      	it	eq
 80058e6:	4619      	moveq	r1, r3
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80058e8:	4807      	ldr	r0, [pc, #28]	; (8005908 <netconn_bind+0x48>)
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80058ea:	f8ad 200c 	strh.w	r2, [sp, #12]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80058ee:	9102      	str	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80058f0:	4669      	mov	r1, sp
 80058f2:	f7ff ff0f 	bl	8005714 <netconn_apimsg>
  return err;
 80058f6:	e7ef      	b.n	80058d8 <netconn_bind+0x18>
 80058f8:	08013516 	.word	0x08013516
 80058fc:	08013665 	.word	0x08013665
 8005900:	0801342c 	.word	0x0801342c
 8005904:	08013240 	.word	0x08013240
 8005908:	080069e5 	.word	0x080069e5

0800590c <netconn_listen_with_backlog>:
{
 800590c:	b500      	push	{lr}
 800590e:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8005910:	b958      	cbnz	r0, 800592a <netconn_listen_with_backlog+0x1e>
 8005912:	4b09      	ldr	r3, [pc, #36]	; (8005938 <netconn_listen_with_backlog+0x2c>)
 8005914:	f240 12bb 	movw	r2, #443	; 0x1bb
 8005918:	4908      	ldr	r1, [pc, #32]	; (800593c <netconn_listen_with_backlog+0x30>)
 800591a:	4809      	ldr	r0, [pc, #36]	; (8005940 <netconn_listen_with_backlog+0x34>)
 800591c:	f008 fd36 	bl	800e38c <iprintf>
 8005920:	f06f 000f 	mvn.w	r0, #15
}
 8005924:	b009      	add	sp, #36	; 0x24
 8005926:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).conn = conn;
 800592a:	9000      	str	r0, [sp, #0]
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800592c:	4669      	mov	r1, sp
 800592e:	4805      	ldr	r0, [pc, #20]	; (8005944 <netconn_listen_with_backlog+0x38>)
 8005930:	f7ff fef0 	bl	8005714 <netconn_apimsg>
  return err;
 8005934:	e7f6      	b.n	8005924 <netconn_listen_with_backlog+0x18>
 8005936:	bf00      	nop
 8005938:	08013516 	.word	0x08013516
 800593c:	080136dd 	.word	0x080136dd
 8005940:	0801342c 	.word	0x0801342c
 8005944:	08006a19 	.word	0x08006a19

08005948 <netconn_write_vectors_partly>:
{
 8005948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800594a:	b089      	sub	sp, #36	; 0x24
 800594c:	469e      	mov	lr, r3
 800594e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8005950:	b958      	cbnz	r0, 800596a <netconn_write_vectors_partly+0x22>
 8005952:	f06f 040f 	mvn.w	r4, #15
 8005956:	4b2c      	ldr	r3, [pc, #176]	; (8005a08 <netconn_write_vectors_partly+0xc0>)
 8005958:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800595c:	492b      	ldr	r1, [pc, #172]	; (8005a0c <netconn_write_vectors_partly+0xc4>)
 800595e:	482c      	ldr	r0, [pc, #176]	; (8005a10 <netconn_write_vectors_partly+0xc8>)
 8005960:	f008 fd14 	bl	800e38c <iprintf>
}
 8005964:	4620      	mov	r0, r4
 8005966:	b009      	add	sp, #36	; 0x24
 8005968:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800596a:	7804      	ldrb	r4, [r0, #0]
 800596c:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 8005970:	2c10      	cmp	r4, #16
 8005972:	d009      	beq.n	8005988 <netconn_write_vectors_partly+0x40>
 8005974:	4b24      	ldr	r3, [pc, #144]	; (8005a08 <netconn_write_vectors_partly+0xc0>)
 8005976:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800597a:	4926      	ldr	r1, [pc, #152]	; (8005a14 <netconn_write_vectors_partly+0xcc>)
 800597c:	4824      	ldr	r0, [pc, #144]	; (8005a10 <netconn_write_vectors_partly+0xc8>)
 800597e:	f008 fd05 	bl	800e38c <iprintf>
    return ERR_VAL;
 8005982:	f06f 0405 	mvn.w	r4, #5
 8005986:	e7ed      	b.n	8005964 <netconn_write_vectors_partly+0x1c>
  if (dontblock && !bytes_written) {
 8005988:	7e05      	ldrb	r5, [r0, #24]
 800598a:	f003 0404 	and.w	r4, r3, #4
 800598e:	f005 0502 	and.w	r5, r5, #2
 8005992:	4325      	orrs	r5, r4
 8005994:	d002      	beq.n	800599c <netconn_write_vectors_partly+0x54>
 8005996:	2f00      	cmp	r7, #0
 8005998:	d0f3      	beq.n	8005982 <netconn_write_vectors_partly+0x3a>
 800599a:	2501      	movs	r5, #1
 800599c:	2400      	movs	r4, #0
    size += vectors[i].len;
 800599e:	f101 0c04 	add.w	ip, r1, #4
 80059a2:	4626      	mov	r6, r4
 80059a4:	e004      	b.n	80059b0 <netconn_write_vectors_partly+0x68>
    if (size < vectors[i].len) {
 80059a6:	f85c 3034 	ldr.w	r3, [ip, r4, lsl #3]
 80059aa:	199e      	adds	r6, r3, r6
 80059ac:	d2e9      	bcs.n	8005982 <netconn_write_vectors_partly+0x3a>
  for (i = 0; i < vectorcnt; i++) {
 80059ae:	3401      	adds	r4, #1
 80059b0:	42a2      	cmp	r2, r4
 80059b2:	dcf8      	bgt.n	80059a6 <netconn_write_vectors_partly+0x5e>
  if (size == 0) {
 80059b4:	2e00      	cmp	r6, #0
 80059b6:	d101      	bne.n	80059bc <netconn_write_vectors_partly+0x74>
    return ERR_OK;
 80059b8:	2400      	movs	r4, #0
 80059ba:	e7d3      	b.n	8005964 <netconn_write_vectors_partly+0x1c>
  } else if (size > SSIZE_MAX) {
 80059bc:	da03      	bge.n	80059c6 <netconn_write_vectors_partly+0x7e>
    if (!bytes_written) {
 80059be:	2f00      	cmp	r7, #0
 80059c0:	d0df      	beq.n	8005982 <netconn_write_vectors_partly+0x3a>
    size = (size_t)limited;
 80059c2:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 80059c6:	f8ad 200c 	strh.w	r2, [sp, #12]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 80059ca:	2200      	movs	r2, #0
  API_MSG_VAR_REF(msg).conn = conn;
 80059cc:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 80059ce:	9102      	str	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80059d0:	4669      	mov	r1, sp
 80059d2:	4811      	ldr	r0, [pc, #68]	; (8005a18 <netconn_write_vectors_partly+0xd0>)
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 80059d4:	9204      	str	r2, [sp, #16]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 80059d6:	f88d e01c 	strb.w	lr, [sp, #28]
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 80059da:	e9cd 6205 	strd	r6, r2, [sp, #20]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80059de:	f7ff fe99 	bl	8005714 <netconn_apimsg>
  if (err == ERR_OK) {
 80059e2:	4604      	mov	r4, r0
 80059e4:	2800      	cmp	r0, #0
 80059e6:	d1bd      	bne.n	8005964 <netconn_write_vectors_partly+0x1c>
    if (bytes_written != NULL) {
 80059e8:	b10f      	cbz	r7, 80059ee <netconn_write_vectors_partly+0xa6>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 80059ea:	9b06      	ldr	r3, [sp, #24]
 80059ec:	603b      	str	r3, [r7, #0]
    if (!dontblock) {
 80059ee:	2d00      	cmp	r5, #0
 80059f0:	d1e2      	bne.n	80059b8 <netconn_write_vectors_partly+0x70>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 80059f2:	9b06      	ldr	r3, [sp, #24]
 80059f4:	42b3      	cmp	r3, r6
 80059f6:	d0df      	beq.n	80059b8 <netconn_write_vectors_partly+0x70>
 80059f8:	4b03      	ldr	r3, [pc, #12]	; (8005a08 <netconn_write_vectors_partly+0xc0>)
 80059fa:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80059fe:	4907      	ldr	r1, [pc, #28]	; (8005a1c <netconn_write_vectors_partly+0xd4>)
 8005a00:	4803      	ldr	r0, [pc, #12]	; (8005a10 <netconn_write_vectors_partly+0xc8>)
 8005a02:	f008 fcc3 	bl	800e38c <iprintf>
 8005a06:	e7ad      	b.n	8005964 <netconn_write_vectors_partly+0x1c>
 8005a08:	08013516 	.word	0x08013516
 8005a0c:	08013739 	.word	0x08013739
 8005a10:	0801342c 	.word	0x0801342c
 8005a14:	08013755 	.word	0x08013755
 8005a18:	08006b09 	.word	0x08006b09
 8005a1c:	08013777 	.word	0x08013777

08005a20 <netconn_write_partly>:
{
 8005a20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  vector.len = size;
 8005a22:	e9cd 1202 	strd	r1, r2, [sp, #8]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8005a26:	9a06      	ldr	r2, [sp, #24]
 8005a28:	a902      	add	r1, sp, #8
 8005a2a:	9200      	str	r2, [sp, #0]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f7ff ff8b 	bl	8005948 <netconn_write_vectors_partly>
}
 8005a32:	b005      	add	sp, #20
 8005a34:	f85d fb04 	ldr.w	pc, [sp], #4

08005a38 <netconn_close>:
 */
err_t
netconn_close(struct netconn *conn)
{
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8005a38:	2103      	movs	r1, #3
 8005a3a:	f7ff be75 	b.w	8005728 <netconn_close_shutdown>

08005a3e <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8005a3e:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8005a40:	4604      	mov	r4, r0
 8005a42:	b148      	cbz	r0, 8005a58 <netconn_err+0x1a>
    return ERR_OK;
  }
  SYS_ARCH_PROTECT(lev);
 8005a44:	f008 fc42 	bl	800e2cc <sys_arch_protect>
  err = conn->pending_err;
  conn->pending_err = ERR_OK;
 8005a48:	2300      	movs	r3, #0
  err = conn->pending_err;
 8005a4a:	f994 5008 	ldrsb.w	r5, [r4, #8]
  conn->pending_err = ERR_OK;
 8005a4e:	7223      	strb	r3, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 8005a50:	f008 fc48 	bl	800e2e4 <sys_arch_unprotect>
  return err;
}
 8005a54:	4628      	mov	r0, r5
 8005a56:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
 8005a58:	4605      	mov	r5, r0
 8005a5a:	e7fb      	b.n	8005a54 <netconn_err+0x16>

08005a5c <netconn_accept>:
{
 8005a5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a5e:	4605      	mov	r5, r0
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8005a60:	460e      	mov	r6, r1
 8005a62:	b959      	cbnz	r1, 8005a7c <netconn_accept+0x20>
 8005a64:	4b25      	ldr	r3, [pc, #148]	; (8005afc <netconn_accept+0xa0>)
 8005a66:	f240 12e1 	movw	r2, #481	; 0x1e1
 8005a6a:	4925      	ldr	r1, [pc, #148]	; (8005b00 <netconn_accept+0xa4>)
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8005a6c:	f06f 040f 	mvn.w	r4, #15
 8005a70:	4824      	ldr	r0, [pc, #144]	; (8005b04 <netconn_accept+0xa8>)
 8005a72:	f008 fc8b 	bl	800e38c <iprintf>
}
 8005a76:	4620      	mov	r0, r4
 8005a78:	b003      	add	sp, #12
 8005a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_conn = NULL;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8005a80:	b920      	cbnz	r0, 8005a8c <netconn_accept+0x30>
 8005a82:	4b1e      	ldr	r3, [pc, #120]	; (8005afc <netconn_accept+0xa0>)
 8005a84:	f240 12e3 	movw	r2, #483	; 0x1e3
 8005a88:	491f      	ldr	r1, [pc, #124]	; (8005b08 <netconn_accept+0xac>)
 8005a8a:	e7ef      	b.n	8005a6c <netconn_accept+0x10>
  err = netconn_err(conn);
 8005a8c:	f7ff ffd7 	bl	8005a3e <netconn_err>
 8005a90:	4604      	mov	r4, r0
 8005a92:	f88d 0003 	strb.w	r0, [sp, #3]
  if (err != ERR_OK) {
 8005a96:	2800      	cmp	r0, #0
 8005a98:	d1ed      	bne.n	8005a76 <netconn_accept+0x1a>
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8005a9a:	f105 0714 	add.w	r7, r5, #20
 8005a9e:	4638      	mov	r0, r7
 8005aa0:	f008 fb99 	bl	800e1d6 <sys_mbox_valid>
 8005aa4:	b910      	cbnz	r0, 8005aac <netconn_accept+0x50>
    return ERR_CLSD;
 8005aa6:	f06f 040e 	mvn.w	r4, #14
 8005aaa:	e7e4      	b.n	8005a76 <netconn_accept+0x1a>
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8005aac:	7e2b      	ldrb	r3, [r5, #24]
 8005aae:	07da      	lsls	r2, r3, #31
 8005ab0:	d4f9      	bmi.n	8005aa6 <netconn_accept+0x4a>
  if (netconn_is_nonblocking(conn)) {
 8005ab2:	079b      	lsls	r3, r3, #30
 8005ab4:	d508      	bpl.n	8005ac8 <netconn_accept+0x6c>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8005ab6:	a901      	add	r1, sp, #4
 8005ab8:	4638      	mov	r0, r7
 8005aba:	f008 fb7b 	bl	800e1b4 <sys_arch_mbox_tryfetch>
 8005abe:	3001      	adds	r0, #1
 8005ac0:	d107      	bne.n	8005ad2 <netconn_accept+0x76>
      return ERR_WOULDBLOCK;
 8005ac2:	f06f 0406 	mvn.w	r4, #6
 8005ac6:	e7d6      	b.n	8005a76 <netconn_accept+0x1a>
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8005ac8:	4622      	mov	r2, r4
 8005aca:	a901      	add	r1, sp, #4
 8005acc:	4638      	mov	r0, r7
 8005ace:	f008 fb4f 	bl	800e170 <sys_arch_mbox_fetch>
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8005ad2:	6a2b      	ldr	r3, [r5, #32]
 8005ad4:	b11b      	cbz	r3, 8005ade <netconn_accept+0x82>
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	2101      	movs	r1, #1
 8005ada:	4628      	mov	r0, r5
 8005adc:	4798      	blx	r3
  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8005ade:	f10d 0103 	add.w	r1, sp, #3
 8005ae2:	9801      	ldr	r0, [sp, #4]
 8005ae4:	f000 fd58 	bl	8006598 <lwip_netconn_is_err_msg>
 8005ae8:	b110      	cbz	r0, 8005af0 <netconn_accept+0x94>
    return err;
 8005aea:	f99d 4003 	ldrsb.w	r4, [sp, #3]
 8005aee:	e7c2      	b.n	8005a76 <netconn_accept+0x1a>
  if (accept_ptr == NULL) {
 8005af0:	9b01      	ldr	r3, [sp, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d0d7      	beq.n	8005aa6 <netconn_accept+0x4a>
  *new_conn = newconn;
 8005af6:	6033      	str	r3, [r6, #0]
  return ERR_OK;
 8005af8:	e7bd      	b.n	8005a76 <netconn_accept+0x1a>
 8005afa:	bf00      	nop
 8005afc:	08013516 	.word	0x08013516
 8005b00:	0801379a 	.word	0x0801379a
 8005b04:	0801342c 	.word	0x0801342c
 8005b08:	080137ba 	.word	0x080137ba

08005b0c <netconn_recv_data>:
  void *buf = NULL;
 8005b0c:	2300      	movs	r3, #0
{
 8005b0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b10:	4604      	mov	r4, r0
 8005b12:	4616      	mov	r6, r2
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8005b14:	460d      	mov	r5, r1
  void *buf = NULL;
 8005b16:	9301      	str	r3, [sp, #4]
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8005b18:	b951      	cbnz	r1, 8005b30 <netconn_recv_data+0x24>
 8005b1a:	4b32      	ldr	r3, [pc, #200]	; (8005be4 <netconn_recv_data+0xd8>)
 8005b1c:	f44f 7212 	mov.w	r2, #584	; 0x248
 8005b20:	4931      	ldr	r1, [pc, #196]	; (8005be8 <netconn_recv_data+0xdc>)
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8005b22:	4832      	ldr	r0, [pc, #200]	; (8005bec <netconn_recv_data+0xe0>)
 8005b24:	f008 fc32 	bl	800e38c <iprintf>
 8005b28:	f06f 000f 	mvn.w	r0, #15
}
 8005b2c:	b003      	add	sp, #12
 8005b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_buf = NULL;
 8005b30:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8005b32:	b920      	cbnz	r0, 8005b3e <netconn_recv_data+0x32>
 8005b34:	4b2b      	ldr	r3, [pc, #172]	; (8005be4 <netconn_recv_data+0xd8>)
 8005b36:	f240 224a 	movw	r2, #586	; 0x24a
 8005b3a:	492d      	ldr	r1, [pc, #180]	; (8005bf0 <netconn_recv_data+0xe4>)
 8005b3c:	e7f1      	b.n	8005b22 <netconn_recv_data+0x16>
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8005b3e:	f100 0710 	add.w	r7, r0, #16
 8005b42:	4638      	mov	r0, r7
 8005b44:	f008 fb47 	bl	800e1d6 <sys_mbox_valid>
 8005b48:	b938      	cbnz	r0, 8005b5a <netconn_recv_data+0x4e>
    err_t err = netconn_err(conn);
 8005b4a:	4620      	mov	r0, r4
 8005b4c:	f7ff ff77 	bl	8005a3e <netconn_err>
    if (err != ERR_OK) {
 8005b50:	2800      	cmp	r0, #0
 8005b52:	d1eb      	bne.n	8005b2c <netconn_recv_data+0x20>
    return ERR_CONN;
 8005b54:	f06f 000a 	mvn.w	r0, #10
 8005b58:	e7e8      	b.n	8005b2c <netconn_recv_data+0x20>
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8005b5a:	7e23      	ldrb	r3, [r4, #24]
 8005b5c:	f006 0604 	and.w	r6, r6, #4
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8005b60:	a901      	add	r1, sp, #4
 8005b62:	4638      	mov	r0, r7
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8005b64:	f003 0303 	and.w	r3, r3, #3
 8005b68:	4333      	orrs	r3, r6
 8005b6a:	d102      	bne.n	8005b72 <netconn_recv_data+0x66>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8005b6c:	f994 2008 	ldrsb.w	r2, [r4, #8]
 8005b70:	b172      	cbz	r2, 8005b90 <netconn_recv_data+0x84>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8005b72:	f008 fb1f 	bl	800e1b4 <sys_arch_mbox_tryfetch>
 8005b76:	3001      	adds	r0, #1
 8005b78:	d10c      	bne.n	8005b94 <netconn_recv_data+0x88>
      err = netconn_err(conn);
 8005b7a:	4620      	mov	r0, r4
 8005b7c:	f7ff ff5f 	bl	8005a3e <netconn_err>
      if (err != ERR_OK) {
 8005b80:	2800      	cmp	r0, #0
 8005b82:	d1d3      	bne.n	8005b2c <netconn_recv_data+0x20>
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8005b84:	7e23      	ldrb	r3, [r4, #24]
 8005b86:	07db      	lsls	r3, r3, #31
 8005b88:	d4e4      	bmi.n	8005b54 <netconn_recv_data+0x48>
      return ERR_WOULDBLOCK;
 8005b8a:	f06f 0006 	mvn.w	r0, #6
 8005b8e:	e7cd      	b.n	8005b2c <netconn_recv_data+0x20>
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8005b90:	f008 faee 	bl	800e170 <sys_arch_mbox_fetch>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8005b94:	7823      	ldrb	r3, [r4, #0]
 8005b96:	9801      	ldr	r0, [sp, #4]
 8005b98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b9c:	2b10      	cmp	r3, #16
 8005b9e:	d116      	bne.n	8005bce <netconn_recv_data+0xc2>
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8005ba0:	f10d 0103 	add.w	r1, sp, #3
 8005ba4:	f000 fcf8 	bl	8006598 <lwip_netconn_is_err_msg>
 8005ba8:	b130      	cbz	r0, 8005bb8 <netconn_recv_data+0xac>
      if (err == ERR_CLSD) {
 8005baa:	f99d 0003 	ldrsb.w	r0, [sp, #3]
        return ERR_OK;
 8005bae:	f110 0f0f 	cmn.w	r0, #15
 8005bb2:	bf08      	it	eq
 8005bb4:	2000      	moveq	r0, #0
 8005bb6:	e7b9      	b.n	8005b2c <netconn_recv_data+0x20>
    len = ((struct pbuf *)buf)->tot_len;
 8005bb8:	9b01      	ldr	r3, [sp, #4]
    len = netbuf_len((struct netbuf *)buf);
 8005bba:	891a      	ldrh	r2, [r3, #8]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8005bbc:	6a23      	ldr	r3, [r4, #32]
 8005bbe:	b113      	cbz	r3, 8005bc6 <netconn_recv_data+0xba>
 8005bc0:	2101      	movs	r1, #1
 8005bc2:	4620      	mov	r0, r4
 8005bc4:	4798      	blx	r3
  *new_buf = buf;
 8005bc6:	9b01      	ldr	r3, [sp, #4]
  return ERR_OK;
 8005bc8:	2000      	movs	r0, #0
  *new_buf = buf;
 8005bca:	602b      	str	r3, [r5, #0]
  return ERR_OK;
 8005bcc:	e7ae      	b.n	8005b2c <netconn_recv_data+0x20>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8005bce:	b930      	cbnz	r0, 8005bde <netconn_recv_data+0xd2>
 8005bd0:	4b04      	ldr	r3, [pc, #16]	; (8005be4 <netconn_recv_data+0xd8>)
 8005bd2:	f240 2291 	movw	r2, #657	; 0x291
 8005bd6:	4907      	ldr	r1, [pc, #28]	; (8005bf4 <netconn_recv_data+0xe8>)
 8005bd8:	4804      	ldr	r0, [pc, #16]	; (8005bec <netconn_recv_data+0xe0>)
 8005bda:	f008 fbd7 	bl	800e38c <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8005bde:	9b01      	ldr	r3, [sp, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	e7ea      	b.n	8005bba <netconn_recv_data+0xae>
 8005be4:	08013516 	.word	0x08013516
 8005be8:	080137d7 	.word	0x080137d7
 8005bec:	0801342c 	.word	0x0801342c
 8005bf0:	080137f5 	.word	0x080137f5
 8005bf4:	08013810 	.word	0x08013810

08005bf8 <netconn_recv_data_tcp>:
{
 8005bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bfa:	4604      	mov	r4, r0
 8005bfc:	b089      	sub	sp, #36	; 0x24
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8005bfe:	3010      	adds	r0, #16
{
 8005c00:	460f      	mov	r7, r1
 8005c02:	4616      	mov	r6, r2
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8005c04:	f008 fae7 	bl	800e1d6 <sys_mbox_valid>
 8005c08:	2800      	cmp	r0, #0
 8005c0a:	d04c      	beq.n	8005ca6 <netconn_recv_data_tcp+0xae>
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8005c0c:	f994 2018 	ldrsb.w	r2, [r4, #24]
 8005c10:	7e23      	ldrb	r3, [r4, #24]
 8005c12:	2a00      	cmp	r2, #0
 8005c14:	da13      	bge.n	8005c3e <netconn_recv_data_tcp+0x46>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8005c16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c1a:	7623      	strb	r3, [r4, #24]
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8005c1c:	6a23      	ldr	r3, [r4, #32]
 8005c1e:	b11b      	cbz	r3, 8005c28 <netconn_recv_data_tcp+0x30>
 8005c20:	2200      	movs	r2, #0
 8005c22:	2101      	movs	r1, #1
 8005c24:	4620      	mov	r0, r4
 8005c26:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8005c28:	6863      	ldr	r3, [r4, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d134      	bne.n	8005c98 <netconn_recv_data_tcp+0xa0>
        err = netconn_err(conn);
 8005c2e:	4620      	mov	r0, r4
 8005c30:	f7ff ff05 	bl	8005a3e <netconn_err>
        return ERR_RST;
 8005c34:	1e05      	subs	r5, r0, #0
 8005c36:	bf08      	it	eq
 8005c38:	f06f 050d 	mvneq.w	r5, #13
 8005c3c:	e020      	b.n	8005c80 <netconn_recv_data_tcp+0x88>
  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8005c3e:	4632      	mov	r2, r6
 8005c40:	4639      	mov	r1, r7
 8005c42:	4620      	mov	r0, r4
 8005c44:	f7ff ff62 	bl	8005b0c <netconn_recv_data>
  if (err != ERR_OK) {
 8005c48:	4605      	mov	r5, r0
 8005c4a:	b9c8      	cbnz	r0, 8005c80 <netconn_recv_data_tcp+0x88>
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8005c4c:	0732      	lsls	r2, r6, #28
  buf = *new_buf;
 8005c4e:	683f      	ldr	r7, [r7, #0]
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8005c50:	d40d      	bmi.n	8005c6e <netconn_recv_data_tcp+0x76>
    u16_t len = buf ? buf->tot_len : 1;
 8005c52:	b1c7      	cbz	r7, 8005c86 <netconn_recv_data_tcp+0x8e>
 8005c54:	893a      	ldrh	r2, [r7, #8]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8005c56:	7823      	ldrb	r3, [r4, #0]
 8005c58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c5c:	2b10      	cmp	r3, #16
 8005c5e:	d014      	beq.n	8005c8a <netconn_recv_data_tcp+0x92>
 8005c60:	4b12      	ldr	r3, [pc, #72]	; (8005cac <netconn_recv_data_tcp+0xb4>)
 8005c62:	f240 22a7 	movw	r2, #679	; 0x2a7
 8005c66:	4912      	ldr	r1, [pc, #72]	; (8005cb0 <netconn_recv_data_tcp+0xb8>)
 8005c68:	4812      	ldr	r0, [pc, #72]	; (8005cb4 <netconn_recv_data_tcp+0xbc>)
 8005c6a:	f008 fb8f 	bl	800e38c <iprintf>
  if (buf == NULL) {
 8005c6e:	b93f      	cbnz	r7, 8005c80 <netconn_recv_data_tcp+0x88>
    if (apiflags & NETCONN_NOFIN) {
 8005c70:	06f3      	lsls	r3, r6, #27
 8005c72:	d5d3      	bpl.n	8005c1c <netconn_recv_data_tcp+0x24>
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8005c74:	7e23      	ldrb	r3, [r4, #24]
      return ERR_WOULDBLOCK;
 8005c76:	f06f 0506 	mvn.w	r5, #6
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8005c7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c7e:	7623      	strb	r3, [r4, #24]
}
 8005c80:	4628      	mov	r0, r5
 8005c82:	b009      	add	sp, #36	; 0x24
 8005c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    u16_t len = buf ? buf->tot_len : 1;
 8005c86:	2201      	movs	r2, #1
 8005c88:	e7e5      	b.n	8005c56 <netconn_recv_data_tcp+0x5e>
  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8005c8a:	4669      	mov	r1, sp
 8005c8c:	480a      	ldr	r0, [pc, #40]	; (8005cb8 <netconn_recv_data_tcp+0xc0>)
  msg->conn = conn;
 8005c8e:	9400      	str	r4, [sp, #0]
  msg->msg.r.len = len;
 8005c90:	9202      	str	r2, [sp, #8]
  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8005c92:	f7ff fd3f 	bl	8005714 <netconn_apimsg>
 8005c96:	e7ea      	b.n	8005c6e <netconn_recv_data_tcp+0x76>
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8005c98:	2101      	movs	r1, #1
 8005c9a:	4620      	mov	r0, r4
      return ERR_CLSD;
 8005c9c:	f06f 050e 	mvn.w	r5, #14
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8005ca0:	f7ff fd42 	bl	8005728 <netconn_close_shutdown>
      return ERR_CLSD;
 8005ca4:	e7ec      	b.n	8005c80 <netconn_recv_data_tcp+0x88>
    return ERR_CONN;
 8005ca6:	f06f 050a 	mvn.w	r5, #10
 8005caa:	e7e9      	b.n	8005c80 <netconn_recv_data_tcp+0x88>
 8005cac:	08013516 	.word	0x08013516
 8005cb0:	080136fa 	.word	0x080136fa
 8005cb4:	0801342c 	.word	0x0801342c
 8005cb8:	08006ad1 	.word	0x08006ad1

08005cbc <netconn_recv>:
{
 8005cbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cbe:	4604      	mov	r4, r0
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8005cc0:	460e      	mov	r6, r1
 8005cc2:	b959      	cbnz	r1, 8005cdc <netconn_recv+0x20>
 8005cc4:	4b21      	ldr	r3, [pc, #132]	; (8005d4c <netconn_recv+0x90>)
 8005cc6:	f240 3263 	movw	r2, #867	; 0x363
 8005cca:	4921      	ldr	r1, [pc, #132]	; (8005d50 <netconn_recv+0x94>)
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8005ccc:	f06f 040f 	mvn.w	r4, #15
 8005cd0:	4820      	ldr	r0, [pc, #128]	; (8005d54 <netconn_recv+0x98>)
 8005cd2:	f008 fb5b 	bl	800e38c <iprintf>
}
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	b003      	add	sp, #12
 8005cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_buf = NULL;
 8005cdc:	2700      	movs	r7, #0
 8005cde:	600f      	str	r7, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8005ce0:	b920      	cbnz	r0, 8005cec <netconn_recv+0x30>
 8005ce2:	4b1a      	ldr	r3, [pc, #104]	; (8005d4c <netconn_recv+0x90>)
 8005ce4:	f240 3265 	movw	r2, #869	; 0x365
 8005ce8:	491b      	ldr	r1, [pc, #108]	; (8005d58 <netconn_recv+0x9c>)
 8005cea:	e7ef      	b.n	8005ccc <netconn_recv+0x10>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8005cec:	7803      	ldrb	r3, [r0, #0]
 8005cee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cf2:	2b10      	cmp	r3, #16
 8005cf4:	d125      	bne.n	8005d42 <netconn_recv+0x86>
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8005cf6:	2006      	movs	r0, #6
    struct pbuf *p = NULL;
 8005cf8:	9701      	str	r7, [sp, #4]
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8005cfa:	f003 ff4f 	bl	8009b9c <memp_malloc>
    if (buf == NULL) {
 8005cfe:	4605      	mov	r5, r0
 8005d00:	b1e0      	cbz	r0, 8005d3c <netconn_recv+0x80>
    err = netconn_recv_data_tcp(conn, &p, 0);
 8005d02:	4620      	mov	r0, r4
 8005d04:	463a      	mov	r2, r7
 8005d06:	a901      	add	r1, sp, #4
 8005d08:	f7ff ff76 	bl	8005bf8 <netconn_recv_data_tcp>
    if (err != ERR_OK) {
 8005d0c:	4604      	mov	r4, r0
 8005d0e:	b120      	cbz	r0, 8005d1a <netconn_recv+0x5e>
      memp_free(MEMP_NETBUF, buf);
 8005d10:	4629      	mov	r1, r5
 8005d12:	2006      	movs	r0, #6
 8005d14:	f003 ff5e 	bl	8009bd4 <memp_free>
      return err;
 8005d18:	e7dd      	b.n	8005cd6 <netconn_recv+0x1a>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005d1a:	9b01      	ldr	r3, [sp, #4]
 8005d1c:	b933      	cbnz	r3, 8005d2c <netconn_recv+0x70>
 8005d1e:	4b0b      	ldr	r3, [pc, #44]	; (8005d4c <netconn_recv+0x90>)
 8005d20:	f240 3279 	movw	r2, #889	; 0x379
 8005d24:	490d      	ldr	r1, [pc, #52]	; (8005d5c <netconn_recv+0xa0>)
 8005d26:	480b      	ldr	r0, [pc, #44]	; (8005d54 <netconn_recv+0x98>)
 8005d28:	f008 fb30 	bl	800e38c <iprintf>
    buf->p = p;
 8005d2c:	9b01      	ldr	r3, [sp, #4]
    buf->ptr = p;
 8005d2e:	e9c5 3300 	strd	r3, r3, [r5]
    buf->port = 0;
 8005d32:	2300      	movs	r3, #0
 8005d34:	81ab      	strh	r3, [r5, #12]
    ip_addr_set_zero(&buf->addr);
 8005d36:	60ab      	str	r3, [r5, #8]
    *new_buf = buf;
 8005d38:	6035      	str	r5, [r6, #0]
    return ERR_OK;
 8005d3a:	e7cc      	b.n	8005cd6 <netconn_recv+0x1a>
      return ERR_MEM;
 8005d3c:	f04f 34ff 	mov.w	r4, #4294967295
 8005d40:	e7c9      	b.n	8005cd6 <netconn_recv+0x1a>
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8005d42:	463a      	mov	r2, r7
 8005d44:	f7ff fee2 	bl	8005b0c <netconn_recv_data>
 8005d48:	4604      	mov	r4, r0
 8005d4a:	e7c4      	b.n	8005cd6 <netconn_recv+0x1a>
 8005d4c:	08013516 	.word	0x08013516
 8005d50:	080137d7 	.word	0x080137d7
 8005d54:	0801342c 	.word	0x0801342c
 8005d58:	080137f5 	.word	0x080137f5
 8005d5c:	08014ecd 	.word	0x08014ecd

08005d60 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8005d60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005d64:	4606      	mov	r6, r0
 8005d66:	4617      	mov	r7, r2
 8005d68:	461d      	mov	r5, r3
 8005d6a:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8005d6e:	460c      	mov	r4, r1
 8005d70:	b929      	cbnz	r1, 8005d7e <recv_udp+0x1e>
 8005d72:	4b25      	ldr	r3, [pc, #148]	; (8005e08 <recv_udp+0xa8>)
 8005d74:	22e5      	movs	r2, #229	; 0xe5
 8005d76:	4925      	ldr	r1, [pc, #148]	; (8005e0c <recv_udp+0xac>)
 8005d78:	4825      	ldr	r0, [pc, #148]	; (8005e10 <recv_udp+0xb0>)
 8005d7a:	f008 fb07 	bl	800e38c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8005d7e:	b99e      	cbnz	r6, 8005da8 <recv_udp+0x48>
 8005d80:	4b21      	ldr	r3, [pc, #132]	; (8005e08 <recv_udp+0xa8>)
 8005d82:	22e6      	movs	r2, #230	; 0xe6
 8005d84:	4923      	ldr	r1, [pc, #140]	; (8005e14 <recv_udp+0xb4>)
 8005d86:	4822      	ldr	r0, [pc, #136]	; (8005e10 <recv_udp+0xb0>)
 8005d88:	f008 fb00 	bl	800e38c <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8005d8c:	4638      	mov	r0, r7
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  }
}
 8005d8e:	b003      	add	sp, #12
 8005d90:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    pbuf_free(p);
 8005d94:	f004 b948 	b.w	800a028 <pbuf_free>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8005d98:	6a33      	ldr	r3, [r6, #32]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d031      	beq.n	8005e02 <recv_udp+0xa2>
 8005d9e:	4630      	mov	r0, r6
}
 8005da0:	b003      	add	sp, #12
 8005da2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8005da6:	4718      	bx	r3
  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8005da8:	6873      	ldr	r3, [r6, #4]
 8005daa:	42a3      	cmp	r3, r4
 8005dac:	d005      	beq.n	8005dba <recv_udp+0x5a>
 8005dae:	4b16      	ldr	r3, [pc, #88]	; (8005e08 <recv_udp+0xa8>)
 8005db0:	22ee      	movs	r2, #238	; 0xee
 8005db2:	4919      	ldr	r1, [pc, #100]	; (8005e18 <recv_udp+0xb8>)
 8005db4:	4816      	ldr	r0, [pc, #88]	; (8005e10 <recv_udp+0xb0>)
 8005db6:	f008 fae9 	bl	800e38c <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8005dba:	f106 0910 	add.w	r9, r6, #16
 8005dbe:	4648      	mov	r0, r9
 8005dc0:	f008 fa09 	bl	800e1d6 <sys_mbox_valid>
 8005dc4:	2800      	cmp	r0, #0
 8005dc6:	d0e1      	beq.n	8005d8c <recv_udp+0x2c>
  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8005dc8:	2006      	movs	r0, #6
 8005dca:	f003 fee7 	bl	8009b9c <memp_malloc>
  if (buf == NULL) {
 8005dce:	4604      	mov	r4, r0
 8005dd0:	2800      	cmp	r0, #0
 8005dd2:	d0db      	beq.n	8005d8c <recv_udp+0x2c>
    buf->ptr = p;
 8005dd4:	e9c0 7700 	strd	r7, r7, [r0]
    ip_addr_set(&buf->addr, addr);
 8005dd8:	b105      	cbz	r5, 8005ddc <recv_udp+0x7c>
 8005dda:	682d      	ldr	r5, [r5, #0]
  len = p->tot_len;
 8005ddc:	893a      	ldrh	r2, [r7, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8005dde:	4621      	mov	r1, r4
 8005de0:	4648      	mov	r0, r9
    ip_addr_set(&buf->addr, addr);
 8005de2:	60a5      	str	r5, [r4, #8]
    buf->port = port;
 8005de4:	f8a4 800c 	strh.w	r8, [r4, #12]
  len = p->tot_len;
 8005de8:	9201      	str	r2, [sp, #4]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8005dea:	f008 f9b7 	bl	800e15c <sys_mbox_trypost>
 8005dee:	9a01      	ldr	r2, [sp, #4]
 8005df0:	4601      	mov	r1, r0
 8005df2:	2800      	cmp	r0, #0
 8005df4:	d0d0      	beq.n	8005d98 <recv_udp+0x38>
    netbuf_delete(buf);
 8005df6:	4620      	mov	r0, r4
}
 8005df8:	b003      	add	sp, #12
 8005dfa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    netbuf_delete(buf);
 8005dfe:	f000 bf81 	b.w	8006d04 <netbuf_delete>
}
 8005e02:	b003      	add	sp, #12
 8005e04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e08:	08013846 	.word	0x08013846
 8005e0c:	080138af 	.word	0x080138af
 8005e10:	0801342c 	.word	0x0801342c
 8005e14:	080138d1 	.word	0x080138d1
 8005e18:	080138f0 	.word	0x080138f0

08005e1c <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8005e1c:	b507      	push	{r0, r1, r2, lr}
 8005e1e:	4601      	mov	r1, r0
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8005e20:	6840      	ldr	r0, [r0, #4]
  tcp_arg(pcb, conn);
 8005e22:	9001      	str	r0, [sp, #4]
 8005e24:	f004 fd4c 	bl	800a8c0 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8005e28:	9801      	ldr	r0, [sp, #4]
 8005e2a:	4909      	ldr	r1, [pc, #36]	; (8005e50 <setup_tcp+0x34>)
 8005e2c:	f004 fd4c 	bl	800a8c8 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8005e30:	9801      	ldr	r0, [sp, #4]
 8005e32:	4908      	ldr	r1, [pc, #32]	; (8005e54 <setup_tcp+0x38>)
 8005e34:	f004 fd60 	bl	800a8f8 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8005e38:	9801      	ldr	r0, [sp, #4]
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	4906      	ldr	r1, [pc, #24]	; (8005e58 <setup_tcp+0x3c>)
 8005e3e:	f004 fd8f 	bl	800a960 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8005e42:	4906      	ldr	r1, [pc, #24]	; (8005e5c <setup_tcp+0x40>)
 8005e44:	9801      	ldr	r0, [sp, #4]
}
 8005e46:	b003      	add	sp, #12
 8005e48:	f85d eb04 	ldr.w	lr, [sp], #4
  tcp_err(pcb, err_tcp);
 8005e4c:	f004 bd6a 	b.w	800a924 <tcp_err>
 8005e50:	08006319 	.word	0x08006319
 8005e54:	08006529 	.word	0x08006529
 8005e58:	0800629d 	.word	0x0800629d
 8005e5c:	080063e9 	.word	0x080063e9

08005e60 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8005e60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e64:	460f      	mov	r7, r1
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8005e66:	4604      	mov	r4, r0
 8005e68:	b930      	cbnz	r0, 8005e78 <lwip_netconn_do_writemore+0x18>
 8005e6a:	4b89      	ldr	r3, [pc, #548]	; (8006090 <lwip_netconn_do_writemore+0x230>)
 8005e6c:	f240 6273 	movw	r2, #1651	; 0x673
 8005e70:	4988      	ldr	r1, [pc, #544]	; (8006094 <lwip_netconn_do_writemore+0x234>)
 8005e72:	4889      	ldr	r0, [pc, #548]	; (8006098 <lwip_netconn_do_writemore+0x238>)
 8005e74:	f008 fa8a 	bl	800e38c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8005e78:	7863      	ldrb	r3, [r4, #1]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d006      	beq.n	8005e8c <lwip_netconn_do_writemore+0x2c>
 8005e7e:	4b84      	ldr	r3, [pc, #528]	; (8006090 <lwip_netconn_do_writemore+0x230>)
 8005e80:	f240 6274 	movw	r2, #1652	; 0x674
 8005e84:	4985      	ldr	r1, [pc, #532]	; (800609c <lwip_netconn_do_writemore+0x23c>)
 8005e86:	4884      	ldr	r0, [pc, #528]	; (8006098 <lwip_netconn_do_writemore+0x238>)
 8005e88:	f008 fa80 	bl	800e38c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8005e8c:	69e3      	ldr	r3, [r4, #28]
 8005e8e:	b933      	cbnz	r3, 8005e9e <lwip_netconn_do_writemore+0x3e>
 8005e90:	4b7f      	ldr	r3, [pc, #508]	; (8006090 <lwip_netconn_do_writemore+0x230>)
 8005e92:	f240 6275 	movw	r2, #1653	; 0x675
 8005e96:	4982      	ldr	r1, [pc, #520]	; (80060a0 <lwip_netconn_do_writemore+0x240>)
 8005e98:	487f      	ldr	r0, [pc, #508]	; (8006098 <lwip_netconn_do_writemore+0x238>)
 8005e9a:	f008 fa77 	bl	800e38c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8005e9e:	6863      	ldr	r3, [r4, #4]
 8005ea0:	b933      	cbnz	r3, 8005eb0 <lwip_netconn_do_writemore+0x50>
 8005ea2:	4b7b      	ldr	r3, [pc, #492]	; (8006090 <lwip_netconn_do_writemore+0x230>)
 8005ea4:	f240 6276 	movw	r2, #1654	; 0x676
 8005ea8:	497e      	ldr	r1, [pc, #504]	; (80060a4 <lwip_netconn_do_writemore+0x244>)
 8005eaa:	487b      	ldr	r0, [pc, #492]	; (8006098 <lwip_netconn_do_writemore+0x238>)
 8005eac:	f008 fa6e 	bl	800e38c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8005eb0:	69e3      	ldr	r3, [r4, #28]
 8005eb2:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d306      	bcc.n	8005ec8 <lwip_netconn_do_writemore+0x68>
 8005eba:	4b75      	ldr	r3, [pc, #468]	; (8006090 <lwip_netconn_do_writemore+0x230>)
 8005ebc:	f240 6277 	movw	r2, #1655	; 0x677
 8005ec0:	4979      	ldr	r1, [pc, #484]	; (80060a8 <lwip_netconn_do_writemore+0x248>)
 8005ec2:	4875      	ldr	r0, [pc, #468]	; (8006098 <lwip_netconn_do_writemore+0x238>)
 8005ec4:	f008 fa62 	bl	800e38c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8005ec8:	69e3      	ldr	r3, [r4, #28]
 8005eca:	899b      	ldrh	r3, [r3, #12]
 8005ecc:	b933      	cbnz	r3, 8005edc <lwip_netconn_do_writemore+0x7c>
 8005ece:	4b70      	ldr	r3, [pc, #448]	; (8006090 <lwip_netconn_do_writemore+0x230>)
 8005ed0:	f240 6279 	movw	r2, #1657	; 0x679
 8005ed4:	4975      	ldr	r1, [pc, #468]	; (80060ac <lwip_netconn_do_writemore+0x24c>)
 8005ed6:	4870      	ldr	r0, [pc, #448]	; (8006098 <lwip_netconn_do_writemore+0x238>)
 8005ed8:	f008 fa58 	bl	800e38c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8005edc:	69e3      	ldr	r3, [r4, #28]
 8005ede:	7e26      	ldrb	r6, [r4, #24]
 8005ee0:	f893 801c 	ldrb.w	r8, [r3, #28]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8005ee4:	f006 0602 	and.w	r6, r6, #2
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8005ee8:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 8006098 <lwip_netconn_do_writemore+0x238>
 8005eec:	f008 0304 	and.w	r3, r8, #4
 8005ef0:	431e      	orrs	r6, r3
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8005ef2:	69e1      	ldr	r1, [r4, #28]
      available = tcp_sndbuf(conn->pcb.tcp);
 8005ef4:	6865      	ldr	r5, [r4, #4]
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8005ef6:	688a      	ldr	r2, [r1, #8]
 8005ef8:	690b      	ldr	r3, [r1, #16]
 8005efa:	6810      	ldr	r0, [r2, #0]
      available = tcp_sndbuf(conn->pcb.tcp);
 8005efc:	f8b5 5064 	ldrh.w	r5, [r5, #100]	; 0x64
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8005f00:	eb00 0a03 	add.w	sl, r0, r3
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8005f04:	6850      	ldr	r0, [r2, #4]
 8005f06:	eba0 0903 	sub.w	r9, r0, r3
      if (diff > 0xffffUL) { /* max_u16_t */
 8005f0a:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
        len = 0xffff;
 8005f0e:	bf2a      	itet	cs
 8005f10:	f64f 72ff 	movwcs	r2, #65535	; 0xffff
        len = (u16_t)diff;
 8005f14:	fa1f f289 	uxthcc.w	r2, r9
        apiflags |= TCP_WRITE_FLAG_MORE;
 8005f18:	f048 0802 	orrcs.w	r8, r8, #2
      if (available < len) {
 8005f1c:	42aa      	cmp	r2, r5
 8005f1e:	d979      	bls.n	8006014 <lwip_netconn_do_writemore+0x1b4>
        if (dontblock) {
 8005f20:	2e00      	cmp	r6, #0
 8005f22:	d038      	beq.n	8005f96 <lwip_netconn_do_writemore+0x136>
          if (!len) {
 8005f24:	2d00      	cmp	r5, #0
 8005f26:	d138      	bne.n	8005f9a <lwip_netconn_do_writemore+0x13a>
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8005f28:	698b      	ldr	r3, [r1, #24]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	bf0c      	ite	eq
 8005f2e:	f06f 0a06 	mvneq.w	sl, #6
 8005f32:	f04f 0a00 	movne.w	sl, #0
      }
    } while (write_more && err == ERR_OK);
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
err_mem:
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8005f36:	69e3      	ldr	r3, [r4, #28]
 8005f38:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d276      	bcs.n	800602e <lwip_netconn_do_writemore+0x1ce>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8005f40:	6a23      	ldr	r3, [r4, #32]
 8005f42:	b11b      	cbz	r3, 8005f4c <lwip_netconn_do_writemore+0xec>
 8005f44:	2200      	movs	r2, #0
 8005f46:	2103      	movs	r1, #3
 8005f48:	4620      	mov	r0, r4
 8005f4a:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8005f4c:	7e23      	ldrb	r3, [r4, #24]
 8005f4e:	f043 0310 	orr.w	r3, r3, #16
 8005f52:	7623      	strb	r3, [r4, #24]
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
      }
    }

    if (err == ERR_OK) {
 8005f54:	f1ba 0f00 	cmp.w	sl, #0
 8005f58:	d17e      	bne.n	8006058 <lwip_netconn_do_writemore+0x1f8>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8005f5a:	69e3      	ldr	r3, [r4, #28]
 8005f5c:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d077      	beq.n	8006054 <lwip_netconn_do_writemore+0x1f4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8005f64:	3e00      	subs	r6, #0
 8005f66:	bf18      	it	ne
 8005f68:	2601      	movne	r6, #1
      }
      out_err = tcp_output(conn->pcb.tcp);
 8005f6a:	6860      	ldr	r0, [r4, #4]
 8005f6c:	f007 fa38 	bl	800d3e0 <tcp_output>
      if (out_err == ERR_RTE) {
 8005f70:	3004      	adds	r0, #4
 8005f72:	f040 8084 	bne.w	800607e <lwip_netconn_do_writemore+0x21e>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8005f76:	f06f 0a03 	mvn.w	sl, #3
    }
  }
  if (write_finished) {
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8005f7a:	69e3      	ldr	r3, [r4, #28]
    conn->current_msg->err = err;
    conn->current_msg = NULL;
 8005f7c:	2500      	movs	r5, #0
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8005f7e:	6818      	ldr	r0, [r3, #0]
    conn->current_msg->err = err;
 8005f80:	f883 a004 	strb.w	sl, [r3, #4]
    conn->current_msg = NULL;
 8005f84:	61e5      	str	r5, [r4, #28]
    conn->state = NETCONN_NONE;
 8005f86:	7065      	strb	r5, [r4, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8005f88:	2f00      	cmp	r7, #0
 8005f8a:	d07e      	beq.n	800608a <lwip_netconn_do_writemore+0x22a>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8005f8c:	300c      	adds	r0, #12
 8005f8e:	f008 f95c 	bl	800e24a <sys_sem_signal>
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
 8005f92:	4628      	mov	r0, r5
 8005f94:	e06b      	b.n	800606e <lwip_netconn_do_writemore+0x20e>
          apiflags |= TCP_WRITE_FLAG_MORE;
 8005f96:	f048 0802 	orr.w	r8, r8, #2
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8005f9a:	442b      	add	r3, r5
 8005f9c:	4298      	cmp	r0, r3
 8005f9e:	d206      	bcs.n	8005fae <lwip_netconn_do_writemore+0x14e>
 8005fa0:	4b3b      	ldr	r3, [pc, #236]	; (8006090 <lwip_netconn_do_writemore+0x230>)
 8005fa2:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8005fa6:	4942      	ldr	r1, [pc, #264]	; (80060b0 <lwip_netconn_do_writemore+0x250>)
 8005fa8:	4658      	mov	r0, fp
 8005faa:	f008 f9ef 	bl	800e38c <iprintf>
      if ((len == 0xffff && diff > 0xffffUL) ||
 8005fae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005fb2:	429d      	cmp	r5, r3
 8005fb4:	d102      	bne.n	8005fbc <lwip_netconn_do_writemore+0x15c>
 8005fb6:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
 8005fba:	d207      	bcs.n	8005fcc <lwip_netconn_do_writemore+0x16c>
 8005fbc:	fa1f f989 	uxth.w	r9, r9
 8005fc0:	45a9      	cmp	r9, r5
 8005fc2:	d129      	bne.n	8006018 <lwip_netconn_do_writemore+0x1b8>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8005fc4:	69e3      	ldr	r3, [r4, #28]
 8005fc6:	899b      	ldrh	r3, [r3, #12]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d925      	bls.n	8006018 <lwip_netconn_do_writemore+0x1b8>
        apiflags |= TCP_WRITE_FLAG_MORE;
 8005fcc:	f048 0802 	orr.w	r8, r8, #2
        write_more = 1;
 8005fd0:	f04f 0901 	mov.w	r9, #1
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8005fd4:	4651      	mov	r1, sl
 8005fd6:	4643      	mov	r3, r8
 8005fd8:	462a      	mov	r2, r5
 8005fda:	6860      	ldr	r0, [r4, #4]
 8005fdc:	f006 fca0 	bl	800c920 <tcp_write>
      if (err == ERR_OK) {
 8005fe0:	4682      	mov	sl, r0
 8005fe2:	b9e0      	cbnz	r0, 800601e <lwip_netconn_do_writemore+0x1be>
        conn->current_msg->msg.w.offset += len;
 8005fe4:	69e3      	ldr	r3, [r4, #28]
 8005fe6:	699a      	ldr	r2, [r3, #24]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8005fe8:	6899      	ldr	r1, [r3, #8]
        conn->current_msg->msg.w.offset += len;
 8005fea:	442a      	add	r2, r5
 8005fec:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8005fee:	691a      	ldr	r2, [r3, #16]
 8005ff0:	4415      	add	r5, r2
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8005ff2:	684a      	ldr	r2, [r1, #4]
 8005ff4:	4295      	cmp	r5, r2
        conn->current_msg->msg.w.vector_off += len;
 8005ff6:	611d      	str	r5, [r3, #16]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8005ff8:	d107      	bne.n	800600a <lwip_netconn_do_writemore+0x1aa>
          conn->current_msg->msg.w.vector_cnt--;
 8005ffa:	899a      	ldrh	r2, [r3, #12]
 8005ffc:	3a01      	subs	r2, #1
 8005ffe:	b292      	uxth	r2, r2
 8006000:	819a      	strh	r2, [r3, #12]
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8006002:	b112      	cbz	r2, 800600a <lwip_netconn_do_writemore+0x1aa>
            conn->current_msg->msg.w.vector++;
 8006004:	3108      	adds	r1, #8
            conn->current_msg->msg.w.vector_off = 0;
 8006006:	6118      	str	r0, [r3, #16]
            conn->current_msg->msg.w.vector++;
 8006008:	6099      	str	r1, [r3, #8]
    } while (write_more && err == ERR_OK);
 800600a:	f1b9 0f00 	cmp.w	r9, #0
 800600e:	f47f af70 	bne.w	8005ef2 <lwip_netconn_do_writemore+0x92>
 8006012:	e00a      	b.n	800602a <lwip_netconn_do_writemore+0x1ca>
 8006014:	4615      	mov	r5, r2
 8006016:	e7c0      	b.n	8005f9a <lwip_netconn_do_writemore+0x13a>
        write_more = 0;
 8006018:	f04f 0900 	mov.w	r9, #0
 800601c:	e7da      	b.n	8005fd4 <lwip_netconn_do_writemore+0x174>
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800601e:	1c43      	adds	r3, r0, #1
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b01      	cmp	r3, #1
 8006024:	d8a9      	bhi.n	8005f7a <lwip_netconn_do_writemore+0x11a>
err_mem:
 8006026:	f04f 3aff 	mov.w	sl, #4294967295
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800602a:	2e00      	cmp	r6, #0
 800602c:	d183      	bne.n	8005f36 <lwip_netconn_do_writemore+0xd6>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800602e:	6863      	ldr	r3, [r4, #4]
 8006030:	f640 3269 	movw	r2, #2921	; 0xb69
 8006034:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
 8006038:	4291      	cmp	r1, r2
 800603a:	d903      	bls.n	8006044 <lwip_netconn_do_writemore+0x1e4>
 800603c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8006040:	2b04      	cmp	r3, #4
 8006042:	d987      	bls.n	8005f54 <lwip_netconn_do_writemore+0xf4>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8006044:	6a23      	ldr	r3, [r4, #32]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d084      	beq.n	8005f54 <lwip_netconn_do_writemore+0xf4>
 800604a:	2200      	movs	r2, #0
 800604c:	2103      	movs	r1, #3
 800604e:	4620      	mov	r0, r4
 8006050:	4798      	blx	r3
 8006052:	e77f      	b.n	8005f54 <lwip_netconn_do_writemore+0xf4>
        write_finished = 1;
 8006054:	2601      	movs	r6, #1
 8006056:	e788      	b.n	8005f6a <lwip_netconn_do_writemore+0x10a>
    } else if (err == ERR_MEM) {
 8006058:	f1ba 3fff 	cmp.w	sl, #4294967295
 800605c:	d18d      	bne.n	8005f7a <lwip_netconn_do_writemore+0x11a>
      err_t out_err = tcp_output(conn->pcb.tcp);
 800605e:	6860      	ldr	r0, [r4, #4]
 8006060:	f007 f9be 	bl	800d3e0 <tcp_output>
      if (out_err == ERR_RTE) {
 8006064:	3004      	adds	r0, #4
 8006066:	d086      	beq.n	8005f76 <lwip_netconn_do_writemore+0x116>
      } else if (dontblock) {
 8006068:	b91e      	cbnz	r6, 8006072 <lwip_netconn_do_writemore+0x212>
    return ERR_MEM;
 800606a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800606e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8006072:	69e3      	ldr	r3, [r4, #28]
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	b12b      	cbz	r3, 8006084 <lwip_netconn_do_writemore+0x224>
 8006078:	f04f 0a00 	mov.w	sl, #0
 800607c:	e77d      	b.n	8005f7a <lwip_netconn_do_writemore+0x11a>
  if (write_finished) {
 800607e:	2e00      	cmp	r6, #0
 8006080:	d1fa      	bne.n	8006078 <lwip_netconn_do_writemore+0x218>
 8006082:	e7f2      	b.n	800606a <lwip_netconn_do_writemore+0x20a>
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8006084:	f06f 0a06 	mvn.w	sl, #6
 8006088:	e777      	b.n	8005f7a <lwip_netconn_do_writemore+0x11a>
  return ERR_OK;
 800608a:	4638      	mov	r0, r7
 800608c:	e7ef      	b.n	800606e <lwip_netconn_do_writemore+0x20e>
 800608e:	bf00      	nop
 8006090:	08013846 	.word	0x08013846
 8006094:	08013987 	.word	0x08013987
 8006098:	0801342c 	.word	0x0801342c
 800609c:	08013994 	.word	0x08013994
 80060a0:	080139b1 	.word	0x080139b1
 80060a4:	080139cb 	.word	0x080139cb
 80060a8:	080139e1 	.word	0x080139e1
 80060ac:	08013a20 	.word	0x08013a20
 80060b0:	08013a48 	.word	0x08013a48

080060b4 <lwip_netconn_do_close_internal>:
{
 80060b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060b8:	4689      	mov	r9, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
 80060ba:	4604      	mov	r4, r0
 80060bc:	b930      	cbnz	r0, 80060cc <lwip_netconn_do_close_internal+0x18>
 80060be:	4b6c      	ldr	r3, [pc, #432]	; (8006270 <lwip_netconn_do_close_internal+0x1bc>)
 80060c0:	f240 32a2 	movw	r2, #930	; 0x3a2
 80060c4:	496b      	ldr	r1, [pc, #428]	; (8006274 <lwip_netconn_do_close_internal+0x1c0>)
 80060c6:	486c      	ldr	r0, [pc, #432]	; (8006278 <lwip_netconn_do_close_internal+0x1c4>)
 80060c8:	f008 f960 	bl	800e38c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 80060cc:	7823      	ldrb	r3, [r4, #0]
 80060ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060d2:	2b10      	cmp	r3, #16
 80060d4:	d006      	beq.n	80060e4 <lwip_netconn_do_close_internal+0x30>
 80060d6:	4b66      	ldr	r3, [pc, #408]	; (8006270 <lwip_netconn_do_close_internal+0x1bc>)
 80060d8:	f240 32a3 	movw	r2, #931	; 0x3a3
 80060dc:	4967      	ldr	r1, [pc, #412]	; (800627c <lwip_netconn_do_close_internal+0x1c8>)
 80060de:	4866      	ldr	r0, [pc, #408]	; (8006278 <lwip_netconn_do_close_internal+0x1c4>)
 80060e0:	f008 f954 	bl	800e38c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80060e4:	7863      	ldrb	r3, [r4, #1]
 80060e6:	2b04      	cmp	r3, #4
 80060e8:	d006      	beq.n	80060f8 <lwip_netconn_do_close_internal+0x44>
 80060ea:	4b61      	ldr	r3, [pc, #388]	; (8006270 <lwip_netconn_do_close_internal+0x1bc>)
 80060ec:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 80060f0:	4963      	ldr	r1, [pc, #396]	; (8006280 <lwip_netconn_do_close_internal+0x1cc>)
 80060f2:	4861      	ldr	r0, [pc, #388]	; (8006278 <lwip_netconn_do_close_internal+0x1c4>)
 80060f4:	f008 f94a 	bl	800e38c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80060f8:	6863      	ldr	r3, [r4, #4]
 80060fa:	b933      	cbnz	r3, 800610a <lwip_netconn_do_close_internal+0x56>
 80060fc:	4b5c      	ldr	r3, [pc, #368]	; (8006270 <lwip_netconn_do_close_internal+0x1bc>)
 80060fe:	f240 32a5 	movw	r2, #933	; 0x3a5
 8006102:	4960      	ldr	r1, [pc, #384]	; (8006284 <lwip_netconn_do_close_internal+0x1d0>)
 8006104:	485c      	ldr	r0, [pc, #368]	; (8006278 <lwip_netconn_do_close_internal+0x1c4>)
 8006106:	f008 f941 	bl	800e38c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800610a:	69e3      	ldr	r3, [r4, #28]
 800610c:	b933      	cbnz	r3, 800611c <lwip_netconn_do_close_internal+0x68>
 800610e:	4b58      	ldr	r3, [pc, #352]	; (8006270 <lwip_netconn_do_close_internal+0x1bc>)
 8006110:	f240 32a6 	movw	r2, #934	; 0x3a6
 8006114:	495c      	ldr	r1, [pc, #368]	; (8006288 <lwip_netconn_do_close_internal+0x1d4>)
 8006116:	4858      	ldr	r0, [pc, #352]	; (8006278 <lwip_netconn_do_close_internal+0x1c4>)
 8006118:	f008 f938 	bl	800e38c <iprintf>
  shut = conn->current_msg->msg.sd.shut;
 800611c:	69e3      	ldr	r3, [r4, #28]
  tpcb = conn->pcb.tcp;
 800611e:	6865      	ldr	r5, [r4, #4]
  shut = conn->current_msg->msg.sd.shut;
 8006120:	7a1b      	ldrb	r3, [r3, #8]
  if (shut == NETCONN_SHUT_RDWR) {
 8006122:	2b03      	cmp	r3, #3
  shut_rx = shut & NETCONN_SHUT_RD;
 8006124:	f003 0a01 	and.w	sl, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 8006128:	f003 0802 	and.w	r8, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 800612c:	d00f      	beq.n	800614e <lwip_netconn_do_close_internal+0x9a>
  } else if (shut_rx &&
 800612e:	f1ba 0f00 	cmp.w	sl, #0
 8006132:	d005      	beq.n	8006140 <lwip_netconn_do_close_internal+0x8c>
             ((tpcb->state == FIN_WAIT_1) ||
 8006134:	7d2b      	ldrb	r3, [r5, #20]
  } else if (shut_rx &&
 8006136:	1f5a      	subs	r2, r3, #5
 8006138:	2a01      	cmp	r2, #1
 800613a:	d908      	bls.n	800614e <lwip_netconn_do_close_internal+0x9a>
              (tpcb->state == FIN_WAIT_2) ||
 800613c:	2b08      	cmp	r3, #8
 800613e:	d006      	beq.n	800614e <lwip_netconn_do_close_internal+0x9a>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8006140:	f1b8 0f00 	cmp.w	r8, #0
 8006144:	d016      	beq.n	8006174 <lwip_netconn_do_close_internal+0xc0>
 8006146:	8b6f      	ldrh	r7, [r5, #26]
 8006148:	f017 0710 	ands.w	r7, r7, #16
 800614c:	d004      	beq.n	8006158 <lwip_netconn_do_close_internal+0xa4>
    tcp_arg(tpcb, NULL);
 800614e:	2701      	movs	r7, #1
 8006150:	2100      	movs	r1, #0
 8006152:	4628      	mov	r0, r5
 8006154:	f004 fbb4 	bl	800a8c0 <tcp_arg>
  if (tpcb->state == LISTEN) {
 8006158:	7d2b      	ldrb	r3, [r5, #20]
 800615a:	2b01      	cmp	r3, #1
 800615c:	d10c      	bne.n	8006178 <lwip_netconn_do_close_internal+0xc4>
    tcp_accept(tpcb, NULL);
 800615e:	2100      	movs	r1, #0
 8006160:	4628      	mov	r0, r5
 8006162:	f004 fbf7 	bl	800a954 <tcp_accept>
  if (shut_close) {
 8006166:	bb27      	cbnz	r7, 80061b2 <lwip_netconn_do_close_internal+0xfe>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8006168:	4642      	mov	r2, r8
 800616a:	4651      	mov	r1, sl
 800616c:	4628      	mov	r0, r5
 800616e:	f005 f83b 	bl	800b1e8 <tcp_shutdown>
 8006172:	e021      	b.n	80061b8 <lwip_netconn_do_close_internal+0x104>
    shut_close = 0;
 8006174:	4647      	mov	r7, r8
 8006176:	e7ef      	b.n	8006158 <lwip_netconn_do_close_internal+0xa4>
    if (shut_rx) {
 8006178:	f1ba 0f00 	cmp.w	sl, #0
 800617c:	d007      	beq.n	800618e <lwip_netconn_do_close_internal+0xda>
      tcp_recv(tpcb, NULL);
 800617e:	2100      	movs	r1, #0
 8006180:	4628      	mov	r0, r5
 8006182:	f004 fba1 	bl	800a8c8 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8006186:	2100      	movs	r1, #0
 8006188:	4628      	mov	r0, r5
 800618a:	f004 fbe3 	bl	800a954 <tcp_accept>
    if (shut_tx) {
 800618e:	f1b8 0f00 	cmp.w	r8, #0
 8006192:	d003      	beq.n	800619c <lwip_netconn_do_close_internal+0xe8>
      tcp_sent(tpcb, NULL);
 8006194:	2100      	movs	r1, #0
 8006196:	4628      	mov	r0, r5
 8006198:	f004 fbae 	bl	800a8f8 <tcp_sent>
    if (shut_close) {
 800619c:	2f00      	cmp	r7, #0
 800619e:	d0e3      	beq.n	8006168 <lwip_netconn_do_close_internal+0xb4>
      tcp_poll(tpcb, NULL, 0);
 80061a0:	2200      	movs	r2, #0
 80061a2:	4628      	mov	r0, r5
 80061a4:	4611      	mov	r1, r2
 80061a6:	f004 fbdb 	bl	800a960 <tcp_poll>
      tcp_err(tpcb, NULL);
 80061aa:	2100      	movs	r1, #0
 80061ac:	4628      	mov	r0, r5
 80061ae:	f004 fbb9 	bl	800a924 <tcp_err>
      err = tcp_close(tpcb);
 80061b2:	4628      	mov	r0, r5
 80061b4:	f004 ff3e 	bl	800b034 <tcp_close>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80061b8:	4606      	mov	r6, r0
  if (err == ERR_OK) {
 80061ba:	b160      	cbz	r0, 80061d6 <lwip_netconn_do_close_internal+0x122>
    if (err == ERR_MEM) {
 80061bc:	1c43      	adds	r3, r0, #1
 80061be:	d10a      	bne.n	80061d6 <lwip_netconn_do_close_internal+0x122>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80061c0:	69e3      	ldr	r3, [r4, #28]
 80061c2:	f893 b009 	ldrb.w	fp, [r3, #9]
 80061c6:	f1bb 0f00 	cmp.w	fp, #0
 80061ca:	d130      	bne.n	800622e <lwip_netconn_do_close_internal+0x17a>
        if (shut_close) {
 80061cc:	b11f      	cbz	r7, 80061d6 <lwip_netconn_do_close_internal+0x122>
          err = ERR_OK;
 80061ce:	465e      	mov	r6, fp
          tcp_abort(tpcb);
 80061d0:	4628      	mov	r0, r5
 80061d2:	f005 f8bf 	bl	800b354 <tcp_abort>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80061d6:	69e3      	ldr	r3, [r4, #28]
 80061d8:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 80061da:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 80061dc:	2300      	movs	r3, #0
 80061de:	61e3      	str	r3, [r4, #28]
    conn->state = NETCONN_NONE;
 80061e0:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 80061e2:	b9ce      	cbnz	r6, 8006218 <lwip_netconn_do_close_internal+0x164>
      if (shut_close) {
 80061e4:	b137      	cbz	r7, 80061f4 <lwip_netconn_do_close_internal+0x140>
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80061e6:	6a23      	ldr	r3, [r4, #32]
        conn->pcb.tcp = NULL;
 80061e8:	6066      	str	r6, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80061ea:	b11b      	cbz	r3, 80061f4 <lwip_netconn_do_close_internal+0x140>
 80061ec:	4632      	mov	r2, r6
 80061ee:	2104      	movs	r1, #4
 80061f0:	4620      	mov	r0, r4
 80061f2:	4798      	blx	r3
      if (shut_rx) {
 80061f4:	f1ba 0f00 	cmp.w	sl, #0
 80061f8:	d005      	beq.n	8006206 <lwip_netconn_do_close_internal+0x152>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80061fa:	6a23      	ldr	r3, [r4, #32]
 80061fc:	b11b      	cbz	r3, 8006206 <lwip_netconn_do_close_internal+0x152>
 80061fe:	2200      	movs	r2, #0
 8006200:	4620      	mov	r0, r4
 8006202:	4611      	mov	r1, r2
 8006204:	4798      	blx	r3
      if (shut_tx) {
 8006206:	f1b8 0f00 	cmp.w	r8, #0
 800620a:	d005      	beq.n	8006218 <lwip_netconn_do_close_internal+0x164>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800620c:	6a23      	ldr	r3, [r4, #32]
 800620e:	b11b      	cbz	r3, 8006218 <lwip_netconn_do_close_internal+0x164>
 8006210:	2200      	movs	r2, #0
 8006212:	2102      	movs	r1, #2
 8006214:	4620      	mov	r0, r4
 8006216:	4798      	blx	r3
    if (delayed)
 8006218:	f1b9 0f00 	cmp.w	r9, #0
 800621c:	d026      	beq.n	800626c <lwip_netconn_do_close_internal+0x1b8>
    return ERR_OK;
 800621e:	2600      	movs	r6, #0
      sys_sem_signal(op_completed_sem);
 8006220:	f105 000c 	add.w	r0, r5, #12
 8006224:	f008 f811 	bl	800e24a <sys_sem_signal>
}
 8006228:	4630      	mov	r0, r6
 800622a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800622e:	7d2b      	ldrb	r3, [r5, #20]
 8006230:	2b01      	cmp	r3, #1
 8006232:	d106      	bne.n	8006242 <lwip_netconn_do_close_internal+0x18e>
 8006234:	4b0e      	ldr	r3, [pc, #56]	; (8006270 <lwip_netconn_do_close_internal+0x1bc>)
 8006236:	f240 4241 	movw	r2, #1089	; 0x441
 800623a:	4914      	ldr	r1, [pc, #80]	; (800628c <lwip_netconn_do_close_internal+0x1d8>)
 800623c:	480e      	ldr	r0, [pc, #56]	; (8006278 <lwip_netconn_do_close_internal+0x1c4>)
 800623e:	f008 f8a5 	bl	800e38c <iprintf>
    if (shut_tx) {
 8006242:	f1b8 0f00 	cmp.w	r8, #0
 8006246:	d003      	beq.n	8006250 <lwip_netconn_do_close_internal+0x19c>
      tcp_sent(tpcb, sent_tcp);
 8006248:	4911      	ldr	r1, [pc, #68]	; (8006290 <lwip_netconn_do_close_internal+0x1dc>)
 800624a:	4628      	mov	r0, r5
 800624c:	f004 fb54 	bl	800a8f8 <tcp_sent>
    tcp_poll(tpcb, poll_tcp, 1);
 8006250:	2201      	movs	r2, #1
 8006252:	4628      	mov	r0, r5
 8006254:	490f      	ldr	r1, [pc, #60]	; (8006294 <lwip_netconn_do_close_internal+0x1e0>)
 8006256:	f004 fb83 	bl	800a960 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800625a:	4628      	mov	r0, r5
 800625c:	490e      	ldr	r1, [pc, #56]	; (8006298 <lwip_netconn_do_close_internal+0x1e4>)
 800625e:	f004 fb61 	bl	800a924 <tcp_err>
    tcp_arg(tpcb, conn);
 8006262:	4621      	mov	r1, r4
 8006264:	4628      	mov	r0, r5
 8006266:	f004 fb2b 	bl	800a8c0 <tcp_arg>
  return err;
 800626a:	e7dd      	b.n	8006228 <lwip_netconn_do_close_internal+0x174>
    return ERR_OK;
 800626c:	464e      	mov	r6, r9
 800626e:	e7db      	b.n	8006228 <lwip_netconn_do_close_internal+0x174>
 8006270:	08013846 	.word	0x08013846
 8006274:	0801372c 	.word	0x0801372c
 8006278:	0801342c 	.word	0x0801342c
 800627c:	08013a73 	.word	0x08013a73
 8006280:	08013a91 	.word	0x08013a91
 8006284:	08013ab5 	.word	0x08013ab5
 8006288:	080139b1 	.word	0x080139b1
 800628c:	08013ac8 	.word	0x08013ac8
 8006290:	08006529 	.word	0x08006529
 8006294:	0800629d 	.word	0x0800629d
 8006298:	080063e9 	.word	0x080063e9

0800629c <poll_tcp>:
{
 800629c:	b510      	push	{r4, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800629e:	4604      	mov	r4, r0
 80062a0:	b930      	cbnz	r0, 80062b0 <poll_tcp+0x14>
 80062a2:	4b1a      	ldr	r3, [pc, #104]	; (800630c <poll_tcp+0x70>)
 80062a4:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 80062a8:	4919      	ldr	r1, [pc, #100]	; (8006310 <poll_tcp+0x74>)
 80062aa:	481a      	ldr	r0, [pc, #104]	; (8006314 <poll_tcp+0x78>)
 80062ac:	f008 f86e 	bl	800e38c <iprintf>
  if (conn->state == NETCONN_WRITE) {
 80062b0:	7861      	ldrb	r1, [r4, #1]
 80062b2:	2901      	cmp	r1, #1
 80062b4:	d11c      	bne.n	80062f0 <poll_tcp+0x54>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80062b6:	4620      	mov	r0, r4
 80062b8:	f7ff fdd2 	bl	8005e60 <lwip_netconn_do_writemore>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80062bc:	7e23      	ldrb	r3, [r4, #24]
 80062be:	06da      	lsls	r2, r3, #27
 80062c0:	d514      	bpl.n	80062ec <poll_tcp+0x50>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80062c2:	6862      	ldr	r2, [r4, #4]
 80062c4:	b192      	cbz	r2, 80062ec <poll_tcp+0x50>
 80062c6:	f8b2 0064 	ldrh.w	r0, [r2, #100]	; 0x64
 80062ca:	f640 3169 	movw	r1, #2921	; 0xb69
 80062ce:	4288      	cmp	r0, r1
 80062d0:	d90c      	bls.n	80062ec <poll_tcp+0x50>
 80062d2:	f8b2 2066 	ldrh.w	r2, [r2, #102]	; 0x66
 80062d6:	2a04      	cmp	r2, #4
 80062d8:	d808      	bhi.n	80062ec <poll_tcp+0x50>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80062da:	f023 0310 	bic.w	r3, r3, #16
 80062de:	7623      	strb	r3, [r4, #24]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80062e0:	6a23      	ldr	r3, [r4, #32]
 80062e2:	b11b      	cbz	r3, 80062ec <poll_tcp+0x50>
 80062e4:	2200      	movs	r2, #0
 80062e6:	2102      	movs	r1, #2
 80062e8:	4620      	mov	r0, r4
 80062ea:	4798      	blx	r3
}
 80062ec:	2000      	movs	r0, #0
 80062ee:	bd10      	pop	{r4, pc}
  } else if (conn->state == NETCONN_CLOSE) {
 80062f0:	2904      	cmp	r1, #4
 80062f2:	d1e3      	bne.n	80062bc <poll_tcp+0x20>
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80062f4:	69e2      	ldr	r2, [r4, #28]
 80062f6:	b11a      	cbz	r2, 8006300 <poll_tcp+0x64>
 80062f8:	7a53      	ldrb	r3, [r2, #9]
 80062fa:	b10b      	cbz	r3, 8006300 <poll_tcp+0x64>
      conn->current_msg->msg.sd.polls_left--;
 80062fc:	3b01      	subs	r3, #1
 80062fe:	7253      	strb	r3, [r2, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8006300:	2101      	movs	r1, #1
 8006302:	4620      	mov	r0, r4
 8006304:	f7ff fed6 	bl	80060b4 <lwip_netconn_do_close_internal>
 8006308:	e7d8      	b.n	80062bc <poll_tcp+0x20>
 800630a:	bf00      	nop
 800630c:	08013846 	.word	0x08013846
 8006310:	08013987 	.word	0x08013987
 8006314:	0801342c 	.word	0x0801342c

08006318 <recv_tcp>:
{
 8006318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800631c:	4606      	mov	r6, r0
 800631e:	4615      	mov	r5, r2
 8006320:	461c      	mov	r4, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8006322:	460f      	mov	r7, r1
 8006324:	b931      	cbnz	r1, 8006334 <recv_tcp+0x1c>
 8006326:	4b29      	ldr	r3, [pc, #164]	; (80063cc <recv_tcp+0xb4>)
 8006328:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800632c:	4928      	ldr	r1, [pc, #160]	; (80063d0 <recv_tcp+0xb8>)
 800632e:	4829      	ldr	r0, [pc, #164]	; (80063d4 <recv_tcp+0xbc>)
 8006330:	f008 f82c 	bl	800e38c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8006334:	bb4e      	cbnz	r6, 800638a <recv_tcp+0x72>
 8006336:	4b25      	ldr	r3, [pc, #148]	; (80063cc <recv_tcp+0xb4>)
 8006338:	f240 122d 	movw	r2, #301	; 0x12d
 800633c:	4926      	ldr	r1, [pc, #152]	; (80063d8 <recv_tcp+0xc0>)
 800633e:	4825      	ldr	r0, [pc, #148]	; (80063d4 <recv_tcp+0xbc>)
 8006340:	f008 f824 	bl	800e38c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8006344:	bb14      	cbnz	r4, 800638c <recv_tcp+0x74>
    return ERR_VAL;
 8006346:	f06f 0405 	mvn.w	r4, #5
}
 800634a:	4620      	mov	r0, r4
 800634c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tcp_recved(pcb, p->tot_len);
 8006350:	4638      	mov	r0, r7
 8006352:	8929      	ldrh	r1, [r5, #8]
 8006354:	f004 fa60 	bl	800a818 <tcp_recved>
      pbuf_free(p);
 8006358:	4628      	mov	r0, r5
 800635a:	f003 fe65 	bl	800a028 <pbuf_free>
 800635e:	e7f4      	b.n	800634a <recv_tcp+0x32>
  if (p != NULL) {
 8006360:	b16d      	cbz	r5, 800637e <recv_tcp+0x66>
    len = p->tot_len;
 8006362:	892f      	ldrh	r7, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8006364:	4629      	mov	r1, r5
 8006366:	4640      	mov	r0, r8
 8006368:	f007 fef8 	bl	800e15c <sys_mbox_trypost>
 800636c:	4604      	mov	r4, r0
 800636e:	b948      	cbnz	r0, 8006384 <recv_tcp+0x6c>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8006370:	6a33      	ldr	r3, [r6, #32]
 8006372:	b343      	cbz	r3, 80063c6 <recv_tcp+0xae>
 8006374:	4601      	mov	r1, r0
 8006376:	463a      	mov	r2, r7
 8006378:	4630      	mov	r0, r6
 800637a:	4798      	blx	r3
 800637c:	e7e5      	b.n	800634a <recv_tcp+0x32>
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800637e:	4d17      	ldr	r5, [pc, #92]	; (80063dc <recv_tcp+0xc4>)
    len = 0;
 8006380:	2700      	movs	r7, #0
 8006382:	e7ef      	b.n	8006364 <recv_tcp+0x4c>
    return ERR_MEM;
 8006384:	f04f 34ff 	mov.w	r4, #4294967295
 8006388:	e7df      	b.n	800634a <recv_tcp+0x32>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800638a:	b144      	cbz	r4, 800639e <recv_tcp+0x86>
 800638c:	4b0f      	ldr	r3, [pc, #60]	; (80063cc <recv_tcp+0xb4>)
 800638e:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8006392:	4913      	ldr	r1, [pc, #76]	; (80063e0 <recv_tcp+0xc8>)
 8006394:	480f      	ldr	r0, [pc, #60]	; (80063d4 <recv_tcp+0xbc>)
 8006396:	f007 fff9 	bl	800e38c <iprintf>
  if (conn == NULL) {
 800639a:	2e00      	cmp	r6, #0
 800639c:	d0d3      	beq.n	8006346 <recv_tcp+0x2e>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800639e:	6873      	ldr	r3, [r6, #4]
 80063a0:	42bb      	cmp	r3, r7
 80063a2:	d006      	beq.n	80063b2 <recv_tcp+0x9a>
 80063a4:	4b09      	ldr	r3, [pc, #36]	; (80063cc <recv_tcp+0xb4>)
 80063a6:	f240 1235 	movw	r2, #309	; 0x135
 80063aa:	490e      	ldr	r1, [pc, #56]	; (80063e4 <recv_tcp+0xcc>)
 80063ac:	4809      	ldr	r0, [pc, #36]	; (80063d4 <recv_tcp+0xbc>)
 80063ae:	f007 ffed 	bl	800e38c <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80063b2:	f106 0810 	add.w	r8, r6, #16
 80063b6:	4640      	mov	r0, r8
 80063b8:	f007 ff0d 	bl	800e1d6 <sys_mbox_valid>
 80063bc:	4604      	mov	r4, r0
 80063be:	2800      	cmp	r0, #0
 80063c0:	d1ce      	bne.n	8006360 <recv_tcp+0x48>
    if (p != NULL) {
 80063c2:	2d00      	cmp	r5, #0
 80063c4:	d1c4      	bne.n	8006350 <recv_tcp+0x38>
    return ERR_OK;
 80063c6:	2400      	movs	r4, #0
 80063c8:	e7bf      	b.n	800634a <recv_tcp+0x32>
 80063ca:	bf00      	nop
 80063cc:	08013846 	.word	0x08013846
 80063d0:	08013aeb 	.word	0x08013aeb
 80063d4:	0801342c 	.word	0x0801342c
 80063d8:	08013b0d 	.word	0x08013b0d
 80063dc:	08013224 	.word	0x08013224
 80063e0:	08013b2c 	.word	0x08013b2c
 80063e4:	08013b44 	.word	0x08013b44

080063e8 <err_tcp>:
{
 80063e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063ec:	460d      	mov	r5, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80063ee:	4604      	mov	r4, r0
 80063f0:	b930      	cbnz	r0, 8006400 <err_tcp+0x18>
 80063f2:	4b45      	ldr	r3, [pc, #276]	; (8006508 <err_tcp+0x120>)
 80063f4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80063f8:	4944      	ldr	r1, [pc, #272]	; (800650c <err_tcp+0x124>)
 80063fa:	4845      	ldr	r0, [pc, #276]	; (8006510 <err_tcp+0x128>)
 80063fc:	f007 ffc6 	bl	800e38c <iprintf>
  SYS_ARCH_PROTECT(lev);
 8006400:	f007 ff64 	bl	800e2cc <sys_arch_protect>
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8006404:	7e23      	ldrb	r3, [r4, #24]
  conn->pcb.tcp = NULL;
 8006406:	2600      	movs	r6, #0
  old_state = conn->state;
 8006408:	7867      	ldrb	r7, [r4, #1]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800640a:	f043 0301 	orr.w	r3, r3, #1
  conn->pending_err = err;
 800640e:	7225      	strb	r5, [r4, #8]
  conn->pcb.tcp = NULL;
 8006410:	6066      	str	r6, [r4, #4]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8006412:	7623      	strb	r3, [r4, #24]
  conn->state = NETCONN_NONE;
 8006414:	7066      	strb	r6, [r4, #1]
  SYS_ARCH_UNPROTECT(lev);
 8006416:	f007 ff65 	bl	800e2e4 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800641a:	6a23      	ldr	r3, [r4, #32]
 800641c:	b11b      	cbz	r3, 8006426 <err_tcp+0x3e>
 800641e:	4632      	mov	r2, r6
 8006420:	2104      	movs	r1, #4
 8006422:	4620      	mov	r0, r4
 8006424:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8006426:	6a23      	ldr	r3, [r4, #32]
 8006428:	b11b      	cbz	r3, 8006432 <err_tcp+0x4a>
 800642a:	2200      	movs	r2, #0
 800642c:	4620      	mov	r0, r4
 800642e:	4611      	mov	r1, r2
 8006430:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8006432:	6a23      	ldr	r3, [r4, #32]
 8006434:	b11b      	cbz	r3, 800643e <err_tcp+0x56>
 8006436:	2200      	movs	r2, #0
 8006438:	2102      	movs	r1, #2
 800643a:	4620      	mov	r0, r4
 800643c:	4798      	blx	r3
  switch (err) {
 800643e:	f105 030f 	add.w	r3, r5, #15
 8006442:	b2db      	uxtb	r3, r3
 8006444:	2b02      	cmp	r3, #2
 8006446:	d846      	bhi.n	80064d6 <err_tcp+0xee>
 8006448:	4a32      	ldr	r2, [pc, #200]	; (8006514 <err_tcp+0x12c>)
 800644a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800644e:	685e      	ldr	r6, [r3, #4]
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8006450:	f104 0810 	add.w	r8, r4, #16
 8006454:	4640      	mov	r0, r8
 8006456:	f007 febe 	bl	800e1d6 <sys_mbox_valid>
 800645a:	b118      	cbz	r0, 8006464 <err_tcp+0x7c>
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800645c:	4631      	mov	r1, r6
 800645e:	4640      	mov	r0, r8
 8006460:	f007 fe7c 	bl	800e15c <sys_mbox_trypost>
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8006464:	f104 0814 	add.w	r8, r4, #20
 8006468:	4640      	mov	r0, r8
 800646a:	f007 feb4 	bl	800e1d6 <sys_mbox_valid>
 800646e:	b118      	cbz	r0, 8006478 <err_tcp+0x90>
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8006470:	4631      	mov	r1, r6
 8006472:	4640      	mov	r0, r8
 8006474:	f007 fe72 	bl	800e15c <sys_mbox_trypost>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8006478:	2f01      	cmp	r7, #1
 800647a:	d002      	beq.n	8006482 <err_tcp+0x9a>
 800647c:	1efb      	subs	r3, r7, #3
 800647e:	2b01      	cmp	r3, #1
 8006480:	d834      	bhi.n	80064ec <err_tcp+0x104>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8006482:	7e23      	ldrb	r3, [r4, #24]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8006484:	f023 0204 	bic.w	r2, r3, #4
    if (!was_nonblocking_connect) {
 8006488:	075b      	lsls	r3, r3, #29
    SET_NONBLOCKING_CONNECT(conn, 0);
 800648a:	7622      	strb	r2, [r4, #24]
    if (!was_nonblocking_connect) {
 800648c:	d439      	bmi.n	8006502 <err_tcp+0x11a>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800648e:	69e3      	ldr	r3, [r4, #28]
 8006490:	b933      	cbnz	r3, 80064a0 <err_tcp+0xb8>
 8006492:	4b1d      	ldr	r3, [pc, #116]	; (8006508 <err_tcp+0x120>)
 8006494:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8006498:	491f      	ldr	r1, [pc, #124]	; (8006518 <err_tcp+0x130>)
 800649a:	481d      	ldr	r0, [pc, #116]	; (8006510 <err_tcp+0x128>)
 800649c:	f007 ff76 	bl	800e38c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 80064a0:	2f04      	cmp	r7, #4
        conn->current_msg->err = ERR_OK;
 80064a2:	69e3      	ldr	r3, [r4, #28]
        conn->current_msg->err = err;
 80064a4:	bf14      	ite	ne
 80064a6:	711d      	strbne	r5, [r3, #4]
        conn->current_msg->err = ERR_OK;
 80064a8:	2200      	moveq	r2, #0
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80064aa:	681d      	ldr	r5, [r3, #0]
        conn->current_msg->err = ERR_OK;
 80064ac:	bf08      	it	eq
 80064ae:	711a      	strbeq	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80064b0:	350c      	adds	r5, #12
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80064b2:	4628      	mov	r0, r5
 80064b4:	f007 fecf 	bl	800e256 <sys_sem_valid>
 80064b8:	b930      	cbnz	r0, 80064c8 <err_tcp+0xe0>
 80064ba:	4b13      	ldr	r3, [pc, #76]	; (8006508 <err_tcp+0x120>)
 80064bc:	f240 12ef 	movw	r2, #495	; 0x1ef
 80064c0:	4916      	ldr	r1, [pc, #88]	; (800651c <err_tcp+0x134>)
 80064c2:	4813      	ldr	r0, [pc, #76]	; (8006510 <err_tcp+0x128>)
 80064c4:	f007 ff62 	bl	800e38c <iprintf>
      conn->current_msg = NULL;
 80064c8:	2300      	movs	r3, #0
      sys_sem_signal(op_completed_sem);
 80064ca:	4628      	mov	r0, r5
      conn->current_msg = NULL;
 80064cc:	61e3      	str	r3, [r4, #28]
}
 80064ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      sys_sem_signal(op_completed_sem);
 80064d2:	f007 beba 	b.w	800e24a <sys_sem_signal>
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80064d6:	b13d      	cbz	r5, 80064e8 <err_tcp+0x100>
 80064d8:	4b0b      	ldr	r3, [pc, #44]	; (8006508 <err_tcp+0x120>)
 80064da:	227d      	movs	r2, #125	; 0x7d
 80064dc:	4910      	ldr	r1, [pc, #64]	; (8006520 <err_tcp+0x138>)
 80064de:	2600      	movs	r6, #0
 80064e0:	480b      	ldr	r0, [pc, #44]	; (8006510 <err_tcp+0x128>)
 80064e2:	f007 ff53 	bl	800e38c <iprintf>
 80064e6:	e7b3      	b.n	8006450 <err_tcp+0x68>
      return NULL;
 80064e8:	462e      	mov	r6, r5
 80064ea:	e7b1      	b.n	8006450 <err_tcp+0x68>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80064ec:	69e3      	ldr	r3, [r4, #28]
 80064ee:	b143      	cbz	r3, 8006502 <err_tcp+0x11a>
 80064f0:	4b05      	ldr	r3, [pc, #20]	; (8006508 <err_tcp+0x120>)
 80064f2:	f240 12f7 	movw	r2, #503	; 0x1f7
 80064f6:	490b      	ldr	r1, [pc, #44]	; (8006524 <err_tcp+0x13c>)
 80064f8:	4805      	ldr	r0, [pc, #20]	; (8006510 <err_tcp+0x128>)
}
 80064fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80064fe:	f007 bf45 	b.w	800e38c <iprintf>
}
 8006502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006506:	bf00      	nop
 8006508:	08013846 	.word	0x08013846
 800650c:	08013987 	.word	0x08013987
 8006510:	0801342c 	.word	0x0801342c
 8006514:	08013224 	.word	0x08013224
 8006518:	080139b1 	.word	0x080139b1
 800651c:	08013b72 	.word	0x08013b72
 8006520:	08013b62 	.word	0x08013b62
 8006524:	08013b8b 	.word	0x08013b8b

08006528 <sent_tcp>:
{
 8006528:	b538      	push	{r3, r4, r5, lr}
 800652a:	4615      	mov	r5, r2
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800652c:	4604      	mov	r4, r0
 800652e:	b970      	cbnz	r0, 800654e <sent_tcp+0x26>
 8006530:	4b16      	ldr	r3, [pc, #88]	; (800658c <sent_tcp+0x64>)
 8006532:	f240 1293 	movw	r2, #403	; 0x193
 8006536:	4916      	ldr	r1, [pc, #88]	; (8006590 <sent_tcp+0x68>)
 8006538:	4816      	ldr	r0, [pc, #88]	; (8006594 <sent_tcp+0x6c>)
 800653a:	f007 ff27 	bl	800e38c <iprintf>
}
 800653e:	2000      	movs	r0, #0
 8006540:	bd38      	pop	{r3, r4, r5, pc}
    } else if (conn->state == NETCONN_CLOSE) {
 8006542:	2904      	cmp	r1, #4
 8006544:	d108      	bne.n	8006558 <sent_tcp+0x30>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8006546:	2101      	movs	r1, #1
 8006548:	f7ff fdb4 	bl	80060b4 <lwip_netconn_do_close_internal>
 800654c:	e004      	b.n	8006558 <sent_tcp+0x30>
    if (conn->state == NETCONN_WRITE) {
 800654e:	7841      	ldrb	r1, [r0, #1]
 8006550:	2901      	cmp	r1, #1
 8006552:	d1f6      	bne.n	8006542 <sent_tcp+0x1a>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8006554:	f7ff fc84 	bl	8005e60 <lwip_netconn_do_writemore>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8006558:	6863      	ldr	r3, [r4, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d0ef      	beq.n	800653e <sent_tcp+0x16>
 800655e:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
 8006562:	f640 3269 	movw	r2, #2921	; 0xb69
 8006566:	4291      	cmp	r1, r2
 8006568:	d9e9      	bls.n	800653e <sent_tcp+0x16>
 800656a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800656e:	2b04      	cmp	r3, #4
 8006570:	d8e5      	bhi.n	800653e <sent_tcp+0x16>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8006572:	7e23      	ldrb	r3, [r4, #24]
 8006574:	f023 0310 	bic.w	r3, r3, #16
 8006578:	7623      	strb	r3, [r4, #24]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800657a:	6a23      	ldr	r3, [r4, #32]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d0de      	beq.n	800653e <sent_tcp+0x16>
 8006580:	462a      	mov	r2, r5
 8006582:	2102      	movs	r1, #2
 8006584:	4620      	mov	r0, r4
 8006586:	4798      	blx	r3
  return ERR_OK;
 8006588:	e7d9      	b.n	800653e <sent_tcp+0x16>
 800658a:	bf00      	nop
 800658c:	08013846 	.word	0x08013846
 8006590:	08013987 	.word	0x08013987
 8006594:	0801342c 	.word	0x0801342c

08006598 <lwip_netconn_is_err_msg>:
{
 8006598:	b538      	push	{r3, r4, r5, lr}
 800659a:	4605      	mov	r5, r0
  LWIP_ASSERT("err != NULL", err != NULL);
 800659c:	460c      	mov	r4, r1
 800659e:	b929      	cbnz	r1, 80065ac <lwip_netconn_is_err_msg+0x14>
 80065a0:	4b0d      	ldr	r3, [pc, #52]	; (80065d8 <lwip_netconn_is_err_msg+0x40>)
 80065a2:	2285      	movs	r2, #133	; 0x85
 80065a4:	490d      	ldr	r1, [pc, #52]	; (80065dc <lwip_netconn_is_err_msg+0x44>)
 80065a6:	480e      	ldr	r0, [pc, #56]	; (80065e0 <lwip_netconn_is_err_msg+0x48>)
 80065a8:	f007 fef0 	bl	800e38c <iprintf>
  if (msg == &netconn_aborted) {
 80065ac:	4b0d      	ldr	r3, [pc, #52]	; (80065e4 <lwip_netconn_is_err_msg+0x4c>)
 80065ae:	f103 0210 	add.w	r2, r3, #16
 80065b2:	4295      	cmp	r5, r2
 80065b4:	d103      	bne.n	80065be <lwip_netconn_is_err_msg+0x26>
    *err = ERR_ABRT;
 80065b6:	23f3      	movs	r3, #243	; 0xf3
    return 1;
 80065b8:	2001      	movs	r0, #1
    *err = ERR_CLSD;
 80065ba:	7023      	strb	r3, [r4, #0]
}
 80065bc:	bd38      	pop	{r3, r4, r5, pc}
  } else if (msg == &netconn_reset) {
 80065be:	f103 0211 	add.w	r2, r3, #17
 80065c2:	4295      	cmp	r5, r2
 80065c4:	d101      	bne.n	80065ca <lwip_netconn_is_err_msg+0x32>
    *err = ERR_RST;
 80065c6:	23f2      	movs	r3, #242	; 0xf2
 80065c8:	e7f6      	b.n	80065b8 <lwip_netconn_is_err_msg+0x20>
  } else if (msg == &netconn_closed) {
 80065ca:	429d      	cmp	r5, r3
 80065cc:	d101      	bne.n	80065d2 <lwip_netconn_is_err_msg+0x3a>
    *err = ERR_CLSD;
 80065ce:	23f1      	movs	r3, #241	; 0xf1
 80065d0:	e7f2      	b.n	80065b8 <lwip_netconn_is_err_msg+0x20>
  return 0;
 80065d2:	2000      	movs	r0, #0
 80065d4:	e7f2      	b.n	80065bc <lwip_netconn_is_err_msg+0x24>
 80065d6:	bf00      	nop
 80065d8:	08013846 	.word	0x08013846
 80065dc:	08013ba5 	.word	0x08013ba5
 80065e0:	0801342c 	.word	0x0801342c
 80065e4:	08013224 	.word	0x08013224

080065e8 <lwip_netconn_do_newconn>:
{
 80065e8:	b538      	push	{r3, r4, r5, lr}
  msg->err = ERR_OK;
 80065ea:	2300      	movs	r3, #0
  if (msg->conn->pcb.tcp == NULL) {
 80065ec:	6805      	ldr	r5, [r0, #0]
{
 80065ee:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 80065f0:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp == NULL) {
 80065f2:	6868      	ldr	r0, [r5, #4]
 80065f4:	bb28      	cbnz	r0, 8006642 <lwip_netconn_do_newconn+0x5a>
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80065f6:	782b      	ldrb	r3, [r5, #0]
 80065f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065fc:	2b10      	cmp	r3, #16
 80065fe:	d014      	beq.n	800662a <lwip_netconn_do_newconn+0x42>
 8006600:	2b20      	cmp	r3, #32
 8006602:	d11c      	bne.n	800663e <lwip_netconn_do_newconn+0x56>
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8006604:	f007 fcf0 	bl	800dfe8 <udp_new_ip_type>
      if (msg->conn->pcb.udp != NULL) {
 8006608:	6822      	ldr	r2, [r4, #0]
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800660a:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.udp != NULL) {
 800660c:	6850      	ldr	r0, [r2, #4]
 800660e:	b150      	cbz	r0, 8006626 <lwip_netconn_do_newconn+0x3e>
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8006610:	7813      	ldrb	r3, [r2, #0]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8006612:	490c      	ldr	r1, [pc, #48]	; (8006644 <lwip_netconn_do_newconn+0x5c>)
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8006614:	2b22      	cmp	r3, #34	; 0x22
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8006616:	bf04      	itt	eq
 8006618:	2301      	moveq	r3, #1
 800661a:	7403      	strbeq	r3, [r0, #16]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800661c:	f007 fc9e 	bl	800df5c <udp_recv>
  if (msg->conn->pcb.ip == NULL) {
 8006620:	6823      	ldr	r3, [r4, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	b96b      	cbnz	r3, 8006642 <lwip_netconn_do_newconn+0x5a>
    msg->err = ERR_MEM;
 8006626:	23ff      	movs	r3, #255	; 0xff
 8006628:	e00a      	b.n	8006640 <lwip_netconn_do_newconn+0x58>
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800662a:	f004 ff83 	bl	800b534 <tcp_new_ip_type>
 800662e:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8006630:	6820      	ldr	r0, [r4, #0]
 8006632:	6843      	ldr	r3, [r0, #4]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d0f6      	beq.n	8006626 <lwip_netconn_do_newconn+0x3e>
        setup_tcp(msg->conn);
 8006638:	f7ff fbf0 	bl	8005e1c <setup_tcp>
 800663c:	e7f0      	b.n	8006620 <lwip_netconn_do_newconn+0x38>
      msg->err = ERR_VAL;
 800663e:	23fa      	movs	r3, #250	; 0xfa
    msg->err = ERR_MEM;
 8006640:	7123      	strb	r3, [r4, #4]
}
 8006642:	bd38      	pop	{r3, r4, r5, pc}
 8006644:	08005d61 	.word	0x08005d61

08006648 <netconn_alloc>:
{
 8006648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800664a:	4605      	mov	r5, r0
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800664c:	2007      	movs	r0, #7
{
 800664e:	460e      	mov	r6, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8006650:	f003 faa4 	bl	8009b9c <memp_malloc>
  if (conn == NULL) {
 8006654:	4604      	mov	r4, r0
 8006656:	b388      	cbz	r0, 80066bc <netconn_alloc+0x74>
  conn->type = t;
 8006658:	7005      	strb	r5, [r0, #0]
 800665a:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
  conn->pending_err = ERR_OK;
 800665e:	2300      	movs	r3, #0
  switch (NETCONNTYPE_GROUP(t)) {
 8006660:	2d10      	cmp	r5, #16
  conn->pending_err = ERR_OK;
 8006662:	7203      	strb	r3, [r0, #8]
  conn->pcb.tcp = NULL;
 8006664:	6043      	str	r3, [r0, #4]
  switch (NETCONNTYPE_GROUP(t)) {
 8006666:	d00e      	beq.n	8006686 <netconn_alloc+0x3e>
 8006668:	2d20      	cmp	r5, #32
 800666a:	d00c      	beq.n	8006686 <netconn_alloc+0x3e>
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800666c:	4b14      	ldr	r3, [pc, #80]	; (80066c0 <netconn_alloc+0x78>)
 800666e:	f240 22e5 	movw	r2, #741	; 0x2e5
 8006672:	4914      	ldr	r1, [pc, #80]	; (80066c4 <netconn_alloc+0x7c>)
 8006674:	4814      	ldr	r0, [pc, #80]	; (80066c8 <netconn_alloc+0x80>)
 8006676:	f007 fe89 	bl	800e38c <iprintf>
  memp_free(MEMP_NETCONN, conn);
 800667a:	4621      	mov	r1, r4
 800667c:	2007      	movs	r0, #7
  return NULL;
 800667e:	2400      	movs	r4, #0
  memp_free(MEMP_NETCONN, conn);
 8006680:	f003 faa8 	bl	8009bd4 <memp_free>
  return NULL;
 8006684:	e01a      	b.n	80066bc <netconn_alloc+0x74>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8006686:	f104 0710 	add.w	r7, r4, #16
 800668a:	2106      	movs	r1, #6
 800668c:	4638      	mov	r0, r7
 800668e:	f007 fd4b 	bl	800e128 <sys_mbox_new>
 8006692:	4601      	mov	r1, r0
 8006694:	2800      	cmp	r0, #0
 8006696:	d1f0      	bne.n	800667a <netconn_alloc+0x32>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8006698:	f104 000c 	add.w	r0, r4, #12
 800669c:	f007 fda3 	bl	800e1e6 <sys_sem_new>
 80066a0:	4605      	mov	r5, r0
 80066a2:	b118      	cbz	r0, 80066ac <netconn_alloc+0x64>
    sys_mbox_free(&conn->recvmbox);
 80066a4:	4638      	mov	r0, r7
 80066a6:	f007 fd4f 	bl	800e148 <sys_mbox_free>
    goto free_and_return;
 80066aa:	e7e6      	b.n	800667a <netconn_alloc+0x32>
  sys_mbox_set_invalid(&conn->acceptmbox);
 80066ac:	f104 0014 	add.w	r0, r4, #20
 80066b0:	f007 fd96 	bl	800e1e0 <sys_mbox_set_invalid>
  conn->state        = NETCONN_NONE;
 80066b4:	7065      	strb	r5, [r4, #1]
  conn->flags = init_flags;
 80066b6:	7625      	strb	r5, [r4, #24]
  conn->current_msg  = NULL;
 80066b8:	e9c4 5607 	strd	r5, r6, [r4, #28]
}
 80066bc:	4620      	mov	r0, r4
 80066be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066c0:	08013846 	.word	0x08013846
 80066c4:	08013bb1 	.word	0x08013bb1
 80066c8:	0801342c 	.word	0x0801342c

080066cc <netconn_free>:
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 80066cc:	6843      	ldr	r3, [r0, #4]
{
 80066ce:	b513      	push	{r0, r1, r4, lr}
 80066d0:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 80066d2:	b133      	cbz	r3, 80066e2 <netconn_free+0x16>
 80066d4:	4b16      	ldr	r3, [pc, #88]	; (8006730 <netconn_free+0x64>)
 80066d6:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80066da:	4916      	ldr	r1, [pc, #88]	; (8006734 <netconn_free+0x68>)
 80066dc:	4816      	ldr	r0, [pc, #88]	; (8006738 <netconn_free+0x6c>)
 80066de:	f007 fe55 	bl	800e38c <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80066e2:	f104 0010 	add.w	r0, r4, #16
 80066e6:	f007 fd76 	bl	800e1d6 <sys_mbox_valid>
 80066ea:	b130      	cbz	r0, 80066fa <netconn_free+0x2e>
 80066ec:	4b10      	ldr	r3, [pc, #64]	; (8006730 <netconn_free+0x64>)
 80066ee:	f240 3223 	movw	r2, #803	; 0x323
 80066f2:	4912      	ldr	r1, [pc, #72]	; (800673c <netconn_free+0x70>)
 80066f4:	4810      	ldr	r0, [pc, #64]	; (8006738 <netconn_free+0x6c>)
 80066f6:	f007 fe49 	bl	800e38c <iprintf>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80066fa:	f104 0014 	add.w	r0, r4, #20
 80066fe:	f007 fd6a 	bl	800e1d6 <sys_mbox_valid>
 8006702:	b130      	cbz	r0, 8006712 <netconn_free+0x46>
 8006704:	4b0a      	ldr	r3, [pc, #40]	; (8006730 <netconn_free+0x64>)
 8006706:	f240 3226 	movw	r2, #806	; 0x326
 800670a:	490d      	ldr	r1, [pc, #52]	; (8006740 <netconn_free+0x74>)
 800670c:	480a      	ldr	r0, [pc, #40]	; (8006738 <netconn_free+0x6c>)
 800670e:	f007 fe3d 	bl	800e38c <iprintf>
  sys_sem_free(&conn->op_completed);
 8006712:	f104 000c 	add.w	r0, r4, #12
 8006716:	9001      	str	r0, [sp, #4]
 8006718:	f007 fd9a 	bl	800e250 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800671c:	9801      	ldr	r0, [sp, #4]
 800671e:	f007 fd9f 	bl	800e260 <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 8006722:	4621      	mov	r1, r4
 8006724:	2007      	movs	r0, #7
}
 8006726:	b002      	add	sp, #8
 8006728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_NETCONN, conn);
 800672c:	f003 ba52 	b.w	8009bd4 <memp_free>
 8006730:	08013846 	.word	0x08013846
 8006734:	08013bd7 	.word	0x08013bd7
 8006738:	0801342c 	.word	0x0801342c
 800673c:	08013c05 	.word	0x08013c05
 8006740:	08013c3f 	.word	0x08013c3f

08006744 <netconn_drain>:
{
 8006744:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (sys_mbox_valid(&conn->recvmbox)) {
 8006746:	f100 0510 	add.w	r5, r0, #16
{
 800674a:	4604      	mov	r4, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 800674c:	4628      	mov	r0, r5
 800674e:	f007 fd42 	bl	800e1d6 <sys_mbox_valid>
 8006752:	b158      	cbz	r0, 800676c <netconn_drain+0x28>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8006754:	a901      	add	r1, sp, #4
 8006756:	4628      	mov	r0, r5
 8006758:	f007 fd2c 	bl	800e1b4 <sys_arch_mbox_tryfetch>
 800675c:	3001      	adds	r0, #1
 800675e:	d118      	bne.n	8006792 <netconn_drain+0x4e>
    sys_mbox_free(&conn->recvmbox);
 8006760:	4628      	mov	r0, r5
 8006762:	f007 fcf1 	bl	800e148 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8006766:	4628      	mov	r0, r5
 8006768:	f007 fd3a 	bl	800e1e0 <sys_mbox_set_invalid>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800676c:	3414      	adds	r4, #20
 800676e:	4620      	mov	r0, r4
 8006770:	f007 fd31 	bl	800e1d6 <sys_mbox_valid>
 8006774:	b158      	cbz	r0, 800678e <netconn_drain+0x4a>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8006776:	a901      	add	r1, sp, #4
 8006778:	4620      	mov	r0, r4
 800677a:	f007 fd1b 	bl	800e1b4 <sys_arch_mbox_tryfetch>
 800677e:	3001      	adds	r0, #1
 8006780:	d11a      	bne.n	80067b8 <netconn_drain+0x74>
    sys_mbox_free(&conn->acceptmbox);
 8006782:	4620      	mov	r0, r4
 8006784:	f007 fce0 	bl	800e148 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8006788:	4620      	mov	r0, r4
 800678a:	f007 fd29 	bl	800e1e0 <sys_mbox_set_invalid>
}
 800678e:	b002      	add	sp, #8
 8006790:	bd70      	pop	{r4, r5, r6, pc}
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8006792:	7823      	ldrb	r3, [r4, #0]
 8006794:	9801      	ldr	r0, [sp, #4]
 8006796:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800679a:	2b10      	cmp	r3, #16
 800679c:	d109      	bne.n	80067b2 <netconn_drain+0x6e>
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800679e:	f10d 0103 	add.w	r1, sp, #3
 80067a2:	f7ff fef9 	bl	8006598 <lwip_netconn_is_err_msg>
 80067a6:	2800      	cmp	r0, #0
 80067a8:	d1d4      	bne.n	8006754 <netconn_drain+0x10>
            pbuf_free((struct pbuf *)mem);
 80067aa:	9801      	ldr	r0, [sp, #4]
 80067ac:	f003 fc3c 	bl	800a028 <pbuf_free>
 80067b0:	e7d0      	b.n	8006754 <netconn_drain+0x10>
          netbuf_delete((struct netbuf *)mem);
 80067b2:	f000 faa7 	bl	8006d04 <netbuf_delete>
 80067b6:	e7cd      	b.n	8006754 <netconn_drain+0x10>
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 80067b8:	f10d 0103 	add.w	r1, sp, #3
 80067bc:	9801      	ldr	r0, [sp, #4]
 80067be:	f7ff feeb 	bl	8006598 <lwip_netconn_is_err_msg>
 80067c2:	4606      	mov	r6, r0
 80067c4:	2800      	cmp	r0, #0
 80067c6:	d1d6      	bne.n	8006776 <netconn_drain+0x32>
          struct netconn *newconn = (struct netconn *)mem;
 80067c8:	9d01      	ldr	r5, [sp, #4]
          netconn_drain(newconn);
 80067ca:	4628      	mov	r0, r5
 80067cc:	f7ff ffba 	bl	8006744 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 80067d0:	6868      	ldr	r0, [r5, #4]
 80067d2:	b110      	cbz	r0, 80067da <netconn_drain+0x96>
            tcp_abort(newconn->pcb.tcp);
 80067d4:	f004 fdbe 	bl	800b354 <tcp_abort>
            newconn->pcb.tcp = NULL;
 80067d8:	606e      	str	r6, [r5, #4]
          netconn_free(newconn);
 80067da:	4628      	mov	r0, r5
 80067dc:	f7ff ff76 	bl	80066cc <netconn_free>
 80067e0:	e7c9      	b.n	8006776 <netconn_drain+0x32>
	...

080067e4 <accept_function>:
{
 80067e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067e6:	460f      	mov	r7, r1
 80067e8:	4616      	mov	r6, r2
  if (conn == NULL) {
 80067ea:	4605      	mov	r5, r0
 80067ec:	b920      	cbnz	r0, 80067f8 <accept_function+0x14>
    return ERR_VAL;
 80067ee:	f06f 0405 	mvn.w	r4, #5
}
 80067f2:	4620      	mov	r0, r4
 80067f4:	b003      	add	sp, #12
 80067f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80067f8:	f100 0414 	add.w	r4, r0, #20
 80067fc:	4620      	mov	r0, r4
 80067fe:	f007 fcea 	bl	800e1d6 <sys_mbox_valid>
 8006802:	2800      	cmp	r0, #0
 8006804:	d0f3      	beq.n	80067ee <accept_function+0xa>
  if (newpcb == NULL) {
 8006806:	b96f      	cbnz	r7, 8006824 <accept_function+0x40>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8006808:	492f      	ldr	r1, [pc, #188]	; (80068c8 <accept_function+0xe4>)
 800680a:	4620      	mov	r0, r4
 800680c:	f007 fca6 	bl	800e15c <sys_mbox_trypost>
 8006810:	4602      	mov	r2, r0
 8006812:	2800      	cmp	r0, #0
 8006814:	d1eb      	bne.n	80067ee <accept_function+0xa>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8006816:	6a2b      	ldr	r3, [r5, #32]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d0e8      	beq.n	80067ee <accept_function+0xa>
 800681c:	4601      	mov	r1, r0
 800681e:	4628      	mov	r0, r5
 8006820:	4798      	blx	r3
 8006822:	e7e4      	b.n	80067ee <accept_function+0xa>
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8006824:	b136      	cbz	r6, 8006834 <accept_function+0x50>
 8006826:	4b29      	ldr	r3, [pc, #164]	; (80068cc <accept_function+0xe8>)
 8006828:	f240 222a 	movw	r2, #554	; 0x22a
 800682c:	4928      	ldr	r1, [pc, #160]	; (80068d0 <accept_function+0xec>)
 800682e:	4829      	ldr	r0, [pc, #164]	; (80068d4 <accept_function+0xf0>)
 8006830:	f007 fdac 	bl	800e38c <iprintf>
  newconn = netconn_alloc(conn->type, conn->callback);
 8006834:	6a29      	ldr	r1, [r5, #32]
 8006836:	7828      	ldrb	r0, [r5, #0]
 8006838:	f7ff ff06 	bl	8006648 <netconn_alloc>
  if (newconn == NULL) {
 800683c:	4606      	mov	r6, r0
 800683e:	b968      	cbnz	r0, 800685c <accept_function+0x78>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8006840:	4921      	ldr	r1, [pc, #132]	; (80068c8 <accept_function+0xe4>)
 8006842:	4620      	mov	r0, r4
 8006844:	f007 fc8a 	bl	800e15c <sys_mbox_trypost>
 8006848:	4602      	mov	r2, r0
 800684a:	b920      	cbnz	r0, 8006856 <accept_function+0x72>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800684c:	6a2b      	ldr	r3, [r5, #32]
 800684e:	b113      	cbz	r3, 8006856 <accept_function+0x72>
 8006850:	4601      	mov	r1, r0
 8006852:	4628      	mov	r0, r5
 8006854:	4798      	blx	r3
    return ERR_MEM;
 8006856:	f04f 34ff 	mov.w	r4, #4294967295
 800685a:	e7ca      	b.n	80067f2 <accept_function+0xe>
  newconn->pcb.tcp = newpcb;
 800685c:	6047      	str	r7, [r0, #4]
  setup_tcp(newconn);
 800685e:	f7ff fadd 	bl	8005e1c <setup_tcp>
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8006862:	4620      	mov	r0, r4
 8006864:	4631      	mov	r1, r6
 8006866:	f007 fc79 	bl	800e15c <sys_mbox_trypost>
 800686a:	4604      	mov	r4, r0
 800686c:	b318      	cbz	r0, 80068b6 <accept_function+0xd2>
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800686e:	6870      	ldr	r0, [r6, #4]
    tcp_arg(pcb, NULL);
 8006870:	2100      	movs	r1, #0
 8006872:	9001      	str	r0, [sp, #4]
 8006874:	f004 f824 	bl	800a8c0 <tcp_arg>
    tcp_recv(pcb, NULL);
 8006878:	9801      	ldr	r0, [sp, #4]
 800687a:	2100      	movs	r1, #0
 800687c:	f004 f824 	bl	800a8c8 <tcp_recv>
    tcp_sent(pcb, NULL);
 8006880:	9801      	ldr	r0, [sp, #4]
 8006882:	2100      	movs	r1, #0
 8006884:	f004 f838 	bl	800a8f8 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8006888:	2200      	movs	r2, #0
 800688a:	9801      	ldr	r0, [sp, #4]
 800688c:	4611      	mov	r1, r2
 800688e:	f004 f867 	bl	800a960 <tcp_poll>
    tcp_err(pcb, NULL);
 8006892:	2100      	movs	r1, #0
 8006894:	9801      	ldr	r0, [sp, #4]
 8006896:	f004 f845 	bl	800a924 <tcp_err>
    newconn->pcb.tcp = NULL;
 800689a:	2300      	movs	r3, #0
    sys_mbox_free(&newconn->recvmbox);
 800689c:	f106 0010 	add.w	r0, r6, #16
    newconn->pcb.tcp = NULL;
 80068a0:	6073      	str	r3, [r6, #4]
    sys_mbox_free(&newconn->recvmbox);
 80068a2:	9001      	str	r0, [sp, #4]
 80068a4:	f007 fc50 	bl	800e148 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 80068a8:	9801      	ldr	r0, [sp, #4]
 80068aa:	f007 fc99 	bl	800e1e0 <sys_mbox_set_invalid>
    netconn_free(newconn);
 80068ae:	4630      	mov	r0, r6
 80068b0:	f7ff ff0c 	bl	80066cc <netconn_free>
    return ERR_MEM;
 80068b4:	e7cf      	b.n	8006856 <accept_function+0x72>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80068b6:	6a2b      	ldr	r3, [r5, #32]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d09a      	beq.n	80067f2 <accept_function+0xe>
 80068bc:	4602      	mov	r2, r0
 80068be:	4601      	mov	r1, r0
 80068c0:	4628      	mov	r0, r5
 80068c2:	4798      	blx	r3
 80068c4:	e795      	b.n	80067f2 <accept_function+0xe>
 80068c6:	bf00      	nop
 80068c8:	08013234 	.word	0x08013234
 80068cc:	08013846 	.word	0x08013846
 80068d0:	08013c7b 	.word	0x08013c7b
 80068d4:	0801342c 	.word	0x0801342c

080068d8 <lwip_netconn_do_delconn>:
  enum netconn_state state = msg->conn->state;
 80068d8:	6803      	ldr	r3, [r0, #0]
{
 80068da:	b570      	push	{r4, r5, r6, lr}
  enum netconn_state state = msg->conn->state;
 80068dc:	785d      	ldrb	r5, [r3, #1]
{
 80068de:	4604      	mov	r4, r0
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80068e0:	b16d      	cbz	r5, 80068fe <lwip_netconn_do_delconn+0x26>
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068e8:	2b10      	cmp	r3, #16
 80068ea:	d006      	beq.n	80068fa <lwip_netconn_do_delconn+0x22>
 80068ec:	4b37      	ldr	r3, [pc, #220]	; (80069cc <lwip_netconn_do_delconn+0xf4>)
 80068ee:	f240 425e 	movw	r2, #1118	; 0x45e
 80068f2:	4937      	ldr	r1, [pc, #220]	; (80069d0 <lwip_netconn_do_delconn+0xf8>)
 80068f4:	4837      	ldr	r0, [pc, #220]	; (80069d4 <lwip_netconn_do_delconn+0xfc>)
 80068f6:	f007 fd49 	bl	800e38c <iprintf>
  if (((state != NETCONN_NONE) &&
 80068fa:	2d02      	cmp	r5, #2
 80068fc:	d121      	bne.n	8006942 <lwip_netconn_do_delconn+0x6a>
    msg->err = ERR_OK;
 80068fe:	2500      	movs	r5, #0
    netconn_drain(msg->conn);
 8006900:	6820      	ldr	r0, [r4, #0]
    msg->err = ERR_OK;
 8006902:	7125      	strb	r5, [r4, #4]
    netconn_drain(msg->conn);
 8006904:	f7ff ff1e 	bl	8006744 <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 8006908:	6822      	ldr	r2, [r4, #0]
 800690a:	6850      	ldr	r0, [r2, #4]
 800690c:	b160      	cbz	r0, 8006928 <lwip_netconn_do_delconn+0x50>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800690e:	7813      	ldrb	r3, [r2, #0]
 8006910:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006914:	2b10      	cmp	r3, #16
 8006916:	d022      	beq.n	800695e <lwip_netconn_do_delconn+0x86>
 8006918:	2b20      	cmp	r3, #32
 800691a:	d102      	bne.n	8006922 <lwip_netconn_do_delconn+0x4a>
          msg->conn->pcb.udp->recv_arg = NULL;
 800691c:	61c5      	str	r5, [r0, #28]
          udp_remove(msg->conn->pcb.udp);
 800691e:	f007 fb2f 	bl	800df80 <udp_remove>
      msg->conn->pcb.tcp = NULL;
 8006922:	6823      	ldr	r3, [r4, #0]
 8006924:	2200      	movs	r2, #0
 8006926:	605a      	str	r2, [r3, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8006928:	6820      	ldr	r0, [r4, #0]
 800692a:	6a03      	ldr	r3, [r0, #32]
 800692c:	b113      	cbz	r3, 8006934 <lwip_netconn_do_delconn+0x5c>
 800692e:	2200      	movs	r2, #0
 8006930:	4611      	mov	r1, r2
 8006932:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8006934:	6820      	ldr	r0, [r4, #0]
 8006936:	6a03      	ldr	r3, [r0, #32]
 8006938:	b15b      	cbz	r3, 8006952 <lwip_netconn_do_delconn+0x7a>
 800693a:	2200      	movs	r2, #0
 800693c:	2102      	movs	r1, #2
 800693e:	4798      	blx	r3
 8006940:	e007      	b.n	8006952 <lwip_netconn_do_delconn+0x7a>
       (state != NETCONN_LISTEN) &&
 8006942:	2d03      	cmp	r5, #3
 8006944:	d103      	bne.n	800694e <lwip_netconn_do_delconn+0x76>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8006946:	6823      	ldr	r3, [r4, #0]
 8006948:	7e1b      	ldrb	r3, [r3, #24]
 800694a:	075b      	lsls	r3, r3, #29
 800694c:	d4d7      	bmi.n	80068fe <lwip_netconn_do_delconn+0x26>
    msg->err = ERR_INPROGRESS;
 800694e:	23fb      	movs	r3, #251	; 0xfb
 8006950:	7123      	strb	r3, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8006952:	6820      	ldr	r0, [r4, #0]
}
 8006954:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8006958:	300c      	adds	r0, #12
 800695a:	f007 bc7c 	b.w	800e256 <sys_sem_valid>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800695e:	69d3      	ldr	r3, [r2, #28]
 8006960:	b133      	cbz	r3, 8006970 <lwip_netconn_do_delconn+0x98>
 8006962:	4b1a      	ldr	r3, [pc, #104]	; (80069cc <lwip_netconn_do_delconn+0xf4>)
 8006964:	f240 4294 	movw	r2, #1172	; 0x494
 8006968:	491b      	ldr	r1, [pc, #108]	; (80069d8 <lwip_netconn_do_delconn+0x100>)
 800696a:	481a      	ldr	r0, [pc, #104]	; (80069d4 <lwip_netconn_do_delconn+0xfc>)
 800696c:	f007 fd0e 	bl	800e38c <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8006970:	6820      	ldr	r0, [r4, #0]
 8006972:	2304      	movs	r3, #4
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8006974:	2100      	movs	r1, #0
          msg->conn->state = NETCONN_CLOSE;
 8006976:	7043      	strb	r3, [r0, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8006978:	2303      	movs	r3, #3
 800697a:	7223      	strb	r3, [r4, #8]
          msg->conn->current_msg = msg;
 800697c:	61c4      	str	r4, [r0, #28]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800697e:	f7ff fb99 	bl	80060b4 <lwip_netconn_do_close_internal>
 8006982:	b308      	cbz	r0, 80069c8 <lwip_netconn_do_delconn+0xf0>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8006984:	6823      	ldr	r3, [r4, #0]
 8006986:	785b      	ldrb	r3, [r3, #1]
 8006988:	2b04      	cmp	r3, #4
 800698a:	d006      	beq.n	800699a <lwip_netconn_do_delconn+0xc2>
 800698c:	4b0f      	ldr	r3, [pc, #60]	; (80069cc <lwip_netconn_do_delconn+0xf4>)
 800698e:	f240 429a 	movw	r2, #1178	; 0x49a
 8006992:	4912      	ldr	r1, [pc, #72]	; (80069dc <lwip_netconn_do_delconn+0x104>)
 8006994:	480f      	ldr	r0, [pc, #60]	; (80069d4 <lwip_netconn_do_delconn+0xfc>)
 8006996:	f007 fcf9 	bl	800e38c <iprintf>
            UNLOCK_TCPIP_CORE();
 800699a:	4811      	ldr	r0, [pc, #68]	; (80069e0 <lwip_netconn_do_delconn+0x108>)
 800699c:	f007 fc83 	bl	800e2a6 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80069a0:	6820      	ldr	r0, [r4, #0]
 80069a2:	2100      	movs	r1, #0
 80069a4:	300c      	adds	r0, #12
 80069a6:	f007 fc35 	bl	800e214 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 80069aa:	480d      	ldr	r0, [pc, #52]	; (80069e0 <lwip_netconn_do_delconn+0x108>)
 80069ac:	f007 fc76 	bl	800e29c <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80069b0:	6823      	ldr	r3, [r4, #0]
 80069b2:	785b      	ldrb	r3, [r3, #1]
 80069b4:	b143      	cbz	r3, 80069c8 <lwip_netconn_do_delconn+0xf0>
 80069b6:	4b05      	ldr	r3, [pc, #20]	; (80069cc <lwip_netconn_do_delconn+0xf4>)
 80069b8:	f240 429e 	movw	r2, #1182	; 0x49e
 80069bc:	4907      	ldr	r1, [pc, #28]	; (80069dc <lwip_netconn_do_delconn+0x104>)
 80069be:	4805      	ldr	r0, [pc, #20]	; (80069d4 <lwip_netconn_do_delconn+0xfc>)
}
 80069c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80069c4:	f007 bce2 	b.w	800e38c <iprintf>
}
 80069c8:	bd70      	pop	{r4, r5, r6, pc}
 80069ca:	bf00      	nop
 80069cc:	08013846 	.word	0x08013846
 80069d0:	08013ca2 	.word	0x08013ca2
 80069d4:	0801342c 	.word	0x0801342c
 80069d8:	08013cb6 	.word	0x08013cb6
 80069dc:	08013cd1 	.word	0x08013cd1
 80069e0:	2000a7f4 	.word	0x2000a7f4

080069e4 <lwip_netconn_do_bind>:
  if (msg->conn->pcb.tcp != NULL) {
 80069e4:	6803      	ldr	r3, [r0, #0]
{
 80069e6:	b510      	push	{r4, lr}
 80069e8:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 80069ea:	6858      	ldr	r0, [r3, #4]
 80069ec:	b188      	cbz	r0, 8006a12 <lwip_netconn_do_bind+0x2e>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069f4:	2b10      	cmp	r3, #16
 80069f6:	d007      	beq.n	8006a08 <lwip_netconn_do_bind+0x24>
 80069f8:	2b20      	cmp	r3, #32
 80069fa:	d10a      	bne.n	8006a12 <lwip_netconn_do_bind+0x2e>
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80069fc:	89a2      	ldrh	r2, [r4, #12]
 80069fe:	68a1      	ldr	r1, [r4, #8]
 8006a00:	f007 f930 	bl	800dc64 <udp_bind>
  msg->err = err;
 8006a04:	7120      	strb	r0, [r4, #4]
}
 8006a06:	bd10      	pop	{r4, pc}
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8006a08:	89a2      	ldrh	r2, [r4, #12]
 8006a0a:	68a1      	ldr	r1, [r4, #8]
 8006a0c:	f003 fe12 	bl	800a634 <tcp_bind>
        break;
 8006a10:	e7f8      	b.n	8006a04 <lwip_netconn_do_bind+0x20>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8006a12:	f06f 0005 	mvn.w	r0, #5
 8006a16:	e7f5      	b.n	8006a04 <lwip_netconn_do_bind+0x20>

08006a18 <lwip_netconn_do_listen>:
  if (msg->conn->pcb.tcp != NULL) {
 8006a18:	6803      	ldr	r3, [r0, #0]
{
 8006a1a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a1c:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 8006a1e:	6858      	ldr	r0, [r3, #4]
 8006a20:	2800      	cmp	r0, #0
 8006a22:	d04f      	beq.n	8006ac4 <lwip_netconn_do_listen+0xac>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8006a24:	781a      	ldrb	r2, [r3, #0]
 8006a26:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8006a2a:	2a10      	cmp	r2, #16
 8006a2c:	d14c      	bne.n	8006ac8 <lwip_netconn_do_listen+0xb0>
      if (msg->conn->state == NETCONN_NONE) {
 8006a2e:	785b      	ldrb	r3, [r3, #1]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d143      	bne.n	8006abc <lwip_netconn_do_listen+0xa4>
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8006a34:	7d03      	ldrb	r3, [r0, #20]
 8006a36:	b11b      	cbz	r3, 8006a40 <lwip_netconn_do_listen+0x28>
          err = ERR_VAL;
 8006a38:	23fa      	movs	r3, #250	; 0xfa
      err = ERR_ARG;
 8006a3a:	f88d 3007 	strb.w	r3, [sp, #7]
 8006a3e:	e031      	b.n	8006aa4 <lwip_netconn_do_listen+0x8c>
          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8006a40:	f10d 0207 	add.w	r2, sp, #7
 8006a44:	21ff      	movs	r1, #255	; 0xff
 8006a46:	f003 fe4b 	bl	800a6e0 <tcp_listen_with_backlog_and_err>
          if (lpcb == NULL) {
 8006a4a:	4605      	mov	r5, r0
 8006a4c:	b350      	cbz	r0, 8006aa4 <lwip_netconn_do_listen+0x8c>
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8006a4e:	6820      	ldr	r0, [r4, #0]
 8006a50:	3010      	adds	r0, #16
 8006a52:	f007 fbc0 	bl	800e1d6 <sys_mbox_valid>
 8006a56:	b138      	cbz	r0, 8006a68 <lwip_netconn_do_listen+0x50>
              sys_mbox_free(&msg->conn->recvmbox);
 8006a58:	6820      	ldr	r0, [r4, #0]
 8006a5a:	3010      	adds	r0, #16
 8006a5c:	f007 fb74 	bl	800e148 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8006a60:	6820      	ldr	r0, [r4, #0]
 8006a62:	3010      	adds	r0, #16
 8006a64:	f007 fbbc 	bl	800e1e0 <sys_mbox_set_invalid>
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8006a68:	6820      	ldr	r0, [r4, #0]
            err = ERR_OK;
 8006a6a:	2300      	movs	r3, #0
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8006a6c:	3014      	adds	r0, #20
            err = ERR_OK;
 8006a6e:	f88d 3007 	strb.w	r3, [sp, #7]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8006a72:	f007 fbb0 	bl	800e1d6 <sys_mbox_valid>
 8006a76:	b930      	cbnz	r0, 8006a86 <lwip_netconn_do_listen+0x6e>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8006a78:	6820      	ldr	r0, [r4, #0]
 8006a7a:	2106      	movs	r1, #6
 8006a7c:	3014      	adds	r0, #20
 8006a7e:	f007 fb53 	bl	800e128 <sys_mbox_new>
 8006a82:	f88d 0007 	strb.w	r0, [sp, #7]
            if (err == ERR_OK) {
 8006a86:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8006a8a:	b983      	cbnz	r3, 8006aae <lwip_netconn_do_listen+0x96>
              msg->conn->state = NETCONN_LISTEN;
 8006a8c:	6821      	ldr	r1, [r4, #0]
 8006a8e:	2302      	movs	r3, #2
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8006a90:	4628      	mov	r0, r5
              msg->conn->state = NETCONN_LISTEN;
 8006a92:	704b      	strb	r3, [r1, #1]
              msg->conn->pcb.tcp = lpcb;
 8006a94:	604d      	str	r5, [r1, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8006a96:	f003 ff13 	bl	800a8c0 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8006a9a:	6823      	ldr	r3, [r4, #0]
 8006a9c:	490b      	ldr	r1, [pc, #44]	; (8006acc <lwip_netconn_do_listen+0xb4>)
 8006a9e:	6858      	ldr	r0, [r3, #4]
 8006aa0:	f003 ff58 	bl	800a954 <tcp_accept>
  msg->err = err;
 8006aa4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006aa8:	7123      	strb	r3, [r4, #4]
}
 8006aaa:	b003      	add	sp, #12
 8006aac:	bd30      	pop	{r4, r5, pc}
              tcp_close(lpcb);
 8006aae:	4628      	mov	r0, r5
 8006ab0:	f004 fac0 	bl	800b034 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8006ab4:	6823      	ldr	r3, [r4, #0]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	605a      	str	r2, [r3, #4]
 8006aba:	e7f3      	b.n	8006aa4 <lwip_netconn_do_listen+0x8c>
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d101      	bne.n	8006ac4 <lwip_netconn_do_listen+0xac>
        err = ERR_OK;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	e7ba      	b.n	8006a3a <lwip_netconn_do_listen+0x22>
        err = ERR_CONN;
 8006ac4:	23f5      	movs	r3, #245	; 0xf5
 8006ac6:	e7b8      	b.n	8006a3a <lwip_netconn_do_listen+0x22>
      err = ERR_ARG;
 8006ac8:	23f0      	movs	r3, #240	; 0xf0
 8006aca:	e7b6      	b.n	8006a3a <lwip_netconn_do_listen+0x22>
 8006acc:	080067e5 	.word	0x080067e5

08006ad0 <lwip_netconn_do_recv>:
{
 8006ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg->err = ERR_OK;
 8006ad2:	2300      	movs	r3, #0
{
 8006ad4:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 8006ad6:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8006ad8:	6803      	ldr	r3, [r0, #0]
 8006ada:	685a      	ldr	r2, [r3, #4]
 8006adc:	b192      	cbz	r2, 8006b04 <lwip_netconn_do_recv+0x34>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ae4:	2b10      	cmp	r3, #16
 8006ae6:	d10d      	bne.n	8006b04 <lwip_netconn_do_recv+0x34>
      size_t remaining = msg->msg.r.len;
 8006ae8:	6885      	ldr	r5, [r0, #8]
 8006aea:	f64f 77ff 	movw	r7, #65535	; 0xffff
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8006aee:	42bd      	cmp	r5, r7
 8006af0:	462e      	mov	r6, r5
        tcp_recved(msg->conn->pcb.tcp, recved);
 8006af2:	6823      	ldr	r3, [r4, #0]
 8006af4:	bf28      	it	cs
 8006af6:	463e      	movcs	r6, r7
 8006af8:	6858      	ldr	r0, [r3, #4]
 8006afa:	b2b1      	uxth	r1, r6
 8006afc:	f003 fe8c 	bl	800a818 <tcp_recved>
      } while (remaining != 0);
 8006b00:	1bad      	subs	r5, r5, r6
 8006b02:	d1f4      	bne.n	8006aee <lwip_netconn_do_recv+0x1e>
}
 8006b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006b08 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8006b08:	b510      	push	{r4, lr}
 8006b0a:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

  err_t err = netconn_err(msg->conn);
 8006b0c:	6800      	ldr	r0, [r0, #0]
 8006b0e:	f7fe ff96 	bl	8005a3e <netconn_err>
  if (err == ERR_OK) {
 8006b12:	2800      	cmp	r0, #0
 8006b14:	d14a      	bne.n	8006bac <lwip_netconn_do_write+0xa4>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8006b16:	6823      	ldr	r3, [r4, #0]
 8006b18:	781a      	ldrb	r2, [r3, #0]
 8006b1a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8006b1e:	2a10      	cmp	r2, #16
 8006b20:	d142      	bne.n	8006ba8 <lwip_netconn_do_write+0xa0>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8006b22:	785a      	ldrb	r2, [r3, #1]
 8006b24:	2a00      	cmp	r2, #0
 8006b26:	d143      	bne.n	8006bb0 <lwip_netconn_do_write+0xa8>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
      } else if (msg->conn->pcb.tcp != NULL) {
 8006b28:	685a      	ldr	r2, [r3, #4]
 8006b2a:	2a00      	cmp	r2, #0
 8006b2c:	d043      	beq.n	8006bb6 <lwip_netconn_do_write+0xae>
        msg->conn->state = NETCONN_WRITE;
 8006b2e:	2201      	movs	r2, #1
 8006b30:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8006b32:	69db      	ldr	r3, [r3, #28]
 8006b34:	b133      	cbz	r3, 8006b44 <lwip_netconn_do_write+0x3c>
 8006b36:	4b21      	ldr	r3, [pc, #132]	; (8006bbc <lwip_netconn_do_write+0xb4>)
 8006b38:	f240 7223 	movw	r2, #1827	; 0x723
 8006b3c:	4920      	ldr	r1, [pc, #128]	; (8006bc0 <lwip_netconn_do_write+0xb8>)
 8006b3e:	4821      	ldr	r0, [pc, #132]	; (8006bc4 <lwip_netconn_do_write+0xbc>)
 8006b40:	f007 fc24 	bl	800e38c <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8006b44:	6963      	ldr	r3, [r4, #20]
 8006b46:	b933      	cbnz	r3, 8006b56 <lwip_netconn_do_write+0x4e>
 8006b48:	4b1c      	ldr	r3, [pc, #112]	; (8006bbc <lwip_netconn_do_write+0xb4>)
 8006b4a:	f240 7224 	movw	r2, #1828	; 0x724
 8006b4e:	491e      	ldr	r1, [pc, #120]	; (8006bc8 <lwip_netconn_do_write+0xc0>)
 8006b50:	481c      	ldr	r0, [pc, #112]	; (8006bc4 <lwip_netconn_do_write+0xbc>)
 8006b52:	f007 fc1b 	bl	800e38c <iprintf>
        msg->conn->current_msg = msg;
 8006b56:	6820      	ldr	r0, [r4, #0]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8006b58:	2100      	movs	r1, #0
        msg->conn->current_msg = msg;
 8006b5a:	61c4      	str	r4, [r0, #28]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8006b5c:	f7ff f980 	bl	8005e60 <lwip_netconn_do_writemore>
 8006b60:	b328      	cbz	r0, 8006bae <lwip_netconn_do_write+0xa6>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8006b62:	6823      	ldr	r3, [r4, #0]
 8006b64:	785b      	ldrb	r3, [r3, #1]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d006      	beq.n	8006b78 <lwip_netconn_do_write+0x70>
 8006b6a:	4b14      	ldr	r3, [pc, #80]	; (8006bbc <lwip_netconn_do_write+0xb4>)
 8006b6c:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8006b70:	4916      	ldr	r1, [pc, #88]	; (8006bcc <lwip_netconn_do_write+0xc4>)
 8006b72:	4814      	ldr	r0, [pc, #80]	; (8006bc4 <lwip_netconn_do_write+0xbc>)
 8006b74:	f007 fc0a 	bl	800e38c <iprintf>
          UNLOCK_TCPIP_CORE();
 8006b78:	4815      	ldr	r0, [pc, #84]	; (8006bd0 <lwip_netconn_do_write+0xc8>)
 8006b7a:	f007 fb94 	bl	800e2a6 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8006b7e:	6820      	ldr	r0, [r4, #0]
 8006b80:	2100      	movs	r1, #0
 8006b82:	300c      	adds	r0, #12
 8006b84:	f007 fb46 	bl	800e214 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8006b88:	4811      	ldr	r0, [pc, #68]	; (8006bd0 <lwip_netconn_do_write+0xc8>)
 8006b8a:	f007 fb87 	bl	800e29c <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8006b8e:	6823      	ldr	r3, [r4, #0]
 8006b90:	785b      	ldrb	r3, [r3, #1]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d10b      	bne.n	8006bae <lwip_netconn_do_write+0xa6>
 8006b96:	4b09      	ldr	r3, [pc, #36]	; (8006bbc <lwip_netconn_do_write+0xb4>)
 8006b98:	f240 722c 	movw	r2, #1836	; 0x72c
 8006b9c:	490b      	ldr	r1, [pc, #44]	; (8006bcc <lwip_netconn_do_write+0xc4>)
 8006b9e:	4809      	ldr	r0, [pc, #36]	; (8006bc4 <lwip_netconn_do_write+0xbc>)
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
  TCPIP_APIMSG_ACK(msg);
}
 8006ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8006ba4:	f007 bbf2 	b.w	800e38c <iprintf>
      err = ERR_VAL;
 8006ba8:	f06f 0005 	mvn.w	r0, #5
  msg->err = err;
 8006bac:	7120      	strb	r0, [r4, #4]
}
 8006bae:	bd10      	pop	{r4, pc}
        err = ERR_INPROGRESS;
 8006bb0:	f06f 0004 	mvn.w	r0, #4
 8006bb4:	e7fa      	b.n	8006bac <lwip_netconn_do_write+0xa4>
        err = ERR_CONN;
 8006bb6:	f06f 000a 	mvn.w	r0, #10
 8006bba:	e7f7      	b.n	8006bac <lwip_netconn_do_write+0xa4>
 8006bbc:	08013846 	.word	0x08013846
 8006bc0:	08013cb6 	.word	0x08013cb6
 8006bc4:	0801342c 	.word	0x0801342c
 8006bc8:	08013ced 	.word	0x08013ced
 8006bcc:	08013cd1 	.word	0x08013cd1
 8006bd0:	2000a7f4 	.word	0x2000a7f4

08006bd4 <lwip_netconn_do_getaddr>:
void
lwip_netconn_do_getaddr(void *m)
{
  struct api_msg *msg = (struct api_msg *)m;

  if (msg->conn->pcb.ip != NULL) {
 8006bd4:	6802      	ldr	r2, [r0, #0]
 8006bd6:	6853      	ldr	r3, [r2, #4]
{
 8006bd8:	b430      	push	{r4, r5}
  if (msg->conn->pcb.ip != NULL) {
 8006bda:	b1bb      	cbz	r3, 8006c0c <lwip_netconn_do_getaddr+0x38>
    if (msg->msg.ad.local) {
 8006bdc:	7c01      	ldrb	r1, [r0, #16]
 8006bde:	6884      	ldr	r4, [r0, #8]
 8006be0:	b179      	cbz	r1, 8006c02 <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8006be2:	681d      	ldr	r5, [r3, #0]
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8006be4:	6025      	str	r5, [r4, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 8006be6:	2400      	movs	r4, #0
 8006be8:	7104      	strb	r4, [r0, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8006bea:	7812      	ldrb	r2, [r2, #0]
 8006bec:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8006bf0:	2a10      	cmp	r2, #16
 8006bf2:	d012      	beq.n	8006c1a <lwip_netconn_do_getaddr+0x46>
 8006bf4:	2a20      	cmp	r2, #32
 8006bf6:	d119      	bne.n	8006c2c <lwip_netconn_do_getaddr+0x58>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 8006bf8:	b129      	cbz	r1, 8006c06 <lwip_netconn_do_getaddr+0x32>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 8006bfa:	68c2      	ldr	r2, [r0, #12]
 8006bfc:	8a5b      	ldrh	r3, [r3, #18]
        if ((msg->msg.ad.local == 0) &&
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 8006bfe:	8013      	strh	r3, [r2, #0]
 8006c00:	e006      	b.n	8006c10 <lwip_netconn_do_getaddr+0x3c>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8006c02:	685d      	ldr	r5, [r3, #4]
 8006c04:	e7ee      	b.n	8006be4 <lwip_netconn_do_getaddr+0x10>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 8006c06:	7c1a      	ldrb	r2, [r3, #16]
 8006c08:	0752      	lsls	r2, r2, #29
 8006c0a:	d403      	bmi.n	8006c14 <lwip_netconn_do_getaddr+0x40>
            msg->err = ERR_CONN;
 8006c0c:	23f5      	movs	r3, #245	; 0xf5
 8006c0e:	7103      	strb	r3, [r0, #4]
    }
  } else {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
}
 8006c10:	bc30      	pop	{r4, r5}
 8006c12:	4770      	bx	lr
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 8006c14:	68c2      	ldr	r2, [r0, #12]
 8006c16:	8a9b      	ldrh	r3, [r3, #20]
 8006c18:	e7f1      	b.n	8006bfe <lwip_netconn_do_getaddr+0x2a>
        if ((msg->msg.ad.local == 0) &&
 8006c1a:	b921      	cbnz	r1, 8006c26 <lwip_netconn_do_getaddr+0x52>
 8006c1c:	7d1a      	ldrb	r2, [r3, #20]
 8006c1e:	2a01      	cmp	r2, #1
 8006c20:	d9f4      	bls.n	8006c0c <lwip_netconn_do_getaddr+0x38>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 8006c22:	8b1b      	ldrh	r3, [r3, #24]
 8006c24:	e000      	b.n	8006c28 <lwip_netconn_do_getaddr+0x54>
 8006c26:	8adb      	ldrh	r3, [r3, #22]
 8006c28:	68c2      	ldr	r2, [r0, #12]
 8006c2a:	e7e8      	b.n	8006bfe <lwip_netconn_do_getaddr+0x2a>
        LWIP_ASSERT("invalid netconn_type", 0);
 8006c2c:	4b03      	ldr	r3, [pc, #12]	; (8006c3c <lwip_netconn_do_getaddr+0x68>)
 8006c2e:	f240 727d 	movw	r2, #1917	; 0x77d
 8006c32:	4903      	ldr	r1, [pc, #12]	; (8006c40 <lwip_netconn_do_getaddr+0x6c>)
 8006c34:	4803      	ldr	r0, [pc, #12]	; (8006c44 <lwip_netconn_do_getaddr+0x70>)
}
 8006c36:	bc30      	pop	{r4, r5}
        LWIP_ASSERT("invalid netconn_type", 0);
 8006c38:	f007 bba8 	b.w	800e38c <iprintf>
 8006c3c:	08013846 	.word	0x08013846
 8006c40:	08013d01 	.word	0x08013d01
 8006c44:	0801342c 	.word	0x0801342c

08006c48 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8006c48:	b510      	push	{r4, lr}
 8006c4a:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8006c4c:	6800      	ldr	r0, [r0, #0]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8006c4e:	6843      	ldr	r3, [r0, #4]
 8006c50:	b163      	cbz	r3, 8006c6c <lwip_netconn_do_close+0x24>
 8006c52:	7803      	ldrb	r3, [r0, #0]
 8006c54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c58:	2b10      	cmp	r3, #16
 8006c5a:	d107      	bne.n	8006c6c <lwip_netconn_do_close+0x24>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8006c5c:	7a22      	ldrb	r2, [r4, #8]
  enum netconn_state state = msg->conn->state;
 8006c5e:	7843      	ldrb	r3, [r0, #1]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8006c60:	2a03      	cmp	r2, #3
 8006c62:	d001      	beq.n	8006c68 <lwip_netconn_do_close+0x20>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d001      	beq.n	8006c6c <lwip_netconn_do_close+0x24>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8006c68:	2b03      	cmp	r3, #3
 8006c6a:	d102      	bne.n	8006c72 <lwip_netconn_do_close+0x2a>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8006c6c:	23f5      	movs	r3, #245	; 0xf5
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8006c6e:	7123      	strb	r3, [r4, #4]
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
}
 8006c70:	bd10      	pop	{r4, pc}
    } else if (state == NETCONN_WRITE) {
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d101      	bne.n	8006c7a <lwip_netconn_do_close+0x32>
      msg->err = ERR_INPROGRESS;
 8006c76:	23fb      	movs	r3, #251	; 0xfb
 8006c78:	e7f9      	b.n	8006c6e <lwip_netconn_do_close+0x26>
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8006c7a:	07d3      	lsls	r3, r2, #31
 8006c7c:	d501      	bpl.n	8006c82 <lwip_netconn_do_close+0x3a>
        netconn_drain(msg->conn);
 8006c7e:	f7ff fd61 	bl	8006744 <netconn_drain>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8006c82:	6823      	ldr	r3, [r4, #0]
 8006c84:	69db      	ldr	r3, [r3, #28]
 8006c86:	b133      	cbz	r3, 8006c96 <lwip_netconn_do_close+0x4e>
 8006c88:	4b19      	ldr	r3, [pc, #100]	; (8006cf0 <lwip_netconn_do_close+0xa8>)
 8006c8a:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8006c8e:	4919      	ldr	r1, [pc, #100]	; (8006cf4 <lwip_netconn_do_close+0xac>)
 8006c90:	4819      	ldr	r0, [pc, #100]	; (8006cf8 <lwip_netconn_do_close+0xb0>)
 8006c92:	f007 fb7b 	bl	800e38c <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8006c96:	6820      	ldr	r0, [r4, #0]
 8006c98:	2304      	movs	r3, #4
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8006c9a:	2100      	movs	r1, #0
      msg->conn->state = NETCONN_CLOSE;
 8006c9c:	7043      	strb	r3, [r0, #1]
      msg->conn->current_msg = msg;
 8006c9e:	61c4      	str	r4, [r0, #28]
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8006ca0:	f7ff fa08 	bl	80060b4 <lwip_netconn_do_close_internal>
 8006ca4:	2800      	cmp	r0, #0
 8006ca6:	d0e3      	beq.n	8006c70 <lwip_netconn_do_close+0x28>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8006ca8:	6823      	ldr	r3, [r4, #0]
 8006caa:	785b      	ldrb	r3, [r3, #1]
 8006cac:	2b04      	cmp	r3, #4
 8006cae:	d006      	beq.n	8006cbe <lwip_netconn_do_close+0x76>
 8006cb0:	4b0f      	ldr	r3, [pc, #60]	; (8006cf0 <lwip_netconn_do_close+0xa8>)
 8006cb2:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8006cb6:	4911      	ldr	r1, [pc, #68]	; (8006cfc <lwip_netconn_do_close+0xb4>)
 8006cb8:	480f      	ldr	r0, [pc, #60]	; (8006cf8 <lwip_netconn_do_close+0xb0>)
 8006cba:	f007 fb67 	bl	800e38c <iprintf>
        UNLOCK_TCPIP_CORE();
 8006cbe:	4810      	ldr	r0, [pc, #64]	; (8006d00 <lwip_netconn_do_close+0xb8>)
 8006cc0:	f007 faf1 	bl	800e2a6 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8006cc4:	6820      	ldr	r0, [r4, #0]
 8006cc6:	2100      	movs	r1, #0
 8006cc8:	300c      	adds	r0, #12
 8006cca:	f007 faa3 	bl	800e214 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8006cce:	480c      	ldr	r0, [pc, #48]	; (8006d00 <lwip_netconn_do_close+0xb8>)
 8006cd0:	f007 fae4 	bl	800e29c <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8006cd4:	6823      	ldr	r3, [r4, #0]
 8006cd6:	785b      	ldrb	r3, [r3, #1]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d0c9      	beq.n	8006c70 <lwip_netconn_do_close+0x28>
 8006cdc:	4b04      	ldr	r3, [pc, #16]	; (8006cf0 <lwip_netconn_do_close+0xa8>)
 8006cde:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8006ce2:	4906      	ldr	r1, [pc, #24]	; (8006cfc <lwip_netconn_do_close+0xb4>)
 8006ce4:	4804      	ldr	r0, [pc, #16]	; (8006cf8 <lwip_netconn_do_close+0xb0>)
}
 8006ce6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8006cea:	f007 bb4f 	b.w	800e38c <iprintf>
 8006cee:	bf00      	nop
 8006cf0:	08013846 	.word	0x08013846
 8006cf4:	08013cb6 	.word	0x08013cb6
 8006cf8:	0801342c 	.word	0x0801342c
 8006cfc:	08013cd1 	.word	0x08013cd1
 8006d00:	2000a7f4 	.word	0x2000a7f4

08006d04 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8006d04:	b510      	push	{r4, lr}
  if (buf != NULL) {
 8006d06:	4604      	mov	r4, r0
 8006d08:	b160      	cbz	r0, 8006d24 <netbuf_delete+0x20>
    if (buf->p != NULL) {
 8006d0a:	6800      	ldr	r0, [r0, #0]
 8006d0c:	b120      	cbz	r0, 8006d18 <netbuf_delete+0x14>
      pbuf_free(buf->p);
 8006d0e:	f003 f98b 	bl	800a028 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8006d12:	2300      	movs	r3, #0
 8006d14:	e9c4 3300 	strd	r3, r3, [r4]
    }
    memp_free(MEMP_NETBUF, buf);
 8006d18:	4621      	mov	r1, r4
 8006d1a:	2006      	movs	r0, #6
  }
}
 8006d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_NETBUF, buf);
 8006d20:	f002 bf58 	b.w	8009bd4 <memp_free>
}
 8006d24:	bd10      	pop	{r4, pc}
	...

08006d28 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8006d28:	b508      	push	{r3, lr}
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8006d2a:	b940      	cbnz	r0, 8006d3e <netbuf_data+0x16>
 8006d2c:	4b0f      	ldr	r3, [pc, #60]	; (8006d6c <netbuf_data+0x44>)
 8006d2e:	22c6      	movs	r2, #198	; 0xc6
 8006d30:	490f      	ldr	r1, [pc, #60]	; (8006d70 <netbuf_data+0x48>)
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8006d32:	4810      	ldr	r0, [pc, #64]	; (8006d74 <netbuf_data+0x4c>)
 8006d34:	f007 fb2a 	bl	800e38c <iprintf>
 8006d38:	f06f 000f 	mvn.w	r0, #15
    return ERR_BUF;
  }
  *dataptr = buf->ptr->payload;
  *len = buf->ptr->len;
  return ERR_OK;
}
 8006d3c:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8006d3e:	b919      	cbnz	r1, 8006d48 <netbuf_data+0x20>
 8006d40:	4b0a      	ldr	r3, [pc, #40]	; (8006d6c <netbuf_data+0x44>)
 8006d42:	22c7      	movs	r2, #199	; 0xc7
 8006d44:	490c      	ldr	r1, [pc, #48]	; (8006d78 <netbuf_data+0x50>)
 8006d46:	e7f4      	b.n	8006d32 <netbuf_data+0xa>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8006d48:	b91a      	cbnz	r2, 8006d52 <netbuf_data+0x2a>
 8006d4a:	4b08      	ldr	r3, [pc, #32]	; (8006d6c <netbuf_data+0x44>)
 8006d4c:	22c8      	movs	r2, #200	; 0xc8
 8006d4e:	490b      	ldr	r1, [pc, #44]	; (8006d7c <netbuf_data+0x54>)
 8006d50:	e7ef      	b.n	8006d32 <netbuf_data+0xa>
  if (buf->ptr == NULL) {
 8006d52:	6843      	ldr	r3, [r0, #4]
 8006d54:	b133      	cbz	r3, 8006d64 <netbuf_data+0x3c>
  *dataptr = buf->ptr->payload;
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	600b      	str	r3, [r1, #0]
  *len = buf->ptr->len;
 8006d5a:	6843      	ldr	r3, [r0, #4]
  return ERR_OK;
 8006d5c:	2000      	movs	r0, #0
  *len = buf->ptr->len;
 8006d5e:	895b      	ldrh	r3, [r3, #10]
 8006d60:	8013      	strh	r3, [r2, #0]
  return ERR_OK;
 8006d62:	e7eb      	b.n	8006d3c <netbuf_data+0x14>
    return ERR_BUF;
 8006d64:	f06f 0001 	mvn.w	r0, #1
 8006d68:	e7e8      	b.n	8006d3c <netbuf_data+0x14>
 8006d6a:	bf00      	nop
 8006d6c:	08013d16 	.word	0x08013d16
 8006d70:	08013e23 	.word	0x08013e23
 8006d74:	0801342c 	.word	0x0801342c
 8006d78:	08013e3c 	.word	0x08013e3c
 8006d7c:	08013e59 	.word	0x08013e59

08006d80 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8006d80:	b583      	push	{r0, r1, r7, lr}
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8006d82:	482b      	ldr	r0, [pc, #172]	; (8006e30 <tcpip_thread+0xb0>)
 8006d84:	f007 fa8a 	bl	800e29c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8006d88:	4a2a      	ldr	r2, [pc, #168]	; (8006e34 <tcpip_thread+0xb4>)
 8006d8a:	6813      	ldr	r3, [r2, #0]
 8006d8c:	b10b      	cbz	r3, 8006d92 <tcpip_thread+0x12>
    tcpip_init_done(tcpip_init_done_arg);
 8006d8e:	6850      	ldr	r0, [r2, #4]
 8006d90:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8006d92:	4d27      	ldr	r5, [pc, #156]	; (8006e30 <tcpip_thread+0xb0>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8006d94:	4f28      	ldr	r7, [pc, #160]	; (8006e38 <tcpip_thread+0xb8>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8006d96:	4e29      	ldr	r6, [pc, #164]	; (8006e3c <tcpip_thread+0xbc>)
  sleeptime = sys_timeouts_sleeptime();
 8006d98:	f006 fe6e 	bl	800da78 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8006d9c:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 8006d9e:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8006da0:	d113      	bne.n	8006dca <tcpip_thread+0x4a>
    UNLOCK_TCPIP_CORE();
 8006da2:	4628      	mov	r0, r5
 8006da4:	f007 fa7f 	bl	800e2a6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8006da8:	2200      	movs	r2, #0
 8006daa:	a901      	add	r1, sp, #4
 8006dac:	4638      	mov	r0, r7
 8006dae:	f007 f9df 	bl	800e170 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8006db2:	4628      	mov	r0, r5
 8006db4:	f007 fa72 	bl	800e29c <sys_mutex_lock>
    if (msg == NULL) {
 8006db8:	9c01      	ldr	r4, [sp, #4]
 8006dba:	b9cc      	cbnz	r4, 8006df0 <tcpip_thread+0x70>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8006dbc:	4633      	mov	r3, r6
 8006dbe:	2291      	movs	r2, #145	; 0x91
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8006dc0:	491f      	ldr	r1, [pc, #124]	; (8006e40 <tcpip_thread+0xc0>)
 8006dc2:	4820      	ldr	r0, [pc, #128]	; (8006e44 <tcpip_thread+0xc4>)
 8006dc4:	f007 fae2 	bl	800e38c <iprintf>
      break;
 8006dc8:	e7e6      	b.n	8006d98 <tcpip_thread+0x18>
  } else if (sleeptime == 0) {
 8006dca:	b910      	cbnz	r0, 8006dd2 <tcpip_thread+0x52>
    sys_check_timeouts();
 8006dcc:	f006 fe38 	bl	800da40 <sys_check_timeouts>
    goto again;
 8006dd0:	e7e2      	b.n	8006d98 <tcpip_thread+0x18>
  UNLOCK_TCPIP_CORE();
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	f007 fa67 	bl	800e2a6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8006dd8:	4622      	mov	r2, r4
 8006dda:	a901      	add	r1, sp, #4
 8006ddc:	4638      	mov	r0, r7
 8006dde:	f007 f9c7 	bl	800e170 <sys_arch_mbox_fetch>
 8006de2:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8006de4:	4628      	mov	r0, r5
 8006de6:	f007 fa59 	bl	800e29c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8006dea:	3401      	adds	r4, #1
 8006dec:	d0ee      	beq.n	8006dcc <tcpip_thread+0x4c>
 8006dee:	e7e3      	b.n	8006db8 <tcpip_thread+0x38>
  switch (msg->type) {
 8006df0:	7823      	ldrb	r3, [r4, #0]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d00f      	beq.n	8006e16 <tcpip_thread+0x96>
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d013      	beq.n	8006e22 <tcpip_thread+0xa2>
 8006dfa:	b9b3      	cbnz	r3, 8006e2a <tcpip_thread+0xaa>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8006dfc:	6860      	ldr	r0, [r4, #4]
 8006dfe:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8006e02:	4798      	blx	r3
 8006e04:	b110      	cbz	r0, 8006e0c <tcpip_thread+0x8c>
        pbuf_free(msg->msg.inp.p);
 8006e06:	6860      	ldr	r0, [r4, #4]
 8006e08:	f003 f90e 	bl	800a028 <pbuf_free>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8006e0c:	4621      	mov	r1, r4
 8006e0e:	2009      	movs	r0, #9
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8006e10:	f002 fee0 	bl	8009bd4 <memp_free>
      break;
 8006e14:	e7c0      	b.n	8006d98 <tcpip_thread+0x18>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8006e16:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8006e1a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8006e1c:	4621      	mov	r1, r4
 8006e1e:	2008      	movs	r0, #8
 8006e20:	e7f6      	b.n	8006e10 <tcpip_thread+0x90>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8006e22:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8006e26:	4798      	blx	r3
      break;
 8006e28:	e7b6      	b.n	8006d98 <tcpip_thread+0x18>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8006e2a:	4633      	mov	r3, r6
 8006e2c:	22cf      	movs	r2, #207	; 0xcf
 8006e2e:	e7c7      	b.n	8006dc0 <tcpip_thread+0x40>
 8006e30:	2000a7f4 	.word	0x2000a7f4
 8006e34:	200067e0 	.word	0x200067e0
 8006e38:	200067e8 	.word	0x200067e8
 8006e3c:	08013ea5 	.word	0x08013ea5
 8006e40:	08013f0c 	.word	0x08013f0c
 8006e44:	0801342c 	.word	0x0801342c

08006e48 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8006e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e4a:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8006e4c:	4810      	ldr	r0, [pc, #64]	; (8006e90 <tcpip_inpkt+0x48>)
{
 8006e4e:	460e      	mov	r6, r1
 8006e50:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8006e52:	f007 f9c0 	bl	800e1d6 <sys_mbox_valid>
 8006e56:	b928      	cbnz	r0, 8006e64 <tcpip_inpkt+0x1c>
 8006e58:	4b0e      	ldr	r3, [pc, #56]	; (8006e94 <tcpip_inpkt+0x4c>)
 8006e5a:	22fc      	movs	r2, #252	; 0xfc
 8006e5c:	490e      	ldr	r1, [pc, #56]	; (8006e98 <tcpip_inpkt+0x50>)
 8006e5e:	480f      	ldr	r0, [pc, #60]	; (8006e9c <tcpip_inpkt+0x54>)
 8006e60:	f007 fa94 	bl	800e38c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8006e64:	2009      	movs	r0, #9
 8006e66:	f002 fe99 	bl	8009b9c <memp_malloc>
  if (msg == NULL) {
 8006e6a:	4604      	mov	r4, r0
 8006e6c:	b168      	cbz	r0, 8006e8a <tcpip_inpkt+0x42>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 8006e6e:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
  msg->msg.inp.netif = inp;
  msg->msg.inp.input_fn = input_fn;
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8006e70:	4601      	mov	r1, r0
  msg->msg.inp.input_fn = input_fn;
 8006e72:	60c5      	str	r5, [r0, #12]
  msg->type = TCPIP_MSG_INPKT;
 8006e74:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.netif = inp;
 8006e76:	e9c0 7601 	strd	r7, r6, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8006e7a:	4805      	ldr	r0, [pc, #20]	; (8006e90 <tcpip_inpkt+0x48>)
 8006e7c:	f007 f96e 	bl	800e15c <sys_mbox_trypost>
 8006e80:	b128      	cbz	r0, 8006e8e <tcpip_inpkt+0x46>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8006e82:	4621      	mov	r1, r4
 8006e84:	2009      	movs	r0, #9
 8006e86:	f002 fea5 	bl	8009bd4 <memp_free>
    return ERR_MEM;
 8006e8a:	f04f 30ff 	mov.w	r0, #4294967295
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8006e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e90:	200067e8 	.word	0x200067e8
 8006e94:	08013ea5 	.word	0x08013ea5
 8006e98:	08013f2a 	.word	0x08013f2a
 8006e9c:	0801342c 	.word	0x0801342c

08006ea0 <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8006ea0:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 8006ea4:	f013 0f18 	tst.w	r3, #24
    return tcpip_inpkt(p, inp, ethernet_input);
 8006ea8:	bf14      	ite	ne
 8006eaa:	4a02      	ldrne	r2, [pc, #8]	; (8006eb4 <tcpip_input+0x14>)
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8006eac:	4a02      	ldreq	r2, [pc, #8]	; (8006eb8 <tcpip_input+0x18>)
 8006eae:	f7ff bfcb 	b.w	8006e48 <tcpip_inpkt>
 8006eb2:	bf00      	nop
 8006eb4:	0800e019 	.word	0x0800e019
 8006eb8:	08008a3d 	.word	0x08008a3d

08006ebc <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8006ebc:	b570      	push	{r4, r5, r6, lr}
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8006ebe:	4e06      	ldr	r6, [pc, #24]	; (8006ed8 <tcpip_send_msg_wait_sem+0x1c>)
{
 8006ec0:	460d      	mov	r5, r1
 8006ec2:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8006ec4:	4630      	mov	r0, r6
 8006ec6:	f007 f9e9 	bl	800e29c <sys_mutex_lock>
  fn(apimsg);
 8006eca:	4628      	mov	r0, r5
 8006ecc:	47a0      	blx	r4
  UNLOCK_TCPIP_CORE();
 8006ece:	4630      	mov	r0, r6
 8006ed0:	f007 f9e9 	bl	800e2a6 <sys_mutex_unlock>
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8006ed4:	2000      	movs	r0, #0
 8006ed6:	bd70      	pop	{r4, r5, r6, pc}
 8006ed8:	2000a7f4 	.word	0x2000a7f4

08006edc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8006edc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ede:	4605      	mov	r5, r0
 8006ee0:	460c      	mov	r4, r1
  lwip_init();
 8006ee2:	f002 fb8f 	bl	8009604 <lwip_init>

  tcpip_init_done = initfunc;
 8006ee6:	4812      	ldr	r0, [pc, #72]	; (8006f30 <tcpip_init+0x54>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8006ee8:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 8006eea:	e9c0 5400 	strd	r5, r4, [r0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8006eee:	3008      	adds	r0, #8
 8006ef0:	f007 f91a 	bl	800e128 <sys_mbox_new>
 8006ef4:	b130      	cbz	r0, 8006f04 <tcpip_init+0x28>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8006ef6:	4b0f      	ldr	r3, [pc, #60]	; (8006f34 <tcpip_init+0x58>)
 8006ef8:	f240 2261 	movw	r2, #609	; 0x261
 8006efc:	490e      	ldr	r1, [pc, #56]	; (8006f38 <tcpip_init+0x5c>)
 8006efe:	480f      	ldr	r0, [pc, #60]	; (8006f3c <tcpip_init+0x60>)
 8006f00:	f007 fa44 	bl	800e38c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8006f04:	480e      	ldr	r0, [pc, #56]	; (8006f40 <tcpip_init+0x64>)
 8006f06:	f007 f9bb 	bl	800e280 <sys_mutex_new>
 8006f0a:	b130      	cbz	r0, 8006f1a <tcpip_init+0x3e>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8006f0c:	4b09      	ldr	r3, [pc, #36]	; (8006f34 <tcpip_init+0x58>)
 8006f0e:	f240 2265 	movw	r2, #613	; 0x265
 8006f12:	490c      	ldr	r1, [pc, #48]	; (8006f44 <tcpip_init+0x68>)
 8006f14:	4809      	ldr	r0, [pc, #36]	; (8006f3c <tcpip_init+0x60>)
 8006f16:	f007 fa39 	bl	800e38c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8006f1a:	2302      	movs	r3, #2
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	490a      	ldr	r1, [pc, #40]	; (8006f48 <tcpip_init+0x6c>)
 8006f20:	9300      	str	r3, [sp, #0]
 8006f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f26:	4809      	ldr	r0, [pc, #36]	; (8006f4c <tcpip_init+0x70>)
 8006f28:	f007 f9c0 	bl	800e2ac <sys_thread_new>
}
 8006f2c:	b003      	add	sp, #12
 8006f2e:	bd30      	pop	{r4, r5, pc}
 8006f30:	200067e0 	.word	0x200067e0
 8006f34:	08013ea5 	.word	0x08013ea5
 8006f38:	08013f37 	.word	0x08013f37
 8006f3c:	0801342c 	.word	0x0801342c
 8006f40:	2000a7f4 	.word	0x2000a7f4
 8006f44:	08013f5a 	.word	0x08013f5a
 8006f48:	08006d81 	.word	0x08006d81
 8006f4c:	08013f7b 	.word	0x08013f7b

08006f50 <dhcp_set_state>:
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
 8006f50:	7943      	ldrb	r3, [r0, #5]
 8006f52:	428b      	cmp	r3, r1
    dhcp->state = new_state;
    dhcp->tries = 0;
 8006f54:	bf1f      	itttt	ne
 8006f56:	2300      	movne	r3, #0
    dhcp->state = new_state;
 8006f58:	7141      	strbne	r1, [r0, #5]
    dhcp->tries = 0;
 8006f5a:	7183      	strbne	r3, [r0, #6]
    dhcp->request_timeout = 0;
 8006f5c:	8103      	strhne	r3, [r0, #8]
  }
}
 8006f5e:	4770      	bx	lr

08006f60 <dhcp_option_short>:
  return options_out_len;
}

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8006f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8006f62:	1c87      	adds	r7, r0, #2
{
 8006f64:	4604      	mov	r4, r0
 8006f66:	460d      	mov	r5, r1
 8006f68:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8006f6a:	2f44      	cmp	r7, #68	; 0x44
 8006f6c:	d906      	bls.n	8006f7c <dhcp_option_short+0x1c>
 8006f6e:	4b07      	ldr	r3, [pc, #28]	; (8006f8c <dhcp_option_short+0x2c>)
 8006f70:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8006f74:	4906      	ldr	r1, [pc, #24]	; (8006f90 <dhcp_option_short+0x30>)
 8006f76:	4807      	ldr	r0, [pc, #28]	; (8006f94 <dhcp_option_short+0x34>)
 8006f78:	f007 fa08 	bl	800e38c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8006f7c:	0a33      	lsrs	r3, r6, #8
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
  return options_out_len;
}
 8006f7e:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8006f80:	552b      	strb	r3, [r5, r4]
 8006f82:	3401      	adds	r4, #1
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8006f84:	b2a4      	uxth	r4, r4
 8006f86:	552e      	strb	r6, [r5, r4]
}
 8006f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	08013f82 	.word	0x08013f82
 8006f90:	08013fee 	.word	0x08013fee
 8006f94:	0801342c 	.word	0x0801342c

08006f98 <dhcp_option>:
{
 8006f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f9a:	461e      	mov	r6, r3
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8006f9c:	3302      	adds	r3, #2
{
 8006f9e:	4604      	mov	r4, r0
 8006fa0:	460d      	mov	r5, r1
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8006fa2:	4403      	add	r3, r0
{
 8006fa4:	4617      	mov	r7, r2
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8006fa6:	2b44      	cmp	r3, #68	; 0x44
 8006fa8:	d906      	bls.n	8006fb8 <dhcp_option+0x20>
 8006faa:	4b07      	ldr	r3, [pc, #28]	; (8006fc8 <dhcp_option+0x30>)
 8006fac:	f240 529a 	movw	r2, #1434	; 0x59a
 8006fb0:	4906      	ldr	r1, [pc, #24]	; (8006fcc <dhcp_option+0x34>)
 8006fb2:	4807      	ldr	r0, [pc, #28]	; (8006fd0 <dhcp_option+0x38>)
 8006fb4:	f007 f9ea 	bl	800e38c <iprintf>
  options[options_out_len++] = option_type;
 8006fb8:	1c63      	adds	r3, r4, #1
  options[options_out_len++] = option_len;
 8006fba:	1ca0      	adds	r0, r4, #2
  options[options_out_len++] = option_type;
 8006fbc:	552f      	strb	r7, [r5, r4]
  options[options_out_len++] = option_len;
 8006fbe:	b29b      	uxth	r3, r3
}
 8006fc0:	b280      	uxth	r0, r0
  options[options_out_len++] = option_len;
 8006fc2:	54ee      	strb	r6, [r5, r3]
}
 8006fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	08013f82 	.word	0x08013f82
 8006fcc:	08014029 	.word	0x08014029
 8006fd0:	0801342c 	.word	0x0801342c

08006fd4 <dhcp_option_byte>:
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8006fd4:	2843      	cmp	r0, #67	; 0x43
{
 8006fd6:	b570      	push	{r4, r5, r6, lr}
 8006fd8:	4604      	mov	r4, r0
 8006fda:	460d      	mov	r5, r1
 8006fdc:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8006fde:	d906      	bls.n	8006fee <dhcp_option_byte+0x1a>
 8006fe0:	4b05      	ldr	r3, [pc, #20]	; (8006ff8 <dhcp_option_byte+0x24>)
 8006fe2:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8006fe6:	4905      	ldr	r1, [pc, #20]	; (8006ffc <dhcp_option_byte+0x28>)
 8006fe8:	4805      	ldr	r0, [pc, #20]	; (8007000 <dhcp_option_byte+0x2c>)
 8006fea:	f007 f9cf 	bl	800e38c <iprintf>
  options[options_out_len++] = value;
 8006fee:	1c60      	adds	r0, r4, #1
 8006ff0:	552e      	strb	r6, [r5, r4]
}
 8006ff2:	b280      	uxth	r0, r0
 8006ff4:	bd70      	pop	{r4, r5, r6, pc}
 8006ff6:	bf00      	nop
 8006ff8:	08013f82 	.word	0x08013f82
 8006ffc:	0801406b 	.word	0x0801406b
 8007000:	0801342c 	.word	0x0801342c

08007004 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8007004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8007006:	1d07      	adds	r7, r0, #4
{
 8007008:	4604      	mov	r4, r0
 800700a:	460d      	mov	r5, r1
 800700c:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800700e:	2f44      	cmp	r7, #68	; 0x44
 8007010:	d906      	bls.n	8007020 <dhcp_option_long+0x1c>
 8007012:	4b0b      	ldr	r3, [pc, #44]	; (8007040 <dhcp_option_long+0x3c>)
 8007014:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8007018:	490a      	ldr	r1, [pc, #40]	; (8007044 <dhcp_option_long+0x40>)
 800701a:	480b      	ldr	r0, [pc, #44]	; (8007048 <dhcp_option_long+0x44>)
 800701c:	f007 f9b6 	bl	800e38c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8007020:	0e33      	lsrs	r3, r6, #24
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8007022:	0c32      	lsrs	r2, r6, #16
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8007024:	552b      	strb	r3, [r5, r4]
 8007026:	1c63      	adds	r3, r4, #1
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
  return options_out_len;
}
 8007028:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800702a:	b29b      	uxth	r3, r3
 800702c:	54ea      	strb	r2, [r5, r3]
 800702e:	1ca3      	adds	r3, r4, #2
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8007030:	3403      	adds	r4, #3
 8007032:	0a32      	lsrs	r2, r6, #8
 8007034:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8007036:	b2a4      	uxth	r4, r4
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8007038:	54ea      	strb	r2, [r5, r3]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800703a:	552e      	strb	r6, [r5, r4]
}
 800703c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800703e:	bf00      	nop
 8007040:	08013f82 	.word	0x08013f82
 8007044:	080140a0 	.word	0x080140a0
 8007048:	0801342c 	.word	0x0801342c

0800704c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 800704c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007050:	460e      	mov	r6, r1
 8007052:	4690      	mov	r8, r2
 8007054:	4699      	mov	r9, r3
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8007056:	4605      	mov	r5, r0
 8007058:	b958      	cbnz	r0, 8007072 <dhcp_create_msg+0x26>
 800705a:	462f      	mov	r7, r5
 800705c:	4b3f      	ldr	r3, [pc, #252]	; (800715c <dhcp_create_msg+0x110>)
 800705e:	f240 7269 	movw	r2, #1897	; 0x769
 8007062:	493f      	ldr	r1, [pc, #252]	; (8007160 <dhcp_create_msg+0x114>)
 8007064:	483f      	ldr	r0, [pc, #252]	; (8007164 <dhcp_create_msg+0x118>)
 8007066:	f007 f991 	bl	800e38c <iprintf>
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
  if (options_out_len) {
    *options_out_len = options_out_len_loc;
  }
  return p_out;
}
 800706a:	4638      	mov	r0, r7
 800706c:	b003      	add	sp, #12
 800706e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8007072:	b941      	cbnz	r1, 8007086 <dhcp_create_msg+0x3a>
 8007074:	4b39      	ldr	r3, [pc, #228]	; (800715c <dhcp_create_msg+0x110>)
 8007076:	f240 726a 	movw	r2, #1898	; 0x76a
 800707a:	493b      	ldr	r1, [pc, #236]	; (8007168 <dhcp_create_msg+0x11c>)
 800707c:	4637      	mov	r7, r6
 800707e:	4839      	ldr	r0, [pc, #228]	; (8007164 <dhcp_create_msg+0x118>)
 8007080:	f007 f984 	bl	800e38c <iprintf>
 8007084:	e7f1      	b.n	800706a <dhcp_create_msg+0x1e>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8007086:	f44f 7220 	mov.w	r2, #640	; 0x280
 800708a:	f44f 719a 	mov.w	r1, #308	; 0x134
 800708e:	2036      	movs	r0, #54	; 0x36
 8007090:	f003 f832 	bl	800a0f8 <pbuf_alloc>
  if (p_out == NULL) {
 8007094:	4607      	mov	r7, r0
 8007096:	2800      	cmp	r0, #0
 8007098:	d0e7      	beq.n	800706a <dhcp_create_msg+0x1e>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800709a:	8943      	ldrh	r3, [r0, #10]
 800709c:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80070a0:	d206      	bcs.n	80070b0 <dhcp_create_msg+0x64>
 80070a2:	4b2e      	ldr	r3, [pc, #184]	; (800715c <dhcp_create_msg+0x110>)
 80070a4:	f240 7271 	movw	r2, #1905	; 0x771
 80070a8:	4930      	ldr	r1, [pc, #192]	; (800716c <dhcp_create_msg+0x120>)
 80070aa:	482e      	ldr	r0, [pc, #184]	; (8007164 <dhcp_create_msg+0x118>)
 80070ac:	f007 f96e 	bl	800e38c <iprintf>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80070b0:	f1b8 0f03 	cmp.w	r8, #3
 80070b4:	d102      	bne.n	80070bc <dhcp_create_msg+0x70>
 80070b6:	7973      	ldrb	r3, [r6, #5]
 80070b8:	2b03      	cmp	r3, #3
 80070ba:	d107      	bne.n	80070cc <dhcp_create_msg+0x80>
    if (dhcp->tries == 0) {
 80070bc:	79b3      	ldrb	r3, [r6, #6]
 80070be:	4c2c      	ldr	r4, [pc, #176]	; (8007170 <dhcp_create_msg+0x124>)
 80070c0:	b913      	cbnz	r3, 80070c8 <dhcp_create_msg+0x7c>
      xid = LWIP_RAND();
 80070c2:	f007 f9f1 	bl	800e4a8 <rand>
 80070c6:	6020      	str	r0, [r4, #0]
    dhcp->xid = xid;
 80070c8:	6823      	ldr	r3, [r4, #0]
 80070ca:	6033      	str	r3, [r6, #0]
  msg_out = (struct dhcp_msg *)p_out->payload;
 80070cc:	687c      	ldr	r4, [r7, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80070ce:	f44f 729a 	mov.w	r2, #308	; 0x134
 80070d2:	2100      	movs	r1, #0
 80070d4:	4620      	mov	r0, r4
 80070d6:	f007 f951 	bl	800e37c <memset>
  msg_out->op = DHCP_BOOTREQUEST;
 80070da:	2301      	movs	r3, #1
 80070dc:	7023      	strb	r3, [r4, #0]
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80070de:	7063      	strb	r3, [r4, #1]
  msg_out->hlen = netif->hwaddr_len;
 80070e0:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 80070e4:	70a3      	strb	r3, [r4, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80070e6:	6830      	ldr	r0, [r6, #0]
 80070e8:	f002 fa3b 	bl	8009562 <lwip_htonl>
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80070ec:	f1b8 0f04 	cmp.w	r8, #4
  msg_out->xid = lwip_htonl(dhcp->xid);
 80070f0:	6060      	str	r0, [r4, #4]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80070f2:	d00a      	beq.n	800710a <dhcp_create_msg+0xbe>
 80070f4:	f1a8 0307 	sub.w	r3, r8, #7
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d906      	bls.n	800710a <dhcp_create_msg+0xbe>
 80070fc:	f1b8 0f03 	cmp.w	r8, #3
 8007100:	d105      	bne.n	800710e <dhcp_create_msg+0xc2>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8007102:	7973      	ldrb	r3, [r6, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8007104:	3b04      	subs	r3, #4
 8007106:	2b01      	cmp	r3, #1
 8007108:	d801      	bhi.n	800710e <dhcp_create_msg+0xc2>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 800710a:	686b      	ldr	r3, [r5, #4]
 800710c:	60e3      	str	r3, [r4, #12]
 800710e:	f105 032a 	add.w	r3, r5, #42	; 0x2a
 8007112:	f104 021c 	add.w	r2, r4, #28
 8007116:	3530      	adds	r5, #48	; 0x30
    msg_out->chaddr[i] = netif->hwaddr[i];
 8007118:	f813 1b01 	ldrb.w	r1, [r3], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800711c:	42ab      	cmp	r3, r5
    msg_out->chaddr[i] = netif->hwaddr[i];
 800711e:	f802 1b01 	strb.w	r1, [r2], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8007122:	d1f9      	bne.n	8007118 <dhcp_create_msg+0xcc>
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8007124:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8007128:	2363      	movs	r3, #99	; 0x63
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800712a:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
 800712e:	2000      	movs	r0, #0
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8007130:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
 8007134:	2253      	movs	r2, #83	; 0x53
 8007136:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
 800713a:	f884 20ee 	strb.w	r2, [r4, #238]	; 0xee
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800713e:	2235      	movs	r2, #53	; 0x35
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8007140:	f884 30ef 	strb.w	r3, [r4, #239]	; 0xef
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8007144:	2301      	movs	r3, #1
 8007146:	9101      	str	r1, [sp, #4]
 8007148:	f7ff ff26 	bl	8006f98 <dhcp_option>
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 800714c:	4642      	mov	r2, r8
 800714e:	9901      	ldr	r1, [sp, #4]
 8007150:	f7ff ff40 	bl	8006fd4 <dhcp_option_byte>
    *options_out_len = options_out_len_loc;
 8007154:	f8a9 0000 	strh.w	r0, [r9]
 8007158:	e787      	b.n	800706a <dhcp_create_msg+0x1e>
 800715a:	bf00      	nop
 800715c:	08013f82 	.word	0x08013f82
 8007160:	080140da 	.word	0x080140da
 8007164:	0801342c 	.word	0x0801342c
 8007168:	080140f9 	.word	0x080140f9
 800716c:	08014117 	.word	0x08014117
 8007170:	200067ec 	.word	0x200067ec

08007174 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8007174:	4603      	mov	r3, r0
 8007176:	4610      	mov	r0, r2
 8007178:	b430      	push	{r4, r5}
  options[options_out_len++] = DHCP_OPTION_END;
 800717a:	1c5c      	adds	r4, r3, #1
 800717c:	25ff      	movs	r5, #255	; 0xff
 800717e:	b2a2      	uxth	r2, r4
 8007180:	54cd      	strb	r5, [r1, r3]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8007182:	fa11 f184 	uxtah	r1, r1, r4
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8007186:	2500      	movs	r5, #0
  options[options_out_len++] = DHCP_OPTION_END;
 8007188:	4614      	mov	r4, r2
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800718a:	2c43      	cmp	r4, #67	; 0x43
 800718c:	d90b      	bls.n	80071a6 <dhcp_option_trailer+0x32>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800718e:	2a44      	cmp	r2, #68	; 0x44
 8007190:	f1c3 0143 	rsb	r1, r3, #67	; 0x43
 8007194:	f103 03f1 	add.w	r3, r3, #241	; 0xf1
 8007198:	bf88      	it	hi
 800719a:	2100      	movhi	r1, #0
 800719c:	4419      	add	r1, r3
}
 800719e:	bc30      	pop	{r4, r5}
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80071a0:	b289      	uxth	r1, r1
 80071a2:	f003 b825 	b.w	800a1f0 <pbuf_realloc>
    options[options_out_len++] = 0;
 80071a6:	3401      	adds	r4, #1
 80071a8:	f801 5b01 	strb.w	r5, [r1], #1
 80071ac:	b2a4      	uxth	r4, r4
 80071ae:	e7ec      	b.n	800718a <dhcp_option_trailer+0x16>

080071b0 <dhcp_reboot>:
{
 80071b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80071b4:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 80071b6:	b086      	sub	sp, #24
 80071b8:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80071ba:	2103      	movs	r1, #3
 80071bc:	4620      	mov	r0, r4
 80071be:	f7ff fec7 	bl	8006f50 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80071c2:	f10d 0316 	add.w	r3, sp, #22
 80071c6:	2203      	movs	r2, #3
 80071c8:	4621      	mov	r1, r4
 80071ca:	4630      	mov	r0, r6
 80071cc:	f7ff ff3e 	bl	800704c <dhcp_create_msg>
  if (p_out != NULL) {
 80071d0:	4605      	mov	r5, r0
 80071d2:	2800      	cmp	r0, #0
 80071d4:	d067      	beq.n	80072a6 <dhcp_reboot+0xf6>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80071d6:	6841      	ldr	r1, [r0, #4]
 80071d8:	2302      	movs	r3, #2
 80071da:	2239      	movs	r2, #57	; 0x39
 80071dc:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80071e0:	31f0      	adds	r1, #240	; 0xf0
 80071e2:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80072b4 <dhcp_reboot+0x104>
 80071e6:	9103      	str	r1, [sp, #12]
 80071e8:	f7ff fed6 	bl	8006f98 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80071ec:	f44f 7210 	mov.w	r2, #576	; 0x240
 80071f0:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80071f2:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80071f6:	f7ff feb3 	bl	8006f60 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80071fa:	2304      	movs	r3, #4
 80071fc:	2232      	movs	r2, #50	; 0x32
 80071fe:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8007200:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8007204:	f7ff fec8 	bl	8006f98 <dhcp_option>
 8007208:	4607      	mov	r7, r0
 800720a:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800720e:	69e0      	ldr	r0, [r4, #28]
 8007210:	f002 f9a7 	bl	8009562 <lwip_htonl>
 8007214:	9903      	ldr	r1, [sp, #12]
 8007216:	4602      	mov	r2, r0
 8007218:	4638      	mov	r0, r7
 800721a:	f7ff fef3 	bl	8007004 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800721e:	9903      	ldr	r1, [sp, #12]
 8007220:	2303      	movs	r3, #3
 8007222:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8007224:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8007228:	2703      	movs	r7, #3
 800722a:	f7ff feb5 	bl	8006f98 <dhcp_option>
 800722e:	9903      	ldr	r1, [sp, #12]
 8007230:	f8ad 0016 	strh.w	r0, [sp, #22]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8007234:	3f01      	subs	r7, #1
 8007236:	f818 2b01 	ldrb.w	r2, [r8], #1
 800723a:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 800723e:	9103      	str	r1, [sp, #12]
 8007240:	f7ff fec8 	bl	8006fd4 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8007244:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8007248:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800724a:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800724e:	d1f1      	bne.n	8007234 <dhcp_reboot+0x84>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8007250:	462a      	mov	r2, r5
 8007252:	f7ff ff8f 	bl	8007174 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8007256:	4815      	ldr	r0, [pc, #84]	; (80072ac <dhcp_reboot+0xfc>)
 8007258:	9600      	str	r6, [sp, #0]
 800725a:	2343      	movs	r3, #67	; 0x43
 800725c:	4a14      	ldr	r2, [pc, #80]	; (80072b0 <dhcp_reboot+0x100>)
 800725e:	4629      	mov	r1, r5
 8007260:	6840      	ldr	r0, [r0, #4]
 8007262:	f006 fdff 	bl	800de64 <udp_sendto_if>
 8007266:	4606      	mov	r6, r0
    pbuf_free(p_out);
 8007268:	4628      	mov	r0, r5
 800726a:	f002 fedd 	bl	800a028 <pbuf_free>
  if (dhcp->tries < 255) {
 800726e:	79a3      	ldrb	r3, [r4, #6]
}
 8007270:	4630      	mov	r0, r6
  if (dhcp->tries < 255) {
 8007272:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8007274:	bf1c      	itt	ne
 8007276:	3301      	addne	r3, #1
 8007278:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800727a:	79a3      	ldrb	r3, [r4, #6]
 800727c:	2b09      	cmp	r3, #9
 800727e:	bf96      	itet	ls
 8007280:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8007284:	f242 7310 	movwhi	r3, #10000	; 0x2710
 8007288:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800728c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8007290:	bf9c      	itt	ls
 8007292:	00db      	lslls	r3, r3, #3
 8007294:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8007296:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800729a:	fbb3 f3f2 	udiv	r3, r3, r2
 800729e:	8123      	strh	r3, [r4, #8]
}
 80072a0:	b006      	add	sp, #24
 80072a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result = ERR_MEM;
 80072a6:	f04f 36ff 	mov.w	r6, #4294967295
 80072aa:	e7e0      	b.n	800726e <dhcp_reboot+0xbe>
 80072ac:	200067ec 	.word	0x200067ec
 80072b0:	0801323c 	.word	0x0801323c
 80072b4:	08013236 	.word	0x08013236

080072b8 <dhcp_select>:
{
 80072b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80072bc:	4607      	mov	r7, r0
{
 80072be:	b085      	sub	sp, #20
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80072c0:	b960      	cbnz	r0, 80072dc <dhcp_select+0x24>
 80072c2:	f06f 050f 	mvn.w	r5, #15
 80072c6:	4b52      	ldr	r3, [pc, #328]	; (8007410 <dhcp_select+0x158>)
 80072c8:	f240 1277 	movw	r2, #375	; 0x177
 80072cc:	4951      	ldr	r1, [pc, #324]	; (8007414 <dhcp_select+0x15c>)
 80072ce:	4852      	ldr	r0, [pc, #328]	; (8007418 <dhcp_select+0x160>)
 80072d0:	f007 f85c 	bl	800e38c <iprintf>
}
 80072d4:	4628      	mov	r0, r5
 80072d6:	b005      	add	sp, #20
 80072d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  dhcp = netif_dhcp_data(netif);
 80072dc:	6a44      	ldr	r4, [r0, #36]	; 0x24
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80072de:	b94c      	cbnz	r4, 80072f4 <dhcp_select+0x3c>
 80072e0:	4b4b      	ldr	r3, [pc, #300]	; (8007410 <dhcp_select+0x158>)
 80072e2:	f240 1279 	movw	r2, #377	; 0x179
 80072e6:	494d      	ldr	r1, [pc, #308]	; (800741c <dhcp_select+0x164>)
 80072e8:	f06f 0505 	mvn.w	r5, #5
 80072ec:	484a      	ldr	r0, [pc, #296]	; (8007418 <dhcp_select+0x160>)
 80072ee:	f007 f84d 	bl	800e38c <iprintf>
 80072f2:	e7ef      	b.n	80072d4 <dhcp_select+0x1c>
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80072f4:	2101      	movs	r1, #1
 80072f6:	4620      	mov	r0, r4
 80072f8:	f7ff fe2a 	bl	8006f50 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80072fc:	f10d 030e 	add.w	r3, sp, #14
 8007300:	2203      	movs	r2, #3
 8007302:	4621      	mov	r1, r4
 8007304:	4638      	mov	r0, r7
 8007306:	f7ff fea1 	bl	800704c <dhcp_create_msg>
  if (p_out != NULL) {
 800730a:	4606      	mov	r6, r0
 800730c:	2800      	cmp	r0, #0
 800730e:	d07b      	beq.n	8007408 <dhcp_select+0x150>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8007310:	6845      	ldr	r5, [r0, #4]
 8007312:	2302      	movs	r3, #2
 8007314:	2239      	movs	r2, #57	; 0x39
 8007316:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800731a:	35f0      	adds	r5, #240	; 0xf0
 800731c:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800742c <dhcp_select+0x174>
 8007320:	4629      	mov	r1, r5
 8007322:	f7ff fe39 	bl	8006f98 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8007326:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007328:	4629      	mov	r1, r5
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800732a:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800732e:	f7ff fe17 	bl	8006f60 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8007332:	2304      	movs	r3, #4
 8007334:	2232      	movs	r2, #50	; 0x32
 8007336:	4629      	mov	r1, r5
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8007338:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800733c:	f7ff fe2c 	bl	8006f98 <dhcp_option>
 8007340:	4680      	mov	r8, r0
 8007342:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8007346:	69e0      	ldr	r0, [r4, #28]
 8007348:	f002 f90b 	bl	8009562 <lwip_htonl>
 800734c:	4629      	mov	r1, r5
 800734e:	4602      	mov	r2, r0
 8007350:	4640      	mov	r0, r8
 8007352:	f7ff fe57 	bl	8007004 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8007356:	2304      	movs	r3, #4
 8007358:	2236      	movs	r2, #54	; 0x36
 800735a:	4629      	mov	r1, r5
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800735c:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8007360:	f7ff fe1a 	bl	8006f98 <dhcp_option>
 8007364:	4680      	mov	r8, r0
 8007366:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800736a:	69a0      	ldr	r0, [r4, #24]
 800736c:	f002 f8f9 	bl	8009562 <lwip_htonl>
 8007370:	4629      	mov	r1, r5
 8007372:	4602      	mov	r2, r0
 8007374:	4640      	mov	r0, r8
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8007376:	f04f 0803 	mov.w	r8, #3
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800737a:	f7ff fe43 	bl	8007004 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800737e:	2303      	movs	r3, #3
 8007380:	2237      	movs	r2, #55	; 0x37
 8007382:	4629      	mov	r1, r5
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8007384:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8007388:	f7ff fe06 	bl	8006f98 <dhcp_option>
 800738c:	f8ad 000e 	strh.w	r0, [sp, #14]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8007390:	f108 38ff 	add.w	r8, r8, #4294967295
 8007394:	f819 2b01 	ldrb.w	r2, [r9], #1
 8007398:	4629      	mov	r1, r5
 800739a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800739e:	f7ff fe19 	bl	8006fd4 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80073a2:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80073a6:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80073aa:	d1f1      	bne.n	8007390 <dhcp_select+0xd8>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80073ac:	4629      	mov	r1, r5
 80073ae:	4632      	mov	r2, r6
 80073b0:	f7ff fee0 	bl	8007174 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80073b4:	4b1a      	ldr	r3, [pc, #104]	; (8007420 <dhcp_select+0x168>)
 80073b6:	481b      	ldr	r0, [pc, #108]	; (8007424 <dhcp_select+0x16c>)
 80073b8:	4631      	mov	r1, r6
 80073ba:	4a1b      	ldr	r2, [pc, #108]	; (8007428 <dhcp_select+0x170>)
 80073bc:	e9cd 7300 	strd	r7, r3, [sp]
 80073c0:	2343      	movs	r3, #67	; 0x43
 80073c2:	6840      	ldr	r0, [r0, #4]
 80073c4:	f006 fcb6 	bl	800dd34 <udp_sendto_if_src>
 80073c8:	4605      	mov	r5, r0
    pbuf_free(p_out);
 80073ca:	4630      	mov	r0, r6
 80073cc:	f002 fe2c 	bl	800a028 <pbuf_free>
  if (dhcp->tries < 255) {
 80073d0:	79a3      	ldrb	r3, [r4, #6]
 80073d2:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 80073d4:	bf1c      	itt	ne
 80073d6:	3301      	addne	r3, #1
 80073d8:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80073da:	79a2      	ldrb	r2, [r4, #6]
 80073dc:	2a05      	cmp	r2, #5
 80073de:	bf97      	itett	ls
 80073e0:	2301      	movls	r3, #1
 80073e2:	f64e 2360 	movwhi	r3, #60000	; 0xea60
 80073e6:	4093      	lslls	r3, r2
 80073e8:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 80073ec:	bf98      	it	ls
 80073ee:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80073f2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80073f6:	bf9c      	itt	ls
 80073f8:	00db      	lslls	r3, r3, #3
 80073fa:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80073fc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8007400:	fbb3 f3f2 	udiv	r3, r3, r2
 8007404:	8123      	strh	r3, [r4, #8]
  return result;
 8007406:	e765      	b.n	80072d4 <dhcp_select+0x1c>
    result = ERR_MEM;
 8007408:	f04f 35ff 	mov.w	r5, #4294967295
 800740c:	e7e0      	b.n	80073d0 <dhcp_select+0x118>
 800740e:	bf00      	nop
 8007410:	08013f82 	.word	0x08013f82
 8007414:	08014157 	.word	0x08014157
 8007418:	0801342c 	.word	0x0801342c
 800741c:	08014172 	.word	0x08014172
 8007420:	08013240 	.word	0x08013240
 8007424:	200067ec 	.word	0x200067ec
 8007428:	0801323c 	.word	0x0801323c
 800742c:	08013236 	.word	0x08013236

08007430 <dhcp_discover>:
{
 8007430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8007434:	2300      	movs	r3, #0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8007436:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 8007438:	b086      	sub	sp, #24
 800743a:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800743c:	2106      	movs	r1, #6
 800743e:	4620      	mov	r0, r4
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8007440:	61e3      	str	r3, [r4, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8007442:	f7ff fd85 	bl	8006f50 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8007446:	f10d 0316 	add.w	r3, sp, #22
 800744a:	2201      	movs	r2, #1
 800744c:	4621      	mov	r1, r4
 800744e:	4630      	mov	r0, r6
 8007450:	f7ff fdfc 	bl	800704c <dhcp_create_msg>
  if (p_out != NULL) {
 8007454:	4605      	mov	r5, r0
 8007456:	2800      	cmp	r0, #0
 8007458:	d039      	beq.n	80074ce <dhcp_discover+0x9e>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800745a:	6841      	ldr	r1, [r0, #4]
 800745c:	2302      	movs	r3, #2
 800745e:	2239      	movs	r2, #57	; 0x39
 8007460:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8007464:	31f0      	adds	r1, #240	; 0xf0
 8007466:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8007518 <dhcp_discover+0xe8>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800746a:	2703      	movs	r7, #3
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800746c:	9103      	str	r1, [sp, #12]
 800746e:	f7ff fd93 	bl	8006f98 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8007472:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 8007474:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8007476:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800747a:	f7ff fd71 	bl	8006f60 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800747e:	9903      	ldr	r1, [sp, #12]
 8007480:	2303      	movs	r3, #3
 8007482:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8007484:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8007488:	f7ff fd86 	bl	8006f98 <dhcp_option>
 800748c:	9903      	ldr	r1, [sp, #12]
 800748e:	f8ad 0016 	strh.w	r0, [sp, #22]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8007492:	3f01      	subs	r7, #1
 8007494:	f818 2b01 	ldrb.w	r2, [r8], #1
 8007498:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 800749c:	9103      	str	r1, [sp, #12]
 800749e:	f7ff fd99 	bl	8006fd4 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80074a2:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 80074a6:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80074a8:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80074ac:	d1f1      	bne.n	8007492 <dhcp_discover+0x62>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80074ae:	462a      	mov	r2, r5
 80074b0:	f7ff fe60 	bl	8007174 <dhcp_option_trailer>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80074b4:	4b15      	ldr	r3, [pc, #84]	; (800750c <dhcp_discover+0xdc>)
 80074b6:	4816      	ldr	r0, [pc, #88]	; (8007510 <dhcp_discover+0xe0>)
 80074b8:	4629      	mov	r1, r5
 80074ba:	4a16      	ldr	r2, [pc, #88]	; (8007514 <dhcp_discover+0xe4>)
 80074bc:	e9cd 6300 	strd	r6, r3, [sp]
 80074c0:	2343      	movs	r3, #67	; 0x43
 80074c2:	6840      	ldr	r0, [r0, #4]
 80074c4:	f006 fc36 	bl	800dd34 <udp_sendto_if_src>
    pbuf_free(p_out);
 80074c8:	4628      	mov	r0, r5
 80074ca:	f002 fdad 	bl	800a028 <pbuf_free>
  if (dhcp->tries < 255) {
 80074ce:	79a3      	ldrb	r3, [r4, #6]
}
 80074d0:	2000      	movs	r0, #0
  if (dhcp->tries < 255) {
 80074d2:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 80074d4:	bf1c      	itt	ne
 80074d6:	3301      	addne	r3, #1
 80074d8:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80074da:	79a2      	ldrb	r2, [r4, #6]
 80074dc:	2a05      	cmp	r2, #5
 80074de:	bf97      	itett	ls
 80074e0:	2301      	movls	r3, #1
 80074e2:	f64e 2360 	movwhi	r3, #60000	; 0xea60
 80074e6:	4093      	lslls	r3, r2
 80074e8:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 80074ec:	bf98      	it	ls
 80074ee:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80074f2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80074f6:	bf9c      	itt	ls
 80074f8:	00db      	lslls	r3, r3, #3
 80074fa:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80074fc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8007500:	fbb3 f3f2 	udiv	r3, r3, r2
 8007504:	8123      	strh	r3, [r4, #8]
}
 8007506:	b006      	add	sp, #24
 8007508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800750c:	08013240 	.word	0x08013240
 8007510:	200067ec 	.word	0x200067ec
 8007514:	0801323c 	.word	0x0801323c
 8007518:	08013236 	.word	0x08013236

0800751c <dhcp_check>:
{
 800751c:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800751e:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 8007520:	4605      	mov	r5, r0
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8007522:	2108      	movs	r1, #8
 8007524:	4620      	mov	r0, r4
 8007526:	f7ff fd13 	bl	8006f50 <dhcp_set_state>
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800752a:	2200      	movs	r2, #0
 800752c:	f104 011c 	add.w	r1, r4, #28
 8007530:	4628      	mov	r0, r5
 8007532:	f001 f81d 	bl	8008570 <etharp_query>
  if (dhcp->tries < 255) {
 8007536:	79a3      	ldrb	r3, [r4, #6]
 8007538:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 800753a:	bf1c      	itt	ne
 800753c:	3301      	addne	r3, #1
 800753e:	71a3      	strbne	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8007540:	2301      	movs	r3, #1
 8007542:	8123      	strh	r3, [r4, #8]
}
 8007544:	bd38      	pop	{r3, r4, r5, pc}
	...

08007548 <dhcp_bind>:
{
 8007548:	b523      	push	{r0, r1, r5, lr}
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800754a:	4605      	mov	r5, r0
 800754c:	b940      	cbnz	r0, 8007560 <dhcp_bind+0x18>
 800754e:	4b3d      	ldr	r3, [pc, #244]	; (8007644 <dhcp_bind+0xfc>)
 8007550:	f240 4215 	movw	r2, #1045	; 0x415
 8007554:	493c      	ldr	r1, [pc, #240]	; (8007648 <dhcp_bind+0x100>)
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8007556:	483d      	ldr	r0, [pc, #244]	; (800764c <dhcp_bind+0x104>)
 8007558:	f006 ff18 	bl	800e38c <iprintf>
}
 800755c:	b002      	add	sp, #8
 800755e:	bd20      	pop	{r5, pc}
  dhcp = netif_dhcp_data(netif);
 8007560:	6a40      	ldr	r0, [r0, #36]	; 0x24
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8007562:	b920      	cbnz	r0, 800756e <dhcp_bind+0x26>
 8007564:	4b37      	ldr	r3, [pc, #220]	; (8007644 <dhcp_bind+0xfc>)
 8007566:	f240 4217 	movw	r2, #1047	; 0x417
 800756a:	4939      	ldr	r1, [pc, #228]	; (8007650 <dhcp_bind+0x108>)
 800756c:	e7f3      	b.n	8007556 <dhcp_bind+0xe>
  dhcp->lease_used = 0;
 800756e:	2300      	movs	r3, #0
 8007570:	8243      	strh	r3, [r0, #18]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8007572:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007574:	1c5a      	adds	r2, r3, #1
 8007576:	d00c      	beq.n	8007592 <dhcp_bind+0x4a>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8007578:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 800757a:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800757e:	bf36      	itet	cc
 8007580:	223c      	movcc	r2, #60	; 0x3c
      timeout = 0xffff;
 8007582:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8007586:	fbb3 f3f2 	udivcc	r3, r3, r2
    dhcp->t0_timeout = (u16_t)timeout;
 800758a:	b29a      	uxth	r2, r3
    if (dhcp->t0_timeout == 0) {
 800758c:	2b00      	cmp	r3, #0
 800758e:	d042      	beq.n	8007616 <dhcp_bind+0xce>
    dhcp->t0_timeout = (u16_t)timeout;
 8007590:	8282      	strh	r2, [r0, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8007592:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007594:	1c59      	adds	r1, r3, #1
 8007596:	d00e      	beq.n	80075b6 <dhcp_bind+0x6e>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8007598:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 800759a:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800759e:	bf36      	itet	cc
 80075a0:	223c      	movcc	r2, #60	; 0x3c
      timeout = 0xffff;
 80075a2:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80075a6:	fbb3 f3f2 	udivcc	r3, r3, r2
    dhcp->t1_timeout = (u16_t)timeout;
 80075aa:	b29a      	uxth	r2, r3
    if (dhcp->t1_timeout == 0) {
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d035      	beq.n	800761c <dhcp_bind+0xd4>
    dhcp->t1_timeout = (u16_t)timeout;
 80075b0:	8142      	strh	r2, [r0, #10]
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80075b2:	8943      	ldrh	r3, [r0, #10]
 80075b4:	81c3      	strh	r3, [r0, #14]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80075b6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80075b8:	1c5a      	adds	r2, r3, #1
 80075ba:	d00d      	beq.n	80075d8 <dhcp_bind+0x90>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80075bc:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 80075be:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80075c2:	bf36      	itet	cc
 80075c4:	223c      	movcc	r2, #60	; 0x3c
      timeout = 0xffff;
 80075c6:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80075ca:	fbb3 f3f2 	udivcc	r3, r3, r2
    dhcp->t2_timeout = (u16_t)timeout;
 80075ce:	b29a      	uxth	r2, r3
    if (dhcp->t2_timeout == 0) {
 80075d0:	b33b      	cbz	r3, 8007622 <dhcp_bind+0xda>
    dhcp->t2_timeout = (u16_t)timeout;
 80075d2:	8182      	strh	r2, [r0, #12]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80075d4:	8983      	ldrh	r3, [r0, #12]
 80075d6:	8203      	strh	r3, [r0, #16]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80075d8:	8983      	ldrh	r3, [r0, #12]
 80075da:	8942      	ldrh	r2, [r0, #10]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d302      	bcc.n	80075e6 <dhcp_bind+0x9e>
 80075e0:	b10b      	cbz	r3, 80075e6 <dhcp_bind+0x9e>
    dhcp->t1_timeout = 0;
 80075e2:	2300      	movs	r3, #0
 80075e4:	8143      	strh	r3, [r0, #10]
  if (dhcp->subnet_mask_given) {
 80075e6:	79c3      	ldrb	r3, [r0, #7]
 80075e8:	b1f3      	cbz	r3, 8007628 <dhcp_bind+0xe0>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80075ea:	6a03      	ldr	r3, [r0, #32]
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80075ec:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80075ee:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80075f0:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
 80075f2:	b92b      	cbnz	r3, 8007600 <dhcp_bind+0xb8>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80075f4:	69c3      	ldr	r3, [r0, #28]
 80075f6:	9a00      	ldr	r2, [sp, #0]
 80075f8:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80075fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075fe:	9301      	str	r3, [sp, #4]
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8007600:	210a      	movs	r1, #10
 8007602:	f7ff fca5 	bl	8006f50 <dhcp_set_state>
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8007606:	ab01      	add	r3, sp, #4
 8007608:	f100 011c 	add.w	r1, r0, #28
 800760c:	466a      	mov	r2, sp
 800760e:	4628      	mov	r0, r5
 8007610:	f002 fb50 	bl	8009cb4 <netif_set_addr>
 8007614:	e7a2      	b.n	800755c <dhcp_bind+0x14>
      dhcp->t0_timeout = 1;
 8007616:	2301      	movs	r3, #1
 8007618:	8283      	strh	r3, [r0, #20]
 800761a:	e7ba      	b.n	8007592 <dhcp_bind+0x4a>
      dhcp->t1_timeout = 1;
 800761c:	2301      	movs	r3, #1
 800761e:	8143      	strh	r3, [r0, #10]
 8007620:	e7c7      	b.n	80075b2 <dhcp_bind+0x6a>
      dhcp->t2_timeout = 1;
 8007622:	2301      	movs	r3, #1
 8007624:	8183      	strh	r3, [r0, #12]
 8007626:	e7d5      	b.n	80075d4 <dhcp_bind+0x8c>
    if (first_octet <= 127) {
 8007628:	f990 201c 	ldrsb.w	r2, [r0, #28]
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800762c:	7f03      	ldrb	r3, [r0, #28]
    if (first_octet <= 127) {
 800762e:	2a00      	cmp	r2, #0
 8007630:	db01      	blt.n	8007636 <dhcp_bind+0xee>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8007632:	23ff      	movs	r3, #255	; 0xff
 8007634:	e7da      	b.n	80075ec <dhcp_bind+0xa4>
    } else if (first_octet >= 192) {
 8007636:	2bbf      	cmp	r3, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8007638:	bf8c      	ite	hi
 800763a:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800763e:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 8007642:	e7d3      	b.n	80075ec <dhcp_bind+0xa4>
 8007644:	08013f82 	.word	0x08013f82
 8007648:	0801418c 	.word	0x0801418c
 800764c:	0801342c 	.word	0x0801342c
 8007650:	080141a5 	.word	0x080141a5

08007654 <dhcp_inc_pcb_refcount>:
{
 8007654:	b510      	push	{r4, lr}
  if (dhcp_pcb_refcount == 0) {
 8007656:	4c14      	ldr	r4, [pc, #80]	; (80076a8 <dhcp_inc_pcb_refcount+0x54>)
 8007658:	7a23      	ldrb	r3, [r4, #8]
 800765a:	b9eb      	cbnz	r3, 8007698 <dhcp_inc_pcb_refcount+0x44>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800765c:	6863      	ldr	r3, [r4, #4]
 800765e:	b12b      	cbz	r3, 800766c <dhcp_inc_pcb_refcount+0x18>
 8007660:	4b12      	ldr	r3, [pc, #72]	; (80076ac <dhcp_inc_pcb_refcount+0x58>)
 8007662:	22e5      	movs	r2, #229	; 0xe5
 8007664:	4912      	ldr	r1, [pc, #72]	; (80076b0 <dhcp_inc_pcb_refcount+0x5c>)
 8007666:	4813      	ldr	r0, [pc, #76]	; (80076b4 <dhcp_inc_pcb_refcount+0x60>)
 8007668:	f006 fe90 	bl	800e38c <iprintf>
    dhcp_pcb = udp_new();
 800766c:	f006 fcae 	bl	800dfcc <udp_new>
 8007670:	6060      	str	r0, [r4, #4]
    if (dhcp_pcb == NULL) {
 8007672:	b1b0      	cbz	r0, 80076a2 <dhcp_inc_pcb_refcount+0x4e>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8007674:	7a42      	ldrb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8007676:	4910      	ldr	r1, [pc, #64]	; (80076b8 <dhcp_inc_pcb_refcount+0x64>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8007678:	f042 0220 	orr.w	r2, r2, #32
 800767c:	7242      	strb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800767e:	2244      	movs	r2, #68	; 0x44
 8007680:	f006 faf0 	bl	800dc64 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8007684:	2243      	movs	r2, #67	; 0x43
 8007686:	490c      	ldr	r1, [pc, #48]	; (80076b8 <dhcp_inc_pcb_refcount+0x64>)
 8007688:	6860      	ldr	r0, [r4, #4]
 800768a:	f006 fc2b 	bl	800dee4 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800768e:	2200      	movs	r2, #0
 8007690:	490a      	ldr	r1, [pc, #40]	; (80076bc <dhcp_inc_pcb_refcount+0x68>)
 8007692:	6860      	ldr	r0, [r4, #4]
 8007694:	f006 fc62 	bl	800df5c <udp_recv>
  dhcp_pcb_refcount++;
 8007698:	7a23      	ldrb	r3, [r4, #8]
  return ERR_OK;
 800769a:	2000      	movs	r0, #0
  dhcp_pcb_refcount++;
 800769c:	3301      	adds	r3, #1
 800769e:	7223      	strb	r3, [r4, #8]
}
 80076a0:	bd10      	pop	{r4, pc}
      return ERR_MEM;
 80076a2:	f04f 30ff 	mov.w	r0, #4294967295
 80076a6:	e7fb      	b.n	80076a0 <dhcp_inc_pcb_refcount+0x4c>
 80076a8:	200067ec 	.word	0x200067ec
 80076ac:	08013f82 	.word	0x08013f82
 80076b0:	080141bd 	.word	0x080141bd
 80076b4:	0801342c 	.word	0x0801342c
 80076b8:	08013240 	.word	0x08013240
 80076bc:	08007761 	.word	0x08007761

080076c0 <dhcp_handle_ack.isra.0>:
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 80076c0:	b538      	push	{r3, r4, r5, lr}
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80076c2:	2300      	movs	r3, #0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80076c4:	4d16      	ldr	r5, [pc, #88]	; (8007720 <dhcp_handle_ack.isra.0+0x60>)
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 80076c6:	4604      	mov	r4, r0
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80076c8:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80076cc:	78eb      	ldrb	r3, [r5, #3]
 80076ce:	b113      	cbz	r3, 80076d6 <dhcp_handle_ack.isra.0+0x16>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80076d0:	4b14      	ldr	r3, [pc, #80]	; (8007724 <dhcp_handle_ack.isra.0+0x64>)
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	6283      	str	r3, [r0, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80076d6:	792b      	ldrb	r3, [r5, #4]
 80076d8:	b1d3      	cbz	r3, 8007710 <dhcp_handle_ack.isra.0+0x50>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80076da:	4b12      	ldr	r3, [pc, #72]	; (8007724 <dhcp_handle_ack.isra.0+0x64>)
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80076e0:	796b      	ldrb	r3, [r5, #5]
 80076e2:	b1c3      	cbz	r3, 8007716 <dhcp_handle_ack.isra.0+0x56>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80076e4:	4b0f      	ldr	r3, [pc, #60]	; (8007724 <dhcp_handle_ack.isra.0+0x64>)
 80076e6:	695b      	ldr	r3, [r3, #20]
 80076e8:	6323      	str	r3, [r4, #48]	; 0x30
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80076ea:	690b      	ldr	r3, [r1, #16]
 80076ec:	61e3      	str	r3, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80076ee:	79ab      	ldrb	r3, [r5, #6]
 80076f0:	b12b      	cbz	r3, 80076fe <dhcp_handle_ack.isra.0+0x3e>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80076f2:	4b0c      	ldr	r3, [pc, #48]	; (8007724 <dhcp_handle_ack.isra.0+0x64>)
 80076f4:	6998      	ldr	r0, [r3, #24]
 80076f6:	f001 ff34 	bl	8009562 <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 80076fa:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80076fc:	6220      	str	r0, [r4, #32]
    dhcp->subnet_mask_given = 0;
 80076fe:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8007700:	79eb      	ldrb	r3, [r5, #7]
 8007702:	b123      	cbz	r3, 800770e <dhcp_handle_ack.isra.0+0x4e>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8007704:	4b07      	ldr	r3, [pc, #28]	; (8007724 <dhcp_handle_ack.isra.0+0x64>)
 8007706:	69d8      	ldr	r0, [r3, #28]
 8007708:	f001 ff2b 	bl	8009562 <lwip_htonl>
 800770c:	6260      	str	r0, [r4, #36]	; 0x24
}
 800770e:	bd38      	pop	{r3, r4, r5, pc}
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8007710:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007712:	085b      	lsrs	r3, r3, #1
 8007714:	e7e3      	b.n	80076de <dhcp_handle_ack.isra.0+0x1e>
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8007716:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007718:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800771c:	08db      	lsrs	r3, r3, #3
 800771e:	e7e3      	b.n	80076e8 <dhcp_handle_ack.isra.0+0x28>
 8007720:	2000a7f8 	.word	0x2000a7f8
 8007724:	2000a800 	.word	0x2000a800

08007728 <dhcp_dec_pcb_refcount>:
{
 8007728:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800772a:	4c09      	ldr	r4, [pc, #36]	; (8007750 <dhcp_dec_pcb_refcount+0x28>)
 800772c:	7a23      	ldrb	r3, [r4, #8]
 800772e:	b92b      	cbnz	r3, 800773c <dhcp_dec_pcb_refcount+0x14>
 8007730:	4b08      	ldr	r3, [pc, #32]	; (8007754 <dhcp_dec_pcb_refcount+0x2c>)
 8007732:	22ff      	movs	r2, #255	; 0xff
 8007734:	4908      	ldr	r1, [pc, #32]	; (8007758 <dhcp_dec_pcb_refcount+0x30>)
 8007736:	4809      	ldr	r0, [pc, #36]	; (800775c <dhcp_dec_pcb_refcount+0x34>)
 8007738:	f006 fe28 	bl	800e38c <iprintf>
  dhcp_pcb_refcount--;
 800773c:	7a25      	ldrb	r5, [r4, #8]
 800773e:	3d01      	subs	r5, #1
 8007740:	b2ed      	uxtb	r5, r5
 8007742:	7225      	strb	r5, [r4, #8]
  if (dhcp_pcb_refcount == 0) {
 8007744:	b91d      	cbnz	r5, 800774e <dhcp_dec_pcb_refcount+0x26>
    udp_remove(dhcp_pcb);
 8007746:	6860      	ldr	r0, [r4, #4]
 8007748:	f006 fc1a 	bl	800df80 <udp_remove>
    dhcp_pcb = NULL;
 800774c:	6065      	str	r5, [r4, #4]
}
 800774e:	bd38      	pop	{r3, r4, r5, pc}
 8007750:	200067ec 	.word	0x200067ec
 8007754:	08013f82 	.word	0x08013f82
 8007758:	080141e2 	.word	0x080141e2
 800775c:	0801342c 	.word	0x0801342c

08007760 <dhcp_recv>:
  struct netif *netif = ip_current_input_netif();
 8007760:	4bb2      	ldr	r3, [pc, #712]	; (8007a2c <dhcp_recv+0x2cc>)
{
 8007762:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
 8007766:	685d      	ldr	r5, [r3, #4]
{
 8007768:	b089      	sub	sp, #36	; 0x24
 800776a:	4693      	mov	fp, r2
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800776c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800776e:	9301      	str	r3, [sp, #4]
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8007770:	2b00      	cmp	r3, #0
 8007772:	d03b      	beq.n	80077ec <dhcp_recv+0x8c>
 8007774:	791b      	ldrb	r3, [r3, #4]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d038      	beq.n	80077ec <dhcp_recv+0x8c>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 800777a:	8953      	ldrh	r3, [r2, #10]
 800777c:	2b2b      	cmp	r3, #43	; 0x2b
 800777e:	d935      	bls.n	80077ec <dhcp_recv+0x8c>
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8007780:	6852      	ldr	r2, [r2, #4]
  if (reply_msg->op != DHCP_BOOTREPLY) {
 8007782:	7813      	ldrb	r3, [r2, #0]
 8007784:	2b02      	cmp	r3, #2
 8007786:	d131      	bne.n	80077ec <dhcp_recv+0x8c>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8007788:	f895 4030 	ldrb.w	r4, [r5, #48]	; 0x30
 800778c:	f105 002a 	add.w	r0, r5, #42	; 0x2a
 8007790:	f102 011c 	add.w	r1, r2, #28
 8007794:	2300      	movs	r3, #0
 8007796:	b2de      	uxtb	r6, r3
 8007798:	42b4      	cmp	r4, r6
 800779a:	d901      	bls.n	80077a0 <dhcp_recv+0x40>
 800779c:	2b06      	cmp	r3, #6
 800779e:	d11e      	bne.n	80077de <dhcp_recv+0x7e>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80077a0:	6850      	ldr	r0, [r2, #4]
 80077a2:	f001 fede 	bl	8009562 <lwip_htonl>
 80077a6:	9b01      	ldr	r3, [sp, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4298      	cmp	r0, r3
 80077ac:	d11e      	bne.n	80077ec <dhcp_recv+0x8c>
  dhcp_clear_all_options(dhcp);
 80077ae:	4ba0      	ldr	r3, [pc, #640]	; (8007a30 <dhcp_recv+0x2d0>)
 80077b0:	2200      	movs	r2, #0
 80077b2:	605a      	str	r2, [r3, #4]
  if (p->len < DHCP_SNAME_OFS) {
 80077b4:	f8bb 100a 	ldrh.w	r1, [fp, #10]
  dhcp_clear_all_options(dhcp);
 80077b8:	601a      	str	r2, [r3, #0]
  if (p->len < DHCP_SNAME_OFS) {
 80077ba:	292b      	cmp	r1, #43	; 0x2b
 80077bc:	d916      	bls.n	80077ec <dhcp_recv+0x8c>
  options_idx_max = p->tot_len;
 80077be:	f8bb a008 	ldrh.w	sl, [fp, #8]
  options_idx = DHCP_OPTIONS_OFS;
 80077c2:	f04f 09f0 	mov.w	r9, #240	; 0xf0
  int parse_sname_as_options = 0;
 80077c6:	9203      	str	r2, [sp, #12]
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80077c8:	9302      	str	r3, [sp, #8]
  options_idx = DHCP_OPTIONS_OFS;
 80077ca:	46d8      	mov	r8, fp
  while ((q != NULL) && (options_idx >= q->len)) {
 80077cc:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 80077d0:	454b      	cmp	r3, r9
 80077d2:	d911      	bls.n	80077f8 <dhcp_recv+0x98>
  options = (u8_t *)q->payload;
 80077d4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80077d8:	464c      	mov	r4, r9
 80077da:	9305      	str	r3, [sp, #20]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80077dc:	e0a8      	b.n	8007930 <dhcp_recv+0x1d0>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80077de:	f810 7b01 	ldrb.w	r7, [r0], #1
 80077e2:	3301      	adds	r3, #1
 80077e4:	f811 6b01 	ldrb.w	r6, [r1], #1
 80077e8:	42b7      	cmp	r7, r6
 80077ea:	d0d4      	beq.n	8007796 <dhcp_recv+0x36>
  pbuf_free(p);
 80077ec:	4658      	mov	r0, fp
 80077ee:	f002 fc1b 	bl	800a028 <pbuf_free>
}
 80077f2:	b009      	add	sp, #36	; 0x24
 80077f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options_idx = (u16_t)(options_idx - q->len);
 80077f8:	eba9 0903 	sub.w	r9, r9, r3
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80077fc:	ebaa 0a03 	sub.w	sl, sl, r3
    q = q->next;
 8007800:	f8d8 8000 	ldr.w	r8, [r8]
    options_idx = (u16_t)(options_idx - q->len);
 8007804:	fa1f f989 	uxth.w	r9, r9
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8007808:	fa1f fa8a 	uxth.w	sl, sl
  while ((q != NULL) && (options_idx >= q->len)) {
 800780c:	f1b8 0f00 	cmp.w	r8, #0
 8007810:	d1dc      	bne.n	80077cc <dhcp_recv+0x6c>
 8007812:	e7eb      	b.n	80077ec <dhcp_recv+0x8c>
    u16_t val_offset = (u16_t)(offset + 2);
 8007814:	1ca3      	adds	r3, r4, #2
 8007816:	b29b      	uxth	r3, r3
    if (val_offset < offset) {
 8007818:	42a3      	cmp	r3, r4
    u16_t val_offset = (u16_t)(offset + 2);
 800781a:	9304      	str	r3, [sp, #16]
    if (val_offset < offset) {
 800781c:	d3e6      	bcc.n	80077ec <dhcp_recv+0x8c>
    if ((offset + 1) < q->len) {
 800781e:	1c60      	adds	r0, r4, #1
 8007820:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8007824:	4298      	cmp	r0, r3
 8007826:	da16      	bge.n	8007856 <dhcp_recv+0xf6>
      len = options[offset + 1];
 8007828:	9b05      	ldr	r3, [sp, #20]
 800782a:	4423      	add	r3, r4
 800782c:	785b      	ldrb	r3, [r3, #1]
    switch (op) {
 800782e:	2a3b      	cmp	r2, #59	; 0x3b
 8007830:	d855      	bhi.n	80078de <dhcp_recv+0x17e>
 8007832:	2a32      	cmp	r2, #50	; 0x32
 8007834:	f200 8189 	bhi.w	8007b4a <dhcp_recv+0x3ea>
 8007838:	2a01      	cmp	r2, #1
 800783a:	d014      	beq.n	8007866 <dhcp_recv+0x106>
 800783c:	2a03      	cmp	r2, #3
 800783e:	d14e      	bne.n	80078de <dhcp_recv+0x17e>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8007840:	2b03      	cmp	r3, #3
 8007842:	f200 8170 	bhi.w	8007b26 <dhcp_recv+0x3c6>
 8007846:	4b7b      	ldr	r3, [pc, #492]	; (8007a34 <dhcp_recv+0x2d4>)
 8007848:	f240 6233 	movw	r2, #1587	; 0x633
 800784c:	497a      	ldr	r1, [pc, #488]	; (8007a38 <dhcp_recv+0x2d8>)
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800784e:	487b      	ldr	r0, [pc, #492]	; (8007a3c <dhcp_recv+0x2dc>)
 8007850:	f006 fd9c 	bl	800e38c <iprintf>
 8007854:	e7ca      	b.n	80077ec <dhcp_recv+0x8c>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8007856:	f8d8 3000 	ldr.w	r3, [r8]
 800785a:	2b00      	cmp	r3, #0
 800785c:	f000 80fe 	beq.w	8007a5c <dhcp_recv+0x2fc>
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	e7e3      	b.n	800782e <dhcp_recv+0xce>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8007866:	2b04      	cmp	r3, #4
 8007868:	f000 815a 	beq.w	8007b20 <dhcp_recv+0x3c0>
 800786c:	4b71      	ldr	r3, [pc, #452]	; (8007a34 <dhcp_recv+0x2d4>)
 800786e:	f240 622e 	movw	r2, #1582	; 0x62e
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8007872:	4973      	ldr	r1, [pc, #460]	; (8007a40 <dhcp_recv+0x2e0>)
 8007874:	e7eb      	b.n	800784e <dhcp_recv+0xee>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8007876:	2b04      	cmp	r3, #4
 8007878:	f000 8158 	beq.w	8007b2c <dhcp_recv+0x3cc>
 800787c:	4b6d      	ldr	r3, [pc, #436]	; (8007a34 <dhcp_recv+0x2d4>)
 800787e:	f240 6241 	movw	r2, #1601	; 0x641
 8007882:	e7f6      	b.n	8007872 <dhcp_recv+0x112>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8007884:	2b01      	cmp	r3, #1
 8007886:	d004      	beq.n	8007892 <dhcp_recv+0x132>
 8007888:	4b6a      	ldr	r3, [pc, #424]	; (8007a34 <dhcp_recv+0x2d4>)
 800788a:	f240 624f 	movw	r2, #1615	; 0x64f
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800788e:	496d      	ldr	r1, [pc, #436]	; (8007a44 <dhcp_recv+0x2e4>)
 8007890:	e7dd      	b.n	800784e <dhcp_recv+0xee>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8007892:	f1b9 0ff0 	cmp.w	r9, #240	; 0xf0
 8007896:	f000 814c 	beq.w	8007b32 <dhcp_recv+0x3d2>
 800789a:	4b66      	ldr	r3, [pc, #408]	; (8007a34 <dhcp_recv+0x2d4>)
 800789c:	f240 6251 	movw	r2, #1617	; 0x651
 80078a0:	4969      	ldr	r1, [pc, #420]	; (8007a48 <dhcp_recv+0x2e8>)
 80078a2:	e7d4      	b.n	800784e <dhcp_recv+0xee>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	f000 814a 	beq.w	8007b3e <dhcp_recv+0x3de>
 80078aa:	4b62      	ldr	r3, [pc, #392]	; (8007a34 <dhcp_recv+0x2d4>)
 80078ac:	f240 6255 	movw	r2, #1621	; 0x655
 80078b0:	e7ed      	b.n	800788e <dhcp_recv+0x12e>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80078b2:	2b04      	cmp	r3, #4
 80078b4:	f000 8140 	beq.w	8007b38 <dhcp_recv+0x3d8>
 80078b8:	4b5e      	ldr	r3, [pc, #376]	; (8007a34 <dhcp_recv+0x2d4>)
 80078ba:	f240 6259 	movw	r2, #1625	; 0x659
 80078be:	e7d8      	b.n	8007872 <dhcp_recv+0x112>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80078c0:	2b04      	cmp	r3, #4
 80078c2:	f000 813c 	beq.w	8007b3e <dhcp_recv+0x3de>
 80078c6:	4b5b      	ldr	r3, [pc, #364]	; (8007a34 <dhcp_recv+0x2d4>)
 80078c8:	f240 625d 	movw	r2, #1629	; 0x65d
 80078cc:	e7d1      	b.n	8007872 <dhcp_recv+0x112>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80078ce:	2b04      	cmp	r3, #4
 80078d0:	f000 8138 	beq.w	8007b44 <dhcp_recv+0x3e4>
 80078d4:	4b57      	ldr	r3, [pc, #348]	; (8007a34 <dhcp_recv+0x2d4>)
 80078d6:	f240 6261 	movw	r2, #1633	; 0x661
 80078da:	e7ca      	b.n	8007872 <dhcp_recv+0x112>
    switch (op) {
 80078dc:	2300      	movs	r3, #0
    if (op == DHCP_OPTION_PAD) {
 80078de:	2a00      	cmp	r2, #0
 80078e0:	f040 80cb 	bne.w	8007a7a <dhcp_recv+0x31a>
      offset++;
 80078e4:	b284      	uxth	r4, r0
    if (offset >= q->len) {
 80078e6:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 80078ea:	42a3      	cmp	r3, r4
 80078ec:	d820      	bhi.n	8007930 <dhcp_recv+0x1d0>
      offset = (u16_t)(offset - q->len);
 80078ee:	1ae4      	subs	r4, r4, r3
      offset_max = (u16_t)(offset_max - q->len);
 80078f0:	ebaa 0a03 	sub.w	sl, sl, r3
      offset = (u16_t)(offset - q->len);
 80078f4:	b2a4      	uxth	r4, r4
      offset_max = (u16_t)(offset_max - q->len);
 80078f6:	fa1f fa8a 	uxth.w	sl, sl
      if (offset < offset_max) {
 80078fa:	4554      	cmp	r4, sl
 80078fc:	f4bf af76 	bcs.w	80077ec <dhcp_recv+0x8c>
        q = q->next;
 8007900:	f8d8 8000 	ldr.w	r8, [r8]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8007904:	f1b8 0f00 	cmp.w	r8, #0
 8007908:	d10f      	bne.n	800792a <dhcp_recv+0x1ca>
 800790a:	4b4a      	ldr	r3, [pc, #296]	; (8007a34 <dhcp_recv+0x2d4>)
 800790c:	f240 629d 	movw	r2, #1693	; 0x69d
 8007910:	494e      	ldr	r1, [pc, #312]	; (8007a4c <dhcp_recv+0x2ec>)
 8007912:	e79c      	b.n	800784e <dhcp_recv+0xee>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8007914:	2e01      	cmp	r6, #1
 8007916:	d004      	beq.n	8007922 <dhcp_recv+0x1c2>
 8007918:	4b46      	ldr	r3, [pc, #280]	; (8007a34 <dhcp_recv+0x2d4>)
 800791a:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 800791e:	494c      	ldr	r1, [pc, #304]	; (8007a50 <dhcp_recv+0x2f0>)
 8007920:	e795      	b.n	800784e <dhcp_recv+0xee>
            value = ((u8_t *)&value)[0];
 8007922:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8007926:	9307      	str	r3, [sp, #28]
 8007928:	e0d8      	b.n	8007adc <dhcp_recv+0x37c>
        options = (u8_t *)q->payload;
 800792a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800792e:	9305      	str	r3, [sp, #20]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8007930:	4554      	cmp	r4, sl
 8007932:	d204      	bcs.n	800793e <dhcp_recv+0x1de>
 8007934:	9b05      	ldr	r3, [sp, #20]
 8007936:	5d1a      	ldrb	r2, [r3, r4]
 8007938:	2aff      	cmp	r2, #255	; 0xff
 800793a:	f47f af6b 	bne.w	8007814 <dhcp_recv+0xb4>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800793e:	9b02      	ldr	r3, [sp, #8]
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	b9db      	cbnz	r3, 800797c <dhcp_recv+0x21c>
  } else if (parse_sname_as_options) {
 8007944:	9b03      	ldr	r3, [sp, #12]
 8007946:	bb13      	cbnz	r3, 800798e <dhcp_recv+0x22e>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8007948:	9b02      	ldr	r3, [sp, #8]
 800794a:	785b      	ldrb	r3, [r3, #1]
 800794c:	2b00      	cmp	r3, #0
 800794e:	f43f af4d 	beq.w	80077ec <dhcp_recv+0x8c>
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8007952:	4a40      	ldr	r2, [pc, #256]	; (8007a54 <dhcp_recv+0x2f4>)
  msg_in = (struct dhcp_msg *)p->payload;
 8007954:	f8db 1004 	ldr.w	r1, [fp, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8007958:	7913      	ldrb	r3, [r2, #4]
  if (msg_type == DHCP_ACK) {
 800795a:	2b05      	cmp	r3, #5
 800795c:	d132      	bne.n	80079c4 <dhcp_recv+0x264>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800795e:	9b01      	ldr	r3, [sp, #4]
 8007960:	795b      	ldrb	r3, [r3, #5]
 8007962:	2b01      	cmp	r3, #1
 8007964:	d123      	bne.n	80079ae <dhcp_recv+0x24e>
      dhcp_handle_ack(netif, msg_in);
 8007966:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007968:	f7ff feaa 	bl	80076c0 <dhcp_handle_ack.isra.0>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800796c:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
        dhcp_check(netif);
 8007970:	4628      	mov	r0, r5
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8007972:	071b      	lsls	r3, r3, #28
 8007974:	d523      	bpl.n	80079be <dhcp_recv+0x25e>
        dhcp_check(netif);
 8007976:	f7ff fdd1 	bl	800751c <dhcp_check>
 800797a:	e737      	b.n	80077ec <dhcp_recv+0x8c>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800797c:	4b35      	ldr	r3, [pc, #212]	; (8007a54 <dhcp_recv+0x2f4>)
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800797e:	2200      	movs	r2, #0
 8007980:	9902      	ldr	r1, [sp, #8]
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8007982:	681b      	ldr	r3, [r3, #0]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8007984:	700a      	strb	r2, [r1, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8007986:	2b01      	cmp	r3, #1
 8007988:	d00c      	beq.n	80079a4 <dhcp_recv+0x244>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800798a:	2b02      	cmp	r3, #2
 800798c:	d106      	bne.n	800799c <dhcp_recv+0x23c>
    parse_sname_as_options = 0;
 800798e:	2300      	movs	r3, #0
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8007990:	f04f 0a6c 	mov.w	sl, #108	; 0x6c
    options_idx = DHCP_SNAME_OFS;
 8007994:	f04f 092c 	mov.w	r9, #44	; 0x2c
    parse_sname_as_options = 0;
 8007998:	9303      	str	r3, [sp, #12]
 800799a:	e716      	b.n	80077ca <dhcp_recv+0x6a>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800799c:	2b03      	cmp	r3, #3
 800799e:	d1d1      	bne.n	8007944 <dhcp_recv+0x1e4>
      parse_sname_as_options = 1;
 80079a0:	2301      	movs	r3, #1
 80079a2:	9303      	str	r3, [sp, #12]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80079a4:	f04f 0aec 	mov.w	sl, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 80079a8:	f04f 096c 	mov.w	r9, #108	; 0x6c
 80079ac:	e70d      	b.n	80077ca <dhcp_recv+0x6a>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80079ae:	3b03      	subs	r3, #3
 80079b0:	2b02      	cmp	r3, #2
 80079b2:	f63f af1b 	bhi.w	80077ec <dhcp_recv+0x8c>
      dhcp_handle_ack(netif, msg_in);
 80079b6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80079b8:	f7ff fe82 	bl	80076c0 <dhcp_handle_ack.isra.0>
      dhcp_bind(netif);
 80079bc:	4628      	mov	r0, r5
 80079be:	f7ff fdc3 	bl	8007548 <dhcp_bind>
 80079c2:	e713      	b.n	80077ec <dhcp_recv+0x8c>
  else if ((msg_type == DHCP_NAK) &&
 80079c4:	2b06      	cmp	r3, #6
 80079c6:	d115      	bne.n	80079f4 <dhcp_recv+0x294>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80079c8:	9b01      	ldr	r3, [sp, #4]
 80079ca:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80079cc:	1eda      	subs	r2, r3, #3
 80079ce:	2a02      	cmp	r2, #2
 80079d0:	d902      	bls.n	80079d8 <dhcp_recv+0x278>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	f47f af0a 	bne.w	80077ec <dhcp_recv+0x8c>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80079d8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80079da:	210c      	movs	r1, #12
 80079dc:	f7ff fab8 	bl	8006f50 <dhcp_set_state>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80079e0:	4b1d      	ldr	r3, [pc, #116]	; (8007a58 <dhcp_recv+0x2f8>)
 80079e2:	4628      	mov	r0, r5
 80079e4:	461a      	mov	r2, r3
 80079e6:	4619      	mov	r1, r3
 80079e8:	f002 f964 	bl	8009cb4 <netif_set_addr>
  dhcp_discover(netif);
 80079ec:	4628      	mov	r0, r5
 80079ee:	f7ff fd1f 	bl	8007430 <dhcp_discover>
}
 80079f2:	e6fb      	b.n	80077ec <dhcp_recv+0x8c>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	f47f aef9 	bne.w	80077ec <dhcp_recv+0x8c>
 80079fa:	9b01      	ldr	r3, [sp, #4]
 80079fc:	795b      	ldrb	r3, [r3, #5]
 80079fe:	2b06      	cmp	r3, #6
 8007a00:	f47f aef4 	bne.w	80077ec <dhcp_recv+0x8c>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8007a04:	9b02      	ldr	r3, [sp, #8]
 8007a06:	789b      	ldrb	r3, [r3, #2]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f43f aeef 	beq.w	80077ec <dhcp_recv+0x8c>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8007a0e:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    dhcp->request_timeout = 0; /* stop timer */
 8007a10:	9b03      	ldr	r3, [sp, #12]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8007a12:	6890      	ldr	r0, [r2, #8]
    dhcp->request_timeout = 0; /* stop timer */
 8007a14:	8123      	strh	r3, [r4, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8007a16:	9101      	str	r1, [sp, #4]
 8007a18:	f001 fda3 	bl	8009562 <lwip_htonl>
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8007a1c:	9901      	ldr	r1, [sp, #4]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8007a1e:	61a0      	str	r0, [r4, #24]
    dhcp_select(netif);
 8007a20:	4628      	mov	r0, r5
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8007a22:	690b      	ldr	r3, [r1, #16]
 8007a24:	61e3      	str	r3, [r4, #28]
    dhcp_select(netif);
 8007a26:	f7ff fc47 	bl	80072b8 <dhcp_select>
 8007a2a:	e6df      	b.n	80077ec <dhcp_recv+0x8c>
 8007a2c:	2000a820 	.word	0x2000a820
 8007a30:	2000a7f8 	.word	0x2000a7f8
 8007a34:	08013f82 	.word	0x08013f82
 8007a38:	0801420f 	.word	0x0801420f
 8007a3c:	0801342c 	.word	0x0801342c
 8007a40:	08014206 	.word	0x08014206
 8007a44:	08014221 	.word	0x08014221
 8007a48:	0801422a 	.word	0x0801422a
 8007a4c:	08014265 	.word	0x08014265
 8007a50:	08014252 	.word	0x08014252
 8007a54:	2000a800 	.word	0x2000a800
 8007a58:	08013240 	.word	0x08013240
    switch (op) {
 8007a5c:	2a3b      	cmp	r2, #59	; 0x3b
 8007a5e:	f63f af3e 	bhi.w	80078de <dhcp_recv+0x17e>
 8007a62:	2a32      	cmp	r2, #50	; 0x32
 8007a64:	d842      	bhi.n	8007aec <dhcp_recv+0x38c>
 8007a66:	2a01      	cmp	r2, #1
 8007a68:	f43f af00 	beq.w	800786c <dhcp_recv+0x10c>
 8007a6c:	2a03      	cmp	r2, #3
 8007a6e:	f43f aeea 	beq.w	8007846 <dhcp_recv+0xe6>
 8007a72:	2a00      	cmp	r2, #0
 8007a74:	f43f af36 	beq.w	80078e4 <dhcp_recv+0x184>
 8007a78:	2300      	movs	r3, #0
 8007a7a:	f04f 37ff 	mov.w	r7, #4294967295
 8007a7e:	2600      	movs	r6, #0
      if (offset + len + 2 > 0xFFFF) {
 8007a80:	441c      	add	r4, r3
 8007a82:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8007a86:	4294      	cmp	r4, r2
 8007a88:	f73f aeb0 	bgt.w	80077ec <dhcp_recv+0x8c>
      offset = (u16_t)(offset + len + 2);
 8007a8c:	9a04      	ldr	r2, [sp, #16]
 8007a8e:	18d4      	adds	r4, r2, r3
 8007a90:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8007a92:	2e00      	cmp	r6, #0
 8007a94:	f43f af27 	beq.w	80078e6 <dhcp_recv+0x186>
        u32_t value = 0;
 8007a98:	2300      	movs	r3, #0
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8007a9a:	2f07      	cmp	r7, #7
        u32_t value = 0;
 8007a9c:	9307      	str	r3, [sp, #28]
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8007a9e:	d906      	bls.n	8007aae <dhcp_recv+0x34e>
 8007aa0:	4b37      	ldr	r3, [pc, #220]	; (8007b80 <dhcp_recv+0x420>)
 8007aa2:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8007aa6:	4937      	ldr	r1, [pc, #220]	; (8007b84 <dhcp_recv+0x424>)
 8007aa8:	4837      	ldr	r0, [pc, #220]	; (8007b88 <dhcp_recv+0x428>)
 8007aaa:	f006 fc6f 	bl	800e38c <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8007aae:	9b02      	ldr	r3, [sp, #8]
 8007ab0:	5ddb      	ldrb	r3, [r3, r7]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f47f af17 	bne.w	80078e6 <dhcp_recv+0x186>
          copy_len = LWIP_MIN(decode_len, 4);
 8007ab8:	b2b2      	uxth	r2, r6
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8007aba:	9b04      	ldr	r3, [sp, #16]
 8007abc:	a907      	add	r1, sp, #28
 8007abe:	4640      	mov	r0, r8
 8007ac0:	9204      	str	r2, [sp, #16]
 8007ac2:	f002 fcd7 	bl	800a474 <pbuf_copy_partial>
 8007ac6:	9a04      	ldr	r2, [sp, #16]
 8007ac8:	4282      	cmp	r2, r0
 8007aca:	f47f ae8f 	bne.w	80077ec <dhcp_recv+0x8c>
          } else if (decode_len == 4) {
 8007ace:	2e04      	cmp	r6, #4
 8007ad0:	f47f af20 	bne.w	8007914 <dhcp_recv+0x1b4>
            value = lwip_ntohl(value);
 8007ad4:	9807      	ldr	r0, [sp, #28]
 8007ad6:	f001 fd44 	bl	8009562 <lwip_htonl>
 8007ada:	9007      	str	r0, [sp, #28]
          dhcp_got_option(dhcp, decode_idx);
 8007adc:	2301      	movs	r3, #1
 8007ade:	9a02      	ldr	r2, [sp, #8]
 8007ae0:	55d3      	strb	r3, [r2, r7]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8007ae2:	9b07      	ldr	r3, [sp, #28]
 8007ae4:	4a29      	ldr	r2, [pc, #164]	; (8007b8c <dhcp_recv+0x42c>)
 8007ae6:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 8007aea:	e6fc      	b.n	80078e6 <dhcp_recv+0x186>
 8007aec:	f1a2 0333 	sub.w	r3, r2, #51	; 0x33
 8007af0:	2b08      	cmp	r3, #8
 8007af2:	f63f aef3 	bhi.w	80078dc <dhcp_recv+0x17c>
 8007af6:	a101      	add	r1, pc, #4	; (adr r1, 8007afc <dhcp_recv+0x39c>)
 8007af8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007afc:	0800787d 	.word	0x0800787d
 8007b00:	08007889 	.word	0x08007889
 8007b04:	080078ab 	.word	0x080078ab
 8007b08:	080078b9 	.word	0x080078b9
 8007b0c:	080078dd 	.word	0x080078dd
 8007b10:	080078dd 	.word	0x080078dd
 8007b14:	080078dd 	.word	0x080078dd
 8007b18:	080078c7 	.word	0x080078c7
 8007b1c:	080078d5 	.word	0x080078d5
 8007b20:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8007b22:	2706      	movs	r7, #6
 8007b24:	e7ac      	b.n	8007a80 <dhcp_recv+0x320>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8007b26:	2707      	movs	r7, #7
        decode_len = 4; /* only copy the first given router */
 8007b28:	2604      	movs	r6, #4
 8007b2a:	e7a9      	b.n	8007a80 <dhcp_recv+0x320>
 8007b2c:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8007b2e:	2703      	movs	r7, #3
 8007b30:	e7a6      	b.n	8007a80 <dhcp_recv+0x320>
    decode_len = len;
 8007b32:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8007b34:	2700      	movs	r7, #0
 8007b36:	e7a3      	b.n	8007a80 <dhcp_recv+0x320>
 8007b38:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8007b3a:	2702      	movs	r7, #2
 8007b3c:	e7a0      	b.n	8007a80 <dhcp_recv+0x320>
 8007b3e:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_T1;
 8007b40:	461f      	mov	r7, r3
 8007b42:	e79d      	b.n	8007a80 <dhcp_recv+0x320>
 8007b44:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_T2;
 8007b46:	2705      	movs	r7, #5
    if (op == DHCP_OPTION_PAD) {
 8007b48:	e79a      	b.n	8007a80 <dhcp_recv+0x320>
 8007b4a:	f1a2 0133 	sub.w	r1, r2, #51	; 0x33
 8007b4e:	2908      	cmp	r1, #8
 8007b50:	f63f aec5 	bhi.w	80078de <dhcp_recv+0x17e>
 8007b54:	a601      	add	r6, pc, #4	; (adr r6, 8007b5c <dhcp_recv+0x3fc>)
 8007b56:	f856 f021 	ldr.w	pc, [r6, r1, lsl #2]
 8007b5a:	bf00      	nop
 8007b5c:	08007877 	.word	0x08007877
 8007b60:	08007885 	.word	0x08007885
 8007b64:	080078a5 	.word	0x080078a5
 8007b68:	080078b3 	.word	0x080078b3
 8007b6c:	080078df 	.word	0x080078df
 8007b70:	080078df 	.word	0x080078df
 8007b74:	080078df 	.word	0x080078df
 8007b78:	080078c1 	.word	0x080078c1
 8007b7c:	080078cf 	.word	0x080078cf
 8007b80:	08013f82 	.word	0x08013f82
 8007b84:	08014241 	.word	0x08014241
 8007b88:	0801342c 	.word	0x0801342c
 8007b8c:	2000a800 	.word	0x2000a800

08007b90 <dhcp_arp_reply>:
{
 8007b90:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8007b92:	4606      	mov	r6, r0
{
 8007b94:	b087      	sub	sp, #28
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8007b96:	b940      	cbnz	r0, 8007baa <dhcp_arp_reply+0x1a>
 8007b98:	4b27      	ldr	r3, [pc, #156]	; (8007c38 <dhcp_arp_reply+0xa8>)
 8007b9a:	f240 328b 	movw	r2, #907	; 0x38b
 8007b9e:	4927      	ldr	r1, [pc, #156]	; (8007c3c <dhcp_arp_reply+0xac>)
 8007ba0:	4827      	ldr	r0, [pc, #156]	; (8007c40 <dhcp_arp_reply+0xb0>)
 8007ba2:	f006 fbf3 	bl	800e38c <iprintf>
}
 8007ba6:	b007      	add	sp, #28
 8007ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  dhcp = netif_dhcp_data(netif);
 8007baa:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8007bac:	2c00      	cmp	r4, #0
 8007bae:	d0fa      	beq.n	8007ba6 <dhcp_arp_reply+0x16>
 8007bb0:	7963      	ldrb	r3, [r4, #5]
 8007bb2:	2b08      	cmp	r3, #8
 8007bb4:	d1f7      	bne.n	8007ba6 <dhcp_arp_reply+0x16>
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8007bb6:	680a      	ldr	r2, [r1, #0]
 8007bb8:	69e3      	ldr	r3, [r4, #28]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d1f3      	bne.n	8007ba6 <dhcp_arp_reply+0x16>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8007bbe:	210c      	movs	r1, #12
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	f7ff f9c5 	bl	8006f50 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8007bc6:	f10d 0316 	add.w	r3, sp, #22
 8007bca:	2204      	movs	r2, #4
 8007bcc:	4621      	mov	r1, r4
 8007bce:	4630      	mov	r0, r6
 8007bd0:	f7ff fa3c 	bl	800704c <dhcp_create_msg>
  if (p_out != NULL) {
 8007bd4:	4605      	mov	r5, r0
 8007bd6:	b330      	cbz	r0, 8007c26 <dhcp_arp_reply+0x96>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8007bd8:	6841      	ldr	r1, [r0, #4]
 8007bda:	2304      	movs	r3, #4
 8007bdc:	2232      	movs	r2, #50	; 0x32
 8007bde:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8007be2:	31f0      	adds	r1, #240	; 0xf0
 8007be4:	9103      	str	r1, [sp, #12]
 8007be6:	f7ff f9d7 	bl	8006f98 <dhcp_option>
 8007bea:	4607      	mov	r7, r0
 8007bec:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8007bf0:	69e0      	ldr	r0, [r4, #28]
 8007bf2:	f001 fcb6 	bl	8009562 <lwip_htonl>
 8007bf6:	9903      	ldr	r1, [sp, #12]
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	4638      	mov	r0, r7
 8007bfc:	f7ff fa02 	bl	8007004 <dhcp_option_long>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8007c00:	462a      	mov	r2, r5
 8007c02:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8007c04:	f8ad 0016 	strh.w	r0, [sp, #22]
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8007c08:	f7ff fab4 	bl	8007174 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8007c0c:	4b0d      	ldr	r3, [pc, #52]	; (8007c44 <dhcp_arp_reply+0xb4>)
 8007c0e:	4629      	mov	r1, r5
 8007c10:	480d      	ldr	r0, [pc, #52]	; (8007c48 <dhcp_arp_reply+0xb8>)
 8007c12:	4a0e      	ldr	r2, [pc, #56]	; (8007c4c <dhcp_arp_reply+0xbc>)
 8007c14:	e9cd 6300 	strd	r6, r3, [sp]
 8007c18:	2343      	movs	r3, #67	; 0x43
 8007c1a:	6840      	ldr	r0, [r0, #4]
 8007c1c:	f006 f88a 	bl	800dd34 <udp_sendto_if_src>
    pbuf_free(p_out);
 8007c20:	4628      	mov	r0, r5
 8007c22:	f002 fa01 	bl	800a028 <pbuf_free>
  if (dhcp->tries < 255) {
 8007c26:	79a3      	ldrb	r3, [r4, #6]
 8007c28:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8007c2a:	bf1c      	itt	ne
 8007c2c:	3301      	addne	r3, #1
 8007c2e:	71a3      	strbne	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8007c30:	2314      	movs	r3, #20
 8007c32:	8123      	strh	r3, [r4, #8]
  return result;
 8007c34:	e7b7      	b.n	8007ba6 <dhcp_arp_reply+0x16>
 8007c36:	bf00      	nop
 8007c38:	08013f82 	.word	0x08013f82
 8007c3c:	08014197 	.word	0x08014197
 8007c40:	0801342c 	.word	0x0801342c
 8007c44:	08013240 	.word	0x08013240
 8007c48:	200067ec 	.word	0x200067ec
 8007c4c:	0801323c 	.word	0x0801323c

08007c50 <dhcp_renew>:
{
 8007c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8007c54:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 8007c56:	b086      	sub	sp, #24
 8007c58:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8007c5a:	2105      	movs	r1, #5
 8007c5c:	4620      	mov	r0, r4
 8007c5e:	f7ff f977 	bl	8006f50 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8007c62:	f10d 0316 	add.w	r3, sp, #22
 8007c66:	2203      	movs	r2, #3
 8007c68:	4621      	mov	r1, r4
 8007c6a:	4630      	mov	r0, r6
 8007c6c:	f7ff f9ee 	bl	800704c <dhcp_create_msg>
  if (p_out != NULL) {
 8007c70:	4605      	mov	r5, r0
 8007c72:	2800      	cmp	r0, #0
 8007c74:	d055      	beq.n	8007d22 <dhcp_renew+0xd2>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8007c76:	6841      	ldr	r1, [r0, #4]
 8007c78:	2302      	movs	r3, #2
 8007c7a:	2239      	movs	r2, #57	; 0x39
 8007c7c:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8007c80:	31f0      	adds	r1, #240	; 0xf0
 8007c82:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8007d2c <dhcp_renew+0xdc>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8007c86:	2703      	movs	r7, #3
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8007c88:	9103      	str	r1, [sp, #12]
 8007c8a:	f7ff f985 	bl	8006f98 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8007c8e:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 8007c90:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8007c92:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8007c96:	f7ff f963 	bl	8006f60 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8007c9a:	9903      	ldr	r1, [sp, #12]
 8007c9c:	2303      	movs	r3, #3
 8007c9e:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8007ca0:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8007ca4:	f7ff f978 	bl	8006f98 <dhcp_option>
 8007ca8:	9903      	ldr	r1, [sp, #12]
 8007caa:	f8ad 0016 	strh.w	r0, [sp, #22]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8007cae:	3f01      	subs	r7, #1
 8007cb0:	f818 2b01 	ldrb.w	r2, [r8], #1
 8007cb4:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8007cb8:	9103      	str	r1, [sp, #12]
 8007cba:	f7ff f98b 	bl	8006fd4 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8007cbe:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8007cc2:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8007cc4:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8007cc8:	d1f1      	bne.n	8007cae <dhcp_renew+0x5e>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8007cca:	462a      	mov	r2, r5
 8007ccc:	f7ff fa52 	bl	8007174 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8007cd0:	4815      	ldr	r0, [pc, #84]	; (8007d28 <dhcp_renew+0xd8>)
 8007cd2:	9600      	str	r6, [sp, #0]
 8007cd4:	2343      	movs	r3, #67	; 0x43
 8007cd6:	f104 0218 	add.w	r2, r4, #24
 8007cda:	4629      	mov	r1, r5
 8007cdc:	6840      	ldr	r0, [r0, #4]
 8007cde:	f006 f8c1 	bl	800de64 <udp_sendto_if>
 8007ce2:	4606      	mov	r6, r0
    pbuf_free(p_out);
 8007ce4:	4628      	mov	r0, r5
 8007ce6:	f002 f99f 	bl	800a028 <pbuf_free>
  if (dhcp->tries < 255) {
 8007cea:	79a3      	ldrb	r3, [r4, #6]
}
 8007cec:	4630      	mov	r0, r6
  if (dhcp->tries < 255) {
 8007cee:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8007cf0:	bf1c      	itt	ne
 8007cf2:	3301      	addne	r3, #1
 8007cf4:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8007cf6:	79a3      	ldrb	r3, [r4, #6]
 8007cf8:	2b09      	cmp	r3, #9
 8007cfa:	bf96      	itet	ls
 8007cfc:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8007d00:	f644 6320 	movwhi	r3, #20000	; 0x4e20
 8007d04:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8007d08:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8007d0c:	bf9c      	itt	ls
 8007d0e:	011b      	lslls	r3, r3, #4
 8007d10:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8007d12:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8007d16:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d1a:	8123      	strh	r3, [r4, #8]
}
 8007d1c:	b006      	add	sp, #24
 8007d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result = ERR_MEM;
 8007d22:	f04f 36ff 	mov.w	r6, #4294967295
 8007d26:	e7e0      	b.n	8007cea <dhcp_renew+0x9a>
 8007d28:	200067ec 	.word	0x200067ec
 8007d2c:	08013236 	.word	0x08013236

08007d30 <dhcp_supplied_address>:
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8007d30:	b150      	cbz	r0, 8007d48 <dhcp_supplied_address+0x18>
 8007d32:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8007d34:	b140      	cbz	r0, 8007d48 <dhcp_supplied_address+0x18>
    struct dhcp *dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8007d36:	7940      	ldrb	r0, [r0, #5]
 8007d38:	280a      	cmp	r0, #10
 8007d3a:	d006      	beq.n	8007d4a <dhcp_supplied_address+0x1a>
 8007d3c:	3804      	subs	r0, #4
 8007d3e:	2801      	cmp	r0, #1
 8007d40:	bf8c      	ite	hi
 8007d42:	2000      	movhi	r0, #0
 8007d44:	2001      	movls	r0, #1
 8007d46:	b2c0      	uxtb	r0, r0
           (dhcp->state == DHCP_STATE_REBINDING);
  }
  return 0;
}
 8007d48:	4770      	bx	lr
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8007d4a:	2001      	movs	r0, #1
 8007d4c:	e7fb      	b.n	8007d46 <dhcp_supplied_address+0x16>
	...

08007d50 <dhcp_release_and_stop>:
{
 8007d50:	b5f0      	push	{r4, r5, r6, r7, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8007d52:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 8007d54:	b087      	sub	sp, #28
 8007d56:	4606      	mov	r6, r0
  if (dhcp == NULL) {
 8007d58:	2c00      	cmp	r4, #0
 8007d5a:	d050      	beq.n	8007dfe <dhcp_release_and_stop+0xae>
  if (dhcp->state == DHCP_STATE_OFF) {
 8007d5c:	7963      	ldrb	r3, [r4, #5]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d04d      	beq.n	8007dfe <dhcp_release_and_stop+0xae>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8007d62:	69a3      	ldr	r3, [r4, #24]
 8007d64:	9305      	str	r3, [sp, #20]
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8007d66:	2300      	movs	r3, #0
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8007d68:	e9c4 3306 	strd	r3, r3, [r4, #24]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8007d6c:	e9c4 3308 	strd	r3, r3, [r4, #32]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8007d70:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8007d74:	62a3      	str	r3, [r4, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8007d76:	81e3      	strh	r3, [r4, #14]
 8007d78:	6123      	str	r3, [r4, #16]
 8007d7a:	82a3      	strh	r3, [r4, #20]
  if (dhcp_supplied_address(netif)) {
 8007d7c:	f7ff ffd8 	bl	8007d30 <dhcp_supplied_address>
 8007d80:	b368      	cbz	r0, 8007dde <dhcp_release_and_stop+0x8e>
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8007d82:	f10d 0312 	add.w	r3, sp, #18
 8007d86:	2207      	movs	r2, #7
 8007d88:	4621      	mov	r1, r4
 8007d8a:	4630      	mov	r0, r6
 8007d8c:	f7ff f95e 	bl	800704c <dhcp_create_msg>
    if (p_out != NULL) {
 8007d90:	4605      	mov	r5, r0
 8007d92:	b320      	cbz	r0, 8007dde <dhcp_release_and_stop+0x8e>
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8007d94:	6841      	ldr	r1, [r0, #4]
 8007d96:	2304      	movs	r3, #4
 8007d98:	2236      	movs	r2, #54	; 0x36
 8007d9a:	f8bd 0012 	ldrh.w	r0, [sp, #18]
 8007d9e:	31f0      	adds	r1, #240	; 0xf0
 8007da0:	9103      	str	r1, [sp, #12]
 8007da2:	f7ff f8f9 	bl	8006f98 <dhcp_option>
 8007da6:	4607      	mov	r7, r0
 8007da8:	f8ad 0012 	strh.w	r0, [sp, #18]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8007dac:	9805      	ldr	r0, [sp, #20]
 8007dae:	f001 fbd8 	bl	8009562 <lwip_htonl>
 8007db2:	9903      	ldr	r1, [sp, #12]
 8007db4:	4602      	mov	r2, r0
 8007db6:	4638      	mov	r0, r7
 8007db8:	f7ff f924 	bl	8007004 <dhcp_option_long>
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8007dbc:	462a      	mov	r2, r5
 8007dbe:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8007dc0:	f8ad 0012 	strh.w	r0, [sp, #18]
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8007dc4:	f7ff f9d6 	bl	8007174 <dhcp_option_trailer>
      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8007dc8:	480e      	ldr	r0, [pc, #56]	; (8007e04 <dhcp_release_and_stop+0xb4>)
 8007dca:	2343      	movs	r3, #67	; 0x43
 8007dcc:	9600      	str	r6, [sp, #0]
 8007dce:	aa05      	add	r2, sp, #20
 8007dd0:	4629      	mov	r1, r5
 8007dd2:	6840      	ldr	r0, [r0, #4]
 8007dd4:	f006 f846 	bl	800de64 <udp_sendto_if>
      pbuf_free(p_out);
 8007dd8:	4628      	mov	r0, r5
 8007dda:	f002 f925 	bl	800a028 <pbuf_free>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8007dde:	4b0a      	ldr	r3, [pc, #40]	; (8007e08 <dhcp_release_and_stop+0xb8>)
 8007de0:	4630      	mov	r0, r6
 8007de2:	4619      	mov	r1, r3
 8007de4:	461a      	mov	r2, r3
 8007de6:	f001 ff65 	bl	8009cb4 <netif_set_addr>
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8007dea:	2100      	movs	r1, #0
 8007dec:	4620      	mov	r0, r4
 8007dee:	f7ff f8af 	bl	8006f50 <dhcp_set_state>
  if (dhcp->pcb_allocated != 0) {
 8007df2:	7923      	ldrb	r3, [r4, #4]
 8007df4:	b11b      	cbz	r3, 8007dfe <dhcp_release_and_stop+0xae>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8007df6:	f7ff fc97 	bl	8007728 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	7123      	strb	r3, [r4, #4]
}
 8007dfe:	b007      	add	sp, #28
 8007e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e02:	bf00      	nop
 8007e04:	200067ec 	.word	0x200067ec
 8007e08:	08013240 	.word	0x08013240

08007e0c <dhcp_start>:
{
 8007e0c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8007e0e:	4604      	mov	r4, r0
 8007e10:	b950      	cbnz	r0, 8007e28 <dhcp_start+0x1c>
 8007e12:	4b24      	ldr	r3, [pc, #144]	; (8007ea4 <dhcp_start+0x98>)
 8007e14:	f240 22e7 	movw	r2, #743	; 0x2e7
 8007e18:	4923      	ldr	r1, [pc, #140]	; (8007ea8 <dhcp_start+0x9c>)
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8007e1a:	4824      	ldr	r0, [pc, #144]	; (8007eac <dhcp_start+0xa0>)
 8007e1c:	f006 fab6 	bl	800e38c <iprintf>
 8007e20:	f06f 020f 	mvn.w	r2, #15
}
 8007e24:	4610      	mov	r0, r2
 8007e26:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8007e28:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8007e2c:	07da      	lsls	r2, r3, #31
 8007e2e:	d404      	bmi.n	8007e3a <dhcp_start+0x2e>
 8007e30:	4b1c      	ldr	r3, [pc, #112]	; (8007ea4 <dhcp_start+0x98>)
 8007e32:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8007e36:	491e      	ldr	r1, [pc, #120]	; (8007eb0 <dhcp_start+0xa4>)
 8007e38:	e7ef      	b.n	8007e1a <dhcp_start+0xe>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8007e3a:	8d03      	ldrh	r3, [r0, #40]	; 0x28
  dhcp = netif_dhcp_data(netif);
 8007e3c:	6a45      	ldr	r5, [r0, #36]	; 0x24
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8007e3e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8007e42:	d202      	bcs.n	8007e4a <dhcp_start+0x3e>
    return ERR_MEM;
 8007e44:	f04f 32ff 	mov.w	r2, #4294967295
 8007e48:	e7ec      	b.n	8007e24 <dhcp_start+0x18>
  if (dhcp == NULL) {
 8007e4a:	b9dd      	cbnz	r5, 8007e84 <dhcp_start+0x78>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8007e4c:	2034      	movs	r0, #52	; 0x34
 8007e4e:	f001 fd9f 	bl	8009990 <mem_malloc>
    if (dhcp == NULL) {
 8007e52:	4605      	mov	r5, r0
 8007e54:	2800      	cmp	r0, #0
 8007e56:	d0f5      	beq.n	8007e44 <dhcp_start+0x38>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8007e58:	6260      	str	r0, [r4, #36]	; 0x24
  memset(dhcp, 0, sizeof(struct dhcp));
 8007e5a:	2234      	movs	r2, #52	; 0x34
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	4628      	mov	r0, r5
 8007e60:	f006 fa8c 	bl	800e37c <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8007e64:	f7ff fbf6 	bl	8007654 <dhcp_inc_pcb_refcount>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	2800      	cmp	r0, #0
 8007e6c:	d1ea      	bne.n	8007e44 <dhcp_start+0x38>
  dhcp->pcb_allocated = 1;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	712b      	strb	r3, [r5, #4]
  if (!netif_is_link_up(netif)) {
 8007e72:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8007e76:	075b      	lsls	r3, r3, #29
 8007e78:	d40a      	bmi.n	8007e90 <dhcp_start+0x84>
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8007e7a:	2102      	movs	r1, #2
 8007e7c:	4628      	mov	r0, r5
 8007e7e:	f7ff f867 	bl	8006f50 <dhcp_set_state>
    return ERR_OK;
 8007e82:	e7cf      	b.n	8007e24 <dhcp_start+0x18>
    if (dhcp->pcb_allocated != 0) {
 8007e84:	792b      	ldrb	r3, [r5, #4]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d0e7      	beq.n	8007e5a <dhcp_start+0x4e>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8007e8a:	f7ff fc4d 	bl	8007728 <dhcp_dec_pcb_refcount>
 8007e8e:	e7e4      	b.n	8007e5a <dhcp_start+0x4e>
  result = dhcp_discover(netif);
 8007e90:	4620      	mov	r0, r4
 8007e92:	f7ff facd 	bl	8007430 <dhcp_discover>
  if (result != ERR_OK) {
 8007e96:	4602      	mov	r2, r0
 8007e98:	2800      	cmp	r0, #0
 8007e9a:	d0c3      	beq.n	8007e24 <dhcp_start+0x18>
    dhcp_release_and_stop(netif);
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	f7ff ff57 	bl	8007d50 <dhcp_release_and_stop>
 8007ea2:	e7cf      	b.n	8007e44 <dhcp_start+0x38>
 8007ea4:	08013f82 	.word	0x08013f82
 8007ea8:	08014197 	.word	0x08014197
 8007eac:	0801342c 	.word	0x0801342c
 8007eb0:	080142b0 	.word	0x080142b0

08007eb4 <dhcp_coarse_tmr>:
  NETIF_FOREACH(netif) {
 8007eb4:	4b58      	ldr	r3, [pc, #352]	; (8008018 <dhcp_coarse_tmr+0x164>)
{
 8007eb6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  NETIF_FOREACH(netif) {
 8007eba:	681d      	ldr	r5, [r3, #0]
{
 8007ebc:	b087      	sub	sp, #28
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8007ebe:	f240 2619 	movw	r6, #537	; 0x219
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8007ec2:	4f56      	ldr	r7, [pc, #344]	; (800801c <dhcp_coarse_tmr+0x168>)
 8007ec4:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8008020 <dhcp_coarse_tmr+0x16c>
  NETIF_FOREACH(netif) {
 8007ec8:	b915      	cbnz	r5, 8007ed0 <dhcp_coarse_tmr+0x1c>
}
 8007eca:	b007      	add	sp, #28
 8007ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8007ed0:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8007ed2:	b17c      	cbz	r4, 8007ef4 <dhcp_coarse_tmr+0x40>
 8007ed4:	7963      	ldrb	r3, [r4, #5]
 8007ed6:	b16b      	cbz	r3, 8007ef4 <dhcp_coarse_tmr+0x40>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8007ed8:	8aa1      	ldrh	r1, [r4, #20]
 8007eda:	b169      	cbz	r1, 8007ef8 <dhcp_coarse_tmr+0x44>
 8007edc:	8a62      	ldrh	r2, [r4, #18]
 8007ede:	3201      	adds	r2, #1
 8007ee0:	b292      	uxth	r2, r2
 8007ee2:	4291      	cmp	r1, r2
 8007ee4:	8262      	strh	r2, [r4, #18]
 8007ee6:	d107      	bne.n	8007ef8 <dhcp_coarse_tmr+0x44>
        dhcp_release_and_stop(netif);
 8007ee8:	4628      	mov	r0, r5
 8007eea:	f7ff ff31 	bl	8007d50 <dhcp_release_and_stop>
        dhcp_start(netif);
 8007eee:	4628      	mov	r0, r5
 8007ef0:	f7ff ff8c 	bl	8007e0c <dhcp_start>
  NETIF_FOREACH(netif) {
 8007ef4:	682d      	ldr	r5, [r5, #0]
 8007ef6:	e7e7      	b.n	8007ec8 <dhcp_coarse_tmr+0x14>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8007ef8:	8a22      	ldrh	r2, [r4, #16]
 8007efa:	2a00      	cmp	r2, #0
 8007efc:	d072      	beq.n	8007fe4 <dhcp_coarse_tmr+0x130>
 8007efe:	1e51      	subs	r1, r2, #1
 8007f00:	2a01      	cmp	r2, #1
 8007f02:	8221      	strh	r1, [r4, #16]
 8007f04:	d16e      	bne.n	8007fe4 <dhcp_coarse_tmr+0x130>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8007f06:	3b01      	subs	r3, #1
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	2b09      	cmp	r3, #9
 8007f0c:	d8f2      	bhi.n	8007ef4 <dhcp_coarse_tmr+0x40>
 8007f0e:	fa26 f303 	lsr.w	r3, r6, r3
 8007f12:	07db      	lsls	r3, r3, #31
 8007f14:	d5ee      	bpl.n	8007ef4 <dhcp_coarse_tmr+0x40>
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8007f16:	2104      	movs	r1, #4
 8007f18:	4620      	mov	r0, r4
 8007f1a:	f7ff f819 	bl	8006f50 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8007f1e:	f10d 0316 	add.w	r3, sp, #22
 8007f22:	2203      	movs	r2, #3
 8007f24:	4621      	mov	r1, r4
 8007f26:	4628      	mov	r0, r5
 8007f28:	f7ff f890 	bl	800704c <dhcp_create_msg>
  if (p_out != NULL) {
 8007f2c:	4681      	mov	r9, r0
 8007f2e:	2800      	cmp	r0, #0
 8007f30:	d038      	beq.n	8007fa4 <dhcp_coarse_tmr+0xf0>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8007f32:	6841      	ldr	r1, [r0, #4]
 8007f34:	2302      	movs	r3, #2
 8007f36:	2239      	movs	r2, #57	; 0x39
 8007f38:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8007f3c:	31f0      	adds	r1, #240	; 0xf0
 8007f3e:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 8008024 <dhcp_coarse_tmr+0x170>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8007f42:	f04f 0a03 	mov.w	sl, #3
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8007f46:	9103      	str	r1, [sp, #12]
 8007f48:	f7ff f826 	bl	8006f98 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8007f4c:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 8007f4e:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8007f50:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8007f54:	f7ff f804 	bl	8006f60 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8007f58:	9903      	ldr	r1, [sp, #12]
 8007f5a:	2303      	movs	r3, #3
 8007f5c:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8007f5e:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8007f62:	f7ff f819 	bl	8006f98 <dhcp_option>
 8007f66:	9903      	ldr	r1, [sp, #12]
 8007f68:	f8ad 0016 	strh.w	r0, [sp, #22]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8007f6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f70:	f81b 2b01 	ldrb.w	r2, [fp], #1
 8007f74:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8007f78:	9103      	str	r1, [sp, #12]
 8007f7a:	f7ff f82b 	bl	8006fd4 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8007f7e:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
 8007f82:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8007f84:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8007f88:	d1f0      	bne.n	8007f6c <dhcp_coarse_tmr+0xb8>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8007f8a:	464a      	mov	r2, r9
 8007f8c:	f7ff f8f2 	bl	8007174 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8007f90:	2343      	movs	r3, #67	; 0x43
 8007f92:	4642      	mov	r2, r8
 8007f94:	4649      	mov	r1, r9
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	9500      	str	r5, [sp, #0]
 8007f9a:	f005 ff63 	bl	800de64 <udp_sendto_if>
    pbuf_free(p_out);
 8007f9e:	4648      	mov	r0, r9
 8007fa0:	f002 f842 	bl	800a028 <pbuf_free>
  if (dhcp->tries < 255) {
 8007fa4:	79a3      	ldrb	r3, [r4, #6]
 8007fa6:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8007fa8:	bf1c      	itt	ne
 8007faa:	3301      	addne	r3, #1
 8007fac:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8007fae:	79a3      	ldrb	r3, [r4, #6]
 8007fb0:	2b09      	cmp	r3, #9
 8007fb2:	bf96      	itet	ls
 8007fb4:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8007fb8:	f242 7310 	movwhi	r3, #10000	; 0x2710
 8007fbc:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8007fc0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8007fc4:	bf9c      	itt	ls
 8007fc6:	00db      	lslls	r3, r3, #3
 8007fc8:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8007fca:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8007fce:	fbb3 f3f2 	udiv	r3, r3, r2
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8007fd2:	8a62      	ldrh	r2, [r4, #18]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8007fd4:	8123      	strh	r3, [r4, #8]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8007fd6:	8aa3      	ldrh	r3, [r4, #20]
 8007fd8:	1a9b      	subs	r3, r3, r2
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	dd8a      	ble.n	8007ef4 <dhcp_coarse_tmr+0x40>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8007fde:	105b      	asrs	r3, r3, #1
 8007fe0:	8223      	strh	r3, [r4, #16]
 8007fe2:	e787      	b.n	8007ef4 <dhcp_coarse_tmr+0x40>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8007fe4:	89e2      	ldrh	r2, [r4, #14]
 8007fe6:	2a00      	cmp	r2, #0
 8007fe8:	d084      	beq.n	8007ef4 <dhcp_coarse_tmr+0x40>
 8007fea:	1e51      	subs	r1, r2, #1
 8007fec:	2a01      	cmp	r2, #1
 8007fee:	81e1      	strh	r1, [r4, #14]
 8007ff0:	d180      	bne.n	8007ef4 <dhcp_coarse_tmr+0x40>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8007ff2:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 8007ff6:	2a01      	cmp	r2, #1
 8007ff8:	d002      	beq.n	8008000 <dhcp_coarse_tmr+0x14c>
 8007ffa:	2b0a      	cmp	r3, #10
 8007ffc:	f47f af7a 	bne.w	8007ef4 <dhcp_coarse_tmr+0x40>
    dhcp_renew(netif);
 8008000:	4628      	mov	r0, r5
 8008002:	f7ff fe25 	bl	8007c50 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8008006:	89a3      	ldrh	r3, [r4, #12]
 8008008:	8a62      	ldrh	r2, [r4, #18]
 800800a:	1a9b      	subs	r3, r3, r2
 800800c:	2b01      	cmp	r3, #1
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800800e:	bfc4      	itt	gt
 8008010:	105b      	asrgt	r3, r3, #1
 8008012:	81e3      	strhgt	r3, [r4, #14]
 8008014:	e76e      	b.n	8007ef4 <dhcp_coarse_tmr+0x40>
 8008016:	bf00      	nop
 8008018:	20010d48 	.word	0x20010d48
 800801c:	200067ec 	.word	0x200067ec
 8008020:	0801323c 	.word	0x0801323c
 8008024:	08013236 	.word	0x08013236

08008028 <dhcp_fine_tmr>:
{
 8008028:	b538      	push	{r3, r4, r5, lr}
  NETIF_FOREACH(netif) {
 800802a:	4b1e      	ldr	r3, [pc, #120]	; (80080a4 <dhcp_fine_tmr+0x7c>)
        dhcp->request_timeout--;
 800802c:	2500      	movs	r5, #0
  NETIF_FOREACH(netif) {
 800802e:	681c      	ldr	r4, [r3, #0]
 8008030:	b904      	cbnz	r4, 8008034 <dhcp_fine_tmr+0xc>
}
 8008032:	bd38      	pop	{r3, r4, r5, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8008034:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (dhcp != NULL) {
 8008036:	b123      	cbz	r3, 8008042 <dhcp_fine_tmr+0x1a>
      if (dhcp->request_timeout > 1) {
 8008038:	891a      	ldrh	r2, [r3, #8]
 800803a:	2a01      	cmp	r2, #1
 800803c:	d903      	bls.n	8008046 <dhcp_fine_tmr+0x1e>
        dhcp->request_timeout--;
 800803e:	3a01      	subs	r2, #1
 8008040:	811a      	strh	r2, [r3, #8]
  NETIF_FOREACH(netif) {
 8008042:	6824      	ldr	r4, [r4, #0]
 8008044:	e7f4      	b.n	8008030 <dhcp_fine_tmr+0x8>
      } else if (dhcp->request_timeout == 1) {
 8008046:	d1fc      	bne.n	8008042 <dhcp_fine_tmr+0x1a>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8008048:	795a      	ldrb	r2, [r3, #5]
        dhcp->request_timeout--;
 800804a:	811d      	strh	r5, [r3, #8]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800804c:	2a0c      	cmp	r2, #12
 800804e:	d001      	beq.n	8008054 <dhcp_fine_tmr+0x2c>
 8008050:	2a06      	cmp	r2, #6
 8008052:	d103      	bne.n	800805c <dhcp_fine_tmr+0x34>
    dhcp_discover(netif);
 8008054:	4620      	mov	r0, r4
      dhcp_discover(netif);
 8008056:	f7ff f9eb 	bl	8007430 <dhcp_discover>
 800805a:	e7f2      	b.n	8008042 <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800805c:	2a01      	cmp	r2, #1
 800805e:	d10c      	bne.n	800807a <dhcp_fine_tmr+0x52>
    if (dhcp->tries <= 5) {
 8008060:	799b      	ldrb	r3, [r3, #6]
      dhcp_select(netif);
 8008062:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 8008064:	2b05      	cmp	r3, #5
 8008066:	d802      	bhi.n	800806e <dhcp_fine_tmr+0x46>
      dhcp_select(netif);
 8008068:	f7ff f926 	bl	80072b8 <dhcp_select>
 800806c:	e7e9      	b.n	8008042 <dhcp_fine_tmr+0x1a>
      dhcp_release_and_stop(netif);
 800806e:	f7ff fe6f 	bl	8007d50 <dhcp_release_and_stop>
      dhcp_start(netif);
 8008072:	4620      	mov	r0, r4
 8008074:	f7ff feca 	bl	8007e0c <dhcp_start>
 8008078:	e7e3      	b.n	8008042 <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800807a:	2a08      	cmp	r2, #8
 800807c:	d109      	bne.n	8008092 <dhcp_fine_tmr+0x6a>
    if (dhcp->tries <= 1) {
 800807e:	799b      	ldrb	r3, [r3, #6]
      dhcp_check(netif);
 8008080:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 8008082:	2b01      	cmp	r3, #1
 8008084:	d802      	bhi.n	800808c <dhcp_fine_tmr+0x64>
      dhcp_check(netif);
 8008086:	f7ff fa49 	bl	800751c <dhcp_check>
 800808a:	e7da      	b.n	8008042 <dhcp_fine_tmr+0x1a>
      dhcp_bind(netif);
 800808c:	f7ff fa5c 	bl	8007548 <dhcp_bind>
 8008090:	e7d7      	b.n	8008042 <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8008092:	2a03      	cmp	r2, #3
 8008094:	d1d5      	bne.n	8008042 <dhcp_fine_tmr+0x1a>
    if (dhcp->tries < REBOOT_TRIES) {
 8008096:	799b      	ldrb	r3, [r3, #6]
      dhcp_reboot(netif);
 8008098:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 800809a:	2b01      	cmp	r3, #1
 800809c:	d8db      	bhi.n	8008056 <dhcp_fine_tmr+0x2e>
      dhcp_reboot(netif);
 800809e:	f7ff f887 	bl	80071b0 <dhcp_reboot>
 80080a2:	e7ce      	b.n	8008042 <dhcp_fine_tmr+0x1a>
 80080a4:	20010d48 	.word	0x20010d48

080080a8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80080a8:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80080aa:	2618      	movs	r6, #24
 80080ac:	4d07      	ldr	r5, [pc, #28]	; (80080cc <etharp_free_entry+0x24>)
{
 80080ae:	4604      	mov	r4, r0
  if (arp_table[i].q != NULL) {
 80080b0:	4346      	muls	r6, r0
 80080b2:	59a8      	ldr	r0, [r5, r6]
 80080b4:	b118      	cbz	r0, 80080be <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80080b6:	f001 ffb7 	bl	800a028 <pbuf_free>
    arp_table[i].q = NULL;
 80080ba:	2300      	movs	r3, #0
 80080bc:	51ab      	str	r3, [r5, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80080be:	2018      	movs	r0, #24
 80080c0:	2300      	movs	r3, #0
 80080c2:	fb00 5404 	mla	r4, r0, r4, r5
 80080c6:	7523      	strb	r3, [r4, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80080c8:	bd70      	pop	{r4, r5, r6, pc}
 80080ca:	bf00      	nop
 80080cc:	200067f8 	.word	0x200067f8

080080d0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80080d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d4:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80080d6:	f04f 0e0a 	mov.w	lr, #10
{
 80080da:	4606      	mov	r6, r0
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80080dc:	4699      	mov	r9, r3
 80080de:	469b      	mov	fp, r3
 80080e0:	469c      	mov	ip, r3
  s16_t empty = ARP_TABLE_SIZE;
 80080e2:	4674      	mov	r4, lr
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80080e4:	4675      	mov	r5, lr
 80080e6:	46f0      	mov	r8, lr
{
 80080e8:	e9cd 2100 	strd	r2, r1, [sp]
 80080ec:	4a3a      	ldr	r2, [pc, #232]	; (80081d8 <etharp_find_entry+0x108>)
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80080ee:	2c0a      	cmp	r4, #10
 80080f0:	b218      	sxth	r0, r3
    u8_t state = arp_table[i].state;
 80080f2:	f892 a014 	ldrb.w	sl, [r2, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80080f6:	d11a      	bne.n	800812e <etharp_find_entry+0x5e>
 80080f8:	f1ba 0f00 	cmp.w	sl, #0
 80080fc:	d05d      	beq.n	80081ba <etharp_find_entry+0xea>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80080fe:	b156      	cbz	r6, 8008116 <etharp_find_entry+0x46>
 8008100:	6837      	ldr	r7, [r6, #0]
 8008102:	6851      	ldr	r1, [r2, #4]
 8008104:	428f      	cmp	r7, r1
 8008106:	d106      	bne.n	8008116 <etharp_find_entry+0x46>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8008108:	9900      	ldr	r1, [sp, #0]
 800810a:	2900      	cmp	r1, #0
 800810c:	d048      	beq.n	80081a0 <etharp_find_entry+0xd0>
 800810e:	6891      	ldr	r1, [r2, #8]
 8008110:	9f00      	ldr	r7, [sp, #0]
 8008112:	42b9      	cmp	r1, r7
 8008114:	d044      	beq.n	80081a0 <etharp_find_entry+0xd0>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8008116:	f1ba 0f01 	cmp.w	sl, #1
 800811a:	8a51      	ldrh	r1, [r2, #18]
 800811c:	d148      	bne.n	80081b0 <etharp_find_entry+0xe0>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800811e:	6817      	ldr	r7, [r2, #0]
 8008120:	2f00      	cmp	r7, #0
 8008122:	d040      	beq.n	80081a6 <etharp_find_entry+0xd6>
          if (arp_table[i].ctime >= age_queue) {
 8008124:	458c      	cmp	ip, r1
 8008126:	d805      	bhi.n	8008134 <etharp_find_entry+0x64>
 8008128:	468c      	mov	ip, r1
 800812a:	4686      	mov	lr, r0
 800812c:	e002      	b.n	8008134 <etharp_find_entry+0x64>
    } else if (state != ETHARP_STATE_EMPTY) {
 800812e:	f1ba 0f00 	cmp.w	sl, #0
 8008132:	d1e4      	bne.n	80080fe <etharp_find_entry+0x2e>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008134:	3301      	adds	r3, #1
 8008136:	3218      	adds	r2, #24
 8008138:	2b0a      	cmp	r3, #10
 800813a:	d1d8      	bne.n	80080ee <etharp_find_entry+0x1e>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800813c:	9b01      	ldr	r3, [sp, #4]
 800813e:	2b01      	cmp	r3, #1
 8008140:	d143      	bne.n	80081ca <etharp_find_entry+0xfa>
 8008142:	2c0a      	cmp	r4, #10
 8008144:	d111      	bne.n	800816a <etharp_find_entry+0x9a>
  if (empty < ARP_TABLE_SIZE) {
    i = empty;
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8008146:	2d0a      	cmp	r5, #10
 8008148:	d039      	beq.n	80081be <etharp_find_entry+0xee>
      /* recycle oldest stable*/
      i = old_stable;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800814a:	2318      	movs	r3, #24
 800814c:	4a22      	ldr	r2, [pc, #136]	; (80081d8 <etharp_find_entry+0x108>)
 800814e:	436b      	muls	r3, r5
 8008150:	58d3      	ldr	r3, [r2, r3]
 8008152:	b133      	cbz	r3, 8008162 <etharp_find_entry+0x92>
 8008154:	4b21      	ldr	r3, [pc, #132]	; (80081dc <etharp_find_entry+0x10c>)
 8008156:	f240 126d 	movw	r2, #365	; 0x16d
 800815a:	4921      	ldr	r1, [pc, #132]	; (80081e0 <etharp_find_entry+0x110>)
 800815c:	4821      	ldr	r0, [pc, #132]	; (80081e4 <etharp_find_entry+0x114>)
 800815e:	f006 f915 	bl	800e38c <iprintf>
      return (s16_t)ERR_MEM;
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
 8008162:	462c      	mov	r4, r5
 8008164:	4628      	mov	r0, r5
 8008166:	f7ff ff9f 	bl	80080a8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800816a:	4d1b      	ldr	r5, [pc, #108]	; (80081d8 <etharp_find_entry+0x108>)
 800816c:	2318      	movs	r3, #24
 800816e:	fb03 5304 	mla	r3, r3, r4, r5
 8008172:	7d1b      	ldrb	r3, [r3, #20]
 8008174:	b133      	cbz	r3, 8008184 <etharp_find_entry+0xb4>
 8008176:	4b19      	ldr	r3, [pc, #100]	; (80081dc <etharp_find_entry+0x10c>)
 8008178:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800817c:	491a      	ldr	r1, [pc, #104]	; (80081e8 <etharp_find_entry+0x118>)
 800817e:	4819      	ldr	r0, [pc, #100]	; (80081e4 <etharp_find_entry+0x114>)
 8008180:	f006 f904 	bl	800e38c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8008184:	b126      	cbz	r6, 8008190 <etharp_find_entry+0xc0>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8008186:	2318      	movs	r3, #24
 8008188:	6832      	ldr	r2, [r6, #0]
 800818a:	fb03 5304 	mla	r3, r3, r4, r5
 800818e:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 8008190:	2318      	movs	r3, #24
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8008192:	4620      	mov	r0, r4
  arp_table[i].ctime = 0;
 8008194:	fb03 5504 	mla	r5, r3, r4, r5
 8008198:	2300      	movs	r3, #0
 800819a:	826b      	strh	r3, [r5, #18]
  arp_table[i].netif = netif;
 800819c:	9b00      	ldr	r3, [sp, #0]
 800819e:	60ab      	str	r3, [r5, #8]
}
 80081a0:	b003      	add	sp, #12
 80081a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 80081a6:	458b      	cmp	fp, r1
 80081a8:	d8c4      	bhi.n	8008134 <etharp_find_entry+0x64>
 80081aa:	468b      	mov	fp, r1
 80081ac:	4680      	mov	r8, r0
 80081ae:	e7c1      	b.n	8008134 <etharp_find_entry+0x64>
          if (arp_table[i].ctime >= age_stable) {
 80081b0:	4589      	cmp	r9, r1
 80081b2:	d8bf      	bhi.n	8008134 <etharp_find_entry+0x64>
 80081b4:	4689      	mov	r9, r1
 80081b6:	4605      	mov	r5, r0
 80081b8:	e7bc      	b.n	8008134 <etharp_find_entry+0x64>
 80081ba:	4604      	mov	r4, r0
 80081bc:	e7ba      	b.n	8008134 <etharp_find_entry+0x64>
    } else if (old_pending < ARP_TABLE_SIZE) {
 80081be:	f1b8 0f0a 	cmp.w	r8, #10
 80081c2:	d105      	bne.n	80081d0 <etharp_find_entry+0x100>
    } else if (old_queue < ARP_TABLE_SIZE) {
 80081c4:	f1be 0f0a 	cmp.w	lr, #10
 80081c8:	d104      	bne.n	80081d4 <etharp_find_entry+0x104>
    return (s16_t)ERR_MEM;
 80081ca:	f04f 30ff 	mov.w	r0, #4294967295
 80081ce:	e7e7      	b.n	80081a0 <etharp_find_entry+0xd0>
 80081d0:	4645      	mov	r5, r8
 80081d2:	e7c6      	b.n	8008162 <etharp_find_entry+0x92>
 80081d4:	4675      	mov	r5, lr
 80081d6:	e7c4      	b.n	8008162 <etharp_find_entry+0x92>
 80081d8:	200067f8 	.word	0x200067f8
 80081dc:	080142d1 	.word	0x080142d1
 80081e0:	0801433f 	.word	0x0801433f
 80081e4:	0801342c 	.word	0x0801342c
 80081e8:	08014356 	.word	0x08014356

080081ec <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80081ec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80081f0:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80081f4:	4688      	mov	r8, r1
 80081f6:	4691      	mov	r9, r2
 80081f8:	461e      	mov	r6, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80081fa:	4607      	mov	r7, r0
 80081fc:	b930      	cbnz	r0, 800820c <etharp_raw+0x20>
 80081fe:	4b2d      	ldr	r3, [pc, #180]	; (80082b4 <etharp_raw+0xc8>)
 8008200:	f240 4257 	movw	r2, #1111	; 0x457
 8008204:	492c      	ldr	r1, [pc, #176]	; (80082b8 <etharp_raw+0xcc>)
 8008206:	482d      	ldr	r0, [pc, #180]	; (80082bc <etharp_raw+0xd0>)
 8008208:	f006 f8c0 	bl	800e38c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800820c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008210:	211c      	movs	r1, #28
 8008212:	200e      	movs	r0, #14
 8008214:	f001 ff70 	bl	800a0f8 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8008218:	4605      	mov	r5, r0
 800821a:	2800      	cmp	r0, #0
 800821c:	d047      	beq.n	80082ae <etharp_raw+0xc2>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800821e:	8943      	ldrh	r3, [r0, #10]
 8008220:	2b1b      	cmp	r3, #27
 8008222:	d806      	bhi.n	8008232 <etharp_raw+0x46>
 8008224:	4b23      	ldr	r3, [pc, #140]	; (80082b4 <etharp_raw+0xc8>)
 8008226:	f240 4262 	movw	r2, #1122	; 0x462
 800822a:	4925      	ldr	r1, [pc, #148]	; (80082c0 <etharp_raw+0xd4>)
 800822c:	4823      	ldr	r0, [pc, #140]	; (80082bc <etharp_raw+0xd0>)
 800822e:	f006 f8ad 	bl	800e38c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8008232:	686c      	ldr	r4, [r5, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8008234:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8008238:	f001 f990 	bl	800955c <lwip_htons>
 800823c:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800823e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008242:	2b06      	cmp	r3, #6
 8008244:	d006      	beq.n	8008254 <etharp_raw+0x68>
 8008246:	4b1b      	ldr	r3, [pc, #108]	; (80082b4 <etharp_raw+0xc8>)
 8008248:	f240 4269 	movw	r2, #1129	; 0x469
 800824c:	491d      	ldr	r1, [pc, #116]	; (80082c4 <etharp_raw+0xd8>)
 800824e:	481b      	ldr	r0, [pc, #108]	; (80082bc <etharp_raw+0xd0>)
 8008250:	f006 f89c 	bl	800e38c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8008254:	6833      	ldr	r3, [r6, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8008256:	4642      	mov	r2, r8
 8008258:	4629      	mov	r1, r5
 800825a:	4638      	mov	r0, r7
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800825c:	60a3      	str	r3, [r4, #8]
 800825e:	88b3      	ldrh	r3, [r6, #4]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8008260:	2600      	movs	r6, #0
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8008262:	81a3      	strh	r3, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8008264:	f8da 3000 	ldr.w	r3, [sl]
 8008268:	f8c4 3012 	str.w	r3, [r4, #18]
 800826c:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8008270:	82e3      	strh	r3, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8008272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800827a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800827c:	681b      	ldr	r3, [r3, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800827e:	7026      	strb	r6, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8008280:	61a3      	str	r3, [r4, #24]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8008282:	2301      	movs	r3, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8008284:	70e6      	strb	r6, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8008286:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8008288:	2308      	movs	r3, #8
 800828a:	70a3      	strb	r3, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 800828c:	2306      	movs	r3, #6
 800828e:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8008290:	2304      	movs	r3, #4
 8008292:	7163      	strb	r3, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8008294:	f640 0306 	movw	r3, #2054	; 0x806
 8008298:	9300      	str	r3, [sp, #0]
 800829a:	464b      	mov	r3, r9
 800829c:	f005 ff0c 	bl	800e0b8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80082a0:	4628      	mov	r0, r5
 80082a2:	f001 fec1 	bl	800a028 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 80082a6:	4630      	mov	r0, r6
}
 80082a8:	b002      	add	sp, #8
 80082aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 80082ae:	f04f 30ff 	mov.w	r0, #4294967295
 80082b2:	e7f9      	b.n	80082a8 <etharp_raw+0xbc>
 80082b4:	080142d1 	.word	0x080142d1
 80082b8:	08014197 	.word	0x08014197
 80082bc:	0801342c 	.word	0x0801342c
 80082c0:	0801437f 	.word	0x0801437f
 80082c4:	080143b0 	.word	0x080143b0

080082c8 <etharp_cleanup_netif>:
{
 80082c8:	b570      	push	{r4, r5, r6, lr}
 80082ca:	4606      	mov	r6, r0
 80082cc:	4d07      	ldr	r5, [pc, #28]	; (80082ec <etharp_cleanup_netif+0x24>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80082ce:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80082d0:	7d2b      	ldrb	r3, [r5, #20]
 80082d2:	b12b      	cbz	r3, 80082e0 <etharp_cleanup_netif+0x18>
 80082d4:	68ab      	ldr	r3, [r5, #8]
 80082d6:	42b3      	cmp	r3, r6
 80082d8:	d102      	bne.n	80082e0 <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 80082da:	4620      	mov	r0, r4
 80082dc:	f7ff fee4 	bl	80080a8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80082e0:	3401      	adds	r4, #1
 80082e2:	3518      	adds	r5, #24
 80082e4:	2c0a      	cmp	r4, #10
 80082e6:	d1f3      	bne.n	80082d0 <etharp_cleanup_netif+0x8>
}
 80082e8:	bd70      	pop	{r4, r5, r6, pc}
 80082ea:	bf00      	nop
 80082ec:	200067f8 	.word	0x200067f8

080082f0 <etharp_input>:
{
 80082f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082f4:	4607      	mov	r7, r0
 80082f6:	b088      	sub	sp, #32
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80082f8:	460c      	mov	r4, r1
 80082fa:	b949      	cbnz	r1, 8008310 <etharp_input+0x20>
 80082fc:	4b4c      	ldr	r3, [pc, #304]	; (8008430 <etharp_input+0x140>)
 80082fe:	f240 228a 	movw	r2, #650	; 0x28a
 8008302:	494c      	ldr	r1, [pc, #304]	; (8008434 <etharp_input+0x144>)
 8008304:	484c      	ldr	r0, [pc, #304]	; (8008438 <etharp_input+0x148>)
 8008306:	f006 f841 	bl	800e38c <iprintf>
}
 800830a:	b008      	add	sp, #32
 800830c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdr = (struct etharp_hdr *)p->payload;
 8008310:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8008312:	882b      	ldrh	r3, [r5, #0]
 8008314:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008318:	d108      	bne.n	800832c <etharp_input+0x3c>
 800831a:	792b      	ldrb	r3, [r5, #4]
 800831c:	2b06      	cmp	r3, #6
 800831e:	d105      	bne.n	800832c <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8008320:	796b      	ldrb	r3, [r5, #5]
 8008322:	2b04      	cmp	r3, #4
 8008324:	d102      	bne.n	800832c <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8008326:	886b      	ldrh	r3, [r5, #2]
 8008328:	2b08      	cmp	r3, #8
 800832a:	d003      	beq.n	8008334 <etharp_input+0x44>
  pbuf_free(p);
 800832c:	4638      	mov	r0, r7
 800832e:	f001 fe7b 	bl	800a028 <pbuf_free>
 8008332:	e7ea      	b.n	800830a <etharp_input+0x1a>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8008334:	f8d5 300e 	ldr.w	r3, [r5, #14]
 8008338:	f105 0808 	add.w	r8, r5, #8
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800833c:	684e      	ldr	r6, [r1, #4]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800833e:	9307      	str	r3, [sp, #28]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8008340:	69ab      	ldr	r3, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008342:	2e00      	cmp	r6, #0
 8008344:	d05f      	beq.n	8008406 <etharp_input+0x116>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8008346:	1af3      	subs	r3, r6, r3
 8008348:	425e      	negs	r6, r3
 800834a:	415e      	adcs	r6, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800834c:	f1c6 0a02 	rsb	sl, r6, #2
 8008350:	fa5f fa8a 	uxtb.w	sl, sl
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8008354:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8008358:	2b06      	cmp	r3, #6
 800835a:	d006      	beq.n	800836a <etharp_input+0x7a>
 800835c:	4b34      	ldr	r3, [pc, #208]	; (8008430 <etharp_input+0x140>)
 800835e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8008362:	4936      	ldr	r1, [pc, #216]	; (800843c <etharp_input+0x14c>)
 8008364:	4834      	ldr	r0, [pc, #208]	; (8008438 <etharp_input+0x148>)
 8008366:	f006 f811 	bl	800e38c <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 800836a:	9807      	ldr	r0, [sp, #28]
 800836c:	2800      	cmp	r0, #0
 800836e:	d03e      	beq.n	80083ee <etharp_input+0xfe>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8008370:	4621      	mov	r1, r4
 8008372:	f000 fcb2 	bl	8008cda <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8008376:	4681      	mov	r9, r0
 8008378:	2800      	cmp	r0, #0
 800837a:	d138      	bne.n	80083ee <etharp_input+0xfe>
      ip4_addr_ismulticast(ipaddr)) {
 800837c:	9b07      	ldr	r3, [sp, #28]
 800837e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8008382:	2be0      	cmp	r3, #224	; 0xe0
 8008384:	d033      	beq.n	80083ee <etharp_input+0xfe>
  i = etharp_find_entry(ipaddr, flags, netif);
 8008386:	4622      	mov	r2, r4
 8008388:	4651      	mov	r1, sl
 800838a:	a807      	add	r0, sp, #28
 800838c:	f7ff fea0 	bl	80080d0 <etharp_find_entry>
  if (i < 0) {
 8008390:	1e03      	subs	r3, r0, #0
 8008392:	db2c      	blt.n	80083ee <etharp_input+0xfe>
    arp_table[i].state = ETHARP_STATE_STABLE;
 8008394:	2018      	movs	r0, #24
 8008396:	4a2a      	ldr	r2, [pc, #168]	; (8008440 <etharp_input+0x150>)
 8008398:	f04f 0e02 	mov.w	lr, #2
 800839c:	fb00 fc03 	mul.w	ip, r0, r3
 80083a0:	eb02 010c 	add.w	r1, r2, ip
 80083a4:	f881 e014 	strb.w	lr, [r1, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80083a8:	f04f 0e0c 	mov.w	lr, #12
  arp_table[i].netif = netif;
 80083ac:	608c      	str	r4, [r1, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80083ae:	fb13 e300 	smlabb	r3, r3, r0, lr
 80083b2:	f8d8 0000 	ldr.w	r0, [r8]
 80083b6:	eb02 0e03 	add.w	lr, r2, r3
 80083ba:	50d0      	str	r0, [r2, r3]
 80083bc:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80083c0:	f8ae 3004 	strh.w	r3, [lr, #4]
  arp_table[i].ctime = 0;
 80083c4:	f8a1 9012 	strh.w	r9, [r1, #18]
  if (arp_table[i].q != NULL) {
 80083c8:	f852 100c 	ldr.w	r1, [r2, ip]
 80083cc:	b179      	cbz	r1, 80083ee <etharp_input+0xfe>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80083ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
    arp_table[i].q = NULL;
 80083d2:	f842 900c 	str.w	r9, [r2, ip]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80083d6:	4620      	mov	r0, r4
 80083d8:	f104 022a 	add.w	r2, r4, #42	; 0x2a
 80083dc:	9300      	str	r3, [sp, #0]
 80083de:	4643      	mov	r3, r8
 80083e0:	9105      	str	r1, [sp, #20]
 80083e2:	f005 fe69 	bl	800e0b8 <ethernet_output>
    pbuf_free(p);
 80083e6:	9905      	ldr	r1, [sp, #20]
 80083e8:	4608      	mov	r0, r1
 80083ea:	f001 fe1d 	bl	800a028 <pbuf_free>
  switch (hdr->opcode) {
 80083ee:	88eb      	ldrh	r3, [r5, #6]
 80083f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083f4:	d00a      	beq.n	800840c <etharp_input+0x11c>
 80083f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083fa:	d197      	bne.n	800832c <etharp_input+0x3c>
      dhcp_arp_reply(netif, &sipaddr);
 80083fc:	a907      	add	r1, sp, #28
 80083fe:	4620      	mov	r0, r4
 8008400:	f7ff fbc6 	bl	8007b90 <dhcp_arp_reply>
      break;
 8008404:	e792      	b.n	800832c <etharp_input+0x3c>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8008406:	f04f 0a02 	mov.w	sl, #2
 800840a:	e7a3      	b.n	8008354 <etharp_input+0x64>
      if (for_us) {
 800840c:	2e00      	cmp	r6, #0
 800840e:	d08d      	beq.n	800832c <etharp_input+0x3c>
        etharp_raw(netif,
 8008410:	2202      	movs	r2, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8008412:	f104 032a 	add.w	r3, r4, #42	; 0x2a
        etharp_raw(netif,
 8008416:	4620      	mov	r0, r4
 8008418:	9203      	str	r2, [sp, #12]
 800841a:	aa07      	add	r2, sp, #28
 800841c:	4619      	mov	r1, r3
 800841e:	e9cd 8201 	strd	r8, r2, [sp, #4]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8008422:	1d22      	adds	r2, r4, #4
        etharp_raw(netif,
 8008424:	9200      	str	r2, [sp, #0]
 8008426:	4642      	mov	r2, r8
 8008428:	f7ff fee0 	bl	80081ec <etharp_raw>
 800842c:	e77e      	b.n	800832c <etharp_input+0x3c>
 800842e:	bf00      	nop
 8008430:	080142d1 	.word	0x080142d1
 8008434:	08014197 	.word	0x08014197
 8008438:	0801342c 	.word	0x0801342c
 800843c:	08014432 	.word	0x08014432
 8008440:	200067f8 	.word	0x200067f8

08008444 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8008444:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008446:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8008448:	2401      	movs	r4, #1
 800844a:	f100 032a 	add.w	r3, r0, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800844e:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8008450:	e9cd 1402 	strd	r1, r4, [sp, #8]
 8008454:	4904      	ldr	r1, [pc, #16]	; (8008468 <etharp_request+0x24>)
 8008456:	9200      	str	r2, [sp, #0]
 8008458:	9101      	str	r1, [sp, #4]
 800845a:	4619      	mov	r1, r3
 800845c:	4a03      	ldr	r2, [pc, #12]	; (800846c <etharp_request+0x28>)
 800845e:	f7ff fec5 	bl	80081ec <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8008462:	b004      	add	sp, #16
 8008464:	bd10      	pop	{r4, pc}
 8008466:	bf00      	nop
 8008468:	08013396 	.word	0x08013396
 800846c:	08013390 	.word	0x08013390

08008470 <etharp_tmr>:
{
 8008470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008472:	4c13      	ldr	r4, [pc, #76]	; (80084c0 <etharp_tmr+0x50>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008474:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 8008476:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8008478:	2704      	movs	r7, #4
    u8_t state = arp_table[i].state;
 800847a:	7d22      	ldrb	r2, [r4, #20]
    if (state != ETHARP_STATE_EMPTY
 800847c:	b16a      	cbz	r2, 800849a <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 800847e:	8a63      	ldrh	r3, [r4, #18]
 8008480:	3301      	adds	r3, #1
 8008482:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8008484:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 8008488:	8263      	strh	r3, [r4, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800848a:	d203      	bcs.n	8008494 <etharp_tmr+0x24>
 800848c:	2a01      	cmp	r2, #1
 800848e:	d109      	bne.n	80084a4 <etharp_tmr+0x34>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8008490:	2b04      	cmp	r3, #4
 8008492:	d90f      	bls.n	80084b4 <etharp_tmr+0x44>
        etharp_free_entry(i);
 8008494:	4628      	mov	r0, r5
 8008496:	f7ff fe07 	bl	80080a8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800849a:	3501      	adds	r5, #1
 800849c:	3418      	adds	r4, #24
 800849e:	2d0a      	cmp	r5, #10
 80084a0:	d1eb      	bne.n	800847a <etharp_tmr+0xa>
}
 80084a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80084a4:	2a03      	cmp	r2, #3
 80084a6:	d101      	bne.n	80084ac <etharp_tmr+0x3c>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80084a8:	7527      	strb	r7, [r4, #20]
 80084aa:	e7f6      	b.n	800849a <etharp_tmr+0x2a>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80084ac:	2a04      	cmp	r2, #4
 80084ae:	d1f4      	bne.n	800849a <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 80084b0:	7526      	strb	r6, [r4, #20]
 80084b2:	e7f2      	b.n	800849a <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80084b4:	1d21      	adds	r1, r4, #4
 80084b6:	68a0      	ldr	r0, [r4, #8]
 80084b8:	f7ff ffc4 	bl	8008444 <etharp_request>
 80084bc:	e7ed      	b.n	800849a <etharp_tmr+0x2a>
 80084be:	bf00      	nop
 80084c0:	200067f8 	.word	0x200067f8

080084c4 <etharp_output_to_arp_index>:
{
 80084c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80084c8:	4d24      	ldr	r5, [pc, #144]	; (800855c <etharp_output_to_arp_index+0x98>)
 80084ca:	2318      	movs	r3, #24
{
 80084cc:	4607      	mov	r7, r0
 80084ce:	4688      	mov	r8, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80084d0:	fb03 5302 	mla	r3, r3, r2, r5
{
 80084d4:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80084d6:	7d1b      	ldrb	r3, [r3, #20]
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d806      	bhi.n	80084ea <etharp_output_to_arp_index+0x26>
 80084dc:	4b20      	ldr	r3, [pc, #128]	; (8008560 <etharp_output_to_arp_index+0x9c>)
 80084de:	f240 22ee 	movw	r2, #750	; 0x2ee
 80084e2:	4920      	ldr	r1, [pc, #128]	; (8008564 <etharp_output_to_arp_index+0xa0>)
 80084e4:	4820      	ldr	r0, [pc, #128]	; (8008568 <etharp_output_to_arp_index+0xa4>)
 80084e6:	f005 ff51 	bl	800e38c <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80084ea:	2218      	movs	r2, #24
 80084ec:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 80084f0:	f107 092a 	add.w	r9, r7, #42	; 0x2a
 80084f4:	fb02 5404 	mla	r4, r2, r4, r5
 80084f8:	00f6      	lsls	r6, r6, #3
 80084fa:	7d23      	ldrb	r3, [r4, #20]
 80084fc:	f106 0a0c 	add.w	sl, r6, #12
 8008500:	2b02      	cmp	r3, #2
 8008502:	44aa      	add	sl, r5
 8008504:	d10b      	bne.n	800851e <etharp_output_to_arp_index+0x5a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8008506:	8a63      	ldrh	r3, [r4, #18]
 8008508:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800850c:	d913      	bls.n	8008536 <etharp_output_to_arp_index+0x72>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800850e:	3604      	adds	r6, #4
 8008510:	4638      	mov	r0, r7
 8008512:	19a9      	adds	r1, r5, r6
 8008514:	f7ff ff96 	bl	8008444 <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8008518:	b908      	cbnz	r0, 800851e <etharp_output_to_arp_index+0x5a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800851a:	2303      	movs	r3, #3
 800851c:	7523      	strb	r3, [r4, #20]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800851e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008522:	464a      	mov	r2, r9
 8008524:	4641      	mov	r1, r8
 8008526:	4638      	mov	r0, r7
 8008528:	9300      	str	r3, [sp, #0]
 800852a:	4653      	mov	r3, sl
 800852c:	f005 fdc4 	bl	800e0b8 <ethernet_output>
}
 8008530:	b004      	add	sp, #16
 8008532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8008536:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800853a:	d3f0      	bcc.n	800851e <etharp_output_to_arp_index+0x5a>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800853c:	2301      	movs	r3, #1
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800853e:	3604      	adds	r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8008540:	4652      	mov	r2, sl
 8008542:	4649      	mov	r1, r9
 8008544:	9303      	str	r3, [sp, #12]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8008546:	442e      	add	r6, r5
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8008548:	4b08      	ldr	r3, [pc, #32]	; (800856c <etharp_output_to_arp_index+0xa8>)
 800854a:	4638      	mov	r0, r7
 800854c:	9602      	str	r6, [sp, #8]
 800854e:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8008550:	1d3b      	adds	r3, r7, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8008552:	9300      	str	r3, [sp, #0]
 8008554:	464b      	mov	r3, r9
 8008556:	f7ff fe49 	bl	80081ec <etharp_raw>
 800855a:	e7dd      	b.n	8008518 <etharp_output_to_arp_index+0x54>
 800855c:	200067f8 	.word	0x200067f8
 8008560:	080142d1 	.word	0x080142d1
 8008564:	08014456 	.word	0x08014456
 8008568:	0801342c 	.word	0x0801342c
 800856c:	08013396 	.word	0x08013396

08008570 <etharp_query>:
{
 8008570:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8008574:	4688      	mov	r8, r1
 8008576:	4606      	mov	r6, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8008578:	4601      	mov	r1, r0
{
 800857a:	4615      	mov	r5, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800857c:	f8d8 0000 	ldr.w	r0, [r8]
 8008580:	f000 fbab 	bl	8008cda <ip4_addr_isbroadcast_u32>
 8008584:	2800      	cmp	r0, #0
 8008586:	d16b      	bne.n	8008660 <etharp_query+0xf0>
      ip4_addr_ismulticast(ipaddr) ||
 8008588:	f8d8 3000 	ldr.w	r3, [r8]
 800858c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8008590:	2ae0      	cmp	r2, #224	; 0xe0
 8008592:	d065      	beq.n	8008660 <etharp_query+0xf0>
      ip4_addr_isany(ipaddr)) {
 8008594:	2b00      	cmp	r3, #0
 8008596:	d063      	beq.n	8008660 <etharp_query+0xf0>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8008598:	4632      	mov	r2, r6
 800859a:	2101      	movs	r1, #1
 800859c:	4640      	mov	r0, r8
 800859e:	f7ff fd97 	bl	80080d0 <etharp_find_entry>
  if (i_err < 0) {
 80085a2:	1e04      	subs	r4, r0, #0
 80085a4:	da03      	bge.n	80085ae <etharp_query+0x3e>
    return (err_t)i_err;
 80085a6:	b260      	sxtb	r0, r4
}
 80085a8:	b002      	add	sp, #8
 80085aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80085ae:	2c7e      	cmp	r4, #126	; 0x7e
 80085b0:	dd06      	ble.n	80085c0 <etharp_query+0x50>
 80085b2:	4b35      	ldr	r3, [pc, #212]	; (8008688 <etharp_query+0x118>)
 80085b4:	f240 32c1 	movw	r2, #961	; 0x3c1
 80085b8:	4934      	ldr	r1, [pc, #208]	; (800868c <etharp_query+0x11c>)
 80085ba:	4835      	ldr	r0, [pc, #212]	; (8008690 <etharp_query+0x120>)
 80085bc:	f005 fee6 	bl	800e38c <iprintf>
  i = (netif_addr_idx_t)i_err;
 80085c0:	b2e4      	uxtb	r4, r4
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80085c2:	4f34      	ldr	r7, [pc, #208]	; (8008694 <etharp_query+0x124>)
 80085c4:	2218      	movs	r2, #24
 80085c6:	fb02 7204 	mla	r2, r2, r4, r7
 80085ca:	7d13      	ldrb	r3, [r2, #20]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d156      	bne.n	800867e <etharp_query+0x10e>
    arp_table[i].state = ETHARP_STATE_PENDING;
 80085d0:	2301      	movs	r3, #1
    arp_table[i].netif = netif;
 80085d2:	6096      	str	r6, [r2, #8]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80085d4:	7513      	strb	r3, [r2, #20]
    result = etharp_request(netif, ipaddr);
 80085d6:	4641      	mov	r1, r8
 80085d8:	4630      	mov	r0, r6
 80085da:	f7ff ff33 	bl	8008444 <etharp_request>
    if (q == NULL) {
 80085de:	2d00      	cmp	r5, #0
 80085e0:	d0e2      	beq.n	80085a8 <etharp_query+0x38>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80085e2:	2318      	movs	r3, #24
 80085e4:	fb03 7204 	mla	r2, r3, r4, r7
 80085e8:	7d12      	ldrb	r2, [r2, #20]
 80085ea:	2a01      	cmp	r2, #1
 80085ec:	d90e      	bls.n	800860c <etharp_query+0x9c>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80085ee:	fb03 7304 	mla	r3, r3, r4, r7
 80085f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085f6:	4629      	mov	r1, r5
 80085f8:	4630      	mov	r0, r6
 80085fa:	9200      	str	r2, [sp, #0]
 80085fc:	330c      	adds	r3, #12
 80085fe:	f106 022a 	add.w	r2, r6, #42	; 0x2a
    ETHARP_SET_ADDRHINT(netif, i);
 8008602:	f887 40f0 	strb.w	r4, [r7, #240]	; 0xf0
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8008606:	f005 fd57 	bl	800e0b8 <ethernet_output>
 800860a:	e7cd      	b.n	80085a8 <etharp_query+0x38>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800860c:	d1cc      	bne.n	80085a8 <etharp_query+0x38>
 800860e:	462e      	mov	r6, r5
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8008610:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8008688 <etharp_query+0x118>
 8008614:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8008698 <etharp_query+0x128>
 8008618:	f8df a074 	ldr.w	sl, [pc, #116]	; 8008690 <etharp_query+0x120>
 800861c:	8972      	ldrh	r2, [r6, #10]
 800861e:	8933      	ldrh	r3, [r6, #8]
 8008620:	429a      	cmp	r2, r3
 8008622:	d108      	bne.n	8008636 <etharp_query+0xc6>
 8008624:	6833      	ldr	r3, [r6, #0]
 8008626:	b133      	cbz	r3, 8008636 <etharp_query+0xc6>
 8008628:	4643      	mov	r3, r8
 800862a:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800862e:	4649      	mov	r1, r9
 8008630:	4650      	mov	r0, sl
 8008632:	f005 feab 	bl	800e38c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8008636:	7b33      	ldrb	r3, [r6, #12]
 8008638:	065b      	lsls	r3, r3, #25
 800863a:	d414      	bmi.n	8008666 <etharp_query+0xf6>
      p = p->next;
 800863c:	6836      	ldr	r6, [r6, #0]
    while (p) {
 800863e:	2e00      	cmp	r6, #0
 8008640:	d1ec      	bne.n	800861c <etharp_query+0xac>
      pbuf_ref(p);
 8008642:	4628      	mov	r0, r5
 8008644:	f001 fe34 	bl	800a2b0 <pbuf_ref>
      if (arp_table[i].q != NULL) {
 8008648:	2318      	movs	r3, #24
 800864a:	fb03 f204 	mul.w	r2, r3, r4
 800864e:	461e      	mov	r6, r3
 8008650:	58b8      	ldr	r0, [r7, r2]
 8008652:	b108      	cbz	r0, 8008658 <etharp_query+0xe8>
        pbuf_free(arp_table[i].q);
 8008654:	f001 fce8 	bl	800a028 <pbuf_free>
      arp_table[i].q = p;
 8008658:	4374      	muls	r4, r6
      result = ERR_OK;
 800865a:	2000      	movs	r0, #0
      arp_table[i].q = p;
 800865c:	513d      	str	r5, [r7, r4]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
 800865e:	e7a3      	b.n	80085a8 <etharp_query+0x38>
    return ERR_ARG;
 8008660:	f06f 000f 	mvn.w	r0, #15
 8008664:	e7a0      	b.n	80085a8 <etharp_query+0x38>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8008666:	462a      	mov	r2, r5
 8008668:	f44f 7120 	mov.w	r1, #640	; 0x280
 800866c:	200e      	movs	r0, #14
 800866e:	f001 ff47 	bl	800a500 <pbuf_clone>
    if (p != NULL) {
 8008672:	4605      	mov	r5, r0
 8008674:	2800      	cmp	r0, #0
 8008676:	d1e7      	bne.n	8008648 <etharp_query+0xd8>
      result = ERR_MEM;
 8008678:	f04f 30ff 	mov.w	r0, #4294967295
 800867c:	e794      	b.n	80085a8 <etharp_query+0x38>
  if (is_new_entry || (q == NULL)) {
 800867e:	2d00      	cmp	r5, #0
 8008680:	d0a9      	beq.n	80085d6 <etharp_query+0x66>
  err_t result = ERR_MEM;
 8008682:	f04f 30ff 	mov.w	r0, #4294967295
 8008686:	e7ac      	b.n	80085e2 <etharp_query+0x72>
 8008688:	080142d1 	.word	0x080142d1
 800868c:	08014486 	.word	0x08014486
 8008690:	0801342c 	.word	0x0801342c
 8008694:	200067f8 	.word	0x200067f8
 8008698:	08014494 	.word	0x08014494

0800869c <etharp_output>:
{
 800869c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800869e:	460e      	mov	r6, r1
 80086a0:	b085      	sub	sp, #20
 80086a2:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80086a4:	4604      	mov	r4, r0
 80086a6:	b930      	cbnz	r0, 80086b6 <etharp_output+0x1a>
 80086a8:	4b41      	ldr	r3, [pc, #260]	; (80087b0 <etharp_output+0x114>)
 80086aa:	f240 321e 	movw	r2, #798	; 0x31e
 80086ae:	4941      	ldr	r1, [pc, #260]	; (80087b4 <etharp_output+0x118>)
 80086b0:	4841      	ldr	r0, [pc, #260]	; (80087b8 <etharp_output+0x11c>)
 80086b2:	f005 fe6b 	bl	800e38c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80086b6:	b936      	cbnz	r6, 80086c6 <etharp_output+0x2a>
 80086b8:	4b3d      	ldr	r3, [pc, #244]	; (80087b0 <etharp_output+0x114>)
 80086ba:	f240 321f 	movw	r2, #799	; 0x31f
 80086be:	493f      	ldr	r1, [pc, #252]	; (80087bc <etharp_output+0x120>)
 80086c0:	483d      	ldr	r0, [pc, #244]	; (80087b8 <etharp_output+0x11c>)
 80086c2:	f005 fe63 	bl	800e38c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80086c6:	b935      	cbnz	r5, 80086d6 <etharp_output+0x3a>
 80086c8:	4b39      	ldr	r3, [pc, #228]	; (80087b0 <etharp_output+0x114>)
 80086ca:	f44f 7248 	mov.w	r2, #800	; 0x320
 80086ce:	493c      	ldr	r1, [pc, #240]	; (80087c0 <etharp_output+0x124>)
 80086d0:	4839      	ldr	r0, [pc, #228]	; (80087b8 <etharp_output+0x11c>)
 80086d2:	f005 fe5b 	bl	800e38c <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80086d6:	4621      	mov	r1, r4
 80086d8:	6828      	ldr	r0, [r5, #0]
 80086da:	f000 fafe 	bl	8008cda <ip4_addr_isbroadcast_u32>
 80086de:	2800      	cmp	r0, #0
 80086e0:	d160      	bne.n	80087a4 <etharp_output+0x108>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80086e2:	682b      	ldr	r3, [r5, #0]
 80086e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80086e8:	2ae0      	cmp	r2, #224	; 0xe0
 80086ea:	d11b      	bne.n	8008724 <etharp_output+0x88>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80086ec:	2301      	movs	r3, #1
 80086ee:	f8ad 3008 	strh.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80086f2:	235e      	movs	r3, #94	; 0x5e
 80086f4:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80086f8:	786b      	ldrb	r3, [r5, #1]
 80086fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086fe:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8008702:	78ab      	ldrb	r3, [r5, #2]
 8008704:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8008708:	78eb      	ldrb	r3, [r5, #3]
 800870a:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 800870e:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8008710:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008714:	4631      	mov	r1, r6
 8008716:	4620      	mov	r0, r4
 8008718:	9200      	str	r2, [sp, #0]
 800871a:	f104 022a 	add.w	r2, r4, #42	; 0x2a
 800871e:	f005 fccb 	bl	800e0b8 <ethernet_output>
 8008722:	e023      	b.n	800876c <etharp_output+0xd0>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8008724:	6862      	ldr	r2, [r4, #4]
 8008726:	68a1      	ldr	r1, [r4, #8]
 8008728:	405a      	eors	r2, r3
 800872a:	420a      	tst	r2, r1
 800872c:	d009      	beq.n	8008742 <etharp_output+0xa6>
        !ip4_addr_islinklocal(ipaddr)) {
 800872e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8008730:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8008734:	4293      	cmp	r3, r2
 8008736:	d004      	beq.n	8008742 <etharp_output+0xa6>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8008738:	68e3      	ldr	r3, [r4, #12]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d034      	beq.n	80087a8 <etharp_output+0x10c>
            dst_addr = netif_ip4_gw(netif);
 800873e:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8008742:	4920      	ldr	r1, [pc, #128]	; (80087c4 <etharp_output+0x128>)
 8008744:	2318      	movs	r3, #24
 8008746:	f891 20f0 	ldrb.w	r2, [r1, #240]	; 0xf0
 800874a:	468c      	mov	ip, r1
 800874c:	fb03 1302 	mla	r3, r3, r2, r1
 8008750:	7d18      	ldrb	r0, [r3, #20]
 8008752:	2801      	cmp	r0, #1
 8008754:	d90c      	bls.n	8008770 <etharp_output+0xd4>
 8008756:	6899      	ldr	r1, [r3, #8]
 8008758:	42a1      	cmp	r1, r4
 800875a:	d109      	bne.n	8008770 <etharp_output+0xd4>
            (arp_table[etharp_cached_entry].netif == netif) &&
 800875c:	6829      	ldr	r1, [r5, #0]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	4299      	cmp	r1, r3
 8008762:	d105      	bne.n	8008770 <etharp_output+0xd4>
        return etharp_output_to_arp_index(netif, q, i);
 8008764:	4631      	mov	r1, r6
 8008766:	4620      	mov	r0, r4
 8008768:	f7ff feac 	bl	80084c4 <etharp_output_to_arp_index>
}
 800876c:	b005      	add	sp, #20
 800876e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008770:	4b14      	ldr	r3, [pc, #80]	; (80087c4 <etharp_output+0x128>)
{
 8008772:	2100      	movs	r1, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8008774:	7d1f      	ldrb	r7, [r3, #20]
 8008776:	b2ca      	uxtb	r2, r1
 8008778:	2f01      	cmp	r7, #1
 800877a:	d909      	bls.n	8008790 <etharp_output+0xf4>
 800877c:	689f      	ldr	r7, [r3, #8]
 800877e:	42a7      	cmp	r7, r4
 8008780:	d106      	bne.n	8008790 <etharp_output+0xf4>
          (arp_table[i].netif == netif) &&
 8008782:	685f      	ldr	r7, [r3, #4]
 8008784:	6828      	ldr	r0, [r5, #0]
 8008786:	42b8      	cmp	r0, r7
 8008788:	d102      	bne.n	8008790 <etharp_output+0xf4>
        ETHARP_SET_ADDRHINT(netif, i);
 800878a:	f88c 20f0 	strb.w	r2, [ip, #240]	; 0xf0
 800878e:	e7e9      	b.n	8008764 <etharp_output+0xc8>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8008790:	3101      	adds	r1, #1
 8008792:	3318      	adds	r3, #24
 8008794:	290a      	cmp	r1, #10
 8008796:	d1ed      	bne.n	8008774 <etharp_output+0xd8>
    return etharp_query(netif, dst_addr, q);
 8008798:	4632      	mov	r2, r6
 800879a:	4629      	mov	r1, r5
 800879c:	4620      	mov	r0, r4
 800879e:	f7ff fee7 	bl	8008570 <etharp_query>
 80087a2:	e7e3      	b.n	800876c <etharp_output+0xd0>
    dest = (const struct eth_addr *)&ethbroadcast;
 80087a4:	4b08      	ldr	r3, [pc, #32]	; (80087c8 <etharp_output+0x12c>)
 80087a6:	e7b3      	b.n	8008710 <etharp_output+0x74>
            return ERR_RTE;
 80087a8:	f06f 0003 	mvn.w	r0, #3
 80087ac:	e7de      	b.n	800876c <etharp_output+0xd0>
 80087ae:	bf00      	nop
 80087b0:	080142d1 	.word	0x080142d1
 80087b4:	08014197 	.word	0x08014197
 80087b8:	0801342c 	.word	0x0801342c
 80087bc:	08014ee5 	.word	0x08014ee5
 80087c0:	08014413 	.word	0x08014413
 80087c4:	200067f8 	.word	0x200067f8
 80087c8:	08013390 	.word	0x08013390

080087cc <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 80087cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087ce:	4604      	mov	r4, r0
 80087d0:	b087      	sub	sp, #28
 80087d2:	460f      	mov	r7, r1
 80087d4:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80087d6:	2124      	movs	r1, #36	; 0x24
 80087d8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80087dc:	2022      	movs	r0, #34	; 0x22
 80087de:	f001 fc8b 	bl	800a0f8 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 80087e2:	4605      	mov	r5, r0
 80087e4:	b390      	cbz	r0, 800884c <icmp_send_response.isra.0+0x80>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80087e6:	8943      	ldrh	r3, [r0, #10]
 80087e8:	2b23      	cmp	r3, #35	; 0x23
 80087ea:	d806      	bhi.n	80087fa <icmp_send_response.isra.0+0x2e>
 80087ec:	4b18      	ldr	r3, [pc, #96]	; (8008850 <icmp_send_response.isra.0+0x84>)
 80087ee:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80087f2:	4918      	ldr	r1, [pc, #96]	; (8008854 <icmp_send_response.isra.0+0x88>)
 80087f4:	4818      	ldr	r0, [pc, #96]	; (8008858 <icmp_send_response.isra.0+0x8c>)
 80087f6:	f005 fdc9 	bl	800e38c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80087fa:	6820      	ldr	r0, [r4, #0]
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 80087fc:	2300      	movs	r3, #0
  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80087fe:	686c      	ldr	r4, [r5, #4]
  icmphdr->seqno = 0;

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8008800:	f100 011c 	add.w	r1, r0, #28
  icmphdr->id = 0;
 8008804:	7123      	strb	r3, [r4, #4]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8008806:	f104 0208 	add.w	r2, r4, #8
  icmphdr->id = 0;
 800880a:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 800880c:	71a3      	strb	r3, [r4, #6]
 800880e:	71e3      	strb	r3, [r4, #7]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8008810:	4603      	mov	r3, r0
  icmphdr->type = type;
 8008812:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 8008814:	7066      	strb	r6, [r4, #1]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8008816:	f853 6b04 	ldr.w	r6, [r3], #4
 800881a:	428b      	cmp	r3, r1
 800881c:	f842 6b04 	str.w	r6, [r2], #4
 8008820:	d1f9      	bne.n	8008816 <icmp_send_response.isra.0+0x4a>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8008822:	68c3      	ldr	r3, [r0, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8008824:	a805      	add	r0, sp, #20
  ip4_addr_copy(iphdr_src, iphdr->src);
 8008826:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
 8008828:	f000 f8da 	bl	80089e0 <ip4_route>
#endif
  if (netif != NULL) {
 800882c:	b158      	cbz	r0, 8008846 <icmp_send_response.isra.0+0x7a>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800882e:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8008830:	2301      	movs	r3, #1
 8008832:	aa05      	add	r2, sp, #20
    icmphdr->chksum = 0;
 8008834:	70a1      	strb	r1, [r4, #2]
 8008836:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8008838:	9002      	str	r0, [sp, #8]
 800883a:	4628      	mov	r0, r5
 800883c:	e9cd 1300 	strd	r1, r3, [sp]
 8008840:	23ff      	movs	r3, #255	; 0xff
 8008842:	f000 fa39 	bl	8008cb8 <ip4_output_if>
  }
  pbuf_free(q);
 8008846:	4628      	mov	r0, r5
 8008848:	f001 fbee 	bl	800a028 <pbuf_free>
}
 800884c:	b007      	add	sp, #28
 800884e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008850:	080144ae 	.word	0x080144ae
 8008854:	0801451a 	.word	0x0801451a
 8008858:	0801342c 	.word	0x0801342c

0800885c <icmp_input>:
  iphdr_in = ip4_current_header();
 800885c:	4b48      	ldr	r3, [pc, #288]	; (8008980 <icmp_input+0x124>)
{
 800885e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 8008862:	f8d3 9008 	ldr.w	r9, [r3, #8]
{
 8008866:	b087      	sub	sp, #28
 8008868:	4604      	mov	r4, r0
 800886a:	460f      	mov	r7, r1
  hlen = IPH_HL_BYTES(iphdr_in);
 800886c:	f899 5000 	ldrb.w	r5, [r9]
 8008870:	4698      	mov	r8, r3
 8008872:	f005 050f 	and.w	r5, r5, #15
 8008876:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 8008878:	2d13      	cmp	r5, #19
 800887a:	d916      	bls.n	80088aa <icmp_input+0x4e>
  if (p->len < sizeof(u16_t) * 2) {
 800887c:	8942      	ldrh	r2, [r0, #10]
 800887e:	2a03      	cmp	r2, #3
 8008880:	d913      	bls.n	80088aa <icmp_input+0x4e>
  type = *((u8_t *)p->payload);
 8008882:	6842      	ldr	r2, [r0, #4]
  switch (type) {
 8008884:	7812      	ldrb	r2, [r2, #0]
 8008886:	2a08      	cmp	r2, #8
 8008888:	d10f      	bne.n	80088aa <icmp_input+0x4e>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800888a:	6958      	ldr	r0, [r3, #20]
 800888c:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8008890:	2ae0      	cmp	r2, #224	; 0xe0
 8008892:	d00a      	beq.n	80088aa <icmp_input+0x4e>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8008894:	6819      	ldr	r1, [r3, #0]
 8008896:	f000 fa20 	bl	8008cda <ip4_addr_isbroadcast_u32>
 800889a:	b930      	cbnz	r0, 80088aa <icmp_input+0x4e>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800889c:	8923      	ldrh	r3, [r4, #8]
 800889e:	2b07      	cmp	r3, #7
 80088a0:	d903      	bls.n	80088aa <icmp_input+0x4e>
        if (inet_chksum_pbuf(p) != 0) {
 80088a2:	4620      	mov	r0, r4
 80088a4:	f000 fe8c 	bl	80095c0 <inet_chksum_pbuf>
 80088a8:	b128      	cbz	r0, 80088b6 <icmp_input+0x5a>
  pbuf_free(p);
 80088aa:	4620      	mov	r0, r4
}
 80088ac:	b007      	add	sp, #28
 80088ae:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 80088b2:	f001 bbb9 	b.w	800a028 <pbuf_free>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80088b6:	f105 010e 	add.w	r1, r5, #14
 80088ba:	4620      	mov	r0, r4
 80088bc:	9105      	str	r1, [sp, #20]
 80088be:	f001 fb7b 	bl	8009fb8 <pbuf_add_header>
 80088c2:	9905      	ldr	r1, [sp, #20]
 80088c4:	2800      	cmp	r0, #0
 80088c6:	d04f      	beq.n	8008968 <icmp_input+0x10c>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80088c8:	8923      	ldrh	r3, [r4, #8]
 80088ca:	1959      	adds	r1, r3, r5
 80088cc:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 80088ce:	428b      	cmp	r3, r1
 80088d0:	d8eb      	bhi.n	80088aa <icmp_input+0x4e>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80088d2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80088d6:	200e      	movs	r0, #14
 80088d8:	f001 fc0e 	bl	800a0f8 <pbuf_alloc>
        if (r == NULL) {
 80088dc:	4606      	mov	r6, r0
 80088de:	2800      	cmp	r0, #0
 80088e0:	d0e3      	beq.n	80088aa <icmp_input+0x4e>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80088e2:	8942      	ldrh	r2, [r0, #10]
 80088e4:	f105 0308 	add.w	r3, r5, #8
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d203      	bcs.n	80088f4 <icmp_input+0x98>
          pbuf_free(r);
 80088ec:	4630      	mov	r0, r6
 80088ee:	f001 fb9b 	bl	800a028 <pbuf_free>
          goto icmperr;
 80088f2:	e7da      	b.n	80088aa <icmp_input+0x4e>
        MEMCPY(r->payload, iphdr_in, hlen);
 80088f4:	4649      	mov	r1, r9
 80088f6:	462a      	mov	r2, r5
 80088f8:	6840      	ldr	r0, [r0, #4]
 80088fa:	f005 fd31 	bl	800e360 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 80088fe:	4629      	mov	r1, r5
 8008900:	4630      	mov	r0, r6
 8008902:	f001 fb5d 	bl	8009fc0 <pbuf_remove_header>
 8008906:	b130      	cbz	r0, 8008916 <icmp_input+0xba>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8008908:	4b1e      	ldr	r3, [pc, #120]	; (8008984 <icmp_input+0x128>)
 800890a:	22b6      	movs	r2, #182	; 0xb6
 800890c:	491e      	ldr	r1, [pc, #120]	; (8008988 <icmp_input+0x12c>)
 800890e:	481f      	ldr	r0, [pc, #124]	; (800898c <icmp_input+0x130>)
 8008910:	f005 fd3c 	bl	800e38c <iprintf>
          pbuf_free(r);
 8008914:	e7ea      	b.n	80088ec <icmp_input+0x90>
        if (pbuf_copy(r, p) != ERR_OK) {
 8008916:	4621      	mov	r1, r4
 8008918:	4630      	mov	r0, r6
 800891a:	f001 fd29 	bl	800a370 <pbuf_copy>
 800891e:	2800      	cmp	r0, #0
 8008920:	d1e4      	bne.n	80088ec <icmp_input+0x90>
        pbuf_free(p);
 8008922:	4620      	mov	r0, r4
 8008924:	4634      	mov	r4, r6
 8008926:	f001 fb7f 	bl	800a028 <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 800892a:	4629      	mov	r1, r5
 800892c:	4620      	mov	r0, r4
      iecho = (struct icmp_echo_hdr *)p->payload;
 800892e:	6866      	ldr	r6, [r4, #4]
      if (pbuf_add_header(p, hlen)) {
 8008930:	f001 fb42 	bl	8009fb8 <pbuf_add_header>
 8008934:	2800      	cmp	r0, #0
 8008936:	d1b8      	bne.n	80088aa <icmp_input+0x4e>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8008938:	6862      	ldr	r2, [r4, #4]
        ip4_addr_copy(iphdr->src, *src);
 800893a:	f8d8 3014 	ldr.w	r3, [r8, #20]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800893e:	4914      	ldr	r1, [pc, #80]	; (8008990 <icmp_input+0x134>)
        ip4_addr_copy(iphdr->src, *src);
 8008940:	60d3      	str	r3, [r2, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8008942:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008946:	6113      	str	r3, [r2, #16]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8008948:	23ff      	movs	r3, #255	; 0xff
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800894a:	7030      	strb	r0, [r6, #0]
        iecho->chksum = 0;
 800894c:	70b0      	strb	r0, [r6, #2]
 800894e:	70f0      	strb	r0, [r6, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8008950:	7213      	strb	r3, [r2, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8008952:	7290      	strb	r0, [r2, #10]
 8008954:	72d0      	strb	r0, [r2, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8008956:	2201      	movs	r2, #1
 8008958:	9702      	str	r7, [sp, #8]
 800895a:	e9cd 0200 	strd	r0, r2, [sp]
 800895e:	4602      	mov	r2, r0
 8008960:	4620      	mov	r0, r4
 8008962:	f000 f9a9 	bl	8008cb8 <ip4_output_if>
  pbuf_free(p);
 8008966:	e7a0      	b.n	80088aa <icmp_input+0x4e>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8008968:	4620      	mov	r0, r4
 800896a:	f001 fb29 	bl	8009fc0 <pbuf_remove_header>
 800896e:	2800      	cmp	r0, #0
 8008970:	d0db      	beq.n	800892a <icmp_input+0xce>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8008972:	4b04      	ldr	r3, [pc, #16]	; (8008984 <icmp_input+0x128>)
 8008974:	22c7      	movs	r2, #199	; 0xc7
 8008976:	4907      	ldr	r1, [pc, #28]	; (8008994 <icmp_input+0x138>)
 8008978:	4804      	ldr	r0, [pc, #16]	; (800898c <icmp_input+0x130>)
 800897a:	f005 fd07 	bl	800e38c <iprintf>
          goto icmperr;
 800897e:	e794      	b.n	80088aa <icmp_input+0x4e>
 8008980:	2000a820 	.word	0x2000a820
 8008984:	080144ae 	.word	0x080144ae
 8008988:	08014546 	.word	0x08014546
 800898c:	0801342c 	.word	0x0801342c
 8008990:	2000a834 	.word	0x2000a834
 8008994:	0801457b 	.word	0x0801457b

08008998 <icmp_dest_unreach>:
{
 8008998:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 800899a:	3004      	adds	r0, #4
 800899c:	2103      	movs	r1, #3
 800899e:	f7ff bf15 	b.w	80087cc <icmp_send_response.isra.0>

080089a2 <icmp_time_exceeded>:
{
 80089a2:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 80089a4:	3004      	adds	r0, #4
 80089a6:	210b      	movs	r1, #11
 80089a8:	f7ff bf10 	b.w	80087cc <icmp_send_response.isra.0>

080089ac <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80089ac:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80089ae:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
{
 80089b2:	4601      	mov	r1, r0
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80089b4:	f013 0301 	ands.w	r3, r3, #1
 80089b8:	d00b      	beq.n	80089d2 <ip4_input_accept+0x26>
 80089ba:	6843      	ldr	r3, [r0, #4]
 80089bc:	b14b      	cbz	r3, 80089d2 <ip4_input_accept+0x26>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80089be:	4a07      	ldr	r2, [pc, #28]	; (80089dc <ip4_input_accept+0x30>)
 80089c0:	6950      	ldr	r0, [r2, #20]
 80089c2:	4283      	cmp	r3, r0
 80089c4:	d007      	beq.n	80089d6 <ip4_input_accept+0x2a>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80089c6:	f000 f988 	bl	8008cda <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80089ca:	3800      	subs	r0, #0
 80089cc:	bf18      	it	ne
 80089ce:	2001      	movne	r0, #1
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
}
 80089d0:	bd08      	pop	{r3, pc}
  return 0;
 80089d2:	4618      	mov	r0, r3
 80089d4:	e7fc      	b.n	80089d0 <ip4_input_accept+0x24>
      return 1;
 80089d6:	2001      	movs	r0, #1
 80089d8:	e7fa      	b.n	80089d0 <ip4_input_accept+0x24>
 80089da:	bf00      	nop
 80089dc:	2000a820 	.word	0x2000a820

080089e0 <ip4_route>:
  NETIF_FOREACH(netif) {
 80089e0:	4b14      	ldr	r3, [pc, #80]	; (8008a34 <ip4_route+0x54>)
{
 80089e2:	4602      	mov	r2, r0
  NETIF_FOREACH(netif) {
 80089e4:	6818      	ldr	r0, [r3, #0]
{
 80089e6:	b530      	push	{r4, r5, lr}
  NETIF_FOREACH(netif) {
 80089e8:	b978      	cbnz	r0, 8008a0a <ip4_route+0x2a>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80089ea:	4b13      	ldr	r3, [pc, #76]	; (8008a38 <ip4_route+0x58>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	b15b      	cbz	r3, 8008a08 <ip4_route+0x28>
 80089f0:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
 80089f4:	f001 0105 	and.w	r1, r1, #5
 80089f8:	2905      	cmp	r1, #5
 80089fa:	d105      	bne.n	8008a08 <ip4_route+0x28>
 80089fc:	6859      	ldr	r1, [r3, #4]
 80089fe:	b119      	cbz	r1, 8008a08 <ip4_route+0x28>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8008a00:	7812      	ldrb	r2, [r2, #0]
 8008a02:	2a7f      	cmp	r2, #127	; 0x7f
 8008a04:	bf18      	it	ne
 8008a06:	4618      	movne	r0, r3
}
 8008a08:	bd30      	pop	{r4, r5, pc}
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008a0a:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
 8008a0e:	07cd      	lsls	r5, r1, #31
 8008a10:	d50d      	bpl.n	8008a2e <ip4_route+0x4e>
 8008a12:	074c      	lsls	r4, r1, #29
 8008a14:	d50b      	bpl.n	8008a2e <ip4_route+0x4e>
 8008a16:	6843      	ldr	r3, [r0, #4]
 8008a18:	b14b      	cbz	r3, 8008a2e <ip4_route+0x4e>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8008a1a:	6814      	ldr	r4, [r2, #0]
 8008a1c:	6885      	ldr	r5, [r0, #8]
 8008a1e:	4063      	eors	r3, r4
 8008a20:	422b      	tst	r3, r5
 8008a22:	d0f1      	beq.n	8008a08 <ip4_route+0x28>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8008a24:	078b      	lsls	r3, r1, #30
 8008a26:	d402      	bmi.n	8008a2e <ip4_route+0x4e>
 8008a28:	68c3      	ldr	r3, [r0, #12]
 8008a2a:	429c      	cmp	r4, r3
 8008a2c:	d0ec      	beq.n	8008a08 <ip4_route+0x28>
  NETIF_FOREACH(netif) {
 8008a2e:	6800      	ldr	r0, [r0, #0]
 8008a30:	e7da      	b.n	80089e8 <ip4_route+0x8>
 8008a32:	bf00      	nop
 8008a34:	20010d48 	.word	0x20010d48
 8008a38:	20010d4c 	.word	0x20010d4c

08008a3c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8008a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8008a40:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
 8008a44:	4604      	mov	r4, r0
 8008a46:	460e      	mov	r6, r1
  if (IPH_V(iphdr) != 4) {
 8008a48:	f898 5000 	ldrb.w	r5, [r8]
 8008a4c:	092b      	lsrs	r3, r5, #4
 8008a4e:	2b04      	cmp	r3, #4
 8008a50:	d005      	beq.n	8008a5e <ip4_input+0x22>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8008a52:	4620      	mov	r0, r4
 8008a54:	f001 fae8 	bl	800a028 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8008a58:	2000      	movs	r0, #0
 8008a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8008a5e:	f8b8 0002 	ldrh.w	r0, [r8, #2]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8008a62:	f005 050f 	and.w	r5, r5, #15
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8008a66:	f000 fd79 	bl	800955c <lwip_htons>
  if (iphdr_len < p->tot_len) {
 8008a6a:	8923      	ldrh	r3, [r4, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8008a6c:	ea4f 0985 	mov.w	r9, r5, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8008a70:	4607      	mov	r7, r0
  if (iphdr_len < p->tot_len) {
 8008a72:	4283      	cmp	r3, r0
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8008a74:	464d      	mov	r5, r9
  if (iphdr_len < p->tot_len) {
 8008a76:	d903      	bls.n	8008a80 <ip4_input+0x44>
    pbuf_realloc(p, iphdr_len);
 8008a78:	4601      	mov	r1, r0
 8008a7a:	4620      	mov	r0, r4
 8008a7c:	f001 fbb8 	bl	800a1f0 <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8008a80:	8963      	ldrh	r3, [r4, #10]
 8008a82:	42ab      	cmp	r3, r5
 8008a84:	d3e5      	bcc.n	8008a52 <ip4_input+0x16>
 8008a86:	8923      	ldrh	r3, [r4, #8]
 8008a88:	42bb      	cmp	r3, r7
 8008a8a:	d3e2      	bcc.n	8008a52 <ip4_input+0x16>
 8008a8c:	2d13      	cmp	r5, #19
 8008a8e:	d9e0      	bls.n	8008a52 <ip4_input+0x16>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8008a90:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008a94:	4d49      	ldr	r5, [pc, #292]	; (8008bbc <ip4_input+0x180>)
 8008a96:	616b      	str	r3, [r5, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8008a98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8008a9c:	f8d8 200c 	ldr.w	r2, [r8, #12]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8008aa0:	2be0      	cmp	r3, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8008aa2:	612a      	str	r2, [r5, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8008aa4:	d143      	bne.n	8008b2e <ip4_input+0xf2>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8008aa6:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
 8008aaa:	07db      	lsls	r3, r3, #31
 8008aac:	d405      	bmi.n	8008aba <ip4_input+0x7e>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8008aae:	f898 3009 	ldrb.w	r3, [r8, #9]
 8008ab2:	2b11      	cmp	r3, #17
 8008ab4:	d053      	beq.n	8008b5e <ip4_input+0x122>
 8008ab6:	2700      	movs	r7, #0
 8008ab8:	e003      	b.n	8008ac2 <ip4_input+0x86>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8008aba:	6873      	ldr	r3, [r6, #4]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d0f6      	beq.n	8008aae <ip4_input+0x72>
 8008ac0:	4637      	mov	r7, r6
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8008ac2:	6928      	ldr	r0, [r5, #16]
 8008ac4:	b148      	cbz	r0, 8008ada <ip4_input+0x9e>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8008ac6:	4631      	mov	r1, r6
 8008ac8:	f000 f907 	bl	8008cda <ip4_addr_isbroadcast_u32>
 8008acc:	2800      	cmp	r0, #0
 8008ace:	d1c0      	bne.n	8008a52 <ip4_input+0x16>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8008ad0:	692b      	ldr	r3, [r5, #16]
 8008ad2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8008ad6:	2be0      	cmp	r3, #224	; 0xe0
 8008ad8:	d0bb      	beq.n	8008a52 <ip4_input+0x16>
  if (netif == NULL) {
 8008ada:	2f00      	cmp	r7, #0
 8008adc:	d0b9      	beq.n	8008a52 <ip4_input+0x16>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8008ade:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8008ae2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008ae6:	b13b      	cbz	r3, 8008af8 <ip4_input+0xbc>
    p = ip4_reass(p);
 8008ae8:	4620      	mov	r0, r4
 8008aea:	f000 fa79 	bl	8008fe0 <ip4_reass>
    if (p == NULL) {
 8008aee:	4604      	mov	r4, r0
 8008af0:	2800      	cmp	r0, #0
 8008af2:	d0b1      	beq.n	8008a58 <ip4_input+0x1c>
    iphdr = (const struct ip_hdr *)p->payload;
 8008af4:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 8008af8:	f8c5 8008 	str.w	r8, [r5, #8]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8008afc:	4649      	mov	r1, r9
 8008afe:	4620      	mov	r0, r4
  ip_data.current_input_netif = inp;
 8008b00:	e9c5 7600 	strd	r7, r6, [r5]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8008b04:	f898 3000 	ldrb.w	r3, [r8]
 8008b08:	f003 030f 	and.w	r3, r3, #15
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	81ab      	strh	r3, [r5, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8008b10:	f001 fa56 	bl	8009fc0 <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 8008b14:	f898 3009 	ldrb.w	r3, [r8, #9]
 8008b18:	2b06      	cmp	r3, #6
 8008b1a:	d034      	beq.n	8008b86 <ip4_input+0x14a>
 8008b1c:	2b11      	cmp	r3, #17
 8008b1e:	d026      	beq.n	8008b6e <ip4_input+0x132>
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d135      	bne.n	8008b90 <ip4_input+0x154>
        icmp_input(p, inp);
 8008b24:	4631      	mov	r1, r6
 8008b26:	4620      	mov	r0, r4
 8008b28:	f7ff fe98 	bl	800885c <icmp_input>
        break;
 8008b2c:	e023      	b.n	8008b76 <ip4_input+0x13a>
    if (ip4_input_accept(inp)) {
 8008b2e:	4630      	mov	r0, r6
 8008b30:	f7ff ff3c 	bl	80089ac <ip4_input_accept>
 8008b34:	b980      	cbnz	r0, 8008b58 <ip4_input+0x11c>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8008b36:	7d2b      	ldrb	r3, [r5, #20]
 8008b38:	2b7f      	cmp	r3, #127	; 0x7f
 8008b3a:	d0b8      	beq.n	8008aae <ip4_input+0x72>
        NETIF_FOREACH(netif) {
 8008b3c:	4b20      	ldr	r3, [pc, #128]	; (8008bc0 <ip4_input+0x184>)
 8008b3e:	681f      	ldr	r7, [r3, #0]
 8008b40:	2f00      	cmp	r7, #0
 8008b42:	d0b4      	beq.n	8008aae <ip4_input+0x72>
          if (netif == inp) {
 8008b44:	42b7      	cmp	r7, r6
 8008b46:	d101      	bne.n	8008b4c <ip4_input+0x110>
        NETIF_FOREACH(netif) {
 8008b48:	683f      	ldr	r7, [r7, #0]
 8008b4a:	e7f9      	b.n	8008b40 <ip4_input+0x104>
          if (ip4_input_accept(netif)) {
 8008b4c:	4638      	mov	r0, r7
 8008b4e:	f7ff ff2d 	bl	80089ac <ip4_input_accept>
 8008b52:	2800      	cmp	r0, #0
 8008b54:	d0f8      	beq.n	8008b48 <ip4_input+0x10c>
 8008b56:	e7b4      	b.n	8008ac2 <ip4_input+0x86>
  if (netif == NULL) {
 8008b58:	2e00      	cmp	r6, #0
 8008b5a:	d1b1      	bne.n	8008ac0 <ip4_input+0x84>
 8008b5c:	e7a7      	b.n	8008aae <ip4_input+0x72>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8008b5e:	eb08 0309 	add.w	r3, r8, r9
 8008b62:	885b      	ldrh	r3, [r3, #2]
 8008b64:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8008b68:	d1a5      	bne.n	8008ab6 <ip4_input+0x7a>
 8008b6a:	4637      	mov	r7, r6
 8008b6c:	e7b5      	b.n	8008ada <ip4_input+0x9e>
        udp_input(p, inp);
 8008b6e:	4631      	mov	r1, r6
 8008b70:	4620      	mov	r0, r4
 8008b72:	f004 ff9f 	bl	800dab4 <udp_input>
  ip_data.current_netif = NULL;
 8008b76:	2300      	movs	r3, #0
  ip_data.current_input_netif = NULL;
 8008b78:	e9c5 3300 	strd	r3, r3, [r5]
  ip_data.current_ip4_header = NULL;
 8008b7c:	60ab      	str	r3, [r5, #8]
  ip_data.current_ip_header_tot_len = 0;
 8008b7e:	81ab      	strh	r3, [r5, #12]
  ip4_addr_set_any(ip4_current_dest_addr());
 8008b80:	e9c5 3304 	strd	r3, r3, [r5, #16]
  return ERR_OK;
 8008b84:	e768      	b.n	8008a58 <ip4_input+0x1c>
        tcp_input(p, inp);
 8008b86:	4631      	mov	r1, r6
 8008b88:	4620      	mov	r0, r4
 8008b8a:	f003 f84d 	bl	800bc28 <tcp_input>
        break;
 8008b8e:	e7f2      	b.n	8008b76 <ip4_input+0x13a>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8008b90:	4639      	mov	r1, r7
 8008b92:	6968      	ldr	r0, [r5, #20]
 8008b94:	f000 f8a1 	bl	8008cda <ip4_addr_isbroadcast_u32>
 8008b98:	b960      	cbnz	r0, 8008bb4 <ip4_input+0x178>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8008b9a:	696b      	ldr	r3, [r5, #20]
 8008b9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8008ba0:	2be0      	cmp	r3, #224	; 0xe0
 8008ba2:	d007      	beq.n	8008bb4 <ip4_input+0x178>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8008ba4:	4649      	mov	r1, r9
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	f001 fa36 	bl	800a018 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8008bac:	2102      	movs	r1, #2
 8008bae:	4620      	mov	r0, r4
 8008bb0:	f7ff fef2 	bl	8008998 <icmp_dest_unreach>
        pbuf_free(p);
 8008bb4:	4620      	mov	r0, r4
 8008bb6:	f001 fa37 	bl	800a028 <pbuf_free>
        break;
 8008bba:	e7dc      	b.n	8008b76 <ip4_input+0x13a>
 8008bbc:	2000a820 	.word	0x2000a820
 8008bc0:	20010d48 	.word	0x20010d48

08008bc4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8008bc4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bc8:	461f      	mov	r7, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8008bca:	7b83      	ldrb	r3, [r0, #14]
{
 8008bcc:	4604      	mov	r4, r0
 8008bce:	4689      	mov	r9, r1
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8008bd0:	2b01      	cmp	r3, #1
{
 8008bd2:	4616      	mov	r6, r2
 8008bd4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8008bd8:	d006      	beq.n	8008be8 <ip4_output_if_src+0x24>
 8008bda:	4b31      	ldr	r3, [pc, #196]	; (8008ca0 <ip4_output_if_src+0xdc>)
 8008bdc:	f44f 7255 	mov.w	r2, #852	; 0x354
 8008be0:	4930      	ldr	r1, [pc, #192]	; (8008ca4 <ip4_output_if_src+0xe0>)
 8008be2:	4831      	ldr	r0, [pc, #196]	; (8008ca8 <ip4_output_if_src+0xe4>)
 8008be4:	f005 fbd2 	bl	800e38c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8008be8:	2e00      	cmp	r6, #0
 8008bea:	d049      	beq.n	8008c80 <ip4_output_if_src+0xbc>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8008bec:	2114      	movs	r1, #20
 8008bee:	4620      	mov	r0, r4
 8008bf0:	f001 f9e2 	bl	8009fb8 <pbuf_add_header>
 8008bf4:	b120      	cbz	r0, 8008c00 <ip4_output_if_src+0x3c>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8008bf6:	f06f 0001 	mvn.w	r0, #1
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 8008bfa:	b002      	add	sp, #8
 8008bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8008c00:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 8008c02:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8008c04:	2b13      	cmp	r3, #19
 8008c06:	d806      	bhi.n	8008c16 <ip4_output_if_src+0x52>
 8008c08:	4b25      	ldr	r3, [pc, #148]	; (8008ca0 <ip4_output_if_src+0xdc>)
 8008c0a:	f44f 7262 	mov.w	r2, #904	; 0x388
 8008c0e:	4927      	ldr	r1, [pc, #156]	; (8008cac <ip4_output_if_src+0xe8>)
 8008c10:	4825      	ldr	r0, [pc, #148]	; (8008ca8 <ip4_output_if_src+0xe4>)
 8008c12:	f005 fbbb 	bl	800e38c <iprintf>
    IPH_PROTO_SET(iphdr, proto);
 8008c16:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 8008c1a:	722f      	strb	r7, [r5, #8]
    IPH_OFFSET_SET(iphdr, 0);
 8008c1c:	2700      	movs	r7, #0
    IPH_PROTO_SET(iphdr, proto);
 8008c1e:	726b      	strb	r3, [r5, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 8008c20:	6833      	ldr	r3, [r6, #0]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8008c22:	f8df a090 	ldr.w	sl, [pc, #144]	; 8008cb4 <ip4_output_if_src+0xf0>
    ip4_addr_copy(iphdr->dest, *dest);
 8008c26:	612b      	str	r3, [r5, #16]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8008c28:	2345      	movs	r3, #69	; 0x45
 8008c2a:	702b      	strb	r3, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 8008c2c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8008c30:	706b      	strb	r3, [r5, #1]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8008c32:	8920      	ldrh	r0, [r4, #8]
 8008c34:	f000 fc92 	bl	800955c <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 8008c38:	71af      	strb	r7, [r5, #6]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8008c3a:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(iphdr, 0);
 8008c3c:	71ef      	strb	r7, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8008c3e:	f8ba 0000 	ldrh.w	r0, [sl]
 8008c42:	f000 fc8b 	bl	800955c <lwip_htons>
    ++ip_id;
 8008c46:	f8ba 3000 	ldrh.w	r3, [sl]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8008c4a:	80a8      	strh	r0, [r5, #4]
    ++ip_id;
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	f8aa 3000 	strh.w	r3, [sl]
    if (src == NULL) {
 8008c52:	f1b9 0f00 	cmp.w	r9, #0
 8008c56:	d110      	bne.n	8008c7a <ip4_output_if_src+0xb6>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8008c58:	4b15      	ldr	r3, [pc, #84]	; (8008cb0 <ip4_output_if_src+0xec>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	60eb      	str	r3, [r5, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 8008c5e:	72af      	strb	r7, [r5, #10]
 8008c60:	72ef      	strb	r7, [r5, #11]
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8008c62:	f8b8 3028 	ldrh.w	r3, [r8, #40]	; 0x28
 8008c66:	b19b      	cbz	r3, 8008c90 <ip4_output_if_src+0xcc>
 8008c68:	8922      	ldrh	r2, [r4, #8]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d910      	bls.n	8008c90 <ip4_output_if_src+0xcc>
    return ip4_frag(p, netif, dest);
 8008c6e:	4632      	mov	r2, r6
 8008c70:	4641      	mov	r1, r8
 8008c72:	4620      	mov	r0, r4
 8008c74:	f000 fb86 	bl	8009384 <ip4_frag>
 8008c78:	e7bf      	b.n	8008bfa <ip4_output_if_src+0x36>
      ip4_addr_copy(iphdr->src, *src);
 8008c7a:	f8d9 3000 	ldr.w	r3, [r9]
 8008c7e:	e7ed      	b.n	8008c5c <ip4_output_if_src+0x98>
    if (p->len < IP_HLEN) {
 8008c80:	8963      	ldrh	r3, [r4, #10]
 8008c82:	2b13      	cmp	r3, #19
 8008c84:	d9b7      	bls.n	8008bf6 <ip4_output_if_src+0x32>
    ip4_addr_copy(dest_addr, iphdr->dest);
 8008c86:	6863      	ldr	r3, [r4, #4]
    dest = &dest_addr;
 8008c88:	ae01      	add	r6, sp, #4
    ip4_addr_copy(dest_addr, iphdr->dest);
 8008c8a:	691b      	ldr	r3, [r3, #16]
 8008c8c:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 8008c8e:	e7e8      	b.n	8008c62 <ip4_output_if_src+0x9e>
  return netif->output(netif, p, dest);
 8008c90:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8008c94:	4632      	mov	r2, r6
 8008c96:	4621      	mov	r1, r4
 8008c98:	4640      	mov	r0, r8
 8008c9a:	4798      	blx	r3
 8008c9c:	e7ad      	b.n	8008bfa <ip4_output_if_src+0x36>
 8008c9e:	bf00      	nop
 8008ca0:	080145ad 	.word	0x080145ad
 8008ca4:	08014618 	.word	0x08014618
 8008ca8:	0801342c 	.word	0x0801342c
 8008cac:	08014624 	.word	0x08014624
 8008cb0:	08013240 	.word	0x08013240
 8008cb4:	200068ea 	.word	0x200068ea

08008cb8 <ip4_output_if>:
{
 8008cb8:	b4f0      	push	{r4, r5, r6, r7}
 8008cba:	9c06      	ldr	r4, [sp, #24]
 8008cbc:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8008cc0:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8008cc4:	b11a      	cbz	r2, 8008cce <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 8008cc6:	b109      	cbz	r1, 8008ccc <ip4_output_if+0x14>
 8008cc8:	680f      	ldr	r7, [r1, #0]
 8008cca:	b907      	cbnz	r7, 8008cce <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 8008ccc:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8008cce:	9504      	str	r5, [sp, #16]
 8008cd0:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 8008cd4:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8008cd6:	f7ff bf75 	b.w	8008bc4 <ip4_output_if_src>

08008cda <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8008cda:	1e43      	subs	r3, r0, #1
{
 8008cdc:	4602      	mov	r2, r0
  if ((~addr == IPADDR_ANY) ||
 8008cde:	3303      	adds	r3, #3
 8008ce0:	d812      	bhi.n	8008d08 <ip4_addr_isbroadcast_u32+0x2e>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8008ce2:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 8008ce6:	f013 0002 	ands.w	r0, r3, #2
 8008cea:	d010      	beq.n	8008d0e <ip4_addr_isbroadcast_u32+0x34>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8008cec:	684b      	ldr	r3, [r1, #4]
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d00c      	beq.n	8008d0c <ip4_addr_isbroadcast_u32+0x32>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8008cf2:	6888      	ldr	r0, [r1, #8]
 8008cf4:	4053      	eors	r3, r2
 8008cf6:	4203      	tst	r3, r0
 8008cf8:	d108      	bne.n	8008d0c <ip4_addr_isbroadcast_u32+0x32>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8008cfa:	43c3      	mvns	r3, r0
 8008cfc:	ea22 0000 	bic.w	r0, r2, r0
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8008d00:	1ac3      	subs	r3, r0, r3
 8008d02:	4258      	negs	r0, r3
 8008d04:	4158      	adcs	r0, r3
 8008d06:	4770      	bx	lr
    return 1;
 8008d08:	2001      	movs	r0, #1
 8008d0a:	4770      	bx	lr
    return 0;
 8008d0c:	2000      	movs	r0, #0
  }
}
 8008d0e:	4770      	bx	lr

08008d10 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8008d10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;

  s_addr = ip4_addr_get_u32(addr);
 8008d14:	6803      	ldr	r3, [r0, #0]
 8008d16:	f10d 0c04 	add.w	ip, sp, #4

  rp = buf;
 8008d1a:	460d      	mov	r5, r1
  s_addr = ip4_addr_get_u32(addr);
 8008d1c:	2004      	movs	r0, #4
  int len = 0;
 8008d1e:	2600      	movs	r6, #0
  ap = (u8_t *)&s_addr;
  for (n = 0; n < 4; n++) {
    i = 0;
    do {
      rem = *ap % (u8_t)10;
 8008d20:	f04f 0e0a 	mov.w	lr, #10
      *rp++ = inv[i];
    }
    if (len++ >= buflen) {
      return NULL;
    }
    *rp++ = '.';
 8008d24:	f04f 082e 	mov.w	r8, #46	; 0x2e
  s_addr = ip4_addr_get_u32(addr);
 8008d28:	9301      	str	r3, [sp, #4]
  for (n = 0; n < 4; n++) {
 8008d2a:	f81c 4b01 	ldrb.w	r4, [ip], #1
    i = 0;
 8008d2e:	2700      	movs	r7, #0
      rem = *ap % (u8_t)10;
 8008d30:	46a2      	mov	sl, r4
      inv[i++] = (char)('0' + rem);
 8008d32:	f10d 0b08 	add.w	fp, sp, #8
      rem = *ap % (u8_t)10;
 8008d36:	fbb4 f3fe 	udiv	r3, r4, lr
 8008d3a:	fb0e 4913 	mls	r9, lr, r3, r4
      *ap /= (u8_t)10;
 8008d3e:	b2dc      	uxtb	r4, r3
      inv[i++] = (char)('0' + rem);
 8008d40:	463b      	mov	r3, r7
    } while (*ap);
 8008d42:	f1ba 0f09 	cmp.w	sl, #9
      inv[i++] = (char)('0' + rem);
 8008d46:	f107 0701 	add.w	r7, r7, #1
 8008d4a:	f109 0930 	add.w	r9, r9, #48	; 0x30
 8008d4e:	449b      	add	fp, r3
 8008d50:	b2ff      	uxtb	r7, r7
 8008d52:	f80b 9c08 	strb.w	r9, [fp, #-8]
    } while (*ap);
 8008d56:	d8eb      	bhi.n	8008d30 <ip4addr_ntoa_r+0x20>
 8008d58:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008d5c:	4637      	mov	r7, r6
 8008d5e:	462c      	mov	r4, r5
    while (i--) {
 8008d60:	2bff      	cmp	r3, #255	; 0xff
 8008d62:	f106 0601 	add.w	r6, r6, #1
 8008d66:	d10d      	bne.n	8008d84 <ip4addr_ntoa_r+0x74>
    if (len++ >= buflen) {
 8008d68:	4297      	cmp	r7, r2
 8008d6a:	da18      	bge.n	8008d9e <ip4addr_ntoa_r+0x8e>
    *rp++ = '.';
 8008d6c:	3801      	subs	r0, #1
 8008d6e:	4625      	mov	r5, r4
  for (n = 0; n < 4; n++) {
 8008d70:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    *rp++ = '.';
 8008d74:	f805 8b01 	strb.w	r8, [r5], #1
  for (n = 0; n < 4; n++) {
 8008d78:	d1d7      	bne.n	8008d2a <ip4addr_ntoa_r+0x1a>
    ap++;
  }
  *--rp = 0;
 8008d7a:	7020      	strb	r0, [r4, #0]
  return buf;
 8008d7c:	4608      	mov	r0, r1
}
 8008d7e:	b003      	add	sp, #12
 8008d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (len++ >= buflen) {
 8008d84:	1e5d      	subs	r5, r3, #1
 8008d86:	4297      	cmp	r7, r2
 8008d88:	b2ed      	uxtb	r5, r5
 8008d8a:	da08      	bge.n	8008d9e <ip4addr_ntoa_r+0x8e>
      *rp++ = inv[i];
 8008d8c:	af02      	add	r7, sp, #8
 8008d8e:	443b      	add	r3, r7
 8008d90:	4637      	mov	r7, r6
 8008d92:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8008d96:	f804 3b01 	strb.w	r3, [r4], #1
 8008d9a:	462b      	mov	r3, r5
 8008d9c:	e7e0      	b.n	8008d60 <ip4addr_ntoa_r+0x50>
        return NULL;
 8008d9e:	2000      	movs	r0, #0
 8008da0:	e7ed      	b.n	8008d7e <ip4addr_ntoa_r+0x6e>
	...

08008da4 <ip4addr_ntoa>:
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8008da4:	2210      	movs	r2, #16
 8008da6:	4901      	ldr	r1, [pc, #4]	; (8008dac <ip4addr_ntoa+0x8>)
 8008da8:	f7ff bfb2 	b.w	8008d10 <ip4addr_ntoa_r>
 8008dac:	200068ec 	.word	0x200068ec

08008db0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8008db0:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8008db2:	4b0c      	ldr	r3, [pc, #48]	; (8008de4 <ip_reass_dequeue_datagram+0x34>)
{
 8008db4:	4604      	mov	r4, r0
 8008db6:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	4282      	cmp	r2, r0
 8008dbc:	d107      	bne.n	8008dce <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8008dbe:	6802      	ldr	r2, [r0, #0]
 8008dc0:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8008dc2:	4621      	mov	r1, r4
 8008dc4:	2004      	movs	r0, #4
}
 8008dc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 8008dca:	f000 bf03 	b.w	8009bd4 <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8008dce:	b931      	cbnz	r1, 8008dde <ip_reass_dequeue_datagram+0x2e>
 8008dd0:	4b05      	ldr	r3, [pc, #20]	; (8008de8 <ip_reass_dequeue_datagram+0x38>)
 8008dd2:	f240 1245 	movw	r2, #325	; 0x145
 8008dd6:	4905      	ldr	r1, [pc, #20]	; (8008dec <ip_reass_dequeue_datagram+0x3c>)
 8008dd8:	4805      	ldr	r0, [pc, #20]	; (8008df0 <ip_reass_dequeue_datagram+0x40>)
 8008dda:	f005 fad7 	bl	800e38c <iprintf>
    prev->next = ipr->next;
 8008dde:	6823      	ldr	r3, [r4, #0]
 8008de0:	602b      	str	r3, [r5, #0]
 8008de2:	e7ee      	b.n	8008dc2 <ip_reass_dequeue_datagram+0x12>
 8008de4:	200068fc 	.word	0x200068fc
 8008de8:	08014651 	.word	0x08014651
 8008dec:	080146c1 	.word	0x080146c1
 8008df0:	0801342c 	.word	0x0801342c

08008df4 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8008df4:	4281      	cmp	r1, r0
{
 8008df6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dfa:	4604      	mov	r4, r0
 8008dfc:	460e      	mov	r6, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8008dfe:	d105      	bne.n	8008e0c <ip_reass_free_complete_datagram+0x18>
 8008e00:	4b2f      	ldr	r3, [pc, #188]	; (8008ec0 <ip_reass_free_complete_datagram+0xcc>)
 8008e02:	22ab      	movs	r2, #171	; 0xab
 8008e04:	492f      	ldr	r1, [pc, #188]	; (8008ec4 <ip_reass_free_complete_datagram+0xd0>)
 8008e06:	4830      	ldr	r0, [pc, #192]	; (8008ec8 <ip_reass_free_complete_datagram+0xd4>)
 8008e08:	f005 fac0 	bl	800e38c <iprintf>
  if (prev != NULL) {
 8008e0c:	b146      	cbz	r6, 8008e20 <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8008e0e:	6833      	ldr	r3, [r6, #0]
 8008e10:	42a3      	cmp	r3, r4
 8008e12:	d005      	beq.n	8008e20 <ip_reass_free_complete_datagram+0x2c>
 8008e14:	4b2a      	ldr	r3, [pc, #168]	; (8008ec0 <ip_reass_free_complete_datagram+0xcc>)
 8008e16:	22ad      	movs	r2, #173	; 0xad
 8008e18:	492c      	ldr	r1, [pc, #176]	; (8008ecc <ip_reass_free_complete_datagram+0xd8>)
 8008e1a:	482b      	ldr	r0, [pc, #172]	; (8008ec8 <ip_reass_free_complete_datagram+0xd4>)
 8008e1c:	f005 fab6 	bl	800e38c <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8008e20:	6867      	ldr	r7, [r4, #4]
 8008e22:	687b      	ldr	r3, [r7, #4]
  if (iprh->start == 0) {
 8008e24:	889a      	ldrh	r2, [r3, #4]
 8008e26:	bb92      	cbnz	r2, 8008e8e <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 8008e28:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8008e2a:	f104 011c 	add.w	r1, r4, #28
    ipr->p = iprh->next_pbuf;
 8008e2e:	6062      	str	r2, [r4, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8008e30:	f104 0208 	add.w	r2, r4, #8
 8008e34:	f852 0b04 	ldr.w	r0, [r2], #4
 8008e38:	428a      	cmp	r2, r1
 8008e3a:	f843 0b04 	str.w	r0, [r3], #4
 8008e3e:	d1f9      	bne.n	8008e34 <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8008e40:	2101      	movs	r1, #1
 8008e42:	4638      	mov	r0, r7
 8008e44:	f7ff fdad 	bl	80089a2 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8008e48:	4638      	mov	r0, r7
 8008e4a:	f001 fa29 	bl	800a2a0 <pbuf_clen>
 8008e4e:	4605      	mov	r5, r0
    pbuf_free(p);
 8008e50:	4638      	mov	r0, r7
 8008e52:	f001 f8e9 	bl	800a028 <pbuf_free>
  p = ipr->p;
 8008e56:	6867      	ldr	r7, [r4, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8008e58:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8008ec0 <ip_reass_free_complete_datagram+0xcc>
 8008e5c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8008ed8 <ip_reass_free_complete_datagram+0xe4>
 8008e60:	f8df a064 	ldr.w	sl, [pc, #100]	; 8008ec8 <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 8008e64:	b9af      	cbnz	r7, 8008e92 <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 8008e66:	4620      	mov	r0, r4
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8008e68:	4c19      	ldr	r4, [pc, #100]	; (8008ed0 <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 8008e6a:	4631      	mov	r1, r6
 8008e6c:	f7ff ffa0 	bl	8008db0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8008e70:	88a3      	ldrh	r3, [r4, #4]
 8008e72:	42ab      	cmp	r3, r5
 8008e74:	d205      	bcs.n	8008e82 <ip_reass_free_complete_datagram+0x8e>
 8008e76:	4b12      	ldr	r3, [pc, #72]	; (8008ec0 <ip_reass_free_complete_datagram+0xcc>)
 8008e78:	22d2      	movs	r2, #210	; 0xd2
 8008e7a:	4916      	ldr	r1, [pc, #88]	; (8008ed4 <ip_reass_free_complete_datagram+0xe0>)
 8008e7c:	4812      	ldr	r0, [pc, #72]	; (8008ec8 <ip_reass_free_complete_datagram+0xd4>)
 8008e7e:	f005 fa85 	bl	800e38c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8008e82:	88a3      	ldrh	r3, [r4, #4]
}
 8008e84:	4628      	mov	r0, r5
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8008e86:	1b5b      	subs	r3, r3, r5
 8008e88:	80a3      	strh	r3, [r4, #4]
}
 8008e8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 8008e8e:	2500      	movs	r5, #0
 8008e90:	e7e1      	b.n	8008e56 <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 8008e92:	687b      	ldr	r3, [r7, #4]
    clen = pbuf_clen(pcur);
 8008e94:	4638      	mov	r0, r7
    p = iprh->next_pbuf;
 8008e96:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 8008e9a:	f001 fa01 	bl	800a2a0 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8008e9e:	4405      	add	r5, r0
 8008ea0:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8008ea4:	db05      	blt.n	8008eb2 <ip_reass_free_complete_datagram+0xbe>
 8008ea6:	4643      	mov	r3, r8
 8008ea8:	22cc      	movs	r2, #204	; 0xcc
 8008eaa:	4649      	mov	r1, r9
 8008eac:	4650      	mov	r0, sl
 8008eae:	f005 fa6d 	bl	800e38c <iprintf>
    pbuf_free(pcur);
 8008eb2:	4638      	mov	r0, r7
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8008eb4:	b2ad      	uxth	r5, r5
    p = iprh->next_pbuf;
 8008eb6:	465f      	mov	r7, fp
    pbuf_free(pcur);
 8008eb8:	f001 f8b6 	bl	800a028 <pbuf_free>
 8008ebc:	e7d2      	b.n	8008e64 <ip_reass_free_complete_datagram+0x70>
 8008ebe:	bf00      	nop
 8008ec0:	08014651 	.word	0x08014651
 8008ec4:	080146da 	.word	0x080146da
 8008ec8:	0801342c 	.word	0x0801342c
 8008ecc:	080146e6 	.word	0x080146e6
 8008ed0:	200068fc 	.word	0x200068fc
 8008ed4:	08014715 	.word	0x08014715
 8008ed8:	080146f8 	.word	0x080146f8

08008edc <ip_reass_remove_oldest_datagram>:
{
 8008edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ee0:	4605      	mov	r5, r0
 8008ee2:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 8008ee4:	2600      	movs	r6, #0
    r = reassdatagrams;
 8008ee6:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8008f50 <ip_reass_remove_oldest_datagram+0x74>
    other_datagrams = 0;
 8008eea:	2400      	movs	r4, #0
    r = reassdatagrams;
 8008eec:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 8008ef0:	4621      	mov	r1, r4
    prev = NULL;
 8008ef2:	46a4      	mov	ip, r4
    oldest = NULL;
 8008ef4:	4620      	mov	r0, r4
    while (r != NULL) {
 8008ef6:	b953      	cbnz	r3, 8008f0e <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 8008ef8:	b110      	cbz	r0, 8008f00 <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8008efa:	f7ff ff7b 	bl	8008df4 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 8008efe:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8008f00:	42be      	cmp	r6, r7
 8008f02:	da01      	bge.n	8008f08 <ip_reass_remove_oldest_datagram+0x2c>
 8008f04:	2c01      	cmp	r4, #1
 8008f06:	dcf0      	bgt.n	8008eea <ip_reass_remove_oldest_datagram+0xe>
}
 8008f08:	4630      	mov	r0, r6
 8008f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8008f0e:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 8008f12:	695a      	ldr	r2, [r3, #20]
 8008f14:	4572      	cmp	r2, lr
 8008f16:	d109      	bne.n	8008f2c <ip_reass_remove_oldest_datagram+0x50>
 8008f18:	f8d5 e010 	ldr.w	lr, [r5, #16]
 8008f1c:	699a      	ldr	r2, [r3, #24]
 8008f1e:	4572      	cmp	r2, lr
 8008f20:	d104      	bne.n	8008f2c <ip_reass_remove_oldest_datagram+0x50>
 8008f22:	f8b3 e00c 	ldrh.w	lr, [r3, #12]
 8008f26:	88aa      	ldrh	r2, [r5, #4]
 8008f28:	4596      	cmp	lr, r2
 8008f2a:	d008      	beq.n	8008f3e <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 8008f2c:	3401      	adds	r4, #1
        if (oldest == NULL) {
 8008f2e:	b160      	cbz	r0, 8008f4a <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 8008f30:	7fc2      	ldrb	r2, [r0, #31]
 8008f32:	f893 e01f 	ldrb.w	lr, [r3, #31]
          oldest_prev = prev;
 8008f36:	4596      	cmp	lr, r2
 8008f38:	bf9c      	itt	ls
 8008f3a:	4661      	movls	r1, ip
 8008f3c:	4618      	movls	r0, r3
      if (r->next != NULL) {
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	2a00      	cmp	r2, #0
 8008f42:	bf18      	it	ne
 8008f44:	469c      	movne	ip, r3
 8008f46:	4613      	mov	r3, r2
 8008f48:	e7d5      	b.n	8008ef6 <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 8008f4a:	4661      	mov	r1, ip
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	e7f6      	b.n	8008f3e <ip_reass_remove_oldest_datagram+0x62>
 8008f50:	200068fc 	.word	0x200068fc

08008f54 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8008f54:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8008f56:	4604      	mov	r4, r0
 8008f58:	b930      	cbnz	r0, 8008f68 <ip_frag_free_pbuf_custom_ref+0x14>
 8008f5a:	4b06      	ldr	r3, [pc, #24]	; (8008f74 <ip_frag_free_pbuf_custom_ref+0x20>)
 8008f5c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8008f60:	4905      	ldr	r1, [pc, #20]	; (8008f78 <ip_frag_free_pbuf_custom_ref+0x24>)
 8008f62:	4806      	ldr	r0, [pc, #24]	; (8008f7c <ip_frag_free_pbuf_custom_ref+0x28>)
 8008f64:	f005 fa12 	bl	800e38c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8008f68:	4621      	mov	r1, r4
 8008f6a:	2005      	movs	r0, #5
}
 8008f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 8008f70:	f000 be30 	b.w	8009bd4 <memp_free>
 8008f74:	08014651 	.word	0x08014651
 8008f78:	08014ecd 	.word	0x08014ecd
 8008f7c:	0801342c 	.word	0x0801342c

08008f80 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8008f80:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8008f82:	4604      	mov	r4, r0
 8008f84:	b930      	cbnz	r0, 8008f94 <ipfrag_free_pbuf_custom+0x14>
 8008f86:	4b08      	ldr	r3, [pc, #32]	; (8008fa8 <ipfrag_free_pbuf_custom+0x28>)
 8008f88:	f240 22ce 	movw	r2, #718	; 0x2ce
 8008f8c:	4907      	ldr	r1, [pc, #28]	; (8008fac <ipfrag_free_pbuf_custom+0x2c>)
 8008f8e:	4808      	ldr	r0, [pc, #32]	; (8008fb0 <ipfrag_free_pbuf_custom+0x30>)
 8008f90:	f005 f9fc 	bl	800e38c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 8008f94:	6960      	ldr	r0, [r4, #20]
 8008f96:	b108      	cbz	r0, 8008f9c <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 8008f98:	f001 f846 	bl	800a028 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8008f9c:	4620      	mov	r0, r4
}
 8008f9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 8008fa2:	f7ff bfd7 	b.w	8008f54 <ip_frag_free_pbuf_custom_ref>
 8008fa6:	bf00      	nop
 8008fa8:	08014651 	.word	0x08014651
 8008fac:	08014737 	.word	0x08014737
 8008fb0:	0801342c 	.word	0x0801342c

08008fb4 <ip_reass_tmr>:
{
 8008fb4:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 8008fb6:	4b09      	ldr	r3, [pc, #36]	; (8008fdc <ip_reass_tmr+0x28>)
  struct ip_reassdata *r, *prev = NULL;
 8008fb8:	2400      	movs	r4, #0
  r = reassdatagrams;
 8008fba:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 8008fbc:	b900      	cbnz	r0, 8008fc0 <ip_reass_tmr+0xc>
}
 8008fbe:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 8008fc0:	7fc3      	ldrb	r3, [r0, #31]
 8008fc2:	6805      	ldr	r5, [r0, #0]
 8008fc4:	b123      	cbz	r3, 8008fd0 <ip_reass_tmr+0x1c>
      r->timer--;
 8008fc6:	3b01      	subs	r3, #1
 8008fc8:	77c3      	strb	r3, [r0, #31]
      ip_reass_free_complete_datagram(tmp, prev);
 8008fca:	4604      	mov	r4, r0
 8008fcc:	4628      	mov	r0, r5
 8008fce:	e7f5      	b.n	8008fbc <ip_reass_tmr+0x8>
 8008fd0:	4621      	mov	r1, r4
 8008fd2:	f7ff ff0f 	bl	8008df4 <ip_reass_free_complete_datagram>
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	e7f7      	b.n	8008fca <ip_reass_tmr+0x16>
 8008fda:	bf00      	nop
 8008fdc:	200068fc 	.word	0x200068fc

08008fe0 <ip4_reass>:
{
 8008fe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 8008fe4:	6845      	ldr	r5, [r0, #4]
{
 8008fe6:	4680      	mov	r8, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8008fe8:	782b      	ldrb	r3, [r5, #0]
 8008fea:	f003 030f 	and.w	r3, r3, #15
 8008fee:	2b05      	cmp	r3, #5
 8008ff0:	f040 80a0 	bne.w	8009134 <ip4_reass+0x154>
  offset = IPH_OFFSET_BYTES(fraghdr);
 8008ff4:	88e8      	ldrh	r0, [r5, #6]
 8008ff6:	f000 fab1 	bl	800955c <lwip_htons>
 8008ffa:	4682      	mov	sl, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8008ffc:	8868      	ldrh	r0, [r5, #2]
 8008ffe:	f000 faad 	bl	800955c <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8009002:	782b      	ldrb	r3, [r5, #0]
 8009004:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 8009008:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 800900c:	ea4f 0783 	mov.w	r7, r3, lsl #2
 8009010:	f0c0 8090 	bcc.w	8009134 <ip4_reass+0x154>
  len = (u16_t)(len - hlen);
 8009014:	1bc0      	subs	r0, r0, r7
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8009016:	4ec0      	ldr	r6, [pc, #768]	; (8009318 <ip4_reass+0x338>)
  len = (u16_t)(len - hlen);
 8009018:	b283      	uxth	r3, r0
  clen = pbuf_clen(p);
 800901a:	4640      	mov	r0, r8
  len = (u16_t)(len - hlen);
 800901c:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 800901e:	f001 f93f 	bl	800a2a0 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8009022:	88b3      	ldrh	r3, [r6, #4]
  clen = pbuf_clen(p);
 8009024:	4681      	mov	r9, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8009026:	4403      	add	r3, r0
 8009028:	2b0a      	cmp	r3, #10
 800902a:	dc79      	bgt.n	8009120 <ip4_reass+0x140>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800902c:	6834      	ldr	r4, [r6, #0]
 800902e:	2c00      	cmp	r4, #0
 8009030:	f040 8085 	bne.w	800913e <ip4_reass+0x15e>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8009034:	2004      	movs	r0, #4
 8009036:	f000 fdb1 	bl	8009b9c <memp_malloc>
  if (ipr == NULL) {
 800903a:	4604      	mov	r4, r0
 800903c:	b958      	cbnz	r0, 8009056 <ip4_reass+0x76>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800903e:	4649      	mov	r1, r9
 8009040:	4628      	mov	r0, r5
 8009042:	f7ff ff4b 	bl	8008edc <ip_reass_remove_oldest_datagram>
 8009046:	4581      	cmp	r9, r0
 8009048:	dc74      	bgt.n	8009134 <ip4_reass+0x154>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800904a:	2004      	movs	r0, #4
 800904c:	f000 fda6 	bl	8009b9c <memp_malloc>
    if (ipr == NULL)
 8009050:	4604      	mov	r4, r0
 8009052:	2800      	cmp	r0, #0
 8009054:	d06e      	beq.n	8009134 <ip4_reass+0x154>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8009056:	221c      	movs	r2, #28
 8009058:	2100      	movs	r1, #0
 800905a:	1d20      	adds	r0, r4, #4
 800905c:	f005 f98e 	bl	800e37c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8009060:	230f      	movs	r3, #15
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8009062:	f104 0208 	add.w	r2, r4, #8
 8009066:	f105 0114 	add.w	r1, r5, #20
  ipr->timer = IP_REASS_MAXAGE;
 800906a:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 800906c:	6833      	ldr	r3, [r6, #0]
  reassdatagrams = ipr;
 800906e:	6034      	str	r4, [r6, #0]
  ipr->next = reassdatagrams;
 8009070:	6023      	str	r3, [r4, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8009072:	462b      	mov	r3, r5
 8009074:	f853 0b04 	ldr.w	r0, [r3], #4
 8009078:	428b      	cmp	r3, r1
 800907a:	f842 0b04 	str.w	r0, [r2], #4
 800907e:	d1f9      	bne.n	8009074 <ip4_reass+0x94>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8009080:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8009084:	f3ca 070c 	ubfx	r7, sl, #0, #13
  if (is_last) {
 8009088:	f01b 0b20 	ands.w	fp, fp, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 800908c:	ea4f 07c7 	mov.w	r7, r7, lsl #3
  if (is_last) {
 8009090:	d10a      	bne.n	80090a8 <ip4_reass+0xc8>
    u16_t datagram_len = (u16_t)(offset + len);
 8009092:	9b01      	ldr	r3, [sp, #4]
 8009094:	18fb      	adds	r3, r7, r3
 8009096:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8009098:	429f      	cmp	r7, r3
 800909a:	f200 8129 	bhi.w	80092f0 <ip4_reass+0x310>
 800909e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80090a2:	4293      	cmp	r3, r2
 80090a4:	f200 8124 	bhi.w	80092f0 <ip4_reass+0x310>
  fraghdr = (struct ip_hdr *)new_p->payload;
 80090a8:	f8d8 5004 	ldr.w	r5, [r8, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80090ac:	8868      	ldrh	r0, [r5, #2]
 80090ae:	f000 fa55 	bl	800955c <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 80090b2:	782b      	ldrb	r3, [r5, #0]
 80090b4:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 80090b8:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 80090bc:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80090c0:	f0c0 8116 	bcc.w	80092f0 <ip4_reass+0x310>
  len = (u16_t)(len - hlen);
 80090c4:	1a80      	subs	r0, r0, r2
 80090c6:	fa1f fa80 	uxth.w	sl, r0
  offset = IPH_OFFSET_BYTES(fraghdr);
 80090ca:	88e8      	ldrh	r0, [r5, #6]
 80090cc:	f000 fa46 	bl	800955c <lwip_htons>
 80090d0:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 80090d4:	f8d8 6004 	ldr.w	r6, [r8, #4]
  iprh->next_pbuf = NULL;
 80090d8:	2500      	movs	r5, #0
  offset = IPH_OFFSET_BYTES(fraghdr);
 80090da:	00c0      	lsls	r0, r0, #3
  iprh->next_pbuf = NULL;
 80090dc:	7035      	strb	r5, [r6, #0]
  iprh->end = (u16_t)(offset + len);
 80090de:	eb0a 0300 	add.w	r3, sl, r0
  iprh->next_pbuf = NULL;
 80090e2:	7075      	strb	r5, [r6, #1]
 80090e4:	70b5      	strb	r5, [r6, #2]
  iprh->end = (u16_t)(offset + len);
 80090e6:	fa1f fc83 	uxth.w	ip, r3
  iprh->next_pbuf = NULL;
 80090ea:	70f5      	strb	r5, [r6, #3]
  iprh->start = offset;
 80090ec:	80b0      	strh	r0, [r6, #4]
  if (iprh->end < offset) {
 80090ee:	4560      	cmp	r0, ip
  iprh->end = (u16_t)(offset + len);
 80090f0:	80f3      	strh	r3, [r6, #6]
  if (iprh->end < offset) {
 80090f2:	f200 80fd 	bhi.w	80092f0 <ip4_reass+0x310>
  for (q = ipr->p; q != NULL;) {
 80090f6:	f8d4 e004 	ldr.w	lr, [r4, #4]
  int valid = 1;
 80090fa:	f04f 0a01 	mov.w	sl, #1
  for (q = ipr->p; q != NULL;) {
 80090fe:	4671      	mov	r1, lr
 8009100:	bb61      	cbnz	r1, 800915c <ip4_reass+0x17c>
    if (iprh_prev != NULL) {
 8009102:	2d00      	cmp	r5, #0
 8009104:	f040 80ae 	bne.w	8009264 <ip4_reass+0x284>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8009108:	f1be 0f00 	cmp.w	lr, #0
 800910c:	f000 809a 	beq.w	8009244 <ip4_reass+0x264>
 8009110:	4b82      	ldr	r3, [pc, #520]	; (800931c <ip4_reass+0x33c>)
 8009112:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8009116:	4982      	ldr	r1, [pc, #520]	; (8009320 <ip4_reass+0x340>)
 8009118:	4882      	ldr	r0, [pc, #520]	; (8009324 <ip4_reass+0x344>)
 800911a:	f005 f937 	bl	800e38c <iprintf>
 800911e:	e091      	b.n	8009244 <ip4_reass+0x264>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8009120:	4601      	mov	r1, r0
 8009122:	4628      	mov	r0, r5
 8009124:	f7ff feda 	bl	8008edc <ip_reass_remove_oldest_datagram>
 8009128:	b120      	cbz	r0, 8009134 <ip4_reass+0x154>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800912a:	88b3      	ldrh	r3, [r6, #4]
 800912c:	444b      	add	r3, r9
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800912e:	2b0a      	cmp	r3, #10
 8009130:	f77f af7c 	ble.w	800902c <ip4_reass+0x4c>
  pbuf_free(p);
 8009134:	4640      	mov	r0, r8
 8009136:	f000 ff77 	bl	800a028 <pbuf_free>
  return NULL;
 800913a:	2600      	movs	r6, #0
 800913c:	e07c      	b.n	8009238 <ip4_reass+0x258>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800913e:	68eb      	ldr	r3, [r5, #12]
 8009140:	6962      	ldr	r2, [r4, #20]
 8009142:	429a      	cmp	r2, r3
 8009144:	d108      	bne.n	8009158 <ip4_reass+0x178>
 8009146:	692b      	ldr	r3, [r5, #16]
 8009148:	69a2      	ldr	r2, [r4, #24]
 800914a:	429a      	cmp	r2, r3
 800914c:	d104      	bne.n	8009158 <ip4_reass+0x178>
 800914e:	89a2      	ldrh	r2, [r4, #12]
 8009150:	88ab      	ldrh	r3, [r5, #4]
 8009152:	429a      	cmp	r2, r3
 8009154:	f000 80f2 	beq.w	800933c <ip4_reass+0x35c>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8009158:	6824      	ldr	r4, [r4, #0]
 800915a:	e768      	b.n	800902e <ip4_reass+0x4e>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800915c:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 800915e:	889a      	ldrh	r2, [r3, #4]
 8009160:	4290      	cmp	r0, r2
 8009162:	d272      	bcs.n	800924a <ip4_reass+0x26a>
      iprh->next_pbuf = q;
 8009164:	6031      	str	r1, [r6, #0]
      if (iprh_prev != NULL) {
 8009166:	2d00      	cmp	r5, #0
 8009168:	d06a      	beq.n	8009240 <ip4_reass+0x260>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800916a:	88eb      	ldrh	r3, [r5, #6]
 800916c:	4298      	cmp	r0, r3
 800916e:	f0c0 80bf 	bcc.w	80092f0 <ip4_reass+0x310>
 8009172:	4594      	cmp	ip, r2
 8009174:	f200 80bc 	bhi.w	80092f0 <ip4_reass+0x310>
        if (iprh_prev->end != iprh->start) {
 8009178:	4298      	cmp	r0, r3
        iprh_prev->next_pbuf = new_p;
 800917a:	f8c5 8000 	str.w	r8, [r5]
      if (iprh_prev->end != iprh->start) {
 800917e:	f040 80f9 	bne.w	8009374 <ip4_reass+0x394>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8009182:	f1bb 0f00 	cmp.w	fp, #0
 8009186:	d004      	beq.n	8009192 <ip4_reass+0x1b2>
 8009188:	7fa3      	ldrb	r3, [r4, #30]
 800918a:	f013 0301 	ands.w	r3, r3, #1
 800918e:	f000 80a0 	beq.w	80092d2 <ip4_reass+0x2f2>
    if (valid) {
 8009192:	f1ba 0f00 	cmp.w	sl, #0
 8009196:	d175      	bne.n	8009284 <ip4_reass+0x2a4>
          q = iprh->next_pbuf;
 8009198:	f04f 0a00 	mov.w	sl, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800919c:	4b5e      	ldr	r3, [pc, #376]	; (8009318 <ip4_reass+0x338>)
 800919e:	8898      	ldrh	r0, [r3, #4]
 80091a0:	4698      	mov	r8, r3
 80091a2:	4481      	add	r9, r0
 80091a4:	f8a3 9004 	strh.w	r9, [r3, #4]
  if (is_last) {
 80091a8:	f1bb 0f00 	cmp.w	fp, #0
 80091ac:	d106      	bne.n	80091bc <ip4_reass+0x1dc>
    u16_t datagram_len = (u16_t)(offset + len);
 80091ae:	9b01      	ldr	r3, [sp, #4]
 80091b0:	441f      	add	r7, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80091b2:	7fa3      	ldrb	r3, [r4, #30]
 80091b4:	f043 0301 	orr.w	r3, r3, #1
    ipr->datagram_len = datagram_len;
 80091b8:	83a7      	strh	r7, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80091ba:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80091bc:	f1ba 0f01 	cmp.w	sl, #1
 80091c0:	d1bb      	bne.n	800913a <ip4_reass+0x15a>
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80091c2:	6863      	ldr	r3, [r4, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80091c4:	f104 011c 	add.w	r1, r4, #28
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80091c8:	8ba0      	ldrh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80091ca:	685e      	ldr	r6, [r3, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80091cc:	f104 0308 	add.w	r3, r4, #8
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80091d0:	3014      	adds	r0, #20
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80091d2:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80091d4:	4632      	mov	r2, r6
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80091d6:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80091d8:	f853 7b04 	ldr.w	r7, [r3], #4
 80091dc:	428b      	cmp	r3, r1
 80091de:	f842 7b04 	str.w	r7, [r2], #4
 80091e2:	d1f9      	bne.n	80091d8 <ip4_reass+0x1f8>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80091e4:	f000 f9ba 	bl	800955c <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 80091e8:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80091ea:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80091ec:	71b3      	strb	r3, [r6, #6]
 80091ee:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80091f0:	72b3      	strb	r3, [r6, #10]
 80091f2:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 80091f4:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 80091f6:	2d00      	cmp	r5, #0
 80091f8:	d16d      	bne.n	80092d6 <ip4_reass+0x2f6>
    if (ipr == reassdatagrams) {
 80091fa:	f8d8 3000 	ldr.w	r3, [r8]
        if (ipr_prev->next == ipr) {
 80091fe:	42a3      	cmp	r3, r4
 8009200:	d002      	beq.n	8009208 <ip4_reass+0x228>
 8009202:	461d      	mov	r5, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8009204:	2b00      	cmp	r3, #0
 8009206:	d171      	bne.n	80092ec <ip4_reass+0x30c>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8009208:	4620      	mov	r0, r4
 800920a:	4629      	mov	r1, r5
 800920c:	f7ff fdd0 	bl	8008db0 <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 8009210:	4630      	mov	r0, r6
 8009212:	f001 f845 	bl	800a2a0 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8009216:	f8b8 3004 	ldrh.w	r3, [r8, #4]
    clen = pbuf_clen(p);
 800921a:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800921c:	4283      	cmp	r3, r0
 800921e:	d206      	bcs.n	800922e <ip4_reass+0x24e>
 8009220:	4b3e      	ldr	r3, [pc, #248]	; (800931c <ip4_reass+0x33c>)
 8009222:	f240 229b 	movw	r2, #667	; 0x29b
 8009226:	4940      	ldr	r1, [pc, #256]	; (8009328 <ip4_reass+0x348>)
 8009228:	483e      	ldr	r0, [pc, #248]	; (8009324 <ip4_reass+0x344>)
 800922a:	f005 f8af 	bl	800e38c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800922e:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8009232:	1b04      	subs	r4, r0, r4
 8009234:	f8a8 4004 	strh.w	r4, [r8, #4]
}
 8009238:	4630      	mov	r0, r6
 800923a:	b003      	add	sp, #12
 800923c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (iprh->end > iprh_tmp->start) {
 8009240:	4594      	cmp	ip, r2
 8009242:	d855      	bhi.n	80092f0 <ip4_reass+0x310>
      ipr->p = new_p;
 8009244:	f8c4 8004 	str.w	r8, [r4, #4]
 8009248:	e79b      	b.n	8009182 <ip4_reass+0x1a2>
    } else if (iprh->start == iprh_tmp->start) {
 800924a:	d051      	beq.n	80092f0 <ip4_reass+0x310>
    } else if (iprh->start < iprh_tmp->end) {
 800924c:	88d9      	ldrh	r1, [r3, #6]
 800924e:	4281      	cmp	r1, r0
 8009250:	d84e      	bhi.n	80092f0 <ip4_reass+0x310>
      if (iprh_prev != NULL) {
 8009252:	b125      	cbz	r5, 800925e <ip4_reass+0x27e>
        if (iprh_prev->end != iprh_tmp->start) {
 8009254:	88e9      	ldrh	r1, [r5, #6]
          valid = 0;
 8009256:	4291      	cmp	r1, r2
 8009258:	bf18      	it	ne
 800925a:	f04f 0a00 	movne.w	sl, #0
    q = iprh_tmp->next_pbuf;
 800925e:	6819      	ldr	r1, [r3, #0]
 8009260:	461d      	mov	r5, r3
 8009262:	e74d      	b.n	8009100 <ip4_reass+0x120>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8009264:	88eb      	ldrh	r3, [r5, #6]
 8009266:	4283      	cmp	r3, r0
 8009268:	d906      	bls.n	8009278 <ip4_reass+0x298>
 800926a:	4b2c      	ldr	r3, [pc, #176]	; (800931c <ip4_reass+0x33c>)
 800926c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8009270:	492e      	ldr	r1, [pc, #184]	; (800932c <ip4_reass+0x34c>)
 8009272:	482c      	ldr	r0, [pc, #176]	; (8009324 <ip4_reass+0x344>)
 8009274:	f005 f88a 	bl	800e38c <iprintf>
      if (iprh_prev->end != iprh->start) {
 8009278:	88ea      	ldrh	r2, [r5, #6]
      iprh_prev->next_pbuf = new_p;
 800927a:	f8c5 8000 	str.w	r8, [r5]
      if (iprh_prev->end != iprh->start) {
 800927e:	88b3      	ldrh	r3, [r6, #4]
 8009280:	429a      	cmp	r2, r3
 8009282:	e77c      	b.n	800917e <ip4_reass+0x19e>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8009284:	6863      	ldr	r3, [r4, #4]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d086      	beq.n	8009198 <ip4_reass+0x1b8>
 800928a:	6859      	ldr	r1, [r3, #4]
 800928c:	888b      	ldrh	r3, [r1, #4]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d182      	bne.n	8009198 <ip4_reass+0x1b8>
        q = iprh->next_pbuf;
 8009292:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 8009294:	b9a3      	cbnz	r3, 80092c0 <ip4_reass+0x2e0>
          LWIP_ASSERT("sanity check",
 8009296:	42b1      	cmp	r1, r6
 8009298:	d106      	bne.n	80092a8 <ip4_reass+0x2c8>
 800929a:	4b20      	ldr	r3, [pc, #128]	; (800931c <ip4_reass+0x33c>)
 800929c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80092a0:	4923      	ldr	r1, [pc, #140]	; (8009330 <ip4_reass+0x350>)
 80092a2:	4820      	ldr	r0, [pc, #128]	; (8009324 <ip4_reass+0x344>)
 80092a4:	f005 f872 	bl	800e38c <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80092a8:	6833      	ldr	r3, [r6, #0]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	f43f af76 	beq.w	800919c <ip4_reass+0x1bc>
 80092b0:	4b1a      	ldr	r3, [pc, #104]	; (800931c <ip4_reass+0x33c>)
 80092b2:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80092b6:	491f      	ldr	r1, [pc, #124]	; (8009334 <ip4_reass+0x354>)
 80092b8:	481a      	ldr	r0, [pc, #104]	; (8009324 <ip4_reass+0x344>)
 80092ba:	f005 f867 	bl	800e38c <iprintf>
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80092be:	e76d      	b.n	800919c <ip4_reass+0x1bc>
          iprh = (struct ip_reass_helper *)q->payload;
 80092c0:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 80092c2:	88f0      	ldrh	r0, [r6, #6]
 80092c4:	8893      	ldrh	r3, [r2, #4]
 80092c6:	4298      	cmp	r0, r3
 80092c8:	f47f af66 	bne.w	8009198 <ip4_reass+0x1b8>
          q = iprh->next_pbuf;
 80092cc:	6813      	ldr	r3, [r2, #0]
 80092ce:	4616      	mov	r6, r2
 80092d0:	e7e0      	b.n	8009294 <ip4_reass+0x2b4>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80092d2:	469a      	mov	sl, r3
 80092d4:	e762      	b.n	800919c <ip4_reass+0x1bc>
      iprh = (struct ip_reass_helper *)r->payload;
 80092d6:	686f      	ldr	r7, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 80092d8:	2114      	movs	r1, #20
 80092da:	4628      	mov	r0, r5
 80092dc:	f000 fe70 	bl	8009fc0 <pbuf_remove_header>
      pbuf_cat(p, r);
 80092e0:	4629      	mov	r1, r5
 80092e2:	4630      	mov	r0, r6
 80092e4:	f001 f800 	bl	800a2e8 <pbuf_cat>
      r = iprh->next_pbuf;
 80092e8:	683d      	ldr	r5, [r7, #0]
 80092ea:	e784      	b.n	80091f6 <ip4_reass+0x216>
        if (ipr_prev->next == ipr) {
 80092ec:	682b      	ldr	r3, [r5, #0]
 80092ee:	e786      	b.n	80091fe <ip4_reass+0x21e>
  if (ipr->p == NULL) {
 80092f0:	6863      	ldr	r3, [r4, #4]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	f47f af1e 	bne.w	8009134 <ip4_reass+0x154>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80092f8:	4b07      	ldr	r3, [pc, #28]	; (8009318 <ip4_reass+0x338>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	42a3      	cmp	r3, r4
 80092fe:	d006      	beq.n	800930e <ip4_reass+0x32e>
 8009300:	4b06      	ldr	r3, [pc, #24]	; (800931c <ip4_reass+0x33c>)
 8009302:	f240 22ab 	movw	r2, #683	; 0x2ab
 8009306:	490c      	ldr	r1, [pc, #48]	; (8009338 <ip4_reass+0x358>)
 8009308:	4806      	ldr	r0, [pc, #24]	; (8009324 <ip4_reass+0x344>)
 800930a:	f005 f83f 	bl	800e38c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800930e:	2100      	movs	r1, #0
 8009310:	4620      	mov	r0, r4
 8009312:	f7ff fd4d 	bl	8008db0 <ip_reass_dequeue_datagram>
 8009316:	e70d      	b.n	8009134 <ip4_reass+0x154>
 8009318:	200068fc 	.word	0x200068fc
 800931c:	08014651 	.word	0x08014651
 8009320:	08014761 	.word	0x08014761
 8009324:	0801342c 	.word	0x0801342c
 8009328:	080147c7 	.word	0x080147c7
 800932c:	08014743 	.word	0x08014743
 8009330:	08014798 	.word	0x08014798
 8009334:	080147a5 	.word	0x080147a5
 8009338:	080147e2 	.word	0x080147e2
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800933c:	88e8      	ldrh	r0, [r5, #6]
 800933e:	f000 f90d 	bl	800955c <lwip_htons>
 8009342:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8009346:	2800      	cmp	r0, #0
 8009348:	f47f ae9a 	bne.w	8009080 <ip4_reass+0xa0>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800934c:	89e0      	ldrh	r0, [r4, #14]
 800934e:	f000 f905 	bl	800955c <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8009352:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8009356:	2800      	cmp	r0, #0
 8009358:	f43f ae92 	beq.w	8009080 <ip4_reass+0xa0>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800935c:	462b      	mov	r3, r5
 800935e:	f104 0208 	add.w	r2, r4, #8
 8009362:	f105 0114 	add.w	r1, r5, #20
 8009366:	f853 0b04 	ldr.w	r0, [r3], #4
 800936a:	428b      	cmp	r3, r1
 800936c:	f842 0b04 	str.w	r0, [r2], #4
 8009370:	d1f9      	bne.n	8009366 <ip4_reass+0x386>
 8009372:	e685      	b.n	8009080 <ip4_reass+0xa0>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8009374:	f1bb 0f00 	cmp.w	fp, #0
 8009378:	f43f af0e 	beq.w	8009198 <ip4_reass+0x1b8>
 800937c:	f04f 0a00 	mov.w	sl, #0
 8009380:	e702      	b.n	8009188 <ip4_reass+0x1a8>
 8009382:	bf00      	nop

08009384 <ip4_frag>:
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8009384:	8d0b      	ldrh	r3, [r1, #40]	; 0x28
{
 8009386:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800938a:	ed2d 8b02 	vpush	{d8}
 800938e:	ee08 2a10 	vmov	s16, r2
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8009392:	f1b3 0214 	subs.w	r2, r3, #20
{
 8009396:	b08b      	sub	sp, #44	; 0x2c
 8009398:	4605      	mov	r5, r0
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800939a:	bf48      	it	mi
 800939c:	f1a3 020d 	submi.w	r2, r3, #13
{
 80093a0:	468a      	mov	sl, r1
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80093a2:	f3c2 03cf 	ubfx	r3, r2, #3, #16
 80093a6:	9305      	str	r3, [sp, #20]
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80093a8:	6843      	ldr	r3, [r0, #4]
 80093aa:	9302      	str	r3, [sp, #8]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	f003 030f 	and.w	r3, r3, #15
 80093b2:	2b05      	cmp	r3, #5
 80093b4:	ea4f 0783 	mov.w	r7, r3, lsl #2
 80093b8:	d109      	bne.n	80093ce <ip4_frag+0x4a>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80093ba:	8943      	ldrh	r3, [r0, #10]
 80093bc:	2b13      	cmp	r3, #19
 80093be:	d809      	bhi.n	80093d4 <ip4_frag+0x50>
 80093c0:	4b60      	ldr	r3, [pc, #384]	; (8009544 <ip4_frag+0x1c0>)
 80093c2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80093c6:	4960      	ldr	r1, [pc, #384]	; (8009548 <ip4_frag+0x1c4>)
 80093c8:	4860      	ldr	r0, [pc, #384]	; (800954c <ip4_frag+0x1c8>)
 80093ca:	f004 ffdf 	bl	800e38c <iprintf>
    return ERR_VAL;
 80093ce:	f06f 0005 	mvn.w	r0, #5
 80093d2:	e013      	b.n	80093fc <ip4_frag+0x78>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80093d4:	9b02      	ldr	r3, [sp, #8]
  u16_t newpbuflen = 0;
 80093d6:	2600      	movs	r6, #0
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80093d8:	88d8      	ldrh	r0, [r3, #6]
 80093da:	f000 f8bf 	bl	800955c <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 80093de:	f3c0 030c 	ubfx	r3, r0, #0, #13
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 80093e2:	892c      	ldrh	r4, [r5, #8]
  ofo = tmp & IP_OFFMASK;
 80093e4:	9303      	str	r3, [sp, #12]
  mf_set = tmp & IP_MF;
 80093e6:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 80093ea:	3c14      	subs	r4, #20
 80093ec:	9307      	str	r3, [sp, #28]

  while (left) {
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80093ee:	9b05      	ldr	r3, [sp, #20]
  left = (u16_t)(p->tot_len - IP_HLEN);
 80093f0:	b2a4      	uxth	r4, r4
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80093f2:	00db      	lsls	r3, r3, #3
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	9306      	str	r3, [sp, #24]
  while (left) {
 80093f8:	b92c      	cbnz	r4, 8009406 <ip4_frag+0x82>
    pbuf_free(rambuf);
    left = (u16_t)(left - fragsize);
    ofo = (u16_t)(ofo + nfb);
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80093fa:	4620      	mov	r0, r4
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 80093fc:	b00b      	add	sp, #44	; 0x2c
 80093fe:	ecbd 8b02 	vpop	{d8}
 8009402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8009406:	9b06      	ldr	r3, [sp, #24]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8009408:	f44f 7220 	mov.w	r2, #640	; 0x280
 800940c:	2114      	movs	r1, #20
 800940e:	200e      	movs	r0, #14
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8009410:	42a3      	cmp	r3, r4
 8009412:	bf28      	it	cs
 8009414:	4623      	movcs	r3, r4
 8009416:	9304      	str	r3, [sp, #16]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8009418:	f000 fe6e 	bl	800a0f8 <pbuf_alloc>
    if (rambuf == NULL) {
 800941c:	4680      	mov	r8, r0
 800941e:	2800      	cmp	r0, #0
 8009420:	d036      	beq.n	8009490 <ip4_frag+0x10c>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8009422:	8943      	ldrh	r3, [r0, #10]
 8009424:	2b13      	cmp	r3, #19
 8009426:	d806      	bhi.n	8009436 <ip4_frag+0xb2>
 8009428:	4b46      	ldr	r3, [pc, #280]	; (8009544 <ip4_frag+0x1c0>)
 800942a:	f44f 7249 	mov.w	r2, #804	; 0x324
 800942e:	4948      	ldr	r1, [pc, #288]	; (8009550 <ip4_frag+0x1cc>)
 8009430:	4846      	ldr	r0, [pc, #280]	; (800954c <ip4_frag+0x1c8>)
 8009432:	f004 ffab 	bl	800e38c <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8009436:	9b02      	ldr	r3, [sp, #8]
 8009438:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800943c:	4619      	mov	r1, r3
 800943e:	3114      	adds	r1, #20
 8009440:	f853 0b04 	ldr.w	r0, [r3], #4
 8009444:	428b      	cmp	r3, r1
 8009446:	f842 0b04 	str.w	r0, [r2], #4
 800944a:	d1f9      	bne.n	8009440 <ip4_frag+0xbc>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800944c:	f8d8 b004 	ldr.w	fp, [r8, #4]
    left_to_copy = fragsize;
 8009450:	f8dd 9010 	ldr.w	r9, [sp, #16]
    while (left_to_copy) {
 8009454:	f1b9 0f00 	cmp.w	r9, #0
 8009458:	d041      	beq.n	80094de <ip4_frag+0x15a>
      u16_t plen = (u16_t)(p->len - poff);
 800945a:	896b      	ldrh	r3, [r5, #10]
 800945c:	1bde      	subs	r6, r3, r7
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800945e:	42bb      	cmp	r3, r7
      u16_t plen = (u16_t)(p->len - poff);
 8009460:	b2b6      	uxth	r6, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8009462:	d206      	bcs.n	8009472 <ip4_frag+0xee>
 8009464:	4b37      	ldr	r3, [pc, #220]	; (8009544 <ip4_frag+0x1c0>)
 8009466:	f240 322d 	movw	r2, #813	; 0x32d
 800946a:	493a      	ldr	r1, [pc, #232]	; (8009554 <ip4_frag+0x1d0>)
 800946c:	4837      	ldr	r0, [pc, #220]	; (800954c <ip4_frag+0x1c8>)
 800946e:	f004 ff8d 	bl	800e38c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8009472:	454e      	cmp	r6, r9
 8009474:	bf28      	it	cs
 8009476:	464e      	movcs	r6, r9
      if (!newpbuflen) {
 8009478:	b916      	cbnz	r6, 8009480 <ip4_frag+0xfc>
        p = p->next;
 800947a:	682d      	ldr	r5, [r5, #0]
        poff = 0;
 800947c:	2700      	movs	r7, #0
 800947e:	e7e9      	b.n	8009454 <ip4_frag+0xd0>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8009480:	2005      	movs	r0, #5
 8009482:	f000 fb8b 	bl	8009b9c <memp_malloc>
      if (pcr == NULL) {
 8009486:	4603      	mov	r3, r0
 8009488:	b928      	cbnz	r0, 8009496 <ip4_frag+0x112>
        pbuf_free(rambuf);
 800948a:	4640      	mov	r0, r8
 800948c:	f000 fdcc 	bl	800a028 <pbuf_free>
  return ERR_MEM;
 8009490:	f04f 30ff 	mov.w	r0, #4294967295
 8009494:	e7b2      	b.n	80093fc <ip4_frag+0x78>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8009496:	9601      	str	r6, [sp, #4]
 8009498:	4631      	mov	r1, r6
 800949a:	686a      	ldr	r2, [r5, #4]
 800949c:	9008      	str	r0, [sp, #32]
 800949e:	2000      	movs	r0, #0
 80094a0:	443a      	add	r2, r7
 80094a2:	9200      	str	r2, [sp, #0]
 80094a4:	2241      	movs	r2, #65	; 0x41
 80094a6:	f000 fd6d 	bl	8009f84 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 80094aa:	9b08      	ldr	r3, [sp, #32]
 80094ac:	b918      	cbnz	r0, 80094b6 <ip4_frag+0x132>
        ip_frag_free_pbuf_custom_ref(pcr);
 80094ae:	4618      	mov	r0, r3
 80094b0:	f7ff fd50 	bl	8008f54 <ip_frag_free_pbuf_custom_ref>
 80094b4:	e7e9      	b.n	800948a <ip4_frag+0x106>
 80094b6:	e9cd 0308 	strd	r0, r3, [sp, #32]
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80094ba:	eba9 0906 	sub.w	r9, r9, r6
      pbuf_ref(p);
 80094be:	4628      	mov	r0, r5
 80094c0:	f000 fef6 	bl	800a2b0 <pbuf_ref>
      pcr->original = p;
 80094c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80094c6:	4a24      	ldr	r2, [pc, #144]	; (8009558 <ip4_frag+0x1d4>)
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80094c8:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 80094cc:	9908      	ldr	r1, [sp, #32]
 80094ce:	4640      	mov	r0, r8
      pcr->original = p;
 80094d0:	615d      	str	r5, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80094d2:	611a      	str	r2, [r3, #16]
      pbuf_cat(rambuf, newpbuf);
 80094d4:	f000 ff08 	bl	800a2e8 <pbuf_cat>
      if (left_to_copy) {
 80094d8:	f1b9 0f00 	cmp.w	r9, #0
 80094dc:	d1cd      	bne.n	800947a <ip4_frag+0xf6>
    tmp = (IP_OFFMASK & (ofo));
 80094de:	9b03      	ldr	r3, [sp, #12]
    poff = (u16_t)(poff + newpbuflen);
 80094e0:	4437      	add	r7, r6
    tmp = (IP_OFFMASK & (ofo));
 80094e2:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 80094e6:	f8ba 3028 	ldrh.w	r3, [sl, #40]	; 0x28
    poff = (u16_t)(poff + newpbuflen);
 80094ea:	b2bf      	uxth	r7, r7
    last = (left <= netif->mtu - IP_HLEN);
 80094ec:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 80094ee:	42a3      	cmp	r3, r4
 80094f0:	dd01      	ble.n	80094f6 <ip4_frag+0x172>
 80094f2:	9b07      	ldr	r3, [sp, #28]
 80094f4:	b10b      	cbz	r3, 80094fa <ip4_frag+0x176>
      tmp = tmp | IP_MF;
 80094f6:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80094fa:	f000 f82f 	bl	800955c <lwip_htons>
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80094fe:	9b04      	ldr	r3, [sp, #16]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8009500:	f8ab 0006 	strh.w	r0, [fp, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8009504:	f103 0014 	add.w	r0, r3, #20
 8009508:	b280      	uxth	r0, r0
 800950a:	f000 f827 	bl	800955c <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 800950e:	2300      	movs	r3, #0
    netif->output(netif, rambuf, dest);
 8009510:	ee18 2a10 	vmov	r2, s16
 8009514:	4641      	mov	r1, r8
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8009516:	f8ab 0002 	strh.w	r0, [fp, #2]
    netif->output(netif, rambuf, dest);
 800951a:	4650      	mov	r0, sl
    IPH_CHKSUM_SET(iphdr, 0);
 800951c:	f88b 300a 	strb.w	r3, [fp, #10]
 8009520:	f88b 300b 	strb.w	r3, [fp, #11]
    netif->output(netif, rambuf, dest);
 8009524:	f8da 3014 	ldr.w	r3, [sl, #20]
 8009528:	4798      	blx	r3
    pbuf_free(rambuf);
 800952a:	4640      	mov	r0, r8
 800952c:	f000 fd7c 	bl	800a028 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8009530:	9b04      	ldr	r3, [sp, #16]
    ofo = (u16_t)(ofo + nfb);
 8009532:	9a05      	ldr	r2, [sp, #20]
    left = (u16_t)(left - fragsize);
 8009534:	1ae4      	subs	r4, r4, r3
    ofo = (u16_t)(ofo + nfb);
 8009536:	9b03      	ldr	r3, [sp, #12]
 8009538:	4413      	add	r3, r2
    left = (u16_t)(left - fragsize);
 800953a:	b2a4      	uxth	r4, r4
    ofo = (u16_t)(ofo + nfb);
 800953c:	b29b      	uxth	r3, r3
 800953e:	9303      	str	r3, [sp, #12]
 8009540:	e75a      	b.n	80093f8 <ip4_frag+0x74>
 8009542:	bf00      	nop
 8009544:	08014651 	.word	0x08014651
 8009548:	08014802 	.word	0x08014802
 800954c:	0801342c 	.word	0x0801342c
 8009550:	0801481d 	.word	0x0801481d
 8009554:	0801483d 	.word	0x0801483d
 8009558:	08008f81 	.word	0x08008f81

0800955c <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 800955c:	ba40      	rev16	r0, r0
}
 800955e:	b280      	uxth	r0, r0
 8009560:	4770      	bx	lr

08009562 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 8009562:	ba00      	rev	r0, r0
 8009564:	4770      	bx	lr

08009566 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8009566:	b513      	push	{r0, r1, r4, lr}
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 8009568:	2300      	movs	r3, #0
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800956a:	f010 0401 	ands.w	r4, r0, #1
  u16_t t = 0;
 800956e:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (odd && len > 0) {
 8009572:	d007      	beq.n	8009584 <lwip_standard_chksum+0x1e>
 8009574:	4299      	cmp	r1, r3
    ((u8_t *)&t)[1] = *pb++;
 8009576:	bfc2      	ittt	gt
 8009578:	f810 3b01 	ldrbgt.w	r3, [r0], #1
    len--;
 800957c:	f101 31ff 	addgt.w	r1, r1, #4294967295
    ((u8_t *)&t)[1] = *pb++;
 8009580:	f88d 3007 	strbgt.w	r3, [sp, #7]
  u32_t sum = 0;
 8009584:	2200      	movs	r2, #0
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 8009586:	2901      	cmp	r1, #1
 8009588:	dc15      	bgt.n	80095b6 <lwip_standard_chksum+0x50>
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800958a:	bf04      	itt	eq
 800958c:	7803      	ldrbeq	r3, [r0, #0]
 800958e:	f88d 3006 	strbeq.w	r3, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 8009592:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009596:	4413      	add	r3, r2

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8009598:	b298      	uxth	r0, r3
 800959a:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 800959e:	b298      	uxth	r0, r3
 80095a0:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 80095a4:	b124      	cbz	r4, 80095b0 <lwip_standard_chksum+0x4a>
    sum = SWAP_BYTES_IN_WORD(sum);
 80095a6:	0203      	lsls	r3, r0, #8
 80095a8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 80095b0:	b280      	uxth	r0, r0
 80095b2:	b002      	add	sp, #8
 80095b4:	bd10      	pop	{r4, pc}
    sum += *ps++;
 80095b6:	f830 3b02 	ldrh.w	r3, [r0], #2
    len -= 2;
 80095ba:	3902      	subs	r1, #2
    sum += *ps++;
 80095bc:	441a      	add	r2, r3
    len -= 2;
 80095be:	e7e2      	b.n	8009586 <lwip_standard_chksum+0x20>

080095c0 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 80095c0:	b570      	push	{r4, r5, r6, lr}
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 80095c2:	2600      	movs	r6, #0
{
 80095c4:	4605      	mov	r5, r0

  acc = 0;
 80095c6:	4634      	mov	r4, r6
  for (q = p; q != NULL; q = q->next) {
 80095c8:	b945      	cbnz	r5, 80095dc <inet_chksum_pbuf+0x1c>
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
    }
  }

  if (swapped) {
 80095ca:	b126      	cbz	r6, 80095d6 <inet_chksum_pbuf+0x16>
    acc = SWAP_BYTES_IN_WORD(acc);
 80095cc:	0223      	lsls	r3, r4, #8
 80095ce:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	431c      	orrs	r4, r3
  }
  return (u16_t)~(acc & 0xffffUL);
 80095d6:	43e0      	mvns	r0, r4
}
 80095d8:	b280      	uxth	r0, r0
 80095da:	bd70      	pop	{r4, r5, r6, pc}
    acc += LWIP_CHKSUM(q->payload, q->len);
 80095dc:	8969      	ldrh	r1, [r5, #10]
 80095de:	6868      	ldr	r0, [r5, #4]
 80095e0:	f7ff ffc1 	bl	8009566 <lwip_standard_chksum>
    if (q->len % 2 != 0) {
 80095e4:	896b      	ldrh	r3, [r5, #10]
    acc += LWIP_CHKSUM(q->payload, q->len);
 80095e6:	4404      	add	r4, r0
    if (q->len % 2 != 0) {
 80095e8:	07db      	lsls	r3, r3, #31
    acc = FOLD_U32T(acc);
 80095ea:	b2a0      	uxth	r0, r4
 80095ec:	eb00 4414 	add.w	r4, r0, r4, lsr #16
    if (q->len % 2 != 0) {
 80095f0:	d506      	bpl.n	8009600 <inet_chksum_pbuf+0x40>
      acc = SWAP_BYTES_IN_WORD(acc);
 80095f2:	0223      	lsls	r3, r4, #8
 80095f4:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80095f8:	f086 0601 	eor.w	r6, r6, #1
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	431c      	orrs	r4, r3
  for (q = p; q != NULL; q = q->next) {
 8009600:	682d      	ldr	r5, [r5, #0]
 8009602:	e7e1      	b.n	80095c8 <inet_chksum_pbuf+0x8>

08009604 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009604:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8009606:	f004 fe2f 	bl	800e268 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800960a:	f000 f80d 	bl	8009628 <mem_init>
  memp_init();
 800960e:	f000 fab7 	bl	8009b80 <memp_init>
  pbuf_init();
  netif_init();
 8009612:	f000 fb4d 	bl	8009cb0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009616:	f004 fa41 	bl	800da9c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800961a:	f000 ffe7 	bl	800a5ec <tcp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 800961e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8009622:	f004 b9e9 	b.w	800d9f8 <sys_timeouts_init>
	...

08009628 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009628:	4b12      	ldr	r3, [pc, #72]	; (8009674 <mem_init+0x4c>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 800962a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
  mem->prev = 0;
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
  ram_end->used = 1;
  ram_end->next = MEM_SIZE_ALIGNED;
 800962e:	f04f 2128 	mov.w	r1, #671098880	; 0x28002800
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009632:	4811      	ldr	r0, [pc, #68]	; (8009678 <mem_init+0x50>)
 8009634:	f023 0303 	bic.w	r3, r3, #3
  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8009638:	300c      	adds	r0, #12
{
 800963a:	b510      	push	{r4, lr}
  mem->next = MEM_SIZE_ALIGNED;
 800963c:	601a      	str	r2, [r3, #0]
  mem->used = 0;
 800963e:	2200      	movs	r2, #0
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009640:	f840 3c0c 	str.w	r3, [r0, #-12]
  mem->used = 0;
 8009644:	711a      	strb	r2, [r3, #4]
  return (struct mem *)(void *)&ram[ptr];
 8009646:	f503 5220 	add.w	r2, r3, #10240	; 0x2800
  lfree = (struct mem *)(void *)ram;
 800964a:	f840 3c04 	str.w	r3, [r0, #-4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800964e:	6011      	str	r1, [r2, #0]
  ram_end->used = 1;
 8009650:	2101      	movs	r1, #1
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8009652:	f840 2c08 	str.w	r2, [r0, #-8]
  ram_end->used = 1;
 8009656:	7111      	strb	r1, [r2, #4]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8009658:	f004 fe12 	bl	800e280 <sys_mutex_new>
 800965c:	b140      	cbz	r0, 8009670 <mem_init+0x48>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800965e:	4b07      	ldr	r3, [pc, #28]	; (800967c <mem_init+0x54>)
 8009660:	f240 221f 	movw	r2, #543	; 0x21f
 8009664:	4906      	ldr	r1, [pc, #24]	; (8009680 <mem_init+0x58>)
 8009666:	4807      	ldr	r0, [pc, #28]	; (8009684 <mem_init+0x5c>)
  }
}
 8009668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800966c:	f004 be8e 	b.w	800e38c <iprintf>
}
 8009670:	bd10      	pop	{r4, pc}
 8009672:	bf00      	nop
 8009674:	2000a83b 	.word	0x2000a83b
 8009678:	20006904 	.word	0x20006904
 800967c:	0801484c 	.word	0x0801484c
 8009680:	080148b2 	.word	0x080148b2
 8009684:	0801342c 	.word	0x0801342c

08009688 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8009688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800968a:	4604      	mov	r4, r0
 800968c:	2800      	cmp	r0, #0
 800968e:	f000 80b8 	beq.w	8009802 <mem_free+0x17a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8009692:	0783      	lsls	r3, r0, #30
 8009694:	d00c      	beq.n	80096b0 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8009696:	4b5b      	ldr	r3, [pc, #364]	; (8009804 <mem_free+0x17c>)
 8009698:	f240 2273 	movw	r2, #627	; 0x273
 800969c:	495a      	ldr	r1, [pc, #360]	; (8009808 <mem_free+0x180>)
  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800969e:	485b      	ldr	r0, [pc, #364]	; (800980c <mem_free+0x184>)
 80096a0:	f004 fe74 	bl	800e38c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80096a4:	f004 fe12 	bl	800e2cc <sys_arch_protect>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80096a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MEM_STATS_INC_LOCKED(illegal);
 80096ac:	f004 be1a 	b.w	800e2e4 <sys_arch_unprotect>
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80096b0:	4f57      	ldr	r7, [pc, #348]	; (8009810 <mem_free+0x188>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80096b2:	f1a0 0608 	sub.w	r6, r0, #8
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	463d      	mov	r5, r7
 80096ba:	42b3      	cmp	r3, r6
 80096bc:	d804      	bhi.n	80096c8 <mem_free+0x40>
 80096be:	f100 030c 	add.w	r3, r0, #12
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d204      	bcs.n	80096d2 <mem_free+0x4a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80096c8:	4b4e      	ldr	r3, [pc, #312]	; (8009804 <mem_free+0x17c>)
 80096ca:	f240 227f 	movw	r2, #639	; 0x27f
 80096ce:	4951      	ldr	r1, [pc, #324]	; (8009814 <mem_free+0x18c>)
 80096d0:	e7e5      	b.n	800969e <mem_free+0x16>
  LWIP_MEM_FREE_PROTECT();
 80096d2:	f107 000c 	add.w	r0, r7, #12
 80096d6:	f004 fde1 	bl	800e29c <sys_mutex_lock>
  if (!mem->used) {
 80096da:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 80096de:	b95b      	cbnz	r3, 80096f8 <mem_free+0x70>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80096e0:	4b48      	ldr	r3, [pc, #288]	; (8009804 <mem_free+0x17c>)
 80096e2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80096e6:	494c      	ldr	r1, [pc, #304]	; (8009818 <mem_free+0x190>)
 80096e8:	4848      	ldr	r0, [pc, #288]	; (800980c <mem_free+0x184>)
 80096ea:	f004 fe4f 	bl	800e38c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80096ee:	f107 000c 	add.w	r0, r7, #12
    LWIP_MEM_FREE_UNPROTECT();
 80096f2:	f004 fdd8 	bl	800e2a6 <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 80096f6:	e7d5      	b.n	80096a4 <mem_free+0x1c>
  nmem = ptr_to_mem(mem->next);
 80096f8:	f834 2c08 	ldrh.w	r2, [r4, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80096fc:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8009700:	d813      	bhi.n	800972a <mem_free+0xa2>
  pmem = ptr_to_mem(mem->prev);
 8009702:	f834 0c06 	ldrh.w	r0, [r4, #-6]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009706:	f5b0 5f20 	cmp.w	r0, #10240	; 0x2800
 800970a:	d80e      	bhi.n	800972a <mem_free+0xa2>
  return (mem_size_t)((u8_t *)mem - ram);
 800970c:	6839      	ldr	r1, [r7, #0]
 800970e:	1a73      	subs	r3, r6, r1
 8009710:	b29b      	uxth	r3, r3
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009712:	4283      	cmp	r3, r0
 8009714:	d002      	beq.n	800971c <mem_free+0x94>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009716:	5a08      	ldrh	r0, [r1, r0]
 8009718:	4298      	cmp	r0, r3
 800971a:	d106      	bne.n	800972a <mem_free+0xa2>
  return (struct mem *)(void *)&ram[ptr];
 800971c:	440a      	add	r2, r1
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800971e:	6868      	ldr	r0, [r5, #4]
 8009720:	4282      	cmp	r2, r0
 8009722:	d00b      	beq.n	800973c <mem_free+0xb4>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009724:	8852      	ldrh	r2, [r2, #2]
 8009726:	429a      	cmp	r2, r3
 8009728:	d008      	beq.n	800973c <mem_free+0xb4>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800972a:	4b36      	ldr	r3, [pc, #216]	; (8009804 <mem_free+0x17c>)
 800972c:	f240 2295 	movw	r2, #661	; 0x295
 8009730:	493a      	ldr	r1, [pc, #232]	; (800981c <mem_free+0x194>)
 8009732:	4836      	ldr	r0, [pc, #216]	; (800980c <mem_free+0x184>)
 8009734:	f004 fe2a 	bl	800e38c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8009738:	4839      	ldr	r0, [pc, #228]	; (8009820 <mem_free+0x198>)
 800973a:	e7da      	b.n	80096f2 <mem_free+0x6a>
  mem->used = 0;
 800973c:	2300      	movs	r3, #0
 800973e:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 8009742:	68ab      	ldr	r3, [r5, #8]
 8009744:	42b3      	cmp	r3, r6
    lfree = mem;
 8009746:	bf88      	it	hi
 8009748:	60ae      	strhi	r6, [r5, #8]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800974a:	428e      	cmp	r6, r1
 800974c:	d206      	bcs.n	800975c <mem_free+0xd4>
 800974e:	4b2d      	ldr	r3, [pc, #180]	; (8009804 <mem_free+0x17c>)
 8009750:	f240 12df 	movw	r2, #479	; 0x1df
 8009754:	4933      	ldr	r1, [pc, #204]	; (8009824 <mem_free+0x19c>)
 8009756:	482d      	ldr	r0, [pc, #180]	; (800980c <mem_free+0x184>)
 8009758:	f004 fe18 	bl	800e38c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800975c:	686b      	ldr	r3, [r5, #4]
 800975e:	429e      	cmp	r6, r3
 8009760:	d306      	bcc.n	8009770 <mem_free+0xe8>
 8009762:	4b28      	ldr	r3, [pc, #160]	; (8009804 <mem_free+0x17c>)
 8009764:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009768:	492f      	ldr	r1, [pc, #188]	; (8009828 <mem_free+0x1a0>)
 800976a:	4828      	ldr	r0, [pc, #160]	; (800980c <mem_free+0x184>)
 800976c:	f004 fe0e 	bl	800e38c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009770:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8009774:	b133      	cbz	r3, 8009784 <mem_free+0xfc>
 8009776:	4b23      	ldr	r3, [pc, #140]	; (8009804 <mem_free+0x17c>)
 8009778:	f240 12e1 	movw	r2, #481	; 0x1e1
 800977c:	492b      	ldr	r1, [pc, #172]	; (800982c <mem_free+0x1a4>)
 800977e:	4823      	ldr	r0, [pc, #140]	; (800980c <mem_free+0x184>)
 8009780:	f004 fe04 	bl	800e38c <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009784:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8009788:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800978c:	d906      	bls.n	800979c <mem_free+0x114>
 800978e:	4b1d      	ldr	r3, [pc, #116]	; (8009804 <mem_free+0x17c>)
 8009790:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8009794:	4926      	ldr	r1, [pc, #152]	; (8009830 <mem_free+0x1a8>)
 8009796:	481d      	ldr	r0, [pc, #116]	; (800980c <mem_free+0x184>)
 8009798:	f004 fdf8 	bl	800e38c <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 800979c:	682b      	ldr	r3, [r5, #0]
 800979e:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 80097a2:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80097a4:	4296      	cmp	r6, r2
 80097a6:	d012      	beq.n	80097ce <mem_free+0x146>
 80097a8:	7910      	ldrb	r0, [r2, #4]
 80097aa:	b980      	cbnz	r0, 80097ce <mem_free+0x146>
 80097ac:	6868      	ldr	r0, [r5, #4]
 80097ae:	4282      	cmp	r2, r0
 80097b0:	d00d      	beq.n	80097ce <mem_free+0x146>
    if (lfree == nmem) {
 80097b2:	68a8      	ldr	r0, [r5, #8]
 80097b4:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 80097b6:	5a5a      	ldrh	r2, [r3, r1]
 80097b8:	f824 2c08 	strh.w	r2, [r4, #-8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80097bc:	5a5a      	ldrh	r2, [r3, r1]
      lfree = mem;
 80097be:	bf08      	it	eq
 80097c0:	60ae      	streq	r6, [r5, #8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80097c2:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80097c6:	bf1e      	ittt	ne
 80097c8:	18d2      	addne	r2, r2, r3
  return (mem_size_t)((u8_t *)mem - ram);
 80097ca:	1af1      	subne	r1, r6, r3
 80097cc:	8051      	strhne	r1, [r2, #2]
  pmem = ptr_to_mem(mem->prev);
 80097ce:	f834 2c06 	ldrh.w	r2, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
 80097d2:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 80097d4:	428e      	cmp	r6, r1
 80097d6:	d00f      	beq.n	80097f8 <mem_free+0x170>
 80097d8:	7908      	ldrb	r0, [r1, #4]
 80097da:	b968      	cbnz	r0, 80097f8 <mem_free+0x170>
    if (lfree == mem) {
 80097dc:	68a8      	ldr	r0, [r5, #8]
 80097de:	4286      	cmp	r6, r0
      lfree = pmem;
 80097e0:	bf08      	it	eq
 80097e2:	60a9      	streq	r1, [r5, #8]
    pmem->next = mem->next;
 80097e4:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 80097e8:	5299      	strh	r1, [r3, r2]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80097ea:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 80097ee:	f5b1 5f20 	cmp.w	r1, #10240	; 0x2800
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80097f2:	bf1c      	itt	ne
 80097f4:	185b      	addne	r3, r3, r1
 80097f6:	805a      	strhne	r2, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 80097f8:	4809      	ldr	r0, [pc, #36]	; (8009820 <mem_free+0x198>)
}
 80097fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  LWIP_MEM_FREE_UNPROTECT();
 80097fe:	f004 bd52 	b.w	800e2a6 <sys_mutex_unlock>
}
 8009802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009804:	0801484c 	.word	0x0801484c
 8009808:	080148cd 	.word	0x080148cd
 800980c:	0801342c 	.word	0x0801342c
 8009810:	20006904 	.word	0x20006904
 8009814:	080148ee 	.word	0x080148ee
 8009818:	08014907 	.word	0x08014907
 800981c:	0801492d 	.word	0x0801492d
 8009820:	20006910 	.word	0x20006910
 8009824:	0801495f 	.word	0x0801495f
 8009828:	08014976 	.word	0x08014976
 800982c:	08014990 	.word	0x08014990
 8009830:	080149ab 	.word	0x080149ab

08009834 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8009834:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8009838:	1ccc      	adds	r4, r1, #3
{
 800983a:	4605      	mov	r5, r0
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800983c:	f024 0403 	bic.w	r4, r4, #3
 8009840:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 8009842:	2c0b      	cmp	r4, #11
 8009844:	d904      	bls.n	8009850 <mem_trim+0x1c>
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8009846:	f5b4 5f20 	cmp.w	r4, #10240	; 0x2800
 800984a:	d902      	bls.n	8009852 <mem_trim+0x1e>
    return NULL;
 800984c:	2500      	movs	r5, #0
 800984e:	e01a      	b.n	8009886 <mem_trim+0x52>
    newsize = MIN_SIZE_ALIGNED;
 8009850:	240c      	movs	r4, #12
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8009852:	42a1      	cmp	r1, r4
 8009854:	d8fa      	bhi.n	800984c <mem_trim+0x18>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8009856:	4e47      	ldr	r6, [pc, #284]	; (8009974 <mem_trim+0x140>)
 8009858:	6833      	ldr	r3, [r6, #0]
 800985a:	42ab      	cmp	r3, r5
 800985c:	d802      	bhi.n	8009864 <mem_trim+0x30>
 800985e:	6873      	ldr	r3, [r6, #4]
 8009860:	42ab      	cmp	r3, r5
 8009862:	d806      	bhi.n	8009872 <mem_trim+0x3e>
 8009864:	4b44      	ldr	r3, [pc, #272]	; (8009978 <mem_trim+0x144>)
 8009866:	f240 22d1 	movw	r2, #721	; 0x2d1
 800986a:	4944      	ldr	r1, [pc, #272]	; (800997c <mem_trim+0x148>)
 800986c:	4844      	ldr	r0, [pc, #272]	; (8009980 <mem_trim+0x14c>)
 800986e:	f004 fd8d 	bl	800e38c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009872:	6833      	ldr	r3, [r6, #0]
 8009874:	42ab      	cmp	r3, r5
 8009876:	d802      	bhi.n	800987e <mem_trim+0x4a>
 8009878:	6872      	ldr	r2, [r6, #4]
 800987a:	42aa      	cmp	r2, r5
 800987c:	d806      	bhi.n	800988c <mem_trim+0x58>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800987e:	f004 fd25 	bl	800e2cc <sys_arch_protect>
 8009882:	f004 fd2f 	bl	800e2e4 <sys_arch_unprotect>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8009886:	4628      	mov	r0, r5
 8009888:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800988c:	f1a5 0708 	sub.w	r7, r5, #8
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009890:	f835 8c08 	ldrh.w	r8, [r5, #-8]
  return (mem_size_t)((u8_t *)mem - ram);
 8009894:	1aff      	subs	r7, r7, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009896:	f1a8 0808 	sub.w	r8, r8, #8
  return (mem_size_t)((u8_t *)mem - ram);
 800989a:	b2bf      	uxth	r7, r7
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800989c:	eba8 0807 	sub.w	r8, r8, r7
 80098a0:	fa1f f888 	uxth.w	r8, r8
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80098a4:	45a0      	cmp	r8, r4
 80098a6:	d207      	bcs.n	80098b8 <mem_trim+0x84>
 80098a8:	4b33      	ldr	r3, [pc, #204]	; (8009978 <mem_trim+0x144>)
 80098aa:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80098ae:	4935      	ldr	r1, [pc, #212]	; (8009984 <mem_trim+0x150>)
 80098b0:	4833      	ldr	r0, [pc, #204]	; (8009980 <mem_trim+0x14c>)
 80098b2:	f004 fd6b 	bl	800e38c <iprintf>
  if (newsize > size) {
 80098b6:	e7c9      	b.n	800984c <mem_trim+0x18>
  if (newsize == size) {
 80098b8:	d0e5      	beq.n	8009886 <mem_trim+0x52>
  LWIP_MEM_FREE_PROTECT();
 80098ba:	4833      	ldr	r0, [pc, #204]	; (8009988 <mem_trim+0x154>)
 80098bc:	f004 fcee 	bl	800e29c <sys_mutex_lock>
  mem2 = ptr_to_mem(mem->next);
 80098c0:	f835 9c08 	ldrh.w	r9, [r5, #-8]
  return (struct mem *)(void *)&ram[ptr];
 80098c4:	f8d6 b000 	ldr.w	fp, [r6]
 80098c8:	eb0b 0a09 	add.w	sl, fp, r9
  if (mem2->used == 0) {
 80098cc:	f89a 3004 	ldrb.w	r3, [sl, #4]
 80098d0:	bb3b      	cbnz	r3, 8009922 <mem_trim+0xee>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80098d2:	f5b9 5f20 	cmp.w	r9, #10240	; 0x2800
 80098d6:	d106      	bne.n	80098e6 <mem_trim+0xb2>
 80098d8:	4b27      	ldr	r3, [pc, #156]	; (8009978 <mem_trim+0x144>)
 80098da:	f240 22f5 	movw	r2, #757	; 0x2f5
 80098de:	492b      	ldr	r1, [pc, #172]	; (800998c <mem_trim+0x158>)
 80098e0:	4827      	ldr	r0, [pc, #156]	; (8009980 <mem_trim+0x14c>)
 80098e2:	f004 fd53 	bl	800e38c <iprintf>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80098e6:	f107 0308 	add.w	r3, r7, #8
    if (lfree == mem2) {
 80098ea:	68b1      	ldr	r1, [r6, #8]
    next = mem2->next;
 80098ec:	f83b 0009 	ldrh.w	r0, [fp, r9]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80098f0:	441c      	add	r4, r3
 80098f2:	6833      	ldr	r3, [r6, #0]
    if (lfree == mem2) {
 80098f4:	4551      	cmp	r1, sl
    mem2->used = 0;
 80098f6:	f04f 0100 	mov.w	r1, #0
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80098fa:	b2a2      	uxth	r2, r4
  return (struct mem *)(void *)&ram[ptr];
 80098fc:	fa13 f484 	uxtah	r4, r3, r4
    mem2->used = 0;
 8009900:	7121      	strb	r1, [r4, #4]
    mem2->next = next;
 8009902:	5298      	strh	r0, [r3, r2]
    mem2->prev = ptr;
 8009904:	8067      	strh	r7, [r4, #2]
    mem->next = ptr2;
 8009906:	f825 2c08 	strh.w	r2, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800990a:	5a99      	ldrh	r1, [r3, r2]
      lfree = ptr_to_mem(ptr2);
 800990c:	bf08      	it	eq
 800990e:	60b4      	streq	r4, [r6, #8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009910:	f5b1 5f20 	cmp.w	r1, #10240	; 0x2800
 8009914:	d001      	beq.n	800991a <mem_trim+0xe6>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009916:	440b      	add	r3, r1
 8009918:	805a      	strh	r2, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 800991a:	481b      	ldr	r0, [pc, #108]	; (8009988 <mem_trim+0x154>)
 800991c:	f004 fcc3 	bl	800e2a6 <sys_mutex_unlock>
  return rmem;
 8009920:	e7b1      	b.n	8009886 <mem_trim+0x52>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8009922:	f104 0314 	add.w	r3, r4, #20
 8009926:	4543      	cmp	r3, r8
 8009928:	d8f7      	bhi.n	800991a <mem_trim+0xe6>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800992a:	f107 0308 	add.w	r3, r7, #8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800992e:	f5b9 5f20 	cmp.w	r9, #10240	; 0x2800
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009932:	441c      	add	r4, r3
 8009934:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009936:	d106      	bne.n	8009946 <mem_trim+0x112>
 8009938:	4b0f      	ldr	r3, [pc, #60]	; (8009978 <mem_trim+0x144>)
 800993a:	f240 3216 	movw	r2, #790	; 0x316
 800993e:	4913      	ldr	r1, [pc, #76]	; (800998c <mem_trim+0x158>)
 8009940:	480f      	ldr	r0, [pc, #60]	; (8009980 <mem_trim+0x14c>)
 8009942:	f004 fd23 	bl	800e38c <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8009946:	6833      	ldr	r3, [r6, #0]
    if (mem2 < lfree) {
 8009948:	68b1      	ldr	r1, [r6, #8]
  return (struct mem *)(void *)&ram[ptr];
 800994a:	191a      	adds	r2, r3, r4
    if (mem2 < lfree) {
 800994c:	4291      	cmp	r1, r2
    mem2->used = 0;
 800994e:	f04f 0100 	mov.w	r1, #0
 8009952:	7111      	strb	r1, [r2, #4]
    mem2->next = mem->next;
 8009954:	f835 1c08 	ldrh.w	r1, [r5, #-8]
      lfree = mem2;
 8009958:	bf88      	it	hi
 800995a:	60b2      	strhi	r2, [r6, #8]
    mem2->next = mem->next;
 800995c:	5319      	strh	r1, [r3, r4]
    mem2->prev = ptr;
 800995e:	8057      	strh	r7, [r2, #2]
    mem->next = ptr2;
 8009960:	f825 4c08 	strh.w	r4, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009964:	5b1a      	ldrh	r2, [r3, r4]
 8009966:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
      ptr_to_mem(mem2->next)->prev = ptr2;
 800996a:	bf1c      	itt	ne
 800996c:	189b      	addne	r3, r3, r2
 800996e:	805c      	strhne	r4, [r3, #2]
 8009970:	e7d3      	b.n	800991a <mem_trim+0xe6>
 8009972:	bf00      	nop
 8009974:	20006904 	.word	0x20006904
 8009978:	0801484c 	.word	0x0801484c
 800997c:	080149d5 	.word	0x080149d5
 8009980:	0801342c 	.word	0x0801342c
 8009984:	080149ec 	.word	0x080149ec
 8009988:	20006910 	.word	0x20006910
 800998c:	08014a0c 	.word	0x08014a0c

08009990 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8009990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8009994:	2800      	cmp	r0, #0
 8009996:	f000 8088 	beq.w	8009aaa <mem_malloc+0x11a>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800999a:	1cc5      	adds	r5, r0, #3
 800999c:	f025 0503 	bic.w	r5, r5, #3
 80099a0:	b2ad      	uxth	r5, r5
  if (size < MIN_SIZE_ALIGNED) {
 80099a2:	2d0b      	cmp	r5, #11
 80099a4:	d904      	bls.n	80099b0 <mem_malloc+0x20>
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80099a6:	f5b5 5f20 	cmp.w	r5, #10240	; 0x2800
 80099aa:	d902      	bls.n	80099b2 <mem_malloc+0x22>
    return NULL;
 80099ac:	2000      	movs	r0, #0
 80099ae:	e07c      	b.n	8009aaa <mem_malloc+0x11a>
    size = MIN_SIZE_ALIGNED;
 80099b0:	250c      	movs	r5, #12
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80099b2:	42a8      	cmp	r0, r5
 80099b4:	d8fa      	bhi.n	80099ac <mem_malloc+0x1c>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80099b6:	4f42      	ldr	r7, [pc, #264]	; (8009ac0 <mem_malloc+0x130>)
 80099b8:	f107 000c 	add.w	r0, r7, #12
 80099bc:	f004 fc6e 	bl	800e29c <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 80099c0:	683a      	ldr	r2, [r7, #0]
 80099c2:	68be      	ldr	r6, [r7, #8]
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80099c4:	f5c5 5020 	rsb	r0, r5, #10240	; 0x2800
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80099c8:	f06f 0c07 	mvn.w	ip, #7
  return (mem_size_t)((u8_t *)mem - ram);
 80099cc:	1ab6      	subs	r6, r6, r2
 80099ce:	b2b6      	uxth	r6, r6
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80099d0:	4286      	cmp	r6, r0
 80099d2:	d303      	bcc.n	80099dc <mem_malloc+0x4c>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80099d4:	483b      	ldr	r0, [pc, #236]	; (8009ac4 <mem_malloc+0x134>)
 80099d6:	f004 fc66 	bl	800e2a6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80099da:	e7e7      	b.n	80099ac <mem_malloc+0x1c>
  return (struct mem *)(void *)&ram[ptr];
 80099dc:	1994      	adds	r4, r2, r6
      if ((!mem->used) &&
 80099de:	5b91      	ldrh	r1, [r2, r6]
 80099e0:	7923      	ldrb	r3, [r4, #4]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d169      	bne.n	8009aba <mem_malloc+0x12a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80099e6:	ebac 0306 	sub.w	r3, ip, r6
 80099ea:	440b      	add	r3, r1
      if ((!mem->used) &&
 80099ec:	42ab      	cmp	r3, r5
 80099ee:	d364      	bcc.n	8009aba <mem_malloc+0x12a>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80099f0:	f105 0214 	add.w	r2, r5, #20
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d35a      	bcc.n	8009aae <mem_malloc+0x11e>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80099f8:	f105 0808 	add.w	r8, r5, #8
 80099fc:	44b0      	add	r8, r6
 80099fe:	fa1f f888 	uxth.w	r8, r8
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009a02:	f5b8 5f20 	cmp.w	r8, #10240	; 0x2800
 8009a06:	d106      	bne.n	8009a16 <mem_malloc+0x86>
 8009a08:	4b2f      	ldr	r3, [pc, #188]	; (8009ac8 <mem_malloc+0x138>)
 8009a0a:	f240 3287 	movw	r2, #903	; 0x387
 8009a0e:	492f      	ldr	r1, [pc, #188]	; (8009acc <mem_malloc+0x13c>)
 8009a10:	482f      	ldr	r0, [pc, #188]	; (8009ad0 <mem_malloc+0x140>)
 8009a12:	f004 fcbb 	bl	800e38c <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8009a16:	683b      	ldr	r3, [r7, #0]
          mem2->used = 0;
 8009a18:	2100      	movs	r1, #0
  return (struct mem *)(void *)&ram[ptr];
 8009a1a:	eb03 0208 	add.w	r2, r3, r8
          mem2->used = 0;
 8009a1e:	7111      	strb	r1, [r2, #4]
          mem2->next = mem->next;
 8009a20:	8821      	ldrh	r1, [r4, #0]
 8009a22:	f823 1008 	strh.w	r1, [r3, r8]
          mem2->prev = ptr;
 8009a26:	8056      	strh	r6, [r2, #2]
          mem->used = 1;
 8009a28:	2201      	movs	r2, #1
          mem->next = ptr2;
 8009a2a:	f8a4 8000 	strh.w	r8, [r4]
          mem->used = 1;
 8009a2e:	7122      	strb	r2, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009a30:	f833 2008 	ldrh.w	r2, [r3, r8]
 8009a34:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8009a38:	d002      	beq.n	8009a40 <mem_malloc+0xb0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8009a3a:	4413      	add	r3, r2
 8009a3c:	f8a3 8002 	strh.w	r8, [r3, #2]
        if (mem == lfree) {
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	42a3      	cmp	r3, r4
 8009a44:	d110      	bne.n	8009a68 <mem_malloc+0xd8>
  return (struct mem *)(void *)&ram[ptr];
 8009a46:	e9d7 0100 	ldrd	r0, r1, [r7]
          while (cur->used && cur != ram_end) {
 8009a4a:	791a      	ldrb	r2, [r3, #4]
 8009a4c:	b10a      	cbz	r2, 8009a52 <mem_malloc+0xc2>
 8009a4e:	4299      	cmp	r1, r3
 8009a50:	d130      	bne.n	8009ab4 <mem_malloc+0x124>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009a52:	4299      	cmp	r1, r3
          lfree = cur;
 8009a54:	60bb      	str	r3, [r7, #8]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009a56:	d007      	beq.n	8009a68 <mem_malloc+0xd8>
 8009a58:	b132      	cbz	r2, 8009a68 <mem_malloc+0xd8>
 8009a5a:	4b1b      	ldr	r3, [pc, #108]	; (8009ac8 <mem_malloc+0x138>)
 8009a5c:	f240 32b5 	movw	r2, #949	; 0x3b5
 8009a60:	491c      	ldr	r1, [pc, #112]	; (8009ad4 <mem_malloc+0x144>)
 8009a62:	481b      	ldr	r0, [pc, #108]	; (8009ad0 <mem_malloc+0x140>)
 8009a64:	f004 fc92 	bl	800e38c <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009a68:	3508      	adds	r5, #8
        sys_mutex_unlock(&mem_mutex);
 8009a6a:	4816      	ldr	r0, [pc, #88]	; (8009ac4 <mem_malloc+0x134>)
 8009a6c:	f004 fc1b 	bl	800e2a6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	4425      	add	r5, r4
 8009a74:	42ab      	cmp	r3, r5
 8009a76:	d206      	bcs.n	8009a86 <mem_malloc+0xf6>
 8009a78:	4b13      	ldr	r3, [pc, #76]	; (8009ac8 <mem_malloc+0x138>)
 8009a7a:	f240 32b9 	movw	r2, #953	; 0x3b9
 8009a7e:	4916      	ldr	r1, [pc, #88]	; (8009ad8 <mem_malloc+0x148>)
 8009a80:	4813      	ldr	r0, [pc, #76]	; (8009ad0 <mem_malloc+0x140>)
 8009a82:	f004 fc83 	bl	800e38c <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009a86:	07a3      	lsls	r3, r4, #30
 8009a88:	d00d      	beq.n	8009aa6 <mem_malloc+0x116>
 8009a8a:	4b0f      	ldr	r3, [pc, #60]	; (8009ac8 <mem_malloc+0x138>)
 8009a8c:	f240 32bb 	movw	r2, #955	; 0x3bb
 8009a90:	4912      	ldr	r1, [pc, #72]	; (8009adc <mem_malloc+0x14c>)
 8009a92:	480f      	ldr	r0, [pc, #60]	; (8009ad0 <mem_malloc+0x140>)
 8009a94:	f004 fc7a 	bl	800e38c <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009a98:	4b0b      	ldr	r3, [pc, #44]	; (8009ac8 <mem_malloc+0x138>)
 8009a9a:	f240 32bd 	movw	r2, #957	; 0x3bd
 8009a9e:	4910      	ldr	r1, [pc, #64]	; (8009ae0 <mem_malloc+0x150>)
 8009aa0:	480b      	ldr	r0, [pc, #44]	; (8009ad0 <mem_malloc+0x140>)
 8009aa2:	f004 fc73 	bl	800e38c <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8009aa6:	f104 0008 	add.w	r0, r4, #8
}
 8009aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          mem->used = 1;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	7123      	strb	r3, [r4, #4]
 8009ab2:	e7c5      	b.n	8009a40 <mem_malloc+0xb0>
  return (struct mem *)(void *)&ram[ptr];
 8009ab4:	881b      	ldrh	r3, [r3, #0]
 8009ab6:	4403      	add	r3, r0
 8009ab8:	e7c7      	b.n	8009a4a <mem_malloc+0xba>
    size = MIN_SIZE_ALIGNED;
 8009aba:	460e      	mov	r6, r1
 8009abc:	e788      	b.n	80099d0 <mem_malloc+0x40>
 8009abe:	bf00      	nop
 8009ac0:	20006904 	.word	0x20006904
 8009ac4:	20006910 	.word	0x20006910
 8009ac8:	0801484c 	.word	0x0801484c
 8009acc:	08014a0c 	.word	0x08014a0c
 8009ad0:	0801342c 	.word	0x0801342c
 8009ad4:	08014a1d 	.word	0x08014a1d
 8009ad8:	08014a36 	.word	0x08014a36
 8009adc:	08014a66 	.word	0x08014a66
 8009ae0:	08014a95 	.word	0x08014a95

08009ae4 <do_memp_malloc_pool.isra.0>:
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}

static void *
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
 8009ae4:	b538      	push	{r3, r4, r5, lr}
 8009ae6:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8009ae8:	f004 fbf0 	bl	800e2cc <sys_arch_protect>
 8009aec:	4605      	mov	r5, r0

  memp = *desc->tab;
 8009aee:	6823      	ldr	r3, [r4, #0]
 8009af0:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009af2:	b15c      	cbz	r4, 8009b0c <do_memp_malloc_pool.isra.0+0x28>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009af4:	6822      	ldr	r2, [r4, #0]
 8009af6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009af8:	07a3      	lsls	r3, r4, #30
 8009afa:	d006      	beq.n	8009b0a <do_memp_malloc_pool.isra.0+0x26>
 8009afc:	4b05      	ldr	r3, [pc, #20]	; (8009b14 <do_memp_malloc_pool.isra.0+0x30>)
 8009afe:	f44f 728c 	mov.w	r2, #280	; 0x118
 8009b02:	4905      	ldr	r1, [pc, #20]	; (8009b18 <do_memp_malloc_pool.isra.0+0x34>)
 8009b04:	4805      	ldr	r0, [pc, #20]	; (8009b1c <do_memp_malloc_pool.isra.0+0x38>)
 8009b06:	f004 fc41 	bl	800e38c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8009b0a:	4628      	mov	r0, r5
    return ((u8_t *)memp + MEMP_SIZE);
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8009b0c:	f004 fbea 	bl	800e2e4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 8009b10:	4620      	mov	r0, r4
 8009b12:	bd38      	pop	{r3, r4, r5, pc}
 8009b14:	08014ab8 	.word	0x08014ab8
 8009b18:	08014b1f 	.word	0x08014b1f
 8009b1c:	0801342c 	.word	0x0801342c

08009b20 <do_memp_free_pool.isra.0>:

  return memp;
}

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
 8009b20:	b538      	push	{r3, r4, r5, lr}
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009b22:	078b      	lsls	r3, r1, #30
do_memp_free_pool(const struct memp_desc *desc, void *mem)
 8009b24:	4605      	mov	r5, r0
 8009b26:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 8009b28:	d006      	beq.n	8009b38 <do_memp_free_pool.isra.0+0x18>
 8009b2a:	4b08      	ldr	r3, [pc, #32]	; (8009b4c <do_memp_free_pool.isra.0+0x2c>)
 8009b2c:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009b30:	4907      	ldr	r1, [pc, #28]	; (8009b50 <do_memp_free_pool.isra.0+0x30>)
 8009b32:	4808      	ldr	r0, [pc, #32]	; (8009b54 <do_memp_free_pool.isra.0+0x34>)
 8009b34:	f004 fc2a 	bl	800e38c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 8009b38:	f004 fbc8 	bl	800e2cc <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009b3c:	682b      	ldr	r3, [r5, #0]
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 8009b42:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8009b44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SYS_ARCH_UNPROTECT(old_level);
 8009b48:	f004 bbcc 	b.w	800e2e4 <sys_arch_unprotect>
 8009b4c:	08014ab8 	.word	0x08014ab8
 8009b50:	08014b42 	.word	0x08014b42
 8009b54:	0801342c 	.word	0x0801342c

08009b58 <memp_init_pool>:
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009b58:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	6881      	ldr	r1, [r0, #8]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009b5e:	3303      	adds	r3, #3
{
 8009b60:	b530      	push	{r4, r5, lr}
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009b62:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8009b66:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 8009b68:	600a      	str	r2, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 8009b6a:	4294      	cmp	r4, r2
 8009b6c:	dc00      	bgt.n	8009b70 <memp_init_pool+0x18>
}
 8009b6e:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 8009b70:	680d      	ldr	r5, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 8009b72:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 8009b74:	601d      	str	r5, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009b76:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 8009b78:	600b      	str	r3, [r1, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009b7a:	442b      	add	r3, r5
  for (i = 0; i < desc->num; ++i) {
 8009b7c:	e7f5      	b.n	8009b6a <memp_init_pool+0x12>
	...

08009b80 <memp_init>:
{
 8009b80:	b538      	push	{r3, r4, r5, lr}
 8009b82:	4d05      	ldr	r5, [pc, #20]	; (8009b98 <memp_init+0x18>)
 8009b84:	240d      	movs	r4, #13
    memp_init_pool(memp_pools[i]);
 8009b86:	3c01      	subs	r4, #1
 8009b88:	f855 0b04 	ldr.w	r0, [r5], #4
 8009b8c:	f7ff ffe4 	bl	8009b58 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009b90:	b2a4      	uxth	r4, r4
 8009b92:	2c00      	cmp	r4, #0
 8009b94:	d1f7      	bne.n	8009b86 <memp_init+0x6>
}
 8009b96:	bd38      	pop	{r3, r4, r5, pc}
 8009b98:	08013244 	.word	0x08013244

08009b9c <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009b9c:	280c      	cmp	r0, #12
{
 8009b9e:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009ba0:	d807      	bhi.n	8009bb2 <memp_malloc+0x16>
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009ba2:	4b08      	ldr	r3, [pc, #32]	; (8009bc4 <memp_malloc+0x28>)
 8009ba4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 8009ba8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009bac:	3008      	adds	r0, #8
 8009bae:	f7ff bf99 	b.w	8009ae4 <do_memp_malloc_pool.isra.0>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009bb2:	4b05      	ldr	r3, [pc, #20]	; (8009bc8 <memp_malloc+0x2c>)
 8009bb4:	f240 1257 	movw	r2, #343	; 0x157
 8009bb8:	4904      	ldr	r1, [pc, #16]	; (8009bcc <memp_malloc+0x30>)
 8009bba:	4805      	ldr	r0, [pc, #20]	; (8009bd0 <memp_malloc+0x34>)
 8009bbc:	f004 fbe6 	bl	800e38c <iprintf>
}
 8009bc0:	2000      	movs	r0, #0
 8009bc2:	bd08      	pop	{r3, pc}
 8009bc4:	08013244 	.word	0x08013244
 8009bc8:	08014ab8 	.word	0x08014ab8
 8009bcc:	08014b74 	.word	0x08014b74
 8009bd0:	0801342c 	.word	0x0801342c

08009bd4 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009bd4:	280c      	cmp	r0, #12
 8009bd6:	d906      	bls.n	8009be6 <memp_free+0x12>
 8009bd8:	4b07      	ldr	r3, [pc, #28]	; (8009bf8 <memp_free+0x24>)
 8009bda:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8009bde:	4907      	ldr	r1, [pc, #28]	; (8009bfc <memp_free+0x28>)
 8009be0:	4807      	ldr	r0, [pc, #28]	; (8009c00 <memp_free+0x2c>)
 8009be2:	f004 bbd3 	b.w	800e38c <iprintf>

  if (mem == NULL) {
 8009be6:	b129      	cbz	r1, 8009bf4 <memp_free+0x20>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009be8:	4b06      	ldr	r3, [pc, #24]	; (8009c04 <memp_free+0x30>)
 8009bea:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009bee:	3008      	adds	r0, #8
 8009bf0:	f7ff bf96 	b.w	8009b20 <do_memp_free_pool.isra.0>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009bf4:	4770      	bx	lr
 8009bf6:	bf00      	nop
 8009bf8:	08014ab8 	.word	0x08014ab8
 8009bfc:	08014b91 	.word	0x08014b91
 8009c00:	0801342c 	.word	0x0801342c
 8009c04:	08013244 	.word	0x08013244

08009c08 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 8009c08:	f06f 000b 	mvn.w	r0, #11
 8009c0c:	4770      	bx	lr
	...

08009c10 <netif_issue_reports>:
{
 8009c10:	b538      	push	{r3, r4, r5, lr}
 8009c12:	460d      	mov	r5, r1
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8009c14:	4604      	mov	r4, r0
 8009c16:	b930      	cbnz	r0, 8009c26 <netif_issue_reports+0x16>
 8009c18:	4b0c      	ldr	r3, [pc, #48]	; (8009c4c <netif_issue_reports+0x3c>)
 8009c1a:	f240 326d 	movw	r2, #877	; 0x36d
 8009c1e:	490c      	ldr	r1, [pc, #48]	; (8009c50 <netif_issue_reports+0x40>)
 8009c20:	480c      	ldr	r0, [pc, #48]	; (8009c54 <netif_issue_reports+0x44>)
 8009c22:	f004 fbb3 	bl	800e38c <iprintf>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009c26:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8009c2a:	f003 0205 	and.w	r2, r3, #5
 8009c2e:	2a05      	cmp	r2, #5
 8009c30:	d10b      	bne.n	8009c4a <netif_issue_reports+0x3a>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009c32:	07ea      	lsls	r2, r5, #31
 8009c34:	d509      	bpl.n	8009c4a <netif_issue_reports+0x3a>
 8009c36:	6862      	ldr	r2, [r4, #4]
 8009c38:	b13a      	cbz	r2, 8009c4a <netif_issue_reports+0x3a>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8009c3a:	071b      	lsls	r3, r3, #28
 8009c3c:	d505      	bpl.n	8009c4a <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8009c3e:	1d21      	adds	r1, r4, #4
 8009c40:	4620      	mov	r0, r4
}
 8009c42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      etharp_gratuitous(netif);
 8009c46:	f7fe bbfd 	b.w	8008444 <etharp_request>
}
 8009c4a:	bd38      	pop	{r3, r4, r5, pc}
 8009c4c:	08014bac 	.word	0x08014bac
 8009c50:	08014c14 	.word	0x08014c14
 8009c54:	0801342c 	.word	0x0801342c

08009c58 <netif_do_set_ipaddr>:
{
 8009c58:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c5a:	4605      	mov	r5, r0
 8009c5c:	4616      	mov	r6, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8009c5e:	460c      	mov	r4, r1
 8009c60:	b931      	cbnz	r1, 8009c70 <netif_do_set_ipaddr+0x18>
 8009c62:	4b10      	ldr	r3, [pc, #64]	; (8009ca4 <netif_do_set_ipaddr+0x4c>)
 8009c64:	f240 12cb 	movw	r2, #459	; 0x1cb
 8009c68:	490f      	ldr	r1, [pc, #60]	; (8009ca8 <netif_do_set_ipaddr+0x50>)
 8009c6a:	4810      	ldr	r0, [pc, #64]	; (8009cac <netif_do_set_ipaddr+0x54>)
 8009c6c:	f004 fb8e 	bl	800e38c <iprintf>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8009c70:	686b      	ldr	r3, [r5, #4]
 8009c72:	6822      	ldr	r2, [r4, #0]
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d101      	bne.n	8009c7c <netif_do_set_ipaddr+0x24>
  return 0; /* address unchanged */
 8009c78:	2000      	movs	r0, #0
 8009c7a:	e010      	b.n	8009c9e <netif_do_set_ipaddr+0x46>
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8009c7c:	6033      	str	r3, [r6, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8009c7e:	a901      	add	r1, sp, #4
 8009c80:	4630      	mov	r0, r6
    *ip_2_ip4(&new_addr) = *ipaddr;
 8009c82:	9201      	str	r2, [sp, #4]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8009c84:	f001 fc92 	bl	800b5ac <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8009c88:	a901      	add	r1, sp, #4
 8009c8a:	4630      	mov	r0, r6
 8009c8c:	f004 f9ae 	bl	800dfec <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8009c90:	6823      	ldr	r3, [r4, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009c92:	4628      	mov	r0, r5
 8009c94:	2101      	movs	r1, #1
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8009c96:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009c98:	f7ff ffba 	bl	8009c10 <netif_issue_reports>
    return 1; /* address changed */
 8009c9c:	2001      	movs	r0, #1
}
 8009c9e:	b002      	add	sp, #8
 8009ca0:	bd70      	pop	{r4, r5, r6, pc}
 8009ca2:	bf00      	nop
 8009ca4:	08014bac 	.word	0x08014bac
 8009ca8:	080137aa 	.word	0x080137aa
 8009cac:	0801342c 	.word	0x0801342c

08009cb0 <netif_init>:
}
 8009cb0:	4770      	bx	lr
	...

08009cb4 <netif_set_addr>:
{
 8009cb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 8009cb6:	4f14      	ldr	r7, [pc, #80]	; (8009d08 <netif_set_addr+0x54>)
{
 8009cb8:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY4;
 8009cba:	2900      	cmp	r1, #0
 8009cbc:	bf14      	ite	ne
 8009cbe:	460d      	movne	r5, r1
 8009cc0:	463d      	moveq	r5, r7
    netmask = IP4_ADDR_ANY4;
 8009cc2:	2a00      	cmp	r2, #0
 8009cc4:	bf14      	ite	ne
 8009cc6:	4616      	movne	r6, r2
 8009cc8:	463e      	moveq	r6, r7
    gw = IP4_ADDR_ANY4;
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	bf18      	it	ne
 8009cce:	461f      	movne	r7, r3
  remove = ip4_addr_isany(ipaddr);
 8009cd0:	682b      	ldr	r3, [r5, #0]
 8009cd2:	b9b3      	cbnz	r3, 8009d02 <netif_set_addr+0x4e>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009cd4:	aa01      	add	r2, sp, #4
 8009cd6:	4629      	mov	r1, r5
 8009cd8:	f7ff ffbe 	bl	8009c58 <netif_do_set_ipaddr>
 8009cdc:	2301      	movs	r3, #1
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8009cde:	6832      	ldr	r2, [r6, #0]
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8009ce0:	68a1      	ldr	r1, [r4, #8]
 8009ce2:	428a      	cmp	r2, r1
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8009ce4:	68e1      	ldr	r1, [r4, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8009ce6:	bf18      	it	ne
 8009ce8:	60a2      	strne	r2, [r4, #8]
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8009cea:	683a      	ldr	r2, [r7, #0]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8009cec:	428a      	cmp	r2, r1
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8009cee:	bf18      	it	ne
 8009cf0:	60e2      	strne	r2, [r4, #12]
  if (!remove) {
 8009cf2:	b923      	cbnz	r3, 8009cfe <netif_set_addr+0x4a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009cf4:	aa01      	add	r2, sp, #4
 8009cf6:	4629      	mov	r1, r5
 8009cf8:	4620      	mov	r0, r4
 8009cfa:	f7ff ffad 	bl	8009c58 <netif_do_set_ipaddr>
}
 8009cfe:	b003      	add	sp, #12
 8009d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
  remove = ip4_addr_isany(ipaddr);
 8009d02:	2300      	movs	r3, #0
 8009d04:	e7eb      	b.n	8009cde <netif_set_addr+0x2a>
 8009d06:	bf00      	nop
 8009d08:	08013240 	.word	0x08013240

08009d0c <netif_add>:
{
 8009d0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d10:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8009d12:	4698      	mov	r8, r3
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8009d14:	4604      	mov	r4, r0
 8009d16:	b948      	cbnz	r0, 8009d2c <netif_add+0x20>
 8009d18:	4b3e      	ldr	r3, [pc, #248]	; (8009e14 <netif_add+0x108>)
 8009d1a:	f240 1227 	movw	r2, #295	; 0x127
 8009d1e:	493e      	ldr	r1, [pc, #248]	; (8009e18 <netif_add+0x10c>)
 8009d20:	483e      	ldr	r0, [pc, #248]	; (8009e1c <netif_add+0x110>)
 8009d22:	f004 fb33 	bl	800e38c <iprintf>
}
 8009d26:	4620      	mov	r0, r4
 8009d28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8009d2c:	b947      	cbnz	r7, 8009d40 <netif_add+0x34>
 8009d2e:	4b39      	ldr	r3, [pc, #228]	; (8009e14 <netif_add+0x108>)
 8009d30:	f44f 7294 	mov.w	r2, #296	; 0x128
 8009d34:	493a      	ldr	r1, [pc, #232]	; (8009e20 <netif_add+0x114>)
 8009d36:	463c      	mov	r4, r7
 8009d38:	4838      	ldr	r0, [pc, #224]	; (8009e1c <netif_add+0x110>)
 8009d3a:	f004 fb27 	bl	800e38c <iprintf>
 8009d3e:	e7f2      	b.n	8009d26 <netif_add+0x1a>
  netif->output = netif_null_output_ip4;
 8009d40:	4e38      	ldr	r6, [pc, #224]	; (8009e24 <netif_add+0x118>)
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8009d42:	2500      	movs	r5, #0
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8009d44:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 8009e30 <netif_add+0x124>
  netif->output = netif_null_output_ip4;
 8009d48:	6146      	str	r6, [r0, #20]
  netif->state = state;
 8009d4a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009d4c:	42aa      	cmp	r2, r5
 8009d4e:	bf08      	it	eq
 8009d50:	4662      	moveq	r2, ip
  netif->input = input;
 8009d52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009d54:	42a9      	cmp	r1, r5
 8009d56:	bf08      	it	eq
 8009d58:	4661      	moveq	r1, ip
  netif->state = state;
 8009d5a:	6206      	str	r6, [r0, #32]
  netif->num = netif_num;
 8009d5c:	4e32      	ldr	r6, [pc, #200]	; (8009e28 <netif_add+0x11c>)
  netif->input = input;
 8009d5e:	6103      	str	r3, [r0, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009d60:	45a8      	cmp	r8, r5
 8009d62:	bf14      	ite	ne
 8009d64:	4643      	movne	r3, r8
 8009d66:	4663      	moveq	r3, ip
  netif->num = netif_num;
 8009d68:	f896 e000 	ldrb.w	lr, [r6]
  ip_addr_set_zero_ip4(&netif->gw);
 8009d6c:	60c5      	str	r5, [r0, #12]
  netif->mtu = 0;
 8009d6e:	8505      	strh	r5, [r0, #40]	; 0x28
  netif->flags = 0;
 8009d70:	f880 5031 	strb.w	r5, [r0, #49]	; 0x31
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8009d74:	6245      	str	r5, [r0, #36]	; 0x24
  netif->link_callback = NULL;
 8009d76:	61c5      	str	r5, [r0, #28]
  netif->num = netif_num;
 8009d78:	f880 e034 	strb.w	lr, [r0, #52]	; 0x34
  ip_addr_set_zero_ip4(&netif->netmask);
 8009d7c:	e9c0 5501 	strd	r5, r5, [r0, #4]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009d80:	f7ff ff98 	bl	8009cb4 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8009d84:	4620      	mov	r0, r4
 8009d86:	47b8      	blx	r7
 8009d88:	2800      	cmp	r0, #0
 8009d8a:	d140      	bne.n	8009e0e <netif_add+0x102>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009d8c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8009e34 <netif_add+0x128>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009d90:	4b20      	ldr	r3, [pc, #128]	; (8009e14 <netif_add+0x108>)
 8009d92:	46c8      	mov	r8, r9
      if (netif->num == 255) {
 8009d94:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
      num_netifs = 0;
 8009d98:	2700      	movs	r7, #0
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009d9a:	f8d9 5000 	ldr.w	r5, [r9]
      if (netif->num == 255) {
 8009d9e:	2aff      	cmp	r2, #255	; 0xff
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009da0:	f8df b094 	ldr.w	fp, [pc, #148]	; 8009e38 <netif_add+0x12c>
 8009da4:	f8df a074 	ldr.w	sl, [pc, #116]	; 8009e1c <netif_add+0x110>
        netif->num = 0;
 8009da8:	bf04      	itt	eq
 8009daa:	2200      	moveq	r2, #0
 8009dac:	f884 2034 	strbeq.w	r2, [r4, #52]	; 0x34
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009db0:	b92d      	cbnz	r5, 8009dbe <netif_add+0xb2>
  if (netif->num == 254) {
 8009db2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8009db6:	2bfe      	cmp	r3, #254	; 0xfe
 8009db8:	d120      	bne.n	8009dfc <netif_add+0xf0>
    netif_num = 0;
 8009dba:	462b      	mov	r3, r5
 8009dbc:	e020      	b.n	8009e00 <netif_add+0xf4>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009dbe:	42a5      	cmp	r5, r4
 8009dc0:	d106      	bne.n	8009dd0 <netif_add+0xc4>
 8009dc2:	f240 128b 	movw	r2, #395	; 0x18b
 8009dc6:	4659      	mov	r1, fp
 8009dc8:	4650      	mov	r0, sl
 8009dca:	f004 fadf 	bl	800e38c <iprintf>
 8009dce:	4b11      	ldr	r3, [pc, #68]	; (8009e14 <netif_add+0x108>)
        num_netifs++;
 8009dd0:	3701      	adds	r7, #1
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8009dd2:	2fff      	cmp	r7, #255	; 0xff
 8009dd4:	dd06      	ble.n	8009de4 <netif_add+0xd8>
 8009dd6:	f240 128d 	movw	r2, #397	; 0x18d
 8009dda:	4914      	ldr	r1, [pc, #80]	; (8009e2c <netif_add+0x120>)
 8009ddc:	4650      	mov	r0, sl
 8009dde:	f004 fad5 	bl	800e38c <iprintf>
 8009de2:	4b0c      	ldr	r3, [pc, #48]	; (8009e14 <netif_add+0x108>)
        if (netif2->num == netif->num) {
 8009de4:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 8009de8:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
 8009dec:	428a      	cmp	r2, r1
 8009dee:	d103      	bne.n	8009df8 <netif_add+0xec>
          netif->num++;
 8009df0:	3201      	adds	r2, #1
 8009df2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    } while (netif2 != NULL);
 8009df6:	e7cd      	b.n	8009d94 <netif_add+0x88>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009df8:	682d      	ldr	r5, [r5, #0]
 8009dfa:	e7d9      	b.n	8009db0 <netif_add+0xa4>
    netif_num = (u8_t)(netif->num + 1);
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	b2db      	uxtb	r3, r3
 8009e00:	7033      	strb	r3, [r6, #0]
  netif->next = netif_list;
 8009e02:	f8d8 3000 	ldr.w	r3, [r8]
 8009e06:	6023      	str	r3, [r4, #0]
  netif_list = netif;
 8009e08:	f8c8 4000 	str.w	r4, [r8]
  return netif;
 8009e0c:	e78b      	b.n	8009d26 <netif_add+0x1a>
    return NULL;
 8009e0e:	462c      	mov	r4, r5
 8009e10:	e789      	b.n	8009d26 <netif_add+0x1a>
 8009e12:	bf00      	nop
 8009e14:	08014bac 	.word	0x08014bac
 8009e18:	08014cc9 	.word	0x08014cc9
 8009e1c:	0801342c 	.word	0x0801342c
 8009e20:	08014ce2 	.word	0x08014ce2
 8009e24:	08009c09 	.word	0x08009c09
 8009e28:	20006948 	.word	0x20006948
 8009e2c:	08014d18 	.word	0x08014d18
 8009e30:	08013240 	.word	0x08013240
 8009e34:	20010d48 	.word	0x20010d48
 8009e38:	08014d04 	.word	0x08014d04

08009e3c <netif_set_default>:
  netif_default = netif;
 8009e3c:	4b01      	ldr	r3, [pc, #4]	; (8009e44 <netif_set_default+0x8>)
 8009e3e:	6018      	str	r0, [r3, #0]
}
 8009e40:	4770      	bx	lr
 8009e42:	bf00      	nop
 8009e44:	20010d4c 	.word	0x20010d4c

08009e48 <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8009e48:	b930      	cbnz	r0, 8009e58 <netif_set_up+0x10>
 8009e4a:	4b09      	ldr	r3, [pc, #36]	; (8009e70 <netif_set_up+0x28>)
 8009e4c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8009e50:	4908      	ldr	r1, [pc, #32]	; (8009e74 <netif_set_up+0x2c>)
 8009e52:	4809      	ldr	r0, [pc, #36]	; (8009e78 <netif_set_up+0x30>)
 8009e54:	f004 ba9a 	b.w	800e38c <iprintf>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8009e58:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
 8009e5c:	07d1      	lsls	r1, r2, #31
 8009e5e:	d406      	bmi.n	8009e6e <netif_set_up+0x26>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8009e60:	f042 0201 	orr.w	r2, r2, #1
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009e64:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_UP);
 8009e66:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009e6a:	f7ff bed1 	b.w	8009c10 <netif_issue_reports>
}
 8009e6e:	4770      	bx	lr
 8009e70:	08014bac 	.word	0x08014bac
 8009e74:	08014d46 	.word	0x08014d46
 8009e78:	0801342c 	.word	0x0801342c

08009e7c <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8009e7c:	b930      	cbnz	r0, 8009e8c <netif_set_down+0x10>
 8009e7e:	4b0a      	ldr	r3, [pc, #40]	; (8009ea8 <netif_set_down+0x2c>)
 8009e80:	f240 329b 	movw	r2, #923	; 0x39b
 8009e84:	4909      	ldr	r1, [pc, #36]	; (8009eac <netif_set_down+0x30>)
 8009e86:	480a      	ldr	r0, [pc, #40]	; (8009eb0 <netif_set_down+0x34>)
 8009e88:	f004 ba80 	b.w	800e38c <iprintf>
  if (netif->flags & NETIF_FLAG_UP) {
 8009e8c:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
 8009e90:	07d1      	lsls	r1, r2, #31
 8009e92:	d507      	bpl.n	8009ea4 <netif_set_down+0x28>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8009e94:	f022 0101 	bic.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8009e98:	0713      	lsls	r3, r2, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8009e9a:	f880 1031 	strb.w	r1, [r0, #49]	; 0x31
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8009e9e:	d501      	bpl.n	8009ea4 <netif_set_down+0x28>
      etharp_cleanup_netif(netif);
 8009ea0:	f7fe ba12 	b.w	80082c8 <etharp_cleanup_netif>
}
 8009ea4:	4770      	bx	lr
 8009ea6:	bf00      	nop
 8009ea8:	08014bac 	.word	0x08014bac
 8009eac:	08014d62 	.word	0x08014d62
 8009eb0:	0801342c 	.word	0x0801342c

08009eb4 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	b158      	cbz	r0, 8009ed0 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 8009eb8:	4a06      	ldr	r2, [pc, #24]	; (8009ed4 <netif_get_by_index+0x20>)
 8009eba:	6810      	ldr	r0, [r2, #0]
 8009ebc:	b900      	cbnz	r0, 8009ec0 <netif_get_by_index+0xc>
 8009ebe:	4770      	bx	lr
      if (idx == netif_get_index(netif)) {
 8009ec0:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 8009ec4:	3201      	adds	r2, #1
 8009ec6:	b2d2      	uxtb	r2, r2
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d001      	beq.n	8009ed0 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 8009ecc:	6800      	ldr	r0, [r0, #0]
 8009ece:	e7f5      	b.n	8009ebc <netif_get_by_index+0x8>
      }
    }
  }

  return NULL;
}
 8009ed0:	4770      	bx	lr
 8009ed2:	bf00      	nop
 8009ed4:	20010d48 	.word	0x20010d48

08009ed8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8009ed8:	b538      	push	{r3, r4, r5, lr}
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009eda:	b968      	cbnz	r0, 8009ef8 <pbuf_add_header_impl+0x20>
 8009edc:	4b14      	ldr	r3, [pc, #80]	; (8009f30 <pbuf_add_header_impl+0x58>)
 8009ede:	f240 12df 	movw	r2, #479	; 0x1df
 8009ee2:	4914      	ldr	r1, [pc, #80]	; (8009f34 <pbuf_add_header_impl+0x5c>)
 8009ee4:	4814      	ldr	r0, [pc, #80]	; (8009f38 <pbuf_add_header_impl+0x60>)
 8009ee6:	f004 fa51 	bl	800e38c <iprintf>
  }

  increment_magnitude = (u16_t)header_size_increment;
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
    return 1;
 8009eea:	2001      	movs	r0, #1
 8009eec:	e01f      	b.n	8009f2e <pbuf_add_header_impl+0x56>
      return 1;
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8009eee:	2a00      	cmp	r2, #0
 8009ef0:	d0fb      	beq.n	8009eea <pbuf_add_header_impl+0x12>
      payload = (u8_t *)p->payload - header_size_increment;
 8009ef2:	6842      	ldr	r2, [r0, #4]
 8009ef4:	1a51      	subs	r1, r2, r1
 8009ef6:	e014      	b.n	8009f22 <pbuf_add_header_impl+0x4a>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8009ef8:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8009efc:	d2f5      	bcs.n	8009eea <pbuf_add_header_impl+0x12>
  if (header_size_increment == 0) {
 8009efe:	b1a9      	cbz	r1, 8009f2c <pbuf_add_header_impl+0x54>
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8009f00:	8903      	ldrh	r3, [r0, #8]
  increment_magnitude = (u16_t)header_size_increment;
 8009f02:	b28c      	uxth	r4, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8009f04:	fa13 f381 	uxtah	r3, r3, r1
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	429c      	cmp	r4, r3
 8009f0c:	d8ed      	bhi.n	8009eea <pbuf_add_header_impl+0x12>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8009f0e:	f990 500c 	ldrsb.w	r5, [r0, #12]
 8009f12:	2d00      	cmp	r5, #0
 8009f14:	daeb      	bge.n	8009eee <pbuf_add_header_impl+0x16>
    payload = (u8_t *)p->payload - header_size_increment;
 8009f16:	6842      	ldr	r2, [r0, #4]
 8009f18:	1a51      	subs	r1, r2, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8009f1a:	f100 0210 	add.w	r2, r0, #16
 8009f1e:	4291      	cmp	r1, r2
 8009f20:	d3e3      	bcc.n	8009eea <pbuf_add_header_impl+0x12>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
  p->len = (u16_t)(p->len + increment_magnitude);
 8009f22:	8942      	ldrh	r2, [r0, #10]
  p->payload = payload;
 8009f24:	6041      	str	r1, [r0, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8009f26:	4414      	add	r4, r2
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8009f28:	8103      	strh	r3, [r0, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 8009f2a:	8144      	strh	r4, [r0, #10]


  return 0;
 8009f2c:	2000      	movs	r0, #0
}
 8009f2e:	bd38      	pop	{r3, r4, r5, pc}
 8009f30:	08014dc4 	.word	0x08014dc4
 8009f34:	08014ecd 	.word	0x08014ecd
 8009f38:	0801342c 	.word	0x0801342c

08009f3c <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8009f3c:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8009f40:	2b01      	cmp	r3, #1
{
 8009f42:	b570      	push	{r4, r5, r6, lr}
 8009f44:	4606      	mov	r6, r0
 8009f46:	460d      	mov	r5, r1
 8009f48:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8009f4a:	d006      	beq.n	8009f5a <pbuf_alloc_reference+0x1e>
 8009f4c:	4b0a      	ldr	r3, [pc, #40]	; (8009f78 <pbuf_alloc_reference+0x3c>)
 8009f4e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8009f52:	490a      	ldr	r1, [pc, #40]	; (8009f7c <pbuf_alloc_reference+0x40>)
 8009f54:	480a      	ldr	r0, [pc, #40]	; (8009f80 <pbuf_alloc_reference+0x44>)
 8009f56:	f004 fa19 	bl	800e38c <iprintf>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8009f5a:	200b      	movs	r0, #11
 8009f5c:	f7ff fe1e 	bl	8009b9c <memp_malloc>
  if (p == NULL) {
 8009f60:	b140      	cbz	r0, 8009f74 <pbuf_alloc_reference+0x38>
  p->next = NULL;
 8009f62:	2300      	movs	r3, #0
  p->tot_len = tot_len;
 8009f64:	8105      	strh	r5, [r0, #8]
  p->len = len;
 8009f66:	8145      	strh	r5, [r0, #10]
  p->flags = flags;
 8009f68:	7343      	strb	r3, [r0, #13]
  p->type_internal = (u8_t)type;
 8009f6a:	7304      	strb	r4, [r0, #12]
  p->payload = payload;
 8009f6c:	e9c0 3600 	strd	r3, r6, [r0]
  p->ref = 1;
 8009f70:	2301      	movs	r3, #1
 8009f72:	81c3      	strh	r3, [r0, #14]
}
 8009f74:	bd70      	pop	{r4, r5, r6, pc}
 8009f76:	bf00      	nop
 8009f78:	08014dc4 	.word	0x08014dc4
 8009f7c:	08014e2b 	.word	0x08014e2b
 8009f80:	0801342c 	.word	0x0801342c

08009f84 <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8009f84:	3003      	adds	r0, #3
 8009f86:	f020 0003 	bic.w	r0, r0, #3
{
 8009f8a:	b570      	push	{r4, r5, r6, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8009f8c:	180e      	adds	r6, r1, r0
 8009f8e:	f8bd 5014 	ldrh.w	r5, [sp, #20]
{
 8009f92:	9c04      	ldr	r4, [sp, #16]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8009f94:	42ae      	cmp	r6, r5
 8009f96:	d80d      	bhi.n	8009fb4 <pbuf_alloced_custom+0x30>
  if (payload_mem != NULL) {
 8009f98:	b104      	cbz	r4, 8009f9c <pbuf_alloced_custom+0x18>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8009f9a:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8009f9c:	4618      	mov	r0, r3
  p->next = NULL;
 8009f9e:	2300      	movs	r3, #0
  p->payload = payload;
 8009fa0:	e9c0 3400 	strd	r3, r4, [r0]
  p->flags = flags;
 8009fa4:	2302      	movs	r3, #2
  p->tot_len = tot_len;
 8009fa6:	8101      	strh	r1, [r0, #8]
  p->len = len;
 8009fa8:	8141      	strh	r1, [r0, #10]
  p->flags = flags;
 8009faa:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 8009fac:	2301      	movs	r3, #1
  p->type_internal = (u8_t)type;
 8009fae:	7302      	strb	r2, [r0, #12]
  p->ref = 1;
 8009fb0:	81c3      	strh	r3, [r0, #14]
}
 8009fb2:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
 8009fb4:	2000      	movs	r0, #0
 8009fb6:	e7fc      	b.n	8009fb2 <pbuf_alloced_custom+0x2e>

08009fb8 <pbuf_add_header>:
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8009fb8:	2200      	movs	r2, #0
 8009fba:	f7ff bf8d 	b.w	8009ed8 <pbuf_add_header_impl>
	...

08009fc0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8009fc0:	b510      	push	{r4, lr}
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009fc2:	b990      	cbnz	r0, 8009fea <pbuf_remove_header+0x2a>
 8009fc4:	4b10      	ldr	r3, [pc, #64]	; (800a008 <pbuf_remove_header+0x48>)
 8009fc6:	f240 224b 	movw	r2, #587	; 0x24b
 8009fca:	4910      	ldr	r1, [pc, #64]	; (800a00c <pbuf_remove_header+0x4c>)
    return 0;
  }

  increment_magnitude = (u16_t)header_size_decrement;
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8009fcc:	4810      	ldr	r0, [pc, #64]	; (800a010 <pbuf_remove_header+0x50>)
 8009fce:	f004 f9dd 	bl	800e38c <iprintf>
    return 1;
 8009fd2:	2001      	movs	r0, #1
 8009fd4:	e008      	b.n	8009fe8 <pbuf_remove_header+0x28>
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8009fd6:	1a9b      	subs	r3, r3, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8009fd8:	6844      	ldr	r4, [r0, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 8009fda:	8143      	strh	r3, [r0, #10]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8009fdc:	4421      	add	r1, r4
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8009fde:	8903      	ldrh	r3, [r0, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8009fe0:	6041      	str	r1, [r0, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8009fe2:	1a9b      	subs	r3, r3, r2
 8009fe4:	8103      	strh	r3, [r0, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8009fe6:	2000      	movs	r0, #0
}
 8009fe8:	bd10      	pop	{r4, pc}
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8009fea:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8009fee:	d2f0      	bcs.n	8009fd2 <pbuf_remove_header+0x12>
  if (header_size_decrement == 0) {
 8009ff0:	2900      	cmp	r1, #0
 8009ff2:	d0f8      	beq.n	8009fe6 <pbuf_remove_header+0x26>
  increment_magnitude = (u16_t)header_size_decrement;
 8009ff4:	b28a      	uxth	r2, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8009ff6:	8943      	ldrh	r3, [r0, #10]
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d2ec      	bcs.n	8009fd6 <pbuf_remove_header+0x16>
 8009ffc:	4b02      	ldr	r3, [pc, #8]	; (800a008 <pbuf_remove_header+0x48>)
 8009ffe:	f240 2255 	movw	r2, #597	; 0x255
 800a002:	4904      	ldr	r1, [pc, #16]	; (800a014 <pbuf_remove_header+0x54>)
 800a004:	e7e2      	b.n	8009fcc <pbuf_remove_header+0xc>
 800a006:	bf00      	nop
 800a008:	08014dc4 	.word	0x08014dc4
 800a00c:	08014ecd 	.word	0x08014ecd
 800a010:	0801342c 	.word	0x0801342c
 800a014:	08014e3d 	.word	0x08014e3d

0800a018 <pbuf_header_force>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
  if (header_size_increment < 0) {
 800a018:	1e0b      	subs	r3, r1, #0
 800a01a:	da02      	bge.n	800a022 <pbuf_header_force+0xa>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800a01c:	4259      	negs	r1, r3
 800a01e:	f7ff bfcf 	b.w	8009fc0 <pbuf_remove_header>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800a022:	2201      	movs	r2, #1
 800a024:	f7ff bf58 	b.w	8009ed8 <pbuf_add_header_impl>

0800a028 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800a028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800a02c:	4604      	mov	r4, r0
 800a02e:	b950      	cbnz	r0, 800a046 <pbuf_free+0x1e>
    LWIP_ASSERT("p != NULL", p != NULL);
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800a030:	4625      	mov	r5, r4
    LWIP_ASSERT("p != NULL", p != NULL);
 800a032:	4b2b      	ldr	r3, [pc, #172]	; (800a0e0 <pbuf_free+0xb8>)
 800a034:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800a038:	492a      	ldr	r1, [pc, #168]	; (800a0e4 <pbuf_free+0xbc>)
 800a03a:	482b      	ldr	r0, [pc, #172]	; (800a0e8 <pbuf_free+0xc0>)
 800a03c:	f004 f9a6 	bl	800e38c <iprintf>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 800a040:	4628      	mov	r0, r5
 800a042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  count = 0;
 800a046:	2500      	movs	r5, #0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a048:	4f25      	ldr	r7, [pc, #148]	; (800a0e0 <pbuf_free+0xb8>)
 800a04a:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800a0f4 <pbuf_free+0xcc>
 800a04e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800a0e8 <pbuf_free+0xc0>
    SYS_ARCH_PROTECT(old_level);
 800a052:	f004 f93b 	bl	800e2cc <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a056:	7ba3      	ldrb	r3, [r4, #14]
    SYS_ARCH_PROTECT(old_level);
 800a058:	4681      	mov	r9, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a05a:	b933      	cbnz	r3, 800a06a <pbuf_free+0x42>
 800a05c:	463b      	mov	r3, r7
 800a05e:	f240 22f1 	movw	r2, #753	; 0x2f1
 800a062:	4651      	mov	r1, sl
 800a064:	4640      	mov	r0, r8
 800a066:	f004 f991 	bl	800e38c <iprintf>
    ref = --(p->ref);
 800a06a:	7ba6      	ldrb	r6, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 800a06c:	4648      	mov	r0, r9
    ref = --(p->ref);
 800a06e:	3e01      	subs	r6, #1
 800a070:	b2f6      	uxtb	r6, r6
 800a072:	73a6      	strb	r6, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 800a074:	f004 f936 	bl	800e2e4 <sys_arch_unprotect>
    if (ref == 0) {
 800a078:	2e00      	cmp	r6, #0
 800a07a:	d1e1      	bne.n	800a040 <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a07c:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 800a07e:	6826      	ldr	r6, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a080:	079b      	lsls	r3, r3, #30
 800a082:	d511      	bpl.n	800a0a8 <pbuf_free+0x80>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a084:	6923      	ldr	r3, [r4, #16]
 800a086:	b933      	cbnz	r3, 800a096 <pbuf_free+0x6e>
 800a088:	463b      	mov	r3, r7
 800a08a:	f240 22ff 	movw	r2, #767	; 0x2ff
 800a08e:	4917      	ldr	r1, [pc, #92]	; (800a0ec <pbuf_free+0xc4>)
 800a090:	4640      	mov	r0, r8
 800a092:	f004 f97b 	bl	800e38c <iprintf>
        pc->custom_free_function(p);
 800a096:	6923      	ldr	r3, [r4, #16]
 800a098:	4620      	mov	r0, r4
 800a09a:	4798      	blx	r3
      count++;
 800a09c:	3501      	adds	r5, #1
 800a09e:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 800a0a0:	2e00      	cmp	r6, #0
 800a0a2:	d0cd      	beq.n	800a040 <pbuf_free+0x18>
 800a0a4:	4634      	mov	r4, r6
 800a0a6:	e7d4      	b.n	800a052 <pbuf_free+0x2a>
      alloc_src = pbuf_get_allocsrc(p);
 800a0a8:	7b23      	ldrb	r3, [r4, #12]
 800a0aa:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800a0ae:	2b02      	cmp	r3, #2
 800a0b0:	d104      	bne.n	800a0bc <pbuf_free+0x94>
          memp_free(MEMP_PBUF_POOL, p);
 800a0b2:	4621      	mov	r1, r4
 800a0b4:	200c      	movs	r0, #12
          memp_free(MEMP_PBUF, p);
 800a0b6:	f7ff fd8d 	bl	8009bd4 <memp_free>
 800a0ba:	e7ef      	b.n	800a09c <pbuf_free+0x74>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d102      	bne.n	800a0c6 <pbuf_free+0x9e>
          memp_free(MEMP_PBUF, p);
 800a0c0:	4621      	mov	r1, r4
 800a0c2:	200b      	movs	r0, #11
 800a0c4:	e7f7      	b.n	800a0b6 <pbuf_free+0x8e>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800a0c6:	b91b      	cbnz	r3, 800a0d0 <pbuf_free+0xa8>
          mem_free(p);
 800a0c8:	4620      	mov	r0, r4
 800a0ca:	f7ff fadd 	bl	8009688 <mem_free>
 800a0ce:	e7e5      	b.n	800a09c <pbuf_free+0x74>
          LWIP_ASSERT("invalid pbuf type", 0);
 800a0d0:	463b      	mov	r3, r7
 800a0d2:	f240 320f 	movw	r2, #783	; 0x30f
 800a0d6:	4906      	ldr	r1, [pc, #24]	; (800a0f0 <pbuf_free+0xc8>)
 800a0d8:	4640      	mov	r0, r8
 800a0da:	f004 f957 	bl	800e38c <iprintf>
 800a0de:	e7dd      	b.n	800a09c <pbuf_free+0x74>
 800a0e0:	08014dc4 	.word	0x08014dc4
 800a0e4:	08014ecd 	.word	0x08014ecd
 800a0e8:	0801342c 	.word	0x0801342c
 800a0ec:	08014e71 	.word	0x08014e71
 800a0f0:	08014e92 	.word	0x08014e92
 800a0f4:	08014e5b 	.word	0x08014e5b

0800a0f8 <pbuf_alloc>:
  switch (type) {
 800a0f8:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
{
 800a0fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a100:	4606      	mov	r6, r0
 800a102:	460f      	mov	r7, r1
  u16_t offset = (u16_t)layer;
 800a104:	b284      	uxth	r4, r0
  switch (type) {
 800a106:	d014      	beq.n	800a132 <pbuf_alloc+0x3a>
 800a108:	d808      	bhi.n	800a11c <pbuf_alloc+0x24>
 800a10a:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d107      	bne.n	800a122 <pbuf_alloc+0x2a>
      p = pbuf_alloc_reference(NULL, length, type);
 800a112:	2000      	movs	r0, #0
}
 800a114:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 800a118:	f7ff bf10 	b.w	8009f3c <pbuf_alloc_reference>
  switch (type) {
 800a11c:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 800a120:	d03b      	beq.n	800a19a <pbuf_alloc+0xa2>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a122:	4b2e      	ldr	r3, [pc, #184]	; (800a1dc <pbuf_alloc+0xe4>)
 800a124:	f240 1227 	movw	r2, #295	; 0x127
 800a128:	492d      	ldr	r1, [pc, #180]	; (800a1e0 <pbuf_alloc+0xe8>)
 800a12a:	482e      	ldr	r0, [pc, #184]	; (800a1e4 <pbuf_alloc+0xec>)
 800a12c:	f004 f92e 	bl	800e38c <iprintf>
 800a130:	e00c      	b.n	800a14c <pbuf_alloc+0x54>
  switch (type) {
 800a132:	2600      	movs	r6, #0
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a134:	f240 58f4 	movw	r8, #1524	; 0x5f4
  p->type_internal = (u8_t)type;
 800a138:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800a1ec <pbuf_alloc+0xf4>
  switch (type) {
 800a13c:	4635      	mov	r5, r6
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a13e:	200c      	movs	r0, #12
 800a140:	46b2      	mov	sl, r6
 800a142:	f7ff fd2b 	bl	8009b9c <memp_malloc>
        if (q == NULL) {
 800a146:	4606      	mov	r6, r0
 800a148:	b930      	cbnz	r0, 800a158 <pbuf_alloc+0x60>
          if (p) {
 800a14a:	b90d      	cbnz	r5, 800a150 <pbuf_alloc+0x58>
      return NULL;
 800a14c:	2500      	movs	r5, #0
 800a14e:	e01f      	b.n	800a190 <pbuf_alloc+0x98>
            pbuf_free(p);
 800a150:	4628      	mov	r0, r5
 800a152:	f7ff ff69 	bl	800a028 <pbuf_free>
 800a156:	e7f9      	b.n	800a14c <pbuf_alloc+0x54>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a158:	1ce3      	adds	r3, r4, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a15a:	4404      	add	r4, r0
  p->next = NULL;
 800a15c:	2200      	movs	r2, #0
  p->tot_len = tot_len;
 800a15e:	8107      	strh	r7, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a160:	f023 0303 	bic.w	r3, r3, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a164:	3413      	adds	r4, #19
  p->next = NULL;
 800a166:	6002      	str	r2, [r0, #0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a168:	eba8 0303 	sub.w	r3, r8, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a16c:	f024 0403 	bic.w	r4, r4, #3
  p->type_internal = (u8_t)type;
 800a170:	f8c0 900c 	str.w	r9, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a174:	b29b      	uxth	r3, r3
  p->payload = payload;
 800a176:	6044      	str	r4, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a178:	42bb      	cmp	r3, r7
 800a17a:	bf28      	it	cs
 800a17c:	463b      	movcs	r3, r7
  p->len = len;
 800a17e:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 800a180:	b14d      	cbz	r5, 800a196 <pbuf_alloc+0x9e>
          last->next = q;
 800a182:	f8ca 0000 	str.w	r0, [sl]
        rem_len = (u16_t)(rem_len - qlen);
 800a186:	1afb      	subs	r3, r7, r3
        offset = 0;
 800a188:	2400      	movs	r4, #0
        rem_len = (u16_t)(rem_len - qlen);
 800a18a:	b29f      	uxth	r7, r3
      } while (rem_len > 0);
 800a18c:	2f00      	cmp	r7, #0
 800a18e:	d1d6      	bne.n	800a13e <pbuf_alloc+0x46>
}
 800a190:	4628      	mov	r0, r5
 800a192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a196:	4605      	mov	r5, r0
 800a198:	e7f5      	b.n	800a186 <pbuf_alloc+0x8e>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800a19a:	3403      	adds	r4, #3
 800a19c:	1ccb      	adds	r3, r1, #3
 800a19e:	f024 0403 	bic.w	r4, r4, #3
 800a1a2:	f023 0303 	bic.w	r3, r3, #3
 800a1a6:	441c      	add	r4, r3
 800a1a8:	b2a4      	uxth	r4, r4
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a1aa:	f104 0010 	add.w	r0, r4, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a1ae:	429c      	cmp	r4, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a1b0:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a1b2:	d3cb      	bcc.n	800a14c <pbuf_alloc+0x54>
 800a1b4:	4283      	cmp	r3, r0
 800a1b6:	d8c9      	bhi.n	800a14c <pbuf_alloc+0x54>
      p = (struct pbuf *)mem_malloc(alloc_len);
 800a1b8:	f7ff fbea 	bl	8009990 <mem_malloc>
      if (p == NULL) {
 800a1bc:	4605      	mov	r5, r0
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	d0e6      	beq.n	800a190 <pbuf_alloc+0x98>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a1c2:	4406      	add	r6, r0
  p->next = NULL;
 800a1c4:	2300      	movs	r3, #0
  p->tot_len = tot_len;
 800a1c6:	8107      	strh	r7, [r0, #8]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a1c8:	3613      	adds	r6, #19
  p->next = NULL;
 800a1ca:	6003      	str	r3, [r0, #0]
  p->type_internal = (u8_t)type;
 800a1cc:	4b06      	ldr	r3, [pc, #24]	; (800a1e8 <pbuf_alloc+0xf0>)
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a1ce:	f026 0603 	bic.w	r6, r6, #3
  p->len = len;
 800a1d2:	8147      	strh	r7, [r0, #10]
  p->type_internal = (u8_t)type;
 800a1d4:	60c3      	str	r3, [r0, #12]
  p->payload = payload;
 800a1d6:	6046      	str	r6, [r0, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800a1d8:	e7da      	b.n	800a190 <pbuf_alloc+0x98>
 800a1da:	bf00      	nop
 800a1dc:	08014dc4 	.word	0x08014dc4
 800a1e0:	08014ea4 	.word	0x08014ea4
 800a1e4:	0801342c 	.word	0x0801342c
 800a1e8:	00010080 	.word	0x00010080
 800a1ec:	00010082 	.word	0x00010082

0800a1f0 <pbuf_realloc>:
{
 800a1f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1f4:	460e      	mov	r6, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a1f6:	4604      	mov	r4, r0
 800a1f8:	b930      	cbnz	r0, 800a208 <pbuf_realloc+0x18>
 800a1fa:	4b24      	ldr	r3, [pc, #144]	; (800a28c <pbuf_realloc+0x9c>)
 800a1fc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a200:	4923      	ldr	r1, [pc, #140]	; (800a290 <pbuf_realloc+0xa0>)
 800a202:	4824      	ldr	r0, [pc, #144]	; (800a294 <pbuf_realloc+0xa4>)
 800a204:	f004 f8c2 	bl	800e38c <iprintf>
  if (new_len >= p->tot_len) {
 800a208:	8927      	ldrh	r7, [r4, #8]
 800a20a:	42b7      	cmp	r7, r6
 800a20c:	d93c      	bls.n	800a288 <pbuf_realloc+0x98>
 800a20e:	4635      	mov	r5, r6
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a210:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800a28c <pbuf_realloc+0x9c>
 800a214:	f8df a084 	ldr.w	sl, [pc, #132]	; 800a29c <pbuf_realloc+0xac>
 800a218:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800a294 <pbuf_realloc+0xa4>
  while (rem_len > q->len) {
 800a21c:	8962      	ldrh	r2, [r4, #10]
 800a21e:	42aa      	cmp	r2, r5
 800a220:	d319      	bcc.n	800a256 <pbuf_realloc+0x66>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a222:	7b23      	ldrb	r3, [r4, #12]
 800a224:	0719      	lsls	r1, r3, #28
 800a226:	d127      	bne.n	800a278 <pbuf_realloc+0x88>
 800a228:	42aa      	cmp	r2, r5
 800a22a:	d025      	beq.n	800a278 <pbuf_realloc+0x88>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a22c:	7b63      	ldrb	r3, [r4, #13]
 800a22e:	079b      	lsls	r3, r3, #30
 800a230:	d422      	bmi.n	800a278 <pbuf_realloc+0x88>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800a232:	6861      	ldr	r1, [r4, #4]
 800a234:	4620      	mov	r0, r4
 800a236:	1b09      	subs	r1, r1, r4
 800a238:	4429      	add	r1, r5
 800a23a:	b289      	uxth	r1, r1
 800a23c:	f7ff fafa 	bl	8009834 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800a240:	4604      	mov	r4, r0
 800a242:	b9c8      	cbnz	r0, 800a278 <pbuf_realloc+0x88>
 800a244:	4b11      	ldr	r3, [pc, #68]	; (800a28c <pbuf_realloc+0x9c>)
 800a246:	f240 12bd 	movw	r2, #445	; 0x1bd
 800a24a:	4913      	ldr	r1, [pc, #76]	; (800a298 <pbuf_realloc+0xa8>)
 800a24c:	4811      	ldr	r0, [pc, #68]	; (800a294 <pbuf_realloc+0xa4>)
 800a24e:	f004 f89d 	bl	800e38c <iprintf>
  q->len = rem_len;
 800a252:	8164      	strh	r4, [r4, #10]
 800a254:	deff      	udf	#255	; 0xff
    rem_len = (u16_t)(rem_len - q->len);
 800a256:	1aad      	subs	r5, r5, r2
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a258:	1bf3      	subs	r3, r6, r7
 800a25a:	8922      	ldrh	r2, [r4, #8]
    rem_len = (u16_t)(rem_len - q->len);
 800a25c:	b2ad      	uxth	r5, r5
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a25e:	4413      	add	r3, r2
 800a260:	8123      	strh	r3, [r4, #8]
    q = q->next;
 800a262:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a264:	2c00      	cmp	r4, #0
 800a266:	d1d9      	bne.n	800a21c <pbuf_realloc+0x2c>
 800a268:	4643      	mov	r3, r8
 800a26a:	f240 12af 	movw	r2, #431	; 0x1af
 800a26e:	4651      	mov	r1, sl
 800a270:	4648      	mov	r0, r9
 800a272:	f004 f88b 	bl	800e38c <iprintf>
 800a276:	e7d1      	b.n	800a21c <pbuf_realloc+0x2c>
  if (q->next != NULL) {
 800a278:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 800a27a:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 800a27c:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 800a27e:	b108      	cbz	r0, 800a284 <pbuf_realloc+0x94>
    pbuf_free(q->next);
 800a280:	f7ff fed2 	bl	800a028 <pbuf_free>
  q->next = NULL;
 800a284:	2300      	movs	r3, #0
 800a286:	6023      	str	r3, [r4, #0]
}
 800a288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a28c:	08014dc4 	.word	0x08014dc4
 800a290:	08014ebf 	.word	0x08014ebf
 800a294:	0801342c 	.word	0x0801342c
 800a298:	08014eef 	.word	0x08014eef
 800a29c:	08014ed7 	.word	0x08014ed7

0800a2a0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800a2a0:	4603      	mov	r3, r0
  u16_t len;

  len = 0;
  while (p != NULL) {
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	b290      	uxth	r0, r2
 800a2a6:	3201      	adds	r2, #1
 800a2a8:	b903      	cbnz	r3, 800a2ac <pbuf_clen+0xc>
    ++len;
    p = p->next;
  }
  return len;
}
 800a2aa:	4770      	bx	lr
    p = p->next;
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	e7f9      	b.n	800a2a4 <pbuf_clen+0x4>

0800a2b0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800a2b0:	b510      	push	{r4, lr}
  /* pbuf given? */
  if (p != NULL) {
 800a2b2:	4604      	mov	r4, r0
 800a2b4:	b188      	cbz	r0, 800a2da <pbuf_ref+0x2a>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800a2b6:	f004 f809 	bl	800e2cc <sys_arch_protect>
 800a2ba:	7ba3      	ldrb	r3, [r4, #14]
 800a2bc:	3301      	adds	r3, #1
 800a2be:	73a3      	strb	r3, [r4, #14]
 800a2c0:	f004 f810 	bl	800e2e4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a2c4:	7ba3      	ldrb	r3, [r4, #14]
 800a2c6:	b943      	cbnz	r3, 800a2da <pbuf_ref+0x2a>
 800a2c8:	4b04      	ldr	r3, [pc, #16]	; (800a2dc <pbuf_ref+0x2c>)
 800a2ca:	f240 3242 	movw	r2, #834	; 0x342
 800a2ce:	4904      	ldr	r1, [pc, #16]	; (800a2e0 <pbuf_ref+0x30>)
 800a2d0:	4804      	ldr	r0, [pc, #16]	; (800a2e4 <pbuf_ref+0x34>)
  }
}
 800a2d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a2d6:	f004 b859 	b.w	800e38c <iprintf>
}
 800a2da:	bd10      	pop	{r4, pc}
 800a2dc:	08014dc4 	.word	0x08014dc4
 800a2e0:	08014f0b 	.word	0x08014f0b
 800a2e4:	0801342c 	.word	0x0801342c

0800a2e8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800a2e8:	b570      	push	{r4, r5, r6, lr}
 800a2ea:	460d      	mov	r5, r1
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a2ec:	4604      	mov	r4, r0
 800a2ee:	b100      	cbz	r0, 800a2f2 <pbuf_cat+0xa>
 800a2f0:	b961      	cbnz	r1, 800a30c <pbuf_cat+0x24>
 800a2f2:	4b15      	ldr	r3, [pc, #84]	; (800a348 <pbuf_cat+0x60>)
 800a2f4:	f240 3259 	movw	r2, #857	; 0x359
 800a2f8:	4914      	ldr	r1, [pc, #80]	; (800a34c <pbuf_cat+0x64>)
 800a2fa:	4815      	ldr	r0, [pc, #84]	; (800a350 <pbuf_cat+0x68>)
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800a2fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a300:	f004 b844 	b.w	800e38c <iprintf>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a304:	8929      	ldrh	r1, [r5, #8]
 800a306:	440b      	add	r3, r1
 800a308:	8123      	strh	r3, [r4, #8]
 800a30a:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 800a30c:	6822      	ldr	r2, [r4, #0]
 800a30e:	8923      	ldrh	r3, [r4, #8]
 800a310:	2a00      	cmp	r2, #0
 800a312:	d1f7      	bne.n	800a304 <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a314:	8962      	ldrh	r2, [r4, #10]
 800a316:	429a      	cmp	r2, r3
 800a318:	d00f      	beq.n	800a33a <pbuf_cat+0x52>
 800a31a:	4b0b      	ldr	r3, [pc, #44]	; (800a348 <pbuf_cat+0x60>)
 800a31c:	f240 3262 	movw	r2, #866	; 0x362
 800a320:	490c      	ldr	r1, [pc, #48]	; (800a354 <pbuf_cat+0x6c>)
 800a322:	480b      	ldr	r0, [pc, #44]	; (800a350 <pbuf_cat+0x68>)
 800a324:	f004 f832 	bl	800e38c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800a328:	6823      	ldr	r3, [r4, #0]
 800a32a:	b133      	cbz	r3, 800a33a <pbuf_cat+0x52>
 800a32c:	4b06      	ldr	r3, [pc, #24]	; (800a348 <pbuf_cat+0x60>)
 800a32e:	f240 3263 	movw	r2, #867	; 0x363
 800a332:	4909      	ldr	r1, [pc, #36]	; (800a358 <pbuf_cat+0x70>)
 800a334:	4806      	ldr	r0, [pc, #24]	; (800a350 <pbuf_cat+0x68>)
 800a336:	f004 f829 	bl	800e38c <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a33a:	892a      	ldrh	r2, [r5, #8]
 800a33c:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 800a33e:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a340:	4413      	add	r3, r2
 800a342:	8123      	strh	r3, [r4, #8]
}
 800a344:	bd70      	pop	{r4, r5, r6, pc}
 800a346:	bf00      	nop
 800a348:	08014dc4 	.word	0x08014dc4
 800a34c:	08014f1d 	.word	0x08014f1d
 800a350:	0801342c 	.word	0x0801342c
 800a354:	08014f52 	.word	0x08014f52
 800a358:	08014f7f 	.word	0x08014f7f

0800a35c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800a35c:	b510      	push	{r4, lr}
 800a35e:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 800a360:	f7ff ffc2 	bl	800a2e8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800a364:	4620      	mov	r0, r4
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800a366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pbuf_ref(t);
 800a36a:	f7ff bfa1 	b.w	800a2b0 <pbuf_ref>
	...

0800a370 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800a370:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a374:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a376:	4605      	mov	r5, r0
 800a378:	b120      	cbz	r0, 800a384 <pbuf_copy+0x14>
 800a37a:	b119      	cbz	r1, 800a384 <pbuf_copy+0x14>
 800a37c:	8902      	ldrh	r2, [r0, #8]
 800a37e:	890b      	ldrh	r3, [r1, #8]
 800a380:	429a      	cmp	r2, r3
 800a382:	d20a      	bcs.n	800a39a <pbuf_copy+0x2a>
 800a384:	4b34      	ldr	r3, [pc, #208]	; (800a458 <pbuf_copy+0xe8>)
 800a386:	f240 32c9 	movw	r2, #969	; 0x3c9
 800a38a:	4934      	ldr	r1, [pc, #208]	; (800a45c <pbuf_copy+0xec>)
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800a38c:	4834      	ldr	r0, [pc, #208]	; (800a460 <pbuf_copy+0xf0>)
 800a38e:	f003 fffd 	bl	800e38c <iprintf>
 800a392:	f06f 000f 	mvn.w	r0, #15
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 800a396:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t offset_to = 0, offset_from = 0, len;
 800a39a:	2600      	movs	r6, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a39c:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 800a458 <pbuf_copy+0xe8>
 800a3a0:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 800a470 <pbuf_copy+0x100>
  size_t offset_to = 0, offset_from = 0, len;
 800a3a4:	4637      	mov	r7, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a3a6:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 800a460 <pbuf_copy+0xf0>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a3aa:	f8b5 800a 	ldrh.w	r8, [r5, #10]
 800a3ae:	8962      	ldrh	r2, [r4, #10]
 800a3b0:	eba8 0807 	sub.w	r8, r8, r7
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800a3b4:	6868      	ldr	r0, [r5, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a3b6:	1b92      	subs	r2, r2, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800a3b8:	6861      	ldr	r1, [r4, #4]
 800a3ba:	4438      	add	r0, r7
 800a3bc:	4590      	cmp	r8, r2
 800a3be:	4431      	add	r1, r6
 800a3c0:	bf28      	it	cs
 800a3c2:	4690      	movcs	r8, r2
 800a3c4:	4642      	mov	r2, r8
    offset_to += len;
 800a3c6:	4447      	add	r7, r8
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800a3c8:	f003 ffca 	bl	800e360 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a3cc:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 800a3ce:	4446      	add	r6, r8
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a3d0:	429f      	cmp	r7, r3
 800a3d2:	d906      	bls.n	800a3e2 <pbuf_copy+0x72>
 800a3d4:	465b      	mov	r3, fp
 800a3d6:	f240 32d9 	movw	r2, #985	; 0x3d9
 800a3da:	4651      	mov	r1, sl
 800a3dc:	4648      	mov	r0, r9
 800a3de:	f003 ffd5 	bl	800e38c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800a3e2:	8963      	ldrh	r3, [r4, #10]
 800a3e4:	429e      	cmp	r6, r3
 800a3e6:	d906      	bls.n	800a3f6 <pbuf_copy+0x86>
 800a3e8:	465b      	mov	r3, fp
 800a3ea:	f240 32da 	movw	r2, #986	; 0x3da
 800a3ee:	491d      	ldr	r1, [pc, #116]	; (800a464 <pbuf_copy+0xf4>)
 800a3f0:	4648      	mov	r0, r9
 800a3f2:	f003 ffcb 	bl	800e38c <iprintf>
    if (offset_from >= p_from->len) {
 800a3f6:	8963      	ldrh	r3, [r4, #10]
 800a3f8:	429e      	cmp	r6, r3
    if (offset_to == p_to->len) {
 800a3fa:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 800a3fc:	bf24      	itt	cs
 800a3fe:	6824      	ldrcs	r4, [r4, #0]
      offset_from = 0;
 800a400:	2600      	movcs	r6, #0
    if (offset_to == p_to->len) {
 800a402:	429f      	cmp	r7, r3
 800a404:	d108      	bne.n	800a418 <pbuf_copy+0xa8>
      p_to = p_to->next;
 800a406:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800a408:	b92d      	cbnz	r5, 800a416 <pbuf_copy+0xa6>
 800a40a:	b314      	cbz	r4, 800a452 <pbuf_copy+0xe2>
 800a40c:	4b12      	ldr	r3, [pc, #72]	; (800a458 <pbuf_copy+0xe8>)
 800a40e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800a412:	4915      	ldr	r1, [pc, #84]	; (800a468 <pbuf_copy+0xf8>)
 800a414:	e7ba      	b.n	800a38c <pbuf_copy+0x1c>
      offset_to = 0;
 800a416:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a418:	b17c      	cbz	r4, 800a43a <pbuf_copy+0xca>
 800a41a:	8962      	ldrh	r2, [r4, #10]
 800a41c:	8923      	ldrh	r3, [r4, #8]
 800a41e:	429a      	cmp	r2, r3
 800a420:	d10b      	bne.n	800a43a <pbuf_copy+0xca>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a422:	6823      	ldr	r3, [r4, #0]
 800a424:	b14b      	cbz	r3, 800a43a <pbuf_copy+0xca>
 800a426:	4b0c      	ldr	r3, [pc, #48]	; (800a458 <pbuf_copy+0xe8>)
 800a428:	f240 32e9 	movw	r2, #1001	; 0x3e9
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a42c:	490f      	ldr	r1, [pc, #60]	; (800a46c <pbuf_copy+0xfc>)
 800a42e:	480c      	ldr	r0, [pc, #48]	; (800a460 <pbuf_copy+0xf0>)
 800a430:	f003 ffac 	bl	800e38c <iprintf>
 800a434:	f06f 0005 	mvn.w	r0, #5
 800a438:	e7ad      	b.n	800a396 <pbuf_copy+0x26>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a43a:	896a      	ldrh	r2, [r5, #10]
 800a43c:	892b      	ldrh	r3, [r5, #8]
 800a43e:	429a      	cmp	r2, r3
 800a440:	d105      	bne.n	800a44e <pbuf_copy+0xde>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a442:	682b      	ldr	r3, [r5, #0]
 800a444:	b11b      	cbz	r3, 800a44e <pbuf_copy+0xde>
 800a446:	4b04      	ldr	r3, [pc, #16]	; (800a458 <pbuf_copy+0xe8>)
 800a448:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800a44c:	e7ee      	b.n	800a42c <pbuf_copy+0xbc>
  } while (p_from);
 800a44e:	2c00      	cmp	r4, #0
 800a450:	d1ab      	bne.n	800a3aa <pbuf_copy+0x3a>
  return ERR_OK;
 800a452:	4620      	mov	r0, r4
 800a454:	e79f      	b.n	800a396 <pbuf_copy+0x26>
 800a456:	bf00      	nop
 800a458:	08014dc4 	.word	0x08014dc4
 800a45c:	08014fc6 	.word	0x08014fc6
 800a460:	0801342c 	.word	0x0801342c
 800a464:	0801500d 	.word	0x0801500d
 800a468:	08015028 	.word	0x08015028
 800a46c:	08015035 	.word	0x08015035
 800a470:	08014ff6 	.word	0x08014ff6

0800a474 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800a474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a478:	4688      	mov	r8, r1
 800a47a:	4691      	mov	r9, r2
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a47c:	4606      	mov	r6, r0
 800a47e:	b950      	cbnz	r0, 800a496 <pbuf_copy_partial+0x22>
 800a480:	4637      	mov	r7, r6
 800a482:	4b1b      	ldr	r3, [pc, #108]	; (800a4f0 <pbuf_copy_partial+0x7c>)
 800a484:	f240 420a 	movw	r2, #1034	; 0x40a
 800a488:	491a      	ldr	r1, [pc, #104]	; (800a4f4 <pbuf_copy_partial+0x80>)
 800a48a:	481b      	ldr	r0, [pc, #108]	; (800a4f8 <pbuf_copy_partial+0x84>)
 800a48c:	f003 ff7e 	bl	800e38c <iprintf>
      len = (u16_t)(len - buf_copy_len);
      offset = 0;
    }
  }
  return copied_total;
}
 800a490:	4638      	mov	r0, r7
 800a492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800a496:	bb49      	cbnz	r1, 800a4ec <pbuf_copy_partial+0x78>
 800a498:	4b15      	ldr	r3, [pc, #84]	; (800a4f0 <pbuf_copy_partial+0x7c>)
 800a49a:	f240 420b 	movw	r2, #1035	; 0x40b
 800a49e:	4917      	ldr	r1, [pc, #92]	; (800a4fc <pbuf_copy_partial+0x88>)
 800a4a0:	4647      	mov	r7, r8
 800a4a2:	4815      	ldr	r0, [pc, #84]	; (800a4f8 <pbuf_copy_partial+0x84>)
 800a4a4:	f003 ff72 	bl	800e38c <iprintf>
 800a4a8:	e7f2      	b.n	800a490 <pbuf_copy_partial+0x1c>
    if ((offset != 0) && (offset >= p->len)) {
 800a4aa:	8975      	ldrh	r5, [r6, #10]
 800a4ac:	b153      	cbz	r3, 800a4c4 <pbuf_copy_partial+0x50>
 800a4ae:	42ab      	cmp	r3, r5
 800a4b0:	d308      	bcc.n	800a4c4 <pbuf_copy_partial+0x50>
      offset = (u16_t)(offset - p->len);
 800a4b2:	1b5b      	subs	r3, r3, r5
 800a4b4:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a4b6:	6836      	ldr	r6, [r6, #0]
 800a4b8:	f1b9 0f00 	cmp.w	r9, #0
 800a4bc:	d0e8      	beq.n	800a490 <pbuf_copy_partial+0x1c>
 800a4be:	2e00      	cmp	r6, #0
 800a4c0:	d1f3      	bne.n	800a4aa <pbuf_copy_partial+0x36>
 800a4c2:	e7e5      	b.n	800a490 <pbuf_copy_partial+0x1c>
      buf_copy_len = (u16_t)(p->len - offset);
 800a4c4:	1aec      	subs	r4, r5, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a4c6:	6871      	ldr	r1, [r6, #4]
 800a4c8:	eb08 0007 	add.w	r0, r8, r7
      buf_copy_len = (u16_t)(p->len - offset);
 800a4cc:	b2a4      	uxth	r4, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a4ce:	4419      	add	r1, r3
 800a4d0:	454c      	cmp	r4, r9
 800a4d2:	bf28      	it	cs
 800a4d4:	464c      	movcs	r4, r9
 800a4d6:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800a4d8:	4427      	add	r7, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a4da:	f003 ff41 	bl	800e360 <memcpy>
      len = (u16_t)(len - buf_copy_len);
 800a4de:	eba9 0204 	sub.w	r2, r9, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800a4e2:	b2bf      	uxth	r7, r7
      offset = 0;
 800a4e4:	2300      	movs	r3, #0
      len = (u16_t)(len - buf_copy_len);
 800a4e6:	fa1f f982 	uxth.w	r9, r2
      offset = 0;
 800a4ea:	e7e4      	b.n	800a4b6 <pbuf_copy_partial+0x42>
  u16_t left = 0;
 800a4ec:	2700      	movs	r7, #0
 800a4ee:	e7e3      	b.n	800a4b8 <pbuf_copy_partial+0x44>
 800a4f0:	08014dc4 	.word	0x08014dc4
 800a4f4:	0801505f 	.word	0x0801505f
 800a4f8:	0801342c 	.word	0x0801342c
 800a4fc:	0801507e 	.word	0x0801507e

0800a500 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800a500:	b538      	push	{r3, r4, r5, lr}
 800a502:	4615      	mov	r5, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800a504:	460a      	mov	r2, r1
 800a506:	8929      	ldrh	r1, [r5, #8]
 800a508:	f7ff fdf6 	bl	800a0f8 <pbuf_alloc>
  if (q == NULL) {
 800a50c:	4604      	mov	r4, r0
 800a50e:	b150      	cbz	r0, 800a526 <pbuf_clone+0x26>
    return NULL;
  }
  err = pbuf_copy(q, p);
 800a510:	4629      	mov	r1, r5
 800a512:	f7ff ff2d 	bl	800a370 <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800a516:	b130      	cbz	r0, 800a526 <pbuf_clone+0x26>
 800a518:	4b04      	ldr	r3, [pc, #16]	; (800a52c <pbuf_clone+0x2c>)
 800a51a:	f240 5224 	movw	r2, #1316	; 0x524
 800a51e:	4904      	ldr	r1, [pc, #16]	; (800a530 <pbuf_clone+0x30>)
 800a520:	4804      	ldr	r0, [pc, #16]	; (800a534 <pbuf_clone+0x34>)
 800a522:	f003 ff33 	bl	800e38c <iprintf>
  return q;
}
 800a526:	4620      	mov	r0, r4
 800a528:	bd38      	pop	{r3, r4, r5, pc}
 800a52a:	bf00      	nop
 800a52c:	08014dc4 	.word	0x08014dc4
 800a530:	0801517e 	.word	0x0801517e
 800a534:	0801342c 	.word	0x0801342c

0800a538 <tcp_new_port>:
 */
static u16_t
tcp_new_port(void)
{
  u8_t i;
  u16_t n = 0;
 800a538:	4a12      	ldr	r2, [pc, #72]	; (800a584 <tcp_new_port+0x4c>)
{
 800a53a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800a53e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a540:	8813      	ldrh	r3, [r2, #0]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800a542:	f64f 76ff 	movw	r6, #65535	; 0xffff
  tcp_port++;
 800a546:	3301      	adds	r3, #1
 800a548:	4d0f      	ldr	r5, [pc, #60]	; (800a588 <tcp_new_port+0x50>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800a54a:	2104      	movs	r1, #4
  tcp_port++;
 800a54c:	b29b      	uxth	r3, r3
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800a54e:	42b3      	cmp	r3, r6
 800a550:	bf08      	it	eq
 800a552:	f44f 4340 	moveq.w	r3, #49152	; 0xc000
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800a556:	f855 4b04 	ldr.w	r4, [r5], #4
 800a55a:	6824      	ldr	r4, [r4, #0]
 800a55c:	b934      	cbnz	r4, 800a56c <tcp_new_port+0x34>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800a55e:	3901      	subs	r1, #1
 800a560:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800a564:	d1f7      	bne.n	800a556 <tcp_new_port+0x1e>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800a566:	4618      	mov	r0, r3
 800a568:	8013      	strh	r3, [r2, #0]
 800a56a:	e007      	b.n	800a57c <tcp_new_port+0x44>
      if (pcb->local_port == tcp_port) {
 800a56c:	8ae7      	ldrh	r7, [r4, #22]
 800a56e:	429f      	cmp	r7, r3
 800a570:	d105      	bne.n	800a57e <tcp_new_port+0x46>
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800a572:	3801      	subs	r0, #1
 800a574:	b280      	uxth	r0, r0
 800a576:	2800      	cmp	r0, #0
 800a578:	d1e5      	bne.n	800a546 <tcp_new_port+0xe>
 800a57a:	8013      	strh	r3, [r2, #0]
}
 800a57c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800a57e:	68e4      	ldr	r4, [r4, #12]
 800a580:	e7ec      	b.n	800a55c <tcp_new_port+0x24>
 800a582:	bf00      	nop
 800a584:	2000003c 	.word	0x2000003c
 800a588:	08013314 	.word	0x08013314

0800a58c <tcp_close_shutdown_fin>:
{
 800a58c:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a58e:	4604      	mov	r4, r0
 800a590:	b930      	cbnz	r0, 800a5a0 <tcp_close_shutdown_fin+0x14>
 800a592:	4b13      	ldr	r3, [pc, #76]	; (800a5e0 <tcp_close_shutdown_fin+0x54>)
 800a594:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800a598:	4912      	ldr	r1, [pc, #72]	; (800a5e4 <tcp_close_shutdown_fin+0x58>)
 800a59a:	4813      	ldr	r0, [pc, #76]	; (800a5e8 <tcp_close_shutdown_fin+0x5c>)
 800a59c:	f003 fef6 	bl	800e38c <iprintf>
  switch (pcb->state) {
 800a5a0:	7d23      	ldrb	r3, [r4, #20]
 800a5a2:	2b04      	cmp	r3, #4
 800a5a4:	d003      	beq.n	800a5ae <tcp_close_shutdown_fin+0x22>
 800a5a6:	2b07      	cmp	r3, #7
 800a5a8:	d00c      	beq.n	800a5c4 <tcp_close_shutdown_fin+0x38>
 800a5aa:	2b03      	cmp	r3, #3
 800a5ac:	d108      	bne.n	800a5c0 <tcp_close_shutdown_fin+0x34>
      err = tcp_send_fin(pcb);
 800a5ae:	4620      	mov	r0, r4
 800a5b0:	f002 fdb6 	bl	800d120 <tcp_send_fin>
      if (err == ERR_OK) {
 800a5b4:	b960      	cbnz	r0, 800a5d0 <tcp_close_shutdown_fin+0x44>
        pcb->state = FIN_WAIT_1;
 800a5b6:	2305      	movs	r3, #5
    tcp_output(pcb);
 800a5b8:	4620      	mov	r0, r4
        pcb->state = LAST_ACK;
 800a5ba:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 800a5bc:	f002 ff10 	bl	800d3e0 <tcp_output>
  switch (pcb->state) {
 800a5c0:	2000      	movs	r0, #0
}
 800a5c2:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 800a5c4:	4620      	mov	r0, r4
 800a5c6:	f002 fdab 	bl	800d120 <tcp_send_fin>
      if (err == ERR_OK) {
 800a5ca:	b908      	cbnz	r0, 800a5d0 <tcp_close_shutdown_fin+0x44>
        pcb->state = LAST_ACK;
 800a5cc:	2309      	movs	r3, #9
 800a5ce:	e7f3      	b.n	800a5b8 <tcp_close_shutdown_fin+0x2c>
  } else if (err == ERR_MEM) {
 800a5d0:	1c43      	adds	r3, r0, #1
 800a5d2:	d1f6      	bne.n	800a5c2 <tcp_close_shutdown_fin+0x36>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800a5d4:	8b63      	ldrh	r3, [r4, #26]
 800a5d6:	f043 0308 	orr.w	r3, r3, #8
 800a5da:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 800a5dc:	e7f0      	b.n	800a5c0 <tcp_close_shutdown_fin+0x34>
 800a5de:	bf00      	nop
 800a5e0:	0801518f 	.word	0x0801518f
 800a5e4:	080151f5 	.word	0x080151f5
 800a5e8:	0801342c 	.word	0x0801342c

0800a5ec <tcp_init>:
{
 800a5ec:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a5ee:	f003 ff5b 	bl	800e4a8 <rand>
 800a5f2:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800a5f6:	4b02      	ldr	r3, [pc, #8]	; (800a600 <tcp_init+0x14>)
 800a5f8:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800a5fc:	8018      	strh	r0, [r3, #0]
}
 800a5fe:	bd08      	pop	{r3, pc}
 800a600:	2000003c 	.word	0x2000003c

0800a604 <tcp_free>:
{
 800a604:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a606:	7d03      	ldrb	r3, [r0, #20]
{
 800a608:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d105      	bne.n	800a61a <tcp_free+0x16>
 800a60e:	4b06      	ldr	r3, [pc, #24]	; (800a628 <tcp_free+0x24>)
 800a610:	22d4      	movs	r2, #212	; 0xd4
 800a612:	4906      	ldr	r1, [pc, #24]	; (800a62c <tcp_free+0x28>)
 800a614:	4806      	ldr	r0, [pc, #24]	; (800a630 <tcp_free+0x2c>)
 800a616:	f003 feb9 	bl	800e38c <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 800a61a:	4621      	mov	r1, r4
 800a61c:	2001      	movs	r0, #1
}
 800a61e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 800a622:	f7ff bad7 	b.w	8009bd4 <memp_free>
 800a626:	bf00      	nop
 800a628:	0801518f 	.word	0x0801518f
 800a62c:	08015201 	.word	0x08015201
 800a630:	0801342c 	.word	0x0801342c

0800a634 <tcp_bind>:
{
 800a634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 800a636:	4d23      	ldr	r5, [pc, #140]	; (800a6c4 <tcp_bind+0x90>)
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800a638:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY;
 800a63a:	2900      	cmp	r1, #0
 800a63c:	bf18      	it	ne
 800a63e:	460d      	movne	r5, r1
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800a640:	b948      	cbnz	r0, 800a656 <tcp_bind+0x22>
 800a642:	4b21      	ldr	r3, [pc, #132]	; (800a6c8 <tcp_bind+0x94>)
 800a644:	f240 22a9 	movw	r2, #681	; 0x2a9
 800a648:	4920      	ldr	r1, [pc, #128]	; (800a6cc <tcp_bind+0x98>)
 800a64a:	4821      	ldr	r0, [pc, #132]	; (800a6d0 <tcp_bind+0x9c>)
 800a64c:	f003 fe9e 	bl	800e38c <iprintf>
 800a650:	f06f 000f 	mvn.w	r0, #15
}
 800a654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800a656:	7d03      	ldrb	r3, [r0, #20]
 800a658:	b14b      	cbz	r3, 800a66e <tcp_bind+0x3a>
 800a65a:	4b1b      	ldr	r3, [pc, #108]	; (800a6c8 <tcp_bind+0x94>)
 800a65c:	f240 22ab 	movw	r2, #683	; 0x2ab
 800a660:	491c      	ldr	r1, [pc, #112]	; (800a6d4 <tcp_bind+0xa0>)
 800a662:	481b      	ldr	r0, [pc, #108]	; (800a6d0 <tcp_bind+0x9c>)
 800a664:	f003 fe92 	bl	800e38c <iprintf>
 800a668:	f06f 0005 	mvn.w	r0, #5
 800a66c:	e7f2      	b.n	800a654 <tcp_bind+0x20>
  if (port == 0) {
 800a66e:	b932      	cbnz	r2, 800a67e <tcp_bind+0x4a>
    port = tcp_new_port();
 800a670:	f7ff ff62 	bl	800a538 <tcp_new_port>
    if (port == 0) {
 800a674:	4602      	mov	r2, r0
 800a676:	b950      	cbnz	r0, 800a68e <tcp_bind+0x5a>
      return ERR_BUF;
 800a678:	f06f 0001 	mvn.w	r0, #1
 800a67c:	e7ea      	b.n	800a654 <tcp_bind+0x20>
 800a67e:	4816      	ldr	r0, [pc, #88]	; (800a6d8 <tcp_bind+0xa4>)
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800a680:	f850 1b04 	ldr.w	r1, [r0], #4
 800a684:	6809      	ldr	r1, [r1, #0]
 800a686:	b971      	cbnz	r1, 800a6a6 <tcp_bind+0x72>
    for (i = 0; i < max_pcb_list; i++) {
 800a688:	3301      	adds	r3, #1
 800a68a:	2b04      	cmp	r3, #4
 800a68c:	d1f8      	bne.n	800a680 <tcp_bind+0x4c>
  if (!ip_addr_isany(ipaddr)
 800a68e:	682b      	ldr	r3, [r5, #0]
 800a690:	b103      	cbz	r3, 800a694 <tcp_bind+0x60>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800a692:	6023      	str	r3, [r4, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800a694:	4b11      	ldr	r3, [pc, #68]	; (800a6dc <tcp_bind+0xa8>)
  pcb->local_port = port;
 800a696:	82e2      	strh	r2, [r4, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800a698:	681a      	ldr	r2, [r3, #0]
 800a69a:	601c      	str	r4, [r3, #0]
 800a69c:	60e2      	str	r2, [r4, #12]
 800a69e:	f003 f975 	bl	800d98c <tcp_timer_needed>
  return ERR_OK;
 800a6a2:	2000      	movs	r0, #0
 800a6a4:	e7d6      	b.n	800a654 <tcp_bind+0x20>
        if (cpcb->local_port == port) {
 800a6a6:	8ace      	ldrh	r6, [r1, #22]
 800a6a8:	4296      	cmp	r6, r2
 800a6aa:	d105      	bne.n	800a6b8 <tcp_bind+0x84>
                (ip_addr_isany(&cpcb->local_ip) ||
 800a6ac:	680f      	ldr	r7, [r1, #0]
 800a6ae:	b12f      	cbz	r7, 800a6bc <tcp_bind+0x88>
                 ip_addr_isany(ipaddr) ||
 800a6b0:	682e      	ldr	r6, [r5, #0]
 800a6b2:	b11e      	cbz	r6, 800a6bc <tcp_bind+0x88>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800a6b4:	42b7      	cmp	r7, r6
 800a6b6:	d001      	beq.n	800a6bc <tcp_bind+0x88>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800a6b8:	68c9      	ldr	r1, [r1, #12]
 800a6ba:	e7e4      	b.n	800a686 <tcp_bind+0x52>
              return ERR_USE;
 800a6bc:	f06f 0007 	mvn.w	r0, #7
 800a6c0:	e7c8      	b.n	800a654 <tcp_bind+0x20>
 800a6c2:	bf00      	nop
 800a6c4:	08013240 	.word	0x08013240
 800a6c8:	0801518f 	.word	0x0801518f
 800a6cc:	08015212 	.word	0x08015212
 800a6d0:	0801342c 	.word	0x0801342c
 800a6d4:	08015228 	.word	0x08015228
 800a6d8:	08013314 	.word	0x08013314
 800a6dc:	20010d60 	.word	0x20010d60

0800a6e0 <tcp_listen_with_backlog_and_err>:
{
 800a6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6e2:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800a6e4:	4605      	mov	r5, r0
 800a6e6:	b968      	cbnz	r0, 800a704 <tcp_listen_with_backlog_and_err+0x24>
 800a6e8:	4b29      	ldr	r3, [pc, #164]	; (800a790 <tcp_listen_with_backlog_and_err+0xb0>)
 800a6ea:	f240 3259 	movw	r2, #857	; 0x359
 800a6ee:	4929      	ldr	r1, [pc, #164]	; (800a794 <tcp_listen_with_backlog_and_err+0xb4>)
  struct tcp_pcb_listen *lpcb = NULL;
 800a6f0:	462c      	mov	r4, r5
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800a6f2:	4829      	ldr	r0, [pc, #164]	; (800a798 <tcp_listen_with_backlog_and_err+0xb8>)
 800a6f4:	f003 fe4a 	bl	800e38c <iprintf>
 800a6f8:	f06f 030f 	mvn.w	r3, #15
  if (err != NULL) {
 800a6fc:	b106      	cbz	r6, 800a700 <tcp_listen_with_backlog_and_err+0x20>
    *err = res;
 800a6fe:	7033      	strb	r3, [r6, #0]
}
 800a700:	4620      	mov	r0, r4
 800a702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800a704:	7d07      	ldrb	r7, [r0, #20]
 800a706:	b157      	cbz	r7, 800a71e <tcp_listen_with_backlog_and_err+0x3e>
 800a708:	4b21      	ldr	r3, [pc, #132]	; (800a790 <tcp_listen_with_backlog_and_err+0xb0>)
 800a70a:	f240 325a 	movw	r2, #858	; 0x35a
 800a70e:	4923      	ldr	r1, [pc, #140]	; (800a79c <tcp_listen_with_backlog_and_err+0xbc>)
  struct tcp_pcb_listen *lpcb = NULL;
 800a710:	2400      	movs	r4, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800a712:	4821      	ldr	r0, [pc, #132]	; (800a798 <tcp_listen_with_backlog_and_err+0xb8>)
 800a714:	f003 fe3a 	bl	800e38c <iprintf>
 800a718:	f06f 030e 	mvn.w	r3, #14
 800a71c:	e7ee      	b.n	800a6fc <tcp_listen_with_backlog_and_err+0x1c>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800a71e:	2002      	movs	r0, #2
 800a720:	f7ff fa3c 	bl	8009b9c <memp_malloc>
  if (lpcb == NULL) {
 800a724:	4604      	mov	r4, r0
 800a726:	2800      	cmp	r0, #0
 800a728:	d02f      	beq.n	800a78a <tcp_listen_with_backlog_and_err+0xaa>
  lpcb->callback_arg = pcb->callback_arg;
 800a72a:	692b      	ldr	r3, [r5, #16]
  lpcb->state = LISTEN;
 800a72c:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 800a72e:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 800a730:	8aeb      	ldrh	r3, [r5, #22]
  lpcb->state = LISTEN;
 800a732:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 800a734:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 800a736:	7d6a      	ldrb	r2, [r5, #21]
 800a738:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 800a73a:	7a6a      	ldrb	r2, [r5, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800a73c:	7207      	strb	r7, [r0, #8]
  lpcb->so_options = pcb->so_options;
 800a73e:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 800a740:	7aea      	ldrb	r2, [r5, #11]
 800a742:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 800a744:	7aaa      	ldrb	r2, [r5, #10]
 800a746:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800a748:	682a      	ldr	r2, [r5, #0]
 800a74a:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 800a74c:	b13b      	cbz	r3, 800a75e <tcp_listen_with_backlog_and_err+0x7e>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800a74e:	4a14      	ldr	r2, [pc, #80]	; (800a7a0 <tcp_listen_with_backlog_and_err+0xc0>)
 800a750:	6813      	ldr	r3, [r2, #0]
 800a752:	42ab      	cmp	r3, r5
 800a754:	d111      	bne.n	800a77a <tcp_listen_with_backlog_and_err+0x9a>
 800a756:	68eb      	ldr	r3, [r5, #12]
 800a758:	6013      	str	r3, [r2, #0]
 800a75a:	2300      	movs	r3, #0
 800a75c:	60eb      	str	r3, [r5, #12]
  tcp_free(pcb);
 800a75e:	4628      	mov	r0, r5
 800a760:	f7ff ff50 	bl	800a604 <tcp_free>
  lpcb->accept = tcp_accept_null;
 800a764:	4b0f      	ldr	r3, [pc, #60]	; (800a7a4 <tcp_listen_with_backlog_and_err+0xc4>)
 800a766:	61a3      	str	r3, [r4, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800a768:	4b0f      	ldr	r3, [pc, #60]	; (800a7a8 <tcp_listen_with_backlog_and_err+0xc8>)
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	601c      	str	r4, [r3, #0]
 800a76e:	60e2      	str	r2, [r4, #12]
 800a770:	f003 f90c 	bl	800d98c <tcp_timer_needed>
  res = ERR_OK;
 800a774:	2300      	movs	r3, #0
 800a776:	e7c1      	b.n	800a6fc <tcp_listen_with_backlog_and_err+0x1c>
 800a778:	4613      	mov	r3, r2
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d0ed      	beq.n	800a75a <tcp_listen_with_backlog_and_err+0x7a>
 800a77e:	68da      	ldr	r2, [r3, #12]
 800a780:	42aa      	cmp	r2, r5
 800a782:	d1f9      	bne.n	800a778 <tcp_listen_with_backlog_and_err+0x98>
 800a784:	68ea      	ldr	r2, [r5, #12]
 800a786:	60da      	str	r2, [r3, #12]
 800a788:	e7e7      	b.n	800a75a <tcp_listen_with_backlog_and_err+0x7a>
    res = ERR_MEM;
 800a78a:	f04f 33ff 	mov.w	r3, #4294967295
 800a78e:	e7b5      	b.n	800a6fc <tcp_listen_with_backlog_and_err+0x1c>
 800a790:	0801518f 	.word	0x0801518f
 800a794:	08015250 	.word	0x08015250
 800a798:	0801342c 	.word	0x0801342c
 800a79c:	0801527d 	.word	0x0801527d
 800a7a0:	20010d60 	.word	0x20010d60
 800a7a4:	0800b35d 	.word	0x0800b35d
 800a7a8:	20010d5c 	.word	0x20010d5c

0800a7ac <tcp_update_rcv_ann_wnd>:
{
 800a7ac:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800a7ae:	4604      	mov	r4, r0
 800a7b0:	b930      	cbnz	r0, 800a7c0 <tcp_update_rcv_ann_wnd+0x14>
 800a7b2:	4b15      	ldr	r3, [pc, #84]	; (800a808 <tcp_update_rcv_ann_wnd+0x5c>)
 800a7b4:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a7b8:	4914      	ldr	r1, [pc, #80]	; (800a80c <tcp_update_rcv_ann_wnd+0x60>)
 800a7ba:	4815      	ldr	r0, [pc, #84]	; (800a810 <tcp_update_rcv_ann_wnd+0x64>)
 800a7bc:	f003 fde6 	bl	800e38c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800a7c0:	8d21      	ldrh	r1, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800a7c2:	f240 56b4 	movw	r6, #1460	; 0x5b4
 800a7c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a7c8:	8e62      	ldrh	r2, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800a7ca:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800a7cc:	1ac8      	subs	r0, r1, r3
 800a7ce:	42b2      	cmp	r2, r6
 800a7d0:	4428      	add	r0, r5
 800a7d2:	bf94      	ite	ls
 800a7d4:	1a82      	subls	r2, r0, r2
 800a7d6:	1b82      	subhi	r2, r0, r6
 800a7d8:	2a00      	cmp	r2, #0
 800a7da:	db01      	blt.n	800a7e0 <tcp_update_rcv_ann_wnd+0x34>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800a7dc:	8561      	strh	r1, [r4, #42]	; 0x2a
}
 800a7de:	bd70      	pop	{r4, r5, r6, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800a7e0:	1aea      	subs	r2, r5, r3
 800a7e2:	2a00      	cmp	r2, #0
 800a7e4:	dd02      	ble.n	800a7ec <tcp_update_rcv_ann_wnd+0x40>
      pcb->rcv_ann_wnd = 0;
 800a7e6:	2000      	movs	r0, #0
 800a7e8:	8560      	strh	r0, [r4, #42]	; 0x2a
 800a7ea:	e7f8      	b.n	800a7de <tcp_update_rcv_ann_wnd+0x32>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800a7ec:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800a7ee:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800a7f2:	d306      	bcc.n	800a802 <tcp_update_rcv_ann_wnd+0x56>
 800a7f4:	4b04      	ldr	r3, [pc, #16]	; (800a808 <tcp_update_rcv_ann_wnd+0x5c>)
 800a7f6:	f240 32b6 	movw	r2, #950	; 0x3b6
 800a7fa:	4906      	ldr	r1, [pc, #24]	; (800a814 <tcp_update_rcv_ann_wnd+0x68>)
 800a7fc:	4804      	ldr	r0, [pc, #16]	; (800a810 <tcp_update_rcv_ann_wnd+0x64>)
 800a7fe:	f003 fdc5 	bl	800e38c <iprintf>
    return 0;
 800a802:	2000      	movs	r0, #0
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800a804:	8565      	strh	r5, [r4, #42]	; 0x2a
 800a806:	e7ea      	b.n	800a7de <tcp_update_rcv_ann_wnd+0x32>
 800a808:	0801518f 	.word	0x0801518f
 800a80c:	080152b4 	.word	0x080152b4
 800a810:	0801342c 	.word	0x0801342c
 800a814:	080152d8 	.word	0x080152d8

0800a818 <tcp_recved>:
{
 800a818:	b570      	push	{r4, r5, r6, lr}
 800a81a:	460c      	mov	r4, r1
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800a81c:	4605      	mov	r5, r0
 800a81e:	b940      	cbnz	r0, 800a832 <tcp_recved+0x1a>
 800a820:	4b18      	ldr	r3, [pc, #96]	; (800a884 <tcp_recved+0x6c>)
 800a822:	f240 32cf 	movw	r2, #975	; 0x3cf
 800a826:	4918      	ldr	r1, [pc, #96]	; (800a888 <tcp_recved+0x70>)
 800a828:	4818      	ldr	r0, [pc, #96]	; (800a88c <tcp_recved+0x74>)
}
 800a82a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800a82e:	f003 bdad 	b.w	800e38c <iprintf>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800a832:	7d03      	ldrb	r3, [r0, #20]
 800a834:	2b01      	cmp	r3, #1
 800a836:	d106      	bne.n	800a846 <tcp_recved+0x2e>
 800a838:	4b12      	ldr	r3, [pc, #72]	; (800a884 <tcp_recved+0x6c>)
 800a83a:	f240 32d2 	movw	r2, #978	; 0x3d2
 800a83e:	4914      	ldr	r1, [pc, #80]	; (800a890 <tcp_recved+0x78>)
 800a840:	4812      	ldr	r0, [pc, #72]	; (800a88c <tcp_recved+0x74>)
 800a842:	f003 fda3 	bl	800e38c <iprintf>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800a846:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800a848:	f640 3368 	movw	r3, #2920	; 0xb68
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800a84c:	1911      	adds	r1, r2, r4
 800a84e:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800a850:	4299      	cmp	r1, r3
 800a852:	d813      	bhi.n	800a87c <tcp_recved+0x64>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800a854:	428a      	cmp	r2, r1
 800a856:	bf88      	it	hi
 800a858:	4619      	movhi	r1, r3
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800a85a:	4628      	mov	r0, r5
 800a85c:	8529      	strh	r1, [r5, #40]	; 0x28
 800a85e:	f7ff ffa5 	bl	800a7ac <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800a862:	f240 23d9 	movw	r3, #729	; 0x2d9
 800a866:	4298      	cmp	r0, r3
 800a868:	d90a      	bls.n	800a880 <tcp_recved+0x68>
    tcp_ack_now(pcb);
 800a86a:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 800a86c:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 800a86e:	f043 0302 	orr.w	r3, r3, #2
 800a872:	836b      	strh	r3, [r5, #26]
}
 800a874:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 800a878:	f002 bdb2 	b.w	800d3e0 <tcp_output>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800a87c:	4619      	mov	r1, r3
 800a87e:	e7ec      	b.n	800a85a <tcp_recved+0x42>
}
 800a880:	bd70      	pop	{r4, r5, r6, pc}
 800a882:	bf00      	nop
 800a884:	0801518f 	.word	0x0801518f
 800a888:	080152f2 	.word	0x080152f2
 800a88c:	0801342c 	.word	0x0801342c
 800a890:	0801530a 	.word	0x0801530a

0800a894 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800a894:	b510      	push	{r4, lr}
  if (seg != NULL) {
 800a896:	4604      	mov	r4, r0
 800a898:	b148      	cbz	r0, 800a8ae <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 800a89a:	6840      	ldr	r0, [r0, #4]
 800a89c:	b108      	cbz	r0, 800a8a2 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 800a89e:	f7ff fbc3 	bl	800a028 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800a8a2:	4621      	mov	r1, r4
 800a8a4:	2003      	movs	r0, #3
  }
}
 800a8a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 800a8aa:	f7ff b993 	b.w	8009bd4 <memp_free>
}
 800a8ae:	bd10      	pop	{r4, pc}

0800a8b0 <tcp_segs_free>:
{
 800a8b0:	b510      	push	{r4, lr}
  while (seg != NULL) {
 800a8b2:	b900      	cbnz	r0, 800a8b6 <tcp_segs_free+0x6>
}
 800a8b4:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 800a8b6:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 800a8b8:	f7ff ffec 	bl	800a894 <tcp_seg_free>
    seg = next;
 800a8bc:	4620      	mov	r0, r4
 800a8be:	e7f8      	b.n	800a8b2 <tcp_segs_free+0x2>

0800a8c0 <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800a8c0:	b100      	cbz	r0, 800a8c4 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 800a8c2:	6101      	str	r1, [r0, #16]
  }
}
 800a8c4:	4770      	bx	lr
	...

0800a8c8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800a8c8:	b538      	push	{r3, r4, r5, lr}
 800a8ca:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a8cc:	4604      	mov	r4, r0
 800a8ce:	b158      	cbz	r0, 800a8e8 <tcp_recv+0x20>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800a8d0:	7d03      	ldrb	r3, [r0, #20]
 800a8d2:	2b01      	cmp	r3, #1
 800a8d4:	d106      	bne.n	800a8e4 <tcp_recv+0x1c>
 800a8d6:	4b05      	ldr	r3, [pc, #20]	; (800a8ec <tcp_recv+0x24>)
 800a8d8:	f240 72df 	movw	r2, #2015	; 0x7df
 800a8dc:	4904      	ldr	r1, [pc, #16]	; (800a8f0 <tcp_recv+0x28>)
 800a8de:	4805      	ldr	r0, [pc, #20]	; (800a8f4 <tcp_recv+0x2c>)
 800a8e0:	f003 fd54 	bl	800e38c <iprintf>
    pcb->recv = recv;
 800a8e4:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  }
}
 800a8e8:	bd38      	pop	{r3, r4, r5, pc}
 800a8ea:	bf00      	nop
 800a8ec:	0801518f 	.word	0x0801518f
 800a8f0:	08015349 	.word	0x08015349
 800a8f4:	0801342c 	.word	0x0801342c

0800a8f8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800a8f8:	b538      	push	{r3, r4, r5, lr}
 800a8fa:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a8fc:	4604      	mov	r4, r0
 800a8fe:	b150      	cbz	r0, 800a916 <tcp_sent+0x1e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800a900:	7d03      	ldrb	r3, [r0, #20]
 800a902:	2b01      	cmp	r3, #1
 800a904:	d106      	bne.n	800a914 <tcp_sent+0x1c>
 800a906:	4b04      	ldr	r3, [pc, #16]	; (800a918 <tcp_sent+0x20>)
 800a908:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800a90c:	4903      	ldr	r1, [pc, #12]	; (800a91c <tcp_sent+0x24>)
 800a90e:	4804      	ldr	r0, [pc, #16]	; (800a920 <tcp_sent+0x28>)
 800a910:	f003 fd3c 	bl	800e38c <iprintf>
    pcb->sent = sent;
 800a914:	67e5      	str	r5, [r4, #124]	; 0x7c
  }
}
 800a916:	bd38      	pop	{r3, r4, r5, pc}
 800a918:	0801518f 	.word	0x0801518f
 800a91c:	08015370 	.word	0x08015370
 800a920:	0801342c 	.word	0x0801342c

0800a924 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800a924:	b538      	push	{r3, r4, r5, lr}
 800a926:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a928:	4604      	mov	r4, r0
 800a92a:	b158      	cbz	r0, 800a944 <tcp_err+0x20>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800a92c:	7d03      	ldrb	r3, [r0, #20]
 800a92e:	2b01      	cmp	r3, #1
 800a930:	d106      	bne.n	800a940 <tcp_err+0x1c>
 800a932:	4b05      	ldr	r3, [pc, #20]	; (800a948 <tcp_err+0x24>)
 800a934:	f640 020d 	movw	r2, #2061	; 0x80d
 800a938:	4904      	ldr	r1, [pc, #16]	; (800a94c <tcp_err+0x28>)
 800a93a:	4805      	ldr	r0, [pc, #20]	; (800a950 <tcp_err+0x2c>)
 800a93c:	f003 fd26 	bl	800e38c <iprintf>
    pcb->errf = err;
 800a940:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  }
}
 800a944:	bd38      	pop	{r3, r4, r5, pc}
 800a946:	bf00      	nop
 800a948:	0801518f 	.word	0x0801518f
 800a94c:	08015397 	.word	0x08015397
 800a950:	0801342c 	.word	0x0801342c

0800a954 <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800a954:	b118      	cbz	r0, 800a95e <tcp_accept+0xa>
 800a956:	7d03      	ldrb	r3, [r0, #20]
 800a958:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
 800a95a:	bf08      	it	eq
 800a95c:	6181      	streq	r1, [r0, #24]
  }
}
 800a95e:	4770      	bx	lr

0800a960 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800a960:	b570      	push	{r4, r5, r6, lr}
 800a962:	460e      	mov	r6, r1
 800a964:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800a966:	4604      	mov	r4, r0
 800a968:	b940      	cbnz	r0, 800a97c <tcp_poll+0x1c>
 800a96a:	4b0b      	ldr	r3, [pc, #44]	; (800a998 <tcp_poll+0x38>)
 800a96c:	f640 023d 	movw	r2, #2109	; 0x83d
 800a970:	490a      	ldr	r1, [pc, #40]	; (800a99c <tcp_poll+0x3c>)
 800a972:	480b      	ldr	r0, [pc, #44]	; (800a9a0 <tcp_poll+0x40>)
  pcb->poll = poll;
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
}
 800a974:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800a978:	f003 bd08 	b.w	800e38c <iprintf>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800a97c:	7d03      	ldrb	r3, [r0, #20]
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d106      	bne.n	800a990 <tcp_poll+0x30>
 800a982:	4b05      	ldr	r3, [pc, #20]	; (800a998 <tcp_poll+0x38>)
 800a984:	f640 023e 	movw	r2, #2110	; 0x83e
 800a988:	4906      	ldr	r1, [pc, #24]	; (800a9a4 <tcp_poll+0x44>)
 800a98a:	4805      	ldr	r0, [pc, #20]	; (800a9a0 <tcp_poll+0x40>)
 800a98c:	f003 fcfe 	bl	800e38c <iprintf>
  pcb->poll = poll;
 800a990:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pcb->pollinterval = interval;
 800a994:	7765      	strb	r5, [r4, #29]
}
 800a996:	bd70      	pop	{r4, r5, r6, pc}
 800a998:	0801518f 	.word	0x0801518f
 800a99c:	080153bd 	.word	0x080153bd
 800a9a0:	0801342c 	.word	0x0801342c
 800a9a4:	080153d3 	.word	0x080153d3

0800a9a8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800a9a8:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800a9aa:	4604      	mov	r4, r0
 800a9ac:	b940      	cbnz	r0, 800a9c0 <tcp_pcb_purge+0x18>
 800a9ae:	4b11      	ldr	r3, [pc, #68]	; (800a9f4 <tcp_pcb_purge+0x4c>)
 800a9b0:	f640 0251 	movw	r2, #2129	; 0x851
 800a9b4:	4910      	ldr	r1, [pc, #64]	; (800a9f8 <tcp_pcb_purge+0x50>)
 800a9b6:	4811      	ldr	r0, [pc, #68]	; (800a9fc <tcp_pcb_purge+0x54>)
    pcb->unacked = pcb->unsent = NULL;
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
#endif /* TCP_OVERSIZE */
  }
}
 800a9b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800a9bc:	f003 bce6 	b.w	800e38c <iprintf>
  if (pcb->state != CLOSED &&
 800a9c0:	7d03      	ldrb	r3, [r0, #20]
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	d915      	bls.n	800a9f2 <tcp_pcb_purge+0x4a>
 800a9c6:	2b0a      	cmp	r3, #10
 800a9c8:	d013      	beq.n	800a9f2 <tcp_pcb_purge+0x4a>
    if (pcb->refused_data != NULL) {
 800a9ca:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800a9cc:	b118      	cbz	r0, 800a9d6 <tcp_pcb_purge+0x2e>
      pbuf_free(pcb->refused_data);
 800a9ce:	f7ff fb2b 	bl	800a028 <pbuf_free>
      pcb->refused_data = NULL;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	6763      	str	r3, [r4, #116]	; 0x74
    pcb->rtime = -1;
 800a9d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
 800a9da:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    pcb->rtime = -1;
 800a9dc:	8623      	strh	r3, [r4, #48]	; 0x30
    tcp_segs_free(pcb->unsent);
 800a9de:	f7ff ff67 	bl	800a8b0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800a9e2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800a9e4:	f7ff ff64 	bl	800a8b0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
    pcb->unsent_oversize = 0;
 800a9ee:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
}
 800a9f2:	bd10      	pop	{r4, pc}
 800a9f4:	0801518f 	.word	0x0801518f
 800a9f8:	080153f1 	.word	0x080153f1
 800a9fc:	0801342c 	.word	0x0801342c

0800aa00 <tcp_slowtmr>:
{
 800aa00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 800aa04:	4eaf      	ldr	r6, [pc, #700]	; (800acc4 <tcp_slowtmr+0x2c4>)
{
 800aa06:	b087      	sub	sp, #28
 800aa08:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 800acd0 <tcp_slowtmr+0x2d0>
  ++tcp_ticks;
 800aa0c:	6833      	ldr	r3, [r6, #0]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800aa0e:	4fae      	ldr	r7, [pc, #696]	; (800acc8 <tcp_slowtmr+0x2c8>)
  ++tcp_ticks;
 800aa10:	3301      	adds	r3, #1
 800aa12:	6033      	str	r3, [r6, #0]
  ++tcp_timer_ctr;
 800aa14:	4bad      	ldr	r3, [pc, #692]	; (800accc <tcp_slowtmr+0x2cc>)
 800aa16:	781a      	ldrb	r2, [r3, #0]
 800aa18:	9304      	str	r3, [sp, #16]
 800aa1a:	3201      	adds	r2, #1
 800aa1c:	701a      	strb	r2, [r3, #0]
  pcb = tcp_active_pcbs;
 800aa1e:	4bac      	ldr	r3, [pc, #688]	; (800acd0 <tcp_slowtmr+0x2d0>)
  prev = NULL;
 800aa20:	f04f 0900 	mov.w	r9, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800aa24:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 800acf8 <tcp_slowtmr+0x2f8>
  pcb = tcp_active_pcbs;
 800aa28:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 800aa2a:	b96c      	cbnz	r4, 800aa48 <tcp_slowtmr+0x48>
  pcb = tcp_tw_pcbs;
 800aa2c:	4fa9      	ldr	r7, [pc, #676]	; (800acd4 <tcp_slowtmr+0x2d4>)
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800aa2e:	f8df 8298 	ldr.w	r8, [pc, #664]	; 800acc8 <tcp_slowtmr+0x2c8>
  pcb = tcp_tw_pcbs;
 800aa32:	683d      	ldr	r5, [r7, #0]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800aa34:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 800acfc <tcp_slowtmr+0x2fc>
 800aa38:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 800acf8 <tcp_slowtmr+0x2f8>
  while (pcb != NULL) {
 800aa3c:	2d00      	cmp	r5, #0
 800aa3e:	f040 81aa 	bne.w	800ad96 <tcp_slowtmr+0x396>
}
 800aa42:	b007      	add	sp, #28
 800aa44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800aa48:	7d23      	ldrb	r3, [r4, #20]
 800aa4a:	b933      	cbnz	r3, 800aa5a <tcp_slowtmr+0x5a>
 800aa4c:	463b      	mov	r3, r7
 800aa4e:	f240 42be 	movw	r2, #1214	; 0x4be
 800aa52:	49a1      	ldr	r1, [pc, #644]	; (800acd8 <tcp_slowtmr+0x2d8>)
 800aa54:	4640      	mov	r0, r8
 800aa56:	f003 fc99 	bl	800e38c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800aa5a:	7d23      	ldrb	r3, [r4, #20]
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	d106      	bne.n	800aa6e <tcp_slowtmr+0x6e>
 800aa60:	463b      	mov	r3, r7
 800aa62:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800aa66:	499d      	ldr	r1, [pc, #628]	; (800acdc <tcp_slowtmr+0x2dc>)
 800aa68:	4640      	mov	r0, r8
 800aa6a:	f003 fc8f 	bl	800e38c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800aa6e:	7d23      	ldrb	r3, [r4, #20]
 800aa70:	2b0a      	cmp	r3, #10
 800aa72:	d106      	bne.n	800aa82 <tcp_slowtmr+0x82>
 800aa74:	463b      	mov	r3, r7
 800aa76:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800aa7a:	4999      	ldr	r1, [pc, #612]	; (800ace0 <tcp_slowtmr+0x2e0>)
 800aa7c:	4640      	mov	r0, r8
 800aa7e:	f003 fc85 	bl	800e38c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800aa82:	9b04      	ldr	r3, [sp, #16]
 800aa84:	7fa2      	ldrb	r2, [r4, #30]
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d103      	bne.n	800aa94 <tcp_slowtmr+0x94>
      pcb = pcb->next;
 800aa8c:	68e5      	ldr	r5, [r4, #12]
      continue;
 800aa8e:	46a1      	mov	r9, r4
 800aa90:	462c      	mov	r4, r5
 800aa92:	e7ca      	b.n	800aa2a <tcp_slowtmr+0x2a>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800aa94:	7d22      	ldrb	r2, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 800aa96:	77a3      	strb	r3, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800aa98:	2a02      	cmp	r2, #2
 800aa9a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800aa9e:	d178      	bne.n	800ab92 <tcp_slowtmr+0x192>
 800aaa0:	2b05      	cmp	r3, #5
 800aaa2:	d978      	bls.n	800ab96 <tcp_slowtmr+0x196>
      ++pcb_remove;
 800aaa4:	f04f 0b01 	mov.w	fp, #1
    if (pcb->state == FIN_WAIT_2) {
 800aaa8:	7d23      	ldrb	r3, [r4, #20]
 800aaaa:	2b06      	cmp	r3, #6
 800aaac:	d10b      	bne.n	800aac6 <tcp_slowtmr+0xc6>
      if (pcb->flags & TF_RXCLOSED) {
 800aaae:	8b62      	ldrh	r2, [r4, #26]
 800aab0:	06d2      	lsls	r2, r2, #27
 800aab2:	d508      	bpl.n	800aac6 <tcp_slowtmr+0xc6>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800aab4:	6832      	ldr	r2, [r6, #0]
 800aab6:	6a21      	ldr	r1, [r4, #32]
 800aab8:	1a52      	subs	r2, r2, r1
 800aaba:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 800aabc:	bf84      	itt	hi
 800aabe:	f10b 0b01 	addhi.w	fp, fp, #1
 800aac2:	fa5f fb8b 	uxtbhi.w	fp, fp
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800aac6:	7a65      	ldrb	r5, [r4, #9]
 800aac8:	f015 0508 	ands.w	r5, r5, #8
 800aacc:	d019      	beq.n	800ab02 <tcp_slowtmr+0x102>
 800aace:	2b04      	cmp	r3, #4
 800aad0:	d002      	beq.n	800aad8 <tcp_slowtmr+0xd8>
        ((pcb->state == ESTABLISHED) ||
 800aad2:	2b07      	cmp	r3, #7
 800aad4:	f040 8126 	bne.w	800ad24 <tcp_slowtmr+0x324>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800aad8:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 800aadc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800aae0:	6831      	ldr	r1, [r6, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800aae2:	f505 2224 	add.w	r2, r5, #671744	; 0xa4000
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800aae6:	6a23      	ldr	r3, [r4, #32]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800aae8:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800aaec:	1ac9      	subs	r1, r1, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800aaee:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800aaf2:	4291      	cmp	r1, r2
 800aaf4:	f240 8104 	bls.w	800ad00 <tcp_slowtmr+0x300>
        ++pcb_remove;
 800aaf8:	f10b 0b01 	add.w	fp, fp, #1
        ++pcb_reset;
 800aafc:	2501      	movs	r5, #1
        ++pcb_remove;
 800aafe:	fa5f fb8b 	uxtb.w	fp, fp
    if (pcb->state == SYN_RCVD) {
 800ab02:	7d23      	ldrb	r3, [r4, #20]
 800ab04:	2b03      	cmp	r3, #3
 800ab06:	f040 810f 	bne.w	800ad28 <tcp_slowtmr+0x328>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ab0a:	6833      	ldr	r3, [r6, #0]
 800ab0c:	6a22      	ldr	r2, [r4, #32]
 800ab0e:	1a9b      	subs	r3, r3, r2
 800ab10:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ab12:	d803      	bhi.n	800ab1c <tcp_slowtmr+0x11c>
    if (pcb_remove) {
 800ab14:	f1bb 0f00 	cmp.w	fp, #0
 800ab18:	f000 811b 	beq.w	800ad52 <tcp_slowtmr+0x352>
      tcp_pcb_purge(pcb);
 800ab1c:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 800ab1e:	f8d4 b08c 	ldr.w	fp, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 800ab22:	f7ff ff41 	bl	800a9a8 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ab26:	f8da 3000 	ldr.w	r3, [sl]
      if (prev != NULL) {
 800ab2a:	f1b9 0f00 	cmp.w	r9, #0
 800ab2e:	f000 8103 	beq.w	800ad38 <tcp_slowtmr+0x338>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ab32:	42a3      	cmp	r3, r4
 800ab34:	d106      	bne.n	800ab44 <tcp_slowtmr+0x144>
 800ab36:	463b      	mov	r3, r7
 800ab38:	f240 526d 	movw	r2, #1389	; 0x56d
 800ab3c:	4969      	ldr	r1, [pc, #420]	; (800ace4 <tcp_slowtmr+0x2e4>)
 800ab3e:	4640      	mov	r0, r8
 800ab40:	f003 fc24 	bl	800e38c <iprintf>
        prev->next = pcb->next;
 800ab44:	68e3      	ldr	r3, [r4, #12]
 800ab46:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 800ab4a:	b15d      	cbz	r5, 800ab64 <tcp_slowtmr+0x164>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ab4c:	8b23      	ldrh	r3, [r4, #24]
 800ab4e:	4620      	mov	r0, r4
 800ab50:	9302      	str	r3, [sp, #8]
 800ab52:	8ae3      	ldrh	r3, [r4, #22]
 800ab54:	9301      	str	r3, [sp, #4]
 800ab56:	1d23      	adds	r3, r4, #4
 800ab58:	9300      	str	r3, [sp, #0]
 800ab5a:	4623      	mov	r3, r4
 800ab5c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ab5e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800ab60:	f002 fbc6 	bl	800d2f0 <tcp_rst>
      err_arg = pcb->callback_arg;
 800ab64:	6923      	ldr	r3, [r4, #16]
      tcp_free(pcb2);
 800ab66:	4620      	mov	r0, r4
      pcb = pcb->next;
 800ab68:	68e5      	ldr	r5, [r4, #12]
      err_arg = pcb->callback_arg;
 800ab6a:	9305      	str	r3, [sp, #20]
      tcp_free(pcb2);
 800ab6c:	f7ff fd4a 	bl	800a604 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800ab70:	4c5d      	ldr	r4, [pc, #372]	; (800ace8 <tcp_slowtmr+0x2e8>)
 800ab72:	2200      	movs	r2, #0
 800ab74:	7022      	strb	r2, [r4, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ab76:	f1bb 0f00 	cmp.w	fp, #0
 800ab7a:	d008      	beq.n	800ab8e <tcp_slowtmr+0x18e>
 800ab7c:	9b05      	ldr	r3, [sp, #20]
 800ab7e:	f06f 010c 	mvn.w	r1, #12
 800ab82:	4618      	mov	r0, r3
 800ab84:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 800ab86:	7823      	ldrb	r3, [r4, #0]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	f47f af48 	bne.w	800aa1e <tcp_slowtmr+0x1e>
 800ab8e:	464c      	mov	r4, r9
 800ab90:	e77d      	b.n	800aa8e <tcp_slowtmr+0x8e>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ab92:	2b0b      	cmp	r3, #11
 800ab94:	e785      	b.n	800aaa2 <tcp_slowtmr+0xa2>
      if (pcb->persist_backoff > 0) {
 800ab96:	f894 b095 	ldrb.w	fp, [r4, #149]	; 0x95
 800ab9a:	f1bb 0f00 	cmp.w	fp, #0
 800ab9e:	d045      	beq.n	800ac2c <tcp_slowtmr+0x22c>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800aba0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800aba2:	b133      	cbz	r3, 800abb2 <tcp_slowtmr+0x1b2>
 800aba4:	463b      	mov	r3, r7
 800aba6:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800abaa:	4950      	ldr	r1, [pc, #320]	; (800acec <tcp_slowtmr+0x2ec>)
 800abac:	4640      	mov	r0, r8
 800abae:	f003 fbed 	bl	800e38c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800abb2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800abb4:	b933      	cbnz	r3, 800abc4 <tcp_slowtmr+0x1c4>
 800abb6:	463b      	mov	r3, r7
 800abb8:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800abbc:	494c      	ldr	r1, [pc, #304]	; (800acf0 <tcp_slowtmr+0x2f0>)
 800abbe:	4640      	mov	r0, r8
 800abc0:	f003 fbe4 	bl	800e38c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800abc4:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 800abc8:	2b0b      	cmp	r3, #11
 800abca:	f63f af6b 	bhi.w	800aaa4 <tcp_slowtmr+0xa4>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800abce:	f894 2095 	ldrb.w	r2, [r4, #149]	; 0x95
 800abd2:	4b48      	ldr	r3, [pc, #288]	; (800acf4 <tcp_slowtmr+0x2f4>)
 800abd4:	4413      	add	r3, r2
 800abd6:	7bda      	ldrb	r2, [r3, #15]
          if (pcb->persist_cnt < backoff_cnt) {
 800abd8:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 800abdc:	4293      	cmp	r3, r2
 800abde:	d30b      	bcc.n	800abf8 <tcp_slowtmr+0x1f8>
            if (pcb->snd_wnd == 0) {
 800abe0:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 800abe4:	b189      	cbz	r1, 800ac0a <tcp_slowtmr+0x20a>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800abe6:	4620      	mov	r0, r4
 800abe8:	f002 f93a 	bl	800ce60 <tcp_split_unsent_seg>
 800abec:	b990      	cbnz	r0, 800ac14 <tcp_slowtmr+0x214>
                if (tcp_output(pcb) == ERR_OK) {
 800abee:	4620      	mov	r0, r4
 800abf0:	f002 fbf6 	bl	800d3e0 <tcp_output>
 800abf4:	b130      	cbz	r0, 800ac04 <tcp_slowtmr+0x204>
 800abf6:	e00d      	b.n	800ac14 <tcp_slowtmr+0x214>
            pcb->persist_cnt++;
 800abf8:	3301      	adds	r3, #1
 800abfa:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 800abfc:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 800abfe:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
          if (pcb->persist_cnt >= backoff_cnt) {
 800ac02:	d2ed      	bcs.n	800abe0 <tcp_slowtmr+0x1e0>
    pcb_remove = 0;
 800ac04:	f04f 0b00 	mov.w	fp, #0
 800ac08:	e74e      	b.n	800aaa8 <tcp_slowtmr+0xa8>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800ac0a:	4620      	mov	r0, r4
 800ac0c:	f002 fdf0 	bl	800d7f0 <tcp_zero_window_probe>
 800ac10:	2800      	cmp	r0, #0
 800ac12:	d1f7      	bne.n	800ac04 <tcp_slowtmr+0x204>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ac14:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
              pcb->persist_cnt = 0;
 800ac18:	f04f 0b00 	mov.w	fp, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ac1c:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 800ac1e:	f884 b094 	strb.w	fp, [r4, #148]	; 0x94
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ac22:	d8ef      	bhi.n	800ac04 <tcp_slowtmr+0x204>
                pcb->persist_backoff++;
 800ac24:	3301      	adds	r3, #1
 800ac26:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 800ac2a:	e73d      	b.n	800aaa8 <tcp_slowtmr+0xa8>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800ac2c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800ac2e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800ac32:	4293      	cmp	r3, r2
          ++pcb->rtime;
 800ac34:	bf9c      	itt	ls
 800ac36:	3301      	addls	r3, #1
 800ac38:	8623      	strhls	r3, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 800ac3a:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800ac3e:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 800ac42:	429a      	cmp	r2, r3
 800ac44:	dbde      	blt.n	800ac04 <tcp_slowtmr+0x204>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800ac46:	4620      	mov	r0, r4
 800ac48:	f002 fa9a 	bl	800d180 <tcp_rexmit_rto_prepare>
 800ac4c:	b128      	cbz	r0, 800ac5a <tcp_slowtmr+0x25a>
 800ac4e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d1d7      	bne.n	800ac04 <tcp_slowtmr+0x204>
 800ac54:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d0d4      	beq.n	800ac04 <tcp_slowtmr+0x204>
            if (pcb->state != SYN_SENT) {
 800ac5a:	7d23      	ldrb	r3, [r4, #20]
 800ac5c:	2b02      	cmp	r3, #2
 800ac5e:	d015      	beq.n	800ac8c <tcp_slowtmr+0x28c>
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ac60:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
 800ac64:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ac68:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ac6c:	eb03 03e2 	add.w	r3, r3, r2, asr #3
 800ac70:	4a20      	ldr	r2, [pc, #128]	; (800acf4 <tcp_slowtmr+0x2f4>)
 800ac72:	290c      	cmp	r1, #12
 800ac74:	bf94      	ite	ls
 800ac76:	1852      	addls	r2, r2, r1
 800ac78:	320c      	addhi	r2, #12
 800ac7a:	7dd2      	ldrb	r2, [r2, #23]
 800ac7c:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ac7e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ac82:	4293      	cmp	r3, r2
 800ac84:	bfa8      	it	ge
 800ac86:	4613      	movge	r3, r2
 800ac88:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ac8c:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
            pcb->rtime = 0;
 800ac90:	2000      	movs	r0, #0
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ac92:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ac96:	8e65      	ldrh	r5, [r4, #50]	; 0x32
            pcb->ssthresh = eff_wnd >> 1;
 800ac98:	429a      	cmp	r2, r3
            pcb->rtime = 0;
 800ac9a:	8620      	strh	r0, [r4, #48]	; 0x30
            pcb->bytes_acked = 0;
 800ac9c:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 800aca0:	4620      	mov	r0, r4
            pcb->ssthresh = eff_wnd >> 1;
 800aca2:	bf28      	it	cs
 800aca4:	461a      	movcs	r2, r3
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800aca6:	006b      	lsls	r3, r5, #1
            pcb->cwnd = pcb->mss;
 800aca8:	f8a4 5048 	strh.w	r5, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800acac:	b29b      	uxth	r3, r3
            pcb->ssthresh = eff_wnd >> 1;
 800acae:	0851      	lsrs	r1, r2, #1
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800acb0:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 800acb4:	bf98      	it	ls
 800acb6:	460b      	movls	r3, r1
 800acb8:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            tcp_rexmit_rto_commit(pcb);
 800acbc:	f002 fd3a 	bl	800d734 <tcp_rexmit_rto_commit>
 800acc0:	e6f2      	b.n	800aaa8 <tcp_slowtmr+0xa8>
 800acc2:	bf00      	nop
 800acc4:	20010d58 	.word	0x20010d58
 800acc8:	0801518f 	.word	0x0801518f
 800accc:	20006949 	.word	0x20006949
 800acd0:	20010d54 	.word	0x20010d54
 800acd4:	20010d64 	.word	0x20010d64
 800acd8:	0801540c 	.word	0x0801540c
 800acdc:	08015436 	.word	0x08015436
 800ace0:	08015460 	.word	0x08015460
 800ace4:	080154f4 	.word	0x080154f4
 800ace8:	20010d50 	.word	0x20010d50
 800acec:	0801548d 	.word	0x0801548d
 800acf0:	080154bf 	.word	0x080154bf
 800acf4:	08013314 	.word	0x08013314
 800acf8:	0801342c 	.word	0x0801342c
 800acfc:	08015549 	.word	0x08015549
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ad00:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
 800ad04:	4a3f      	ldr	r2, [pc, #252]	; (800ae04 <tcp_slowtmr+0x404>)
 800ad06:	fb02 5303 	mla	r3, r2, r3, r5
                 / TCP_SLOW_INTERVAL) {
 800ad0a:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ad0e:	4299      	cmp	r1, r3
 800ad10:	d908      	bls.n	800ad24 <tcp_slowtmr+0x324>
        err = tcp_keepalive(pcb);
 800ad12:	4620      	mov	r0, r4
 800ad14:	f002 fd44 	bl	800d7a0 <tcp_keepalive>
        if (err == ERR_OK) {
 800ad18:	b920      	cbnz	r0, 800ad24 <tcp_slowtmr+0x324>
          pcb->keep_cnt_sent++;
 800ad1a:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
 800ad1e:	3301      	adds	r3, #1
 800ad20:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
    pcb_reset = 0;
 800ad24:	2500      	movs	r5, #0
 800ad26:	e6ec      	b.n	800ab02 <tcp_slowtmr+0x102>
    if (pcb->state == LAST_ACK) {
 800ad28:	2b09      	cmp	r3, #9
 800ad2a:	f47f aef3 	bne.w	800ab14 <tcp_slowtmr+0x114>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ad2e:	6833      	ldr	r3, [r6, #0]
 800ad30:	6a22      	ldr	r2, [r4, #32]
 800ad32:	1a9b      	subs	r3, r3, r2
 800ad34:	2bf0      	cmp	r3, #240	; 0xf0
 800ad36:	e6ec      	b.n	800ab12 <tcp_slowtmr+0x112>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ad38:	42a3      	cmp	r3, r4
 800ad3a:	d006      	beq.n	800ad4a <tcp_slowtmr+0x34a>
 800ad3c:	463b      	mov	r3, r7
 800ad3e:	f240 5271 	movw	r2, #1393	; 0x571
 800ad42:	4931      	ldr	r1, [pc, #196]	; (800ae08 <tcp_slowtmr+0x408>)
 800ad44:	4640      	mov	r0, r8
 800ad46:	f003 fb21 	bl	800e38c <iprintf>
        tcp_active_pcbs = pcb->next;
 800ad4a:	68e3      	ldr	r3, [r4, #12]
 800ad4c:	f8ca 3000 	str.w	r3, [sl]
 800ad50:	e6fb      	b.n	800ab4a <tcp_slowtmr+0x14a>
      ++prev->polltmr;
 800ad52:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ad54:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 800ad56:	3301      	adds	r3, #1
      pcb = pcb->next;
 800ad58:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 800ad5a:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 800ad5c:	429a      	cmp	r2, r3
      ++prev->polltmr;
 800ad5e:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ad60:	f63f ae95 	bhi.w	800aa8e <tcp_slowtmr+0x8e>
        tcp_active_pcbs_changed = 0;
 800ad64:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800ae14 <tcp_slowtmr+0x414>
        TCP_EVENT_POLL(prev, err);
 800ad68:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        prev->polltmr = 0;
 800ad6c:	f884 b01c 	strb.w	fp, [r4, #28]
        tcp_active_pcbs_changed = 0;
 800ad70:	f889 b000 	strb.w	fp, [r9]
        TCP_EVENT_POLL(prev, err);
 800ad74:	b91b      	cbnz	r3, 800ad7e <tcp_slowtmr+0x37e>
          tcp_output(prev);
 800ad76:	4620      	mov	r0, r4
 800ad78:	f002 fb32 	bl	800d3e0 <tcp_output>
 800ad7c:	e687      	b.n	800aa8e <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 800ad7e:	4621      	mov	r1, r4
 800ad80:	6920      	ldr	r0, [r4, #16]
 800ad82:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 800ad84:	f899 3000 	ldrb.w	r3, [r9]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	f47f ae48 	bne.w	800aa1e <tcp_slowtmr+0x1e>
        if (err == ERR_OK) {
 800ad8e:	2800      	cmp	r0, #0
 800ad90:	f47f ae7d 	bne.w	800aa8e <tcp_slowtmr+0x8e>
 800ad94:	e7ef      	b.n	800ad76 <tcp_slowtmr+0x376>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ad96:	7d2b      	ldrb	r3, [r5, #20]
 800ad98:	2b0a      	cmp	r3, #10
 800ad9a:	d006      	beq.n	800adaa <tcp_slowtmr+0x3aa>
 800ad9c:	4643      	mov	r3, r8
 800ad9e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800ada2:	4651      	mov	r1, sl
 800ada4:	4648      	mov	r0, r9
 800ada6:	f003 faf1 	bl	800e38c <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800adaa:	6833      	ldr	r3, [r6, #0]
 800adac:	6a2a      	ldr	r2, [r5, #32]
 800adae:	1a9b      	subs	r3, r3, r2
 800adb0:	2bf0      	cmp	r3, #240	; 0xf0
 800adb2:	d910      	bls.n	800add6 <tcp_slowtmr+0x3d6>
      tcp_pcb_purge(pcb);
 800adb4:	4628      	mov	r0, r5
 800adb6:	f7ff fdf7 	bl	800a9a8 <tcp_pcb_purge>
      if (prev != NULL) {
 800adba:	b97c      	cbnz	r4, 800addc <tcp_slowtmr+0x3dc>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	42ab      	cmp	r3, r5
 800adc0:	d006      	beq.n	800add0 <tcp_slowtmr+0x3d0>
 800adc2:	4643      	mov	r3, r8
 800adc4:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800adc8:	4910      	ldr	r1, [pc, #64]	; (800ae0c <tcp_slowtmr+0x40c>)
 800adca:	4648      	mov	r0, r9
 800adcc:	f003 fade 	bl	800e38c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800add0:	68eb      	ldr	r3, [r5, #12]
 800add2:	603b      	str	r3, [r7, #0]
 800add4:	e00e      	b.n	800adf4 <tcp_slowtmr+0x3f4>
      pcb = pcb->next;
 800add6:	462c      	mov	r4, r5
 800add8:	68ed      	ldr	r5, [r5, #12]
 800adda:	e62f      	b.n	800aa3c <tcp_slowtmr+0x3c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	42ab      	cmp	r3, r5
 800ade0:	d106      	bne.n	800adf0 <tcp_slowtmr+0x3f0>
 800ade2:	4643      	mov	r3, r8
 800ade4:	f240 52af 	movw	r2, #1455	; 0x5af
 800ade8:	4909      	ldr	r1, [pc, #36]	; (800ae10 <tcp_slowtmr+0x410>)
 800adea:	4648      	mov	r0, r9
 800adec:	f003 face 	bl	800e38c <iprintf>
        prev->next = pcb->next;
 800adf0:	68eb      	ldr	r3, [r5, #12]
 800adf2:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 800adf4:	f8d5 b00c 	ldr.w	fp, [r5, #12]
      tcp_free(pcb2);
 800adf8:	4628      	mov	r0, r5
 800adfa:	f7ff fc03 	bl	800a604 <tcp_free>
      pcb = pcb->next;
 800adfe:	465d      	mov	r5, fp
 800ae00:	e61c      	b.n	800aa3c <tcp_slowtmr+0x3c>
 800ae02:	bf00      	nop
 800ae04:	000124f8 	.word	0x000124f8
 800ae08:	0801551f 	.word	0x0801551f
 800ae0c:	0801559f 	.word	0x0801559f
 800ae10:	08015578 	.word	0x08015578
 800ae14:	20010d50 	.word	0x20010d50

0800ae18 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ae18:	b538      	push	{r3, r4, r5, lr}
 800ae1a:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ae1c:	460c      	mov	r4, r1
 800ae1e:	b931      	cbnz	r1, 800ae2e <tcp_pcb_remove+0x16>
 800ae20:	4b25      	ldr	r3, [pc, #148]	; (800aeb8 <tcp_pcb_remove+0xa0>)
 800ae22:	f640 0283 	movw	r2, #2179	; 0x883
 800ae26:	4925      	ldr	r1, [pc, #148]	; (800aebc <tcp_pcb_remove+0xa4>)
 800ae28:	4825      	ldr	r0, [pc, #148]	; (800aec0 <tcp_pcb_remove+0xa8>)
 800ae2a:	f003 faaf 	bl	800e38c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ae2e:	b935      	cbnz	r5, 800ae3e <tcp_pcb_remove+0x26>
 800ae30:	4b21      	ldr	r3, [pc, #132]	; (800aeb8 <tcp_pcb_remove+0xa0>)
 800ae32:	f640 0284 	movw	r2, #2180	; 0x884
 800ae36:	4923      	ldr	r1, [pc, #140]	; (800aec4 <tcp_pcb_remove+0xac>)
 800ae38:	4821      	ldr	r0, [pc, #132]	; (800aec0 <tcp_pcb_remove+0xa8>)
 800ae3a:	f003 faa7 	bl	800e38c <iprintf>

  TCP_RMV(pcblist, pcb);
 800ae3e:	682b      	ldr	r3, [r5, #0]
 800ae40:	42a3      	cmp	r3, r4
 800ae42:	d116      	bne.n	800ae72 <tcp_pcb_remove+0x5a>
 800ae44:	68e3      	ldr	r3, [r4, #12]
 800ae46:	602b      	str	r3, [r5, #0]
 800ae48:	2300      	movs	r3, #0

  tcp_pcb_purge(pcb);
 800ae4a:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 800ae4c:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 800ae4e:	f7ff fdab 	bl	800a9a8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800ae52:	7d23      	ldrb	r3, [r4, #20]
 800ae54:	2b0a      	cmp	r3, #10
 800ae56:	d114      	bne.n	800ae82 <tcp_pcb_remove+0x6a>
    tcp_ack_now(pcb);
    tcp_output(pcb);
  }

  if (pcb->state != LISTEN) {
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800ae58:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ae5a:	bb23      	cbnz	r3, 800aea6 <tcp_pcb_remove+0x8e>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800ae5c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ae5e:	b1f3      	cbz	r3, 800ae9e <tcp_pcb_remove+0x86>
 800ae60:	4b15      	ldr	r3, [pc, #84]	; (800aeb8 <tcp_pcb_remove+0xa0>)
 800ae62:	f640 0294 	movw	r2, #2196	; 0x894
 800ae66:	4918      	ldr	r1, [pc, #96]	; (800aec8 <tcp_pcb_remove+0xb0>)
 800ae68:	4815      	ldr	r0, [pc, #84]	; (800aec0 <tcp_pcb_remove+0xa8>)
 800ae6a:	f003 fa8f 	bl	800e38c <iprintf>
 800ae6e:	e016      	b.n	800ae9e <tcp_pcb_remove+0x86>
 800ae70:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d0e8      	beq.n	800ae48 <tcp_pcb_remove+0x30>
 800ae76:	68da      	ldr	r2, [r3, #12]
 800ae78:	42a2      	cmp	r2, r4
 800ae7a:	d1f9      	bne.n	800ae70 <tcp_pcb_remove+0x58>
 800ae7c:	68e2      	ldr	r2, [r4, #12]
 800ae7e:	60da      	str	r2, [r3, #12]
 800ae80:	e7e2      	b.n	800ae48 <tcp_pcb_remove+0x30>
  if ((pcb->state != TIME_WAIT) &&
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	d00b      	beq.n	800ae9e <tcp_pcb_remove+0x86>
      (pcb->flags & TF_ACK_DELAY)) {
 800ae86:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 800ae88:	07da      	lsls	r2, r3, #31
 800ae8a:	d5e5      	bpl.n	800ae58 <tcp_pcb_remove+0x40>
    tcp_ack_now(pcb);
 800ae8c:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 800ae90:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 800ae92:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800ae94:	f002 faa4 	bl	800d3e0 <tcp_output>
  if (pcb->state != LISTEN) {
 800ae98:	7d23      	ldrb	r3, [r4, #20]
 800ae9a:	2b01      	cmp	r3, #1
 800ae9c:	d1dc      	bne.n	800ae58 <tcp_pcb_remove+0x40>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800aea2:	82e3      	strh	r3, [r4, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800aea4:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800aea6:	4b04      	ldr	r3, [pc, #16]	; (800aeb8 <tcp_pcb_remove+0xa0>)
 800aea8:	f640 0293 	movw	r2, #2195	; 0x893
 800aeac:	4907      	ldr	r1, [pc, #28]	; (800aecc <tcp_pcb_remove+0xb4>)
 800aeae:	4804      	ldr	r0, [pc, #16]	; (800aec0 <tcp_pcb_remove+0xa8>)
 800aeb0:	f003 fa6c 	bl	800e38c <iprintf>
 800aeb4:	e7d2      	b.n	800ae5c <tcp_pcb_remove+0x44>
 800aeb6:	bf00      	nop
 800aeb8:	0801518f 	.word	0x0801518f
 800aebc:	080155c5 	.word	0x080155c5
 800aec0:	0801342c 	.word	0x0801342c
 800aec4:	080155e1 	.word	0x080155e1
 800aec8:	08015619 	.word	0x08015619
 800aecc:	08015601 	.word	0x08015601

0800aed0 <tcp_close_shutdown>:
{
 800aed0:	b530      	push	{r4, r5, lr}
 800aed2:	460d      	mov	r5, r1
 800aed4:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800aed6:	4604      	mov	r4, r0
 800aed8:	b930      	cbnz	r0, 800aee8 <tcp_close_shutdown+0x18>
 800aeda:	4b4b      	ldr	r3, [pc, #300]	; (800b008 <tcp_close_shutdown+0x138>)
 800aedc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800aee0:	494a      	ldr	r1, [pc, #296]	; (800b00c <tcp_close_shutdown+0x13c>)
 800aee2:	484b      	ldr	r0, [pc, #300]	; (800b010 <tcp_close_shutdown+0x140>)
 800aee4:	f003 fa52 	bl	800e38c <iprintf>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800aee8:	7d23      	ldrb	r3, [r4, #20]
 800aeea:	2d00      	cmp	r5, #0
 800aeec:	d040      	beq.n	800af70 <tcp_close_shutdown+0xa0>
 800aeee:	2b04      	cmp	r3, #4
 800aef0:	d001      	beq.n	800aef6 <tcp_close_shutdown+0x26>
 800aef2:	2b07      	cmp	r3, #7
 800aef4:	d13c      	bne.n	800af70 <tcp_close_shutdown+0xa0>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800aef6:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800aef8:	b922      	cbnz	r2, 800af04 <tcp_close_shutdown+0x34>
 800aefa:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800aefc:	f640 3268 	movw	r2, #2920	; 0xb68
 800af00:	4291      	cmp	r1, r2
 800af02:	d035      	beq.n	800af70 <tcp_close_shutdown+0xa0>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800af04:	8b63      	ldrh	r3, [r4, #26]
 800af06:	06db      	lsls	r3, r3, #27
 800af08:	d406      	bmi.n	800af18 <tcp_close_shutdown+0x48>
 800af0a:	4b3f      	ldr	r3, [pc, #252]	; (800b008 <tcp_close_shutdown+0x138>)
 800af0c:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800af10:	4940      	ldr	r1, [pc, #256]	; (800b014 <tcp_close_shutdown+0x144>)
 800af12:	483f      	ldr	r0, [pc, #252]	; (800b010 <tcp_close_shutdown+0x140>)
 800af14:	f003 fa3a 	bl	800e38c <iprintf>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800af18:	8b23      	ldrh	r3, [r4, #24]
 800af1a:	4620      	mov	r0, r4
 800af1c:	9302      	str	r3, [sp, #8]
 800af1e:	8ae3      	ldrh	r3, [r4, #22]
 800af20:	9301      	str	r3, [sp, #4]
 800af22:	1d23      	adds	r3, r4, #4
 800af24:	9300      	str	r3, [sp, #0]
 800af26:	4623      	mov	r3, r4
 800af28:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800af2a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800af2c:	f002 f9e0 	bl	800d2f0 <tcp_rst>
      tcp_pcb_purge(pcb);
 800af30:	4620      	mov	r0, r4
 800af32:	f7ff fd39 	bl	800a9a8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800af36:	4a38      	ldr	r2, [pc, #224]	; (800b018 <tcp_close_shutdown+0x148>)
 800af38:	6813      	ldr	r3, [r2, #0]
 800af3a:	42a3      	cmp	r3, r4
 800af3c:	d110      	bne.n	800af60 <tcp_close_shutdown+0x90>
 800af3e:	68e3      	ldr	r3, [r4, #12]
 800af40:	6013      	str	r3, [r2, #0]
 800af42:	2300      	movs	r3, #0
 800af44:	2201      	movs	r2, #1
 800af46:	60e3      	str	r3, [r4, #12]
 800af48:	4b34      	ldr	r3, [pc, #208]	; (800b01c <tcp_close_shutdown+0x14c>)
 800af4a:	701a      	strb	r2, [r3, #0]
      if (tcp_input_pcb == pcb) {
 800af4c:	4b34      	ldr	r3, [pc, #208]	; (800b020 <tcp_close_shutdown+0x150>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	42a3      	cmp	r3, r4
 800af52:	d11d      	bne.n	800af90 <tcp_close_shutdown+0xc0>
        tcp_trigger_input_pcb_close();
 800af54:	f001 fb5a 	bl	800c60c <tcp_trigger_input_pcb_close>
}
 800af58:	2000      	movs	r0, #0
 800af5a:	b005      	add	sp, #20
 800af5c:	bd30      	pop	{r4, r5, pc}
 800af5e:	4613      	mov	r3, r2
      TCP_RMV_ACTIVE(pcb);
 800af60:	2b00      	cmp	r3, #0
 800af62:	d0ee      	beq.n	800af42 <tcp_close_shutdown+0x72>
 800af64:	68da      	ldr	r2, [r3, #12]
 800af66:	42a2      	cmp	r2, r4
 800af68:	d1f9      	bne.n	800af5e <tcp_close_shutdown+0x8e>
 800af6a:	68e2      	ldr	r2, [r4, #12]
 800af6c:	60da      	str	r2, [r3, #12]
 800af6e:	e7e8      	b.n	800af42 <tcp_close_shutdown+0x72>
  switch (pcb->state) {
 800af70:	2b01      	cmp	r3, #1
 800af72:	d01a      	beq.n	800afaa <tcp_close_shutdown+0xda>
 800af74:	2b02      	cmp	r3, #2
 800af76:	d039      	beq.n	800afec <tcp_close_shutdown+0x11c>
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d13f      	bne.n	800affc <tcp_close_shutdown+0x12c>
      if (pcb->local_port != 0) {
 800af7c:	8ae3      	ldrh	r3, [r4, #22]
 800af7e:	b13b      	cbz	r3, 800af90 <tcp_close_shutdown+0xc0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800af80:	4a28      	ldr	r2, [pc, #160]	; (800b024 <tcp_close_shutdown+0x154>)
 800af82:	6813      	ldr	r3, [r2, #0]
 800af84:	42a3      	cmp	r3, r4
 800af86:	d108      	bne.n	800af9a <tcp_close_shutdown+0xca>
 800af88:	68e3      	ldr	r3, [r4, #12]
 800af8a:	6013      	str	r3, [r2, #0]
 800af8c:	2300      	movs	r3, #0
 800af8e:	60e3      	str	r3, [r4, #12]
      tcp_free(pcb);
 800af90:	4620      	mov	r0, r4
 800af92:	f7ff fb37 	bl	800a604 <tcp_free>
      break;
 800af96:	e7df      	b.n	800af58 <tcp_close_shutdown+0x88>
 800af98:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d0f6      	beq.n	800af8c <tcp_close_shutdown+0xbc>
 800af9e:	68da      	ldr	r2, [r3, #12]
 800afa0:	42a2      	cmp	r2, r4
 800afa2:	d1f9      	bne.n	800af98 <tcp_close_shutdown+0xc8>
 800afa4:	68e2      	ldr	r2, [r4, #12]
 800afa6:	60da      	str	r2, [r3, #12]
 800afa8:	e7f0      	b.n	800af8c <tcp_close_shutdown+0xbc>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800afaa:	491f      	ldr	r1, [pc, #124]	; (800b028 <tcp_close_shutdown+0x158>)
      pcb->listener = NULL;
 800afac:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800afae:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800afb2:	6812      	ldr	r2, [r2, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800afb4:	b9a2      	cbnz	r2, 800afe0 <tcp_close_shutdown+0x110>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800afb6:	3301      	adds	r3, #1
 800afb8:	2b04      	cmp	r3, #4
 800afba:	d1f8      	bne.n	800afae <tcp_close_shutdown+0xde>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800afbc:	4621      	mov	r1, r4
 800afbe:	481b      	ldr	r0, [pc, #108]	; (800b02c <tcp_close_shutdown+0x15c>)
 800afc0:	f7ff ff2a 	bl	800ae18 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800afc4:	7d23      	ldrb	r3, [r4, #20]
 800afc6:	2b01      	cmp	r3, #1
 800afc8:	d105      	bne.n	800afd6 <tcp_close_shutdown+0x106>
 800afca:	4b0f      	ldr	r3, [pc, #60]	; (800b008 <tcp_close_shutdown+0x138>)
 800afcc:	22df      	movs	r2, #223	; 0xdf
 800afce:	4918      	ldr	r1, [pc, #96]	; (800b030 <tcp_close_shutdown+0x160>)
 800afd0:	480f      	ldr	r0, [pc, #60]	; (800b010 <tcp_close_shutdown+0x140>)
 800afd2:	f003 f9db 	bl	800e38c <iprintf>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800afd6:	4621      	mov	r1, r4
 800afd8:	2002      	movs	r0, #2
 800afda:	f7fe fdfb 	bl	8009bd4 <memp_free>
}
 800afde:	e7bb      	b.n	800af58 <tcp_close_shutdown+0x88>
    if (pcb->listener == lpcb) {
 800afe0:	6f95      	ldr	r5, [r2, #120]	; 0x78
 800afe2:	42ac      	cmp	r4, r5
      pcb->listener = NULL;
 800afe4:	bf08      	it	eq
 800afe6:	6790      	streq	r0, [r2, #120]	; 0x78
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800afe8:	68d2      	ldr	r2, [r2, #12]
 800afea:	e7e3      	b.n	800afb4 <tcp_close_shutdown+0xe4>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800afec:	4621      	mov	r1, r4
 800afee:	480a      	ldr	r0, [pc, #40]	; (800b018 <tcp_close_shutdown+0x148>)
 800aff0:	f7ff ff12 	bl	800ae18 <tcp_pcb_remove>
 800aff4:	4b09      	ldr	r3, [pc, #36]	; (800b01c <tcp_close_shutdown+0x14c>)
 800aff6:	2201      	movs	r2, #1
 800aff8:	701a      	strb	r2, [r3, #0]
 800affa:	e7c9      	b.n	800af90 <tcp_close_shutdown+0xc0>
      return tcp_close_shutdown_fin(pcb);
 800affc:	4620      	mov	r0, r4
}
 800affe:	b005      	add	sp, #20
 800b000:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 800b004:	f7ff bac2 	b.w	800a58c <tcp_close_shutdown_fin>
 800b008:	0801518f 	.word	0x0801518f
 800b00c:	08015632 	.word	0x08015632
 800b010:	0801342c 	.word	0x0801342c
 800b014:	08015652 	.word	0x08015652
 800b018:	20010d54 	.word	0x20010d54
 800b01c:	20010d50 	.word	0x20010d50
 800b020:	20010d68 	.word	0x20010d68
 800b024:	20010d60 	.word	0x20010d60
 800b028:	08013314 	.word	0x08013314
 800b02c:	20010d5c 	.word	0x20010d5c
 800b030:	0801566b 	.word	0x0801566b

0800b034 <tcp_close>:
{
 800b034:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800b036:	b158      	cbz	r0, 800b050 <tcp_close+0x1c>
  if (pcb->state != LISTEN) {
 800b038:	7d03      	ldrb	r3, [r0, #20]
  return tcp_close_shutdown(pcb, 1);
 800b03a:	2101      	movs	r1, #1
  if (pcb->state != LISTEN) {
 800b03c:	2b01      	cmp	r3, #1
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b03e:	bf1e      	ittt	ne
 800b040:	8b43      	ldrhne	r3, [r0, #26]
 800b042:	f043 0310 	orrne.w	r3, r3, #16
 800b046:	8343      	strhne	r3, [r0, #26]
}
 800b048:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
 800b04c:	f7ff bf40 	b.w	800aed0 <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800b050:	4b04      	ldr	r3, [pc, #16]	; (800b064 <tcp_close+0x30>)
 800b052:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800b056:	4904      	ldr	r1, [pc, #16]	; (800b068 <tcp_close+0x34>)
 800b058:	4804      	ldr	r0, [pc, #16]	; (800b06c <tcp_close+0x38>)
 800b05a:	f003 f997 	bl	800e38c <iprintf>
}
 800b05e:	f06f 000f 	mvn.w	r0, #15
 800b062:	bd08      	pop	{r3, pc}
 800b064:	0801518f 	.word	0x0801518f
 800b068:	08015684 	.word	0x08015684
 800b06c:	0801342c 	.word	0x0801342c

0800b070 <tcp_recv_null>:
{
 800b070:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800b072:	4608      	mov	r0, r1
{
 800b074:	4614      	mov	r4, r2
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800b076:	b949      	cbnz	r1, 800b08c <tcp_recv_null+0x1c>
 800b078:	4b0c      	ldr	r3, [pc, #48]	; (800b0ac <tcp_recv_null+0x3c>)
 800b07a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b07e:	490c      	ldr	r1, [pc, #48]	; (800b0b0 <tcp_recv_null+0x40>)
 800b080:	480c      	ldr	r0, [pc, #48]	; (800b0b4 <tcp_recv_null+0x44>)
 800b082:	f003 f983 	bl	800e38c <iprintf>
 800b086:	f06f 000f 	mvn.w	r0, #15
}
 800b08a:	bd10      	pop	{r4, pc}
  if (p != NULL) {
 800b08c:	b13a      	cbz	r2, 800b09e <tcp_recv_null+0x2e>
    tcp_recved(pcb, p->tot_len);
 800b08e:	8911      	ldrh	r1, [r2, #8]
 800b090:	f7ff fbc2 	bl	800a818 <tcp_recved>
    pbuf_free(p);
 800b094:	4620      	mov	r0, r4
 800b096:	f7fe ffc7 	bl	800a028 <pbuf_free>
  return ERR_OK;
 800b09a:	2000      	movs	r0, #0
 800b09c:	e7f5      	b.n	800b08a <tcp_recv_null+0x1a>
  } else if (err == ERR_OK) {
 800b09e:	b91b      	cbnz	r3, 800b0a8 <tcp_recv_null+0x38>
}
 800b0a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 800b0a4:	f7ff bfc6 	b.w	800b034 <tcp_close>
  return ERR_OK;
 800b0a8:	4610      	mov	r0, r2
 800b0aa:	e7ee      	b.n	800b08a <tcp_recv_null+0x1a>
 800b0ac:	0801518f 	.word	0x0801518f
 800b0b0:	0801569b 	.word	0x0801569b
 800b0b4:	0801342c 	.word	0x0801342c

0800b0b8 <tcp_process_refused_data>:
{
 800b0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800b0ba:	4604      	mov	r4, r0
 800b0bc:	b950      	cbnz	r0, 800b0d4 <tcp_process_refused_data+0x1c>
 800b0be:	f06f 050f 	mvn.w	r5, #15
 800b0c2:	4b1d      	ldr	r3, [pc, #116]	; (800b138 <tcp_process_refused_data+0x80>)
 800b0c4:	f240 6209 	movw	r2, #1545	; 0x609
 800b0c8:	491c      	ldr	r1, [pc, #112]	; (800b13c <tcp_process_refused_data+0x84>)
 800b0ca:	481d      	ldr	r0, [pc, #116]	; (800b140 <tcp_process_refused_data+0x88>)
 800b0cc:	f003 f95e 	bl	800e38c <iprintf>
}
 800b0d0:	4628      	mov	r0, r5
 800b0d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    u8_t refused_flags = pcb->refused_data->flags;
 800b0d4:	6f46      	ldr	r6, [r0, #116]	; 0x74
    pcb->refused_data = NULL;
 800b0d6:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b0d8:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
    u8_t refused_flags = pcb->refused_data->flags;
 800b0dc:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 800b0de:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b0e0:	b1e5      	cbz	r5, 800b11c <tcp_process_refused_data+0x64>
 800b0e2:	4601      	mov	r1, r0
 800b0e4:	4632      	mov	r2, r6
 800b0e6:	6900      	ldr	r0, [r0, #16]
 800b0e8:	47a8      	blx	r5
 800b0ea:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 800b0ec:	b9e8      	cbnz	r0, 800b12a <tcp_process_refused_data+0x72>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800b0ee:	06bb      	lsls	r3, r7, #26
 800b0f0:	d5ee      	bpl.n	800b0d0 <tcp_process_refused_data+0x18>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b0f2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800b0f4:	f640 3268 	movw	r2, #2920	; 0xb68
        TCP_EVENT_CLOSED(pcb, err);
 800b0f8:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b0fc:	4293      	cmp	r3, r2
          pcb->rcv_wnd++;
 800b0fe:	bf1c      	itt	ne
 800b100:	3301      	addne	r3, #1
 800b102:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800b104:	2e00      	cmp	r6, #0
 800b106:	d0e3      	beq.n	800b0d0 <tcp_process_refused_data+0x18>
 800b108:	2300      	movs	r3, #0
 800b10a:	4621      	mov	r1, r4
 800b10c:	6920      	ldr	r0, [r4, #16]
 800b10e:	461a      	mov	r2, r3
 800b110:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 800b112:	300d      	adds	r0, #13
 800b114:	d1dc      	bne.n	800b0d0 <tcp_process_refused_data+0x18>
          return ERR_ABRT;
 800b116:	f06f 050c 	mvn.w	r5, #12
 800b11a:	e7d9      	b.n	800b0d0 <tcp_process_refused_data+0x18>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b11c:	4601      	mov	r1, r0
 800b11e:	462b      	mov	r3, r5
 800b120:	4632      	mov	r2, r6
 800b122:	4628      	mov	r0, r5
 800b124:	f7ff ffa4 	bl	800b070 <tcp_recv_null>
 800b128:	e7df      	b.n	800b0ea <tcp_process_refused_data+0x32>
    } else if (err == ERR_ABRT) {
 800b12a:	350d      	adds	r5, #13
 800b12c:	d0f3      	beq.n	800b116 <tcp_process_refused_data+0x5e>
      return ERR_INPROGRESS;
 800b12e:	f06f 0504 	mvn.w	r5, #4
      pcb->refused_data = refused_data;
 800b132:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 800b134:	e7cc      	b.n	800b0d0 <tcp_process_refused_data+0x18>
 800b136:	bf00      	nop
 800b138:	0801518f 	.word	0x0801518f
 800b13c:	080156b6 	.word	0x080156b6
 800b140:	0801342c 	.word	0x0801342c

0800b144 <tcp_fasttmr>:
{
 800b144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 800b148:	4d1b      	ldr	r5, [pc, #108]	; (800b1b8 <tcp_fasttmr+0x74>)
  pcb = tcp_active_pcbs;
 800b14a:	4f1c      	ldr	r7, [pc, #112]	; (800b1bc <tcp_fasttmr+0x78>)
  ++tcp_timer_ctr;
 800b14c:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 800b14e:	4e1c      	ldr	r6, [pc, #112]	; (800b1c0 <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 800b150:	3301      	adds	r3, #1
 800b152:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 800b154:	683c      	ldr	r4, [r7, #0]
        tcp_active_pcbs_changed = 0;
 800b156:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 800b15a:	b90c      	cbnz	r4, 800b160 <tcp_fasttmr+0x1c>
}
 800b15c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 800b160:	782b      	ldrb	r3, [r5, #0]
 800b162:	7fa2      	ldrb	r2, [r4, #30]
 800b164:	429a      	cmp	r2, r3
 800b166:	d024      	beq.n	800b1b2 <tcp_fasttmr+0x6e>
      pcb->last_timer = tcp_timer_ctr;
 800b168:	77a3      	strb	r3, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 800b16a:	8b63      	ldrh	r3, [r4, #26]
 800b16c:	07d9      	lsls	r1, r3, #31
 800b16e:	d509      	bpl.n	800b184 <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 800b170:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 800b174:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800b176:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 800b178:	f002 f932 	bl	800d3e0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b17c:	8b63      	ldrh	r3, [r4, #26]
 800b17e:	f023 0303 	bic.w	r3, r3, #3
 800b182:	8363      	strh	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 800b184:	8b63      	ldrh	r3, [r4, #26]
 800b186:	071a      	lsls	r2, r3, #28
 800b188:	d505      	bpl.n	800b196 <tcp_fasttmr+0x52>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b18a:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 800b18e:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b190:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 800b192:	f7ff f9fb 	bl	800a58c <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 800b196:	6f63      	ldr	r3, [r4, #116]	; 0x74
      next = pcb->next;
 800b198:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 800b19c:	b13b      	cbz	r3, 800b1ae <tcp_fasttmr+0x6a>
        tcp_process_refused_data(pcb);
 800b19e:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 800b1a0:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
 800b1a4:	f7ff ff88 	bl	800b0b8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800b1a8:	7833      	ldrb	r3, [r6, #0]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d1d2      	bne.n	800b154 <tcp_fasttmr+0x10>
{
 800b1ae:	464c      	mov	r4, r9
 800b1b0:	e7d3      	b.n	800b15a <tcp_fasttmr+0x16>
      pcb = pcb->next;
 800b1b2:	f8d4 900c 	ldr.w	r9, [r4, #12]
 800b1b6:	e7fa      	b.n	800b1ae <tcp_fasttmr+0x6a>
 800b1b8:	20006949 	.word	0x20006949
 800b1bc:	20010d54 	.word	0x20010d54
 800b1c0:	20010d50 	.word	0x20010d50

0800b1c4 <tcp_tmr>:
{
 800b1c4:	b508      	push	{r3, lr}
  tcp_fasttmr();
 800b1c6:	f7ff ffbd 	bl	800b144 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800b1ca:	4a06      	ldr	r2, [pc, #24]	; (800b1e4 <tcp_tmr+0x20>)
 800b1cc:	7853      	ldrb	r3, [r2, #1]
 800b1ce:	3301      	adds	r3, #1
 800b1d0:	b2db      	uxtb	r3, r3
 800b1d2:	7053      	strb	r3, [r2, #1]
 800b1d4:	07db      	lsls	r3, r3, #31
 800b1d6:	d503      	bpl.n	800b1e0 <tcp_tmr+0x1c>
}
 800b1d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 800b1dc:	f7ff bc10 	b.w	800aa00 <tcp_slowtmr>
}
 800b1e0:	bd08      	pop	{r3, pc}
 800b1e2:	bf00      	nop
 800b1e4:	20006949 	.word	0x20006949

0800b1e8 <tcp_shutdown>:
{
 800b1e8:	b538      	push	{r3, r4, r5, lr}
 800b1ea:	4614      	mov	r4, r2
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800b1ec:	4605      	mov	r5, r0
 800b1ee:	b948      	cbnz	r0, 800b204 <tcp_shutdown+0x1c>
 800b1f0:	4b16      	ldr	r3, [pc, #88]	; (800b24c <tcp_shutdown+0x64>)
 800b1f2:	f240 2207 	movw	r2, #519	; 0x207
 800b1f6:	4916      	ldr	r1, [pc, #88]	; (800b250 <tcp_shutdown+0x68>)
 800b1f8:	4816      	ldr	r0, [pc, #88]	; (800b254 <tcp_shutdown+0x6c>)
 800b1fa:	f003 f8c7 	bl	800e38c <iprintf>
 800b1fe:	f06f 000f 	mvn.w	r0, #15
}
 800b202:	bd38      	pop	{r3, r4, r5, pc}
  if (pcb->state == LISTEN) {
 800b204:	7d03      	ldrb	r3, [r0, #20]
 800b206:	2b01      	cmp	r3, #1
 800b208:	d018      	beq.n	800b23c <tcp_shutdown+0x54>
  if (shut_rx) {
 800b20a:	b189      	cbz	r1, 800b230 <tcp_shutdown+0x48>
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b20c:	8b43      	ldrh	r3, [r0, #26]
 800b20e:	f043 0310 	orr.w	r3, r3, #16
 800b212:	8343      	strh	r3, [r0, #26]
    if (shut_tx) {
 800b214:	b122      	cbz	r2, 800b220 <tcp_shutdown+0x38>
      return tcp_close_shutdown(pcb, 1);
 800b216:	2101      	movs	r1, #1
}
 800b218:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800b21c:	f7ff be58 	b.w	800aed0 <tcp_close_shutdown>
    if (pcb->refused_data != NULL) {
 800b220:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800b222:	b908      	cbnz	r0, 800b228 <tcp_shutdown+0x40>
  return ERR_OK;
 800b224:	2000      	movs	r0, #0
 800b226:	e7ec      	b.n	800b202 <tcp_shutdown+0x1a>
      pbuf_free(pcb->refused_data);
 800b228:	f7fe fefe 	bl	800a028 <pbuf_free>
      pcb->refused_data = NULL;
 800b22c:	676c      	str	r4, [r5, #116]	; 0x74
 800b22e:	e7f9      	b.n	800b224 <tcp_shutdown+0x3c>
  if (shut_tx) {
 800b230:	2a00      	cmp	r2, #0
 800b232:	d0f7      	beq.n	800b224 <tcp_shutdown+0x3c>
    switch (pcb->state) {
 800b234:	2b04      	cmp	r3, #4
 800b236:	d804      	bhi.n	800b242 <tcp_shutdown+0x5a>
 800b238:	2b02      	cmp	r3, #2
 800b23a:	d804      	bhi.n	800b246 <tcp_shutdown+0x5e>
 800b23c:	f06f 000a 	mvn.w	r0, #10
 800b240:	e7df      	b.n	800b202 <tcp_shutdown+0x1a>
 800b242:	2b07      	cmp	r3, #7
 800b244:	d1fa      	bne.n	800b23c <tcp_shutdown+0x54>
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800b246:	2100      	movs	r1, #0
 800b248:	4628      	mov	r0, r5
 800b24a:	e7e5      	b.n	800b218 <tcp_shutdown+0x30>
 800b24c:	0801518f 	.word	0x0801518f
 800b250:	080156dc 	.word	0x080156dc
 800b254:	0801342c 	.word	0x0801342c

0800b258 <tcp_abandon>:
{
 800b258:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b25c:	460e      	mov	r6, r1
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b25e:	4604      	mov	r4, r0
 800b260:	b948      	cbnz	r0, 800b276 <tcp_abandon+0x1e>
 800b262:	4b34      	ldr	r3, [pc, #208]	; (800b334 <tcp_abandon+0xdc>)
 800b264:	f240 223d 	movw	r2, #573	; 0x23d
 800b268:	4933      	ldr	r1, [pc, #204]	; (800b338 <tcp_abandon+0xe0>)
 800b26a:	4834      	ldr	r0, [pc, #208]	; (800b33c <tcp_abandon+0xe4>)
}
 800b26c:	b004      	add	sp, #16
 800b26e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b272:	f003 b88b 	b.w	800e38c <iprintf>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b276:	7d03      	ldrb	r3, [r0, #20]
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d106      	bne.n	800b28a <tcp_abandon+0x32>
 800b27c:	4b2d      	ldr	r3, [pc, #180]	; (800b334 <tcp_abandon+0xdc>)
 800b27e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800b282:	492f      	ldr	r1, [pc, #188]	; (800b340 <tcp_abandon+0xe8>)
 800b284:	482d      	ldr	r0, [pc, #180]	; (800b33c <tcp_abandon+0xe4>)
 800b286:	f003 f881 	bl	800e38c <iprintf>
  if (pcb->state == TIME_WAIT) {
 800b28a:	7d23      	ldrb	r3, [r4, #20]
 800b28c:	2b0a      	cmp	r3, #10
 800b28e:	d109      	bne.n	800b2a4 <tcp_abandon+0x4c>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800b290:	4621      	mov	r1, r4
 800b292:	482c      	ldr	r0, [pc, #176]	; (800b344 <tcp_abandon+0xec>)
 800b294:	f7ff fdc0 	bl	800ae18 <tcp_pcb_remove>
    tcp_free(pcb);
 800b298:	4620      	mov	r0, r4
}
 800b29a:	b004      	add	sp, #16
 800b29c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    tcp_free(pcb);
 800b2a0:	f7ff b9b0 	b.w	800a604 <tcp_free>
    seqno = pcb->snd_nxt;
 800b2a4:	f8d4 9050 	ldr.w	r9, [r4, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 800b2a8:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 800b2ac:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 800b2b0:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (pcb->state == CLOSED) {
 800b2b4:	8ae5      	ldrh	r5, [r4, #22]
 800b2b6:	b99b      	cbnz	r3, 800b2e0 <tcp_abandon+0x88>
      if (pcb->local_port != 0) {
 800b2b8:	b13d      	cbz	r5, 800b2ca <tcp_abandon+0x72>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b2ba:	4a23      	ldr	r2, [pc, #140]	; (800b348 <tcp_abandon+0xf0>)
 800b2bc:	6813      	ldr	r3, [r2, #0]
 800b2be:	42a3      	cmp	r3, r4
 800b2c0:	d106      	bne.n	800b2d0 <tcp_abandon+0x78>
 800b2c2:	68e3      	ldr	r3, [r4, #12]
 800b2c4:	6013      	str	r3, [r2, #0]
 800b2c6:	2500      	movs	r5, #0
 800b2c8:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 800b2ca:	462e      	mov	r6, r5
 800b2cc:	e00f      	b.n	800b2ee <tcp_abandon+0x96>
 800b2ce:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d0f8      	beq.n	800b2c6 <tcp_abandon+0x6e>
 800b2d4:	68da      	ldr	r2, [r3, #12]
 800b2d6:	42a2      	cmp	r2, r4
 800b2d8:	d1f9      	bne.n	800b2ce <tcp_abandon+0x76>
 800b2da:	68e2      	ldr	r2, [r4, #12]
 800b2dc:	60da      	str	r2, [r3, #12]
 800b2de:	e7f2      	b.n	800b2c6 <tcp_abandon+0x6e>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b2e0:	4621      	mov	r1, r4
 800b2e2:	481a      	ldr	r0, [pc, #104]	; (800b34c <tcp_abandon+0xf4>)
 800b2e4:	f7ff fd98 	bl	800ae18 <tcp_pcb_remove>
 800b2e8:	4b19      	ldr	r3, [pc, #100]	; (800b350 <tcp_abandon+0xf8>)
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800b2ee:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800b2f0:	b108      	cbz	r0, 800b2f6 <tcp_abandon+0x9e>
      tcp_segs_free(pcb->unacked);
 800b2f2:	f7ff fadd 	bl	800a8b0 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800b2f6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800b2f8:	b108      	cbz	r0, 800b2fe <tcp_abandon+0xa6>
      tcp_segs_free(pcb->unsent);
 800b2fa:	f7ff fad9 	bl	800a8b0 <tcp_segs_free>
    if (send_rst) {
 800b2fe:	b156      	cbz	r6, 800b316 <tcp_abandon+0xbe>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800b300:	8b23      	ldrh	r3, [r4, #24]
 800b302:	4652      	mov	r2, sl
 800b304:	4649      	mov	r1, r9
 800b306:	4620      	mov	r0, r4
 800b308:	e9cd 5301 	strd	r5, r3, [sp, #4]
 800b30c:	1d23      	adds	r3, r4, #4
 800b30e:	9300      	str	r3, [sp, #0]
 800b310:	4623      	mov	r3, r4
 800b312:	f001 ffed 	bl	800d2f0 <tcp_rst>
    tcp_free(pcb);
 800b316:	4620      	mov	r0, r4
 800b318:	f7ff f974 	bl	800a604 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b31c:	b13f      	cbz	r7, 800b32e <tcp_abandon+0xd6>
 800b31e:	f06f 010c 	mvn.w	r1, #12
 800b322:	4640      	mov	r0, r8
 800b324:	463b      	mov	r3, r7
}
 800b326:	b004      	add	sp, #16
 800b328:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b32c:	4718      	bx	r3
}
 800b32e:	b004      	add	sp, #16
 800b330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b334:	0801518f 	.word	0x0801518f
 800b338:	080156f6 	.word	0x080156f6
 800b33c:	0801342c 	.word	0x0801342c
 800b340:	0801570f 	.word	0x0801570f
 800b344:	20010d64 	.word	0x20010d64
 800b348:	20010d60 	.word	0x20010d60
 800b34c:	20010d54 	.word	0x20010d54
 800b350:	20010d50 	.word	0x20010d50

0800b354 <tcp_abort>:
  tcp_abandon(pcb, 1);
 800b354:	2101      	movs	r1, #1
 800b356:	f7ff bf7f 	b.w	800b258 <tcp_abandon>
	...

0800b35c <tcp_accept_null>:
{
 800b35c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800b35e:	460c      	mov	r4, r1
 800b360:	b931      	cbnz	r1, 800b370 <tcp_accept_null+0x14>
 800b362:	4b06      	ldr	r3, [pc, #24]	; (800b37c <tcp_accept_null+0x20>)
 800b364:	f240 320f 	movw	r2, #783	; 0x30f
 800b368:	4905      	ldr	r1, [pc, #20]	; (800b380 <tcp_accept_null+0x24>)
 800b36a:	4806      	ldr	r0, [pc, #24]	; (800b384 <tcp_accept_null+0x28>)
 800b36c:	f003 f80e 	bl	800e38c <iprintf>
  tcp_abort(pcb);
 800b370:	4620      	mov	r0, r4
 800b372:	f7ff ffef 	bl	800b354 <tcp_abort>
}
 800b376:	f06f 000c 	mvn.w	r0, #12
 800b37a:	bd10      	pop	{r4, pc}
 800b37c:	0801518f 	.word	0x0801518f
 800b380:	08015740 	.word	0x08015740
 800b384:	0801342c 	.word	0x0801342c

0800b388 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800b388:	b570      	push	{r4, r5, r6, lr}
 800b38a:	460c      	mov	r4, r1
  struct tcp_pcb *pcb;
  pcb = pcb_list;

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800b38c:	4605      	mov	r5, r0
 800b38e:	b930      	cbnz	r0, 800b39e <tcp_netif_ip_addr_changed_pcblist+0x16>
 800b390:	4b09      	ldr	r3, [pc, #36]	; (800b3b8 <tcp_netif_ip_addr_changed_pcblist+0x30>)
 800b392:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800b396:	4909      	ldr	r1, [pc, #36]	; (800b3bc <tcp_netif_ip_addr_changed_pcblist+0x34>)
 800b398:	4809      	ldr	r0, [pc, #36]	; (800b3c0 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 800b39a:	f002 fff7 	bl	800e38c <iprintf>

  while (pcb != NULL) {
 800b39e:	b904      	cbnz	r4, 800b3a2 <tcp_netif_ip_addr_changed_pcblist+0x1a>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 800b3a0:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b3a2:	6822      	ldr	r2, [r4, #0]
 800b3a4:	682b      	ldr	r3, [r5, #0]
 800b3a6:	68e6      	ldr	r6, [r4, #12]
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d102      	bne.n	800b3b2 <tcp_netif_ip_addr_changed_pcblist+0x2a>
      tcp_abort(pcb);
 800b3ac:	4620      	mov	r0, r4
 800b3ae:	f7ff ffd1 	bl	800b354 <tcp_abort>
{
 800b3b2:	4634      	mov	r4, r6
 800b3b4:	e7f3      	b.n	800b39e <tcp_netif_ip_addr_changed_pcblist+0x16>
 800b3b6:	bf00      	nop
 800b3b8:	0801518f 	.word	0x0801518f
 800b3bc:	0801575d 	.word	0x0801575d
 800b3c0:	0801342c 	.word	0x0801342c

0800b3c4 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b3c4:	4b0c      	ldr	r3, [pc, #48]	; (800b3f8 <tcp_kill_state+0x34>)
  inactivity = 0;
 800b3c6:	2200      	movs	r2, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b3c8:	6819      	ldr	r1, [r3, #0]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b3ca:	4b0c      	ldr	r3, [pc, #48]	; (800b3fc <tcp_kill_state+0x38>)
{
 800b3cc:	b430      	push	{r4, r5}
 800b3ce:	4604      	mov	r4, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b3d0:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 800b3d2:	4610      	mov	r0, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b3d4:	b919      	cbnz	r1, 800b3de <tcp_kill_state+0x1a>
  if (inactive != NULL) {
 800b3d6:	b168      	cbz	r0, 800b3f4 <tcp_kill_state+0x30>
}
 800b3d8:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 800b3da:	f7ff bf3d 	b.w	800b258 <tcp_abandon>
    if (pcb->state == state) {
 800b3de:	7d0b      	ldrb	r3, [r1, #20]
 800b3e0:	42a3      	cmp	r3, r4
 800b3e2:	d105      	bne.n	800b3f0 <tcp_kill_state+0x2c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b3e4:	6a0b      	ldr	r3, [r1, #32]
 800b3e6:	1aeb      	subs	r3, r5, r3
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	bf24      	itt	cs
 800b3ec:	461a      	movcs	r2, r3
 800b3ee:	4608      	movcs	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b3f0:	68c9      	ldr	r1, [r1, #12]
 800b3f2:	e7ef      	b.n	800b3d4 <tcp_kill_state+0x10>
}
 800b3f4:	bc30      	pop	{r4, r5}
 800b3f6:	4770      	bx	lr
 800b3f8:	20010d54 	.word	0x20010d54
 800b3fc:	20010d58 	.word	0x20010d58

0800b400 <tcp_alloc>:
{
 800b400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b402:	4604      	mov	r4, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b404:	2001      	movs	r0, #1
 800b406:	f7fe fbc9 	bl	8009b9c <memp_malloc>
  if (pcb == NULL) {
 800b40a:	4603      	mov	r3, r0
 800b40c:	2800      	cmp	r0, #0
 800b40e:	d136      	bne.n	800b47e <tcp_alloc+0x7e>
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800b410:	4e3f      	ldr	r6, [pc, #252]	; (800b510 <tcp_alloc+0x110>)
 800b412:	6830      	ldr	r0, [r6, #0]
  while (pcb != NULL) {
 800b414:	2800      	cmp	r0, #0
 800b416:	d157      	bne.n	800b4c8 <tcp_alloc+0xc8>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b418:	4b3e      	ldr	r3, [pc, #248]	; (800b514 <tcp_alloc+0x114>)
  inactivity = 0;
 800b41a:	4601      	mov	r1, r0
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b41c:	4d3e      	ldr	r5, [pc, #248]	; (800b518 <tcp_alloc+0x118>)
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b41e:	681b      	ldr	r3, [r3, #0]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b420:	682f      	ldr	r7, [r5, #0]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b422:	2b00      	cmp	r3, #0
 800b424:	d15b      	bne.n	800b4de <tcp_alloc+0xde>
  if (inactive != NULL) {
 800b426:	b108      	cbz	r0, 800b42c <tcp_alloc+0x2c>
    tcp_abort(inactive);
 800b428:	f7ff ff94 	bl	800b354 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b42c:	2001      	movs	r0, #1
 800b42e:	f7fe fbb5 	bl	8009b9c <memp_malloc>
    if (pcb == NULL) {
 800b432:	4603      	mov	r3, r0
 800b434:	bb18      	cbnz	r0, 800b47e <tcp_alloc+0x7e>
      tcp_kill_state(LAST_ACK);
 800b436:	2009      	movs	r0, #9
 800b438:	f7ff ffc4 	bl	800b3c4 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b43c:	2001      	movs	r0, #1
 800b43e:	f7fe fbad 	bl	8009b9c <memp_malloc>
      if (pcb == NULL) {
 800b442:	4603      	mov	r3, r0
 800b444:	b9d8      	cbnz	r0, 800b47e <tcp_alloc+0x7e>
        tcp_kill_state(CLOSING);
 800b446:	2008      	movs	r0, #8
 800b448:	f7ff ffbc 	bl	800b3c4 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b44c:	2001      	movs	r0, #1
 800b44e:	f7fe fba5 	bl	8009b9c <memp_malloc>
        if (pcb == NULL) {
 800b452:	4603      	mov	r3, r0
 800b454:	b998      	cbnz	r0, 800b47e <tcp_alloc+0x7e>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b456:	0622      	lsls	r2, r4, #24
 800b458:	d449      	bmi.n	800b4ee <tcp_alloc+0xee>
  if (mprio == 0) {
 800b45a:	b15c      	cbz	r4, 800b474 <tcp_alloc+0x74>
 800b45c:	4621      	mov	r1, r4
  mprio--;
 800b45e:	3901      	subs	r1, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b460:	6832      	ldr	r2, [r6, #0]
  inactivity = 0;
 800b462:	2000      	movs	r0, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b464:	682e      	ldr	r6, [r5, #0]
  mprio--;
 800b466:	b2c9      	uxtb	r1, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b468:	2a00      	cmp	r2, #0
 800b46a:	d142      	bne.n	800b4f2 <tcp_alloc+0xf2>
  if (inactive != NULL) {
 800b46c:	b113      	cbz	r3, 800b474 <tcp_alloc+0x74>
    tcp_abort(inactive);
 800b46e:	4618      	mov	r0, r3
 800b470:	f7ff ff70 	bl	800b354 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b474:	2001      	movs	r0, #1
 800b476:	f7fe fb91 	bl	8009b9c <memp_malloc>
  if (pcb != NULL) {
 800b47a:	4603      	mov	r3, r0
 800b47c:	b310      	cbz	r0, 800b4c4 <tcp_alloc+0xc4>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800b47e:	2298      	movs	r2, #152	; 0x98
 800b480:	4618      	mov	r0, r3
 800b482:	2100      	movs	r1, #0
 800b484:	f002 ff7a 	bl	800e37c <memset>
    pcb->snd_buf = TCP_SND_BUF;
 800b488:	f241 62d0 	movw	r2, #5840	; 0x16d0
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800b48c:	4603      	mov	r3, r0
    pcb->prio = prio;
 800b48e:	7544      	strb	r4, [r0, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800b490:	f8a0 2064 	strh.w	r2, [r0, #100]	; 0x64
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800b494:	4a21      	ldr	r2, [pc, #132]	; (800b51c <tcp_alloc+0x11c>)
 800b496:	6282      	str	r2, [r0, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800b498:	22ff      	movs	r2, #255	; 0xff
 800b49a:	72c2      	strb	r2, [r0, #11]
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800b49c:	2206      	movs	r2, #6
 800b49e:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800b4a2:	87c2      	strh	r2, [r0, #62]	; 0x3e
    pcb->rtime = -1;
 800b4a4:	4a1e      	ldr	r2, [pc, #120]	; (800b520 <tcp_alloc+0x120>)
 800b4a6:	6302      	str	r2, [r0, #48]	; 0x30
    pcb->tmr = tcp_ticks;
 800b4a8:	4a1b      	ldr	r2, [pc, #108]	; (800b518 <tcp_alloc+0x118>)
 800b4aa:	6812      	ldr	r2, [r2, #0]
 800b4ac:	6202      	str	r2, [r0, #32]
    pcb->last_timer = tcp_timer_ctr;
 800b4ae:	4a1d      	ldr	r2, [pc, #116]	; (800b524 <tcp_alloc+0x124>)
 800b4b0:	7812      	ldrb	r2, [r2, #0]
 800b4b2:	7782      	strb	r2, [r0, #30]
    pcb->cwnd = 1;
 800b4b4:	4a1c      	ldr	r2, [pc, #112]	; (800b528 <tcp_alloc+0x128>)
 800b4b6:	6482      	str	r2, [r0, #72]	; 0x48
    pcb->recv = tcp_recv_null;
 800b4b8:	4a1c      	ldr	r2, [pc, #112]	; (800b52c <tcp_alloc+0x12c>)
 800b4ba:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800b4be:	4a1c      	ldr	r2, [pc, #112]	; (800b530 <tcp_alloc+0x130>)
 800b4c0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pcb->flags & TF_CLOSEPEND) {
 800b4c8:	8b43      	ldrh	r3, [r0, #26]
    struct tcp_pcb *next = pcb->next;
 800b4ca:	68c5      	ldr	r5, [r0, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 800b4cc:	0719      	lsls	r1, r3, #28
 800b4ce:	d504      	bpl.n	800b4da <tcp_alloc+0xda>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b4d0:	f023 0308 	bic.w	r3, r3, #8
 800b4d4:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 800b4d6:	f7ff f859 	bl	800a58c <tcp_close_shutdown_fin>
{
 800b4da:	4628      	mov	r0, r5
 800b4dc:	e79a      	b.n	800b414 <tcp_alloc+0x14>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b4de:	6a1a      	ldr	r2, [r3, #32]
 800b4e0:	1aba      	subs	r2, r7, r2
 800b4e2:	428a      	cmp	r2, r1
 800b4e4:	bf24      	itt	cs
 800b4e6:	4618      	movcs	r0, r3
 800b4e8:	4611      	movcs	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b4ea:	68db      	ldr	r3, [r3, #12]
 800b4ec:	e799      	b.n	800b422 <tcp_alloc+0x22>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b4ee:	217f      	movs	r1, #127	; 0x7f
 800b4f0:	e7b5      	b.n	800b45e <tcp_alloc+0x5e>
    if ((pcb->prio < mprio) ||
 800b4f2:	7d57      	ldrb	r7, [r2, #21]
 800b4f4:	428f      	cmp	r7, r1
 800b4f6:	d304      	bcc.n	800b502 <tcp_alloc+0x102>
 800b4f8:	d107      	bne.n	800b50a <tcp_alloc+0x10a>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b4fa:	6a15      	ldr	r5, [r2, #32]
 800b4fc:	1b75      	subs	r5, r6, r5
 800b4fe:	4285      	cmp	r5, r0
 800b500:	d303      	bcc.n	800b50a <tcp_alloc+0x10a>
      inactivity = tcp_ticks - pcb->tmr;
 800b502:	6a10      	ldr	r0, [r2, #32]
    if ((pcb->prio < mprio) ||
 800b504:	4639      	mov	r1, r7
      inactivity = tcp_ticks - pcb->tmr;
 800b506:	4613      	mov	r3, r2
 800b508:	1a30      	subs	r0, r6, r0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b50a:	68d2      	ldr	r2, [r2, #12]
 800b50c:	e7ac      	b.n	800b468 <tcp_alloc+0x68>
 800b50e:	bf00      	nop
 800b510:	20010d54 	.word	0x20010d54
 800b514:	20010d64 	.word	0x20010d64
 800b518:	20010d58 	.word	0x20010d58
 800b51c:	0b680b68 	.word	0x0b680b68
 800b520:	0218ffff 	.word	0x0218ffff
 800b524:	20006949 	.word	0x20006949
 800b528:	16d00001 	.word	0x16d00001
 800b52c:	0800b071 	.word	0x0800b071
 800b530:	006ddd00 	.word	0x006ddd00

0800b534 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800b534:	2040      	movs	r0, #64	; 0x40
 800b536:	f7ff bf63 	b.w	800b400 <tcp_alloc>
	...

0800b53c <tcp_next_iss>:
{
 800b53c:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800b53e:	b930      	cbnz	r0, 800b54e <tcp_next_iss+0x12>
 800b540:	4b06      	ldr	r3, [pc, #24]	; (800b55c <tcp_next_iss+0x20>)
 800b542:	f640 02af 	movw	r2, #2223	; 0x8af
 800b546:	4906      	ldr	r1, [pc, #24]	; (800b560 <tcp_next_iss+0x24>)
 800b548:	4806      	ldr	r0, [pc, #24]	; (800b564 <tcp_next_iss+0x28>)
 800b54a:	f002 ff1f 	bl	800e38c <iprintf>
  iss += tcp_ticks;       /* XXX */
 800b54e:	4b06      	ldr	r3, [pc, #24]	; (800b568 <tcp_next_iss+0x2c>)
 800b550:	4a06      	ldr	r2, [pc, #24]	; (800b56c <tcp_next_iss+0x30>)
 800b552:	6858      	ldr	r0, [r3, #4]
 800b554:	6812      	ldr	r2, [r2, #0]
 800b556:	4410      	add	r0, r2
 800b558:	6058      	str	r0, [r3, #4]
}
 800b55a:	bd08      	pop	{r3, pc}
 800b55c:	0801518f 	.word	0x0801518f
 800b560:	08015791 	.word	0x08015791
 800b564:	0801342c 	.word	0x0801342c
 800b568:	2000003c 	.word	0x2000003c
 800b56c:	20010d58 	.word	0x20010d58

0800b570 <tcp_eff_send_mss_netif>:
{
 800b570:	b538      	push	{r3, r4, r5, lr}
 800b572:	4604      	mov	r4, r0
 800b574:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800b576:	b932      	cbnz	r2, 800b586 <tcp_eff_send_mss_netif+0x16>
 800b578:	4b09      	ldr	r3, [pc, #36]	; (800b5a0 <tcp_eff_send_mss_netif+0x30>)
 800b57a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800b57e:	4909      	ldr	r1, [pc, #36]	; (800b5a4 <tcp_eff_send_mss_netif+0x34>)
 800b580:	4809      	ldr	r0, [pc, #36]	; (800b5a8 <tcp_eff_send_mss_netif+0x38>)
 800b582:	f002 ff03 	bl	800e38c <iprintf>
    if (outif == NULL) {
 800b586:	b14d      	cbz	r5, 800b59c <tcp_eff_send_mss_netif+0x2c>
    mtu = outif->mtu;
 800b588:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
  if (mtu != 0) {
 800b58a:	b13b      	cbz	r3, 800b59c <tcp_eff_send_mss_netif+0x2c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800b58c:	2b28      	cmp	r3, #40	; 0x28
 800b58e:	bf8a      	itet	hi
 800b590:	3b28      	subhi	r3, #40	; 0x28
 800b592:	2300      	movls	r3, #0
 800b594:	b29b      	uxthhi	r3, r3
    sendmss = LWIP_MIN(sendmss, mss_s);
 800b596:	429c      	cmp	r4, r3
 800b598:	bf28      	it	cs
 800b59a:	461c      	movcs	r4, r3
}
 800b59c:	4620      	mov	r0, r4
 800b59e:	bd38      	pop	{r3, r4, r5, pc}
 800b5a0:	0801518f 	.word	0x0801518f
 800b5a4:	080157ab 	.word	0x080157ab
 800b5a8:	0801342c 	.word	0x0801342c

0800b5ac <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b5ac:	b538      	push	{r3, r4, r5, lr}
 800b5ae:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800b5b0:	4604      	mov	r4, r0
 800b5b2:	b180      	cbz	r0, 800b5d6 <tcp_netif_ip_addr_changed+0x2a>
 800b5b4:	6803      	ldr	r3, [r0, #0]
 800b5b6:	b173      	cbz	r3, 800b5d6 <tcp_netif_ip_addr_changed+0x2a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800b5b8:	4b0b      	ldr	r3, [pc, #44]	; (800b5e8 <tcp_netif_ip_addr_changed+0x3c>)
 800b5ba:	6819      	ldr	r1, [r3, #0]
 800b5bc:	f7ff fee4 	bl	800b388 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800b5c0:	4b0a      	ldr	r3, [pc, #40]	; (800b5ec <tcp_netif_ip_addr_changed+0x40>)
 800b5c2:	4620      	mov	r0, r4
 800b5c4:	6819      	ldr	r1, [r3, #0]
 800b5c6:	f7ff fedf 	bl	800b388 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800b5ca:	b125      	cbz	r5, 800b5d6 <tcp_netif_ip_addr_changed+0x2a>
 800b5cc:	682b      	ldr	r3, [r5, #0]
 800b5ce:	b113      	cbz	r3, 800b5d6 <tcp_netif_ip_addr_changed+0x2a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b5d0:	4b07      	ldr	r3, [pc, #28]	; (800b5f0 <tcp_netif_ip_addr_changed+0x44>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	b903      	cbnz	r3, 800b5d8 <tcp_netif_ip_addr_changed+0x2c>
          ip_addr_copy(lpcb->local_ip, *new_addr);
        }
      }
    }
  }
}
 800b5d6:	bd38      	pop	{r3, r4, r5, pc}
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800b5d8:	6819      	ldr	r1, [r3, #0]
 800b5da:	6822      	ldr	r2, [r4, #0]
 800b5dc:	4291      	cmp	r1, r2
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800b5de:	bf04      	itt	eq
 800b5e0:	682a      	ldreq	r2, [r5, #0]
 800b5e2:	601a      	streq	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b5e4:	68db      	ldr	r3, [r3, #12]
 800b5e6:	e7f5      	b.n	800b5d4 <tcp_netif_ip_addr_changed+0x28>
 800b5e8:	20010d54 	.word	0x20010d54
 800b5ec:	20010d60 	.word	0x20010d60
 800b5f0:	20010d5c 	.word	0x20010d5c

0800b5f4 <tcp_get_next_optbyte>:
}

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
 800b5f4:	4a08      	ldr	r2, [pc, #32]	; (800b618 <tcp_get_next_optbyte+0x24>)
 800b5f6:	8813      	ldrh	r3, [r2, #0]
 800b5f8:	4610      	mov	r0, r2
 800b5fa:	1c59      	adds	r1, r3, #1
 800b5fc:	8011      	strh	r1, [r2, #0]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800b5fe:	6851      	ldr	r1, [r2, #4]
 800b600:	b111      	cbz	r1, 800b608 <tcp_get_next_optbyte+0x14>
 800b602:	8912      	ldrh	r2, [r2, #8]
 800b604:	4293      	cmp	r3, r2
 800b606:	d203      	bcs.n	800b610 <tcp_get_next_optbyte+0x1c>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
    return opts[optidx];
 800b608:	68c2      	ldr	r2, [r0, #12]
 800b60a:	4413      	add	r3, r2
 800b60c:	7d18      	ldrb	r0, [r3, #20]
 800b60e:	4770      	bx	lr
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800b610:	1a9b      	subs	r3, r3, r2
    return tcphdr_opt2[idx];
 800b612:	b2db      	uxtb	r3, r3
 800b614:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 800b616:	4770      	bx	lr
 800b618:	2000694c 	.word	0x2000694c

0800b61c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800b61c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800b620:	4606      	mov	r6, r0
 800b622:	b930      	cbnz	r0, 800b632 <tcp_parseopt+0x16>
 800b624:	4b1e      	ldr	r3, [pc, #120]	; (800b6a0 <tcp_parseopt+0x84>)
 800b626:	f240 727d 	movw	r2, #1917	; 0x77d
 800b62a:	491e      	ldr	r1, [pc, #120]	; (800b6a4 <tcp_parseopt+0x88>)
 800b62c:	481e      	ldr	r0, [pc, #120]	; (800b6a8 <tcp_parseopt+0x8c>)
 800b62e:	f002 fead 	bl	800e38c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800b632:	4d1e      	ldr	r5, [pc, #120]	; (800b6ac <tcp_parseopt+0x90>)
 800b634:	8a2f      	ldrh	r7, [r5, #16]
 800b636:	b17f      	cbz	r7, 800b658 <tcp_parseopt+0x3c>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b638:	2300      	movs	r3, #0
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
          mss |= tcp_get_next_optbyte();
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b63a:	f240 58b3 	movw	r8, #1459	; 0x5b3
 800b63e:	f240 59b4 	movw	r9, #1460	; 0x5b4
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b642:	802b      	strh	r3, [r5, #0]
 800b644:	882b      	ldrh	r3, [r5, #0]
 800b646:	42bb      	cmp	r3, r7
 800b648:	d206      	bcs.n	800b658 <tcp_parseopt+0x3c>
      u8_t opt = tcp_get_next_optbyte();
 800b64a:	f7ff ffd3 	bl	800b5f4 <tcp_get_next_optbyte>
      switch (opt) {
 800b64e:	2801      	cmp	r0, #1
 800b650:	d0f8      	beq.n	800b644 <tcp_parseopt+0x28>
 800b652:	2802      	cmp	r0, #2
 800b654:	d002      	beq.n	800b65c <tcp_parseopt+0x40>
 800b656:	b9c8      	cbnz	r0, 800b68c <tcp_parseopt+0x70>
             can skip past them. */
          tcp_optidx += data - 2;
      }
    }
  }
}
 800b658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800b65c:	f7ff ffca 	bl	800b5f4 <tcp_get_next_optbyte>
 800b660:	2804      	cmp	r0, #4
 800b662:	d1f9      	bne.n	800b658 <tcp_parseopt+0x3c>
 800b664:	882b      	ldrh	r3, [r5, #0]
 800b666:	3301      	adds	r3, #1
 800b668:	42bb      	cmp	r3, r7
 800b66a:	daf5      	bge.n	800b658 <tcp_parseopt+0x3c>
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800b66c:	f7ff ffc2 	bl	800b5f4 <tcp_get_next_optbyte>
 800b670:	0200      	lsls	r0, r0, #8
 800b672:	b284      	uxth	r4, r0
          mss |= tcp_get_next_optbyte();
 800b674:	f7ff ffbe 	bl	800b5f4 <tcp_get_next_optbyte>
 800b678:	ea44 0300 	orr.w	r3, r4, r0
 800b67c:	b29b      	uxth	r3, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b67e:	1e5a      	subs	r2, r3, #1
 800b680:	b292      	uxth	r2, r2
 800b682:	4542      	cmp	r2, r8
 800b684:	bf88      	it	hi
 800b686:	464b      	movhi	r3, r9
 800b688:	8673      	strh	r3, [r6, #50]	; 0x32
          break;
 800b68a:	e7db      	b.n	800b644 <tcp_parseopt+0x28>
          data = tcp_get_next_optbyte();
 800b68c:	f7ff ffb2 	bl	800b5f4 <tcp_get_next_optbyte>
          if (data < 2) {
 800b690:	2801      	cmp	r0, #1
 800b692:	d9e1      	bls.n	800b658 <tcp_parseopt+0x3c>
          tcp_optidx += data - 2;
 800b694:	882b      	ldrh	r3, [r5, #0]
 800b696:	3b02      	subs	r3, #2
 800b698:	4418      	add	r0, r3
 800b69a:	8028      	strh	r0, [r5, #0]
 800b69c:	e7d2      	b.n	800b644 <tcp_parseopt+0x28>
 800b69e:	bf00      	nop
 800b6a0:	08015891 	.word	0x08015891
 800b6a4:	080158fa 	.word	0x080158fa
 800b6a8:	0801342c 	.word	0x0801342c
 800b6ac:	2000694c 	.word	0x2000694c

0800b6b0 <tcp_input_delayed_close>:
{
 800b6b0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800b6b2:	4604      	mov	r4, r0
 800b6b4:	b930      	cbnz	r0, 800b6c4 <tcp_input_delayed_close+0x14>
 800b6b6:	4b0f      	ldr	r3, [pc, #60]	; (800b6f4 <tcp_input_delayed_close+0x44>)
 800b6b8:	f240 225a 	movw	r2, #602	; 0x25a
 800b6bc:	490e      	ldr	r1, [pc, #56]	; (800b6f8 <tcp_input_delayed_close+0x48>)
 800b6be:	480f      	ldr	r0, [pc, #60]	; (800b6fc <tcp_input_delayed_close+0x4c>)
 800b6c0:	f002 fe64 	bl	800e38c <iprintf>
  if (recv_flags & TF_CLOSED) {
 800b6c4:	4b0e      	ldr	r3, [pc, #56]	; (800b700 <tcp_input_delayed_close+0x50>)
 800b6c6:	7c98      	ldrb	r0, [r3, #18]
 800b6c8:	f010 0010 	ands.w	r0, r0, #16
 800b6cc:	d011      	beq.n	800b6f2 <tcp_input_delayed_close+0x42>
    if (!(pcb->flags & TF_RXCLOSED)) {
 800b6ce:	8b63      	ldrh	r3, [r4, #26]
 800b6d0:	06db      	lsls	r3, r3, #27
 800b6d2:	d406      	bmi.n	800b6e2 <tcp_input_delayed_close+0x32>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800b6d4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800b6d8:	b11b      	cbz	r3, 800b6e2 <tcp_input_delayed_close+0x32>
 800b6da:	f06f 010e 	mvn.w	r1, #14
 800b6de:	6920      	ldr	r0, [r4, #16]
 800b6e0:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b6e2:	4621      	mov	r1, r4
 800b6e4:	4807      	ldr	r0, [pc, #28]	; (800b704 <tcp_input_delayed_close+0x54>)
 800b6e6:	f7ff fb97 	bl	800ae18 <tcp_pcb_remove>
    tcp_free(pcb);
 800b6ea:	4620      	mov	r0, r4
 800b6ec:	f7fe ff8a 	bl	800a604 <tcp_free>
 800b6f0:	2001      	movs	r0, #1
}
 800b6f2:	bd10      	pop	{r4, pc}
 800b6f4:	08015891 	.word	0x08015891
 800b6f8:	08015914 	.word	0x08015914
 800b6fc:	0801342c 	.word	0x0801342c
 800b700:	2000694c 	.word	0x2000694c
 800b704:	20010d54 	.word	0x20010d54

0800b708 <tcp_free_acked_segments.isra.0>:
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 800b708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b70c:	4606      	mov	r6, r0
 800b70e:	4617      	mov	r7, r2
    seg_list = seg_list->next;
 800b710:	460c      	mov	r4, r1
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800b712:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 800b7bc <tcp_free_acked_segments.isra.0+0xb4>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b716:	f8df 909c 	ldr.w	r9, [pc, #156]	; 800b7b4 <tcp_free_acked_segments.isra.0+0xac>
  while (seg_list != NULL &&
 800b71a:	2c00      	cmp	r4, #0
 800b71c:	d037      	beq.n	800b78e <tcp_free_acked_segments.isra.0+0x86>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800b71e:	68e3      	ldr	r3, [r4, #12]
 800b720:	6858      	ldr	r0, [r3, #4]
 800b722:	f7fd ff1e 	bl	8009562 <lwip_htonl>
 800b726:	68e3      	ldr	r3, [r4, #12]
 800b728:	4682      	mov	sl, r0
 800b72a:	8925      	ldrh	r5, [r4, #8]
 800b72c:	8998      	ldrh	r0, [r3, #12]
 800b72e:	f7fd ff15 	bl	800955c <lwip_htons>
 800b732:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800b736:	f010 0003 	ands.w	r0, r0, #3
 800b73a:	eba5 0303 	sub.w	r3, r5, r3
 800b73e:	bf18      	it	ne
 800b740:	2001      	movne	r0, #1
 800b742:	eb03 050a 	add.w	r5, r3, sl
 800b746:	4405      	add	r5, r0
  while (seg_list != NULL &&
 800b748:	2d00      	cmp	r5, #0
 800b74a:	dc21      	bgt.n	800b790 <tcp_free_acked_segments.isra.0+0x88>
    clen = pbuf_clen(next->p);
 800b74c:	e9d4 a000 	ldrd	sl, r0, [r4]
 800b750:	f7fe fda6 	bl	800a2a0 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b754:	8833      	ldrh	r3, [r6, #0]
    clen = pbuf_clen(next->p);
 800b756:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b758:	4283      	cmp	r3, r0
 800b75a:	d206      	bcs.n	800b76a <tcp_free_acked_segments.isra.0+0x62>
 800b75c:	464b      	mov	r3, r9
 800b75e:	f240 4257 	movw	r2, #1111	; 0x457
 800b762:	4912      	ldr	r1, [pc, #72]	; (800b7ac <tcp_free_acked_segments.isra.0+0xa4>)
 800b764:	4812      	ldr	r0, [pc, #72]	; (800b7b0 <tcp_free_acked_segments.isra.0+0xa8>)
 800b766:	f002 fe11 	bl	800e38c <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b76a:	8830      	ldrh	r0, [r6, #0]
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b76c:	f8b8 2014 	ldrh.w	r2, [r8, #20]
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b770:	1b45      	subs	r5, r0, r5
    tcp_seg_free(next);
 800b772:	4620      	mov	r0, r4
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b774:	8035      	strh	r5, [r6, #0]
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b776:	8923      	ldrh	r3, [r4, #8]
 800b778:	4413      	add	r3, r2
 800b77a:	f8a8 3014 	strh.w	r3, [r8, #20]
    tcp_seg_free(next);
 800b77e:	f7ff f889 	bl	800a894 <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 800b782:	8833      	ldrh	r3, [r6, #0]
 800b784:	b17b      	cbz	r3, 800b7a6 <tcp_free_acked_segments.isra.0+0x9e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800b786:	f1ba 0f00 	cmp.w	sl, #0
 800b78a:	d10c      	bne.n	800b7a6 <tcp_free_acked_segments.isra.0+0x9e>
 800b78c:	b11f      	cbz	r7, 800b796 <tcp_free_acked_segments.isra.0+0x8e>
    seg_list = seg_list->next;
 800b78e:	2400      	movs	r4, #0
}
 800b790:	4620      	mov	r0, r4
 800b792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 800b796:	4b07      	ldr	r3, [pc, #28]	; (800b7b4 <tcp_free_acked_segments.isra.0+0xac>)
 800b798:	f240 4261 	movw	r2, #1121	; 0x461
 800b79c:	4906      	ldr	r1, [pc, #24]	; (800b7b8 <tcp_free_acked_segments.isra.0+0xb0>)
 800b79e:	4804      	ldr	r0, [pc, #16]	; (800b7b0 <tcp_free_acked_segments.isra.0+0xa8>)
 800b7a0:	f002 fdf4 	bl	800e38c <iprintf>
  while (seg_list != NULL &&
 800b7a4:	e7f3      	b.n	800b78e <tcp_free_acked_segments.isra.0+0x86>
    seg_list = seg_list->next;
 800b7a6:	4654      	mov	r4, sl
 800b7a8:	e7b7      	b.n	800b71a <tcp_free_acked_segments.isra.0+0x12>
 800b7aa:	bf00      	nop
 800b7ac:	08015939 	.word	0x08015939
 800b7b0:	0801342c 	.word	0x0801342c
 800b7b4:	08015891 	.word	0x08015891
 800b7b8:	08015961 	.word	0x08015961
 800b7bc:	2000694c 	.word	0x2000694c

0800b7c0 <tcp_receive>:
{
 800b7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800b7c2:	4604      	mov	r4, r0
 800b7c4:	b930      	cbnz	r0, 800b7d4 <tcp_receive+0x14>
 800b7c6:	4bb4      	ldr	r3, [pc, #720]	; (800ba98 <tcp_receive+0x2d8>)
 800b7c8:	f240 427b 	movw	r2, #1147	; 0x47b
 800b7cc:	49b3      	ldr	r1, [pc, #716]	; (800ba9c <tcp_receive+0x2dc>)
 800b7ce:	48b4      	ldr	r0, [pc, #720]	; (800baa0 <tcp_receive+0x2e0>)
 800b7d0:	f002 fddc 	bl	800e38c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b7d4:	7d23      	ldrb	r3, [r4, #20]
 800b7d6:	2b03      	cmp	r3, #3
 800b7d8:	d806      	bhi.n	800b7e8 <tcp_receive+0x28>
 800b7da:	4baf      	ldr	r3, [pc, #700]	; (800ba98 <tcp_receive+0x2d8>)
 800b7dc:	f240 427c 	movw	r2, #1148	; 0x47c
 800b7e0:	49b0      	ldr	r1, [pc, #704]	; (800baa4 <tcp_receive+0x2e4>)
 800b7e2:	48af      	ldr	r0, [pc, #700]	; (800baa0 <tcp_receive+0x2e0>)
 800b7e4:	f002 fdd2 	bl	800e38c <iprintf>
  if (flags & TCP_ACK) {
 800b7e8:	4daf      	ldr	r5, [pc, #700]	; (800baa8 <tcp_receive+0x2e8>)
 800b7ea:	7f2b      	ldrb	r3, [r5, #28]
 800b7ec:	06de      	lsls	r6, r3, #27
 800b7ee:	d57e      	bpl.n	800b8ee <tcp_receive+0x12e>
 800b7f0:	6a2b      	ldr	r3, [r5, #32]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b7f2:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 800b7f6:	69aa      	ldr	r2, [r5, #24]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b7f8:	e9d4 6015 	ldrd	r6, r0, [r4, #84]	; 0x54
 800b7fc:	1af7      	subs	r7, r6, r3
 800b7fe:	2f00      	cmp	r7, #0
 800b800:	db0a      	blt.n	800b818 <tcp_receive+0x58>
 800b802:	429e      	cmp	r6, r3
 800b804:	d102      	bne.n	800b80c <tcp_receive+0x4c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b806:	1a86      	subs	r6, r0, r2
 800b808:	2e00      	cmp	r6, #0
 800b80a:	db05      	blt.n	800b818 <tcp_receive+0x58>
 800b80c:	4290      	cmp	r0, r2
 800b80e:	d110      	bne.n	800b832 <tcp_receive+0x72>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b810:	68ee      	ldr	r6, [r5, #12]
 800b812:	89f6      	ldrh	r6, [r6, #14]
 800b814:	428e      	cmp	r6, r1
 800b816:	d90c      	bls.n	800b832 <tcp_receive+0x72>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b818:	68ee      	ldr	r6, [r5, #12]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b81a:	f8b4 c062 	ldrh.w	ip, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b81e:	89f6      	ldrh	r6, [r6, #14]
 800b820:	b2b7      	uxth	r7, r6
 800b822:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b826:	45bc      	cmp	ip, r7
      pcb->snd_wl2 = ackno;
 800b828:	e9c4 3215 	strd	r3, r2, [r4, #84]	; 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b82c:	bf38      	it	cc
 800b82e:	f8a4 6062 	strhcc.w	r6, [r4, #98]	; 0x62
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800b832:	6c66      	ldr	r6, [r4, #68]	; 0x44
 800b834:	1b93      	subs	r3, r2, r6
 800b836:	2b00      	cmp	r3, #0
 800b838:	f300 8148 	bgt.w	800bacc <tcp_receive+0x30c>
      if (tcplen == 0) {
 800b83c:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 800b83e:	2b00      	cmp	r3, #0
 800b840:	f040 8140 	bne.w	800bac4 <tcp_receive+0x304>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b844:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b848:	4401      	add	r1, r0
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b84a:	6da7      	ldr	r7, [r4, #88]	; 0x58
 800b84c:	443b      	add	r3, r7
 800b84e:	428b      	cmp	r3, r1
 800b850:	f040 8138 	bne.w	800bac4 <tcp_receive+0x304>
          if (pcb->rtime >= 0) {
 800b854:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800b858:	2b00      	cmp	r3, #0
 800b85a:	f2c0 8133 	blt.w	800bac4 <tcp_receive+0x304>
            if (pcb->lastack == ackno) {
 800b85e:	4296      	cmp	r6, r2
 800b860:	f040 8130 	bne.w	800bac4 <tcp_receive+0x304>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800b864:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b868:	2bff      	cmp	r3, #255	; 0xff
                ++pcb->dupacks;
 800b86a:	bf1c      	itt	ne
 800b86c:	3301      	addne	r3, #1
 800b86e:	f884 3043 	strbne.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 800b872:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b876:	2b03      	cmp	r3, #3
 800b878:	d90f      	bls.n	800b89a <tcp_receive+0xda>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b87a:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800b87e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b882:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800b884:	4413      	add	r3, r2
 800b886:	b29b      	uxth	r3, r3
 800b888:	429a      	cmp	r2, r3
 800b88a:	bf88      	it	hi
 800b88c:	460b      	movhi	r3, r1
 800b88e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 800b892:	4620      	mov	r0, r4
 800b894:	f001 fcf8 	bl	800d288 <tcp_rexmit_fast>
      if (!found_dupack) {
 800b898:	e000      	b.n	800b89c <tcp_receive+0xdc>
              if (pcb->dupacks >= 3) {
 800b89a:	d0fa      	beq.n	800b892 <tcp_receive+0xd2>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b89c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800b89e:	b330      	cbz	r0, 800b8ee <tcp_receive+0x12e>
 800b8a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b8a2:	69aa      	ldr	r2, [r5, #24]
 800b8a4:	1a9b      	subs	r3, r3, r2
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	da21      	bge.n	800b8ee <tcp_receive+0x12e>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b8aa:	4b80      	ldr	r3, [pc, #512]	; (800baac <tcp_receive+0x2ec>)
 800b8ac:	b280      	uxth	r0, r0
      m = (s16_t)(m - (pcb->sa >> 3));
 800b8ae:	f9b4 703c 	ldrsh.w	r7, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b8b2:	881a      	ldrh	r2, [r3, #0]
      m = (s16_t)(m - (pcb->sa >> 3));
 800b8b4:	f3c7 06cf 	ubfx	r6, r7, #3, #16
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b8b8:	1a11      	subs	r1, r2, r0
      m = (s16_t)(m - (pcb->sa >> 3));
 800b8ba:	1b89      	subs	r1, r1, r6
 800b8bc:	b20b      	sxth	r3, r1
      pcb->sa = (s16_t)(pcb->sa + m);
 800b8be:	fa17 f181 	uxtah	r1, r7, r1
      if (m < 0) {
 800b8c2:	2b00      	cmp	r3, #0
      pcb->sa = (s16_t)(pcb->sa + m);
 800b8c4:	b209      	sxth	r1, r1
        m = (s16_t) - m;
 800b8c6:	bfb8      	it	lt
 800b8c8:	1a80      	sublt	r0, r0, r2
      m = (s16_t)(m - (pcb->sv >> 2));
 800b8ca:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      pcb->sa = (s16_t)(pcb->sa + m);
 800b8ce:	87a1      	strh	r1, [r4, #60]	; 0x3c
        m = (s16_t) - m;
 800b8d0:	bfb8      	it	lt
 800b8d2:	1980      	addlt	r0, r0, r6
      pcb->sv = (s16_t)(pcb->sv + m);
 800b8d4:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
        m = (s16_t) - m;
 800b8d8:	bfb8      	it	lt
 800b8da:	b203      	sxthlt	r3, r0
      pcb->sv = (s16_t)(pcb->sv + m);
 800b8dc:	4413      	add	r3, r2
 800b8de:	b29b      	uxth	r3, r3
 800b8e0:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b8e2:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 800b8e6:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	6363      	str	r3, [r4, #52]	; 0x34
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b8ee:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 800b8f0:	6a2b      	ldr	r3, [r5, #32]
 800b8f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b8f4:	2800      	cmp	r0, #0
 800b8f6:	f000 818b 	beq.w	800bc10 <tcp_receive+0x450>
 800b8fa:	7d21      	ldrb	r1, [r4, #20]
 800b8fc:	2906      	cmp	r1, #6
 800b8fe:	f200 8187 	bhi.w	800bc10 <tcp_receive+0x450>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b902:	1ad7      	subs	r7, r2, r3
 800b904:	2f01      	cmp	r7, #1
 800b906:	f100 8172 	bmi.w	800bbee <tcp_receive+0x42e>
 800b90a:	f1c3 0101 	rsb	r1, r3, #1
 800b90e:	1a09      	subs	r1, r1, r0
 800b910:	4411      	add	r1, r2
 800b912:	2900      	cmp	r1, #0
 800b914:	f300 816b 	bgt.w	800bbee <tcp_receive+0x42e>
      struct pbuf *p = inseg.p;
 800b918:	6aee      	ldr	r6, [r5, #44]	; 0x2c
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b91a:	b936      	cbnz	r6, 800b92a <tcp_receive+0x16a>
 800b91c:	4b5e      	ldr	r3, [pc, #376]	; (800ba98 <tcp_receive+0x2d8>)
 800b91e:	f240 5294 	movw	r2, #1428	; 0x594
 800b922:	4963      	ldr	r1, [pc, #396]	; (800bab0 <tcp_receive+0x2f0>)
 800b924:	485e      	ldr	r0, [pc, #376]	; (800baa0 <tcp_receive+0x2e0>)
 800b926:	f002 fd31 	bl	800e38c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800b92a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800b92e:	429f      	cmp	r7, r3
 800b930:	d906      	bls.n	800b940 <tcp_receive+0x180>
 800b932:	4b59      	ldr	r3, [pc, #356]	; (800ba98 <tcp_receive+0x2d8>)
 800b934:	f240 5295 	movw	r2, #1429	; 0x595
 800b938:	495e      	ldr	r1, [pc, #376]	; (800bab4 <tcp_receive+0x2f4>)
 800b93a:	4859      	ldr	r0, [pc, #356]	; (800baa0 <tcp_receive+0x2e0>)
 800b93c:	f002 fd26 	bl	800e38c <iprintf>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b940:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
      off = (u16_t)off32;
 800b942:	b2bf      	uxth	r7, r7
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b944:	891b      	ldrh	r3, [r3, #8]
 800b946:	42bb      	cmp	r3, r7
 800b948:	d206      	bcs.n	800b958 <tcp_receive+0x198>
 800b94a:	4b53      	ldr	r3, [pc, #332]	; (800ba98 <tcp_receive+0x2d8>)
 800b94c:	f240 5297 	movw	r2, #1431	; 0x597
 800b950:	4959      	ldr	r1, [pc, #356]	; (800bab8 <tcp_receive+0x2f8>)
 800b952:	4853      	ldr	r0, [pc, #332]	; (800baa0 <tcp_receive+0x2e0>)
 800b954:	f002 fd1a 	bl	800e38c <iprintf>
      inseg.len -= off;
 800b958:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
        p->len = 0;
 800b95a:	2100      	movs	r1, #0
      inseg.len -= off;
 800b95c:	1bdb      	subs	r3, r3, r7
 800b95e:	862b      	strh	r3, [r5, #48]	; 0x30
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b960:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b962:	891b      	ldrh	r3, [r3, #8]
 800b964:	1bdb      	subs	r3, r3, r7
 800b966:	b29b      	uxth	r3, r3
      while (p->len < off) {
 800b968:	8972      	ldrh	r2, [r6, #10]
 800b96a:	42ba      	cmp	r2, r7
 800b96c:	f0c0 8139 	bcc.w	800bbe2 <tcp_receive+0x422>
      pbuf_remove_header(p, off);
 800b970:	4639      	mov	r1, r7
 800b972:	4630      	mov	r0, r6
 800b974:	f7fe fb24 	bl	8009fc0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b978:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b97a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800b97c:	622b      	str	r3, [r5, #32]
 800b97e:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b980:	6a29      	ldr	r1, [r5, #32]
 800b982:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b984:	1a8b      	subs	r3, r1, r2
 800b986:	2b00      	cmp	r3, #0
 800b988:	f2c0 813d 	blt.w	800bc06 <tcp_receive+0x446>
 800b98c:	1c4b      	adds	r3, r1, #1
 800b98e:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 800b990:	1a9b      	subs	r3, r3, r2
 800b992:	1a1b      	subs	r3, r3, r0
 800b994:	2b00      	cmp	r3, #0
 800b996:	f300 8136 	bgt.w	800bc06 <tcp_receive+0x446>
      if (pcb->rcv_nxt == seqno) {
 800b99a:	4291      	cmp	r1, r2
 800b99c:	f040 8133 	bne.w	800bc06 <tcp_receive+0x446>
        tcplen = TCP_TCPLEN(&inseg);
 800b9a0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b9a2:	8e2e      	ldrh	r6, [r5, #48]	; 0x30
 800b9a4:	8998      	ldrh	r0, [r3, #12]
 800b9a6:	f7fd fdd9 	bl	800955c <lwip_htons>
 800b9aa:	f010 0003 	ands.w	r0, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 800b9ae:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 800b9b0:	bf18      	it	ne
 800b9b2:	2001      	movne	r0, #1
 800b9b4:	4430      	add	r0, r6
 800b9b6:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 800b9b8:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 800b9ba:	84a8      	strh	r0, [r5, #36]	; 0x24
        if (tcplen > pcb->rcv_wnd) {
 800b9bc:	d23d      	bcs.n	800ba3a <tcp_receive+0x27a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b9be:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b9c0:	8998      	ldrh	r0, [r3, #12]
 800b9c2:	f7fd fdcb 	bl	800955c <lwip_htons>
 800b9c6:	07c6      	lsls	r6, r0, #31
 800b9c8:	d50d      	bpl.n	800b9e6 <tcp_receive+0x226>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b9ca:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b9cc:	899e      	ldrh	r6, [r3, #12]
 800b9ce:	4630      	mov	r0, r6
 800b9d0:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 800b9d4:	f7fd fdc2 	bl	800955c <lwip_htons>
 800b9d8:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800b9dc:	f7fd fdbe 	bl	800955c <lwip_htons>
 800b9e0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b9e2:	4306      	orrs	r6, r0
 800b9e4:	819e      	strh	r6, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 800b9e6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800b9e8:	862b      	strh	r3, [r5, #48]	; 0x30
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b9ea:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b9ec:	8998      	ldrh	r0, [r3, #12]
 800b9ee:	f7fd fdb5 	bl	800955c <lwip_htons>
 800b9f2:	0780      	lsls	r0, r0, #30
          pbuf_realloc(inseg.p, inseg.len);
 800b9f4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
            inseg.len -= 1;
 800b9f6:	bf42      	ittt	mi
 800b9f8:	8e2b      	ldrhmi	r3, [r5, #48]	; 0x30
 800b9fa:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800b9fe:	862b      	strhmi	r3, [r5, #48]	; 0x30
          pbuf_realloc(inseg.p, inseg.len);
 800ba00:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 800ba02:	f7fe fbf5 	bl	800a1f0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800ba06:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800ba08:	8e2e      	ldrh	r6, [r5, #48]	; 0x30
 800ba0a:	8998      	ldrh	r0, [r3, #12]
 800ba0c:	f7fd fda6 	bl	800955c <lwip_htons>
 800ba10:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ba14:	6a2b      	ldr	r3, [r5, #32]
          tcplen = TCP_TCPLEN(&inseg);
 800ba16:	bf18      	it	ne
 800ba18:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ba1a:	6a62      	ldr	r2, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 800ba1c:	4430      	add	r0, r6
 800ba1e:	b280      	uxth	r0, r0
 800ba20:	84a8      	strh	r0, [r5, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ba22:	4418      	add	r0, r3
 800ba24:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800ba26:	4413      	add	r3, r2
 800ba28:	4298      	cmp	r0, r3
 800ba2a:	d006      	beq.n	800ba3a <tcp_receive+0x27a>
 800ba2c:	4b1a      	ldr	r3, [pc, #104]	; (800ba98 <tcp_receive+0x2d8>)
 800ba2e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800ba32:	4922      	ldr	r1, [pc, #136]	; (800babc <tcp_receive+0x2fc>)
 800ba34:	481a      	ldr	r0, [pc, #104]	; (800baa0 <tcp_receive+0x2e0>)
 800ba36:	f002 fca9 	bl	800e38c <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 800ba3a:	8caa      	ldrh	r2, [r5, #36]	; 0x24
 800ba3c:	6a2b      	ldr	r3, [r5, #32]
 800ba3e:	4413      	add	r3, r2
 800ba40:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ba42:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d206      	bcs.n	800ba56 <tcp_receive+0x296>
 800ba48:	4b13      	ldr	r3, [pc, #76]	; (800ba98 <tcp_receive+0x2d8>)
 800ba4a:	f240 6207 	movw	r2, #1543	; 0x607
 800ba4e:	491c      	ldr	r1, [pc, #112]	; (800bac0 <tcp_receive+0x300>)
 800ba50:	4813      	ldr	r0, [pc, #76]	; (800baa0 <tcp_receive+0x2e0>)
 800ba52:	f002 fc9b 	bl	800e38c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800ba56:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800ba58:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 800ba5a:	8caa      	ldrh	r2, [r5, #36]	; 0x24
 800ba5c:	1a9b      	subs	r3, r3, r2
 800ba5e:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800ba60:	f7fe fea4 	bl	800a7ac <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800ba64:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ba66:	891a      	ldrh	r2, [r3, #8]
 800ba68:	b112      	cbz	r2, 800ba70 <tcp_receive+0x2b0>
          recv_data = inseg.p;
 800ba6a:	63ab      	str	r3, [r5, #56]	; 0x38
          inseg.p = NULL;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	62eb      	str	r3, [r5, #44]	; 0x2c
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ba70:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800ba72:	8998      	ldrh	r0, [r3, #12]
 800ba74:	f7fd fd72 	bl	800955c <lwip_htons>
 800ba78:	07c1      	lsls	r1, r0, #31
          recv_flags |= TF_GOT_FIN;
 800ba7a:	bf42      	ittt	mi
 800ba7c:	7cab      	ldrbmi	r3, [r5, #18]
 800ba7e:	f043 0320 	orrmi.w	r3, r3, #32
 800ba82:	74ab      	strbmi	r3, [r5, #18]
        tcp_ack(pcb);
 800ba84:	8b63      	ldrh	r3, [r4, #26]
 800ba86:	07da      	lsls	r2, r3, #31
 800ba88:	f140 80b9 	bpl.w	800bbfe <tcp_receive+0x43e>
 800ba8c:	f023 0301 	bic.w	r3, r3, #1
      tcp_ack_now(pcb);
 800ba90:	f043 0302 	orr.w	r3, r3, #2
 800ba94:	e0b5      	b.n	800bc02 <tcp_receive+0x442>
 800ba96:	bf00      	nop
 800ba98:	08015891 	.word	0x08015891
 800ba9c:	08015981 	.word	0x08015981
 800baa0:	0801342c 	.word	0x0801342c
 800baa4:	0801599a 	.word	0x0801599a
 800baa8:	2000694c 	.word	0x2000694c
 800baac:	20010d58 	.word	0x20010d58
 800bab0:	080159b3 	.word	0x080159b3
 800bab4:	080159c3 	.word	0x080159c3
 800bab8:	080159d2 	.word	0x080159d2
 800babc:	080159e2 	.word	0x080159e2
 800bac0:	08015a19 	.word	0x08015a19
        pcb->dupacks = 0;
 800bac4:	2300      	movs	r3, #0
 800bac6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800baca:	e6e7      	b.n	800b89c <tcp_receive+0xdc>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bacc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800bace:	1a51      	subs	r1, r2, r1
 800bad0:	2900      	cmp	r1, #0
 800bad2:	f300 8082 	bgt.w	800bbda <tcp_receive+0x41a>
      if (pcb->flags & TF_INFR) {
 800bad6:	8b61      	ldrh	r1, [r4, #26]
 800bad8:	0748      	lsls	r0, r1, #29
 800bada:	d509      	bpl.n	800baf0 <tcp_receive+0x330>
        tcp_clear_flags(pcb, TF_INFR);
 800badc:	f021 0104 	bic.w	r1, r1, #4
 800bae0:	8361      	strh	r1, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800bae2:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 800bae6:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 800baea:	2100      	movs	r1, #0
 800baec:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800baf0:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 800baf4:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
      pcb->lastack = ackno;
 800baf6:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800baf8:	eb01 01e0 	add.w	r1, r1, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 800bafc:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bafe:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
      if (pcb->state >= ESTABLISHED) {
 800bb02:	2a03      	cmp	r2, #3
      pcb->nrtx = 0;
 800bb04:	f04f 0100 	mov.w	r1, #0
 800bb08:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 800bb0c:	d926      	bls.n	800bb5c <tcp_receive+0x39c>
        if (pcb->cwnd < pcb->ssthresh) {
 800bb0e:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800bb12:	b29b      	uxth	r3, r3
        if (pcb->cwnd < pcb->ssthresh) {
 800bb14:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800bb18:	428a      	cmp	r2, r1
 800bb1a:	d915      	bls.n	800bb48 <tcp_receive+0x388>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800bb1c:	8b62      	ldrh	r2, [r4, #26]
 800bb1e:	f412 6f00 	tst.w	r2, #2048	; 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800bb22:	8e62      	ldrh	r2, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800bb24:	bf14      	ite	ne
 800bb26:	2001      	movne	r0, #1
 800bb28:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800bb2a:	fb12 f200 	smulbb	r2, r2, r0
 800bb2e:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
 800bb30:	429a      	cmp	r2, r3
 800bb32:	bf94      	ite	ls
 800bb34:	188b      	addls	r3, r1, r2
 800bb36:	18cb      	addhi	r3, r1, r3
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bb38:	b29b      	uxth	r3, r3
 800bb3a:	4299      	cmp	r1, r3
 800bb3c:	d901      	bls.n	800bb42 <tcp_receive+0x382>
          TCP_WND_INC(pcb->cwnd, increase);
 800bb3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bb42:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 800bb46:	e009      	b.n	800bb5c <tcp_receive+0x39c>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800bb48:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800bb4c:	4413      	add	r3, r2
 800bb4e:	b29b      	uxth	r3, r3
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d82d      	bhi.n	800bbb0 <tcp_receive+0x3f0>
          if (pcb->bytes_acked >= pcb->cwnd) {
 800bb54:	4299      	cmp	r1, r3
 800bb56:	d92d      	bls.n	800bbb4 <tcp_receive+0x3f4>
 800bb58:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800bb5c:	f104 0666 	add.w	r6, r4, #102	; 0x66
 800bb60:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
 800bb64:	4630      	mov	r0, r6
 800bb66:	f7ff fdcf 	bl	800b708 <tcp_free_acked_segments.isra.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800bb6a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800bb6c:	4602      	mov	r2, r0
 800bb6e:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800bb70:	4630      	mov	r0, r6
 800bb72:	f7ff fdc9 	bl	800b708 <tcp_free_acked_segments.isra.0>
      if (pcb->unacked == NULL) {
 800bb76:	6f22      	ldr	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800bb78:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 800bb7a:	fab2 f382 	clz	r3, r2
 800bb7e:	095b      	lsrs	r3, r3, #5
 800bb80:	425b      	negs	r3, r3
 800bb82:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 800bb84:	2300      	movs	r3, #0
 800bb86:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 800bb88:	b908      	cbnz	r0, 800bb8e <tcp_receive+0x3ce>
        pcb->unsent_oversize = 0;
 800bb8a:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800bb8e:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800bb92:	8aa9      	ldrh	r1, [r5, #20]
 800bb94:	440b      	add	r3, r1
 800bb96:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 800bb9a:	8b63      	ldrh	r3, [r4, #26]
 800bb9c:	051f      	lsls	r7, r3, #20
 800bb9e:	f57f ae7d 	bpl.w	800b89c <tcp_receive+0xdc>
        if (pcb->unacked == NULL) {
 800bba2:	b9ba      	cbnz	r2, 800bbd4 <tcp_receive+0x414>
          if ((pcb->unsent == NULL) ||
 800bba4:	b960      	cbnz	r0, 800bbc0 <tcp_receive+0x400>
          tcp_clear_flags(pcb, TF_RTO);
 800bba6:	8b63      	ldrh	r3, [r4, #26]
 800bba8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bbac:	8363      	strh	r3, [r4, #26]
 800bbae:	e675      	b.n	800b89c <tcp_receive+0xdc>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800bbb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800bbb4:	1a5b      	subs	r3, r3, r1
 800bbb6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bbba:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800bbbc:	440b      	add	r3, r1
 800bbbe:	e7bb      	b.n	800bb38 <tcp_receive+0x378>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800bbc0:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 800bbc2:	68c3      	ldr	r3, [r0, #12]
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800bbc4:	6858      	ldr	r0, [r3, #4]
 800bbc6:	f7fd fccc 	bl	8009562 <lwip_htonl>
 800bbca:	1a30      	subs	r0, r6, r0
 800bbcc:	2800      	cmp	r0, #0
 800bbce:	f73f ae65 	bgt.w	800b89c <tcp_receive+0xdc>
 800bbd2:	e7e8      	b.n	800bba6 <tcp_receive+0x3e6>
 800bbd4:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 800bbd6:	68d3      	ldr	r3, [r2, #12]
 800bbd8:	e7f4      	b.n	800bbc4 <tcp_receive+0x404>
      tcp_send_empty_ack(pcb);
 800bbda:	4620      	mov	r0, r4
 800bbdc:	f001 fbce 	bl	800d37c <tcp_send_empty_ack>
 800bbe0:	e65c      	b.n	800b89c <tcp_receive+0xdc>
        off -= p->len;
 800bbe2:	1abf      	subs	r7, r7, r2
        p->tot_len = new_tot_len;
 800bbe4:	8133      	strh	r3, [r6, #8]
        p->len = 0;
 800bbe6:	8171      	strh	r1, [r6, #10]
        off -= p->len;
 800bbe8:	b2bf      	uxth	r7, r7
        p = p->next;
 800bbea:	6836      	ldr	r6, [r6, #0]
 800bbec:	e6bc      	b.n	800b968 <tcp_receive+0x1a8>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800bbee:	1a9b      	subs	r3, r3, r2
 800bbf0:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 800bbf2:	bfbe      	ittt	lt
 800bbf4:	8b63      	ldrhlt	r3, [r4, #26]
 800bbf6:	f043 0302 	orrlt.w	r3, r3, #2
 800bbfa:	8363      	strhlt	r3, [r4, #26]
 800bbfc:	e6c0      	b.n	800b980 <tcp_receive+0x1c0>
        tcp_ack(pcb);
 800bbfe:	f043 0301 	orr.w	r3, r3, #1
      tcp_ack_now(pcb);
 800bc02:	8363      	strh	r3, [r4, #26]
}
 800bc04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tcp_send_empty_ack(pcb);
 800bc06:	4620      	mov	r0, r4
}
 800bc08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        tcp_send_empty_ack(pcb);
 800bc0c:	f001 bbb6 	b.w	800d37c <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800bc10:	1a99      	subs	r1, r3, r2
 800bc12:	2900      	cmp	r1, #0
 800bc14:	db05      	blt.n	800bc22 <tcp_receive+0x462>
 800bc16:	3301      	adds	r3, #1
 800bc18:	1a9b      	subs	r3, r3, r2
 800bc1a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800bc1c:	1a9b      	subs	r3, r3, r2
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	ddf0      	ble.n	800bc04 <tcp_receive+0x444>
      tcp_ack_now(pcb);
 800bc22:	8b63      	ldrh	r3, [r4, #26]
 800bc24:	e734      	b.n	800ba90 <tcp_receive+0x2d0>
 800bc26:	bf00      	nop

0800bc28 <tcp_input>:
{
 800bc28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800bc2c:	4606      	mov	r6, r0
{
 800bc2e:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800bc30:	b928      	cbnz	r0, 800bc3e <tcp_input+0x16>
 800bc32:	4ba0      	ldr	r3, [pc, #640]	; (800beb4 <tcp_input+0x28c>)
 800bc34:	2283      	movs	r2, #131	; 0x83
 800bc36:	49a0      	ldr	r1, [pc, #640]	; (800beb8 <tcp_input+0x290>)
 800bc38:	48a0      	ldr	r0, [pc, #640]	; (800bebc <tcp_input+0x294>)
 800bc3a:	f002 fba7 	bl	800e38c <iprintf>
  tcphdr = (struct tcp_hdr *)p->payload;
 800bc3e:	6873      	ldr	r3, [r6, #4]
 800bc40:	4d9f      	ldr	r5, [pc, #636]	; (800bec0 <tcp_input+0x298>)
 800bc42:	60eb      	str	r3, [r5, #12]
  if (p->len < TCP_HLEN) {
 800bc44:	8973      	ldrh	r3, [r6, #10]
 800bc46:	2b13      	cmp	r3, #19
 800bc48:	f240 80a2 	bls.w	800bd90 <tcp_input+0x168>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800bc4c:	4f9d      	ldr	r7, [pc, #628]	; (800bec4 <tcp_input+0x29c>)
 800bc4e:	6839      	ldr	r1, [r7, #0]
 800bc50:	46b8      	mov	r8, r7
 800bc52:	6978      	ldr	r0, [r7, #20]
 800bc54:	f7fd f841 	bl	8008cda <ip4_addr_isbroadcast_u32>
 800bc58:	4604      	mov	r4, r0
 800bc5a:	2800      	cmp	r0, #0
 800bc5c:	f040 8098 	bne.w	800bd90 <tcp_input+0x168>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800bc66:	2be0      	cmp	r3, #224	; 0xe0
 800bc68:	f000 8092 	beq.w	800bd90 <tcp_input+0x168>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800bc6c:	68eb      	ldr	r3, [r5, #12]
 800bc6e:	8998      	ldrh	r0, [r3, #12]
 800bc70:	f7fd fc74 	bl	800955c <lwip_htons>
 800bc74:	0a81      	lsrs	r1, r0, #10
 800bc76:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800bc7a:	2913      	cmp	r1, #19
 800bc7c:	f240 8088 	bls.w	800bd90 <tcp_input+0x168>
 800bc80:	8933      	ldrh	r3, [r6, #8]
 800bc82:	b28a      	uxth	r2, r1
 800bc84:	428b      	cmp	r3, r1
 800bc86:	f0c0 8083 	bcc.w	800bd90 <tcp_input+0x168>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800bc8a:	f1a2 0314 	sub.w	r3, r2, #20
  if (p->len >= hdrlen_bytes) {
 800bc8e:	8970      	ldrh	r0, [r6, #10]
  tcphdr_opt2 = NULL;
 800bc90:	606c      	str	r4, [r5, #4]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800bc92:	b29b      	uxth	r3, r3
  if (p->len >= hdrlen_bytes) {
 800bc94:	4290      	cmp	r0, r2
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800bc96:	822b      	strh	r3, [r5, #16]
  if (p->len >= hdrlen_bytes) {
 800bc98:	d33c      	bcc.n	800bd14 <tcp_input+0xec>
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800bc9a:	4630      	mov	r0, r6
    tcphdr_opt1len = tcphdr_optlen;
 800bc9c:	812b      	strh	r3, [r5, #8]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800bc9e:	f7fe f98f 	bl	8009fc0 <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800bca2:	68ec      	ldr	r4, [r5, #12]
 800bca4:	8820      	ldrh	r0, [r4, #0]
 800bca6:	f7fd fc59 	bl	800955c <lwip_htons>
 800bcaa:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800bcac:	68ec      	ldr	r4, [r5, #12]
 800bcae:	8860      	ldrh	r0, [r4, #2]
 800bcb0:	f7fd fc54 	bl	800955c <lwip_htons>
 800bcb4:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800bcb6:	68ec      	ldr	r4, [r5, #12]
 800bcb8:	6860      	ldr	r0, [r4, #4]
 800bcba:	f7fd fc52 	bl	8009562 <lwip_htonl>
 800bcbe:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800bcc0:	68ec      	ldr	r4, [r5, #12]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800bcc2:	6228      	str	r0, [r5, #32]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800bcc4:	68a0      	ldr	r0, [r4, #8]
 800bcc6:	f7fd fc4c 	bl	8009562 <lwip_htonl>
 800bcca:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800bccc:	68ec      	ldr	r4, [r5, #12]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800bcce:	61a8      	str	r0, [r5, #24]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800bcd0:	89e0      	ldrh	r0, [r4, #14]
 800bcd2:	f7fd fc43 	bl	800955c <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 800bcd6:	68eb      	ldr	r3, [r5, #12]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800bcd8:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 800bcda:	8998      	ldrh	r0, [r3, #12]
 800bcdc:	f7fd fc3e 	bl	800955c <lwip_htons>
 800bce0:	f000 033f 	and.w	r3, r0, #63	; 0x3f
  tcplen = p->tot_len;
 800bce4:	8932      	ldrh	r2, [r6, #8]
  flags = TCPH_FLAGS(tcphdr);
 800bce6:	772b      	strb	r3, [r5, #28]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800bce8:	0783      	lsls	r3, r0, #30
 800bcea:	d14c      	bne.n	800bd86 <tcp_input+0x15e>
  tcplen = p->tot_len;
 800bcec:	84aa      	strh	r2, [r5, #36]	; 0x24
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bcee:	4b76      	ldr	r3, [pc, #472]	; (800bec8 <tcp_input+0x2a0>)
  prev = NULL;
 800bcf0:	2700      	movs	r7, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800bcf2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800bef0 <tcp_input+0x2c8>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bcf6:	681c      	ldr	r4, [r3, #0]
 800bcf8:	4699      	mov	r9, r3
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800bcfa:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 800bebc <tcp_input+0x294>
 800bcfe:	4b6d      	ldr	r3, [pc, #436]	; (800beb4 <tcp_input+0x28c>)
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bd00:	2c00      	cmp	r4, #0
 800bd02:	d14b      	bne.n	800bd9c <tcp_input+0x174>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bd04:	4b71      	ldr	r3, [pc, #452]	; (800becc <tcp_input+0x2a4>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800bd06:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 800beb4 <tcp_input+0x28c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bd0a:	681c      	ldr	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800bd0c:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 800bef4 <tcp_input+0x2cc>
 800bd10:	4f6a      	ldr	r7, [pc, #424]	; (800bebc <tcp_input+0x294>)
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bd12:	e145      	b.n	800bfa0 <tcp_input+0x378>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800bd14:	6833      	ldr	r3, [r6, #0]
 800bd16:	b92b      	cbnz	r3, 800bd24 <tcp_input+0xfc>
 800bd18:	4b66      	ldr	r3, [pc, #408]	; (800beb4 <tcp_input+0x28c>)
 800bd1a:	22c2      	movs	r2, #194	; 0xc2
 800bd1c:	496c      	ldr	r1, [pc, #432]	; (800bed0 <tcp_input+0x2a8>)
 800bd1e:	4867      	ldr	r0, [pc, #412]	; (800bebc <tcp_input+0x294>)
 800bd20:	f002 fb34 	bl	800e38c <iprintf>
    pbuf_remove_header(p, TCP_HLEN);
 800bd24:	2114      	movs	r1, #20
 800bd26:	4630      	mov	r0, r6
 800bd28:	f7fe f94a 	bl	8009fc0 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800bd2c:	8974      	ldrh	r4, [r6, #10]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800bd2e:	f8b5 9010 	ldrh.w	r9, [r5, #16]
    pbuf_remove_header(p, tcphdr_opt1len);
 800bd32:	4630      	mov	r0, r6
 800bd34:	4621      	mov	r1, r4
    tcphdr_opt1len = p->len;
 800bd36:	812c      	strh	r4, [r5, #8]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800bd38:	eba9 0704 	sub.w	r7, r9, r4
    pbuf_remove_header(p, tcphdr_opt1len);
 800bd3c:	f7fe f940 	bl	8009fc0 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 800bd40:	6830      	ldr	r0, [r6, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800bd42:	b2bf      	uxth	r7, r7
    if (opt2len > p->next->len) {
 800bd44:	8943      	ldrh	r3, [r0, #10]
 800bd46:	42bb      	cmp	r3, r7
 800bd48:	d322      	bcc.n	800bd90 <tcp_input+0x168>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800bd4a:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 800bd4c:	4639      	mov	r1, r7
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800bd4e:	606b      	str	r3, [r5, #4]
    pbuf_remove_header(p->next, opt2len);
 800bd50:	f7fe f936 	bl	8009fc0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800bd54:	8933      	ldrh	r3, [r6, #8]
 800bd56:	441c      	add	r4, r3
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800bd58:	8973      	ldrh	r3, [r6, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800bd5a:	eba4 0409 	sub.w	r4, r4, r9
 800bd5e:	8134      	strh	r4, [r6, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800bd60:	b12b      	cbz	r3, 800bd6e <tcp_input+0x146>
 800bd62:	4b54      	ldr	r3, [pc, #336]	; (800beb4 <tcp_input+0x28c>)
 800bd64:	22df      	movs	r2, #223	; 0xdf
 800bd66:	495b      	ldr	r1, [pc, #364]	; (800bed4 <tcp_input+0x2ac>)
 800bd68:	4854      	ldr	r0, [pc, #336]	; (800bebc <tcp_input+0x294>)
 800bd6a:	f002 fb0f 	bl	800e38c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800bd6e:	6833      	ldr	r3, [r6, #0]
 800bd70:	8932      	ldrh	r2, [r6, #8]
 800bd72:	891b      	ldrh	r3, [r3, #8]
 800bd74:	429a      	cmp	r2, r3
 800bd76:	d094      	beq.n	800bca2 <tcp_input+0x7a>
 800bd78:	4b4e      	ldr	r3, [pc, #312]	; (800beb4 <tcp_input+0x28c>)
 800bd7a:	22e0      	movs	r2, #224	; 0xe0
 800bd7c:	4956      	ldr	r1, [pc, #344]	; (800bed8 <tcp_input+0x2b0>)
 800bd7e:	484f      	ldr	r0, [pc, #316]	; (800bebc <tcp_input+0x294>)
 800bd80:	f002 fb04 	bl	800e38c <iprintf>
 800bd84:	e78d      	b.n	800bca2 <tcp_input+0x7a>
    tcplen++;
 800bd86:	1c53      	adds	r3, r2, #1
 800bd88:	b29b      	uxth	r3, r3
    if (tcplen < p->tot_len) {
 800bd8a:	429a      	cmp	r2, r3
    tcplen++;
 800bd8c:	84ab      	strh	r3, [r5, #36]	; 0x24
    if (tcplen < p->tot_len) {
 800bd8e:	d9ae      	bls.n	800bcee <tcp_input+0xc6>
  pbuf_free(p);
 800bd90:	4630      	mov	r0, r6
}
 800bd92:	b007      	add	sp, #28
 800bd94:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800bd98:	f7fe b946 	b.w	800a028 <pbuf_free>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800bd9c:	7d22      	ldrb	r2, [r4, #20]
 800bd9e:	b92a      	cbnz	r2, 800bdac <tcp_input+0x184>
 800bda0:	22fb      	movs	r2, #251	; 0xfb
 800bda2:	4659      	mov	r1, fp
 800bda4:	4650      	mov	r0, sl
 800bda6:	f002 faf1 	bl	800e38c <iprintf>
 800bdaa:	4b42      	ldr	r3, [pc, #264]	; (800beb4 <tcp_input+0x28c>)
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800bdac:	7d22      	ldrb	r2, [r4, #20]
 800bdae:	2a0a      	cmp	r2, #10
 800bdb0:	d105      	bne.n	800bdbe <tcp_input+0x196>
 800bdb2:	22fc      	movs	r2, #252	; 0xfc
 800bdb4:	4949      	ldr	r1, [pc, #292]	; (800bedc <tcp_input+0x2b4>)
 800bdb6:	4650      	mov	r0, sl
 800bdb8:	f002 fae8 	bl	800e38c <iprintf>
 800bdbc:	4b3d      	ldr	r3, [pc, #244]	; (800beb4 <tcp_input+0x28c>)
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800bdbe:	7d22      	ldrb	r2, [r4, #20]
 800bdc0:	2a01      	cmp	r2, #1
 800bdc2:	d105      	bne.n	800bdd0 <tcp_input+0x1a8>
 800bdc4:	22fd      	movs	r2, #253	; 0xfd
 800bdc6:	4946      	ldr	r1, [pc, #280]	; (800bee0 <tcp_input+0x2b8>)
 800bdc8:	4650      	mov	r0, sl
 800bdca:	f002 fadf 	bl	800e38c <iprintf>
 800bdce:	4b39      	ldr	r3, [pc, #228]	; (800beb4 <tcp_input+0x28c>)
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bdd0:	7a20      	ldrb	r0, [r4, #8]
 800bdd2:	68e1      	ldr	r1, [r4, #12]
 800bdd4:	b138      	cbz	r0, 800bde6 <tcp_input+0x1be>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bdd6:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800bdda:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800bdde:	3201      	adds	r2, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bde0:	b2d2      	uxtb	r2, r2
 800bde2:	4290      	cmp	r0, r2
 800bde4:	d162      	bne.n	800beac <tcp_input+0x284>
    if (pcb->remote_port == tcphdr->src &&
 800bde6:	68ea      	ldr	r2, [r5, #12]
 800bde8:	f8b4 c018 	ldrh.w	ip, [r4, #24]
 800bdec:	8810      	ldrh	r0, [r2, #0]
 800bdee:	4584      	cmp	ip, r0
 800bdf0:	d15c      	bne.n	800beac <tcp_input+0x284>
 800bdf2:	8ae0      	ldrh	r0, [r4, #22]
 800bdf4:	8852      	ldrh	r2, [r2, #2]
 800bdf6:	4290      	cmp	r0, r2
 800bdf8:	d158      	bne.n	800beac <tcp_input+0x284>
        pcb->local_port == tcphdr->dest &&
 800bdfa:	6860      	ldr	r0, [r4, #4]
 800bdfc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800be00:	4290      	cmp	r0, r2
 800be02:	d153      	bne.n	800beac <tcp_input+0x284>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800be04:	6820      	ldr	r0, [r4, #0]
 800be06:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800be0a:	4290      	cmp	r0, r2
 800be0c:	d14e      	bne.n	800beac <tcp_input+0x284>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800be0e:	42a1      	cmp	r1, r4
 800be10:	f040 83ef 	bne.w	800c5f2 <tcp_input+0x9ca>
 800be14:	4b27      	ldr	r3, [pc, #156]	; (800beb4 <tcp_input+0x28c>)
 800be16:	f240 120d 	movw	r2, #269	; 0x10d
 800be1a:	4932      	ldr	r1, [pc, #200]	; (800bee4 <tcp_input+0x2bc>)
 800be1c:	4827      	ldr	r0, [pc, #156]	; (800bebc <tcp_input+0x294>)
 800be1e:	f002 fab5 	bl	800e38c <iprintf>
      if (prev != NULL) {
 800be22:	b137      	cbz	r7, 800be32 <tcp_input+0x20a>
        prev->next = pcb->next;
 800be24:	68e3      	ldr	r3, [r4, #12]
 800be26:	60fb      	str	r3, [r7, #12]
        pcb->next = tcp_active_pcbs;
 800be28:	f8d9 3000 	ldr.w	r3, [r9]
        tcp_active_pcbs = pcb;
 800be2c:	f8c9 4000 	str.w	r4, [r9]
        pcb->next = tcp_active_pcbs;
 800be30:	60e3      	str	r3, [r4, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800be32:	68e3      	ldr	r3, [r4, #12]
 800be34:	42a3      	cmp	r3, r4
 800be36:	d106      	bne.n	800be46 <tcp_input+0x21e>
 800be38:	4b1e      	ldr	r3, [pc, #120]	; (800beb4 <tcp_input+0x28c>)
 800be3a:	f240 1215 	movw	r2, #277	; 0x115
 800be3e:	492a      	ldr	r1, [pc, #168]	; (800bee8 <tcp_input+0x2c0>)
 800be40:	481e      	ldr	r0, [pc, #120]	; (800bebc <tcp_input+0x294>)
 800be42:	f002 faa3 	bl	800e38c <iprintf>
    inseg.len = p->tot_len;
 800be46:	8932      	ldrh	r2, [r6, #8]
    inseg.next = NULL;
 800be48:	2300      	movs	r3, #0
    inseg.p = p;
 800be4a:	62ee      	str	r6, [r5, #44]	; 0x2c
    inseg.len = p->tot_len;
 800be4c:	862a      	strh	r2, [r5, #48]	; 0x30
    inseg.tcphdr = tcphdr;
 800be4e:	68ea      	ldr	r2, [r5, #12]
    inseg.next = NULL;
 800be50:	62ab      	str	r3, [r5, #40]	; 0x28
    recv_flags = 0;
 800be52:	74ab      	strb	r3, [r5, #18]
    recv_acked = 0;
 800be54:	82ab      	strh	r3, [r5, #20]
    recv_data = NULL;
 800be56:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
    if (flags & TCP_PSH) {
 800be5a:	7f2b      	ldrb	r3, [r5, #28]
 800be5c:	071b      	lsls	r3, r3, #28
 800be5e:	d503      	bpl.n	800be68 <tcp_input+0x240>
      p->flags |= PBUF_FLAG_PUSH;
 800be60:	7b73      	ldrb	r3, [r6, #13]
 800be62:	f043 0301 	orr.w	r3, r3, #1
 800be66:	7373      	strb	r3, [r6, #13]
    if (pcb->refused_data != NULL) {
 800be68:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800be6a:	4e20      	ldr	r6, [pc, #128]	; (800beec <tcp_input+0x2c4>)
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	f000 8131 	beq.w	800c0d4 <tcp_input+0x4ac>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800be72:	4620      	mov	r0, r4
 800be74:	f7ff f920 	bl	800b0b8 <tcp_process_refused_data>
 800be78:	300d      	adds	r0, #13
 800be7a:	d007      	beq.n	800be8c <tcp_input+0x264>
 800be7c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800be7e:	2b00      	cmp	r3, #0
 800be80:	f000 8128 	beq.w	800c0d4 <tcp_input+0x4ac>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800be84:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 800be86:	2b00      	cmp	r3, #0
 800be88:	f000 8124 	beq.w	800c0d4 <tcp_input+0x4ac>
        if (pcb->rcv_ann_wnd == 0) {
 800be8c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800be8e:	b913      	cbnz	r3, 800be96 <tcp_input+0x26e>
          tcp_send_empty_ack(pcb);
 800be90:	4620      	mov	r0, r4
 800be92:	f001 fa73 	bl	800d37c <tcp_send_empty_ack>
    tcp_input_pcb = NULL;
 800be96:	2400      	movs	r4, #0
    if (inseg.p != NULL) {
 800be98:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    tcp_input_pcb = NULL;
 800be9a:	6034      	str	r4, [r6, #0]
    recv_data = NULL;
 800be9c:	63ac      	str	r4, [r5, #56]	; 0x38
    if (inseg.p != NULL) {
 800be9e:	b110      	cbz	r0, 800bea6 <tcp_input+0x27e>
      pbuf_free(inseg.p);
 800bea0:	f7fe f8c2 	bl	800a028 <pbuf_free>
      inseg.p = NULL;
 800bea4:	62ec      	str	r4, [r5, #44]	; 0x2c
}
 800bea6:	b007      	add	sp, #28
 800bea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800beac:	4627      	mov	r7, r4
 800beae:	460c      	mov	r4, r1
 800beb0:	e726      	b.n	800bd00 <tcp_input+0xd8>
 800beb2:	bf00      	nop
 800beb4:	08015891 	.word	0x08015891
 800beb8:	08015a38 	.word	0x08015a38
 800bebc:	0801342c 	.word	0x0801342c
 800bec0:	2000694c 	.word	0x2000694c
 800bec4:	2000a820 	.word	0x2000a820
 800bec8:	20010d54 	.word	0x20010d54
 800becc:	20010d64 	.word	0x20010d64
 800bed0:	08015a50 	.word	0x08015a50
 800bed4:	08015a60 	.word	0x08015a60
 800bed8:	08015a6c 	.word	0x08015a6c
 800bedc:	08015ab2 	.word	0x08015ab2
 800bee0:	08015adc 	.word	0x08015adc
 800bee4:	08015b03 	.word	0x08015b03
 800bee8:	08015b2e 	.word	0x08015b2e
 800beec:	20010d68 	.word	0x20010d68
 800bef0:	08015a8b 	.word	0x08015a8b
 800bef4:	08015b58 	.word	0x08015b58
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800bef8:	7d23      	ldrb	r3, [r4, #20]
 800befa:	2b0a      	cmp	r3, #10
 800befc:	d006      	beq.n	800bf0c <tcp_input+0x2e4>
 800befe:	465b      	mov	r3, fp
 800bf00:	f240 121f 	movw	r2, #287	; 0x11f
 800bf04:	4651      	mov	r1, sl
 800bf06:	4638      	mov	r0, r7
 800bf08:	f002 fa40 	bl	800e38c <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bf0c:	7a22      	ldrb	r2, [r4, #8]
 800bf0e:	b13a      	cbz	r2, 800bf20 <tcp_input+0x2f8>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bf10:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bf14:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bf18:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bf1a:	b2db      	uxtb	r3, r3
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	d13e      	bne.n	800bf9e <tcp_input+0x376>
      if (pcb->remote_port == tcphdr->src &&
 800bf20:	68eb      	ldr	r3, [r5, #12]
 800bf22:	8b20      	ldrh	r0, [r4, #24]
 800bf24:	881a      	ldrh	r2, [r3, #0]
 800bf26:	4290      	cmp	r0, r2
 800bf28:	d139      	bne.n	800bf9e <tcp_input+0x376>
          pcb->local_port == tcphdr->dest &&
 800bf2a:	885b      	ldrh	r3, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 800bf2c:	8ae1      	ldrh	r1, [r4, #22]
 800bf2e:	4299      	cmp	r1, r3
 800bf30:	d135      	bne.n	800bf9e <tcp_input+0x376>
          pcb->local_port == tcphdr->dest &&
 800bf32:	6862      	ldr	r2, [r4, #4]
 800bf34:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800bf38:	429a      	cmp	r2, r3
 800bf3a:	d130      	bne.n	800bf9e <tcp_input+0x376>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bf3c:	6822      	ldr	r2, [r4, #0]
 800bf3e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800bf42:	429a      	cmp	r2, r3
 800bf44:	d12b      	bne.n	800bf9e <tcp_input+0x376>
  if (flags & TCP_RST) {
 800bf46:	7f2b      	ldrb	r3, [r5, #28]
 800bf48:	075f      	lsls	r7, r3, #29
 800bf4a:	f53f af21 	bmi.w	800bd90 <tcp_input+0x168>
  if (flags & TCP_SYN) {
 800bf4e:	079a      	lsls	r2, r3, #30
 800bf50:	8caf      	ldrh	r7, [r5, #36]	; 0x24
 800bf52:	d514      	bpl.n	800bf7e <tcp_input+0x356>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800bf54:	6a2a      	ldr	r2, [r5, #32]
 800bf56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf58:	1ad3      	subs	r3, r2, r3
 800bf5a:	d415      	bmi.n	800bf88 <tcp_input+0x360>
 800bf5c:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
 800bf60:	eba3 030c 	sub.w	r3, r3, ip
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	dc0f      	bgt.n	800bf88 <tcp_input+0x360>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bf68:	4b8a      	ldr	r3, [pc, #552]	; (800c194 <tcp_input+0x56c>)
 800bf6a:	443a      	add	r2, r7
 800bf6c:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800bf70:	9300      	str	r3, [sp, #0]
 800bf72:	4620      	mov	r0, r4
 800bf74:	3304      	adds	r3, #4
 800bf76:	69a9      	ldr	r1, [r5, #24]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bf78:	f001 f9ba 	bl	800d2f0 <tcp_rst>
 800bf7c:	e708      	b.n	800bd90 <tcp_input+0x168>
  } else if (flags & TCP_FIN) {
 800bf7e:	07dd      	lsls	r5, r3, #31
    pcb->tmr = tcp_ticks;
 800bf80:	bf42      	ittt	mi
 800bf82:	4b85      	ldrmi	r3, [pc, #532]	; (800c198 <tcp_input+0x570>)
 800bf84:	681b      	ldrmi	r3, [r3, #0]
 800bf86:	6223      	strmi	r3, [r4, #32]
  if ((tcplen > 0)) {
 800bf88:	2f00      	cmp	r7, #0
 800bf8a:	f43f af01 	beq.w	800bd90 <tcp_input+0x168>
    tcp_ack_now(pcb);
 800bf8e:	8b63      	ldrh	r3, [r4, #26]
 800bf90:	f043 0302 	orr.w	r3, r3, #2
 800bf94:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800bf96:	4620      	mov	r0, r4
 800bf98:	f001 fa22 	bl	800d3e0 <tcp_output>
        pbuf_free(p);
 800bf9c:	e6f8      	b.n	800bd90 <tcp_input+0x168>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bf9e:	68e4      	ldr	r4, [r4, #12]
 800bfa0:	2c00      	cmp	r4, #0
 800bfa2:	d1a9      	bne.n	800bef8 <tcp_input+0x2d0>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bfa4:	4a7d      	ldr	r2, [pc, #500]	; (800c19c <tcp_input+0x574>)
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bfa6:	f8d8 e004 	ldr.w	lr, [r8, #4]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bfaa:	6810      	ldr	r0, [r2, #0]
      if (lpcb->local_port == tcphdr->dest) {
 800bfac:	68e9      	ldr	r1, [r5, #12]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800bfae:	f8d8 a014 	ldr.w	sl, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bfb2:	4607      	mov	r7, r0
 800bfb4:	b98f      	cbnz	r7, 800bfda <tcp_input+0x3b2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800bfb6:	8988      	ldrh	r0, [r1, #12]
 800bfb8:	f7fd fad0 	bl	800955c <lwip_htons>
 800bfbc:	0742      	lsls	r2, r0, #29
 800bfbe:	f53f aee7 	bmi.w	800bd90 <tcp_input+0x168>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bfc2:	68eb      	ldr	r3, [r5, #12]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bfc4:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
 800bfc6:	8818      	ldrh	r0, [r3, #0]
 800bfc8:	6a2a      	ldr	r2, [r5, #32]
 800bfca:	9002      	str	r0, [sp, #8]
 800bfcc:	885b      	ldrh	r3, [r3, #2]
 800bfce:	440a      	add	r2, r1
 800bfd0:	9301      	str	r3, [sp, #4]
 800bfd2:	4b70      	ldr	r3, [pc, #448]	; (800c194 <tcp_input+0x56c>)
 800bfd4:	9300      	str	r3, [sp, #0]
 800bfd6:	3304      	adds	r3, #4
 800bfd8:	e308      	b.n	800c5ec <tcp_input+0x9c4>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800bfda:	f897 c008 	ldrb.w	ip, [r7, #8]
 800bfde:	f1bc 0f00 	cmp.w	ip, #0
 800bfe2:	d005      	beq.n	800bff0 <tcp_input+0x3c8>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bfe4:	f89e 3034 	ldrb.w	r3, [lr, #52]	; 0x34
 800bfe8:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800bfea:	b2db      	uxtb	r3, r3
 800bfec:	459c      	cmp	ip, r3
 800bfee:	d10b      	bne.n	800c008 <tcp_input+0x3e0>
      if (lpcb->local_port == tcphdr->dest) {
 800bff0:	f8b1 c002 	ldrh.w	ip, [r1, #2]
 800bff4:	8afb      	ldrh	r3, [r7, #22]
 800bff6:	4563      	cmp	r3, ip
 800bff8:	d106      	bne.n	800c008 <tcp_input+0x3e0>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	4553      	cmp	r3, sl
 800bffe:	f000 82df 	beq.w	800c5c0 <tcp_input+0x998>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800c002:	2b00      	cmp	r3, #0
 800c004:	f000 82dc 	beq.w	800c5c0 <tcp_input+0x998>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c008:	463c      	mov	r4, r7
 800c00a:	68ff      	ldr	r7, [r7, #12]
 800c00c:	e7d2      	b.n	800bfb4 <tcp_input+0x38c>
  } else if (flags & TCP_SYN) {
 800c00e:	079a      	lsls	r2, r3, #30
 800c010:	f57f aebe 	bpl.w	800bd90 <tcp_input+0x168>
    npcb = tcp_alloc(pcb->prio);
 800c014:	7d78      	ldrb	r0, [r7, #21]
 800c016:	f7ff f9f3 	bl	800b400 <tcp_alloc>
    if (npcb == NULL) {
 800c01a:	4604      	mov	r4, r0
 800c01c:	b948      	cbnz	r0, 800c032 <tcp_input+0x40a>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c01e:	69bb      	ldr	r3, [r7, #24]
 800c020:	2b00      	cmp	r3, #0
 800c022:	f43f aeb5 	beq.w	800bd90 <tcp_input+0x168>
 800c026:	4601      	mov	r1, r0
 800c028:	f04f 32ff 	mov.w	r2, #4294967295
 800c02c:	6938      	ldr	r0, [r7, #16]
 800c02e:	4798      	blx	r3
 800c030:	e6ae      	b.n	800bd90 <tcp_input+0x168>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800c032:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 800c036:	68ea      	ldr	r2, [r5, #12]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800c038:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800c03a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c03e:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 800c040:	8afb      	ldrh	r3, [r7, #22]
 800c042:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 800c044:	7813      	ldrb	r3, [r2, #0]
 800c046:	7852      	ldrb	r2, [r2, #1]
 800c048:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c04c:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 800c04e:	2303      	movs	r3, #3
 800c050:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 800c052:	6a2b      	ldr	r3, [r5, #32]
 800c054:	3301      	adds	r3, #1
 800c056:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800c058:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800c05a:	f7ff fa6f 	bl	800b53c <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800c05e:	6a2b      	ldr	r3, [r5, #32]
    npcb->snd_wl2 = iss;
 800c060:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800c062:	3b01      	subs	r3, #1
    npcb->snd_nxt = iss;
 800c064:	6520      	str	r0, [r4, #80]	; 0x50
    npcb->lastack = iss;
 800c066:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800c068:	6563      	str	r3, [r4, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800c06a:	693b      	ldr	r3, [r7, #16]
    npcb->snd_lbb = iss;
 800c06c:	65e0      	str	r0, [r4, #92]	; 0x5c
    npcb->callback_arg = pcb->callback_arg;
 800c06e:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 800c070:	67a7      	str	r7, [r4, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800c072:	7a7b      	ldrb	r3, [r7, #9]
 800c074:	f003 030c 	and.w	r3, r3, #12
 800c078:	7263      	strb	r3, [r4, #9]
    npcb->netif_idx = pcb->netif_idx;
 800c07a:	7a3b      	ldrb	r3, [r7, #8]
 800c07c:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 800c07e:	f8d9 3000 	ldr.w	r3, [r9]
 800c082:	f8c9 4000 	str.w	r4, [r9]
 800c086:	60e3      	str	r3, [r4, #12]
 800c088:	f001 fc80 	bl	800d98c <tcp_timer_needed>
 800c08c:	4b44      	ldr	r3, [pc, #272]	; (800c1a0 <tcp_input+0x578>)
 800c08e:	2201      	movs	r2, #1
    tcp_parseopt(npcb);
 800c090:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(npcb);
 800c092:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800c094:	f7ff fac2 	bl	800b61c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800c098:	68eb      	ldr	r3, [r5, #12]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c09a:	1d22      	adds	r2, r4, #4
 800c09c:	8e65      	ldrh	r5, [r4, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 800c09e:	89db      	ldrh	r3, [r3, #14]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c0a0:	4610      	mov	r0, r2
 800c0a2:	9205      	str	r2, [sp, #20]
    npcb->snd_wnd = tcphdr->wnd;
 800c0a4:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800c0a8:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c0ac:	f7fc fc98 	bl	80089e0 <ip4_route>
 800c0b0:	9a05      	ldr	r2, [sp, #20]
 800c0b2:	4601      	mov	r1, r0
 800c0b4:	4628      	mov	r0, r5
 800c0b6:	f7ff fa5b 	bl	800b570 <tcp_eff_send_mss_netif>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800c0ba:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c0bc:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800c0be:	4620      	mov	r0, r4
 800c0c0:	f000 ff9a 	bl	800cff8 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800c0c4:	2800      	cmp	r0, #0
 800c0c6:	f43f af66 	beq.w	800bf96 <tcp_input+0x36e>
      tcp_abandon(npcb, 0);
 800c0ca:	4651      	mov	r1, sl
 800c0cc:	4620      	mov	r0, r4
 800c0ce:	f7ff f8c3 	bl	800b258 <tcp_abandon>
      return;
 800c0d2:	e65d      	b.n	800bd90 <tcp_input+0x168>
  if (flags & TCP_RST) {
 800c0d4:	7f2a      	ldrb	r2, [r5, #28]
    tcp_input_pcb = pcb;
 800c0d6:	6034      	str	r4, [r6, #0]
  if (flags & TCP_RST) {
 800c0d8:	0753      	lsls	r3, r2, #29
 800c0da:	d537      	bpl.n	800c14c <tcp_input+0x524>
    if (pcb->state == SYN_SENT) {
 800c0dc:	7d21      	ldrb	r1, [r4, #20]
 800c0de:	2902      	cmp	r1, #2
 800c0e0:	d11e      	bne.n	800c120 <tcp_input+0x4f8>
      if (ackno == pcb->snd_nxt) {
 800c0e2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800c0e4:	69ab      	ldr	r3, [r5, #24]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d107      	bne.n	800c0fa <tcp_input+0x4d2>
      recv_flags |= TF_RESET;
 800c0ea:	7cab      	ldrb	r3, [r5, #18]
 800c0ec:	f043 0308 	orr.w	r3, r3, #8
 800c0f0:	74ab      	strb	r3, [r5, #18]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800c0f2:	8b63      	ldrh	r3, [r4, #26]
 800c0f4:	f023 0301 	bic.w	r3, r3, #1
        tcp_ack_now(pcb);
 800c0f8:	8363      	strh	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 800c0fa:	7cab      	ldrb	r3, [r5, #18]
 800c0fc:	0718      	lsls	r0, r3, #28
 800c0fe:	f140 81fe 	bpl.w	800c4fe <tcp_input+0x8d6>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800c102:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800c106:	b11b      	cbz	r3, 800c110 <tcp_input+0x4e8>
 800c108:	f06f 010d 	mvn.w	r1, #13
 800c10c:	6920      	ldr	r0, [r4, #16]
 800c10e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c110:	4621      	mov	r1, r4
 800c112:	4824      	ldr	r0, [pc, #144]	; (800c1a4 <tcp_input+0x57c>)
 800c114:	f7fe fe80 	bl	800ae18 <tcp_pcb_remove>
        tcp_free(pcb);
 800c118:	4620      	mov	r0, r4
 800c11a:	f7fe fa73 	bl	800a604 <tcp_free>
 800c11e:	e6ba      	b.n	800be96 <tcp_input+0x26e>
      if (seqno == pcb->rcv_nxt) {
 800c120:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c122:	6a2b      	ldr	r3, [r5, #32]
 800c124:	429a      	cmp	r2, r3
 800c126:	d007      	beq.n	800c138 <tcp_input+0x510>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c128:	1a9b      	subs	r3, r3, r2
 800c12a:	d4e6      	bmi.n	800c0fa <tcp_input+0x4d2>
 800c12c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800c12e:	1a9b      	subs	r3, r3, r2
 800c130:	2b00      	cmp	r3, #0
 800c132:	dce2      	bgt.n	800c0fa <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 800c134:	8b63      	ldrh	r3, [r4, #26]
 800c136:	e010      	b.n	800c15a <tcp_input+0x532>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800c138:	2900      	cmp	r1, #0
 800c13a:	d1d6      	bne.n	800c0ea <tcp_input+0x4c2>
 800c13c:	4b1a      	ldr	r3, [pc, #104]	; (800c1a8 <tcp_input+0x580>)
 800c13e:	f44f 724e 	mov.w	r2, #824	; 0x338
 800c142:	491a      	ldr	r1, [pc, #104]	; (800c1ac <tcp_input+0x584>)
 800c144:	481a      	ldr	r0, [pc, #104]	; (800c1b0 <tcp_input+0x588>)
 800c146:	f002 f921 	bl	800e38c <iprintf>
 800c14a:	e7ce      	b.n	800c0ea <tcp_input+0x4c2>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800c14c:	0797      	lsls	r7, r2, #30
 800c14e:	8b63      	ldrh	r3, [r4, #26]
 800c150:	d506      	bpl.n	800c160 <tcp_input+0x538>
 800c152:	7d22      	ldrb	r2, [r4, #20]
 800c154:	3a02      	subs	r2, #2
 800c156:	2a01      	cmp	r2, #1
 800c158:	d902      	bls.n	800c160 <tcp_input+0x538>
        tcp_ack_now(pcb);
 800c15a:	f043 0302 	orr.w	r3, r3, #2
 800c15e:	e7cb      	b.n	800c0f8 <tcp_input+0x4d0>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800c160:	06d8      	lsls	r0, r3, #27
  tcp_parseopt(pcb);
 800c162:	4620      	mov	r0, r4
    pcb->tmr = tcp_ticks;
 800c164:	bf5e      	ittt	pl
 800c166:	4b0c      	ldrpl	r3, [pc, #48]	; (800c198 <tcp_input+0x570>)
 800c168:	681b      	ldrpl	r3, [r3, #0]
 800c16a:	6223      	strpl	r3, [r4, #32]
  pcb->persist_probe = 0;
 800c16c:	2300      	movs	r3, #0
 800c16e:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
  tcp_parseopt(pcb);
 800c172:	f7ff fa53 	bl	800b61c <tcp_parseopt>
  switch (pcb->state) {
 800c176:	7d23      	ldrb	r3, [r4, #20]
 800c178:	3b02      	subs	r3, #2
 800c17a:	2b07      	cmp	r3, #7
 800c17c:	d8bd      	bhi.n	800c0fa <tcp_input+0x4d2>
 800c17e:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c182:	0019      	.short	0x0019
 800c184:	011200a6 	.word	0x011200a6
 800c188:	015f0117 	.word	0x015f0117
 800c18c:	01780112 	.word	0x01780112
 800c190:	01a9      	.short	0x01a9
 800c192:	bf00      	nop
 800c194:	2000a830 	.word	0x2000a830
 800c198:	20010d58 	.word	0x20010d58
 800c19c:	20010d5c 	.word	0x20010d5c
 800c1a0:	20010d50 	.word	0x20010d50
 800c1a4:	20010d54 	.word	0x20010d54
 800c1a8:	08015891 	.word	0x08015891
 800c1ac:	08015b85 	.word	0x08015b85
 800c1b0:	0801342c 	.word	0x0801342c
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800c1b4:	7f2b      	ldrb	r3, [r5, #28]
 800c1b6:	f003 0212 	and.w	r2, r3, #18
 800c1ba:	2a12      	cmp	r2, #18
 800c1bc:	d16a      	bne.n	800c294 <tcp_input+0x66c>
          && (ackno == pcb->lastack + 1)) {
 800c1be:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800c1c0:	69a9      	ldr	r1, [r5, #24]
 800c1c2:	3201      	adds	r2, #1
 800c1c4:	428a      	cmp	r2, r1
 800c1c6:	d165      	bne.n	800c294 <tcp_input+0x66c>
        pcb->rcv_nxt = seqno + 1;
 800c1c8:	6a2b      	ldr	r3, [r5, #32]
        pcb->lastack = ackno;
 800c1ca:	6462      	str	r2, [r4, #68]	; 0x44
        pcb->rcv_nxt = seqno + 1;
 800c1cc:	1c59      	adds	r1, r3, #1
        pcb->snd_wnd = tcphdr->wnd;
 800c1ce:	68ea      	ldr	r2, [r5, #12]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c1d0:	3b01      	subs	r3, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c1d2:	8e67      	ldrh	r7, [r4, #50]	; 0x32
        pcb->rcv_nxt = seqno + 1;
 800c1d4:	6261      	str	r1, [r4, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800c1d6:	62e1      	str	r1, [r4, #44]	; 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 800c1d8:	89d2      	ldrh	r2, [r2, #14]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c1da:	6563      	str	r3, [r4, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800c1dc:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 800c1de:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c1e2:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c1e6:	18e2      	adds	r2, r4, r3
        pcb->state = ESTABLISHED;
 800c1e8:	7523      	strb	r3, [r4, #20]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c1ea:	4610      	mov	r0, r2
 800c1ec:	9205      	str	r2, [sp, #20]
 800c1ee:	f7fc fbf7 	bl	80089e0 <ip4_route>
 800c1f2:	9a05      	ldr	r2, [sp, #20]
 800c1f4:	4601      	mov	r1, r0
 800c1f6:	4638      	mov	r0, r7
 800c1f8:	f7ff f9ba 	bl	800b570 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c1fc:	f241 131c 	movw	r3, #4380	; 0x111c
 800c200:	0042      	lsls	r2, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c202:	8660      	strh	r0, [r4, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c204:	0081      	lsls	r1, r0, #2
 800c206:	429a      	cmp	r2, r3
 800c208:	4617      	mov	r7, r2
 800c20a:	bf38      	it	cc
 800c20c:	461f      	movcc	r7, r3
 800c20e:	ebb7 0f80 	cmp.w	r7, r0, lsl #2
 800c212:	d933      	bls.n	800c27c <tcp_input+0x654>
 800c214:	b28b      	uxth	r3, r1
 800c216:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800c21a:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800c21e:	b933      	cbnz	r3, 800c22e <tcp_input+0x606>
 800c220:	4ba3      	ldr	r3, [pc, #652]	; (800c4b0 <tcp_input+0x888>)
 800c222:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800c226:	49a3      	ldr	r1, [pc, #652]	; (800c4b4 <tcp_input+0x88c>)
 800c228:	48a3      	ldr	r0, [pc, #652]	; (800c4b8 <tcp_input+0x890>)
 800c22a:	f002 f8af 	bl	800e38c <iprintf>
        --pcb->snd_queuelen;
 800c22e:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
        rseg = pcb->unacked;
 800c232:	6f27      	ldr	r7, [r4, #112]	; 0x70
        --pcb->snd_queuelen;
 800c234:	3b01      	subs	r3, #1
 800c236:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
        if (rseg == NULL) {
 800c23a:	bb1f      	cbnz	r7, 800c284 <tcp_input+0x65c>
          rseg = pcb->unsent;
 800c23c:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800c23e:	b937      	cbnz	r7, 800c24e <tcp_input+0x626>
 800c240:	4b9b      	ldr	r3, [pc, #620]	; (800c4b0 <tcp_input+0x888>)
 800c242:	f44f 725d 	mov.w	r2, #884	; 0x374
 800c246:	499d      	ldr	r1, [pc, #628]	; (800c4bc <tcp_input+0x894>)
 800c248:	489b      	ldr	r0, [pc, #620]	; (800c4b8 <tcp_input+0x890>)
 800c24a:	f002 f89f 	bl	800e38c <iprintf>
          pcb->unsent = rseg->next;
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	66e3      	str	r3, [r4, #108]	; 0x6c
        tcp_seg_free(rseg);
 800c252:	4638      	mov	r0, r7
 800c254:	f7fe fb1e 	bl	800a894 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800c258:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c25a:	b9b3      	cbnz	r3, 800c28a <tcp_input+0x662>
          pcb->rtime = -1;
 800c25c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c260:	8623      	strh	r3, [r4, #48]	; 0x30
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800c262:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800c266:	2b00      	cmp	r3, #0
 800c268:	f43f af64 	beq.w	800c134 <tcp_input+0x50c>
 800c26c:	2200      	movs	r2, #0
 800c26e:	4621      	mov	r1, r4
 800c270:	6920      	ldr	r0, [r4, #16]
 800c272:	4798      	blx	r3
        if (err == ERR_ABRT) {
 800c274:	300d      	adds	r0, #13
 800c276:	f47f af5d 	bne.w	800c134 <tcp_input+0x50c>
 800c27a:	e60c      	b.n	800be96 <tcp_input+0x26e>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c27c:	429a      	cmp	r2, r3
 800c27e:	bf88      	it	hi
 800c280:	b293      	uxthhi	r3, r2
 800c282:	e7c8      	b.n	800c216 <tcp_input+0x5ee>
          pcb->unacked = rseg->next;
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	6723      	str	r3, [r4, #112]	; 0x70
 800c288:	e7e3      	b.n	800c252 <tcp_input+0x62a>
          pcb->rtime = 0;
 800c28a:	2300      	movs	r3, #0
 800c28c:	8623      	strh	r3, [r4, #48]	; 0x30
          pcb->nrtx = 0;
 800c28e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c292:	e7e6      	b.n	800c262 <tcp_input+0x63a>
      else if (flags & TCP_ACK) {
 800c294:	06d9      	lsls	r1, r3, #27
 800c296:	f57f af30 	bpl.w	800c0fa <tcp_input+0x4d2>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c29a:	68eb      	ldr	r3, [r5, #12]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c29c:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
 800c29e:	8818      	ldrh	r0, [r3, #0]
 800c2a0:	6a2a      	ldr	r2, [r5, #32]
 800c2a2:	9002      	str	r0, [sp, #8]
 800c2a4:	4620      	mov	r0, r4
 800c2a6:	885b      	ldrh	r3, [r3, #2]
 800c2a8:	440a      	add	r2, r1
 800c2aa:	9301      	str	r3, [sp, #4]
 800c2ac:	4b84      	ldr	r3, [pc, #528]	; (800c4c0 <tcp_input+0x898>)
 800c2ae:	9300      	str	r3, [sp, #0]
 800c2b0:	3304      	adds	r3, #4
 800c2b2:	69a9      	ldr	r1, [r5, #24]
 800c2b4:	f001 f81c 	bl	800d2f0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800c2b8:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800c2bc:	2b05      	cmp	r3, #5
 800c2be:	f63f af1c 	bhi.w	800c0fa <tcp_input+0x4d2>
          pcb->rtime = 0;
 800c2c2:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 800c2c4:	4620      	mov	r0, r4
          pcb->rtime = 0;
 800c2c6:	8623      	strh	r3, [r4, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800c2c8:	f001 fa50 	bl	800d76c <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 800c2cc:	e715      	b.n	800c0fa <tcp_input+0x4d2>
      if (flags & TCP_ACK) {
 800c2ce:	7f2b      	ldrb	r3, [r5, #28]
 800c2d0:	06da      	lsls	r2, r3, #27
 800c2d2:	d55b      	bpl.n	800c38c <tcp_input+0x764>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c2d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800c2d6:	69a9      	ldr	r1, [r5, #24]
 800c2d8:	43db      	mvns	r3, r3
 800c2da:	42cb      	cmn	r3, r1
 800c2dc:	d447      	bmi.n	800c36e <tcp_input+0x746>
 800c2de:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c2e0:	1acb      	subs	r3, r1, r3
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	dc43      	bgt.n	800c36e <tcp_input+0x746>
          pcb->state = ESTABLISHED;
 800c2e6:	2304      	movs	r3, #4
 800c2e8:	7523      	strb	r3, [r4, #20]
          if (pcb->listener == NULL) {
 800c2ea:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c2ec:	b91b      	cbnz	r3, 800c2f6 <tcp_input+0x6ce>
            tcp_abort(pcb);
 800c2ee:	4620      	mov	r0, r4
 800c2f0:	f7ff f830 	bl	800b354 <tcp_abort>
            goto aborted;
 800c2f4:	e5cf      	b.n	800be96 <tcp_input+0x26e>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800c2f6:	699b      	ldr	r3, [r3, #24]
 800c2f8:	b933      	cbnz	r3, 800c308 <tcp_input+0x6e0>
 800c2fa:	4b6d      	ldr	r3, [pc, #436]	; (800c4b0 <tcp_input+0x888>)
 800c2fc:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800c300:	4970      	ldr	r1, [pc, #448]	; (800c4c4 <tcp_input+0x89c>)
 800c302:	486d      	ldr	r0, [pc, #436]	; (800c4b8 <tcp_input+0x890>)
 800c304:	f002 f842 	bl	800e38c <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c308:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c30a:	699b      	ldr	r3, [r3, #24]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d0ee      	beq.n	800c2ee <tcp_input+0x6c6>
 800c310:	2200      	movs	r2, #0
 800c312:	4621      	mov	r1, r4
 800c314:	6920      	ldr	r0, [r4, #16]
 800c316:	4798      	blx	r3
          if (err != ERR_OK) {
 800c318:	b118      	cbz	r0, 800c322 <tcp_input+0x6fa>
            if (err != ERR_ABRT) {
 800c31a:	300d      	adds	r0, #13
 800c31c:	f43f adbb 	beq.w	800be96 <tcp_input+0x26e>
 800c320:	e7e5      	b.n	800c2ee <tcp_input+0x6c6>
          tcp_receive(pcb);
 800c322:	4620      	mov	r0, r4
 800c324:	f7ff fa4c 	bl	800b7c0 <tcp_receive>
          if (recv_acked != 0) {
 800c328:	4a67      	ldr	r2, [pc, #412]	; (800c4c8 <tcp_input+0x8a0>)
 800c32a:	8a93      	ldrh	r3, [r2, #20]
 800c32c:	b10b      	cbz	r3, 800c332 <tcp_input+0x70a>
            recv_acked--;
 800c32e:	3b01      	subs	r3, #1
 800c330:	8293      	strh	r3, [r2, #20]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c332:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 800c334:	f241 131c 	movw	r3, #4380	; 0x111c
 800c338:	0041      	lsls	r1, r0, #1
 800c33a:	0087      	lsls	r7, r0, #2
 800c33c:	4299      	cmp	r1, r3
 800c33e:	468c      	mov	ip, r1
 800c340:	bf38      	it	cc
 800c342:	469c      	movcc	ip, r3
 800c344:	ebbc 0f80 	cmp.w	ip, r0, lsl #2
 800c348:	d90d      	bls.n	800c366 <tcp_input+0x73e>
 800c34a:	b2bb      	uxth	r3, r7
 800c34c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 800c350:	7c93      	ldrb	r3, [r2, #18]
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c352:	0698      	lsls	r0, r3, #26
 800c354:	f57f aed1 	bpl.w	800c0fa <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 800c358:	8b63      	ldrh	r3, [r4, #26]
 800c35a:	f043 0302 	orr.w	r3, r3, #2
 800c35e:	8363      	strh	r3, [r4, #26]
        pcb->state = CLOSE_WAIT;
 800c360:	2307      	movs	r3, #7
        pcb->state = FIN_WAIT_2;
 800c362:	7523      	strb	r3, [r4, #20]
    if (err != ERR_ABRT) {
 800c364:	e6c9      	b.n	800c0fa <tcp_input+0x4d2>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c366:	4299      	cmp	r1, r3
 800c368:	bf88      	it	hi
 800c36a:	b28b      	uxthhi	r3, r1
 800c36c:	e7ee      	b.n	800c34c <tcp_input+0x724>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c36e:	68eb      	ldr	r3, [r5, #12]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c370:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 800c372:	881f      	ldrh	r7, [r3, #0]
 800c374:	6a2a      	ldr	r2, [r5, #32]
 800c376:	9702      	str	r7, [sp, #8]
 800c378:	885b      	ldrh	r3, [r3, #2]
 800c37a:	4402      	add	r2, r0
 800c37c:	4620      	mov	r0, r4
 800c37e:	9301      	str	r3, [sp, #4]
 800c380:	4b4f      	ldr	r3, [pc, #316]	; (800c4c0 <tcp_input+0x898>)
 800c382:	9300      	str	r3, [sp, #0]
 800c384:	3304      	adds	r3, #4
 800c386:	f000 ffb3 	bl	800d2f0 <tcp_rst>
    if (err != ERR_ABRT) {
 800c38a:	e6b6      	b.n	800c0fa <tcp_input+0x4d2>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c38c:	079f      	lsls	r7, r3, #30
 800c38e:	f57f aeb4 	bpl.w	800c0fa <tcp_input+0x4d2>
 800c392:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c394:	6a2a      	ldr	r2, [r5, #32]
 800c396:	3b01      	subs	r3, #1
 800c398:	4293      	cmp	r3, r2
 800c39a:	f47f aeae 	bne.w	800c0fa <tcp_input+0x4d2>
        tcp_rexmit(pcb);
 800c39e:	4620      	mov	r0, r4
 800c3a0:	f000 ff32 	bl	800d208 <tcp_rexmit>
    if (err != ERR_ABRT) {
 800c3a4:	e6a9      	b.n	800c0fa <tcp_input+0x4d2>
      tcp_receive(pcb);
 800c3a6:	4620      	mov	r0, r4
 800c3a8:	f7ff fa0a 	bl	800b7c0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c3ac:	7cab      	ldrb	r3, [r5, #18]
 800c3ae:	e7d0      	b.n	800c352 <tcp_input+0x72a>
      tcp_receive(pcb);
 800c3b0:	4620      	mov	r0, r4
 800c3b2:	f7ff fa05 	bl	800b7c0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c3b6:	7cab      	ldrb	r3, [r5, #18]
 800c3b8:	f013 0f20 	tst.w	r3, #32
 800c3bc:	7f2b      	ldrb	r3, [r5, #28]
 800c3be:	d031      	beq.n	800c424 <tcp_input+0x7fc>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c3c0:	f013 0f10 	tst.w	r3, #16
 800c3c4:	8b63      	ldrh	r3, [r4, #26]
 800c3c6:	d028      	beq.n	800c41a <tcp_input+0x7f2>
 800c3c8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800c3ca:	69aa      	ldr	r2, [r5, #24]
 800c3cc:	4291      	cmp	r1, r2
 800c3ce:	d124      	bne.n	800c41a <tcp_input+0x7f2>
 800c3d0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800c3d2:	bb12      	cbnz	r2, 800c41a <tcp_input+0x7f2>
          tcp_ack_now(pcb);
 800c3d4:	f043 0302 	orr.w	r3, r3, #2
          tcp_pcb_purge(pcb);
 800c3d8:	4620      	mov	r0, r4
          tcp_ack_now(pcb);
 800c3da:	8363      	strh	r3, [r4, #26]
          tcp_pcb_purge(pcb);
 800c3dc:	f7fe fae4 	bl	800a9a8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800c3e0:	f8d9 3000 	ldr.w	r3, [r9]
 800c3e4:	429c      	cmp	r4, r3
 800c3e6:	d10a      	bne.n	800c3fe <tcp_input+0x7d6>
        TCP_RMV_ACTIVE(pcb);
 800c3e8:	68e3      	ldr	r3, [r4, #12]
 800c3ea:	f8c9 3000 	str.w	r3, [r9]
 800c3ee:	e008      	b.n	800c402 <tcp_input+0x7da>
          TCP_RMV_ACTIVE(pcb);
 800c3f0:	68da      	ldr	r2, [r3, #12]
 800c3f2:	4294      	cmp	r4, r2
 800c3f4:	d102      	bne.n	800c3fc <tcp_input+0x7d4>
        TCP_RMV_ACTIVE(pcb);
 800c3f6:	68e2      	ldr	r2, [r4, #12]
 800c3f8:	60da      	str	r2, [r3, #12]
 800c3fa:	e002      	b.n	800c402 <tcp_input+0x7da>
 800c3fc:	4613      	mov	r3, r2
          TCP_RMV_ACTIVE(pcb);
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d1f6      	bne.n	800c3f0 <tcp_input+0x7c8>
        TCP_RMV_ACTIVE(pcb);
 800c402:	4b32      	ldr	r3, [pc, #200]	; (800c4cc <tcp_input+0x8a4>)
 800c404:	2201      	movs	r2, #1
 800c406:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c408:	230a      	movs	r3, #10
 800c40a:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c40c:	4b30      	ldr	r3, [pc, #192]	; (800c4d0 <tcp_input+0x8a8>)
 800c40e:	681a      	ldr	r2, [r3, #0]
 800c410:	601c      	str	r4, [r3, #0]
 800c412:	60e2      	str	r2, [r4, #12]
 800c414:	f001 faba 	bl	800d98c <tcp_timer_needed>
    if (err != ERR_ABRT) {
 800c418:	e66f      	b.n	800c0fa <tcp_input+0x4d2>
          tcp_ack_now(pcb);
 800c41a:	f043 0302 	orr.w	r3, r3, #2
 800c41e:	8363      	strh	r3, [r4, #26]
          pcb->state = CLOSING;
 800c420:	2308      	movs	r3, #8
 800c422:	e79e      	b.n	800c362 <tcp_input+0x73a>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c424:	06d9      	lsls	r1, r3, #27
 800c426:	f57f ae68 	bpl.w	800c0fa <tcp_input+0x4d2>
 800c42a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800c42c:	69ab      	ldr	r3, [r5, #24]
 800c42e:	429a      	cmp	r2, r3
 800c430:	f47f ae63 	bne.w	800c0fa <tcp_input+0x4d2>
 800c434:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c436:	2b00      	cmp	r3, #0
 800c438:	f47f ae5f 	bne.w	800c0fa <tcp_input+0x4d2>
        pcb->state = FIN_WAIT_2;
 800c43c:	2306      	movs	r3, #6
 800c43e:	e790      	b.n	800c362 <tcp_input+0x73a>
      tcp_receive(pcb);
 800c440:	4620      	mov	r0, r4
 800c442:	f7ff f9bd 	bl	800b7c0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c446:	7cab      	ldrb	r3, [r5, #18]
 800c448:	069a      	lsls	r2, r3, #26
 800c44a:	f57f ae56 	bpl.w	800c0fa <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 800c44e:	8b63      	ldrh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800c450:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800c452:	f043 0302 	orr.w	r3, r3, #2
 800c456:	8363      	strh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800c458:	f7fe faa6 	bl	800a9a8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c45c:	f8d9 3000 	ldr.w	r3, [r9]
 800c460:	429c      	cmp	r4, r3
 800c462:	d0c1      	beq.n	800c3e8 <tcp_input+0x7c0>
 800c464:	2b00      	cmp	r3, #0
 800c466:	d0cc      	beq.n	800c402 <tcp_input+0x7da>
 800c468:	68da      	ldr	r2, [r3, #12]
 800c46a:	4294      	cmp	r4, r2
 800c46c:	d0c3      	beq.n	800c3f6 <tcp_input+0x7ce>
 800c46e:	4613      	mov	r3, r2
 800c470:	e7f8      	b.n	800c464 <tcp_input+0x83c>
      tcp_receive(pcb);
 800c472:	4620      	mov	r0, r4
 800c474:	f7ff f9a4 	bl	800b7c0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c478:	7f2b      	ldrb	r3, [r5, #28]
 800c47a:	06db      	lsls	r3, r3, #27
 800c47c:	f57f ae3d 	bpl.w	800c0fa <tcp_input+0x4d2>
 800c480:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800c482:	69ab      	ldr	r3, [r5, #24]
 800c484:	429a      	cmp	r2, r3
 800c486:	f47f ae38 	bne.w	800c0fa <tcp_input+0x4d2>
 800c48a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	f47f ae34 	bne.w	800c0fa <tcp_input+0x4d2>
        tcp_pcb_purge(pcb);
 800c492:	4620      	mov	r0, r4
 800c494:	f7fe fa88 	bl	800a9a8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c498:	f8d9 3000 	ldr.w	r3, [r9]
 800c49c:	429c      	cmp	r4, r3
 800c49e:	d0a3      	beq.n	800c3e8 <tcp_input+0x7c0>
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d0ae      	beq.n	800c402 <tcp_input+0x7da>
 800c4a4:	68da      	ldr	r2, [r3, #12]
 800c4a6:	4294      	cmp	r4, r2
 800c4a8:	d0a5      	beq.n	800c3f6 <tcp_input+0x7ce>
 800c4aa:	4613      	mov	r3, r2
 800c4ac:	e7f8      	b.n	800c4a0 <tcp_input+0x878>
 800c4ae:	bf00      	nop
 800c4b0:	08015891 	.word	0x08015891
 800c4b4:	08015ba5 	.word	0x08015ba5
 800c4b8:	0801342c 	.word	0x0801342c
 800c4bc:	08015bbb 	.word	0x08015bbb
 800c4c0:	2000a830 	.word	0x2000a830
 800c4c4:	08015bce 	.word	0x08015bce
 800c4c8:	2000694c 	.word	0x2000694c
 800c4cc:	20010d50 	.word	0x20010d50
 800c4d0:	20010d64 	.word	0x20010d64
      tcp_receive(pcb);
 800c4d4:	4620      	mov	r0, r4
 800c4d6:	f7ff f973 	bl	800b7c0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c4da:	7f2b      	ldrb	r3, [r5, #28]
 800c4dc:	06df      	lsls	r7, r3, #27
 800c4de:	f57f ae0c 	bpl.w	800c0fa <tcp_input+0x4d2>
 800c4e2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800c4e4:	69ab      	ldr	r3, [r5, #24]
 800c4e6:	429a      	cmp	r2, r3
 800c4e8:	f47f ae07 	bne.w	800c0fa <tcp_input+0x4d2>
 800c4ec:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	f47f ae03 	bne.w	800c0fa <tcp_input+0x4d2>
        recv_flags |= TF_CLOSED;
 800c4f4:	7cab      	ldrb	r3, [r5, #18]
 800c4f6:	f043 0310 	orr.w	r3, r3, #16
 800c4fa:	74ab      	strb	r3, [r5, #18]
    if (err != ERR_ABRT) {
 800c4fc:	e5fd      	b.n	800c0fa <tcp_input+0x4d2>
        if (recv_acked > 0) {
 800c4fe:	8aaa      	ldrh	r2, [r5, #20]
 800c500:	b11a      	cbz	r2, 800c50a <tcp_input+0x8e2>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800c502:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800c504:	b9db      	cbnz	r3, 800c53e <tcp_input+0x916>
          recv_acked = 0;
 800c506:	2300      	movs	r3, #0
 800c508:	82ab      	strh	r3, [r5, #20]
        if (tcp_input_delayed_close(pcb)) {
 800c50a:	4620      	mov	r0, r4
 800c50c:	f7ff f8d0 	bl	800b6b0 <tcp_input_delayed_close>
 800c510:	2800      	cmp	r0, #0
 800c512:	f47f acc0 	bne.w	800be96 <tcp_input+0x26e>
        if (recv_data != NULL) {
 800c516:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800c518:	b323      	cbz	r3, 800c564 <tcp_input+0x93c>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800c51a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c51c:	b133      	cbz	r3, 800c52c <tcp_input+0x904>
 800c51e:	4b37      	ldr	r3, [pc, #220]	; (800c5fc <tcp_input+0x9d4>)
 800c520:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800c524:	4936      	ldr	r1, [pc, #216]	; (800c600 <tcp_input+0x9d8>)
 800c526:	4837      	ldr	r0, [pc, #220]	; (800c604 <tcp_input+0x9dc>)
 800c528:	f001 ff30 	bl	800e38c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800c52c:	8b63      	ldrh	r3, [r4, #26]
 800c52e:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800c530:	f013 0310 	ands.w	r3, r3, #16
 800c534:	d009      	beq.n	800c54a <tcp_input+0x922>
            pbuf_free(recv_data);
 800c536:	4610      	mov	r0, r2
 800c538:	f7fd fd76 	bl	800a028 <pbuf_free>
 800c53c:	e6d7      	b.n	800c2ee <tcp_input+0x6c6>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800c53e:	4621      	mov	r1, r4
 800c540:	6920      	ldr	r0, [r4, #16]
 800c542:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800c544:	300d      	adds	r0, #13
 800c546:	d1de      	bne.n	800c506 <tcp_input+0x8de>
 800c548:	e4a5      	b.n	800be96 <tcp_input+0x26e>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c54a:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800c54e:	b1f7      	cbz	r7, 800c58e <tcp_input+0x966>
 800c550:	4621      	mov	r1, r4
 800c552:	6920      	ldr	r0, [r4, #16]
 800c554:	47b8      	blx	r7
          if (err == ERR_ABRT) {
 800c556:	f110 0f0d 	cmn.w	r0, #13
 800c55a:	f43f ac9c 	beq.w	800be96 <tcp_input+0x26e>
          if (err != ERR_OK) {
 800c55e:	b108      	cbz	r0, 800c564 <tcp_input+0x93c>
            pcb->refused_data = recv_data;
 800c560:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800c562:	6763      	str	r3, [r4, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 800c564:	7cab      	ldrb	r3, [r5, #18]
 800c566:	0699      	lsls	r1, r3, #26
 800c568:	d505      	bpl.n	800c576 <tcp_input+0x94e>
          if (pcb->refused_data != NULL) {
 800c56a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c56c:	b1ab      	cbz	r3, 800c59a <tcp_input+0x972>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800c56e:	7b5a      	ldrb	r2, [r3, #13]
 800c570:	f042 0220 	orr.w	r2, r2, #32
 800c574:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800c576:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 800c578:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 800c57a:	6033      	str	r3, [r6, #0]
        if (tcp_input_delayed_close(pcb)) {
 800c57c:	f7ff f898 	bl	800b6b0 <tcp_input_delayed_close>
 800c580:	2800      	cmp	r0, #0
 800c582:	f47f ac88 	bne.w	800be96 <tcp_input+0x26e>
        tcp_output(pcb);
 800c586:	4620      	mov	r0, r4
 800c588:	f000 ff2a 	bl	800d3e0 <tcp_output>
 800c58c:	e483      	b.n	800be96 <tcp_input+0x26e>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c58e:	463b      	mov	r3, r7
 800c590:	4621      	mov	r1, r4
 800c592:	4638      	mov	r0, r7
 800c594:	f7fe fd6c 	bl	800b070 <tcp_recv_null>
 800c598:	e7dd      	b.n	800c556 <tcp_input+0x92e>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c59a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800c59c:	f640 3268 	movw	r2, #2920	; 0xb68
            TCP_EVENT_CLOSED(pcb, err);
 800c5a0:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c5a4:	4293      	cmp	r3, r2
              pcb->rcv_wnd++;
 800c5a6:	bf1c      	itt	ne
 800c5a8:	3301      	addne	r3, #1
 800c5aa:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800c5ac:	2f00      	cmp	r7, #0
 800c5ae:	d0e2      	beq.n	800c576 <tcp_input+0x94e>
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	4621      	mov	r1, r4
 800c5b4:	6920      	ldr	r0, [r4, #16]
 800c5b6:	461a      	mov	r2, r3
 800c5b8:	47b8      	blx	r7
            if (err == ERR_ABRT) {
 800c5ba:	300d      	adds	r0, #13
 800c5bc:	d1db      	bne.n	800c576 <tcp_input+0x94e>
 800c5be:	e46a      	b.n	800be96 <tcp_input+0x26e>
      if (prev != NULL) {
 800c5c0:	b11c      	cbz	r4, 800c5ca <tcp_input+0x9a2>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800c5c4:	6017      	str	r7, [r2, #0]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800c5c6:	60e3      	str	r3, [r4, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800c5c8:	60f8      	str	r0, [r7, #12]
  if (flags & TCP_RST) {
 800c5ca:	7f2b      	ldrb	r3, [r5, #28]
 800c5cc:	0758      	lsls	r0, r3, #29
 800c5ce:	f53f abdf 	bmi.w	800bd90 <tcp_input+0x168>
  if (flags & TCP_ACK) {
 800c5d2:	f013 0a10 	ands.w	sl, r3, #16
 800c5d6:	f43f ad1a 	beq.w	800c00e <tcp_input+0x3e6>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c5da:	880b      	ldrh	r3, [r1, #0]
 800c5dc:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 800c5de:	6a2a      	ldr	r2, [r5, #32]
 800c5e0:	e9cd c301 	strd	ip, r3, [sp, #4]
 800c5e4:	4b08      	ldr	r3, [pc, #32]	; (800c608 <tcp_input+0x9e0>)
 800c5e6:	4402      	add	r2, r0
 800c5e8:	9300      	str	r3, [sp, #0]
 800c5ea:	3304      	adds	r3, #4
 800c5ec:	69a9      	ldr	r1, [r5, #24]
 800c5ee:	4638      	mov	r0, r7
 800c5f0:	e4c2      	b.n	800bf78 <tcp_input+0x350>
      if (prev != NULL) {
 800c5f2:	2f00      	cmp	r7, #0
 800c5f4:	f47f ac16 	bne.w	800be24 <tcp_input+0x1fc>
 800c5f8:	e425      	b.n	800be46 <tcp_input+0x21e>
 800c5fa:	bf00      	nop
 800c5fc:	08015891 	.word	0x08015891
 800c600:	08015bec 	.word	0x08015bec
 800c604:	0801342c 	.word	0x0801342c
 800c608:	2000a830 	.word	0x2000a830

0800c60c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800c60c:	4a02      	ldr	r2, [pc, #8]	; (800c618 <tcp_trigger_input_pcb_close+0xc>)
 800c60e:	7c93      	ldrb	r3, [r2, #18]
 800c610:	f043 0310 	orr.w	r3, r3, #16
 800c614:	7493      	strb	r3, [r2, #18]
}
 800c616:	4770      	bx	lr
 800c618:	2000694c 	.word	0x2000694c

0800c61c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800c61c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800c61e:	4604      	mov	r4, r0
 800c620:	b930      	cbnz	r0, 800c630 <tcp_output_segment_busy+0x14>
 800c622:	4b06      	ldr	r3, [pc, #24]	; (800c63c <tcp_output_segment_busy+0x20>)
 800c624:	f240 529a 	movw	r2, #1434	; 0x59a
 800c628:	4905      	ldr	r1, [pc, #20]	; (800c640 <tcp_output_segment_busy+0x24>)
 800c62a:	4806      	ldr	r0, [pc, #24]	; (800c644 <tcp_output_segment_busy+0x28>)
 800c62c:	f001 feae 	bl	800e38c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800c630:	6863      	ldr	r3, [r4, #4]
 800c632:	7b98      	ldrb	r0, [r3, #14]
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
}
 800c634:	3801      	subs	r0, #1
 800c636:	bf18      	it	ne
 800c638:	2001      	movne	r0, #1
 800c63a:	bd10      	pop	{r4, pc}
 800c63c:	08015c06 	.word	0x08015c06
 800c640:	08015c70 	.word	0x08015c70
 800c644:	0801342c 	.word	0x0801342c

0800c648 <tcp_pbuf_prealloc>:
{
 800c648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c64c:	9d08      	ldr	r5, [sp, #32]
 800c64e:	4680      	mov	r8, r0
 800c650:	460c      	mov	r4, r1
 800c652:	4617      	mov	r7, r2
 800c654:	461e      	mov	r6, r3
 800c656:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800c65a:	b92d      	cbnz	r5, 800c668 <tcp_pbuf_prealloc+0x20>
 800c65c:	4b1c      	ldr	r3, [pc, #112]	; (800c6d0 <tcp_pbuf_prealloc+0x88>)
 800c65e:	22e9      	movs	r2, #233	; 0xe9
 800c660:	491c      	ldr	r1, [pc, #112]	; (800c6d4 <tcp_pbuf_prealloc+0x8c>)
 800c662:	481d      	ldr	r0, [pc, #116]	; (800c6d8 <tcp_pbuf_prealloc+0x90>)
 800c664:	f001 fe92 	bl	800e38c <iprintf>
  if (length < max_length) {
 800c668:	42bc      	cmp	r4, r7
 800c66a:	d22e      	bcs.n	800c6ca <tcp_pbuf_prealloc+0x82>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c66c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800c670:	079a      	lsls	r2, r3, #30
 800c672:	d409      	bmi.n	800c688 <tcp_pbuf_prealloc+0x40>
 800c674:	8b6b      	ldrh	r3, [r5, #26]
 800c676:	065b      	lsls	r3, r3, #25
 800c678:	d427      	bmi.n	800c6ca <tcp_pbuf_prealloc+0x82>
        (!(pcb->flags & TF_NODELAY) &&
 800c67a:	f1b9 0f00 	cmp.w	r9, #0
 800c67e:	d003      	beq.n	800c688 <tcp_pbuf_prealloc+0x40>
         (!first_seg ||
 800c680:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800c682:	b90b      	cbnz	r3, 800c688 <tcp_pbuf_prealloc+0x40>
          pcb->unsent != NULL ||
 800c684:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800c686:	b303      	cbz	r3, 800c6ca <tcp_pbuf_prealloc+0x82>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800c688:	f204 55b7 	addw	r5, r4, #1463	; 0x5b7
 800c68c:	f025 0103 	bic.w	r1, r5, #3
 800c690:	42b9      	cmp	r1, r7
 800c692:	460a      	mov	r2, r1
 800c694:	bf28      	it	cs
 800c696:	463a      	movcs	r2, r7
 800c698:	b291      	uxth	r1, r2
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800c69a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c69e:	4640      	mov	r0, r8
 800c6a0:	f7fd fd2a 	bl	800a0f8 <pbuf_alloc>
  if (p == NULL) {
 800c6a4:	4605      	mov	r5, r0
 800c6a6:	b168      	cbz	r0, 800c6c4 <tcp_pbuf_prealloc+0x7c>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800c6a8:	6803      	ldr	r3, [r0, #0]
 800c6aa:	b133      	cbz	r3, 800c6ba <tcp_pbuf_prealloc+0x72>
 800c6ac:	4b08      	ldr	r3, [pc, #32]	; (800c6d0 <tcp_pbuf_prealloc+0x88>)
 800c6ae:	f240 120b 	movw	r2, #267	; 0x10b
 800c6b2:	490a      	ldr	r1, [pc, #40]	; (800c6dc <tcp_pbuf_prealloc+0x94>)
 800c6b4:	4808      	ldr	r0, [pc, #32]	; (800c6d8 <tcp_pbuf_prealloc+0x90>)
 800c6b6:	f001 fe69 	bl	800e38c <iprintf>
  *oversize = p->len - length;
 800c6ba:	896b      	ldrh	r3, [r5, #10]
 800c6bc:	1b1b      	subs	r3, r3, r4
 800c6be:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
 800c6c0:	812c      	strh	r4, [r5, #8]
 800c6c2:	816c      	strh	r4, [r5, #10]
}
 800c6c4:	4628      	mov	r0, r5
 800c6c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6ca:	4621      	mov	r1, r4
 800c6cc:	e7e5      	b.n	800c69a <tcp_pbuf_prealloc+0x52>
 800c6ce:	bf00      	nop
 800c6d0:	08015c06 	.word	0x08015c06
 800c6d4:	08015c95 	.word	0x08015c95
 800c6d8:	0801342c 	.word	0x0801342c
 800c6dc:	08015cb4 	.word	0x08015cb4

0800c6e0 <tcp_create_segment>:
{
 800c6e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6e4:	460e      	mov	r6, r1
 800c6e6:	4690      	mov	r8, r2
 800c6e8:	4699      	mov	r9, r3
 800c6ea:	f89d a020 	ldrb.w	sl, [sp, #32]
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800c6ee:	4607      	mov	r7, r0
 800c6f0:	b928      	cbnz	r0, 800c6fe <tcp_create_segment+0x1e>
 800c6f2:	4b2e      	ldr	r3, [pc, #184]	; (800c7ac <tcp_create_segment+0xcc>)
 800c6f4:	22a3      	movs	r2, #163	; 0xa3
 800c6f6:	492e      	ldr	r1, [pc, #184]	; (800c7b0 <tcp_create_segment+0xd0>)
 800c6f8:	482e      	ldr	r0, [pc, #184]	; (800c7b4 <tcp_create_segment+0xd4>)
 800c6fa:	f001 fe47 	bl	800e38c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800c6fe:	b92e      	cbnz	r6, 800c70c <tcp_create_segment+0x2c>
 800c700:	4b2a      	ldr	r3, [pc, #168]	; (800c7ac <tcp_create_segment+0xcc>)
 800c702:	22a4      	movs	r2, #164	; 0xa4
 800c704:	492c      	ldr	r1, [pc, #176]	; (800c7b8 <tcp_create_segment+0xd8>)
 800c706:	482b      	ldr	r0, [pc, #172]	; (800c7b4 <tcp_create_segment+0xd4>)
 800c708:	f001 fe40 	bl	800e38c <iprintf>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c70c:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c710:	2003      	movs	r0, #3
 800c712:	f7fd fa43 	bl	8009b9c <memp_malloc>
 800c716:	4604      	mov	r4, r0
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c718:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c71c:	b928      	cbnz	r0, 800c72a <tcp_create_segment+0x4a>
    pbuf_free(p);
 800c71e:	4630      	mov	r0, r6
 800c720:	f7fd fc82 	bl	800a028 <pbuf_free>
}
 800c724:	4620      	mov	r0, r4
 800c726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->next = NULL;
 800c72a:	2300      	movs	r3, #0
  seg->flags = optflags;
 800c72c:	f880 a00a 	strb.w	sl, [r0, #10]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c730:	fa1f fa85 	uxth.w	sl, r5
  seg->p = p;
 800c734:	e9c0 3600 	strd	r3, r6, [r0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c738:	8933      	ldrh	r3, [r6, #8]
 800c73a:	42ab      	cmp	r3, r5
 800c73c:	d205      	bcs.n	800c74a <tcp_create_segment+0x6a>
 800c73e:	4b1b      	ldr	r3, [pc, #108]	; (800c7ac <tcp_create_segment+0xcc>)
 800c740:	22b0      	movs	r2, #176	; 0xb0
 800c742:	491e      	ldr	r1, [pc, #120]	; (800c7bc <tcp_create_segment+0xdc>)
 800c744:	481b      	ldr	r0, [pc, #108]	; (800c7b4 <tcp_create_segment+0xd4>)
 800c746:	f001 fe21 	bl	800e38c <iprintf>
  seg->len = p->tot_len - optlen;
 800c74a:	8933      	ldrh	r3, [r6, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800c74c:	4630      	mov	r0, r6
 800c74e:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 800c750:	eba3 030a 	sub.w	r3, r3, sl
 800c754:	8123      	strh	r3, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800c756:	f7fd fc2f 	bl	8009fb8 <pbuf_add_header>
 800c75a:	4606      	mov	r6, r0
 800c75c:	b120      	cbz	r0, 800c768 <tcp_create_segment+0x88>
    tcp_seg_free(seg);
 800c75e:	4620      	mov	r0, r4
    return NULL;
 800c760:	2400      	movs	r4, #0
    tcp_seg_free(seg);
 800c762:	f7fe f897 	bl	800a894 <tcp_seg_free>
    return NULL;
 800c766:	e7dd      	b.n	800c724 <tcp_create_segment+0x44>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c768:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c76a:	08ad      	lsrs	r5, r5, #2
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c76c:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c76e:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c772:	3505      	adds	r5, #5
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c774:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c778:	f7fc fef0 	bl	800955c <lwip_htons>
 800c77c:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c780:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800c784:	8b38      	ldrh	r0, [r7, #24]
 800c786:	f7fc fee9 	bl	800955c <lwip_htons>
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c78a:	68e7      	ldr	r7, [r4, #12]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c78c:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c790:	4648      	mov	r0, r9
 800c792:	f7fc fee6 	bl	8009562 <lwip_htonl>
 800c796:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c798:	ea48 3005 	orr.w	r0, r8, r5, lsl #12
 800c79c:	68e7      	ldr	r7, [r4, #12]
 800c79e:	f7fc fedd 	bl	800955c <lwip_htons>
  seg->tcphdr->urgp = 0;
 800c7a2:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c7a4:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 800c7a6:	749e      	strb	r6, [r3, #18]
 800c7a8:	74de      	strb	r6, [r3, #19]
  return seg;
 800c7aa:	e7bb      	b.n	800c724 <tcp_create_segment+0x44>
 800c7ac:	08015c06 	.word	0x08015c06
 800c7b0:	08015cc8 	.word	0x08015cc8
 800c7b4:	0801342c 	.word	0x0801342c
 800c7b8:	08015ce8 	.word	0x08015ce8
 800c7bc:	08015d09 	.word	0x08015d09

0800c7c0 <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c7c0:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800c7c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c7c6:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800c7c8:	4606      	mov	r6, r0
 800c7ca:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c7cc:	2022      	movs	r0, #34	; 0x22
 800c7ce:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800c7d2:	4698      	mov	r8, r3
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c7d4:	f7fd fc90 	bl	800a0f8 <pbuf_alloc>
  if (p != NULL) {
 800c7d8:	4605      	mov	r5, r0
 800c7da:	b348      	cbz	r0, 800c830 <tcp_output_alloc_header_common.constprop.0+0x70>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c7dc:	8943      	ldrh	r3, [r0, #10]
 800c7de:	2b13      	cmp	r3, #19
 800c7e0:	d806      	bhi.n	800c7f0 <tcp_output_alloc_header_common.constprop.0+0x30>
 800c7e2:	4b15      	ldr	r3, [pc, #84]	; (800c838 <tcp_output_alloc_header_common.constprop.0+0x78>)
 800c7e4:	f240 7223 	movw	r2, #1827	; 0x723
 800c7e8:	4914      	ldr	r1, [pc, #80]	; (800c83c <tcp_output_alloc_header_common.constprop.0+0x7c>)
 800c7ea:	4815      	ldr	r0, [pc, #84]	; (800c840 <tcp_output_alloc_header_common.constprop.0+0x80>)
 800c7ec:	f001 fdce 	bl	800e38c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800c7f0:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 800c7f2:	4640      	mov	r0, r8
 800c7f4:	f7fc feb2 	bl	800955c <lwip_htons>
 800c7f8:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800c7fa:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800c7fe:	f7fc fead 	bl	800955c <lwip_htons>
    tcphdr->seqno = seqno_be;
 800c802:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 800c804:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 800c806:	4630      	mov	r0, r6
 800c808:	f7fc feab 	bl	8009562 <lwip_htonl>
 800c80c:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800c80e:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800c812:	f440 40a0 	orr.w	r0, r0, #20480	; 0x5000
 800c816:	f7fc fea1 	bl	800955c <lwip_htons>
 800c81a:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800c81c:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 800c820:	f7fc fe9c 	bl	800955c <lwip_htons>
    tcphdr->chksum = 0;
 800c824:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 800c826:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 800c828:	7423      	strb	r3, [r4, #16]
 800c82a:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 800c82c:	74a3      	strb	r3, [r4, #18]
 800c82e:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 800c830:	4628      	mov	r0, r5
 800c832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c836:	bf00      	nop
 800c838:	08015c06 	.word	0x08015c06
 800c83c:	08015d1e 	.word	0x08015d1e
 800c840:	0801342c 	.word	0x0801342c

0800c844 <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800c844:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c846:	460d      	mov	r5, r1
 800c848:	4616      	mov	r6, r2
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c84a:	4604      	mov	r4, r0
 800c84c:	b930      	cbnz	r0, 800c85c <tcp_output_alloc_header.constprop.0+0x18>
 800c84e:	4b0d      	ldr	r3, [pc, #52]	; (800c884 <tcp_output_alloc_header.constprop.0+0x40>)
 800c850:	f240 7242 	movw	r2, #1858	; 0x742
 800c854:	490c      	ldr	r1, [pc, #48]	; (800c888 <tcp_output_alloc_header.constprop.0+0x44>)
 800c856:	480d      	ldr	r0, [pc, #52]	; (800c88c <tcp_output_alloc_header.constprop.0+0x48>)
 800c858:	f001 fd98 	bl	800e38c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800c85c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c85e:	4632      	mov	r2, r6
 800c860:	4629      	mov	r1, r5
 800c862:	9302      	str	r3, [sp, #8]
 800c864:	2310      	movs	r3, #16
 800c866:	9301      	str	r3, [sp, #4]
 800c868:	8b23      	ldrh	r3, [r4, #24]
 800c86a:	9300      	str	r3, [sp, #0]
 800c86c:	8ae3      	ldrh	r3, [r4, #22]
 800c86e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c870:	f7ff ffa6 	bl	800c7c0 <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800c874:	b118      	cbz	r0, 800c87e <tcp_output_alloc_header.constprop.0+0x3a>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c876:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800c878:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c87a:	4413      	add	r3, r2
 800c87c:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 800c87e:	b004      	add	sp, #16
 800c880:	bd70      	pop	{r4, r5, r6, pc}
 800c882:	bf00      	nop
 800c884:	08015c06 	.word	0x08015c06
 800c888:	08015d4c 	.word	0x08015d4c
 800c88c:	0801342c 	.word	0x0801342c

0800c890 <tcp_output_fill_options.isra.0.constprop.0>:
{
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800c890:	b930      	cbnz	r0, 800c8a0 <tcp_output_fill_options.isra.0.constprop.0+0x10>
 800c892:	4b04      	ldr	r3, [pc, #16]	; (800c8a4 <tcp_output_fill_options.isra.0.constprop.0+0x14>)
 800c894:	f240 7256 	movw	r2, #1878	; 0x756
 800c898:	4903      	ldr	r1, [pc, #12]	; (800c8a8 <tcp_output_fill_options.isra.0.constprop.0+0x18>)
 800c89a:	4804      	ldr	r0, [pc, #16]	; (800c8ac <tcp_output_fill_options.isra.0.constprop.0+0x1c>)
 800c89c:	f001 bd76 	b.w	800e38c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800c8a0:	4770      	bx	lr
 800c8a2:	bf00      	nop
 800c8a4:	08015c06 	.word	0x08015c06
 800c8a8:	08015d71 	.word	0x08015d71
 800c8ac:	0801342c 	.word	0x0801342c

0800c8b0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800c8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8b2:	4604      	mov	r4, r0
 800c8b4:	b085      	sub	sp, #20
 800c8b6:	4617      	mov	r7, r2
 800c8b8:	461e      	mov	r6, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c8ba:	460d      	mov	r5, r1
 800c8bc:	b931      	cbnz	r1, 800c8cc <tcp_output_control_segment+0x1c>
 800c8be:	4b15      	ldr	r3, [pc, #84]	; (800c914 <tcp_output_control_segment+0x64>)
 800c8c0:	f240 7287 	movw	r2, #1927	; 0x787
 800c8c4:	4914      	ldr	r1, [pc, #80]	; (800c918 <tcp_output_control_segment+0x68>)
 800c8c6:	4815      	ldr	r0, [pc, #84]	; (800c91c <tcp_output_control_segment+0x6c>)
 800c8c8:	f001 fd60 	bl	800e38c <iprintf>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c8cc:	b164      	cbz	r4, 800c8e8 <tcp_output_control_segment+0x38>
 800c8ce:	7a20      	ldrb	r0, [r4, #8]
 800c8d0:	b150      	cbz	r0, 800c8e8 <tcp_output_control_segment+0x38>
    return netif_get_by_index(pcb->netif_idx);
 800c8d2:	f7fd faef 	bl	8009eb4 <netif_get_by_index>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 800c8d6:	b968      	cbnz	r0, 800c8f4 <tcp_output_control_segment+0x44>
    err = ERR_RTE;
 800c8d8:	f06f 0403 	mvn.w	r4, #3
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800c8dc:	4628      	mov	r0, r5
 800c8de:	f7fd fba3 	bl	800a028 <pbuf_free>
  return err;
}
 800c8e2:	4620      	mov	r0, r4
 800c8e4:	b005      	add	sp, #20
 800c8e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ip_route(src, dst);
 800c8e8:	4630      	mov	r0, r6
 800c8ea:	f7fc f879 	bl	80089e0 <ip4_route>
  if (netif == NULL) {
 800c8ee:	2800      	cmp	r0, #0
 800c8f0:	d0f2      	beq.n	800c8d8 <tcp_output_control_segment+0x28>
    if (pcb != NULL) {
 800c8f2:	b164      	cbz	r4, 800c90e <tcp_output_control_segment+0x5e>
      ttl = pcb->ttl;
 800c8f4:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 800c8f6:	7aa4      	ldrb	r4, [r4, #10]
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800c8f8:	2206      	movs	r2, #6
 800c8fa:	9002      	str	r0, [sp, #8]
 800c8fc:	4639      	mov	r1, r7
 800c8fe:	4628      	mov	r0, r5
 800c900:	e9cd 4200 	strd	r4, r2, [sp]
 800c904:	4632      	mov	r2, r6
 800c906:	f7fc f9d7 	bl	8008cb8 <ip4_output_if>
 800c90a:	4604      	mov	r4, r0
 800c90c:	e7e6      	b.n	800c8dc <tcp_output_control_segment+0x2c>
      ttl = TCP_TTL;
 800c90e:	23ff      	movs	r3, #255	; 0xff
 800c910:	e7f2      	b.n	800c8f8 <tcp_output_control_segment+0x48>
 800c912:	bf00      	nop
 800c914:	08015c06 	.word	0x08015c06
 800c918:	08015d97 	.word	0x08015d97
 800c91c:	0801342c 	.word	0x0801342c

0800c920 <tcp_write>:
{
 800c920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c924:	ed2d 8b02 	vpush	{d8}
 800c928:	b08f      	sub	sp, #60	; 0x3c
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800c92a:	4604      	mov	r4, r0
{
 800c92c:	9308      	str	r3, [sp, #32]
  u16_t oversize = 0;
 800c92e:	2300      	movs	r3, #0
{
 800c930:	9107      	str	r1, [sp, #28]
 800c932:	9204      	str	r2, [sp, #16]
  u16_t oversize = 0;
 800c934:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800c938:	b968      	cbnz	r0, 800c956 <tcp_write+0x36>
 800c93a:	4bab      	ldr	r3, [pc, #684]	; (800cbe8 <tcp_write+0x2c8>)
 800c93c:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800c940:	49aa      	ldr	r1, [pc, #680]	; (800cbec <tcp_write+0x2cc>)
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800c942:	48ab      	ldr	r0, [pc, #684]	; (800cbf0 <tcp_write+0x2d0>)
 800c944:	f001 fd22 	bl	800e38c <iprintf>
 800c948:	f06f 000f 	mvn.w	r0, #15
}
 800c94c:	b00f      	add	sp, #60	; 0x3c
 800c94e:	ecbd 8b02 	vpop	{d8}
 800c952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800c956:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800c95a:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800c95c:	085b      	lsrs	r3, r3, #1
 800c95e:	4293      	cmp	r3, r2
 800c960:	bf28      	it	cs
 800c962:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 800c964:	2b00      	cmp	r3, #0
 800c966:	bf08      	it	eq
 800c968:	4613      	moveq	r3, r2
 800c96a:	9306      	str	r3, [sp, #24]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800c96c:	9b07      	ldr	r3, [sp, #28]
 800c96e:	b923      	cbnz	r3, 800c97a <tcp_write+0x5a>
 800c970:	4b9d      	ldr	r3, [pc, #628]	; (800cbe8 <tcp_write+0x2c8>)
 800c972:	f240 12ad 	movw	r2, #429	; 0x1ad
 800c976:	499f      	ldr	r1, [pc, #636]	; (800cbf4 <tcp_write+0x2d4>)
 800c978:	e7e3      	b.n	800c942 <tcp_write+0x22>
  if ((pcb->state != ESTABLISHED) &&
 800c97a:	7d03      	ldrb	r3, [r0, #20]
 800c97c:	2b07      	cmp	r3, #7
 800c97e:	d003      	beq.n	800c988 <tcp_write+0x68>
      (pcb->state != CLOSE_WAIT) &&
 800c980:	3b02      	subs	r3, #2
 800c982:	2b02      	cmp	r3, #2
 800c984:	f200 825b 	bhi.w	800ce3e <tcp_write+0x51e>
  } else if (len == 0) {
 800c988:	9b04      	ldr	r3, [sp, #16]
 800c98a:	b1db      	cbz	r3, 800c9c4 <tcp_write+0xa4>
  if (len > pcb->snd_buf) {
 800c98c:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800c990:	9a04      	ldr	r2, [sp, #16]
 800c992:	4293      	cmp	r3, r2
 800c994:	d206      	bcs.n	800c9a4 <tcp_write+0x84>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c996:	8b63      	ldrh	r3, [r4, #26]
 800c998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c99c:	8363      	strh	r3, [r4, #26]
  return ERR_MEM;
 800c99e:	f04f 30ff 	mov.w	r0, #4294967295
 800c9a2:	e7d3      	b.n	800c94c <tcp_write+0x2c>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800c9a4:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
 800c9a8:	2a07      	cmp	r2, #7
 800c9aa:	d8f4      	bhi.n	800c996 <tcp_write+0x76>
  if (pcb->snd_queuelen != 0) {
 800c9ac:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c9ae:	b302      	cbz	r2, 800c9f2 <tcp_write+0xd2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800c9b0:	b943      	cbnz	r3, 800c9c4 <tcp_write+0xa4>
 800c9b2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c9b4:	b933      	cbnz	r3, 800c9c4 <tcp_write+0xa4>
 800c9b6:	4b8c      	ldr	r3, [pc, #560]	; (800cbe8 <tcp_write+0x2c8>)
 800c9b8:	f240 1255 	movw	r2, #341	; 0x155
 800c9bc:	498e      	ldr	r1, [pc, #568]	; (800cbf8 <tcp_write+0x2d8>)
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800c9be:	488c      	ldr	r0, [pc, #560]	; (800cbf0 <tcp_write+0x2d0>)
 800c9c0:	f001 fce4 	bl	800e38c <iprintf>
  queuelen = pcb->snd_queuelen;
 800c9c4:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
  if (pcb->unsent != NULL) {
 800c9c8:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
  queuelen = pcb->snd_queuelen;
 800c9ca:	9305      	str	r3, [sp, #20]
  if (pcb->unsent != NULL) {
 800c9cc:	b9de      	cbnz	r6, 800ca06 <tcp_write+0xe6>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800c9ce:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
 800c9d2:	2f00      	cmp	r7, #0
 800c9d4:	f000 81bc 	beq.w	800cd50 <tcp_write+0x430>
 800c9d8:	4b83      	ldr	r3, [pc, #524]	; (800cbe8 <tcp_write+0x2c8>)
 800c9da:	f240 224a 	movw	r2, #586	; 0x24a
 800c9de:	4987      	ldr	r1, [pc, #540]	; (800cbfc <tcp_write+0x2dc>)
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800c9e0:	46b0      	mov	r8, r6
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800c9e2:	4883      	ldr	r0, [pc, #524]	; (800cbf0 <tcp_write+0x2d0>)
  struct pbuf *concat_p = NULL;
 800c9e4:	46b2      	mov	sl, r6
  u16_t extendlen = 0;
 800c9e6:	46b1      	mov	r9, r6
  u16_t oversize_used = 0;
 800c9e8:	4635      	mov	r5, r6
  u16_t pos = 0; /* position in 'arg' data */
 800c9ea:	4637      	mov	r7, r6
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800c9ec:	f001 fcce 	bl	800e38c <iprintf>
 800c9f0:	e089      	b.n	800cb06 <tcp_write+0x1e6>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800c9f2:	b913      	cbnz	r3, 800c9fa <tcp_write+0xda>
 800c9f4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d0e4      	beq.n	800c9c4 <tcp_write+0xa4>
 800c9fa:	4b7b      	ldr	r3, [pc, #492]	; (800cbe8 <tcp_write+0x2c8>)
 800c9fc:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800ca00:	497f      	ldr	r1, [pc, #508]	; (800cc00 <tcp_write+0x2e0>)
 800ca02:	e7dc      	b.n	800c9be <tcp_write+0x9e>
 800ca04:	4656      	mov	r6, sl
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ca06:	f8d6 a000 	ldr.w	sl, [r6]
 800ca0a:	46b0      	mov	r8, r6
 800ca0c:	f1ba 0f00 	cmp.w	sl, #0
 800ca10:	d1f8      	bne.n	800ca04 <tcp_write+0xe4>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800ca12:	7ab5      	ldrb	r5, [r6, #10]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800ca14:	8933      	ldrh	r3, [r6, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800ca16:	00ad      	lsls	r5, r5, #2
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800ca18:	9a06      	ldr	r2, [sp, #24]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800ca1a:	f005 0504 	and.w	r5, r5, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800ca1e:	442b      	add	r3, r5
 800ca20:	429a      	cmp	r2, r3
 800ca22:	da06      	bge.n	800ca32 <tcp_write+0x112>
 800ca24:	4b70      	ldr	r3, [pc, #448]	; (800cbe8 <tcp_write+0x2c8>)
 800ca26:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ca2a:	4976      	ldr	r1, [pc, #472]	; (800cc04 <tcp_write+0x2e4>)
 800ca2c:	4870      	ldr	r0, [pc, #448]	; (800cbf0 <tcp_write+0x2d0>)
 800ca2e:	f001 fcad 	bl	800e38c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800ca32:	8937      	ldrh	r7, [r6, #8]
 800ca34:	9b06      	ldr	r3, [sp, #24]
 800ca36:	1bdf      	subs	r7, r3, r7
 800ca38:	1b7f      	subs	r7, r7, r5
    oversize = pcb->unsent_oversize;
 800ca3a:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 800ca3e:	b2bf      	uxth	r7, r7
    oversize = pcb->unsent_oversize;
 800ca40:	f8ad 5036 	strh.w	r5, [sp, #54]	; 0x36
    if (oversize > 0) {
 800ca44:	2d00      	cmp	r5, #0
 800ca46:	d067      	beq.n	800cb18 <tcp_write+0x1f8>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800ca48:	42bd      	cmp	r5, r7
 800ca4a:	d906      	bls.n	800ca5a <tcp_write+0x13a>
 800ca4c:	4b66      	ldr	r3, [pc, #408]	; (800cbe8 <tcp_write+0x2c8>)
 800ca4e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800ca52:	496d      	ldr	r1, [pc, #436]	; (800cc08 <tcp_write+0x2e8>)
 800ca54:	4866      	ldr	r0, [pc, #408]	; (800cbf0 <tcp_write+0x2d0>)
 800ca56:	f001 fc99 	bl	800e38c <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800ca5a:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800ca5e:	9a04      	ldr	r2, [sp, #16]
 800ca60:	429a      	cmp	r2, r3
 800ca62:	bf28      	it	cs
 800ca64:	461a      	movcs	r2, r3
 800ca66:	42ba      	cmp	r2, r7
 800ca68:	4615      	mov	r5, r2
 800ca6a:	bf28      	it	cs
 800ca6c:	463d      	movcs	r5, r7
      oversize -= oversize_used;
 800ca6e:	1b5b      	subs	r3, r3, r5
      space -= oversize_used;
 800ca70:	1b7f      	subs	r7, r7, r5
      oversize -= oversize_used;
 800ca72:	b29b      	uxth	r3, r3
      space -= oversize_used;
 800ca74:	b2bf      	uxth	r7, r7
      oversize -= oversize_used;
 800ca76:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800ca7a:	b153      	cbz	r3, 800ca92 <tcp_write+0x172>
 800ca7c:	9b04      	ldr	r3, [sp, #16]
 800ca7e:	42ab      	cmp	r3, r5
 800ca80:	f000 816b 	beq.w	800cd5a <tcp_write+0x43a>
 800ca84:	4b58      	ldr	r3, [pc, #352]	; (800cbe8 <tcp_write+0x2c8>)
 800ca86:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ca8a:	4960      	ldr	r1, [pc, #384]	; (800cc0c <tcp_write+0x2ec>)
 800ca8c:	4858      	ldr	r0, [pc, #352]	; (800cbf0 <tcp_write+0x2d0>)
 800ca8e:	f001 fc7d 	bl	800e38c <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800ca92:	9b04      	ldr	r3, [sp, #16]
 800ca94:	429d      	cmp	r5, r3
 800ca96:	f080 8160 	bcs.w	800cd5a <tcp_write+0x43a>
 800ca9a:	2f00      	cmp	r7, #0
 800ca9c:	f000 8155 	beq.w	800cd4a <tcp_write+0x42a>
 800caa0:	f8b8 9008 	ldrh.w	r9, [r8, #8]
 800caa4:	f1b9 0f00 	cmp.w	r9, #0
 800caa8:	f000 8150 	beq.w	800cd4c <tcp_write+0x42c>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800caac:	eba3 0905 	sub.w	r9, r3, r5
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800cab0:	9b08      	ldr	r3, [sp, #32]
      u16_t seglen = LWIP_MIN(space, len - pos);
 800cab2:	45b9      	cmp	r9, r7
 800cab4:	bfa8      	it	ge
 800cab6:	46b9      	movge	r9, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800cab8:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 800caba:	fa1f f689 	uxth.w	r6, r9
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800cabe:	d52d      	bpl.n	800cb1c <tcp_write+0x1fc>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800cac0:	2301      	movs	r3, #1
 800cac2:	463a      	mov	r2, r7
 800cac4:	4631      	mov	r1, r6
 800cac6:	2000      	movs	r0, #0
 800cac8:	9302      	str	r3, [sp, #8]
 800caca:	9b08      	ldr	r3, [sp, #32]
 800cacc:	e9cd 4300 	strd	r4, r3, [sp]
 800cad0:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 800cad4:	f7ff fdb8 	bl	800c648 <tcp_pbuf_prealloc>
 800cad8:	4683      	mov	fp, r0
 800cada:	2800      	cmp	r0, #0
 800cadc:	f000 81ac 	beq.w	800ce38 <tcp_write+0x518>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800cae0:	9b07      	ldr	r3, [sp, #28]
 800cae2:	4632      	mov	r2, r6
 800cae4:	6840      	ldr	r0, [r0, #4]
 800cae6:	1959      	adds	r1, r3, r5
 800cae8:	f001 fc3a 	bl	800e360 <memcpy>
        queuelen += pbuf_clen(concat_p);
 800caec:	4658      	mov	r0, fp
          queuelen += pbuf_clen(concat_p);
 800caee:	f7fd fbd7 	bl	800a2a0 <pbuf_clen>
 800caf2:	9b05      	ldr	r3, [sp, #20]
  u16_t extendlen = 0;
 800caf4:	f04f 0900 	mov.w	r9, #0
          queuelen += pbuf_clen(concat_p);
 800caf8:	4403      	add	r3, r0
 800cafa:	b29b      	uxth	r3, r3
 800cafc:	9305      	str	r3, [sp, #20]
      pos += seglen;
 800cafe:	19af      	adds	r7, r5, r6
 800cb00:	46da      	mov	sl, fp
 800cb02:	4646      	mov	r6, r8
 800cb04:	b2bf      	uxth	r7, r7
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800cb06:	9b08      	ldr	r3, [sp, #32]
  struct pbuf *concat_p = NULL;
 800cb08:	f04f 0b00 	mov.w	fp, #0
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800cb0c:	f003 0301 	and.w	r3, r3, #1
  struct pbuf *concat_p = NULL;
 800cb10:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800cb14:	930a      	str	r3, [sp, #40]	; 0x28
 800cb16:	e0e7      	b.n	800cce8 <tcp_write+0x3c8>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800cb18:	462e      	mov	r6, r5
 800cb1a:	e7ba      	b.n	800ca92 <tcp_write+0x172>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800cb1c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800cb20:	465a      	mov	r2, fp
 800cb22:	f8db b000 	ldr.w	fp, [fp]
 800cb26:	f1bb 0f00 	cmp.w	fp, #0
 800cb2a:	d1f9      	bne.n	800cb20 <tcp_write+0x200>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800cb2c:	7b13      	ldrb	r3, [r2, #12]
 800cb2e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 800cb32:	d10f      	bne.n	800cb54 <tcp_write+0x234>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800cb34:	8951      	ldrh	r1, [r2, #10]
 800cb36:	6853      	ldr	r3, [r2, #4]
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800cb38:	9a07      	ldr	r2, [sp, #28]
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800cb3a:	440b      	add	r3, r1
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	d109      	bne.n	800cb54 <tcp_write+0x234>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800cb40:	b135      	cbz	r5, 800cb50 <tcp_write+0x230>
 800cb42:	4b29      	ldr	r3, [pc, #164]	; (800cbe8 <tcp_write+0x2c8>)
 800cb44:	f240 2231 	movw	r2, #561	; 0x231
 800cb48:	4931      	ldr	r1, [pc, #196]	; (800cc10 <tcp_write+0x2f0>)
 800cb4a:	4829      	ldr	r0, [pc, #164]	; (800cbf0 <tcp_write+0x2d0>)
 800cb4c:	f001 fc1e 	bl	800e38c <iprintf>
          extendlen = seglen;
 800cb50:	46b1      	mov	r9, r6
 800cb52:	e7d4      	b.n	800cafe <tcp_write+0x1de>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800cb54:	2201      	movs	r2, #1
 800cb56:	4631      	mov	r1, r6
 800cb58:	2000      	movs	r0, #0
 800cb5a:	f7fd facd 	bl	800a0f8 <pbuf_alloc>
 800cb5e:	4683      	mov	fp, r0
 800cb60:	2800      	cmp	r0, #0
 800cb62:	f000 8169 	beq.w	800ce38 <tcp_write+0x518>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800cb66:	9b07      	ldr	r3, [sp, #28]
 800cb68:	442b      	add	r3, r5
 800cb6a:	6043      	str	r3, [r0, #4]
 800cb6c:	e7bf      	b.n	800caee <tcp_write+0x1ce>
    u16_t left = len - pos;
 800cb6e:	9b04      	ldr	r3, [sp, #16]
    u16_t seglen = LWIP_MIN(left, max_len);
 800cb70:	9a06      	ldr	r2, [sp, #24]
    u16_t left = len - pos;
 800cb72:	1bdb      	subs	r3, r3, r7
    u16_t seglen = LWIP_MIN(left, max_len);
 800cb74:	b29b      	uxth	r3, r3
 800cb76:	4293      	cmp	r3, r2
 800cb78:	bf28      	it	cs
 800cb7a:	4613      	movcs	r3, r2
 800cb7c:	b29b      	uxth	r3, r3
 800cb7e:	ee08 3a10 	vmov	s16, r3
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800cb82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d047      	beq.n	800cc18 <tcp_write+0x2f8>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800cb88:	fabb f38b 	clz	r3, fp
 800cb8c:	ee18 1a10 	vmov	r1, s16
 800cb90:	2036      	movs	r0, #54	; 0x36
 800cb92:	095b      	lsrs	r3, r3, #5
 800cb94:	9302      	str	r3, [sp, #8]
 800cb96:	9b08      	ldr	r3, [sp, #32]
 800cb98:	e9cd 4300 	strd	r4, r3, [sp]
 800cb9c:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 800cba0:	f7ff fd52 	bl	800c648 <tcp_pbuf_prealloc>
 800cba4:	4606      	mov	r6, r0
 800cba6:	2800      	cmp	r0, #0
 800cba8:	d057      	beq.n	800cc5a <tcp_write+0x33a>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800cbaa:	8943      	ldrh	r3, [r0, #10]
 800cbac:	ee18 2a10 	vmov	r2, s16
 800cbb0:	4293      	cmp	r3, r2
 800cbb2:	d206      	bcs.n	800cbc2 <tcp_write+0x2a2>
 800cbb4:	4b0c      	ldr	r3, [pc, #48]	; (800cbe8 <tcp_write+0x2c8>)
 800cbb6:	f240 2266 	movw	r2, #614	; 0x266
 800cbba:	4916      	ldr	r1, [pc, #88]	; (800cc14 <tcp_write+0x2f4>)
 800cbbc:	480c      	ldr	r0, [pc, #48]	; (800cbf0 <tcp_write+0x2d0>)
 800cbbe:	f001 fbe5 	bl	800e38c <iprintf>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800cbc2:	9b07      	ldr	r3, [sp, #28]
 800cbc4:	ee18 2a10 	vmov	r2, s16
 800cbc8:	6870      	ldr	r0, [r6, #4]
 800cbca:	19d9      	adds	r1, r3, r7
 800cbcc:	f001 fbc8 	bl	800e360 <memcpy>
    queuelen += pbuf_clen(p);
 800cbd0:	4630      	mov	r0, r6
 800cbd2:	f7fd fb65 	bl	800a2a0 <pbuf_clen>
 800cbd6:	9b05      	ldr	r3, [sp, #20]
 800cbd8:	4403      	add	r3, r0
 800cbda:	b29b      	uxth	r3, r3
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800cbdc:	2b08      	cmp	r3, #8
    queuelen += pbuf_clen(p);
 800cbde:	9305      	str	r3, [sp, #20]
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800cbe0:	d964      	bls.n	800ccac <tcp_write+0x38c>
      pbuf_free(p);
 800cbe2:	4630      	mov	r0, r6
 800cbe4:	e037      	b.n	800cc56 <tcp_write+0x336>
 800cbe6:	bf00      	nop
 800cbe8:	08015c06 	.word	0x08015c06
 800cbec:	08015dc0 	.word	0x08015dc0
 800cbf0:	0801342c 	.word	0x0801342c
 800cbf4:	08015dd7 	.word	0x08015dd7
 800cbf8:	08015e08 	.word	0x08015e08
 800cbfc:	08015ef2 	.word	0x08015ef2
 800cc00:	08015e42 	.word	0x08015e42
 800cc04:	08015e74 	.word	0x08015e74
 800cc08:	08015e8b 	.word	0x08015e8b
 800cc0c:	08015eab 	.word	0x08015eab
 800cc10:	08015ec9 	.word	0x08015ec9
 800cc14:	08015f21 	.word	0x08015f21
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800cc18:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800cc1c:	b133      	cbz	r3, 800cc2c <tcp_write+0x30c>
 800cc1e:	4b89      	ldr	r3, [pc, #548]	; (800ce44 <tcp_write+0x524>)
 800cc20:	f240 2271 	movw	r2, #625	; 0x271
 800cc24:	4988      	ldr	r1, [pc, #544]	; (800ce48 <tcp_write+0x528>)
 800cc26:	4889      	ldr	r0, [pc, #548]	; (800ce4c <tcp_write+0x52c>)
 800cc28:	f001 fbb0 	bl	800e38c <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800cc2c:	2201      	movs	r2, #1
 800cc2e:	ee18 1a10 	vmov	r1, s16
 800cc32:	2036      	movs	r0, #54	; 0x36
 800cc34:	f7fd fa60 	bl	800a0f8 <pbuf_alloc>
 800cc38:	b178      	cbz	r0, 800cc5a <tcp_write+0x33a>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800cc3a:	9a07      	ldr	r2, [sp, #28]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800cc3c:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800cc3e:	900b      	str	r0, [sp, #44]	; 0x2c
 800cc40:	443a      	add	r2, r7
 800cc42:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800cc44:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cc48:	2036      	movs	r0, #54	; 0x36
 800cc4a:	f7fd fa55 	bl	800a0f8 <pbuf_alloc>
 800cc4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc50:	4606      	mov	r6, r0
 800cc52:	bb38      	cbnz	r0, 800cca4 <tcp_write+0x384>
        pbuf_free(p2);
 800cc54:	4618      	mov	r0, r3
      pbuf_free(p);
 800cc56:	f7fd f9e7 	bl	800a028 <pbuf_free>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cc5a:	8b63      	ldrh	r3, [r4, #26]
 800cc5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc60:	8363      	strh	r3, [r4, #26]
  if (concat_p != NULL) {
 800cc62:	f1ba 0f00 	cmp.w	sl, #0
 800cc66:	d002      	beq.n	800cc6e <tcp_write+0x34e>
    pbuf_free(concat_p);
 800cc68:	4650      	mov	r0, sl
 800cc6a:	f7fd f9dd 	bl	800a028 <pbuf_free>
  if (queue != NULL) {
 800cc6e:	f1bb 0f00 	cmp.w	fp, #0
 800cc72:	d002      	beq.n	800cc7a <tcp_write+0x35a>
    tcp_segs_free(queue);
 800cc74:	4658      	mov	r0, fp
 800cc76:	f7fd fe1b 	bl	800a8b0 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800cc7a:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	f43f ae8d 	beq.w	800c99e <tcp_write+0x7e>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800cc84:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	f47f ae89 	bne.w	800c99e <tcp_write+0x7e>
 800cc8c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	f47f ae85 	bne.w	800c99e <tcp_write+0x7e>
 800cc94:	4b6b      	ldr	r3, [pc, #428]	; (800ce44 <tcp_write+0x524>)
 800cc96:	f240 3227 	movw	r2, #807	; 0x327
 800cc9a:	496d      	ldr	r1, [pc, #436]	; (800ce50 <tcp_write+0x530>)
 800cc9c:	486b      	ldr	r0, [pc, #428]	; (800ce4c <tcp_write+0x52c>)
 800cc9e:	f001 fb75 	bl	800e38c <iprintf>
 800cca2:	e67c      	b.n	800c99e <tcp_write+0x7e>
      pbuf_cat(p/*header*/, p2/*data*/);
 800cca4:	4619      	mov	r1, r3
 800cca6:	f7fd fb1f 	bl	800a2e8 <pbuf_cat>
 800ccaa:	e791      	b.n	800cbd0 <tcp_write+0x2b0>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800ccac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800ccae:	2200      	movs	r2, #0
 800ccb0:	4631      	mov	r1, r6
 800ccb2:	4620      	mov	r0, r4
 800ccb4:	443b      	add	r3, r7
 800ccb6:	9200      	str	r2, [sp, #0]
 800ccb8:	f7ff fd12 	bl	800c6e0 <tcp_create_segment>
 800ccbc:	4606      	mov	r6, r0
 800ccbe:	2800      	cmp	r0, #0
 800ccc0:	d0cb      	beq.n	800cc5a <tcp_write+0x33a>
    if (queue == NULL) {
 800ccc2:	f1bb 0f00 	cmp.w	fp, #0
 800ccc6:	d03e      	beq.n	800cd46 <tcp_write+0x426>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800ccc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccca:	b933      	cbnz	r3, 800ccda <tcp_write+0x3ba>
 800cccc:	4b5d      	ldr	r3, [pc, #372]	; (800ce44 <tcp_write+0x524>)
 800ccce:	f240 22ab 	movw	r2, #683	; 0x2ab
 800ccd2:	4960      	ldr	r1, [pc, #384]	; (800ce54 <tcp_write+0x534>)
 800ccd4:	485d      	ldr	r0, [pc, #372]	; (800ce4c <tcp_write+0x52c>)
 800ccd6:	f001 fb59 	bl	800e38c <iprintf>
      prev_seg->next = seg;
 800ccda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccdc:	601e      	str	r6, [r3, #0]
    pos += seglen;
 800ccde:	ee18 3a10 	vmov	r3, s16
 800cce2:	9609      	str	r6, [sp, #36]	; 0x24
 800cce4:	441f      	add	r7, r3
 800cce6:	b2bf      	uxth	r7, r7
  while (pos < len) {
 800cce8:	9b04      	ldr	r3, [sp, #16]
 800ccea:	429f      	cmp	r7, r3
 800ccec:	f4ff af3f 	bcc.w	800cb6e <tcp_write+0x24e>
 800ccf0:	4657      	mov	r7, sl
 800ccf2:	46da      	mov	sl, fp
  if (oversize_used > 0) {
 800ccf4:	b14d      	cbz	r5, 800cd0a <tcp_write+0x3ea>
    for (p = last_unsent->p; p; p = p->next) {
 800ccf6:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800ccfa:	f1bb 0f00 	cmp.w	fp, #0
 800ccfe:	d12f      	bne.n	800cd60 <tcp_write+0x440>
    last_unsent->len += oversize_used;
 800cd00:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800cd04:	441d      	add	r5, r3
 800cd06:	f8a8 5008 	strh.w	r5, [r8, #8]
  pcb->unsent_oversize = oversize;
 800cd0a:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800cd0e:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if (concat_p != NULL) {
 800cd12:	2f00      	cmp	r7, #0
 800cd14:	d03d      	beq.n	800cd92 <tcp_write+0x472>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800cd16:	f1b8 0f00 	cmp.w	r8, #0
 800cd1a:	d106      	bne.n	800cd2a <tcp_write+0x40a>
 800cd1c:	4b49      	ldr	r3, [pc, #292]	; (800ce44 <tcp_write+0x524>)
 800cd1e:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800cd22:	494d      	ldr	r1, [pc, #308]	; (800ce58 <tcp_write+0x538>)
 800cd24:	4849      	ldr	r0, [pc, #292]	; (800ce4c <tcp_write+0x52c>)
 800cd26:	f001 fb31 	bl	800e38c <iprintf>
    pbuf_cat(last_unsent->p, concat_p);
 800cd2a:	4639      	mov	r1, r7
 800cd2c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cd30:	f7fd fada 	bl	800a2e8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800cd34:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800cd38:	893a      	ldrh	r2, [r7, #8]
 800cd3a:	4413      	add	r3, r2
 800cd3c:	f8a8 3008 	strh.w	r3, [r8, #8]
    last_unsent->next = queue;
 800cd40:	f8c8 a000 	str.w	sl, [r8]
 800cd44:	e04d      	b.n	800cde2 <tcp_write+0x4c2>
 800cd46:	4683      	mov	fp, r0
 800cd48:	e7c9      	b.n	800ccde <tcp_write+0x3be>
  u16_t extendlen = 0;
 800cd4a:	46b9      	mov	r9, r7
 800cd4c:	462f      	mov	r7, r5
 800cd4e:	e6da      	b.n	800cb06 <tcp_write+0x1e6>
 800cd50:	46b9      	mov	r9, r7
  u16_t oversize_used = 0;
 800cd52:	463d      	mov	r5, r7
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800cd54:	46b8      	mov	r8, r7
  struct pbuf *concat_p = NULL;
 800cd56:	46ba      	mov	sl, r7
 800cd58:	e6d5      	b.n	800cb06 <tcp_write+0x1e6>
 800cd5a:	2700      	movs	r7, #0
  u16_t extendlen = 0;
 800cd5c:	46b9      	mov	r9, r7
 800cd5e:	e7c9      	b.n	800ccf4 <tcp_write+0x3d4>
      p->tot_len += oversize_used;
 800cd60:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 800cd64:	442b      	add	r3, r5
 800cd66:	f8ab 3008 	strh.w	r3, [fp, #8]
      if (p->next == NULL) {
 800cd6a:	f8db 3000 	ldr.w	r3, [fp]
 800cd6e:	b96b      	cbnz	r3, 800cd8c <tcp_write+0x46c>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800cd70:	f8db 3004 	ldr.w	r3, [fp, #4]
 800cd74:	462a      	mov	r2, r5
 800cd76:	f8bb 000a 	ldrh.w	r0, [fp, #10]
 800cd7a:	9907      	ldr	r1, [sp, #28]
 800cd7c:	4418      	add	r0, r3
 800cd7e:	f001 faef 	bl	800e360 <memcpy>
        p->len += oversize_used;
 800cd82:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 800cd86:	442b      	add	r3, r5
 800cd88:	f8ab 300a 	strh.w	r3, [fp, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800cd8c:	f8db b000 	ldr.w	fp, [fp]
 800cd90:	e7b3      	b.n	800ccfa <tcp_write+0x3da>
  } else if (extendlen > 0) {
 800cd92:	f1b9 0f00 	cmp.w	r9, #0
 800cd96:	d01f      	beq.n	800cdd8 <tcp_write+0x4b8>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800cd98:	f1b8 0f00 	cmp.w	r8, #0
 800cd9c:	d002      	beq.n	800cda4 <tcp_write+0x484>
 800cd9e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cda2:	b933      	cbnz	r3, 800cdb2 <tcp_write+0x492>
 800cda4:	4b27      	ldr	r3, [pc, #156]	; (800ce44 <tcp_write+0x524>)
 800cda6:	f240 22e6 	movw	r2, #742	; 0x2e6
 800cdaa:	492c      	ldr	r1, [pc, #176]	; (800ce5c <tcp_write+0x53c>)
 800cdac:	4827      	ldr	r0, [pc, #156]	; (800ce4c <tcp_write+0x52c>)
 800cdae:	f001 faed 	bl	800e38c <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800cdb2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cdb6:	891a      	ldrh	r2, [r3, #8]
 800cdb8:	6819      	ldr	r1, [r3, #0]
 800cdba:	444a      	add	r2, r9
 800cdbc:	b292      	uxth	r2, r2
      p->tot_len += extendlen;
 800cdbe:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800cdc0:	b941      	cbnz	r1, 800cdd4 <tcp_write+0x4b4>
    p->len += extendlen;
 800cdc2:	895a      	ldrh	r2, [r3, #10]
 800cdc4:	444a      	add	r2, r9
 800cdc6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800cdc8:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800cdcc:	4499      	add	r9, r3
 800cdce:	f8a8 9008 	strh.w	r9, [r8, #8]
 800cdd2:	e7b5      	b.n	800cd40 <tcp_write+0x420>
      p->tot_len += extendlen;
 800cdd4:	460b      	mov	r3, r1
 800cdd6:	e7ee      	b.n	800cdb6 <tcp_write+0x496>
  if (last_unsent == NULL) {
 800cdd8:	f1b8 0f00 	cmp.w	r8, #0
 800cddc:	d1b0      	bne.n	800cd40 <tcp_write+0x420>
    pcb->unsent = queue;
 800cdde:	f8c4 a06c 	str.w	sl, [r4, #108]	; 0x6c
  pcb->snd_lbb += len;
 800cde2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800cde4:	9a04      	ldr	r2, [sp, #16]
 800cde6:	4413      	add	r3, r2
  pcb->snd_buf -= len;
 800cde8:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
  pcb->snd_lbb += len;
 800cdec:	65e3      	str	r3, [r4, #92]	; 0x5c
  pcb->snd_buf -= len;
 800cdee:	9b04      	ldr	r3, [sp, #16]
 800cdf0:	1ad2      	subs	r2, r2, r3
  pcb->snd_queuelen = queuelen;
 800cdf2:	9b05      	ldr	r3, [sp, #20]
  pcb->snd_buf -= len;
 800cdf4:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800cdf8:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800cdfc:	b153      	cbz	r3, 800ce14 <tcp_write+0x4f4>
    LWIP_ASSERT("tcp_write: valid queue length",
 800cdfe:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ce00:	b943      	cbnz	r3, 800ce14 <tcp_write+0x4f4>
 800ce02:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ce04:	b933      	cbnz	r3, 800ce14 <tcp_write+0x4f4>
 800ce06:	4b0f      	ldr	r3, [pc, #60]	; (800ce44 <tcp_write+0x524>)
 800ce08:	f240 3212 	movw	r2, #786	; 0x312
 800ce0c:	4910      	ldr	r1, [pc, #64]	; (800ce50 <tcp_write+0x530>)
 800ce0e:	480f      	ldr	r0, [pc, #60]	; (800ce4c <tcp_write+0x52c>)
 800ce10:	f001 fabc 	bl	800e38c <iprintf>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800ce14:	b176      	cbz	r6, 800ce34 <tcp_write+0x514>
 800ce16:	68f0      	ldr	r0, [r6, #12]
 800ce18:	2800      	cmp	r0, #0
 800ce1a:	f43f ad97 	beq.w	800c94c <tcp_write+0x2c>
 800ce1e:	9b08      	ldr	r3, [sp, #32]
 800ce20:	f013 0402 	ands.w	r4, r3, #2
 800ce24:	d106      	bne.n	800ce34 <tcp_write+0x514>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800ce26:	8985      	ldrh	r5, [r0, #12]
 800ce28:	2008      	movs	r0, #8
 800ce2a:	f7fc fb97 	bl	800955c <lwip_htons>
 800ce2e:	68f3      	ldr	r3, [r6, #12]
 800ce30:	4328      	orrs	r0, r5
 800ce32:	8198      	strh	r0, [r3, #12]
  return ERR_OK;
 800ce34:	2000      	movs	r0, #0
 800ce36:	e589      	b.n	800c94c <tcp_write+0x2c>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800ce38:	f04f 0b00 	mov.w	fp, #0
 800ce3c:	e70d      	b.n	800cc5a <tcp_write+0x33a>
    return ERR_CONN;
 800ce3e:	f06f 000a 	mvn.w	r0, #10
 800ce42:	e583      	b.n	800c94c <tcp_write+0x2c>
 800ce44:	08015c06 	.word	0x08015c06
 800ce48:	08015f5f 	.word	0x08015f5f
 800ce4c:	0801342c 	.word	0x0801342c
 800ce50:	08015feb 	.word	0x08015feb
 800ce54:	08015f6d 	.word	0x08015f6d
 800ce58:	08015f7e 	.word	0x08015f7e
 800ce5c:	08015fb6 	.word	0x08015fb6

0800ce60 <tcp_split_unsent_seg>:
{
 800ce60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce64:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800ce66:	4606      	mov	r6, r0
 800ce68:	b930      	cbnz	r0, 800ce78 <tcp_split_unsent_seg+0x18>
 800ce6a:	4b5d      	ldr	r3, [pc, #372]	; (800cfe0 <tcp_split_unsent_seg+0x180>)
 800ce6c:	f240 324b 	movw	r2, #843	; 0x34b
 800ce70:	495c      	ldr	r1, [pc, #368]	; (800cfe4 <tcp_split_unsent_seg+0x184>)
 800ce72:	485d      	ldr	r0, [pc, #372]	; (800cfe8 <tcp_split_unsent_seg+0x188>)
 800ce74:	f001 fa8a 	bl	800e38c <iprintf>
  useg = pcb->unsent;
 800ce78:	6ef4      	ldr	r4, [r6, #108]	; 0x6c
  if (useg == NULL) {
 800ce7a:	b914      	cbnz	r4, 800ce82 <tcp_split_unsent_seg+0x22>
  return ERR_MEM;
 800ce7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce80:	e009      	b.n	800ce96 <tcp_split_unsent_seg+0x36>
  if (split == 0) {
 800ce82:	b95d      	cbnz	r5, 800ce9c <tcp_split_unsent_seg+0x3c>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800ce84:	4b56      	ldr	r3, [pc, #344]	; (800cfe0 <tcp_split_unsent_seg+0x180>)
 800ce86:	f240 3253 	movw	r2, #851	; 0x353
 800ce8a:	4958      	ldr	r1, [pc, #352]	; (800cfec <tcp_split_unsent_seg+0x18c>)
 800ce8c:	4856      	ldr	r0, [pc, #344]	; (800cfe8 <tcp_split_unsent_seg+0x188>)
 800ce8e:	f001 fa7d 	bl	800e38c <iprintf>
    return ERR_VAL;
 800ce92:	f06f 0005 	mvn.w	r0, #5
}
 800ce96:	b003      	add	sp, #12
 800ce98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (useg->len <= split) {
 800ce9c:	8923      	ldrh	r3, [r4, #8]
 800ce9e:	42ab      	cmp	r3, r5
 800cea0:	d801      	bhi.n	800cea6 <tcp_split_unsent_seg+0x46>
    return ERR_OK;
 800cea2:	2000      	movs	r0, #0
 800cea4:	e7f7      	b.n	800ce96 <tcp_split_unsent_seg+0x36>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800cea6:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 800cea8:	42ab      	cmp	r3, r5
 800ceaa:	d206      	bcs.n	800ceba <tcp_split_unsent_seg+0x5a>
 800ceac:	4b4c      	ldr	r3, [pc, #304]	; (800cfe0 <tcp_split_unsent_seg+0x180>)
 800ceae:	f240 325b 	movw	r2, #859	; 0x35b
 800ceb2:	494f      	ldr	r1, [pc, #316]	; (800cff0 <tcp_split_unsent_seg+0x190>)
 800ceb4:	484c      	ldr	r0, [pc, #304]	; (800cfe8 <tcp_split_unsent_seg+0x188>)
 800ceb6:	f001 fa69 	bl	800e38c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ceba:	8923      	ldrh	r3, [r4, #8]
 800cebc:	b933      	cbnz	r3, 800cecc <tcp_split_unsent_seg+0x6c>
 800cebe:	4b48      	ldr	r3, [pc, #288]	; (800cfe0 <tcp_split_unsent_seg+0x180>)
 800cec0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800cec4:	494b      	ldr	r1, [pc, #300]	; (800cff4 <tcp_split_unsent_seg+0x194>)
 800cec6:	4848      	ldr	r0, [pc, #288]	; (800cfe8 <tcp_split_unsent_seg+0x188>)
 800cec8:	f001 fa60 	bl	800e38c <iprintf>
  optflags = useg->flags;
 800cecc:	f894 b00a 	ldrb.w	fp, [r4, #10]
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800ced0:	f44f 7220 	mov.w	r2, #640	; 0x280
  remainder = useg->len - split;
 800ced4:	f8b4 a008 	ldrh.w	sl, [r4, #8]
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800ced8:	2036      	movs	r0, #54	; 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ceda:	ea4f 078b 	mov.w	r7, fp, lsl #2
  remainder = useg->len - split;
 800cede:	ebaa 0105 	sub.w	r1, sl, r5
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800cee2:	f007 0704 	and.w	r7, r7, #4
  remainder = useg->len - split;
 800cee6:	fa1f f881 	uxth.w	r8, r1
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800ceea:	fa17 f181 	uxtah	r1, r7, r1
 800ceee:	b289      	uxth	r1, r1
 800cef0:	f7fd f902 	bl	800a0f8 <pbuf_alloc>
  if (p == NULL) {
 800cef4:	4681      	mov	r9, r0
 800cef6:	2800      	cmp	r0, #0
 800cef8:	d0c0      	beq.n	800ce7c <tcp_split_unsent_seg+0x1c>
  offset = useg->p->tot_len - useg->len + split;
 800cefa:	6860      	ldr	r0, [r4, #4]
 800cefc:	8922      	ldrh	r2, [r4, #8]
 800cefe:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800cf00:	f8d9 1004 	ldr.w	r1, [r9, #4]
  offset = useg->p->tot_len - useg->len + split;
 800cf04:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800cf06:	4642      	mov	r2, r8
 800cf08:	4439      	add	r1, r7
  offset = useg->p->tot_len - useg->len + split;
 800cf0a:	442b      	add	r3, r5
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800cf0c:	b29b      	uxth	r3, r3
 800cf0e:	f7fd fab1 	bl	800a474 <pbuf_copy_partial>
 800cf12:	4540      	cmp	r0, r8
 800cf14:	d160      	bne.n	800cfd8 <tcp_split_unsent_seg+0x178>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800cf16:	68e3      	ldr	r3, [r4, #12]
 800cf18:	8998      	ldrh	r0, [r3, #12]
 800cf1a:	f7fc fb1f 	bl	800955c <lwip_htons>
  if (split_flags & TCP_PSH) {
 800cf1e:	f010 0808 	ands.w	r8, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800cf22:	b2c7      	uxtb	r7, r0
    remainder_flags |= TCP_PSH;
 800cf24:	bf16      	itet	ne
 800cf26:	f04f 0808 	movne.w	r8, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800cf2a:	f007 073f 	andeq.w	r7, r7, #63	; 0x3f
    split_flags &= ~TCP_PSH;
 800cf2e:	f007 0737 	andne.w	r7, r7, #55	; 0x37
  if (split_flags & TCP_FIN) {
 800cf32:	07fb      	lsls	r3, r7, #31
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800cf34:	68e3      	ldr	r3, [r4, #12]
    remainder_flags |= TCP_FIN;
 800cf36:	bf48      	it	mi
 800cf38:	f048 0801 	orrmi.w	r8, r8, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800cf3c:	6858      	ldr	r0, [r3, #4]
    split_flags &= ~TCP_FIN;
 800cf3e:	bf48      	it	mi
 800cf40:	f007 07fe 	andmi.w	r7, r7, #254	; 0xfe
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800cf44:	f7fc fb0d 	bl	8009562 <lwip_htonl>
 800cf48:	4642      	mov	r2, r8
 800cf4a:	182b      	adds	r3, r5, r0
 800cf4c:	4649      	mov	r1, r9
 800cf4e:	4630      	mov	r0, r6
 800cf50:	f8cd b000 	str.w	fp, [sp]
 800cf54:	f7ff fbc4 	bl	800c6e0 <tcp_create_segment>
  if (seg == NULL) {
 800cf58:	4680      	mov	r8, r0
 800cf5a:	2800      	cmp	r0, #0
 800cf5c:	d03c      	beq.n	800cfd8 <tcp_split_unsent_seg+0x178>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800cf5e:	6860      	ldr	r0, [r4, #4]
 800cf60:	eba5 050a 	sub.w	r5, r5, sl
 800cf64:	f7fd f99c 	bl	800a2a0 <pbuf_clen>
 800cf68:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800cf6c:	fa1f f985 	uxth.w	r9, r5
 800cf70:	1a18      	subs	r0, r3, r0
 800cf72:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800cf76:	6860      	ldr	r0, [r4, #4]
 800cf78:	8901      	ldrh	r1, [r0, #8]
 800cf7a:	fa11 f185 	uxtah	r1, r1, r5
 800cf7e:	b289      	uxth	r1, r1
 800cf80:	f7fd f936 	bl	800a1f0 <pbuf_realloc>
  useg->len -= remainder;
 800cf84:	8923      	ldrh	r3, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800cf86:	4638      	mov	r0, r7
  useg->len -= remainder;
 800cf88:	4499      	add	r9, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800cf8a:	68e3      	ldr	r3, [r4, #12]
  useg->len -= remainder;
 800cf8c:	f8a4 9008 	strh.w	r9, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800cf90:	899d      	ldrh	r5, [r3, #12]
 800cf92:	f7fc fae3 	bl	800955c <lwip_htons>
 800cf96:	68e3      	ldr	r3, [r4, #12]
 800cf98:	4328      	orrs	r0, r5
 800cf9a:	8198      	strh	r0, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800cf9c:	6860      	ldr	r0, [r4, #4]
 800cf9e:	f7fd f97f 	bl	800a2a0 <pbuf_clen>
 800cfa2:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800cfa6:	4418      	add	r0, r3
 800cfa8:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800cfac:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cfb0:	f7fd f976 	bl	800a2a0 <pbuf_clen>
 800cfb4:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800cfb8:	4418      	add	r0, r3
  seg->next = useg->next;
 800cfba:	6823      	ldr	r3, [r4, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800cfbc:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
  seg->next = useg->next;
 800cfc0:	f8c8 3000 	str.w	r3, [r8]
  useg->next = seg;
 800cfc4:	f8c4 8000 	str.w	r8, [r4]
  if (seg->next == NULL) {
 800cfc8:	f8d8 0000 	ldr.w	r0, [r8]
 800cfcc:	2800      	cmp	r0, #0
 800cfce:	f47f af68 	bne.w	800cea2 <tcp_split_unsent_seg+0x42>
    pcb->unsent_oversize = 0;
 800cfd2:	f8a6 0068 	strh.w	r0, [r6, #104]	; 0x68
 800cfd6:	e75e      	b.n	800ce96 <tcp_split_unsent_seg+0x36>
    pbuf_free(p);
 800cfd8:	4648      	mov	r0, r9
 800cfda:	f7fd f825 	bl	800a028 <pbuf_free>
 800cfde:	e74d      	b.n	800ce7c <tcp_split_unsent_seg+0x1c>
 800cfe0:	08015c06 	.word	0x08015c06
 800cfe4:	08016009 	.word	0x08016009
 800cfe8:	0801342c 	.word	0x0801342c
 800cfec:	0801602b 	.word	0x0801602b
 800cff0:	0801604d 	.word	0x0801604d
 800cff4:	0801605a 	.word	0x0801605a

0800cff8 <tcp_enqueue_flags>:
{
 800cff8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800cffc:	f011 0803 	ands.w	r8, r1, #3
{
 800d000:	4604      	mov	r4, r0
 800d002:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800d004:	d106      	bne.n	800d014 <tcp_enqueue_flags+0x1c>
 800d006:	4b3e      	ldr	r3, [pc, #248]	; (800d100 <tcp_enqueue_flags+0x108>)
 800d008:	f240 4211 	movw	r2, #1041	; 0x411
 800d00c:	493d      	ldr	r1, [pc, #244]	; (800d104 <tcp_enqueue_flags+0x10c>)
 800d00e:	483e      	ldr	r0, [pc, #248]	; (800d108 <tcp_enqueue_flags+0x110>)
 800d010:	f001 f9bc 	bl	800e38c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800d014:	b934      	cbnz	r4, 800d024 <tcp_enqueue_flags+0x2c>
 800d016:	4b3a      	ldr	r3, [pc, #232]	; (800d100 <tcp_enqueue_flags+0x108>)
 800d018:	f240 4213 	movw	r2, #1043	; 0x413
 800d01c:	493b      	ldr	r1, [pc, #236]	; (800d10c <tcp_enqueue_flags+0x114>)
 800d01e:	483a      	ldr	r0, [pc, #232]	; (800d108 <tcp_enqueue_flags+0x110>)
 800d020:	f001 f9b4 	bl	800e38c <iprintf>
  if (flags & TCP_SYN) {
 800d024:	f3c6 0740 	ubfx	r7, r6, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d028:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d02c:	2036      	movs	r0, #54	; 0x36
 800d02e:	ea4f 0987 	mov.w	r9, r7, lsl #2
 800d032:	4649      	mov	r1, r9
 800d034:	f7fd f860 	bl	800a0f8 <pbuf_alloc>
 800d038:	4605      	mov	r5, r0
 800d03a:	b940      	cbnz	r0, 800d04e <tcp_enqueue_flags+0x56>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d03c:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 800d03e:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d046:	8363      	strh	r3, [r4, #26]
}
 800d048:	b003      	add	sp, #12
 800d04a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800d04e:	8943      	ldrh	r3, [r0, #10]
 800d050:	454b      	cmp	r3, r9
 800d052:	d206      	bcs.n	800d062 <tcp_enqueue_flags+0x6a>
 800d054:	4b2a      	ldr	r3, [pc, #168]	; (800d100 <tcp_enqueue_flags+0x108>)
 800d056:	f240 4239 	movw	r2, #1081	; 0x439
 800d05a:	492d      	ldr	r1, [pc, #180]	; (800d110 <tcp_enqueue_flags+0x118>)
 800d05c:	482a      	ldr	r0, [pc, #168]	; (800d108 <tcp_enqueue_flags+0x110>)
 800d05e:	f001 f995 	bl	800e38c <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800d062:	4629      	mov	r1, r5
 800d064:	9700      	str	r7, [sp, #0]
 800d066:	4632      	mov	r2, r6
 800d068:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800d06a:	4620      	mov	r0, r4
 800d06c:	f7ff fb38 	bl	800c6e0 <tcp_create_segment>
 800d070:	4605      	mov	r5, r0
 800d072:	2800      	cmp	r0, #0
 800d074:	d0e2      	beq.n	800d03c <tcp_enqueue_flags+0x44>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800d076:	68c3      	ldr	r3, [r0, #12]
 800d078:	079a      	lsls	r2, r3, #30
 800d07a:	d006      	beq.n	800d08a <tcp_enqueue_flags+0x92>
 800d07c:	4b20      	ldr	r3, [pc, #128]	; (800d100 <tcp_enqueue_flags+0x108>)
 800d07e:	f240 4242 	movw	r2, #1090	; 0x442
 800d082:	4924      	ldr	r1, [pc, #144]	; (800d114 <tcp_enqueue_flags+0x11c>)
 800d084:	4820      	ldr	r0, [pc, #128]	; (800d108 <tcp_enqueue_flags+0x110>)
 800d086:	f001 f981 	bl	800e38c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800d08a:	892b      	ldrh	r3, [r5, #8]
 800d08c:	b133      	cbz	r3, 800d09c <tcp_enqueue_flags+0xa4>
 800d08e:	4b1c      	ldr	r3, [pc, #112]	; (800d100 <tcp_enqueue_flags+0x108>)
 800d090:	f240 4243 	movw	r2, #1091	; 0x443
 800d094:	4920      	ldr	r1, [pc, #128]	; (800d118 <tcp_enqueue_flags+0x120>)
 800d096:	481c      	ldr	r0, [pc, #112]	; (800d108 <tcp_enqueue_flags+0x110>)
 800d098:	f001 f978 	bl	800e38c <iprintf>
  if (pcb->unsent == NULL) {
 800d09c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d09e:	bb43      	cbnz	r3, 800d0f2 <tcp_enqueue_flags+0xfa>
    pcb->unsent = seg;
 800d0a0:	66e5      	str	r5, [r4, #108]	; 0x6c
  pcb->unsent_oversize = 0;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800d0a8:	f1b8 0f00 	cmp.w	r8, #0
 800d0ac:	d002      	beq.n	800d0b4 <tcp_enqueue_flags+0xbc>
    pcb->snd_lbb++;
 800d0ae:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800d0b0:	3301      	adds	r3, #1
 800d0b2:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 800d0b4:	07f3      	lsls	r3, r6, #31
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d0b6:	6868      	ldr	r0, [r5, #4]
    tcp_set_flags(pcb, TF_FIN);
 800d0b8:	bf42      	ittt	mi
 800d0ba:	8b63      	ldrhmi	r3, [r4, #26]
 800d0bc:	f043 0320 	orrmi.w	r3, r3, #32
 800d0c0:	8363      	strhmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d0c2:	f7fd f8ed 	bl	800a2a0 <pbuf_clen>
 800d0c6:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800d0ca:	4418      	add	r0, r3
 800d0cc:	b280      	uxth	r0, r0
 800d0ce:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800d0d2:	2800      	cmp	r0, #0
 800d0d4:	d0b8      	beq.n	800d048 <tcp_enqueue_flags+0x50>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800d0d6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800d0d8:	b948      	cbnz	r0, 800d0ee <tcp_enqueue_flags+0xf6>
 800d0da:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 800d0dc:	2c00      	cmp	r4, #0
 800d0de:	d1b3      	bne.n	800d048 <tcp_enqueue_flags+0x50>
 800d0e0:	4b07      	ldr	r3, [pc, #28]	; (800d100 <tcp_enqueue_flags+0x108>)
 800d0e2:	f240 4265 	movw	r2, #1125	; 0x465
 800d0e6:	490d      	ldr	r1, [pc, #52]	; (800d11c <tcp_enqueue_flags+0x124>)
 800d0e8:	4807      	ldr	r0, [pc, #28]	; (800d108 <tcp_enqueue_flags+0x110>)
 800d0ea:	f001 f94f 	bl	800e38c <iprintf>
  return ERR_OK;
 800d0ee:	2000      	movs	r0, #0
 800d0f0:	e7aa      	b.n	800d048 <tcp_enqueue_flags+0x50>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800d0f2:	461a      	mov	r2, r3
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d1fb      	bne.n	800d0f2 <tcp_enqueue_flags+0xfa>
    useg->next = seg;
 800d0fa:	6015      	str	r5, [r2, #0]
 800d0fc:	e7d1      	b.n	800d0a2 <tcp_enqueue_flags+0xaa>
 800d0fe:	bf00      	nop
 800d100:	08015c06 	.word	0x08015c06
 800d104:	08016068 	.word	0x08016068
 800d108:	0801342c 	.word	0x0801342c
 800d10c:	080160bd 	.word	0x080160bd
 800d110:	080160dc 	.word	0x080160dc
 800d114:	08016115 	.word	0x08016115
 800d118:	0801612d 	.word	0x0801612d
 800d11c:	08016157 	.word	0x08016157

0800d120 <tcp_send_fin>:
{
 800d120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800d122:	4604      	mov	r4, r0
 800d124:	b930      	cbnz	r0, 800d134 <tcp_send_fin+0x14>
 800d126:	4b13      	ldr	r3, [pc, #76]	; (800d174 <tcp_send_fin+0x54>)
 800d128:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800d12c:	4912      	ldr	r1, [pc, #72]	; (800d178 <tcp_send_fin+0x58>)
 800d12e:	4813      	ldr	r0, [pc, #76]	; (800d17c <tcp_send_fin+0x5c>)
 800d130:	f001 f92c 	bl	800e38c <iprintf>
  if (pcb->unsent != NULL) {
 800d134:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800d136:	b14d      	cbz	r5, 800d14c <tcp_send_fin+0x2c>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d138:	462f      	mov	r7, r5
 800d13a:	682d      	ldr	r5, [r5, #0]
 800d13c:	2d00      	cmp	r5, #0
 800d13e:	d1fb      	bne.n	800d138 <tcp_send_fin+0x18>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	8998      	ldrh	r0, [r3, #12]
 800d144:	f7fc fa0a 	bl	800955c <lwip_htons>
 800d148:	0743      	lsls	r3, r0, #29
 800d14a:	d005      	beq.n	800d158 <tcp_send_fin+0x38>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d14c:	4620      	mov	r0, r4
 800d14e:	2101      	movs	r1, #1
}
 800d150:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d154:	f7ff bf50 	b.w	800cff8 <tcp_enqueue_flags>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	2001      	movs	r0, #1
 800d15c:	899e      	ldrh	r6, [r3, #12]
 800d15e:	f7fc f9fd 	bl	800955c <lwip_htons>
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	4330      	orrs	r0, r6
 800d166:	8198      	strh	r0, [r3, #12]
}
 800d168:	4628      	mov	r0, r5
      tcp_set_flags(pcb, TF_FIN);
 800d16a:	8b63      	ldrh	r3, [r4, #26]
 800d16c:	f043 0320 	orr.w	r3, r3, #32
 800d170:	8363      	strh	r3, [r4, #26]
}
 800d172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d174:	08015c06 	.word	0x08015c06
 800d178:	0801617f 	.word	0x0801617f
 800d17c:	0801342c 	.word	0x0801342c

0800d180 <tcp_rexmit_rto_prepare>:
{
 800d180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d184:	4604      	mov	r4, r0
 800d186:	b930      	cbnz	r0, 800d196 <tcp_rexmit_rto_prepare+0x16>
 800d188:	4b1c      	ldr	r3, [pc, #112]	; (800d1fc <tcp_rexmit_rto_prepare+0x7c>)
 800d18a:	f240 6263 	movw	r2, #1635	; 0x663
 800d18e:	491c      	ldr	r1, [pc, #112]	; (800d200 <tcp_rexmit_rto_prepare+0x80>)
 800d190:	481c      	ldr	r0, [pc, #112]	; (800d204 <tcp_rexmit_rto_prepare+0x84>)
 800d192:	f001 f8fb 	bl	800e38c <iprintf>
  if (pcb->unacked == NULL) {
 800d196:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800d198:	b945      	cbnz	r5, 800d1ac <tcp_rexmit_rto_prepare+0x2c>
    return ERR_VAL;
 800d19a:	f06f 0005 	mvn.w	r0, #5
}
 800d19e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (tcp_output_segment_busy(seg)) {
 800d1a2:	f7ff fa3b 	bl	800c61c <tcp_output_segment_busy>
 800d1a6:	2800      	cmp	r0, #0
 800d1a8:	d1f7      	bne.n	800d19a <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d1aa:	682d      	ldr	r5, [r5, #0]
 800d1ac:	682b      	ldr	r3, [r5, #0]
    if (tcp_output_segment_busy(seg)) {
 800d1ae:	4628      	mov	r0, r5
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d1f6      	bne.n	800d1a2 <tcp_rexmit_rto_prepare+0x22>
  if (tcp_output_segment_busy(seg)) {
 800d1b4:	f7ff fa32 	bl	800c61c <tcp_output_segment_busy>
 800d1b8:	4606      	mov	r6, r0
 800d1ba:	2800      	cmp	r0, #0
 800d1bc:	d1ed      	bne.n	800d19a <tcp_rexmit_rto_prepare+0x1a>
  seg->next = pcb->unsent;
 800d1be:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d1c0:	602b      	str	r3, [r5, #0]
  pcb->unsent = pcb->unacked;
 800d1c2:	6f23      	ldr	r3, [r4, #112]	; 0x70
  pcb->unacked = NULL;
 800d1c4:	e9c4 301b 	strd	r3, r0, [r4, #108]	; 0x6c
  tcp_set_flags(pcb, TF_RTO);
 800d1c8:	8b63      	ldrh	r3, [r4, #26]
 800d1ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d1ce:	8363      	strh	r3, [r4, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d1d0:	68eb      	ldr	r3, [r5, #12]
 800d1d2:	6858      	ldr	r0, [r3, #4]
 800d1d4:	f7fc f9c5 	bl	8009562 <lwip_htonl>
 800d1d8:	68eb      	ldr	r3, [r5, #12]
 800d1da:	4607      	mov	r7, r0
 800d1dc:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800d1e0:	8998      	ldrh	r0, [r3, #12]
 800d1e2:	f7fc f9bb 	bl	800955c <lwip_htons>
 800d1e6:	f010 0303 	ands.w	r3, r0, #3
 800d1ea:	4447      	add	r7, r8
  return ERR_OK;
 800d1ec:	4630      	mov	r0, r6
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d1ee:	bf18      	it	ne
 800d1f0:	2301      	movne	r3, #1
  pcb->rttest = 0;
 800d1f2:	6366      	str	r6, [r4, #52]	; 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d1f4:	443b      	add	r3, r7
 800d1f6:	64e3      	str	r3, [r4, #76]	; 0x4c
  return ERR_OK;
 800d1f8:	e7d1      	b.n	800d19e <tcp_rexmit_rto_prepare+0x1e>
 800d1fa:	bf00      	nop
 800d1fc:	08015c06 	.word	0x08015c06
 800d200:	08016199 	.word	0x08016199
 800d204:	0801342c 	.word	0x0801342c

0800d208 <tcp_rexmit>:
{
 800d208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d20a:	4604      	mov	r4, r0
 800d20c:	b930      	cbnz	r0, 800d21c <tcp_rexmit+0x14>
 800d20e:	4b1b      	ldr	r3, [pc, #108]	; (800d27c <tcp_rexmit+0x74>)
 800d210:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800d214:	491a      	ldr	r1, [pc, #104]	; (800d280 <tcp_rexmit+0x78>)
 800d216:	481b      	ldr	r0, [pc, #108]	; (800d284 <tcp_rexmit+0x7c>)
 800d218:	f001 f8b8 	bl	800e38c <iprintf>
  if (pcb->unacked == NULL) {
 800d21c:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800d21e:	b915      	cbnz	r5, 800d226 <tcp_rexmit+0x1e>
    return ERR_VAL;
 800d220:	f06f 0005 	mvn.w	r0, #5
}
 800d224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (tcp_output_segment_busy(seg)) {
 800d226:	4628      	mov	r0, r5
 800d228:	f7ff f9f8 	bl	800c61c <tcp_output_segment_busy>
 800d22c:	2800      	cmp	r0, #0
 800d22e:	d1f7      	bne.n	800d220 <tcp_rexmit+0x18>
  pcb->unacked = seg->next;
 800d230:	682b      	ldr	r3, [r5, #0]
  cur_seg = &(pcb->unsent);
 800d232:	f104 066c 	add.w	r6, r4, #108	; 0x6c
  pcb->unacked = seg->next;
 800d236:	6723      	str	r3, [r4, #112]	; 0x70
  while (*cur_seg &&
 800d238:	6833      	ldr	r3, [r6, #0]
 800d23a:	b983      	cbnz	r3, 800d25e <tcp_rexmit+0x56>
  seg->next = *cur_seg;
 800d23c:	6833      	ldr	r3, [r6, #0]
 800d23e:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 800d240:	6035      	str	r5, [r6, #0]
  if (seg->next == NULL) {
 800d242:	682b      	ldr	r3, [r5, #0]
 800d244:	b90b      	cbnz	r3, 800d24a <tcp_rexmit+0x42>
    pcb->unsent_oversize = 0;
 800d246:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if (pcb->nrtx < 0xFF) {
 800d24a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  pcb->rttest = 0;
 800d24e:	2000      	movs	r0, #0
  if (pcb->nrtx < 0xFF) {
 800d250:	2bff      	cmp	r3, #255	; 0xff
  pcb->rttest = 0;
 800d252:	6360      	str	r0, [r4, #52]	; 0x34
    ++pcb->nrtx;
 800d254:	bf1c      	itt	ne
 800d256:	3301      	addne	r3, #1
 800d258:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  return ERR_OK;
 800d25c:	e7e2      	b.n	800d224 <tcp_rexmit+0x1c>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d25e:	68db      	ldr	r3, [r3, #12]
 800d260:	6858      	ldr	r0, [r3, #4]
 800d262:	f7fc f97e 	bl	8009562 <lwip_htonl>
 800d266:	68eb      	ldr	r3, [r5, #12]
 800d268:	4607      	mov	r7, r0
 800d26a:	6858      	ldr	r0, [r3, #4]
 800d26c:	f7fc f979 	bl	8009562 <lwip_htonl>
 800d270:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 800d272:	2800      	cmp	r0, #0
 800d274:	dae2      	bge.n	800d23c <tcp_rexmit+0x34>
    cur_seg = &((*cur_seg)->next );
 800d276:	6836      	ldr	r6, [r6, #0]
 800d278:	e7de      	b.n	800d238 <tcp_rexmit+0x30>
 800d27a:	bf00      	nop
 800d27c:	08015c06 	.word	0x08015c06
 800d280:	080161bd 	.word	0x080161bd
 800d284:	0801342c 	.word	0x0801342c

0800d288 <tcp_rexmit_fast>:
{
 800d288:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d28a:	4604      	mov	r4, r0
 800d28c:	b930      	cbnz	r0, 800d29c <tcp_rexmit_fast+0x14>
 800d28e:	4b15      	ldr	r3, [pc, #84]	; (800d2e4 <tcp_rexmit_fast+0x5c>)
 800d290:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800d294:	4914      	ldr	r1, [pc, #80]	; (800d2e8 <tcp_rexmit_fast+0x60>)
 800d296:	4815      	ldr	r0, [pc, #84]	; (800d2ec <tcp_rexmit_fast+0x64>)
 800d298:	f001 f878 	bl	800e38c <iprintf>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d29c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d29e:	b1fb      	cbz	r3, 800d2e0 <tcp_rexmit_fast+0x58>
 800d2a0:	8b63      	ldrh	r3, [r4, #26]
 800d2a2:	075b      	lsls	r3, r3, #29
 800d2a4:	d41c      	bmi.n	800d2e0 <tcp_rexmit_fast+0x58>
    if (tcp_rexmit(pcb) == ERR_OK) {
 800d2a6:	4620      	mov	r0, r4
 800d2a8:	f7ff ffae 	bl	800d208 <tcp_rexmit>
 800d2ac:	b9c0      	cbnz	r0, 800d2e0 <tcp_rexmit_fast+0x58>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d2ae:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 800d2b2:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      pcb->rtime = 0;
 800d2b6:	8620      	strh	r0, [r4, #48]	; 0x30
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d2b8:	4299      	cmp	r1, r3
 800d2ba:	bf28      	it	cs
 800d2bc:	4619      	movcs	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d2be:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800d2c0:	005d      	lsls	r5, r3, #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d2c2:	104a      	asrs	r2, r1, #1
        pcb->ssthresh = 2 * pcb->mss;
 800d2c4:	ebb5 0f51 	cmp.w	r5, r1, lsr #1
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d2c8:	442b      	add	r3, r5
        pcb->ssthresh = 2 * pcb->mss;
 800d2ca:	bf88      	it	hi
 800d2cc:	462a      	movhi	r2, r5
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d2ce:	4413      	add	r3, r2
        pcb->ssthresh = 2 * pcb->mss;
 800d2d0:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d2d4:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800d2d8:	8b63      	ldrh	r3, [r4, #26]
 800d2da:	f043 0304 	orr.w	r3, r3, #4
 800d2de:	8363      	strh	r3, [r4, #26]
}
 800d2e0:	bd38      	pop	{r3, r4, r5, pc}
 800d2e2:	bf00      	nop
 800d2e4:	08015c06 	.word	0x08015c06
 800d2e8:	080161d5 	.word	0x080161d5
 800d2ec:	0801342c 	.word	0x0801342c

0800d2f0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800d2f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d2f4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800d2f8:	4606      	mov	r6, r0
 800d2fa:	460f      	mov	r7, r1
 800d2fc:	4614      	mov	r4, r2
 800d2fe:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d302:	461d      	mov	r5, r3
{
 800d304:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d308:	b933      	cbnz	r3, 800d318 <tcp_rst+0x28>
 800d30a:	4b18      	ldr	r3, [pc, #96]	; (800d36c <tcp_rst+0x7c>)
 800d30c:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800d310:	4917      	ldr	r1, [pc, #92]	; (800d370 <tcp_rst+0x80>)
 800d312:	4818      	ldr	r0, [pc, #96]	; (800d374 <tcp_rst+0x84>)
 800d314:	f001 f83a 	bl	800e38c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800d318:	f1b8 0f00 	cmp.w	r8, #0
 800d31c:	d106      	bne.n	800d32c <tcp_rst+0x3c>
 800d31e:	4b13      	ldr	r3, [pc, #76]	; (800d36c <tcp_rst+0x7c>)
 800d320:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800d324:	4914      	ldr	r1, [pc, #80]	; (800d378 <tcp_rst+0x88>)
 800d326:	4813      	ldr	r0, [pc, #76]	; (800d374 <tcp_rst+0x84>)
 800d328:	f001 f830 	bl	800e38c <iprintf>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800d32c:	4638      	mov	r0, r7
 800d32e:	f7fc f918 	bl	8009562 <lwip_htonl>
 800d332:	2314      	movs	r3, #20
 800d334:	f646 010b 	movw	r1, #26635	; 0x680b
 800d338:	4602      	mov	r2, r0
 800d33a:	f8cd a000 	str.w	sl, [sp]
 800d33e:	4620      	mov	r0, r4
 800d340:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800d344:	464b      	mov	r3, r9
 800d346:	2100      	movs	r1, #0
 800d348:	f7ff fa3a 	bl	800c7c0 <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800d34c:	4604      	mov	r4, r0
 800d34e:	b150      	cbz	r0, 800d366 <tcp_rst+0x76>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d350:	f7ff fa9e 	bl	800c890 <tcp_output_fill_options.isra.0.constprop.0>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d354:	4643      	mov	r3, r8
 800d356:	462a      	mov	r2, r5
 800d358:	4621      	mov	r1, r4
 800d35a:	4630      	mov	r0, r6
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d35c:	b004      	add	sp, #16
 800d35e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d362:	f7ff baa5 	b.w	800c8b0 <tcp_output_control_segment>
}
 800d366:	b004      	add	sp, #16
 800d368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d36c:	08015c06 	.word	0x08015c06
 800d370:	080161f2 	.word	0x080161f2
 800d374:	0801342c 	.word	0x0801342c
 800d378:	0801620c 	.word	0x0801620c

0800d37c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d37c:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800d37e:	4604      	mov	r4, r0
 800d380:	b930      	cbnz	r0, 800d390 <tcp_send_empty_ack+0x14>
 800d382:	4b14      	ldr	r3, [pc, #80]	; (800d3d4 <tcp_send_empty_ack+0x58>)
 800d384:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800d388:	4913      	ldr	r1, [pc, #76]	; (800d3d8 <tcp_send_empty_ack+0x5c>)
 800d38a:	4814      	ldr	r0, [pc, #80]	; (800d3dc <tcp_send_empty_ack+0x60>)
 800d38c:	f000 fffe 	bl	800e38c <iprintf>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800d390:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800d392:	f7fc f8e6 	bl	8009562 <lwip_htonl>
 800d396:	2100      	movs	r1, #0
 800d398:	4602      	mov	r2, r0
 800d39a:	4620      	mov	r0, r4
 800d39c:	f7ff fa52 	bl	800c844 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800d3a0:	4605      	mov	r5, r0
 800d3a2:	b930      	cbnz	r0, 800d3b2 <tcp_send_empty_ack+0x36>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d3a4:	8b63      	ldrh	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800d3a6:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d3aa:	f043 0303 	orr.w	r3, r3, #3
 800d3ae:	8363      	strh	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 800d3b0:	bd38      	pop	{r3, r4, r5, pc}
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800d3b2:	f7ff fa6d 	bl	800c890 <tcp_output_fill_options.isra.0.constprop.0>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d3b6:	1d23      	adds	r3, r4, #4
 800d3b8:	4622      	mov	r2, r4
 800d3ba:	4629      	mov	r1, r5
 800d3bc:	4620      	mov	r0, r4
 800d3be:	f7ff fa77 	bl	800c8b0 <tcp_output_control_segment>
  if (err != ERR_OK) {
 800d3c2:	8b63      	ldrh	r3, [r4, #26]
 800d3c4:	b118      	cbz	r0, 800d3ce <tcp_send_empty_ack+0x52>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d3c6:	f043 0303 	orr.w	r3, r3, #3
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d3ca:	8363      	strh	r3, [r4, #26]
 800d3cc:	e7f0      	b.n	800d3b0 <tcp_send_empty_ack+0x34>
 800d3ce:	f023 0303 	bic.w	r3, r3, #3
 800d3d2:	e7fa      	b.n	800d3ca <tcp_send_empty_ack+0x4e>
 800d3d4:	08015c06 	.word	0x08015c06
 800d3d8:	08016227 	.word	0x08016227
 800d3dc:	0801342c 	.word	0x0801342c

0800d3e0 <tcp_output>:
{
 800d3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800d3e4:	4604      	mov	r4, r0
{
 800d3e6:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800d3e8:	b930      	cbnz	r0, 800d3f8 <tcp_output+0x18>
 800d3ea:	4b8f      	ldr	r3, [pc, #572]	; (800d628 <tcp_output+0x248>)
 800d3ec:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800d3f0:	498e      	ldr	r1, [pc, #568]	; (800d62c <tcp_output+0x24c>)
 800d3f2:	488f      	ldr	r0, [pc, #572]	; (800d630 <tcp_output+0x250>)
 800d3f4:	f000 ffca 	bl	800e38c <iprintf>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d3f8:	7d23      	ldrb	r3, [r4, #20]
 800d3fa:	2b01      	cmp	r3, #1
 800d3fc:	d106      	bne.n	800d40c <tcp_output+0x2c>
 800d3fe:	4b8a      	ldr	r3, [pc, #552]	; (800d628 <tcp_output+0x248>)
 800d400:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800d404:	498b      	ldr	r1, [pc, #556]	; (800d634 <tcp_output+0x254>)
 800d406:	488a      	ldr	r0, [pc, #552]	; (800d630 <tcp_output+0x250>)
 800d408:	f000 ffc0 	bl	800e38c <iprintf>
  if (tcp_input_pcb == pcb) {
 800d40c:	4b8a      	ldr	r3, [pc, #552]	; (800d638 <tcp_output+0x258>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	42a3      	cmp	r3, r4
 800d412:	f000 8171 	beq.w	800d6f8 <tcp_output+0x318>
  seg = pcb->unsent;
 800d416:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 800d418:	b94d      	cbnz	r5, 800d42e <tcp_output+0x4e>
    if (pcb->flags & TF_ACK_NOW) {
 800d41a:	8b63      	ldrh	r3, [r4, #26]
 800d41c:	0798      	lsls	r0, r3, #30
 800d41e:	f140 8167 	bpl.w	800d6f0 <tcp_output+0x310>
      return tcp_send_empty_ack(pcb);
 800d422:	4620      	mov	r0, r4
}
 800d424:	b007      	add	sp, #28
 800d426:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 800d42a:	f7ff bfa7 	b.w	800d37c <tcp_send_empty_ack>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800d42e:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800d430:	f104 0904 	add.w	r9, r4, #4
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d434:	f8b4 8048 	ldrh.w	r8, [r4, #72]	; 0x48
 800d438:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800d43c:	b340      	cbz	r0, 800d490 <tcp_output+0xb0>
    return netif_get_by_index(pcb->netif_idx);
 800d43e:	f7fc fd39 	bl	8009eb4 <netif_get_by_index>
    return ip_route(src, dst);
 800d442:	4607      	mov	r7, r0
  if (netif == NULL) {
 800d444:	2800      	cmp	r0, #0
 800d446:	f000 8170 	beq.w	800d72a <tcp_output+0x34a>
  if (ip_addr_isany(&pcb->local_ip)) {
 800d44a:	6823      	ldr	r3, [r4, #0]
 800d44c:	b90b      	cbnz	r3, 800d452 <tcp_output+0x72>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d44e:	6843      	ldr	r3, [r0, #4]
 800d450:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d452:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d454:	45b0      	cmp	r8, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d456:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d458:	bf28      	it	cs
 800d45a:	46b0      	movcs	r8, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d45c:	f7fc f881 	bl	8009562 <lwip_htonl>
 800d460:	892b      	ldrh	r3, [r5, #8]
 800d462:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800d464:	1a9b      	subs	r3, r3, r2
 800d466:	4418      	add	r0, r3
 800d468:	4540      	cmp	r0, r8
 800d46a:	d915      	bls.n	800d498 <tcp_output+0xb8>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800d46c:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800d470:	4543      	cmp	r3, r8
 800d472:	d1d2      	bne.n	800d41a <tcp_output+0x3a>
 800d474:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d476:	2b00      	cmp	r3, #0
 800d478:	d1cf      	bne.n	800d41a <tcp_output+0x3a>
 800d47a:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d1cb      	bne.n	800d41a <tcp_output+0x3a>
      pcb->persist_cnt = 0;
 800d482:	f44f 7280 	mov.w	r2, #256	; 0x100
      pcb->persist_probe = 0;
 800d486:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
      pcb->persist_cnt = 0;
 800d48a:	f8a4 2094 	strh.w	r2, [r4, #148]	; 0x94
 800d48e:	e7c4      	b.n	800d41a <tcp_output+0x3a>
    return ip_route(src, dst);
 800d490:	4648      	mov	r0, r9
 800d492:	f7fb faa5 	bl	80089e0 <ip4_route>
 800d496:	e7d4      	b.n	800d442 <tcp_output+0x62>
  pcb->persist_backoff = 0;
 800d498:	2300      	movs	r3, #0
  useg = pcb->unacked;
 800d49a:	6f26      	ldr	r6, [r4, #112]	; 0x70
  pcb->persist_backoff = 0;
 800d49c:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  if (useg != NULL) {
 800d4a0:	b126      	cbz	r6, 800d4ac <tcp_output+0xcc>
    for (; useg->next != NULL; useg = useg->next);
 800d4a2:	4633      	mov	r3, r6
 800d4a4:	6836      	ldr	r6, [r6, #0]
 800d4a6:	2e00      	cmp	r6, #0
 800d4a8:	d1fb      	bne.n	800d4a2 <tcp_output+0xc2>
 800d4aa:	461e      	mov	r6, r3
    LWIP_ASSERT("RST not expected here!",
 800d4ac:	f8df a178 	ldr.w	sl, [pc, #376]	; 800d628 <tcp_output+0x248>
 800d4b0:	f8df b17c 	ldr.w	fp, [pc, #380]	; 800d630 <tcp_output+0x250>
 800d4b4:	e0de      	b.n	800d674 <tcp_output+0x294>
    if (pcb->state != SYN_SENT) {
 800d4b6:	7d23      	ldrb	r3, [r4, #20]
 800d4b8:	2b02      	cmp	r3, #2
 800d4ba:	d009      	beq.n	800d4d0 <tcp_output+0xf0>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d4bc:	68eb      	ldr	r3, [r5, #12]
 800d4be:	2010      	movs	r0, #16
 800d4c0:	899b      	ldrh	r3, [r3, #12]
 800d4c2:	9304      	str	r3, [sp, #16]
 800d4c4:	f7fc f84a 	bl	800955c <lwip_htons>
 800d4c8:	9b04      	ldr	r3, [sp, #16]
 800d4ca:	68ea      	ldr	r2, [r5, #12]
 800d4cc:	4318      	orrs	r0, r3
 800d4ce:	8190      	strh	r0, [r2, #12]
  if (tcp_output_segment_busy(seg)) {
 800d4d0:	4628      	mov	r0, r5
 800d4d2:	f7ff f8a3 	bl	800c61c <tcp_output_segment_busy>
 800d4d6:	2800      	cmp	r0, #0
 800d4d8:	d16f      	bne.n	800d5ba <tcp_output+0x1da>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d4da:	68eb      	ldr	r3, [r5, #12]
 800d4dc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d4de:	9304      	str	r3, [sp, #16]
 800d4e0:	f7fc f83f 	bl	8009562 <lwip_htonl>
 800d4e4:	9b04      	ldr	r3, [sp, #16]
 800d4e6:	6098      	str	r0, [r3, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d4e8:	68eb      	ldr	r3, [r5, #12]
 800d4ea:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800d4ec:	9304      	str	r3, [sp, #16]
 800d4ee:	f7fc f835 	bl	800955c <lwip_htons>
 800d4f2:	9b04      	ldr	r3, [sp, #16]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d4f4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d4f6:	81d8      	strh	r0, [r3, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d4f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4fa:	4413      	add	r3, r2
 800d4fc:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d4fe:	7aaa      	ldrb	r2, [r5, #10]
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d500:	68eb      	ldr	r3, [r5, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d502:	07d2      	lsls	r2, r2, #31
 800d504:	d449      	bmi.n	800d59a <tcp_output+0x1ba>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d506:	f103 0214 	add.w	r2, r3, #20
  if (pcb->rtime < 0) {
 800d50a:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800d50e:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 800d510:	bfbc      	itt	lt
 800d512:	2300      	movlt	r3, #0
 800d514:	8623      	strhlt	r3, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 800d516:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d518:	b94b      	cbnz	r3, 800d52e <tcp_output+0x14e>
    pcb->rttest = tcp_ticks;
 800d51a:	4948      	ldr	r1, [pc, #288]	; (800d63c <tcp_output+0x25c>)
 800d51c:	68eb      	ldr	r3, [r5, #12]
 800d51e:	6809      	ldr	r1, [r1, #0]
 800d520:	9204      	str	r2, [sp, #16]
 800d522:	6361      	str	r1, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d524:	6858      	ldr	r0, [r3, #4]
 800d526:	f7fc f81c 	bl	8009562 <lwip_htonl>
 800d52a:	9a04      	ldr	r2, [sp, #16]
 800d52c:	63a0      	str	r0, [r4, #56]	; 0x38
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d52e:	6869      	ldr	r1, [r5, #4]
 800d530:	68eb      	ldr	r3, [r5, #12]
 800d532:	6848      	ldr	r0, [r1, #4]
  seg->p->len -= len;
 800d534:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d538:	1a18      	subs	r0, r3, r0
  seg->p->payload = seg->tcphdr;
 800d53a:	604b      	str	r3, [r1, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d53c:	b280      	uxth	r0, r0
  seg->p->len -= len;
 800d53e:	ebac 0c00 	sub.w	ip, ip, r0
 800d542:	f8a1 c00a 	strh.w	ip, [r1, #10]
  seg->p->tot_len -= len;
 800d546:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 800d54a:	ebac 0000 	sub.w	r0, ip, r0
 800d54e:	8108      	strh	r0, [r1, #8]
  seg->tcphdr->chksum = 0;
 800d550:	2100      	movs	r1, #0
 800d552:	7419      	strb	r1, [r3, #16]
 800d554:	7459      	strb	r1, [r3, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d556:	7aa9      	ldrb	r1, [r5, #10]
 800d558:	0089      	lsls	r1, r1, #2
 800d55a:	f001 0104 	and.w	r1, r1, #4
 800d55e:	3114      	adds	r1, #20
 800d560:	440b      	add	r3, r1
 800d562:	429a      	cmp	r2, r3
 800d564:	d006      	beq.n	800d574 <tcp_output+0x194>
 800d566:	4653      	mov	r3, sl
 800d568:	f240 621c 	movw	r2, #1564	; 0x61c
 800d56c:	4934      	ldr	r1, [pc, #208]	; (800d640 <tcp_output+0x260>)
 800d56e:	4658      	mov	r0, fp
 800d570:	f000 ff0c 	bl	800e38c <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d574:	2306      	movs	r3, #6
 800d576:	9702      	str	r7, [sp, #8]
 800d578:	464a      	mov	r2, r9
 800d57a:	4621      	mov	r1, r4
 800d57c:	9301      	str	r3, [sp, #4]
 800d57e:	7aa3      	ldrb	r3, [r4, #10]
 800d580:	9300      	str	r3, [sp, #0]
 800d582:	7ae3      	ldrb	r3, [r4, #11]
 800d584:	6868      	ldr	r0, [r5, #4]
 800d586:	f7fb fb97 	bl	8008cb8 <ip4_output_if>
    if (err != ERR_OK) {
 800d58a:	b1b0      	cbz	r0, 800d5ba <tcp_output+0x1da>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d58c:	8b63      	ldrh	r3, [r4, #26]
 800d58e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d592:	8363      	strh	r3, [r4, #26]
}
 800d594:	b007      	add	sp, #28
 800d596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d59a:	464a      	mov	r2, r9
 800d59c:	4639      	mov	r1, r7
 800d59e:	f240 50b4 	movw	r0, #1460	; 0x5b4
 800d5a2:	9304      	str	r3, [sp, #16]
 800d5a4:	f7fd ffe4 	bl	800b570 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d5a8:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800d5ac:	f7fb ffd9 	bl	8009562 <lwip_htonl>
 800d5b0:	9b04      	ldr	r3, [sp, #16]
    opts += 1;
 800d5b2:	f103 0218 	add.w	r2, r3, #24
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d5b6:	6158      	str	r0, [r3, #20]
    opts += 1;
 800d5b8:	e7a7      	b.n	800d50a <tcp_output+0x12a>
    pcb->unsent = seg->next;
 800d5ba:	682b      	ldr	r3, [r5, #0]
 800d5bc:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800d5be:	7d23      	ldrb	r3, [r4, #20]
 800d5c0:	2b02      	cmp	r3, #2
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d5c2:	bf1e      	ittt	ne
 800d5c4:	8b63      	ldrhne	r3, [r4, #26]
 800d5c6:	f023 0303 	bicne.w	r3, r3, #3
 800d5ca:	8363      	strhne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d5cc:	68eb      	ldr	r3, [r5, #12]
 800d5ce:	6858      	ldr	r0, [r3, #4]
 800d5d0:	f7fb ffc7 	bl	8009562 <lwip_htonl>
 800d5d4:	8929      	ldrh	r1, [r5, #8]
 800d5d6:	68eb      	ldr	r3, [r5, #12]
 800d5d8:	9104      	str	r1, [sp, #16]
 800d5da:	9005      	str	r0, [sp, #20]
 800d5dc:	8998      	ldrh	r0, [r3, #12]
 800d5de:	f7fb ffbd 	bl	800955c <lwip_htons>
 800d5e2:	f010 0303 	ands.w	r3, r0, #3
 800d5e6:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800d5ea:	bf18      	it	ne
 800d5ec:	2301      	movne	r3, #1
 800d5ee:	440a      	add	r2, r1
 800d5f0:	4413      	add	r3, r2
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d5f2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800d5f4:	1ad2      	subs	r2, r2, r3
 800d5f6:	2a00      	cmp	r2, #0
    if (TCP_TCPLEN(seg) > 0) {
 800d5f8:	68ea      	ldr	r2, [r5, #12]
      pcb->snd_nxt = snd_nxt;
 800d5fa:	bfb8      	it	lt
 800d5fc:	6523      	strlt	r3, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 800d5fe:	892b      	ldrh	r3, [r5, #8]
 800d600:	9304      	str	r3, [sp, #16]
 800d602:	8990      	ldrh	r0, [r2, #12]
 800d604:	f7fb ffaa 	bl	800955c <lwip_htons>
 800d608:	f010 0003 	ands.w	r0, r0, #3
 800d60c:	9b04      	ldr	r3, [sp, #16]
 800d60e:	bf18      	it	ne
 800d610:	2001      	movne	r0, #1
 800d612:	42d8      	cmn	r0, r3
 800d614:	f000 8085 	beq.w	800d722 <tcp_output+0x342>
      seg->next = NULL;
 800d618:	2300      	movs	r3, #0
 800d61a:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800d61c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d61e:	b98b      	cbnz	r3, 800d644 <tcp_output+0x264>
        pcb->unacked = seg;
 800d620:	6725      	str	r5, [r4, #112]	; 0x70
          useg->next = seg;
 800d622:	462e      	mov	r6, r5
 800d624:	e023      	b.n	800d66e <tcp_output+0x28e>
 800d626:	bf00      	nop
 800d628:	08015c06 	.word	0x08015c06
 800d62c:	08016247 	.word	0x08016247
 800d630:	0801342c 	.word	0x0801342c
 800d634:	0801625f 	.word	0x0801625f
 800d638:	20010d68 	.word	0x20010d68
 800d63c:	20010d58 	.word	0x20010d58
 800d640:	0801629c 	.word	0x0801629c
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d644:	68eb      	ldr	r3, [r5, #12]
 800d646:	6858      	ldr	r0, [r3, #4]
 800d648:	f7fb ff8b 	bl	8009562 <lwip_htonl>
 800d64c:	68f2      	ldr	r2, [r6, #12]
 800d64e:	9004      	str	r0, [sp, #16]
 800d650:	6850      	ldr	r0, [r2, #4]
 800d652:	f7fb ff86 	bl	8009562 <lwip_htonl>
 800d656:	9b04      	ldr	r3, [sp, #16]
 800d658:	1a18      	subs	r0, r3, r0
 800d65a:	2800      	cmp	r0, #0
 800d65c:	da5f      	bge.n	800d71e <tcp_output+0x33e>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d65e:	f104 0370 	add.w	r3, r4, #112	; 0x70
          while (*cur_seg &&
 800d662:	681a      	ldr	r2, [r3, #0]
 800d664:	2a00      	cmp	r2, #0
 800d666:	d149      	bne.n	800d6fc <tcp_output+0x31c>
          seg->next = (*cur_seg);
 800d668:	681a      	ldr	r2, [r3, #0]
 800d66a:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 800d66c:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 800d66e:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 800d670:	2d00      	cmp	r5, #0
 800d672:	d03a      	beq.n	800d6ea <tcp_output+0x30a>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d674:	68eb      	ldr	r3, [r5, #12]
 800d676:	6858      	ldr	r0, [r3, #4]
 800d678:	f7fb ff73 	bl	8009562 <lwip_htonl>
 800d67c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d67e:	1ac0      	subs	r0, r0, r3
 800d680:	892b      	ldrh	r3, [r5, #8]
 800d682:	4418      	add	r0, r3
  while (seg != NULL &&
 800d684:	4540      	cmp	r0, r8
 800d686:	d82e      	bhi.n	800d6e6 <tcp_output+0x306>
    LWIP_ASSERT("RST not expected here!",
 800d688:	68eb      	ldr	r3, [r5, #12]
 800d68a:	8998      	ldrh	r0, [r3, #12]
 800d68c:	f7fb ff66 	bl	800955c <lwip_htons>
 800d690:	0741      	lsls	r1, r0, #29
 800d692:	d506      	bpl.n	800d6a2 <tcp_output+0x2c2>
 800d694:	4653      	mov	r3, sl
 800d696:	f240 5236 	movw	r2, #1334	; 0x536
 800d69a:	4925      	ldr	r1, [pc, #148]	; (800d730 <tcp_output+0x350>)
 800d69c:	4658      	mov	r0, fp
 800d69e:	f000 fe75 	bl	800e38c <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d6a2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	f43f af06 	beq.w	800d4b6 <tcp_output+0xd6>
 800d6aa:	8b62      	ldrh	r2, [r4, #26]
 800d6ac:	f012 0f44 	tst.w	r2, #68	; 0x44
 800d6b0:	f47f af01 	bne.w	800d4b6 <tcp_output+0xd6>
 800d6b4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d6b6:	b143      	cbz	r3, 800d6ca <tcp_output+0x2ea>
 800d6b8:	6819      	ldr	r1, [r3, #0]
 800d6ba:	2900      	cmp	r1, #0
 800d6bc:	f47f aefb 	bne.w	800d4b6 <tcp_output+0xd6>
 800d6c0:	8919      	ldrh	r1, [r3, #8]
 800d6c2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800d6c4:	4299      	cmp	r1, r3
 800d6c6:	f4bf aef6 	bcs.w	800d4b6 <tcp_output+0xd6>
 800d6ca:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	f43f aef1 	beq.w	800d4b6 <tcp_output+0xd6>
 800d6d4:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800d6d8:	2b07      	cmp	r3, #7
 800d6da:	f63f aeec 	bhi.w	800d4b6 <tcp_output+0xd6>
 800d6de:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 800d6e2:	f47f aee8 	bne.w	800d4b6 <tcp_output+0xd6>
  if (pcb->unsent == NULL) {
 800d6e6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d6e8:	b913      	cbnz	r3, 800d6f0 <tcp_output+0x310>
    pcb->unsent_oversize = 0;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d6f0:	8b63      	ldrh	r3, [r4, #26]
 800d6f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d6f6:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 800d6f8:	2000      	movs	r0, #0
 800d6fa:	e74b      	b.n	800d594 <tcp_output+0x1b4>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d6fc:	68d2      	ldr	r2, [r2, #12]
 800d6fe:	9305      	str	r3, [sp, #20]
 800d700:	6850      	ldr	r0, [r2, #4]
 800d702:	f7fb ff2e 	bl	8009562 <lwip_htonl>
 800d706:	68e9      	ldr	r1, [r5, #12]
 800d708:	9004      	str	r0, [sp, #16]
 800d70a:	6848      	ldr	r0, [r1, #4]
 800d70c:	f7fb ff29 	bl	8009562 <lwip_htonl>
 800d710:	9a04      	ldr	r2, [sp, #16]
          while (*cur_seg &&
 800d712:	9b05      	ldr	r3, [sp, #20]
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d714:	1a10      	subs	r0, r2, r0
          while (*cur_seg &&
 800d716:	2800      	cmp	r0, #0
 800d718:	daa6      	bge.n	800d668 <tcp_output+0x288>
            cur_seg = &((*cur_seg)->next );
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	e7a1      	b.n	800d662 <tcp_output+0x282>
          useg->next = seg;
 800d71e:	6035      	str	r5, [r6, #0]
 800d720:	e77f      	b.n	800d622 <tcp_output+0x242>
      tcp_seg_free(seg);
 800d722:	4628      	mov	r0, r5
 800d724:	f7fd f8b6 	bl	800a894 <tcp_seg_free>
 800d728:	e7a1      	b.n	800d66e <tcp_output+0x28e>
    return ERR_RTE;
 800d72a:	f06f 0003 	mvn.w	r0, #3
 800d72e:	e731      	b.n	800d594 <tcp_output+0x1b4>
 800d730:	08016285 	.word	0x08016285

0800d734 <tcp_rexmit_rto_commit>:
{
 800d734:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d736:	4604      	mov	r4, r0
 800d738:	b930      	cbnz	r0, 800d748 <tcp_rexmit_rto_commit+0x14>
 800d73a:	4b09      	ldr	r3, [pc, #36]	; (800d760 <tcp_rexmit_rto_commit+0x2c>)
 800d73c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d740:	4908      	ldr	r1, [pc, #32]	; (800d764 <tcp_rexmit_rto_commit+0x30>)
 800d742:	4809      	ldr	r0, [pc, #36]	; (800d768 <tcp_rexmit_rto_commit+0x34>)
 800d744:	f000 fe22 	bl	800e38c <iprintf>
  if (pcb->nrtx < 0xFF) {
 800d748:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 800d74c:	4620      	mov	r0, r4
  if (pcb->nrtx < 0xFF) {
 800d74e:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800d750:	bf1c      	itt	ne
 800d752:	3301      	addne	r3, #1
 800d754:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
}
 800d758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 800d75c:	f7ff be40 	b.w	800d3e0 <tcp_output>
 800d760:	08015c06 	.word	0x08015c06
 800d764:	080162af 	.word	0x080162af
 800d768:	0801342c 	.word	0x0801342c

0800d76c <tcp_rexmit_rto>:
{
 800d76c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d76e:	4604      	mov	r4, r0
 800d770:	b930      	cbnz	r0, 800d780 <tcp_rexmit_rto+0x14>
 800d772:	4b08      	ldr	r3, [pc, #32]	; (800d794 <tcp_rexmit_rto+0x28>)
 800d774:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800d778:	4907      	ldr	r1, [pc, #28]	; (800d798 <tcp_rexmit_rto+0x2c>)
 800d77a:	4808      	ldr	r0, [pc, #32]	; (800d79c <tcp_rexmit_rto+0x30>)
 800d77c:	f000 fe06 	bl	800e38c <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d780:	4620      	mov	r0, r4
 800d782:	f7ff fcfd 	bl	800d180 <tcp_rexmit_rto_prepare>
 800d786:	b920      	cbnz	r0, 800d792 <tcp_rexmit_rto+0x26>
    tcp_rexmit_rto_commit(pcb);
 800d788:	4620      	mov	r0, r4
}
 800d78a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tcp_rexmit_rto_commit(pcb);
 800d78e:	f7ff bfd1 	b.w	800d734 <tcp_rexmit_rto_commit>
}
 800d792:	bd10      	pop	{r4, pc}
 800d794:	08015c06 	.word	0x08015c06
 800d798:	080162d2 	.word	0x080162d2
 800d79c:	0801342c 	.word	0x0801342c

0800d7a0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800d7a0:	b570      	push	{r4, r5, r6, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800d7a2:	4604      	mov	r4, r0
 800d7a4:	b930      	cbnz	r0, 800d7b4 <tcp_keepalive+0x14>
 800d7a6:	4b0f      	ldr	r3, [pc, #60]	; (800d7e4 <tcp_keepalive+0x44>)
 800d7a8:	f640 0224 	movw	r2, #2084	; 0x824
 800d7ac:	490e      	ldr	r1, [pc, #56]	; (800d7e8 <tcp_keepalive+0x48>)
 800d7ae:	480f      	ldr	r0, [pc, #60]	; (800d7ec <tcp_keepalive+0x4c>)
 800d7b0:	f000 fdec 	bl	800e38c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800d7b4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800d7b6:	3801      	subs	r0, #1
 800d7b8:	f7fb fed3 	bl	8009562 <lwip_htonl>
 800d7bc:	2100      	movs	r1, #0
 800d7be:	4602      	mov	r2, r0
 800d7c0:	4620      	mov	r0, r4
 800d7c2:	f7ff f83f 	bl	800c844 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800d7c6:	4605      	mov	r5, r0
 800d7c8:	b148      	cbz	r0, 800d7de <tcp_keepalive+0x3e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d7ca:	f7ff f861 	bl	800c890 <tcp_output_fill_options.isra.0.constprop.0>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d7ce:	1d23      	adds	r3, r4, #4
 800d7d0:	4622      	mov	r2, r4
 800d7d2:	4629      	mov	r1, r5
 800d7d4:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800d7d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d7da:	f7ff b869 	b.w	800c8b0 <tcp_output_control_segment>
}
 800d7de:	f04f 30ff 	mov.w	r0, #4294967295
 800d7e2:	bd70      	pop	{r4, r5, r6, pc}
 800d7e4:	08015c06 	.word	0x08015c06
 800d7e8:	080162ee 	.word	0x080162ee
 800d7ec:	0801342c 	.word	0x0801342c

0800d7f0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800d7f4:	4606      	mov	r6, r0
 800d7f6:	b930      	cbnz	r0, 800d806 <tcp_zero_window_probe+0x16>
 800d7f8:	4b2c      	ldr	r3, [pc, #176]	; (800d8ac <tcp_zero_window_probe+0xbc>)
 800d7fa:	f640 024f 	movw	r2, #2127	; 0x84f
 800d7fe:	492c      	ldr	r1, [pc, #176]	; (800d8b0 <tcp_zero_window_probe+0xc0>)
 800d800:	482c      	ldr	r0, [pc, #176]	; (800d8b4 <tcp_zero_window_probe+0xc4>)
 800d802:	f000 fdc3 	bl	800e38c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800d806:	6ef5      	ldr	r5, [r6, #108]	; 0x6c
  if (seg == NULL) {
 800d808:	2d00      	cmp	r5, #0
 800d80a:	d048      	beq.n	800d89e <tcp_zero_window_probe+0xae>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800d80c:	f896 3096 	ldrb.w	r3, [r6, #150]	; 0x96
 800d810:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->persist_probe;
 800d812:	bf1c      	itt	ne
 800d814:	3301      	addne	r3, #1
 800d816:	f886 3096 	strbne.w	r3, [r6, #150]	; 0x96
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d81a:	68eb      	ldr	r3, [r5, #12]
 800d81c:	8998      	ldrh	r0, [r3, #12]
 800d81e:	f7fb fe9d 	bl	800955c <lwip_htons>
 800d822:	f010 0401 	ands.w	r4, r0, #1
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800d826:	68eb      	ldr	r3, [r5, #12]
 800d828:	4630      	mov	r0, r6
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d82a:	bf18      	it	ne
 800d82c:	892c      	ldrhne	r4, [r5, #8]
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800d82e:	685a      	ldr	r2, [r3, #4]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d830:	bf1c      	itt	ne
 800d832:	fab4 f484 	clzne	r4, r4
 800d836:	0964      	lsrne	r4, r4, #5
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800d838:	f084 0101 	eor.w	r1, r4, #1
 800d83c:	f7ff f802 	bl	800c844 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800d840:	4607      	mov	r7, r0
 800d842:	b378      	cbz	r0, 800d8a4 <tcp_zero_window_probe+0xb4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800d844:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800d848:	b1f4      	cbz	r4, 800d888 <tcp_zero_window_probe+0x98>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800d84a:	f9b8 400c 	ldrsh.w	r4, [r8, #12]
 800d84e:	2011      	movs	r0, #17
 800d850:	f7fb fe84 	bl	800955c <lwip_htons>
 800d854:	f424 547c 	bic.w	r4, r4, #16128	; 0x3f00
 800d858:	4320      	orrs	r0, r4
 800d85a:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d85e:	68eb      	ldr	r3, [r5, #12]
 800d860:	6858      	ldr	r0, [r3, #4]
 800d862:	f7fb fe7e 	bl	8009562 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d866:	6d33      	ldr	r3, [r6, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d868:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d86a:	1a1b      	subs	r3, r3, r0
 800d86c:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 800d86e:	bfb8      	it	lt
 800d870:	6530      	strlt	r0, [r6, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d872:	4638      	mov	r0, r7
 800d874:	f7ff f80c 	bl	800c890 <tcp_output_fill_options.isra.0.constprop.0>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d878:	1d33      	adds	r3, r6, #4
 800d87a:	4632      	mov	r2, r6
 800d87c:	4639      	mov	r1, r7
 800d87e:	4630      	mov	r0, r6

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800d880:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d884:	f7ff b814 	b.w	800c8b0 <tcp_output_control_segment>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d888:	6868      	ldr	r0, [r5, #4]
 800d88a:	f108 0114 	add.w	r1, r8, #20
 800d88e:	892a      	ldrh	r2, [r5, #8]
 800d890:	8903      	ldrh	r3, [r0, #8]
 800d892:	1a9b      	subs	r3, r3, r2
 800d894:	2201      	movs	r2, #1
 800d896:	b29b      	uxth	r3, r3
 800d898:	f7fc fdec 	bl	800a474 <pbuf_copy_partial>
 800d89c:	e7df      	b.n	800d85e <tcp_zero_window_probe+0x6e>
    return ERR_OK;
 800d89e:	4628      	mov	r0, r5
}
 800d8a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_MEM;
 800d8a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d8a8:	e7fa      	b.n	800d8a0 <tcp_zero_window_probe+0xb0>
 800d8aa:	bf00      	nop
 800d8ac:	08015c06 	.word	0x08015c06
 800d8b0:	08016309 	.word	0x08016309
 800d8b4:	0801342c 	.word	0x0801342c

0800d8b8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800d8b8:	b570      	push	{r4, r5, r6, lr}
 800d8ba:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800d8bc:	200a      	movs	r0, #10
{
 800d8be:	460e      	mov	r6, r1
 800d8c0:	4615      	mov	r5, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800d8c2:	f7fc f96b 	bl	8009b9c <memp_malloc>
  if (timeout == NULL) {
 800d8c6:	b938      	cbnz	r0, 800d8d8 <sys_timeout_abs+0x20>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800d8c8:	4b10      	ldr	r3, [pc, #64]	; (800d90c <sys_timeout_abs+0x54>)
 800d8ca:	22be      	movs	r2, #190	; 0xbe
 800d8cc:	4910      	ldr	r1, [pc, #64]	; (800d910 <sys_timeout_abs+0x58>)
 800d8ce:	4811      	ldr	r0, [pc, #68]	; (800d914 <sys_timeout_abs+0x5c>)
        t->next = timeout;
        break;
      }
    }
  }
}
 800d8d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800d8d4:	f000 bd5a 	b.w	800e38c <iprintf>
  timeout->next = NULL;
 800d8d8:	2300      	movs	r3, #0
  if (next_timeout == NULL) {
 800d8da:	4a0f      	ldr	r2, [pc, #60]	; (800d918 <sys_timeout_abs+0x60>)
  timeout->time = abs_time;
 800d8dc:	6044      	str	r4, [r0, #4]
  timeout->next = NULL;
 800d8de:	6003      	str	r3, [r0, #0]
  if (next_timeout == NULL) {
 800d8e0:	6813      	ldr	r3, [r2, #0]
  timeout->arg = arg;
 800d8e2:	e9c0 6502 	strd	r6, r5, [r0, #8]
  if (next_timeout == NULL) {
 800d8e6:	b90b      	cbnz	r3, 800d8ec <sys_timeout_abs+0x34>
    next_timeout = timeout;
 800d8e8:	6010      	str	r0, [r2, #0]
}
 800d8ea:	bd70      	pop	{r4, r5, r6, pc}
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800d8ec:	6859      	ldr	r1, [r3, #4]
 800d8ee:	1a61      	subs	r1, r4, r1
 800d8f0:	2900      	cmp	r1, #0
 800d8f2:	da01      	bge.n	800d8f8 <sys_timeout_abs+0x40>
    timeout->next = next_timeout;
 800d8f4:	6003      	str	r3, [r0, #0]
 800d8f6:	e7f7      	b.n	800d8e8 <sys_timeout_abs+0x30>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800d8f8:	4619      	mov	r1, r3
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	b11b      	cbz	r3, 800d906 <sys_timeout_abs+0x4e>
 800d8fe:	685a      	ldr	r2, [r3, #4]
 800d900:	1aa2      	subs	r2, r4, r2
 800d902:	2a00      	cmp	r2, #0
 800d904:	daf8      	bge.n	800d8f8 <sys_timeout_abs+0x40>
        timeout->next = t->next;
 800d906:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 800d908:	6008      	str	r0, [r1, #0]
        break;
 800d90a:	e7ee      	b.n	800d8ea <sys_timeout_abs+0x32>
 800d90c:	0801632c 	.word	0x0801632c
 800d910:	08016397 	.word	0x08016397
 800d914:	0801342c 	.word	0x0801342c
 800d918:	20006988 	.word	0x20006988

0800d91c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800d91c:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800d91e:	6843      	ldr	r3, [r0, #4]
{
 800d920:	4604      	mov	r4, r0
  cyclic->handler();
 800d922:	4798      	blx	r3

  now = sys_now();
 800d924:	f7f3 f8a2 	bl	8000a6c <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800d928:	4b07      	ldr	r3, [pc, #28]	; (800d948 <lwip_cyclic_timer+0x2c>)
 800d92a:	6825      	ldr	r5, [r4, #0]
 800d92c:	685b      	ldr	r3, [r3, #4]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d92e:	4907      	ldr	r1, [pc, #28]	; (800d94c <lwip_cyclic_timer+0x30>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800d930:	442b      	add	r3, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800d932:	1a1a      	subs	r2, r3, r0
 800d934:	2a00      	cmp	r2, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d936:	4622      	mov	r2, r4
 800d938:	bfb4      	ite	lt
 800d93a:	1940      	addlt	r0, r0, r5
  } else {
    /* correct cyclic interval with handler execution delay and sys_check_timeouts jitter */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800d93c:	4618      	movge	r0, r3
#endif
  }
}
 800d93e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800d942:	f7ff bfb9 	b.w	800d8b8 <sys_timeout_abs>
 800d946:	bf00      	nop
 800d948:	20006988 	.word	0x20006988
 800d94c:	0800d91d 	.word	0x0800d91d

0800d950 <sys_timeout>:
{
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800d950:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 800d954:	b570      	push	{r4, r5, r6, lr}
 800d956:	4604      	mov	r4, r0
 800d958:	460d      	mov	r5, r1
 800d95a:	4616      	mov	r6, r2
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800d95c:	d306      	bcc.n	800d96c <sys_timeout+0x1c>
 800d95e:	4b08      	ldr	r3, [pc, #32]	; (800d980 <sys_timeout+0x30>)
 800d960:	f240 1229 	movw	r2, #297	; 0x129
 800d964:	4907      	ldr	r1, [pc, #28]	; (800d984 <sys_timeout+0x34>)
 800d966:	4808      	ldr	r0, [pc, #32]	; (800d988 <sys_timeout+0x38>)
 800d968:	f000 fd10 	bl	800e38c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800d96c:	f7f3 f87e 	bl	8000a6c <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d970:	4632      	mov	r2, r6
 800d972:	4629      	mov	r1, r5
 800d974:	4420      	add	r0, r4
#endif
}
 800d976:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d97a:	f7ff bf9d 	b.w	800d8b8 <sys_timeout_abs>
 800d97e:	bf00      	nop
 800d980:	0801632c 	.word	0x0801632c
 800d984:	080163d4 	.word	0x080163d4
 800d988:	0801342c 	.word	0x0801342c

0800d98c <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800d98c:	4b08      	ldr	r3, [pc, #32]	; (800d9b0 <tcp_timer_needed+0x24>)
 800d98e:	689a      	ldr	r2, [r3, #8]
 800d990:	b962      	cbnz	r2, 800d9ac <tcp_timer_needed+0x20>
 800d992:	4a08      	ldr	r2, [pc, #32]	; (800d9b4 <tcp_timer_needed+0x28>)
 800d994:	6812      	ldr	r2, [r2, #0]
 800d996:	b912      	cbnz	r2, 800d99e <tcp_timer_needed+0x12>
 800d998:	4a07      	ldr	r2, [pc, #28]	; (800d9b8 <tcp_timer_needed+0x2c>)
 800d99a:	6812      	ldr	r2, [r2, #0]
 800d99c:	b132      	cbz	r2, 800d9ac <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800d99e:	2201      	movs	r2, #1
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d9a0:	4906      	ldr	r1, [pc, #24]	; (800d9bc <tcp_timer_needed+0x30>)
 800d9a2:	20fa      	movs	r0, #250	; 0xfa
    tcpip_tcp_timer_active = 1;
 800d9a4:	609a      	str	r2, [r3, #8]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	f7ff bfd2 	b.w	800d950 <sys_timeout>
}
 800d9ac:	4770      	bx	lr
 800d9ae:	bf00      	nop
 800d9b0:	20006988 	.word	0x20006988
 800d9b4:	20010d54 	.word	0x20010d54
 800d9b8:	20010d64 	.word	0x20010d64
 800d9bc:	0800d9c1 	.word	0x0800d9c1

0800d9c0 <tcpip_tcp_timer>:
{
 800d9c0:	b508      	push	{r3, lr}
  tcp_tmr();
 800d9c2:	f7fd fbff 	bl	800b1c4 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800d9c6:	4b08      	ldr	r3, [pc, #32]	; (800d9e8 <tcpip_tcp_timer+0x28>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	b913      	cbnz	r3, 800d9d2 <tcpip_tcp_timer+0x12>
 800d9cc:	4b07      	ldr	r3, [pc, #28]	; (800d9ec <tcpip_tcp_timer+0x2c>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	b133      	cbz	r3, 800d9e0 <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	4906      	ldr	r1, [pc, #24]	; (800d9f0 <tcpip_tcp_timer+0x30>)
 800d9d6:	20fa      	movs	r0, #250	; 0xfa
}
 800d9d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d9dc:	f7ff bfb8 	b.w	800d950 <sys_timeout>
    tcpip_tcp_timer_active = 0;
 800d9e0:	4a04      	ldr	r2, [pc, #16]	; (800d9f4 <tcpip_tcp_timer+0x34>)
 800d9e2:	6093      	str	r3, [r2, #8]
}
 800d9e4:	bd08      	pop	{r3, pc}
 800d9e6:	bf00      	nop
 800d9e8:	20010d54 	.word	0x20010d54
 800d9ec:	20010d64 	.word	0x20010d64
 800d9f0:	0800d9c1 	.word	0x0800d9c1
 800d9f4:	20006988 	.word	0x20006988

0800d9f8 <sys_timeouts_init>:
{
 800d9f8:	b510      	push	{r4, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800d9fa:	4c0f      	ldr	r4, [pc, #60]	; (800da38 <sys_timeouts_init+0x40>)
 800d9fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800da00:	490e      	ldr	r1, [pc, #56]	; (800da3c <sys_timeouts_init+0x44>)
 800da02:	f104 0208 	add.w	r2, r4, #8
 800da06:	f7ff ffa3 	bl	800d950 <sys_timeout>
 800da0a:	f104 0210 	add.w	r2, r4, #16
 800da0e:	490b      	ldr	r1, [pc, #44]	; (800da3c <sys_timeouts_init+0x44>)
 800da10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800da14:	f7ff ff9c 	bl	800d950 <sys_timeout>
 800da18:	f104 0218 	add.w	r2, r4, #24
 800da1c:	4907      	ldr	r1, [pc, #28]	; (800da3c <sys_timeouts_init+0x44>)
 800da1e:	f64e 2060 	movw	r0, #60000	; 0xea60
 800da22:	f7ff ff95 	bl	800d950 <sys_timeout>
 800da26:	f104 0220 	add.w	r2, r4, #32
 800da2a:	4904      	ldr	r1, [pc, #16]	; (800da3c <sys_timeouts_init+0x44>)
 800da2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
 800da30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800da34:	f7ff bf8c 	b.w	800d950 <sys_timeout>
 800da38:	08013364 	.word	0x08013364
 800da3c:	0800d91d 	.word	0x0800d91d

0800da40 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800da40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800da42:	f7f3 f813 	bl	8000a6c <sys_now>
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800da46:	4d0b      	ldr	r5, [pc, #44]	; (800da74 <sys_check_timeouts+0x34>)
  now = sys_now();
 800da48:	4604      	mov	r4, r0
    tmptimeout = next_timeout;
 800da4a:	6829      	ldr	r1, [r5, #0]
    if (tmptimeout == NULL) {
 800da4c:	b181      	cbz	r1, 800da70 <sys_check_timeouts+0x30>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800da4e:	684b      	ldr	r3, [r1, #4]
 800da50:	1ae2      	subs	r2, r4, r3
 800da52:	2a00      	cmp	r2, #0
 800da54:	db0c      	blt.n	800da70 <sys_check_timeouts+0x30>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800da56:	680a      	ldr	r2, [r1, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800da58:	200a      	movs	r0, #10
    current_timeout_due_time = tmptimeout->time;
 800da5a:	606b      	str	r3, [r5, #4]
    next_timeout = tmptimeout->next;
 800da5c:	602a      	str	r2, [r5, #0]
    arg = tmptimeout->arg;
 800da5e:	e9d1 6702 	ldrd	r6, r7, [r1, #8]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800da62:	f7fc f8b7 	bl	8009bd4 <memp_free>
    if (handler != NULL) {
 800da66:	2e00      	cmp	r6, #0
 800da68:	d0ef      	beq.n	800da4a <sys_check_timeouts+0xa>
      handler(arg);
 800da6a:	4638      	mov	r0, r7
 800da6c:	47b0      	blx	r6
 800da6e:	e7ec      	b.n	800da4a <sys_check_timeouts+0xa>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800da70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da72:	bf00      	nop
 800da74:	20006988 	.word	0x20006988

0800da78 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800da78:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800da7a:	4c07      	ldr	r4, [pc, #28]	; (800da98 <sys_timeouts_sleeptime+0x20>)
 800da7c:	6823      	ldr	r3, [r4, #0]
 800da7e:	b13b      	cbz	r3, 800da90 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 800da80:	f7f2 fff4 	bl	8000a6c <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800da84:	6823      	ldr	r3, [r4, #0]
 800da86:	685b      	ldr	r3, [r3, #4]
 800da88:	1a18      	subs	r0, r3, r0
    return 0;
 800da8a:	bf48      	it	mi
 800da8c:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 800da8e:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800da90:	f04f 30ff 	mov.w	r0, #4294967295
 800da94:	e7fb      	b.n	800da8e <sys_timeouts_sleeptime+0x16>
 800da96:	bf00      	nop
 800da98:	20006988 	.word	0x20006988

0800da9c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800da9c:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800da9e:	f000 fd03 	bl	800e4a8 <rand>
 800daa2:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800daa6:	4b02      	ldr	r3, [pc, #8]	; (800dab0 <udp_init+0x14>)
 800daa8:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800daac:	8018      	strh	r0, [r3, #0]
#endif /* LWIP_RAND */
}
 800daae:	bd08      	pop	{r3, pc}
 800dab0:	20000044 	.word	0x20000044

0800dab4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800dab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dab8:	4688      	mov	r8, r1
 800daba:	b085      	sub	sp, #20

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800dabc:	4607      	mov	r7, r0
 800dabe:	b928      	cbnz	r0, 800dacc <udp_input+0x18>
 800dac0:	4b5f      	ldr	r3, [pc, #380]	; (800dc40 <udp_input+0x18c>)
 800dac2:	22cf      	movs	r2, #207	; 0xcf
 800dac4:	495f      	ldr	r1, [pc, #380]	; (800dc44 <udp_input+0x190>)
 800dac6:	4860      	ldr	r0, [pc, #384]	; (800dc48 <udp_input+0x194>)
 800dac8:	f000 fc60 	bl	800e38c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800dacc:	f1b8 0f00 	cmp.w	r8, #0
 800dad0:	d105      	bne.n	800dade <udp_input+0x2a>
 800dad2:	4b5b      	ldr	r3, [pc, #364]	; (800dc40 <udp_input+0x18c>)
 800dad4:	22d0      	movs	r2, #208	; 0xd0
 800dad6:	495d      	ldr	r1, [pc, #372]	; (800dc4c <udp_input+0x198>)
 800dad8:	485b      	ldr	r0, [pc, #364]	; (800dc48 <udp_input+0x194>)
 800dada:	f000 fc57 	bl	800e38c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800dade:	897b      	ldrh	r3, [r7, #10]
 800dae0:	2b07      	cmp	r3, #7
 800dae2:	d805      	bhi.n	800daf0 <udp_input+0x3c>
    if (pbuf_remove_header(p, UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800dae4:	4638      	mov	r0, r7
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800dae6:	b005      	add	sp, #20
 800dae8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800daec:	f7fc ba9c 	b.w	800a028 <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800daf0:	4e57      	ldr	r6, [pc, #348]	; (800dc50 <udp_input+0x19c>)
  uncon_pcb = NULL;
 800daf2:	2500      	movs	r5, #0
  udphdr = (struct udp_hdr *)p->payload;
 800daf4:	687c      	ldr	r4, [r7, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800daf6:	6831      	ldr	r1, [r6, #0]
  prev = NULL;
 800daf8:	46ab      	mov	fp, r5
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800dafa:	6970      	ldr	r0, [r6, #20]
 800dafc:	f7fb f8ed 	bl	8008cda <ip4_addr_isbroadcast_u32>
 800db00:	4681      	mov	r9, r0
  src = lwip_ntohs(udphdr->src);
 800db02:	8820      	ldrh	r0, [r4, #0]
 800db04:	f7fb fd2a 	bl	800955c <lwip_htons>
 800db08:	9002      	str	r0, [sp, #8]
  dest = lwip_ntohs(udphdr->dest);
 800db0a:	8860      	ldrh	r0, [r4, #2]
 800db0c:	f7fb fd26 	bl	800955c <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800db10:	4b50      	ldr	r3, [pc, #320]	; (800dc54 <udp_input+0x1a0>)
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800db12:	f8df c12c 	ldr.w	ip, [pc, #300]	; 800dc40 <udp_input+0x18c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800db16:	681c      	ldr	r4, [r3, #0]
 800db18:	469a      	mov	sl, r3
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800db1a:	494f      	ldr	r1, [pc, #316]	; (800dc58 <udp_input+0x1a4>)
  dest = lwip_ntohs(udphdr->dest);
 800db1c:	9003      	str	r0, [sp, #12]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800db1e:	b99c      	cbnz	r4, 800db48 <udp_input+0x94>
  if (pcb != NULL) {
 800db20:	b925      	cbnz	r5, 800db2c <udp_input+0x78>
  if (for_us) {
 800db22:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800db26:	6973      	ldr	r3, [r6, #20]
 800db28:	429a      	cmp	r2, r3
 800db2a:	d1db      	bne.n	800dae4 <udp_input+0x30>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800db2c:	2108      	movs	r1, #8
 800db2e:	4638      	mov	r0, r7
 800db30:	f7fc fa46 	bl	8009fc0 <pbuf_remove_header>
 800db34:	2800      	cmp	r0, #0
 800db36:	d05e      	beq.n	800dbf6 <udp_input+0x142>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800db38:	4b41      	ldr	r3, [pc, #260]	; (800dc40 <udp_input+0x18c>)
 800db3a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800db3e:	4947      	ldr	r1, [pc, #284]	; (800dc5c <udp_input+0x1a8>)
 800db40:	4841      	ldr	r0, [pc, #260]	; (800dc48 <udp_input+0x194>)
 800db42:	f000 fc23 	bl	800e38c <iprintf>
 800db46:	e7cd      	b.n	800dae4 <udp_input+0x30>
    if ((pcb->local_port == dest) &&
 800db48:	8a62      	ldrh	r2, [r4, #18]
 800db4a:	9803      	ldr	r0, [sp, #12]
 800db4c:	4282      	cmp	r2, r0
 800db4e:	d14d      	bne.n	800dbec <udp_input+0x138>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800db50:	f1b8 0f00 	cmp.w	r8, #0
 800db54:	d107      	bne.n	800db66 <udp_input+0xb2>
 800db56:	4663      	mov	r3, ip
 800db58:	2288      	movs	r2, #136	; 0x88
 800db5a:	483b      	ldr	r0, [pc, #236]	; (800dc48 <udp_input+0x194>)
 800db5c:	f000 fc16 	bl	800e38c <iprintf>
 800db60:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800dc40 <udp_input+0x18c>
 800db64:	493c      	ldr	r1, [pc, #240]	; (800dc58 <udp_input+0x1a4>)
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800db66:	7a20      	ldrb	r0, [r4, #8]
 800db68:	b130      	cbz	r0, 800db78 <udp_input+0xc4>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800db6a:	6872      	ldr	r2, [r6, #4]
 800db6c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800db70:	3201      	adds	r2, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800db72:	b2d2      	uxtb	r2, r2
 800db74:	4290      	cmp	r0, r2
 800db76:	d139      	bne.n	800dbec <udp_input+0x138>
    if (broadcast != 0) {
 800db78:	6822      	ldr	r2, [r4, #0]
 800db7a:	f1b9 0f00 	cmp.w	r9, #0
 800db7e:	d030      	beq.n	800dbe2 <udp_input+0x12e>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800db80:	b13a      	cbz	r2, 800db92 <udp_input+0xde>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800db82:	6970      	ldr	r0, [r6, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800db84:	1c43      	adds	r3, r0, #1
 800db86:	d004      	beq.n	800db92 <udp_input+0xde>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800db88:	4050      	eors	r0, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800db8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800db8e:	4218      	tst	r0, r3
 800db90:	d12c      	bne.n	800dbec <udp_input+0x138>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800db92:	7c20      	ldrb	r0, [r4, #16]
 800db94:	0743      	lsls	r3, r0, #29
 800db96:	d40e      	bmi.n	800dbb6 <udp_input+0x102>
        if (uncon_pcb == NULL) {
 800db98:	b35d      	cbz	r5, 800dbf2 <udp_input+0x13e>
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800db9a:	f1b9 0f00 	cmp.w	r9, #0
 800db9e:	d00a      	beq.n	800dbb6 <udp_input+0x102>
 800dba0:	6970      	ldr	r0, [r6, #20]
 800dba2:	3001      	adds	r0, #1
 800dba4:	d107      	bne.n	800dbb6 <udp_input+0x102>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800dba6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800dbaa:	682b      	ldr	r3, [r5, #0]
 800dbac:	4283      	cmp	r3, r0
 800dbae:	d002      	beq.n	800dbb6 <udp_input+0x102>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800dbb0:	4290      	cmp	r0, r2
 800dbb2:	bf08      	it	eq
 800dbb4:	4625      	moveq	r5, r4
      if ((pcb->remote_port == src) &&
 800dbb6:	8aa2      	ldrh	r2, [r4, #20]
 800dbb8:	9b02      	ldr	r3, [sp, #8]
 800dbba:	429a      	cmp	r2, r3
 800dbbc:	d116      	bne.n	800dbec <udp_input+0x138>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800dbbe:	6862      	ldr	r2, [r4, #4]
      if ((pcb->remote_port == src) &&
 800dbc0:	b112      	cbz	r2, 800dbc8 <udp_input+0x114>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800dbc2:	6930      	ldr	r0, [r6, #16]
 800dbc4:	4282      	cmp	r2, r0
 800dbc6:	d111      	bne.n	800dbec <udp_input+0x138>
        if (prev != NULL) {
 800dbc8:	f1bb 0f00 	cmp.w	fp, #0
 800dbcc:	d007      	beq.n	800dbde <udp_input+0x12a>
          prev->next = pcb->next;
 800dbce:	68e3      	ldr	r3, [r4, #12]
 800dbd0:	f8cb 300c 	str.w	r3, [fp, #12]
          pcb->next = udp_pcbs;
 800dbd4:	f8da 3000 	ldr.w	r3, [sl]
          udp_pcbs = pcb;
 800dbd8:	f8ca 4000 	str.w	r4, [sl]
          pcb->next = udp_pcbs;
 800dbdc:	60e3      	str	r3, [r4, #12]
          udp_pcbs = pcb;
 800dbde:	4625      	mov	r5, r4
 800dbe0:	e7a4      	b.n	800db2c <udp_input+0x78>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dbe2:	2a00      	cmp	r2, #0
 800dbe4:	d0d5      	beq.n	800db92 <udp_input+0xde>
 800dbe6:	6970      	ldr	r0, [r6, #20]
 800dbe8:	4290      	cmp	r0, r2
 800dbea:	d0d2      	beq.n	800db92 <udp_input+0xde>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800dbec:	46a3      	mov	fp, r4
 800dbee:	68e4      	ldr	r4, [r4, #12]
 800dbf0:	e795      	b.n	800db1e <udp_input+0x6a>
 800dbf2:	4625      	mov	r5, r4
 800dbf4:	e7df      	b.n	800dbb6 <udp_input+0x102>
    if (pcb != NULL) {
 800dbf6:	b16d      	cbz	r5, 800dc14 <udp_input+0x160>
      if (pcb->recv != NULL) {
 800dbf8:	69ac      	ldr	r4, [r5, #24]
 800dbfa:	2c00      	cmp	r4, #0
 800dbfc:	f43f af72 	beq.w	800dae4 <udp_input+0x30>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800dc00:	9b02      	ldr	r3, [sp, #8]
 800dc02:	463a      	mov	r2, r7
 800dc04:	4629      	mov	r1, r5
 800dc06:	9300      	str	r3, [sp, #0]
 800dc08:	4b15      	ldr	r3, [pc, #84]	; (800dc60 <udp_input+0x1ac>)
 800dc0a:	69e8      	ldr	r0, [r5, #28]
 800dc0c:	47a0      	blx	r4
}
 800dc0e:	b005      	add	sp, #20
 800dc10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800dc14:	f1b9 0f00 	cmp.w	r9, #0
 800dc18:	f47f af64 	bne.w	800dae4 <udp_input+0x30>
 800dc1c:	6973      	ldr	r3, [r6, #20]
 800dc1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dc22:	2be0      	cmp	r3, #224	; 0xe0
 800dc24:	f43f af5e 	beq.w	800dae4 <udp_input+0x30>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800dc28:	89b1      	ldrh	r1, [r6, #12]
 800dc2a:	4638      	mov	r0, r7
 800dc2c:	3108      	adds	r1, #8
 800dc2e:	b209      	sxth	r1, r1
 800dc30:	f7fc f9f2 	bl	800a018 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800dc34:	2103      	movs	r1, #3
 800dc36:	4638      	mov	r0, r7
 800dc38:	f7fa feae 	bl	8008998 <icmp_dest_unreach>
 800dc3c:	e752      	b.n	800dae4 <udp_input+0x30>
 800dc3e:	bf00      	nop
 800dc40:	0801640a 	.word	0x0801640a
 800dc44:	08016470 	.word	0x08016470
 800dc48:	0801342c 	.word	0x0801342c
 800dc4c:	08016488 	.word	0x08016488
 800dc50:	2000a820 	.word	0x2000a820
 800dc54:	20010d6c 	.word	0x20010d6c
 800dc58:	080164a1 	.word	0x080164a1
 800dc5c:	080164c6 	.word	0x080164c6
 800dc60:	2000a830 	.word	0x2000a830

0800dc64 <udp_bind>:
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 800dc64:	4b2d      	ldr	r3, [pc, #180]	; (800dd1c <udp_bind+0xb8>)
{
 800dc66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 800dc6a:	2900      	cmp	r1, #0
 800dc6c:	bf08      	it	eq
 800dc6e:	4619      	moveq	r1, r3
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800dc70:	b950      	cbnz	r0, 800dc88 <udp_bind+0x24>
 800dc72:	4b2b      	ldr	r3, [pc, #172]	; (800dd20 <udp_bind+0xbc>)
 800dc74:	f240 32b7 	movw	r2, #951	; 0x3b7
 800dc78:	492a      	ldr	r1, [pc, #168]	; (800dd24 <udp_bind+0xc0>)
 800dc7a:	482b      	ldr	r0, [pc, #172]	; (800dd28 <udp_bind+0xc4>)
 800dc7c:	f000 fb86 	bl	800e38c <iprintf>
 800dc80:	f06f 000f 	mvn.w	r0, #15
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 800dc84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800dc88:	4f28      	ldr	r7, [pc, #160]	; (800dd2c <udp_bind+0xc8>)
 800dc8a:	683e      	ldr	r6, [r7, #0]
 800dc8c:	4635      	mov	r5, r6
 800dc8e:	b9d5      	cbnz	r5, 800dcc6 <udp_bind+0x62>
  if (port == 0) {
 800dc90:	2a00      	cmp	r2, #0
 800dc92:	d140      	bne.n	800dd16 <udp_bind+0xb2>
 800dc94:	4b26      	ldr	r3, [pc, #152]	; (800dd30 <udp_bind+0xcc>)
 800dc96:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800dc9a:	f64f 7eff 	movw	lr, #65535	; 0xffff
 800dc9e:	881a      	ldrh	r2, [r3, #0]
 800dca0:	4572      	cmp	r2, lr
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800dca2:	46b4      	mov	ip, r6
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800dca4:	bf16      	itet	ne
 800dca6:	3201      	addne	r2, #1
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800dca8:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800dcac:	b292      	uxthne	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800dcae:	f1bc 0f00 	cmp.w	ip, #0
 800dcb2:	d10e      	bne.n	800dcd2 <udp_bind+0x6e>
 800dcb4:	801a      	strh	r2, [r3, #0]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800dcb6:	680b      	ldr	r3, [r1, #0]
  pcb->local_port = port;
 800dcb8:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800dcba:	6003      	str	r3, [r0, #0]
  if (rebind == 0) {
 800dcbc:	b90d      	cbnz	r5, 800dcc2 <udp_bind+0x5e>
    pcb->next = udp_pcbs;
 800dcbe:	60c6      	str	r6, [r0, #12]
    udp_pcbs = pcb;
 800dcc0:	6038      	str	r0, [r7, #0]
  return ERR_OK;
 800dcc2:	2000      	movs	r0, #0
 800dcc4:	e7de      	b.n	800dc84 <udp_bind+0x20>
    if (pcb == ipcb) {
 800dcc6:	4285      	cmp	r5, r0
 800dcc8:	d001      	beq.n	800dcce <udp_bind+0x6a>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800dcca:	68ed      	ldr	r5, [r5, #12]
 800dccc:	e7df      	b.n	800dc8e <udp_bind+0x2a>
      rebind = 1;
 800dcce:	2501      	movs	r5, #1
 800dcd0:	e7de      	b.n	800dc90 <udp_bind+0x2c>
    if (pcb->local_port == udp_port) {
 800dcd2:	f8bc 8012 	ldrh.w	r8, [ip, #18]
 800dcd6:	4590      	cmp	r8, r2
 800dcd8:	d107      	bne.n	800dcea <udp_bind+0x86>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800dcda:	3c01      	subs	r4, #1
 800dcdc:	b2a4      	uxth	r4, r4
 800dcde:	2c00      	cmp	r4, #0
 800dce0:	d1de      	bne.n	800dca0 <udp_bind+0x3c>
 800dce2:	801a      	strh	r2, [r3, #0]
      return ERR_USE;
 800dce4:	f06f 0007 	mvn.w	r0, #7
 800dce8:	e7cc      	b.n	800dc84 <udp_bind+0x20>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800dcea:	f8dc c00c 	ldr.w	ip, [ip, #12]
 800dcee:	e7de      	b.n	800dcae <udp_bind+0x4a>
      if (pcb != ipcb) {
 800dcf0:	4283      	cmp	r3, r0
 800dcf2:	d00c      	beq.n	800dd0e <udp_bind+0xaa>
          if ((ipcb->local_port == port) &&
 800dcf4:	8a5c      	ldrh	r4, [r3, #18]
 800dcf6:	4294      	cmp	r4, r2
 800dcf8:	d109      	bne.n	800dd0e <udp_bind+0xaa>
 800dcfa:	f8d1 c000 	ldr.w	ip, [r1]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800dcfe:	681c      	ldr	r4, [r3, #0]
          if ((ipcb->local_port == port) &&
 800dd00:	4564      	cmp	r4, ip
 800dd02:	d0ef      	beq.n	800dce4 <udp_bind+0x80>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800dd04:	f1bc 0f00 	cmp.w	ip, #0
 800dd08:	d0ec      	beq.n	800dce4 <udp_bind+0x80>
              ip_addr_isany(&ipcb->local_ip))) {
 800dd0a:	2c00      	cmp	r4, #0
 800dd0c:	d0ea      	beq.n	800dce4 <udp_bind+0x80>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800dd0e:	68db      	ldr	r3, [r3, #12]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d1ed      	bne.n	800dcf0 <udp_bind+0x8c>
 800dd14:	e7cf      	b.n	800dcb6 <udp_bind+0x52>
 800dd16:	4633      	mov	r3, r6
 800dd18:	e7fa      	b.n	800dd10 <udp_bind+0xac>
 800dd1a:	bf00      	nop
 800dd1c:	08013240 	.word	0x08013240
 800dd20:	0801640a 	.word	0x0801640a
 800dd24:	080164e1 	.word	0x080164e1
 800dd28:	0801342c 	.word	0x0801342c
 800dd2c:	20010d6c 	.word	0x20010d6c
 800dd30:	20000044 	.word	0x20000044

0800dd34 <udp_sendto_if_src>:
{
 800dd34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd38:	b085      	sub	sp, #20
 800dd3a:	460e      	mov	r6, r1
 800dd3c:	4690      	mov	r8, r2
 800dd3e:	4699      	mov	r9, r3
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800dd40:	4607      	mov	r7, r0
{
 800dd42:	e9dd ba0e 	ldrd	fp, sl, [sp, #56]	; 0x38
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800dd46:	b960      	cbnz	r0, 800dd62 <udp_sendto_if_src+0x2e>
 800dd48:	4b3e      	ldr	r3, [pc, #248]	; (800de44 <udp_sendto_if_src+0x110>)
 800dd4a:	f240 22d1 	movw	r2, #721	; 0x2d1
 800dd4e:	493e      	ldr	r1, [pc, #248]	; (800de48 <udp_sendto_if_src+0x114>)
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800dd50:	f06f 040f 	mvn.w	r4, #15
 800dd54:	483d      	ldr	r0, [pc, #244]	; (800de4c <udp_sendto_if_src+0x118>)
 800dd56:	f000 fb19 	bl	800e38c <iprintf>
}
 800dd5a:	4620      	mov	r0, r4
 800dd5c:	b005      	add	sp, #20
 800dd5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800dd62:	b921      	cbnz	r1, 800dd6e <udp_sendto_if_src+0x3a>
 800dd64:	4b37      	ldr	r3, [pc, #220]	; (800de44 <udp_sendto_if_src+0x110>)
 800dd66:	f240 22d2 	movw	r2, #722	; 0x2d2
 800dd6a:	4939      	ldr	r1, [pc, #228]	; (800de50 <udp_sendto_if_src+0x11c>)
 800dd6c:	e7f0      	b.n	800dd50 <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800dd6e:	b922      	cbnz	r2, 800dd7a <udp_sendto_if_src+0x46>
 800dd70:	4b34      	ldr	r3, [pc, #208]	; (800de44 <udp_sendto_if_src+0x110>)
 800dd72:	f240 22d3 	movw	r2, #723	; 0x2d3
 800dd76:	4937      	ldr	r1, [pc, #220]	; (800de54 <udp_sendto_if_src+0x120>)
 800dd78:	e7ea      	b.n	800dd50 <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800dd7a:	f1ba 0f00 	cmp.w	sl, #0
 800dd7e:	d104      	bne.n	800dd8a <udp_sendto_if_src+0x56>
 800dd80:	4b30      	ldr	r3, [pc, #192]	; (800de44 <udp_sendto_if_src+0x110>)
 800dd82:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800dd86:	4934      	ldr	r1, [pc, #208]	; (800de58 <udp_sendto_if_src+0x124>)
 800dd88:	e7e2      	b.n	800dd50 <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800dd8a:	f1bb 0f00 	cmp.w	fp, #0
 800dd8e:	d104      	bne.n	800dd9a <udp_sendto_if_src+0x66>
 800dd90:	4b2c      	ldr	r3, [pc, #176]	; (800de44 <udp_sendto_if_src+0x110>)
 800dd92:	f240 22d5 	movw	r2, #725	; 0x2d5
 800dd96:	4931      	ldr	r1, [pc, #196]	; (800de5c <udp_sendto_if_src+0x128>)
 800dd98:	e7da      	b.n	800dd50 <udp_sendto_if_src+0x1c>
  if (pcb->local_port == 0) {
 800dd9a:	8a42      	ldrh	r2, [r0, #18]
 800dd9c:	b13a      	cbz	r2, 800ddae <udp_sendto_if_src+0x7a>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800dd9e:	8932      	ldrh	r2, [r6, #8]
 800dda0:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 800dda4:	429a      	cmp	r2, r3
 800dda6:	d909      	bls.n	800ddbc <udp_sendto_if_src+0x88>
    return ERR_MEM;
 800dda8:	f04f 34ff 	mov.w	r4, #4294967295
 800ddac:	e7d5      	b.n	800dd5a <udp_sendto_if_src+0x26>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800ddae:	4601      	mov	r1, r0
 800ddb0:	f7ff ff58 	bl	800dc64 <udp_bind>
    if (err != ERR_OK) {
 800ddb4:	4604      	mov	r4, r0
 800ddb6:	2800      	cmp	r0, #0
 800ddb8:	d0f1      	beq.n	800dd9e <udp_sendto_if_src+0x6a>
 800ddba:	e7ce      	b.n	800dd5a <udp_sendto_if_src+0x26>
  if (pbuf_add_header(p, UDP_HLEN)) {
 800ddbc:	2108      	movs	r1, #8
 800ddbe:	4630      	mov	r0, r6
 800ddc0:	f7fc f8fa 	bl	8009fb8 <pbuf_add_header>
 800ddc4:	2800      	cmp	r0, #0
 800ddc6:	d03a      	beq.n	800de3e <udp_sendto_if_src+0x10a>
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800ddc8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ddcc:	2108      	movs	r1, #8
 800ddce:	2022      	movs	r0, #34	; 0x22
 800ddd0:	f7fc f992 	bl	800a0f8 <pbuf_alloc>
    if (q == NULL) {
 800ddd4:	4605      	mov	r5, r0
 800ddd6:	2800      	cmp	r0, #0
 800ddd8:	d0e6      	beq.n	800dda8 <udp_sendto_if_src+0x74>
    if (p->tot_len != 0) {
 800ddda:	8933      	ldrh	r3, [r6, #8]
 800dddc:	b113      	cbz	r3, 800dde4 <udp_sendto_if_src+0xb0>
      pbuf_chain(q, p);
 800ddde:	4631      	mov	r1, r6
 800dde0:	f7fc fabc 	bl	800a35c <pbuf_chain>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800dde4:	896b      	ldrh	r3, [r5, #10]
 800dde6:	2b07      	cmp	r3, #7
 800dde8:	d806      	bhi.n	800ddf8 <udp_sendto_if_src+0xc4>
 800ddea:	4b16      	ldr	r3, [pc, #88]	; (800de44 <udp_sendto_if_src+0x110>)
 800ddec:	f240 320d 	movw	r2, #781	; 0x30d
 800ddf0:	491b      	ldr	r1, [pc, #108]	; (800de60 <udp_sendto_if_src+0x12c>)
 800ddf2:	4816      	ldr	r0, [pc, #88]	; (800de4c <udp_sendto_if_src+0x118>)
 800ddf4:	f000 faca 	bl	800e38c <iprintf>
  udphdr = (struct udp_hdr *)q->payload;
 800ddf8:	686c      	ldr	r4, [r5, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 800ddfa:	8a78      	ldrh	r0, [r7, #18]
 800ddfc:	f7fb fbae 	bl	800955c <lwip_htons>
 800de00:	8020      	strh	r0, [r4, #0]
  udphdr->dest = lwip_htons(dst_port);
 800de02:	4648      	mov	r0, r9
 800de04:	f7fb fbaa 	bl	800955c <lwip_htons>
  udphdr->chksum = 0x0000;
 800de08:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 800de0a:	8060      	strh	r0, [r4, #2]
  udphdr->chksum = 0x0000;
 800de0c:	71a3      	strb	r3, [r4, #6]
 800de0e:	71e3      	strb	r3, [r4, #7]
    udphdr->len = lwip_htons(q->tot_len);
 800de10:	8928      	ldrh	r0, [r5, #8]
 800de12:	f7fb fba3 	bl	800955c <lwip_htons>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800de16:	2311      	movs	r3, #17
    udphdr->len = lwip_htons(q->tot_len);
 800de18:	80a0      	strh	r0, [r4, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800de1a:	4642      	mov	r2, r8
 800de1c:	f8cd b008 	str.w	fp, [sp, #8]
 800de20:	4651      	mov	r1, sl
 800de22:	9301      	str	r3, [sp, #4]
 800de24:	4628      	mov	r0, r5
 800de26:	7abb      	ldrb	r3, [r7, #10]
 800de28:	9300      	str	r3, [sp, #0]
 800de2a:	7afb      	ldrb	r3, [r7, #11]
 800de2c:	f7fa feca 	bl	8008bc4 <ip4_output_if_src>
  if (q != p) {
 800de30:	42b5      	cmp	r5, r6
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800de32:	4604      	mov	r4, r0
  if (q != p) {
 800de34:	d091      	beq.n	800dd5a <udp_sendto_if_src+0x26>
    pbuf_free(q);
 800de36:	4628      	mov	r0, r5
 800de38:	f7fc f8f6 	bl	800a028 <pbuf_free>
    q = NULL;
 800de3c:	e78d      	b.n	800dd5a <udp_sendto_if_src+0x26>
 800de3e:	4635      	mov	r5, r6
 800de40:	e7d0      	b.n	800dde4 <udp_sendto_if_src+0xb0>
 800de42:	bf00      	nop
 800de44:	0801640a 	.word	0x0801640a
 800de48:	080164f7 	.word	0x080164f7
 800de4c:	0801342c 	.word	0x0801342c
 800de50:	08016516 	.word	0x08016516
 800de54:	08016536 	.word	0x08016536
 800de58:	08016558 	.word	0x08016558
 800de5c:	0801657a 	.word	0x0801657a
 800de60:	0801659b 	.word	0x0801659b

0800de64 <udp_sendto_if>:
{
 800de64:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800de66:	9c06      	ldr	r4, [sp, #24]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800de68:	b950      	cbnz	r0, 800de80 <udp_sendto_if+0x1c>
 800de6a:	4b18      	ldr	r3, [pc, #96]	; (800decc <udp_sendto_if+0x68>)
 800de6c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800de70:	4917      	ldr	r1, [pc, #92]	; (800ded0 <udp_sendto_if+0x6c>)
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800de72:	4818      	ldr	r0, [pc, #96]	; (800ded4 <udp_sendto_if+0x70>)
 800de74:	f000 fa8a 	bl	800e38c <iprintf>
 800de78:	f06f 000f 	mvn.w	r0, #15
}
 800de7c:	b002      	add	sp, #8
 800de7e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800de80:	b921      	cbnz	r1, 800de8c <udp_sendto_if+0x28>
 800de82:	4b12      	ldr	r3, [pc, #72]	; (800decc <udp_sendto_if+0x68>)
 800de84:	f240 2281 	movw	r2, #641	; 0x281
 800de88:	4913      	ldr	r1, [pc, #76]	; (800ded8 <udp_sendto_if+0x74>)
 800de8a:	e7f2      	b.n	800de72 <udp_sendto_if+0xe>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800de8c:	b922      	cbnz	r2, 800de98 <udp_sendto_if+0x34>
 800de8e:	4b0f      	ldr	r3, [pc, #60]	; (800decc <udp_sendto_if+0x68>)
 800de90:	f240 2282 	movw	r2, #642	; 0x282
 800de94:	4911      	ldr	r1, [pc, #68]	; (800dedc <udp_sendto_if+0x78>)
 800de96:	e7ec      	b.n	800de72 <udp_sendto_if+0xe>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800de98:	b924      	cbnz	r4, 800dea4 <udp_sendto_if+0x40>
 800de9a:	4b0c      	ldr	r3, [pc, #48]	; (800decc <udp_sendto_if+0x68>)
 800de9c:	f240 2283 	movw	r2, #643	; 0x283
 800dea0:	490f      	ldr	r1, [pc, #60]	; (800dee0 <udp_sendto_if+0x7c>)
 800dea2:	e7e6      	b.n	800de72 <udp_sendto_if+0xe>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800dea4:	6805      	ldr	r5, [r0, #0]
 800dea6:	b11d      	cbz	r5, 800deb0 <udp_sendto_if+0x4c>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800dea8:	f005 06f0 	and.w	r6, r5, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800deac:	2ee0      	cmp	r6, #224	; 0xe0
 800deae:	d105      	bne.n	800debc <udp_sendto_if+0x58>
      src_ip = netif_ip_addr4(netif);
 800deb0:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800deb2:	e9cd 4500 	strd	r4, r5, [sp]
 800deb6:	f7ff ff3d 	bl	800dd34 <udp_sendto_if_src>
 800deba:	e7df      	b.n	800de7c <udp_sendto_if+0x18>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800debc:	6866      	ldr	r6, [r4, #4]
 800debe:	42b5      	cmp	r5, r6
 800dec0:	d101      	bne.n	800dec6 <udp_sendto_if+0x62>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800dec2:	4605      	mov	r5, r0
 800dec4:	e7f5      	b.n	800deb2 <udp_sendto_if+0x4e>
        return ERR_RTE;
 800dec6:	f06f 0003 	mvn.w	r0, #3
 800deca:	e7d7      	b.n	800de7c <udp_sendto_if+0x18>
 800decc:	0801640a 	.word	0x0801640a
 800ded0:	080165c9 	.word	0x080165c9
 800ded4:	0801342c 	.word	0x0801342c
 800ded8:	080165e4 	.word	0x080165e4
 800dedc:	08016600 	.word	0x08016600
 800dee0:	0801661e 	.word	0x0801661e

0800dee4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800dee4:	b570      	push	{r4, r5, r6, lr}
 800dee6:	460d      	mov	r5, r1
 800dee8:	4616      	mov	r6, r2
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800deea:	4604      	mov	r4, r0
 800deec:	b948      	cbnz	r0, 800df02 <udp_connect+0x1e>
 800deee:	4b16      	ldr	r3, [pc, #88]	; (800df48 <udp_connect+0x64>)
 800def0:	f240 4235 	movw	r2, #1077	; 0x435
 800def4:	4915      	ldr	r1, [pc, #84]	; (800df4c <udp_connect+0x68>)
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800def6:	4816      	ldr	r0, [pc, #88]	; (800df50 <udp_connect+0x6c>)
 800def8:	f000 fa48 	bl	800e38c <iprintf>
 800defc:	f06f 000f 	mvn.w	r0, #15
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  udp_pcbs = pcb;
  return ERR_OK;
}
 800df00:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800df02:	b921      	cbnz	r1, 800df0e <udp_connect+0x2a>
 800df04:	4b10      	ldr	r3, [pc, #64]	; (800df48 <udp_connect+0x64>)
 800df06:	f240 4236 	movw	r2, #1078	; 0x436
 800df0a:	4912      	ldr	r1, [pc, #72]	; (800df54 <udp_connect+0x70>)
 800df0c:	e7f3      	b.n	800def6 <udp_connect+0x12>
  if (pcb->local_port == 0) {
 800df0e:	8a42      	ldrh	r2, [r0, #18]
 800df10:	b16a      	cbz	r2, 800df2e <udp_connect+0x4a>
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800df12:	682b      	ldr	r3, [r5, #0]
  pcb->remote_port = port;
 800df14:	82a6      	strh	r6, [r4, #20]
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800df16:	6063      	str	r3, [r4, #4]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800df18:	7c23      	ldrb	r3, [r4, #16]
 800df1a:	f043 0304 	orr.w	r3, r3, #4
 800df1e:	7423      	strb	r3, [r4, #16]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800df20:	4b0d      	ldr	r3, [pc, #52]	; (800df58 <udp_connect+0x74>)
 800df22:	681a      	ldr	r2, [r3, #0]
 800df24:	4610      	mov	r0, r2
 800df26:	b940      	cbnz	r0, 800df3a <udp_connect+0x56>
  pcb->next = udp_pcbs;
 800df28:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 800df2a:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 800df2c:	e7e8      	b.n	800df00 <udp_connect+0x1c>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800df2e:	4601      	mov	r1, r0
 800df30:	f7ff fe98 	bl	800dc64 <udp_bind>
    if (err != ERR_OK) {
 800df34:	2800      	cmp	r0, #0
 800df36:	d0ec      	beq.n	800df12 <udp_connect+0x2e>
 800df38:	e7e2      	b.n	800df00 <udp_connect+0x1c>
    if (pcb == ipcb) {
 800df3a:	42a0      	cmp	r0, r4
 800df3c:	d001      	beq.n	800df42 <udp_connect+0x5e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800df3e:	68c0      	ldr	r0, [r0, #12]
 800df40:	e7f1      	b.n	800df26 <udp_connect+0x42>
      return ERR_OK;
 800df42:	2000      	movs	r0, #0
 800df44:	e7dc      	b.n	800df00 <udp_connect+0x1c>
 800df46:	bf00      	nop
 800df48:	0801640a 	.word	0x0801640a
 800df4c:	080166b4 	.word	0x080166b4
 800df50:	0801342c 	.word	0x0801342c
 800df54:	080166cd 	.word	0x080166cd
 800df58:	20010d6c 	.word	0x20010d6c

0800df5c <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800df5c:	b930      	cbnz	r0, 800df6c <udp_recv+0x10>
 800df5e:	4b05      	ldr	r3, [pc, #20]	; (800df74 <udp_recv+0x18>)
 800df60:	f240 428a 	movw	r2, #1162	; 0x48a
 800df64:	4904      	ldr	r1, [pc, #16]	; (800df78 <udp_recv+0x1c>)
 800df66:	4805      	ldr	r0, [pc, #20]	; (800df7c <udp_recv+0x20>)
 800df68:	f000 ba10 	b.w	800e38c <iprintf>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 800df6c:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 800df70:	4770      	bx	lr
 800df72:	bf00      	nop
 800df74:	0801640a 	.word	0x0801640a
 800df78:	08016705 	.word	0x08016705
 800df7c:	0801342c 	.word	0x0801342c

0800df80 <udp_remove>:
{
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800df80:	4601      	mov	r1, r0
 800df82:	b930      	cbnz	r0, 800df92 <udp_remove+0x12>
 800df84:	4b0d      	ldr	r3, [pc, #52]	; (800dfbc <udp_remove+0x3c>)
 800df86:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800df8a:	490d      	ldr	r1, [pc, #52]	; (800dfc0 <udp_remove+0x40>)
 800df8c:	480d      	ldr	r0, [pc, #52]	; (800dfc4 <udp_remove+0x44>)
 800df8e:	f000 b9fd 	b.w	800e38c <iprintf>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800df92:	4a0d      	ldr	r2, [pc, #52]	; (800dfc8 <udp_remove+0x48>)
 800df94:	6813      	ldr	r3, [r2, #0]
 800df96:	4283      	cmp	r3, r0
 800df98:	d105      	bne.n	800dfa6 <udp_remove+0x26>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800df9a:	68c3      	ldr	r3, [r0, #12]
 800df9c:	6013      	str	r3, [r2, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800df9e:	2000      	movs	r0, #0
 800dfa0:	f7fb be18 	b.w	8009bd4 <memp_free>
 800dfa4:	4613      	mov	r3, r2
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d0f9      	beq.n	800df9e <udp_remove+0x1e>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800dfaa:	68da      	ldr	r2, [r3, #12]
 800dfac:	2a00      	cmp	r2, #0
 800dfae:	d0f6      	beq.n	800df9e <udp_remove+0x1e>
 800dfb0:	428a      	cmp	r2, r1
 800dfb2:	d1f7      	bne.n	800dfa4 <udp_remove+0x24>
        pcb2->next = pcb->next;
 800dfb4:	68ca      	ldr	r2, [r1, #12]
 800dfb6:	60da      	str	r2, [r3, #12]
        break;
 800dfb8:	e7f1      	b.n	800df9e <udp_remove+0x1e>
 800dfba:	bf00      	nop
 800dfbc:	0801640a 	.word	0x0801640a
 800dfc0:	0801671b 	.word	0x0801671b
 800dfc4:	0801342c 	.word	0x0801342c
 800dfc8:	20010d6c 	.word	0x20010d6c

0800dfcc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800dfcc:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800dfce:	2000      	movs	r0, #0
 800dfd0:	f7fb fde4 	bl	8009b9c <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800dfd4:	4604      	mov	r4, r0
 800dfd6:	b128      	cbz	r0, 800dfe4 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800dfd8:	2220      	movs	r2, #32
 800dfda:	2100      	movs	r1, #0
 800dfdc:	f000 f9ce 	bl	800e37c <memset>
    pcb->ttl = UDP_TTL;
 800dfe0:	23ff      	movs	r3, #255	; 0xff
 800dfe2:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800dfe4:	4620      	mov	r0, r4
 800dfe6:	bd10      	pop	{r4, pc}

0800dfe8 <udp_new_ip_type>:
{
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 800dfe8:	f7ff bff0 	b.w	800dfcc <udp_new>

0800dfec <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dfec:	b510      	push	{r4, lr}
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800dfee:	b138      	cbz	r0, 800e000 <udp_netif_ip_addr_changed+0x14>
 800dff0:	6803      	ldr	r3, [r0, #0]
 800dff2:	b12b      	cbz	r3, 800e000 <udp_netif_ip_addr_changed+0x14>
 800dff4:	b121      	cbz	r1, 800e000 <udp_netif_ip_addr_changed+0x14>
 800dff6:	680b      	ldr	r3, [r1, #0]
 800dff8:	b113      	cbz	r3, 800e000 <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800dffa:	4b06      	ldr	r3, [pc, #24]	; (800e014 <udp_netif_ip_addr_changed+0x28>)
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	b903      	cbnz	r3, 800e002 <udp_netif_ip_addr_changed+0x16>
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
      }
    }
  }
}
 800e000:	bd10      	pop	{r4, pc}
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e002:	681c      	ldr	r4, [r3, #0]
 800e004:	6802      	ldr	r2, [r0, #0]
 800e006:	4294      	cmp	r4, r2
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e008:	bf04      	itt	eq
 800e00a:	680a      	ldreq	r2, [r1, #0]
 800e00c:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e00e:	68db      	ldr	r3, [r3, #12]
 800e010:	e7f5      	b.n	800dffe <udp_netif_ip_addr_changed+0x12>
 800e012:	bf00      	nop
 800e014:	20010d6c 	.word	0x20010d6c

0800e018 <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800e018:	8943      	ldrh	r3, [r0, #10]
 800e01a:	2b0e      	cmp	r3, #14
{
 800e01c:	b570      	push	{r4, r5, r6, lr}
 800e01e:	4604      	mov	r4, r0
 800e020:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 800e022:	d91a      	bls.n	800e05a <ethernet_input+0x42>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800e024:	7bc3      	ldrb	r3, [r0, #15]
 800e026:	b91b      	cbnz	r3, 800e030 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 800e028:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
 800e02c:	3301      	adds	r3, #1
 800e02e:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e030:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e032:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 800e034:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 800e036:	07d9      	lsls	r1, r3, #31
 800e038:	d50a      	bpl.n	800e050 <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e03a:	2b01      	cmp	r3, #1
 800e03c:	d111      	bne.n	800e062 <ethernet_input+0x4a>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e03e:	7843      	ldrb	r3, [r0, #1]
 800e040:	b933      	cbnz	r3, 800e050 <ethernet_input+0x38>
 800e042:	7883      	ldrb	r3, [r0, #2]
 800e044:	2b5e      	cmp	r3, #94	; 0x5e
 800e046:	d103      	bne.n	800e050 <ethernet_input+0x38>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800e048:	7b63      	ldrb	r3, [r4, #13]
 800e04a:	f043 0310 	orr.w	r3, r3, #16
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e04e:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800e050:	2e08      	cmp	r6, #8
 800e052:	d010      	beq.n	800e076 <ethernet_input+0x5e>
 800e054:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800e058:	d01d      	beq.n	800e096 <ethernet_input+0x7e>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800e05a:	4620      	mov	r0, r4
 800e05c:	f7fb ffe4 	bl	800a028 <pbuf_free>
  return ERR_OK;
 800e060:	e017      	b.n	800e092 <ethernet_input+0x7a>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e062:	2206      	movs	r2, #6
 800e064:	4913      	ldr	r1, [pc, #76]	; (800e0b4 <ethernet_input+0x9c>)
 800e066:	f000 f96d 	bl	800e344 <memcmp>
 800e06a:	2800      	cmp	r0, #0
 800e06c:	d1f0      	bne.n	800e050 <ethernet_input+0x38>
      p->flags |= PBUF_FLAG_LLBCAST;
 800e06e:	7b63      	ldrb	r3, [r4, #13]
 800e070:	f043 0308 	orr.w	r3, r3, #8
 800e074:	e7eb      	b.n	800e04e <ethernet_input+0x36>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e076:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 800e07a:	071a      	lsls	r2, r3, #28
 800e07c:	d5ed      	bpl.n	800e05a <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e07e:	210e      	movs	r1, #14
 800e080:	4620      	mov	r0, r4
 800e082:	f7fb ff9d 	bl	8009fc0 <pbuf_remove_header>
 800e086:	2800      	cmp	r0, #0
 800e088:	d1e7      	bne.n	800e05a <ethernet_input+0x42>
        ip4_input(p, netif);
 800e08a:	4629      	mov	r1, r5
 800e08c:	4620      	mov	r0, r4
 800e08e:	f7fa fcd5 	bl	8008a3c <ip4_input>
}
 800e092:	2000      	movs	r0, #0
 800e094:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e096:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 800e09a:	071b      	lsls	r3, r3, #28
 800e09c:	d5dd      	bpl.n	800e05a <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e09e:	210e      	movs	r1, #14
 800e0a0:	4620      	mov	r0, r4
 800e0a2:	f7fb ff8d 	bl	8009fc0 <pbuf_remove_header>
 800e0a6:	2800      	cmp	r0, #0
 800e0a8:	d1d7      	bne.n	800e05a <ethernet_input+0x42>
        etharp_input(p, netif);
 800e0aa:	4629      	mov	r1, r5
 800e0ac:	4620      	mov	r0, r4
 800e0ae:	f7fa f91f 	bl	80082f0 <etharp_input>
      break;
 800e0b2:	e7ee      	b.n	800e092 <ethernet_input+0x7a>
 800e0b4:	08013390 	.word	0x08013390

0800e0b8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800e0b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0bc:	460d      	mov	r5, r1
 800e0be:	4604      	mov	r4, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e0c0:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 800e0c4:	4616      	mov	r6, r2
 800e0c6:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 800e0c8:	f7fb fa48 	bl	800955c <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e0cc:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 800e0ce:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e0d0:	4628      	mov	r0, r5
 800e0d2:	f7fb ff71 	bl	8009fb8 <pbuf_add_header>
 800e0d6:	b9e0      	cbnz	r0, 800e112 <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800e0d8:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 800e0da:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	600b      	str	r3, [r1, #0]
 800e0e2:	88bb      	ldrh	r3, [r7, #4]
 800e0e4:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800e0e6:	6833      	ldr	r3, [r6, #0]
 800e0e8:	f8c1 3006 	str.w	r3, [r1, #6]
 800e0ec:	88b3      	ldrh	r3, [r6, #4]
 800e0ee:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e0f0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800e0f4:	2b06      	cmp	r3, #6
 800e0f6:	d006      	beq.n	800e106 <ethernet_output+0x4e>
 800e0f8:	4b08      	ldr	r3, [pc, #32]	; (800e11c <ethernet_output+0x64>)
 800e0fa:	f44f 7299 	mov.w	r2, #306	; 0x132
 800e0fe:	4908      	ldr	r1, [pc, #32]	; (800e120 <ethernet_output+0x68>)
 800e100:	4808      	ldr	r0, [pc, #32]	; (800e124 <ethernet_output+0x6c>)
 800e102:	f000 f943 	bl	800e38c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e106:	69a3      	ldr	r3, [r4, #24]
 800e108:	4629      	mov	r1, r5
 800e10a:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800e10c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 800e110:	4718      	bx	r3
}
 800e112:	f06f 0001 	mvn.w	r0, #1
 800e116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e11a:	bf00      	nop
 800e11c:	08016733 	.word	0x08016733
 800e120:	0801679f 	.word	0x0801679f
 800e124:	0801342c 	.word	0x0801342c

0800e128 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800e128:	b513      	push	{r0, r1, r4, lr}
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 800e12a:	2304      	movs	r3, #4
{
 800e12c:	4604      	mov	r4, r0
  osMessageQDef(QUEUE, size, void *);
 800e12e:	9100      	str	r1, [sp, #0]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800e130:	4668      	mov	r0, sp
 800e132:	2100      	movs	r1, #0
  osMessageQDef(QUEUE, size, void *);
 800e134:	9301      	str	r3, [sp, #4]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800e136:	f7f6 fffd 	bl	8005134 <osMessageCreate>
 800e13a:	6020      	str	r0, [r4, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800e13c:	fab0 f080 	clz	r0, r0
 800e140:	0940      	lsrs	r0, r0, #5
    return ERR_MEM;

  return ERR_OK;
}
 800e142:	4240      	negs	r0, r0
 800e144:	b002      	add	sp, #8
 800e146:	bd10      	pop	{r4, pc}

0800e148 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 800e148:	b510      	push	{r4, lr}
 800e14a:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 800e14c:	6800      	ldr	r0, [r0, #0]
 800e14e:	f7f7 f861 	bl	8005214 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 800e152:	6820      	ldr	r0, [r4, #0]
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 800e154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  osMessageDelete(*mbox);
 800e158:	f7f7 b863 	b.w	8005222 <osMessageDelete>

0800e15c <sys_mbox_trypost>:
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800e15c:	2200      	movs	r2, #0
 800e15e:	6800      	ldr	r0, [r0, #0]
{
 800e160:	b508      	push	{r3, lr}
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800e162:	f7f6 ffed 	bl	8005140 <osMessagePut>
 800e166:	3800      	subs	r0, #0
 800e168:	bf18      	it	ne
 800e16a:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 800e16c:	4240      	negs	r0, r0
 800e16e:	bd08      	pop	{r3, pc}

0800e170 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800e170:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e172:	4617      	mov	r7, r2
 800e174:	b085      	sub	sp, #20
 800e176:	4606      	mov	r6, r0
 800e178:	460d      	mov	r5, r1
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 800e17a:	f7f6 ff20 	bl	8004fbe <osKernelSysTick>
 800e17e:	4604      	mov	r4, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800e180:	b177      	cbz	r7, 800e1a0 <sys_arch_mbox_fetch+0x30>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 800e182:	463a      	mov	r2, r7
 800e184:	6831      	ldr	r1, [r6, #0]
 800e186:	a801      	add	r0, sp, #4
 800e188:	f7f7 f802 	bl	8005190 <osMessageGet>

    if(event.status == osEventMessage)
 800e18c:	9b01      	ldr	r3, [sp, #4]
 800e18e:	2b10      	cmp	r3, #16
 800e190:	d10d      	bne.n	800e1ae <sys_arch_mbox_fetch+0x3e>
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
 800e192:	9b02      	ldr	r3, [sp, #8]
 800e194:	602b      	str	r3, [r5, #0]
    return (osKernelSysTick() - starttime);
 800e196:	f7f6 ff12 	bl	8004fbe <osKernelSysTick>
 800e19a:	1b00      	subs	r0, r0, r4
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800e19c:	b005      	add	sp, #20
 800e19e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 800e1a0:	f04f 32ff 	mov.w	r2, #4294967295
 800e1a4:	6831      	ldr	r1, [r6, #0]
 800e1a6:	a801      	add	r0, sp, #4
 800e1a8:	f7f6 fff2 	bl	8005190 <osMessageGet>
 800e1ac:	e7f1      	b.n	800e192 <sys_arch_mbox_fetch+0x22>
      return SYS_ARCH_TIMEOUT;
 800e1ae:	f04f 30ff 	mov.w	r0, #4294967295
 800e1b2:	e7f3      	b.n	800e19c <sys_arch_mbox_fetch+0x2c>

0800e1b4 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 800e1b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e1b6:	460c      	mov	r4, r1
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	6801      	ldr	r1, [r0, #0]
 800e1bc:	a801      	add	r0, sp, #4
 800e1be:	f7f6 ffe7 	bl	8005190 <osMessageGet>

  if(event.status == osEventMessage)
 800e1c2:	9b01      	ldr	r3, [sp, #4]
 800e1c4:	2b10      	cmp	r3, #16
  {
    *msg = (void *)event.value.v;
 800e1c6:	bf05      	ittet	eq
 800e1c8:	9b02      	ldreq	r3, [sp, #8]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 800e1ca:	2000      	moveq	r0, #0
  }
  else
  {
    return SYS_MBOX_EMPTY;
 800e1cc:	f04f 30ff 	movne.w	r0, #4294967295
    *msg = (void *)event.value.v;
 800e1d0:	6023      	streq	r3, [r4, #0]
  }
}
 800e1d2:	b004      	add	sp, #16
 800e1d4:	bd10      	pop	{r4, pc}

0800e1d6 <sys_mbox_valid>:
 800e1d6:	6800      	ldr	r0, [r0, #0]
 800e1d8:	3800      	subs	r0, #0
 800e1da:	bf18      	it	ne
 800e1dc:	2001      	movne	r0, #1
 800e1de:	4770      	bx	lr

0800e1e0 <sys_mbox_set_invalid>:
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	6003      	str	r3, [r0, #0]
 800e1e4:	4770      	bx	lr

0800e1e6 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 800e1e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e1e8:	4606      	mov	r6, r0
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 800e1ea:	2400      	movs	r4, #0
{
 800e1ec:	460d      	mov	r5, r1
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 800e1ee:	a801      	add	r0, sp, #4
 800e1f0:	2101      	movs	r1, #1
  osSemaphoreDef(SEM);
 800e1f2:	9401      	str	r4, [sp, #4]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 800e1f4:	f7f6 ff5e 	bl	80050b4 <osSemaphoreCreate>
 800e1f8:	6030      	str	r0, [r6, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 800e1fa:	b130      	cbz	r0, 800e20a <sys_sem_new+0x24>
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
  }

  if(count == 0)	// Means it can't be taken
 800e1fc:	b945      	cbnz	r5, 800e210 <sys_sem_new+0x2a>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 800e1fe:	4629      	mov	r1, r5
 800e200:	f7f6 ff6e 	bl	80050e0 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 800e204:	4628      	mov	r0, r5
}
 800e206:	b002      	add	sp, #8
 800e208:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 800e20a:	f04f 30ff 	mov.w	r0, #4294967295
 800e20e:	e7fa      	b.n	800e206 <sys_sem_new+0x20>
  return ERR_OK;
 800e210:	4620      	mov	r0, r4
 800e212:	e7f8      	b.n	800e206 <sys_sem_new+0x20>

0800e214 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 800e214:	b570      	push	{r4, r5, r6, lr}
 800e216:	460e      	mov	r6, r1
 800e218:	4605      	mov	r5, r0
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 800e21a:	f7f6 fed0 	bl	8004fbe <osKernelSysTick>
 800e21e:	4604      	mov	r4, r0
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800e220:	b146      	cbz	r6, 800e234 <sys_arch_sem_wait+0x20>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 800e222:	4631      	mov	r1, r6
 800e224:	6828      	ldr	r0, [r5, #0]
 800e226:	f7f6 ff5b 	bl	80050e0 <osSemaphoreWait>
 800e22a:	b958      	cbnz	r0, 800e244 <sys_arch_sem_wait+0x30>
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
 800e22c:	f7f6 fec7 	bl	8004fbe <osKernelSysTick>
 800e230:	1b00      	subs	r0, r0, r4
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800e232:	bd70      	pop	{r4, r5, r6, pc}
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 800e234:	f04f 31ff 	mov.w	r1, #4294967295
 800e238:	6828      	ldr	r0, [r5, #0]
 800e23a:	f7f6 ff51 	bl	80050e0 <osSemaphoreWait>
 800e23e:	2800      	cmp	r0, #0
 800e240:	d1f8      	bne.n	800e234 <sys_arch_sem_wait+0x20>
 800e242:	e7f3      	b.n	800e22c <sys_arch_sem_wait+0x18>
      return SYS_ARCH_TIMEOUT;
 800e244:	f04f 30ff 	mov.w	r0, #4294967295
 800e248:	e7f3      	b.n	800e232 <sys_arch_sem_wait+0x1e>

0800e24a <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
  osSemaphoreRelease(*sem);
 800e24a:	6800      	ldr	r0, [r0, #0]
 800e24c:	f7f6 bf6e 	b.w	800512c <osSemaphoreRelease>

0800e250 <sys_sem_free>:
{
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 800e250:	6800      	ldr	r0, [r0, #0]
 800e252:	f7f6 bf6d 	b.w	8005130 <osSemaphoreDelete>

0800e256 <sys_sem_valid>:
}
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
  if (*sem == SYS_SEM_NULL)
 800e256:	6800      	ldr	r0, [r0, #0]
    return 0;
  else
    return 1;
}
 800e258:	3800      	subs	r0, #0
 800e25a:	bf18      	it	ne
 800e25c:	2001      	movne	r0, #1
 800e25e:	4770      	bx	lr

0800e260 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
  *sem = SYS_SEM_NULL;
 800e260:	2300      	movs	r3, #0
 800e262:	6003      	str	r3, [r0, #0]
}
 800e264:	4770      	bx	lr
	...

0800e268 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800e268:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 800e26a:	4803      	ldr	r0, [pc, #12]	; (800e278 <sys_init+0x10>)
 800e26c:	f7f6 fecb 	bl	8005006 <osMutexCreate>
 800e270:	4b02      	ldr	r3, [pc, #8]	; (800e27c <sys_init+0x14>)
 800e272:	6018      	str	r0, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 800e274:	bd08      	pop	{r3, pc}
 800e276:	bf00      	nop
 800e278:	0801339c 	.word	0x0801339c
 800e27c:	20010d74 	.word	0x20010d74

0800e280 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800e280:	b513      	push	{r0, r1, r4, lr}

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 800e282:	2300      	movs	r3, #0
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800e284:	4604      	mov	r4, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 800e286:	a801      	add	r0, sp, #4
  osMutexDef(MUTEX);
 800e288:	9301      	str	r3, [sp, #4]
  *mutex = osMutexCreate(osMutex(MUTEX));
 800e28a:	f7f6 febc 	bl	8005006 <osMutexCreate>
 800e28e:	6020      	str	r0, [r4, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 800e290:	fab0 f080 	clz	r0, r0
 800e294:	0940      	lsrs	r0, r0, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 800e296:	4240      	negs	r0, r0
 800e298:	b002      	add	sp, #8
 800e29a:	bd10      	pop	{r4, pc}

0800e29c <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 800e29c:	f04f 31ff 	mov.w	r1, #4294967295
 800e2a0:	6800      	ldr	r0, [r0, #0]
 800e2a2:	f7f6 beb3 	b.w	800500c <osMutexWait>

0800e2a6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 800e2a6:	6800      	ldr	r0, [r0, #0]
 800e2a8:	f7f6 bed6 	b.w	8005058 <osMutexRelease>

0800e2ac <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800e2ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800e2ae:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800e2b2:	9908      	ldr	r1, [sp, #32]
  return osThreadCreate(&os_thread_def, arg);
 800e2b4:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800e2b6:	f8ad 100c 	strh.w	r1, [sp, #12]
 800e2ba:	2100      	movs	r1, #0
 800e2bc:	e9cd 1304 	strd	r1, r3, [sp, #16]
  return osThreadCreate(&os_thread_def, arg);
 800e2c0:	4611      	mov	r1, r2
 800e2c2:	f7f6 fe83 	bl	8004fcc <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 800e2c6:	b007      	add	sp, #28
 800e2c8:	f85d fb04 	ldr.w	pc, [sp], #4

0800e2cc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800e2cc:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 800e2ce:	4b04      	ldr	r3, [pc, #16]	; (800e2e0 <sys_arch_protect+0x14>)
 800e2d0:	f04f 31ff 	mov.w	r1, #4294967295
 800e2d4:	6818      	ldr	r0, [r3, #0]
 800e2d6:	f7f6 fe99 	bl	800500c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
}
 800e2da:	2001      	movs	r0, #1
 800e2dc:	bd08      	pop	{r3, pc}
 800e2de:	bf00      	nop
 800e2e0:	20010d74 	.word	0x20010d74

0800e2e4 <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800e2e4:	4b01      	ldr	r3, [pc, #4]	; (800e2ec <sys_arch_unprotect+0x8>)
 800e2e6:	6818      	ldr	r0, [r3, #0]
 800e2e8:	f7f6 beb6 	b.w	8005058 <osMutexRelease>
 800e2ec:	20010d74 	.word	0x20010d74

0800e2f0 <__errno>:
 800e2f0:	4b01      	ldr	r3, [pc, #4]	; (800e2f8 <__errno+0x8>)
 800e2f2:	6818      	ldr	r0, [r3, #0]
 800e2f4:	4770      	bx	lr
 800e2f6:	bf00      	nop
 800e2f8:	20000048 	.word	0x20000048

0800e2fc <__libc_init_array>:
 800e2fc:	b570      	push	{r4, r5, r6, lr}
 800e2fe:	4d0d      	ldr	r5, [pc, #52]	; (800e334 <__libc_init_array+0x38>)
 800e300:	4c0d      	ldr	r4, [pc, #52]	; (800e338 <__libc_init_array+0x3c>)
 800e302:	1b64      	subs	r4, r4, r5
 800e304:	10a4      	asrs	r4, r4, #2
 800e306:	2600      	movs	r6, #0
 800e308:	42a6      	cmp	r6, r4
 800e30a:	d109      	bne.n	800e320 <__libc_init_array+0x24>
 800e30c:	4d0b      	ldr	r5, [pc, #44]	; (800e33c <__libc_init_array+0x40>)
 800e30e:	4c0c      	ldr	r4, [pc, #48]	; (800e340 <__libc_init_array+0x44>)
 800e310:	f001 f8e6 	bl	800f4e0 <_init>
 800e314:	1b64      	subs	r4, r4, r5
 800e316:	10a4      	asrs	r4, r4, #2
 800e318:	2600      	movs	r6, #0
 800e31a:	42a6      	cmp	r6, r4
 800e31c:	d105      	bne.n	800e32a <__libc_init_array+0x2e>
 800e31e:	bd70      	pop	{r4, r5, r6, pc}
 800e320:	f855 3b04 	ldr.w	r3, [r5], #4
 800e324:	4798      	blx	r3
 800e326:	3601      	adds	r6, #1
 800e328:	e7ee      	b.n	800e308 <__libc_init_array+0xc>
 800e32a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e32e:	4798      	blx	r3
 800e330:	3601      	adds	r6, #1
 800e332:	e7f2      	b.n	800e31a <__libc_init_array+0x1e>
 800e334:	08016924 	.word	0x08016924
 800e338:	08016924 	.word	0x08016924
 800e33c:	08016924 	.word	0x08016924
 800e340:	08016928 	.word	0x08016928

0800e344 <memcmp>:
 800e344:	b530      	push	{r4, r5, lr}
 800e346:	3901      	subs	r1, #1
 800e348:	2400      	movs	r4, #0
 800e34a:	42a2      	cmp	r2, r4
 800e34c:	d101      	bne.n	800e352 <memcmp+0xe>
 800e34e:	2000      	movs	r0, #0
 800e350:	e005      	b.n	800e35e <memcmp+0x1a>
 800e352:	5d03      	ldrb	r3, [r0, r4]
 800e354:	3401      	adds	r4, #1
 800e356:	5d0d      	ldrb	r5, [r1, r4]
 800e358:	42ab      	cmp	r3, r5
 800e35a:	d0f6      	beq.n	800e34a <memcmp+0x6>
 800e35c:	1b58      	subs	r0, r3, r5
 800e35e:	bd30      	pop	{r4, r5, pc}

0800e360 <memcpy>:
 800e360:	440a      	add	r2, r1
 800e362:	4291      	cmp	r1, r2
 800e364:	f100 33ff 	add.w	r3, r0, #4294967295
 800e368:	d100      	bne.n	800e36c <memcpy+0xc>
 800e36a:	4770      	bx	lr
 800e36c:	b510      	push	{r4, lr}
 800e36e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e372:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e376:	4291      	cmp	r1, r2
 800e378:	d1f9      	bne.n	800e36e <memcpy+0xe>
 800e37a:	bd10      	pop	{r4, pc}

0800e37c <memset>:
 800e37c:	4402      	add	r2, r0
 800e37e:	4603      	mov	r3, r0
 800e380:	4293      	cmp	r3, r2
 800e382:	d100      	bne.n	800e386 <memset+0xa>
 800e384:	4770      	bx	lr
 800e386:	f803 1b01 	strb.w	r1, [r3], #1
 800e38a:	e7f9      	b.n	800e380 <memset+0x4>

0800e38c <iprintf>:
 800e38c:	b40f      	push	{r0, r1, r2, r3}
 800e38e:	4b0a      	ldr	r3, [pc, #40]	; (800e3b8 <iprintf+0x2c>)
 800e390:	b513      	push	{r0, r1, r4, lr}
 800e392:	681c      	ldr	r4, [r3, #0]
 800e394:	b124      	cbz	r4, 800e3a0 <iprintf+0x14>
 800e396:	69a3      	ldr	r3, [r4, #24]
 800e398:	b913      	cbnz	r3, 800e3a0 <iprintf+0x14>
 800e39a:	4620      	mov	r0, r4
 800e39c:	f000 fad6 	bl	800e94c <__sinit>
 800e3a0:	ab05      	add	r3, sp, #20
 800e3a2:	9a04      	ldr	r2, [sp, #16]
 800e3a4:	68a1      	ldr	r1, [r4, #8]
 800e3a6:	9301      	str	r3, [sp, #4]
 800e3a8:	4620      	mov	r0, r4
 800e3aa:	f000 fcc1 	bl	800ed30 <_vfiprintf_r>
 800e3ae:	b002      	add	sp, #8
 800e3b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3b4:	b004      	add	sp, #16
 800e3b6:	4770      	bx	lr
 800e3b8:	20000048 	.word	0x20000048

0800e3bc <_puts_r>:
 800e3bc:	b570      	push	{r4, r5, r6, lr}
 800e3be:	460e      	mov	r6, r1
 800e3c0:	4605      	mov	r5, r0
 800e3c2:	b118      	cbz	r0, 800e3cc <_puts_r+0x10>
 800e3c4:	6983      	ldr	r3, [r0, #24]
 800e3c6:	b90b      	cbnz	r3, 800e3cc <_puts_r+0x10>
 800e3c8:	f000 fac0 	bl	800e94c <__sinit>
 800e3cc:	69ab      	ldr	r3, [r5, #24]
 800e3ce:	68ac      	ldr	r4, [r5, #8]
 800e3d0:	b913      	cbnz	r3, 800e3d8 <_puts_r+0x1c>
 800e3d2:	4628      	mov	r0, r5
 800e3d4:	f000 faba 	bl	800e94c <__sinit>
 800e3d8:	4b2c      	ldr	r3, [pc, #176]	; (800e48c <_puts_r+0xd0>)
 800e3da:	429c      	cmp	r4, r3
 800e3dc:	d120      	bne.n	800e420 <_puts_r+0x64>
 800e3de:	686c      	ldr	r4, [r5, #4]
 800e3e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e3e2:	07db      	lsls	r3, r3, #31
 800e3e4:	d405      	bmi.n	800e3f2 <_puts_r+0x36>
 800e3e6:	89a3      	ldrh	r3, [r4, #12]
 800e3e8:	0598      	lsls	r0, r3, #22
 800e3ea:	d402      	bmi.n	800e3f2 <_puts_r+0x36>
 800e3ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e3ee:	f000 fb5d 	bl	800eaac <__retarget_lock_acquire_recursive>
 800e3f2:	89a3      	ldrh	r3, [r4, #12]
 800e3f4:	0719      	lsls	r1, r3, #28
 800e3f6:	d51d      	bpl.n	800e434 <_puts_r+0x78>
 800e3f8:	6923      	ldr	r3, [r4, #16]
 800e3fa:	b1db      	cbz	r3, 800e434 <_puts_r+0x78>
 800e3fc:	3e01      	subs	r6, #1
 800e3fe:	68a3      	ldr	r3, [r4, #8]
 800e400:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e404:	3b01      	subs	r3, #1
 800e406:	60a3      	str	r3, [r4, #8]
 800e408:	bb39      	cbnz	r1, 800e45a <_puts_r+0x9e>
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	da38      	bge.n	800e480 <_puts_r+0xc4>
 800e40e:	4622      	mov	r2, r4
 800e410:	210a      	movs	r1, #10
 800e412:	4628      	mov	r0, r5
 800e414:	f000 f8a2 	bl	800e55c <__swbuf_r>
 800e418:	3001      	adds	r0, #1
 800e41a:	d011      	beq.n	800e440 <_puts_r+0x84>
 800e41c:	250a      	movs	r5, #10
 800e41e:	e011      	b.n	800e444 <_puts_r+0x88>
 800e420:	4b1b      	ldr	r3, [pc, #108]	; (800e490 <_puts_r+0xd4>)
 800e422:	429c      	cmp	r4, r3
 800e424:	d101      	bne.n	800e42a <_puts_r+0x6e>
 800e426:	68ac      	ldr	r4, [r5, #8]
 800e428:	e7da      	b.n	800e3e0 <_puts_r+0x24>
 800e42a:	4b1a      	ldr	r3, [pc, #104]	; (800e494 <_puts_r+0xd8>)
 800e42c:	429c      	cmp	r4, r3
 800e42e:	bf08      	it	eq
 800e430:	68ec      	ldreq	r4, [r5, #12]
 800e432:	e7d5      	b.n	800e3e0 <_puts_r+0x24>
 800e434:	4621      	mov	r1, r4
 800e436:	4628      	mov	r0, r5
 800e438:	f000 f8e2 	bl	800e600 <__swsetup_r>
 800e43c:	2800      	cmp	r0, #0
 800e43e:	d0dd      	beq.n	800e3fc <_puts_r+0x40>
 800e440:	f04f 35ff 	mov.w	r5, #4294967295
 800e444:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e446:	07da      	lsls	r2, r3, #31
 800e448:	d405      	bmi.n	800e456 <_puts_r+0x9a>
 800e44a:	89a3      	ldrh	r3, [r4, #12]
 800e44c:	059b      	lsls	r3, r3, #22
 800e44e:	d402      	bmi.n	800e456 <_puts_r+0x9a>
 800e450:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e452:	f000 fb2c 	bl	800eaae <__retarget_lock_release_recursive>
 800e456:	4628      	mov	r0, r5
 800e458:	bd70      	pop	{r4, r5, r6, pc}
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	da04      	bge.n	800e468 <_puts_r+0xac>
 800e45e:	69a2      	ldr	r2, [r4, #24]
 800e460:	429a      	cmp	r2, r3
 800e462:	dc06      	bgt.n	800e472 <_puts_r+0xb6>
 800e464:	290a      	cmp	r1, #10
 800e466:	d004      	beq.n	800e472 <_puts_r+0xb6>
 800e468:	6823      	ldr	r3, [r4, #0]
 800e46a:	1c5a      	adds	r2, r3, #1
 800e46c:	6022      	str	r2, [r4, #0]
 800e46e:	7019      	strb	r1, [r3, #0]
 800e470:	e7c5      	b.n	800e3fe <_puts_r+0x42>
 800e472:	4622      	mov	r2, r4
 800e474:	4628      	mov	r0, r5
 800e476:	f000 f871 	bl	800e55c <__swbuf_r>
 800e47a:	3001      	adds	r0, #1
 800e47c:	d1bf      	bne.n	800e3fe <_puts_r+0x42>
 800e47e:	e7df      	b.n	800e440 <_puts_r+0x84>
 800e480:	6823      	ldr	r3, [r4, #0]
 800e482:	250a      	movs	r5, #10
 800e484:	1c5a      	adds	r2, r3, #1
 800e486:	6022      	str	r2, [r4, #0]
 800e488:	701d      	strb	r5, [r3, #0]
 800e48a:	e7db      	b.n	800e444 <_puts_r+0x88>
 800e48c:	080168a8 	.word	0x080168a8
 800e490:	080168c8 	.word	0x080168c8
 800e494:	08016888 	.word	0x08016888

0800e498 <puts>:
 800e498:	4b02      	ldr	r3, [pc, #8]	; (800e4a4 <puts+0xc>)
 800e49a:	4601      	mov	r1, r0
 800e49c:	6818      	ldr	r0, [r3, #0]
 800e49e:	f7ff bf8d 	b.w	800e3bc <_puts_r>
 800e4a2:	bf00      	nop
 800e4a4:	20000048 	.word	0x20000048

0800e4a8 <rand>:
 800e4a8:	4b17      	ldr	r3, [pc, #92]	; (800e508 <rand+0x60>)
 800e4aa:	b510      	push	{r4, lr}
 800e4ac:	681c      	ldr	r4, [r3, #0]
 800e4ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e4b0:	b9b3      	cbnz	r3, 800e4e0 <rand+0x38>
 800e4b2:	2018      	movs	r0, #24
 800e4b4:	f000 fb60 	bl	800eb78 <malloc>
 800e4b8:	63a0      	str	r0, [r4, #56]	; 0x38
 800e4ba:	b928      	cbnz	r0, 800e4c8 <rand+0x20>
 800e4bc:	4602      	mov	r2, r0
 800e4be:	4b13      	ldr	r3, [pc, #76]	; (800e50c <rand+0x64>)
 800e4c0:	4813      	ldr	r0, [pc, #76]	; (800e510 <rand+0x68>)
 800e4c2:	214e      	movs	r1, #78	; 0x4e
 800e4c4:	f000 f90a 	bl	800e6dc <__assert_func>
 800e4c8:	4a12      	ldr	r2, [pc, #72]	; (800e514 <rand+0x6c>)
 800e4ca:	4b13      	ldr	r3, [pc, #76]	; (800e518 <rand+0x70>)
 800e4cc:	e9c0 2300 	strd	r2, r3, [r0]
 800e4d0:	4b12      	ldr	r3, [pc, #72]	; (800e51c <rand+0x74>)
 800e4d2:	6083      	str	r3, [r0, #8]
 800e4d4:	230b      	movs	r3, #11
 800e4d6:	8183      	strh	r3, [r0, #12]
 800e4d8:	2201      	movs	r2, #1
 800e4da:	2300      	movs	r3, #0
 800e4dc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800e4e0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e4e2:	480f      	ldr	r0, [pc, #60]	; (800e520 <rand+0x78>)
 800e4e4:	690a      	ldr	r2, [r1, #16]
 800e4e6:	694b      	ldr	r3, [r1, #20]
 800e4e8:	4c0e      	ldr	r4, [pc, #56]	; (800e524 <rand+0x7c>)
 800e4ea:	4350      	muls	r0, r2
 800e4ec:	fb04 0003 	mla	r0, r4, r3, r0
 800e4f0:	fba2 3404 	umull	r3, r4, r2, r4
 800e4f4:	1c5a      	adds	r2, r3, #1
 800e4f6:	4404      	add	r4, r0
 800e4f8:	f144 0000 	adc.w	r0, r4, #0
 800e4fc:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800e500:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e504:	bd10      	pop	{r4, pc}
 800e506:	bf00      	nop
 800e508:	20000048 	.word	0x20000048
 800e50c:	080167d4 	.word	0x080167d4
 800e510:	080167eb 	.word	0x080167eb
 800e514:	abcd330e 	.word	0xabcd330e
 800e518:	e66d1234 	.word	0xe66d1234
 800e51c:	0005deec 	.word	0x0005deec
 800e520:	5851f42d 	.word	0x5851f42d
 800e524:	4c957f2d 	.word	0x4c957f2d

0800e528 <strcpy>:
 800e528:	4603      	mov	r3, r0
 800e52a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e52e:	f803 2b01 	strb.w	r2, [r3], #1
 800e532:	2a00      	cmp	r2, #0
 800e534:	d1f9      	bne.n	800e52a <strcpy+0x2>
 800e536:	4770      	bx	lr

0800e538 <strncmp>:
 800e538:	b510      	push	{r4, lr}
 800e53a:	b16a      	cbz	r2, 800e558 <strncmp+0x20>
 800e53c:	3901      	subs	r1, #1
 800e53e:	1884      	adds	r4, r0, r2
 800e540:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e544:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e548:	4293      	cmp	r3, r2
 800e54a:	d103      	bne.n	800e554 <strncmp+0x1c>
 800e54c:	42a0      	cmp	r0, r4
 800e54e:	d001      	beq.n	800e554 <strncmp+0x1c>
 800e550:	2b00      	cmp	r3, #0
 800e552:	d1f5      	bne.n	800e540 <strncmp+0x8>
 800e554:	1a98      	subs	r0, r3, r2
 800e556:	bd10      	pop	{r4, pc}
 800e558:	4610      	mov	r0, r2
 800e55a:	e7fc      	b.n	800e556 <strncmp+0x1e>

0800e55c <__swbuf_r>:
 800e55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e55e:	460e      	mov	r6, r1
 800e560:	4614      	mov	r4, r2
 800e562:	4605      	mov	r5, r0
 800e564:	b118      	cbz	r0, 800e56e <__swbuf_r+0x12>
 800e566:	6983      	ldr	r3, [r0, #24]
 800e568:	b90b      	cbnz	r3, 800e56e <__swbuf_r+0x12>
 800e56a:	f000 f9ef 	bl	800e94c <__sinit>
 800e56e:	4b21      	ldr	r3, [pc, #132]	; (800e5f4 <__swbuf_r+0x98>)
 800e570:	429c      	cmp	r4, r3
 800e572:	d12b      	bne.n	800e5cc <__swbuf_r+0x70>
 800e574:	686c      	ldr	r4, [r5, #4]
 800e576:	69a3      	ldr	r3, [r4, #24]
 800e578:	60a3      	str	r3, [r4, #8]
 800e57a:	89a3      	ldrh	r3, [r4, #12]
 800e57c:	071a      	lsls	r2, r3, #28
 800e57e:	d52f      	bpl.n	800e5e0 <__swbuf_r+0x84>
 800e580:	6923      	ldr	r3, [r4, #16]
 800e582:	b36b      	cbz	r3, 800e5e0 <__swbuf_r+0x84>
 800e584:	6923      	ldr	r3, [r4, #16]
 800e586:	6820      	ldr	r0, [r4, #0]
 800e588:	1ac0      	subs	r0, r0, r3
 800e58a:	6963      	ldr	r3, [r4, #20]
 800e58c:	b2f6      	uxtb	r6, r6
 800e58e:	4283      	cmp	r3, r0
 800e590:	4637      	mov	r7, r6
 800e592:	dc04      	bgt.n	800e59e <__swbuf_r+0x42>
 800e594:	4621      	mov	r1, r4
 800e596:	4628      	mov	r0, r5
 800e598:	f000 f944 	bl	800e824 <_fflush_r>
 800e59c:	bb30      	cbnz	r0, 800e5ec <__swbuf_r+0x90>
 800e59e:	68a3      	ldr	r3, [r4, #8]
 800e5a0:	3b01      	subs	r3, #1
 800e5a2:	60a3      	str	r3, [r4, #8]
 800e5a4:	6823      	ldr	r3, [r4, #0]
 800e5a6:	1c5a      	adds	r2, r3, #1
 800e5a8:	6022      	str	r2, [r4, #0]
 800e5aa:	701e      	strb	r6, [r3, #0]
 800e5ac:	6963      	ldr	r3, [r4, #20]
 800e5ae:	3001      	adds	r0, #1
 800e5b0:	4283      	cmp	r3, r0
 800e5b2:	d004      	beq.n	800e5be <__swbuf_r+0x62>
 800e5b4:	89a3      	ldrh	r3, [r4, #12]
 800e5b6:	07db      	lsls	r3, r3, #31
 800e5b8:	d506      	bpl.n	800e5c8 <__swbuf_r+0x6c>
 800e5ba:	2e0a      	cmp	r6, #10
 800e5bc:	d104      	bne.n	800e5c8 <__swbuf_r+0x6c>
 800e5be:	4621      	mov	r1, r4
 800e5c0:	4628      	mov	r0, r5
 800e5c2:	f000 f92f 	bl	800e824 <_fflush_r>
 800e5c6:	b988      	cbnz	r0, 800e5ec <__swbuf_r+0x90>
 800e5c8:	4638      	mov	r0, r7
 800e5ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5cc:	4b0a      	ldr	r3, [pc, #40]	; (800e5f8 <__swbuf_r+0x9c>)
 800e5ce:	429c      	cmp	r4, r3
 800e5d0:	d101      	bne.n	800e5d6 <__swbuf_r+0x7a>
 800e5d2:	68ac      	ldr	r4, [r5, #8]
 800e5d4:	e7cf      	b.n	800e576 <__swbuf_r+0x1a>
 800e5d6:	4b09      	ldr	r3, [pc, #36]	; (800e5fc <__swbuf_r+0xa0>)
 800e5d8:	429c      	cmp	r4, r3
 800e5da:	bf08      	it	eq
 800e5dc:	68ec      	ldreq	r4, [r5, #12]
 800e5de:	e7ca      	b.n	800e576 <__swbuf_r+0x1a>
 800e5e0:	4621      	mov	r1, r4
 800e5e2:	4628      	mov	r0, r5
 800e5e4:	f000 f80c 	bl	800e600 <__swsetup_r>
 800e5e8:	2800      	cmp	r0, #0
 800e5ea:	d0cb      	beq.n	800e584 <__swbuf_r+0x28>
 800e5ec:	f04f 37ff 	mov.w	r7, #4294967295
 800e5f0:	e7ea      	b.n	800e5c8 <__swbuf_r+0x6c>
 800e5f2:	bf00      	nop
 800e5f4:	080168a8 	.word	0x080168a8
 800e5f8:	080168c8 	.word	0x080168c8
 800e5fc:	08016888 	.word	0x08016888

0800e600 <__swsetup_r>:
 800e600:	4b32      	ldr	r3, [pc, #200]	; (800e6cc <__swsetup_r+0xcc>)
 800e602:	b570      	push	{r4, r5, r6, lr}
 800e604:	681d      	ldr	r5, [r3, #0]
 800e606:	4606      	mov	r6, r0
 800e608:	460c      	mov	r4, r1
 800e60a:	b125      	cbz	r5, 800e616 <__swsetup_r+0x16>
 800e60c:	69ab      	ldr	r3, [r5, #24]
 800e60e:	b913      	cbnz	r3, 800e616 <__swsetup_r+0x16>
 800e610:	4628      	mov	r0, r5
 800e612:	f000 f99b 	bl	800e94c <__sinit>
 800e616:	4b2e      	ldr	r3, [pc, #184]	; (800e6d0 <__swsetup_r+0xd0>)
 800e618:	429c      	cmp	r4, r3
 800e61a:	d10f      	bne.n	800e63c <__swsetup_r+0x3c>
 800e61c:	686c      	ldr	r4, [r5, #4]
 800e61e:	89a3      	ldrh	r3, [r4, #12]
 800e620:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e624:	0719      	lsls	r1, r3, #28
 800e626:	d42c      	bmi.n	800e682 <__swsetup_r+0x82>
 800e628:	06dd      	lsls	r5, r3, #27
 800e62a:	d411      	bmi.n	800e650 <__swsetup_r+0x50>
 800e62c:	2309      	movs	r3, #9
 800e62e:	6033      	str	r3, [r6, #0]
 800e630:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e634:	81a3      	strh	r3, [r4, #12]
 800e636:	f04f 30ff 	mov.w	r0, #4294967295
 800e63a:	e03e      	b.n	800e6ba <__swsetup_r+0xba>
 800e63c:	4b25      	ldr	r3, [pc, #148]	; (800e6d4 <__swsetup_r+0xd4>)
 800e63e:	429c      	cmp	r4, r3
 800e640:	d101      	bne.n	800e646 <__swsetup_r+0x46>
 800e642:	68ac      	ldr	r4, [r5, #8]
 800e644:	e7eb      	b.n	800e61e <__swsetup_r+0x1e>
 800e646:	4b24      	ldr	r3, [pc, #144]	; (800e6d8 <__swsetup_r+0xd8>)
 800e648:	429c      	cmp	r4, r3
 800e64a:	bf08      	it	eq
 800e64c:	68ec      	ldreq	r4, [r5, #12]
 800e64e:	e7e6      	b.n	800e61e <__swsetup_r+0x1e>
 800e650:	0758      	lsls	r0, r3, #29
 800e652:	d512      	bpl.n	800e67a <__swsetup_r+0x7a>
 800e654:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e656:	b141      	cbz	r1, 800e66a <__swsetup_r+0x6a>
 800e658:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e65c:	4299      	cmp	r1, r3
 800e65e:	d002      	beq.n	800e666 <__swsetup_r+0x66>
 800e660:	4630      	mov	r0, r6
 800e662:	f000 fa91 	bl	800eb88 <_free_r>
 800e666:	2300      	movs	r3, #0
 800e668:	6363      	str	r3, [r4, #52]	; 0x34
 800e66a:	89a3      	ldrh	r3, [r4, #12]
 800e66c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e670:	81a3      	strh	r3, [r4, #12]
 800e672:	2300      	movs	r3, #0
 800e674:	6063      	str	r3, [r4, #4]
 800e676:	6923      	ldr	r3, [r4, #16]
 800e678:	6023      	str	r3, [r4, #0]
 800e67a:	89a3      	ldrh	r3, [r4, #12]
 800e67c:	f043 0308 	orr.w	r3, r3, #8
 800e680:	81a3      	strh	r3, [r4, #12]
 800e682:	6923      	ldr	r3, [r4, #16]
 800e684:	b94b      	cbnz	r3, 800e69a <__swsetup_r+0x9a>
 800e686:	89a3      	ldrh	r3, [r4, #12]
 800e688:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e68c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e690:	d003      	beq.n	800e69a <__swsetup_r+0x9a>
 800e692:	4621      	mov	r1, r4
 800e694:	4630      	mov	r0, r6
 800e696:	f000 fa2f 	bl	800eaf8 <__smakebuf_r>
 800e69a:	89a0      	ldrh	r0, [r4, #12]
 800e69c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e6a0:	f010 0301 	ands.w	r3, r0, #1
 800e6a4:	d00a      	beq.n	800e6bc <__swsetup_r+0xbc>
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	60a3      	str	r3, [r4, #8]
 800e6aa:	6963      	ldr	r3, [r4, #20]
 800e6ac:	425b      	negs	r3, r3
 800e6ae:	61a3      	str	r3, [r4, #24]
 800e6b0:	6923      	ldr	r3, [r4, #16]
 800e6b2:	b943      	cbnz	r3, 800e6c6 <__swsetup_r+0xc6>
 800e6b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e6b8:	d1ba      	bne.n	800e630 <__swsetup_r+0x30>
 800e6ba:	bd70      	pop	{r4, r5, r6, pc}
 800e6bc:	0781      	lsls	r1, r0, #30
 800e6be:	bf58      	it	pl
 800e6c0:	6963      	ldrpl	r3, [r4, #20]
 800e6c2:	60a3      	str	r3, [r4, #8]
 800e6c4:	e7f4      	b.n	800e6b0 <__swsetup_r+0xb0>
 800e6c6:	2000      	movs	r0, #0
 800e6c8:	e7f7      	b.n	800e6ba <__swsetup_r+0xba>
 800e6ca:	bf00      	nop
 800e6cc:	20000048 	.word	0x20000048
 800e6d0:	080168a8 	.word	0x080168a8
 800e6d4:	080168c8 	.word	0x080168c8
 800e6d8:	08016888 	.word	0x08016888

0800e6dc <__assert_func>:
 800e6dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e6de:	4614      	mov	r4, r2
 800e6e0:	461a      	mov	r2, r3
 800e6e2:	4b09      	ldr	r3, [pc, #36]	; (800e708 <__assert_func+0x2c>)
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	4605      	mov	r5, r0
 800e6e8:	68d8      	ldr	r0, [r3, #12]
 800e6ea:	b14c      	cbz	r4, 800e700 <__assert_func+0x24>
 800e6ec:	4b07      	ldr	r3, [pc, #28]	; (800e70c <__assert_func+0x30>)
 800e6ee:	9100      	str	r1, [sp, #0]
 800e6f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e6f4:	4906      	ldr	r1, [pc, #24]	; (800e710 <__assert_func+0x34>)
 800e6f6:	462b      	mov	r3, r5
 800e6f8:	f000 f9a6 	bl	800ea48 <fiprintf>
 800e6fc:	f000 fe42 	bl	800f384 <abort>
 800e700:	4b04      	ldr	r3, [pc, #16]	; (800e714 <__assert_func+0x38>)
 800e702:	461c      	mov	r4, r3
 800e704:	e7f3      	b.n	800e6ee <__assert_func+0x12>
 800e706:	bf00      	nop
 800e708:	20000048 	.word	0x20000048
 800e70c:	0801684a 	.word	0x0801684a
 800e710:	08016857 	.word	0x08016857
 800e714:	08013515 	.word	0x08013515

0800e718 <__sflush_r>:
 800e718:	898a      	ldrh	r2, [r1, #12]
 800e71a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e71e:	4605      	mov	r5, r0
 800e720:	0710      	lsls	r0, r2, #28
 800e722:	460c      	mov	r4, r1
 800e724:	d458      	bmi.n	800e7d8 <__sflush_r+0xc0>
 800e726:	684b      	ldr	r3, [r1, #4]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	dc05      	bgt.n	800e738 <__sflush_r+0x20>
 800e72c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e72e:	2b00      	cmp	r3, #0
 800e730:	dc02      	bgt.n	800e738 <__sflush_r+0x20>
 800e732:	2000      	movs	r0, #0
 800e734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e738:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e73a:	2e00      	cmp	r6, #0
 800e73c:	d0f9      	beq.n	800e732 <__sflush_r+0x1a>
 800e73e:	2300      	movs	r3, #0
 800e740:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e744:	682f      	ldr	r7, [r5, #0]
 800e746:	602b      	str	r3, [r5, #0]
 800e748:	d032      	beq.n	800e7b0 <__sflush_r+0x98>
 800e74a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e74c:	89a3      	ldrh	r3, [r4, #12]
 800e74e:	075a      	lsls	r2, r3, #29
 800e750:	d505      	bpl.n	800e75e <__sflush_r+0x46>
 800e752:	6863      	ldr	r3, [r4, #4]
 800e754:	1ac0      	subs	r0, r0, r3
 800e756:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e758:	b10b      	cbz	r3, 800e75e <__sflush_r+0x46>
 800e75a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e75c:	1ac0      	subs	r0, r0, r3
 800e75e:	2300      	movs	r3, #0
 800e760:	4602      	mov	r2, r0
 800e762:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e764:	6a21      	ldr	r1, [r4, #32]
 800e766:	4628      	mov	r0, r5
 800e768:	47b0      	blx	r6
 800e76a:	1c43      	adds	r3, r0, #1
 800e76c:	89a3      	ldrh	r3, [r4, #12]
 800e76e:	d106      	bne.n	800e77e <__sflush_r+0x66>
 800e770:	6829      	ldr	r1, [r5, #0]
 800e772:	291d      	cmp	r1, #29
 800e774:	d82c      	bhi.n	800e7d0 <__sflush_r+0xb8>
 800e776:	4a2a      	ldr	r2, [pc, #168]	; (800e820 <__sflush_r+0x108>)
 800e778:	40ca      	lsrs	r2, r1
 800e77a:	07d6      	lsls	r6, r2, #31
 800e77c:	d528      	bpl.n	800e7d0 <__sflush_r+0xb8>
 800e77e:	2200      	movs	r2, #0
 800e780:	6062      	str	r2, [r4, #4]
 800e782:	04d9      	lsls	r1, r3, #19
 800e784:	6922      	ldr	r2, [r4, #16]
 800e786:	6022      	str	r2, [r4, #0]
 800e788:	d504      	bpl.n	800e794 <__sflush_r+0x7c>
 800e78a:	1c42      	adds	r2, r0, #1
 800e78c:	d101      	bne.n	800e792 <__sflush_r+0x7a>
 800e78e:	682b      	ldr	r3, [r5, #0]
 800e790:	b903      	cbnz	r3, 800e794 <__sflush_r+0x7c>
 800e792:	6560      	str	r0, [r4, #84]	; 0x54
 800e794:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e796:	602f      	str	r7, [r5, #0]
 800e798:	2900      	cmp	r1, #0
 800e79a:	d0ca      	beq.n	800e732 <__sflush_r+0x1a>
 800e79c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e7a0:	4299      	cmp	r1, r3
 800e7a2:	d002      	beq.n	800e7aa <__sflush_r+0x92>
 800e7a4:	4628      	mov	r0, r5
 800e7a6:	f000 f9ef 	bl	800eb88 <_free_r>
 800e7aa:	2000      	movs	r0, #0
 800e7ac:	6360      	str	r0, [r4, #52]	; 0x34
 800e7ae:	e7c1      	b.n	800e734 <__sflush_r+0x1c>
 800e7b0:	6a21      	ldr	r1, [r4, #32]
 800e7b2:	2301      	movs	r3, #1
 800e7b4:	4628      	mov	r0, r5
 800e7b6:	47b0      	blx	r6
 800e7b8:	1c41      	adds	r1, r0, #1
 800e7ba:	d1c7      	bne.n	800e74c <__sflush_r+0x34>
 800e7bc:	682b      	ldr	r3, [r5, #0]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d0c4      	beq.n	800e74c <__sflush_r+0x34>
 800e7c2:	2b1d      	cmp	r3, #29
 800e7c4:	d001      	beq.n	800e7ca <__sflush_r+0xb2>
 800e7c6:	2b16      	cmp	r3, #22
 800e7c8:	d101      	bne.n	800e7ce <__sflush_r+0xb6>
 800e7ca:	602f      	str	r7, [r5, #0]
 800e7cc:	e7b1      	b.n	800e732 <__sflush_r+0x1a>
 800e7ce:	89a3      	ldrh	r3, [r4, #12]
 800e7d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7d4:	81a3      	strh	r3, [r4, #12]
 800e7d6:	e7ad      	b.n	800e734 <__sflush_r+0x1c>
 800e7d8:	690f      	ldr	r7, [r1, #16]
 800e7da:	2f00      	cmp	r7, #0
 800e7dc:	d0a9      	beq.n	800e732 <__sflush_r+0x1a>
 800e7de:	0793      	lsls	r3, r2, #30
 800e7e0:	680e      	ldr	r6, [r1, #0]
 800e7e2:	bf08      	it	eq
 800e7e4:	694b      	ldreq	r3, [r1, #20]
 800e7e6:	600f      	str	r7, [r1, #0]
 800e7e8:	bf18      	it	ne
 800e7ea:	2300      	movne	r3, #0
 800e7ec:	eba6 0807 	sub.w	r8, r6, r7
 800e7f0:	608b      	str	r3, [r1, #8]
 800e7f2:	f1b8 0f00 	cmp.w	r8, #0
 800e7f6:	dd9c      	ble.n	800e732 <__sflush_r+0x1a>
 800e7f8:	6a21      	ldr	r1, [r4, #32]
 800e7fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e7fc:	4643      	mov	r3, r8
 800e7fe:	463a      	mov	r2, r7
 800e800:	4628      	mov	r0, r5
 800e802:	47b0      	blx	r6
 800e804:	2800      	cmp	r0, #0
 800e806:	dc06      	bgt.n	800e816 <__sflush_r+0xfe>
 800e808:	89a3      	ldrh	r3, [r4, #12]
 800e80a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e80e:	81a3      	strh	r3, [r4, #12]
 800e810:	f04f 30ff 	mov.w	r0, #4294967295
 800e814:	e78e      	b.n	800e734 <__sflush_r+0x1c>
 800e816:	4407      	add	r7, r0
 800e818:	eba8 0800 	sub.w	r8, r8, r0
 800e81c:	e7e9      	b.n	800e7f2 <__sflush_r+0xda>
 800e81e:	bf00      	nop
 800e820:	20400001 	.word	0x20400001

0800e824 <_fflush_r>:
 800e824:	b538      	push	{r3, r4, r5, lr}
 800e826:	690b      	ldr	r3, [r1, #16]
 800e828:	4605      	mov	r5, r0
 800e82a:	460c      	mov	r4, r1
 800e82c:	b913      	cbnz	r3, 800e834 <_fflush_r+0x10>
 800e82e:	2500      	movs	r5, #0
 800e830:	4628      	mov	r0, r5
 800e832:	bd38      	pop	{r3, r4, r5, pc}
 800e834:	b118      	cbz	r0, 800e83e <_fflush_r+0x1a>
 800e836:	6983      	ldr	r3, [r0, #24]
 800e838:	b90b      	cbnz	r3, 800e83e <_fflush_r+0x1a>
 800e83a:	f000 f887 	bl	800e94c <__sinit>
 800e83e:	4b14      	ldr	r3, [pc, #80]	; (800e890 <_fflush_r+0x6c>)
 800e840:	429c      	cmp	r4, r3
 800e842:	d11b      	bne.n	800e87c <_fflush_r+0x58>
 800e844:	686c      	ldr	r4, [r5, #4]
 800e846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d0ef      	beq.n	800e82e <_fflush_r+0xa>
 800e84e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e850:	07d0      	lsls	r0, r2, #31
 800e852:	d404      	bmi.n	800e85e <_fflush_r+0x3a>
 800e854:	0599      	lsls	r1, r3, #22
 800e856:	d402      	bmi.n	800e85e <_fflush_r+0x3a>
 800e858:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e85a:	f000 f927 	bl	800eaac <__retarget_lock_acquire_recursive>
 800e85e:	4628      	mov	r0, r5
 800e860:	4621      	mov	r1, r4
 800e862:	f7ff ff59 	bl	800e718 <__sflush_r>
 800e866:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e868:	07da      	lsls	r2, r3, #31
 800e86a:	4605      	mov	r5, r0
 800e86c:	d4e0      	bmi.n	800e830 <_fflush_r+0xc>
 800e86e:	89a3      	ldrh	r3, [r4, #12]
 800e870:	059b      	lsls	r3, r3, #22
 800e872:	d4dd      	bmi.n	800e830 <_fflush_r+0xc>
 800e874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e876:	f000 f91a 	bl	800eaae <__retarget_lock_release_recursive>
 800e87a:	e7d9      	b.n	800e830 <_fflush_r+0xc>
 800e87c:	4b05      	ldr	r3, [pc, #20]	; (800e894 <_fflush_r+0x70>)
 800e87e:	429c      	cmp	r4, r3
 800e880:	d101      	bne.n	800e886 <_fflush_r+0x62>
 800e882:	68ac      	ldr	r4, [r5, #8]
 800e884:	e7df      	b.n	800e846 <_fflush_r+0x22>
 800e886:	4b04      	ldr	r3, [pc, #16]	; (800e898 <_fflush_r+0x74>)
 800e888:	429c      	cmp	r4, r3
 800e88a:	bf08      	it	eq
 800e88c:	68ec      	ldreq	r4, [r5, #12]
 800e88e:	e7da      	b.n	800e846 <_fflush_r+0x22>
 800e890:	080168a8 	.word	0x080168a8
 800e894:	080168c8 	.word	0x080168c8
 800e898:	08016888 	.word	0x08016888

0800e89c <std>:
 800e89c:	2300      	movs	r3, #0
 800e89e:	b510      	push	{r4, lr}
 800e8a0:	4604      	mov	r4, r0
 800e8a2:	e9c0 3300 	strd	r3, r3, [r0]
 800e8a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e8aa:	6083      	str	r3, [r0, #8]
 800e8ac:	8181      	strh	r1, [r0, #12]
 800e8ae:	6643      	str	r3, [r0, #100]	; 0x64
 800e8b0:	81c2      	strh	r2, [r0, #14]
 800e8b2:	6183      	str	r3, [r0, #24]
 800e8b4:	4619      	mov	r1, r3
 800e8b6:	2208      	movs	r2, #8
 800e8b8:	305c      	adds	r0, #92	; 0x5c
 800e8ba:	f7ff fd5f 	bl	800e37c <memset>
 800e8be:	4b05      	ldr	r3, [pc, #20]	; (800e8d4 <std+0x38>)
 800e8c0:	6263      	str	r3, [r4, #36]	; 0x24
 800e8c2:	4b05      	ldr	r3, [pc, #20]	; (800e8d8 <std+0x3c>)
 800e8c4:	62a3      	str	r3, [r4, #40]	; 0x28
 800e8c6:	4b05      	ldr	r3, [pc, #20]	; (800e8dc <std+0x40>)
 800e8c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e8ca:	4b05      	ldr	r3, [pc, #20]	; (800e8e0 <std+0x44>)
 800e8cc:	6224      	str	r4, [r4, #32]
 800e8ce:	6323      	str	r3, [r4, #48]	; 0x30
 800e8d0:	bd10      	pop	{r4, pc}
 800e8d2:	bf00      	nop
 800e8d4:	0800f2d9 	.word	0x0800f2d9
 800e8d8:	0800f2fb 	.word	0x0800f2fb
 800e8dc:	0800f333 	.word	0x0800f333
 800e8e0:	0800f357 	.word	0x0800f357

0800e8e4 <_cleanup_r>:
 800e8e4:	4901      	ldr	r1, [pc, #4]	; (800e8ec <_cleanup_r+0x8>)
 800e8e6:	f000 b8c1 	b.w	800ea6c <_fwalk_reent>
 800e8ea:	bf00      	nop
 800e8ec:	0800e825 	.word	0x0800e825

0800e8f0 <__sfmoreglue>:
 800e8f0:	b570      	push	{r4, r5, r6, lr}
 800e8f2:	1e4a      	subs	r2, r1, #1
 800e8f4:	2568      	movs	r5, #104	; 0x68
 800e8f6:	4355      	muls	r5, r2
 800e8f8:	460e      	mov	r6, r1
 800e8fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e8fe:	f000 f993 	bl	800ec28 <_malloc_r>
 800e902:	4604      	mov	r4, r0
 800e904:	b140      	cbz	r0, 800e918 <__sfmoreglue+0x28>
 800e906:	2100      	movs	r1, #0
 800e908:	e9c0 1600 	strd	r1, r6, [r0]
 800e90c:	300c      	adds	r0, #12
 800e90e:	60a0      	str	r0, [r4, #8]
 800e910:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e914:	f7ff fd32 	bl	800e37c <memset>
 800e918:	4620      	mov	r0, r4
 800e91a:	bd70      	pop	{r4, r5, r6, pc}

0800e91c <__sfp_lock_acquire>:
 800e91c:	4801      	ldr	r0, [pc, #4]	; (800e924 <__sfp_lock_acquire+0x8>)
 800e91e:	f000 b8c5 	b.w	800eaac <__retarget_lock_acquire_recursive>
 800e922:	bf00      	nop
 800e924:	20010d80 	.word	0x20010d80

0800e928 <__sfp_lock_release>:
 800e928:	4801      	ldr	r0, [pc, #4]	; (800e930 <__sfp_lock_release+0x8>)
 800e92a:	f000 b8c0 	b.w	800eaae <__retarget_lock_release_recursive>
 800e92e:	bf00      	nop
 800e930:	20010d80 	.word	0x20010d80

0800e934 <__sinit_lock_acquire>:
 800e934:	4801      	ldr	r0, [pc, #4]	; (800e93c <__sinit_lock_acquire+0x8>)
 800e936:	f000 b8b9 	b.w	800eaac <__retarget_lock_acquire_recursive>
 800e93a:	bf00      	nop
 800e93c:	20010d7b 	.word	0x20010d7b

0800e940 <__sinit_lock_release>:
 800e940:	4801      	ldr	r0, [pc, #4]	; (800e948 <__sinit_lock_release+0x8>)
 800e942:	f000 b8b4 	b.w	800eaae <__retarget_lock_release_recursive>
 800e946:	bf00      	nop
 800e948:	20010d7b 	.word	0x20010d7b

0800e94c <__sinit>:
 800e94c:	b510      	push	{r4, lr}
 800e94e:	4604      	mov	r4, r0
 800e950:	f7ff fff0 	bl	800e934 <__sinit_lock_acquire>
 800e954:	69a3      	ldr	r3, [r4, #24]
 800e956:	b11b      	cbz	r3, 800e960 <__sinit+0x14>
 800e958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e95c:	f7ff bff0 	b.w	800e940 <__sinit_lock_release>
 800e960:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e964:	6523      	str	r3, [r4, #80]	; 0x50
 800e966:	4b13      	ldr	r3, [pc, #76]	; (800e9b4 <__sinit+0x68>)
 800e968:	4a13      	ldr	r2, [pc, #76]	; (800e9b8 <__sinit+0x6c>)
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	62a2      	str	r2, [r4, #40]	; 0x28
 800e96e:	42a3      	cmp	r3, r4
 800e970:	bf04      	itt	eq
 800e972:	2301      	moveq	r3, #1
 800e974:	61a3      	streq	r3, [r4, #24]
 800e976:	4620      	mov	r0, r4
 800e978:	f000 f820 	bl	800e9bc <__sfp>
 800e97c:	6060      	str	r0, [r4, #4]
 800e97e:	4620      	mov	r0, r4
 800e980:	f000 f81c 	bl	800e9bc <__sfp>
 800e984:	60a0      	str	r0, [r4, #8]
 800e986:	4620      	mov	r0, r4
 800e988:	f000 f818 	bl	800e9bc <__sfp>
 800e98c:	2200      	movs	r2, #0
 800e98e:	60e0      	str	r0, [r4, #12]
 800e990:	2104      	movs	r1, #4
 800e992:	6860      	ldr	r0, [r4, #4]
 800e994:	f7ff ff82 	bl	800e89c <std>
 800e998:	68a0      	ldr	r0, [r4, #8]
 800e99a:	2201      	movs	r2, #1
 800e99c:	2109      	movs	r1, #9
 800e99e:	f7ff ff7d 	bl	800e89c <std>
 800e9a2:	68e0      	ldr	r0, [r4, #12]
 800e9a4:	2202      	movs	r2, #2
 800e9a6:	2112      	movs	r1, #18
 800e9a8:	f7ff ff78 	bl	800e89c <std>
 800e9ac:	2301      	movs	r3, #1
 800e9ae:	61a3      	str	r3, [r4, #24]
 800e9b0:	e7d2      	b.n	800e958 <__sinit+0xc>
 800e9b2:	bf00      	nop
 800e9b4:	080167d0 	.word	0x080167d0
 800e9b8:	0800e8e5 	.word	0x0800e8e5

0800e9bc <__sfp>:
 800e9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9be:	4607      	mov	r7, r0
 800e9c0:	f7ff ffac 	bl	800e91c <__sfp_lock_acquire>
 800e9c4:	4b1e      	ldr	r3, [pc, #120]	; (800ea40 <__sfp+0x84>)
 800e9c6:	681e      	ldr	r6, [r3, #0]
 800e9c8:	69b3      	ldr	r3, [r6, #24]
 800e9ca:	b913      	cbnz	r3, 800e9d2 <__sfp+0x16>
 800e9cc:	4630      	mov	r0, r6
 800e9ce:	f7ff ffbd 	bl	800e94c <__sinit>
 800e9d2:	3648      	adds	r6, #72	; 0x48
 800e9d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e9d8:	3b01      	subs	r3, #1
 800e9da:	d503      	bpl.n	800e9e4 <__sfp+0x28>
 800e9dc:	6833      	ldr	r3, [r6, #0]
 800e9de:	b30b      	cbz	r3, 800ea24 <__sfp+0x68>
 800e9e0:	6836      	ldr	r6, [r6, #0]
 800e9e2:	e7f7      	b.n	800e9d4 <__sfp+0x18>
 800e9e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e9e8:	b9d5      	cbnz	r5, 800ea20 <__sfp+0x64>
 800e9ea:	4b16      	ldr	r3, [pc, #88]	; (800ea44 <__sfp+0x88>)
 800e9ec:	60e3      	str	r3, [r4, #12]
 800e9ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e9f2:	6665      	str	r5, [r4, #100]	; 0x64
 800e9f4:	f000 f859 	bl	800eaaa <__retarget_lock_init_recursive>
 800e9f8:	f7ff ff96 	bl	800e928 <__sfp_lock_release>
 800e9fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ea00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ea04:	6025      	str	r5, [r4, #0]
 800ea06:	61a5      	str	r5, [r4, #24]
 800ea08:	2208      	movs	r2, #8
 800ea0a:	4629      	mov	r1, r5
 800ea0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ea10:	f7ff fcb4 	bl	800e37c <memset>
 800ea14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ea18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ea1c:	4620      	mov	r0, r4
 800ea1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea20:	3468      	adds	r4, #104	; 0x68
 800ea22:	e7d9      	b.n	800e9d8 <__sfp+0x1c>
 800ea24:	2104      	movs	r1, #4
 800ea26:	4638      	mov	r0, r7
 800ea28:	f7ff ff62 	bl	800e8f0 <__sfmoreglue>
 800ea2c:	4604      	mov	r4, r0
 800ea2e:	6030      	str	r0, [r6, #0]
 800ea30:	2800      	cmp	r0, #0
 800ea32:	d1d5      	bne.n	800e9e0 <__sfp+0x24>
 800ea34:	f7ff ff78 	bl	800e928 <__sfp_lock_release>
 800ea38:	230c      	movs	r3, #12
 800ea3a:	603b      	str	r3, [r7, #0]
 800ea3c:	e7ee      	b.n	800ea1c <__sfp+0x60>
 800ea3e:	bf00      	nop
 800ea40:	080167d0 	.word	0x080167d0
 800ea44:	ffff0001 	.word	0xffff0001

0800ea48 <fiprintf>:
 800ea48:	b40e      	push	{r1, r2, r3}
 800ea4a:	b503      	push	{r0, r1, lr}
 800ea4c:	4601      	mov	r1, r0
 800ea4e:	ab03      	add	r3, sp, #12
 800ea50:	4805      	ldr	r0, [pc, #20]	; (800ea68 <fiprintf+0x20>)
 800ea52:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea56:	6800      	ldr	r0, [r0, #0]
 800ea58:	9301      	str	r3, [sp, #4]
 800ea5a:	f000 f969 	bl	800ed30 <_vfiprintf_r>
 800ea5e:	b002      	add	sp, #8
 800ea60:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea64:	b003      	add	sp, #12
 800ea66:	4770      	bx	lr
 800ea68:	20000048 	.word	0x20000048

0800ea6c <_fwalk_reent>:
 800ea6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea70:	4606      	mov	r6, r0
 800ea72:	4688      	mov	r8, r1
 800ea74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ea78:	2700      	movs	r7, #0
 800ea7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ea7e:	f1b9 0901 	subs.w	r9, r9, #1
 800ea82:	d505      	bpl.n	800ea90 <_fwalk_reent+0x24>
 800ea84:	6824      	ldr	r4, [r4, #0]
 800ea86:	2c00      	cmp	r4, #0
 800ea88:	d1f7      	bne.n	800ea7a <_fwalk_reent+0xe>
 800ea8a:	4638      	mov	r0, r7
 800ea8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea90:	89ab      	ldrh	r3, [r5, #12]
 800ea92:	2b01      	cmp	r3, #1
 800ea94:	d907      	bls.n	800eaa6 <_fwalk_reent+0x3a>
 800ea96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ea9a:	3301      	adds	r3, #1
 800ea9c:	d003      	beq.n	800eaa6 <_fwalk_reent+0x3a>
 800ea9e:	4629      	mov	r1, r5
 800eaa0:	4630      	mov	r0, r6
 800eaa2:	47c0      	blx	r8
 800eaa4:	4307      	orrs	r7, r0
 800eaa6:	3568      	adds	r5, #104	; 0x68
 800eaa8:	e7e9      	b.n	800ea7e <_fwalk_reent+0x12>

0800eaaa <__retarget_lock_init_recursive>:
 800eaaa:	4770      	bx	lr

0800eaac <__retarget_lock_acquire_recursive>:
 800eaac:	4770      	bx	lr

0800eaae <__retarget_lock_release_recursive>:
 800eaae:	4770      	bx	lr

0800eab0 <__swhatbuf_r>:
 800eab0:	b570      	push	{r4, r5, r6, lr}
 800eab2:	460e      	mov	r6, r1
 800eab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eab8:	2900      	cmp	r1, #0
 800eaba:	b096      	sub	sp, #88	; 0x58
 800eabc:	4614      	mov	r4, r2
 800eabe:	461d      	mov	r5, r3
 800eac0:	da07      	bge.n	800ead2 <__swhatbuf_r+0x22>
 800eac2:	2300      	movs	r3, #0
 800eac4:	602b      	str	r3, [r5, #0]
 800eac6:	89b3      	ldrh	r3, [r6, #12]
 800eac8:	061a      	lsls	r2, r3, #24
 800eaca:	d410      	bmi.n	800eaee <__swhatbuf_r+0x3e>
 800eacc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ead0:	e00e      	b.n	800eaf0 <__swhatbuf_r+0x40>
 800ead2:	466a      	mov	r2, sp
 800ead4:	f000 fc6e 	bl	800f3b4 <_fstat_r>
 800ead8:	2800      	cmp	r0, #0
 800eada:	dbf2      	blt.n	800eac2 <__swhatbuf_r+0x12>
 800eadc:	9a01      	ldr	r2, [sp, #4]
 800eade:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800eae2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800eae6:	425a      	negs	r2, r3
 800eae8:	415a      	adcs	r2, r3
 800eaea:	602a      	str	r2, [r5, #0]
 800eaec:	e7ee      	b.n	800eacc <__swhatbuf_r+0x1c>
 800eaee:	2340      	movs	r3, #64	; 0x40
 800eaf0:	2000      	movs	r0, #0
 800eaf2:	6023      	str	r3, [r4, #0]
 800eaf4:	b016      	add	sp, #88	; 0x58
 800eaf6:	bd70      	pop	{r4, r5, r6, pc}

0800eaf8 <__smakebuf_r>:
 800eaf8:	898b      	ldrh	r3, [r1, #12]
 800eafa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eafc:	079d      	lsls	r5, r3, #30
 800eafe:	4606      	mov	r6, r0
 800eb00:	460c      	mov	r4, r1
 800eb02:	d507      	bpl.n	800eb14 <__smakebuf_r+0x1c>
 800eb04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eb08:	6023      	str	r3, [r4, #0]
 800eb0a:	6123      	str	r3, [r4, #16]
 800eb0c:	2301      	movs	r3, #1
 800eb0e:	6163      	str	r3, [r4, #20]
 800eb10:	b002      	add	sp, #8
 800eb12:	bd70      	pop	{r4, r5, r6, pc}
 800eb14:	ab01      	add	r3, sp, #4
 800eb16:	466a      	mov	r2, sp
 800eb18:	f7ff ffca 	bl	800eab0 <__swhatbuf_r>
 800eb1c:	9900      	ldr	r1, [sp, #0]
 800eb1e:	4605      	mov	r5, r0
 800eb20:	4630      	mov	r0, r6
 800eb22:	f000 f881 	bl	800ec28 <_malloc_r>
 800eb26:	b948      	cbnz	r0, 800eb3c <__smakebuf_r+0x44>
 800eb28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb2c:	059a      	lsls	r2, r3, #22
 800eb2e:	d4ef      	bmi.n	800eb10 <__smakebuf_r+0x18>
 800eb30:	f023 0303 	bic.w	r3, r3, #3
 800eb34:	f043 0302 	orr.w	r3, r3, #2
 800eb38:	81a3      	strh	r3, [r4, #12]
 800eb3a:	e7e3      	b.n	800eb04 <__smakebuf_r+0xc>
 800eb3c:	4b0d      	ldr	r3, [pc, #52]	; (800eb74 <__smakebuf_r+0x7c>)
 800eb3e:	62b3      	str	r3, [r6, #40]	; 0x28
 800eb40:	89a3      	ldrh	r3, [r4, #12]
 800eb42:	6020      	str	r0, [r4, #0]
 800eb44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb48:	81a3      	strh	r3, [r4, #12]
 800eb4a:	9b00      	ldr	r3, [sp, #0]
 800eb4c:	6163      	str	r3, [r4, #20]
 800eb4e:	9b01      	ldr	r3, [sp, #4]
 800eb50:	6120      	str	r0, [r4, #16]
 800eb52:	b15b      	cbz	r3, 800eb6c <__smakebuf_r+0x74>
 800eb54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb58:	4630      	mov	r0, r6
 800eb5a:	f000 fc3d 	bl	800f3d8 <_isatty_r>
 800eb5e:	b128      	cbz	r0, 800eb6c <__smakebuf_r+0x74>
 800eb60:	89a3      	ldrh	r3, [r4, #12]
 800eb62:	f023 0303 	bic.w	r3, r3, #3
 800eb66:	f043 0301 	orr.w	r3, r3, #1
 800eb6a:	81a3      	strh	r3, [r4, #12]
 800eb6c:	89a0      	ldrh	r0, [r4, #12]
 800eb6e:	4305      	orrs	r5, r0
 800eb70:	81a5      	strh	r5, [r4, #12]
 800eb72:	e7cd      	b.n	800eb10 <__smakebuf_r+0x18>
 800eb74:	0800e8e5 	.word	0x0800e8e5

0800eb78 <malloc>:
 800eb78:	4b02      	ldr	r3, [pc, #8]	; (800eb84 <malloc+0xc>)
 800eb7a:	4601      	mov	r1, r0
 800eb7c:	6818      	ldr	r0, [r3, #0]
 800eb7e:	f000 b853 	b.w	800ec28 <_malloc_r>
 800eb82:	bf00      	nop
 800eb84:	20000048 	.word	0x20000048

0800eb88 <_free_r>:
 800eb88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eb8a:	2900      	cmp	r1, #0
 800eb8c:	d048      	beq.n	800ec20 <_free_r+0x98>
 800eb8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb92:	9001      	str	r0, [sp, #4]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	f1a1 0404 	sub.w	r4, r1, #4
 800eb9a:	bfb8      	it	lt
 800eb9c:	18e4      	addlt	r4, r4, r3
 800eb9e:	f000 fc3d 	bl	800f41c <__malloc_lock>
 800eba2:	4a20      	ldr	r2, [pc, #128]	; (800ec24 <_free_r+0x9c>)
 800eba4:	9801      	ldr	r0, [sp, #4]
 800eba6:	6813      	ldr	r3, [r2, #0]
 800eba8:	4615      	mov	r5, r2
 800ebaa:	b933      	cbnz	r3, 800ebba <_free_r+0x32>
 800ebac:	6063      	str	r3, [r4, #4]
 800ebae:	6014      	str	r4, [r2, #0]
 800ebb0:	b003      	add	sp, #12
 800ebb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ebb6:	f000 bc37 	b.w	800f428 <__malloc_unlock>
 800ebba:	42a3      	cmp	r3, r4
 800ebbc:	d90b      	bls.n	800ebd6 <_free_r+0x4e>
 800ebbe:	6821      	ldr	r1, [r4, #0]
 800ebc0:	1862      	adds	r2, r4, r1
 800ebc2:	4293      	cmp	r3, r2
 800ebc4:	bf04      	itt	eq
 800ebc6:	681a      	ldreq	r2, [r3, #0]
 800ebc8:	685b      	ldreq	r3, [r3, #4]
 800ebca:	6063      	str	r3, [r4, #4]
 800ebcc:	bf04      	itt	eq
 800ebce:	1852      	addeq	r2, r2, r1
 800ebd0:	6022      	streq	r2, [r4, #0]
 800ebd2:	602c      	str	r4, [r5, #0]
 800ebd4:	e7ec      	b.n	800ebb0 <_free_r+0x28>
 800ebd6:	461a      	mov	r2, r3
 800ebd8:	685b      	ldr	r3, [r3, #4]
 800ebda:	b10b      	cbz	r3, 800ebe0 <_free_r+0x58>
 800ebdc:	42a3      	cmp	r3, r4
 800ebde:	d9fa      	bls.n	800ebd6 <_free_r+0x4e>
 800ebe0:	6811      	ldr	r1, [r2, #0]
 800ebe2:	1855      	adds	r5, r2, r1
 800ebe4:	42a5      	cmp	r5, r4
 800ebe6:	d10b      	bne.n	800ec00 <_free_r+0x78>
 800ebe8:	6824      	ldr	r4, [r4, #0]
 800ebea:	4421      	add	r1, r4
 800ebec:	1854      	adds	r4, r2, r1
 800ebee:	42a3      	cmp	r3, r4
 800ebf0:	6011      	str	r1, [r2, #0]
 800ebf2:	d1dd      	bne.n	800ebb0 <_free_r+0x28>
 800ebf4:	681c      	ldr	r4, [r3, #0]
 800ebf6:	685b      	ldr	r3, [r3, #4]
 800ebf8:	6053      	str	r3, [r2, #4]
 800ebfa:	4421      	add	r1, r4
 800ebfc:	6011      	str	r1, [r2, #0]
 800ebfe:	e7d7      	b.n	800ebb0 <_free_r+0x28>
 800ec00:	d902      	bls.n	800ec08 <_free_r+0x80>
 800ec02:	230c      	movs	r3, #12
 800ec04:	6003      	str	r3, [r0, #0]
 800ec06:	e7d3      	b.n	800ebb0 <_free_r+0x28>
 800ec08:	6825      	ldr	r5, [r4, #0]
 800ec0a:	1961      	adds	r1, r4, r5
 800ec0c:	428b      	cmp	r3, r1
 800ec0e:	bf04      	itt	eq
 800ec10:	6819      	ldreq	r1, [r3, #0]
 800ec12:	685b      	ldreq	r3, [r3, #4]
 800ec14:	6063      	str	r3, [r4, #4]
 800ec16:	bf04      	itt	eq
 800ec18:	1949      	addeq	r1, r1, r5
 800ec1a:	6021      	streq	r1, [r4, #0]
 800ec1c:	6054      	str	r4, [r2, #4]
 800ec1e:	e7c7      	b.n	800ebb0 <_free_r+0x28>
 800ec20:	b003      	add	sp, #12
 800ec22:	bd30      	pop	{r4, r5, pc}
 800ec24:	20006994 	.word	0x20006994

0800ec28 <_malloc_r>:
 800ec28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec2a:	1ccd      	adds	r5, r1, #3
 800ec2c:	f025 0503 	bic.w	r5, r5, #3
 800ec30:	3508      	adds	r5, #8
 800ec32:	2d0c      	cmp	r5, #12
 800ec34:	bf38      	it	cc
 800ec36:	250c      	movcc	r5, #12
 800ec38:	2d00      	cmp	r5, #0
 800ec3a:	4606      	mov	r6, r0
 800ec3c:	db01      	blt.n	800ec42 <_malloc_r+0x1a>
 800ec3e:	42a9      	cmp	r1, r5
 800ec40:	d903      	bls.n	800ec4a <_malloc_r+0x22>
 800ec42:	230c      	movs	r3, #12
 800ec44:	6033      	str	r3, [r6, #0]
 800ec46:	2000      	movs	r0, #0
 800ec48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec4a:	f000 fbe7 	bl	800f41c <__malloc_lock>
 800ec4e:	4921      	ldr	r1, [pc, #132]	; (800ecd4 <_malloc_r+0xac>)
 800ec50:	680a      	ldr	r2, [r1, #0]
 800ec52:	4614      	mov	r4, r2
 800ec54:	b99c      	cbnz	r4, 800ec7e <_malloc_r+0x56>
 800ec56:	4f20      	ldr	r7, [pc, #128]	; (800ecd8 <_malloc_r+0xb0>)
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	b923      	cbnz	r3, 800ec66 <_malloc_r+0x3e>
 800ec5c:	4621      	mov	r1, r4
 800ec5e:	4630      	mov	r0, r6
 800ec60:	f000 fb2a 	bl	800f2b8 <_sbrk_r>
 800ec64:	6038      	str	r0, [r7, #0]
 800ec66:	4629      	mov	r1, r5
 800ec68:	4630      	mov	r0, r6
 800ec6a:	f000 fb25 	bl	800f2b8 <_sbrk_r>
 800ec6e:	1c43      	adds	r3, r0, #1
 800ec70:	d123      	bne.n	800ecba <_malloc_r+0x92>
 800ec72:	230c      	movs	r3, #12
 800ec74:	6033      	str	r3, [r6, #0]
 800ec76:	4630      	mov	r0, r6
 800ec78:	f000 fbd6 	bl	800f428 <__malloc_unlock>
 800ec7c:	e7e3      	b.n	800ec46 <_malloc_r+0x1e>
 800ec7e:	6823      	ldr	r3, [r4, #0]
 800ec80:	1b5b      	subs	r3, r3, r5
 800ec82:	d417      	bmi.n	800ecb4 <_malloc_r+0x8c>
 800ec84:	2b0b      	cmp	r3, #11
 800ec86:	d903      	bls.n	800ec90 <_malloc_r+0x68>
 800ec88:	6023      	str	r3, [r4, #0]
 800ec8a:	441c      	add	r4, r3
 800ec8c:	6025      	str	r5, [r4, #0]
 800ec8e:	e004      	b.n	800ec9a <_malloc_r+0x72>
 800ec90:	6863      	ldr	r3, [r4, #4]
 800ec92:	42a2      	cmp	r2, r4
 800ec94:	bf0c      	ite	eq
 800ec96:	600b      	streq	r3, [r1, #0]
 800ec98:	6053      	strne	r3, [r2, #4]
 800ec9a:	4630      	mov	r0, r6
 800ec9c:	f000 fbc4 	bl	800f428 <__malloc_unlock>
 800eca0:	f104 000b 	add.w	r0, r4, #11
 800eca4:	1d23      	adds	r3, r4, #4
 800eca6:	f020 0007 	bic.w	r0, r0, #7
 800ecaa:	1ac2      	subs	r2, r0, r3
 800ecac:	d0cc      	beq.n	800ec48 <_malloc_r+0x20>
 800ecae:	1a1b      	subs	r3, r3, r0
 800ecb0:	50a3      	str	r3, [r4, r2]
 800ecb2:	e7c9      	b.n	800ec48 <_malloc_r+0x20>
 800ecb4:	4622      	mov	r2, r4
 800ecb6:	6864      	ldr	r4, [r4, #4]
 800ecb8:	e7cc      	b.n	800ec54 <_malloc_r+0x2c>
 800ecba:	1cc4      	adds	r4, r0, #3
 800ecbc:	f024 0403 	bic.w	r4, r4, #3
 800ecc0:	42a0      	cmp	r0, r4
 800ecc2:	d0e3      	beq.n	800ec8c <_malloc_r+0x64>
 800ecc4:	1a21      	subs	r1, r4, r0
 800ecc6:	4630      	mov	r0, r6
 800ecc8:	f000 faf6 	bl	800f2b8 <_sbrk_r>
 800eccc:	3001      	adds	r0, #1
 800ecce:	d1dd      	bne.n	800ec8c <_malloc_r+0x64>
 800ecd0:	e7cf      	b.n	800ec72 <_malloc_r+0x4a>
 800ecd2:	bf00      	nop
 800ecd4:	20006994 	.word	0x20006994
 800ecd8:	20006998 	.word	0x20006998

0800ecdc <__sfputc_r>:
 800ecdc:	6893      	ldr	r3, [r2, #8]
 800ecde:	3b01      	subs	r3, #1
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	b410      	push	{r4}
 800ece4:	6093      	str	r3, [r2, #8]
 800ece6:	da08      	bge.n	800ecfa <__sfputc_r+0x1e>
 800ece8:	6994      	ldr	r4, [r2, #24]
 800ecea:	42a3      	cmp	r3, r4
 800ecec:	db01      	blt.n	800ecf2 <__sfputc_r+0x16>
 800ecee:	290a      	cmp	r1, #10
 800ecf0:	d103      	bne.n	800ecfa <__sfputc_r+0x1e>
 800ecf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ecf6:	f7ff bc31 	b.w	800e55c <__swbuf_r>
 800ecfa:	6813      	ldr	r3, [r2, #0]
 800ecfc:	1c58      	adds	r0, r3, #1
 800ecfe:	6010      	str	r0, [r2, #0]
 800ed00:	7019      	strb	r1, [r3, #0]
 800ed02:	4608      	mov	r0, r1
 800ed04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed08:	4770      	bx	lr

0800ed0a <__sfputs_r>:
 800ed0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed0c:	4606      	mov	r6, r0
 800ed0e:	460f      	mov	r7, r1
 800ed10:	4614      	mov	r4, r2
 800ed12:	18d5      	adds	r5, r2, r3
 800ed14:	42ac      	cmp	r4, r5
 800ed16:	d101      	bne.n	800ed1c <__sfputs_r+0x12>
 800ed18:	2000      	movs	r0, #0
 800ed1a:	e007      	b.n	800ed2c <__sfputs_r+0x22>
 800ed1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed20:	463a      	mov	r2, r7
 800ed22:	4630      	mov	r0, r6
 800ed24:	f7ff ffda 	bl	800ecdc <__sfputc_r>
 800ed28:	1c43      	adds	r3, r0, #1
 800ed2a:	d1f3      	bne.n	800ed14 <__sfputs_r+0xa>
 800ed2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ed30 <_vfiprintf_r>:
 800ed30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed34:	460d      	mov	r5, r1
 800ed36:	b09d      	sub	sp, #116	; 0x74
 800ed38:	4614      	mov	r4, r2
 800ed3a:	4698      	mov	r8, r3
 800ed3c:	4606      	mov	r6, r0
 800ed3e:	b118      	cbz	r0, 800ed48 <_vfiprintf_r+0x18>
 800ed40:	6983      	ldr	r3, [r0, #24]
 800ed42:	b90b      	cbnz	r3, 800ed48 <_vfiprintf_r+0x18>
 800ed44:	f7ff fe02 	bl	800e94c <__sinit>
 800ed48:	4b89      	ldr	r3, [pc, #548]	; (800ef70 <_vfiprintf_r+0x240>)
 800ed4a:	429d      	cmp	r5, r3
 800ed4c:	d11b      	bne.n	800ed86 <_vfiprintf_r+0x56>
 800ed4e:	6875      	ldr	r5, [r6, #4]
 800ed50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed52:	07d9      	lsls	r1, r3, #31
 800ed54:	d405      	bmi.n	800ed62 <_vfiprintf_r+0x32>
 800ed56:	89ab      	ldrh	r3, [r5, #12]
 800ed58:	059a      	lsls	r2, r3, #22
 800ed5a:	d402      	bmi.n	800ed62 <_vfiprintf_r+0x32>
 800ed5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed5e:	f7ff fea5 	bl	800eaac <__retarget_lock_acquire_recursive>
 800ed62:	89ab      	ldrh	r3, [r5, #12]
 800ed64:	071b      	lsls	r3, r3, #28
 800ed66:	d501      	bpl.n	800ed6c <_vfiprintf_r+0x3c>
 800ed68:	692b      	ldr	r3, [r5, #16]
 800ed6a:	b9eb      	cbnz	r3, 800eda8 <_vfiprintf_r+0x78>
 800ed6c:	4629      	mov	r1, r5
 800ed6e:	4630      	mov	r0, r6
 800ed70:	f7ff fc46 	bl	800e600 <__swsetup_r>
 800ed74:	b1c0      	cbz	r0, 800eda8 <_vfiprintf_r+0x78>
 800ed76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed78:	07dc      	lsls	r4, r3, #31
 800ed7a:	d50e      	bpl.n	800ed9a <_vfiprintf_r+0x6a>
 800ed7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ed80:	b01d      	add	sp, #116	; 0x74
 800ed82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed86:	4b7b      	ldr	r3, [pc, #492]	; (800ef74 <_vfiprintf_r+0x244>)
 800ed88:	429d      	cmp	r5, r3
 800ed8a:	d101      	bne.n	800ed90 <_vfiprintf_r+0x60>
 800ed8c:	68b5      	ldr	r5, [r6, #8]
 800ed8e:	e7df      	b.n	800ed50 <_vfiprintf_r+0x20>
 800ed90:	4b79      	ldr	r3, [pc, #484]	; (800ef78 <_vfiprintf_r+0x248>)
 800ed92:	429d      	cmp	r5, r3
 800ed94:	bf08      	it	eq
 800ed96:	68f5      	ldreq	r5, [r6, #12]
 800ed98:	e7da      	b.n	800ed50 <_vfiprintf_r+0x20>
 800ed9a:	89ab      	ldrh	r3, [r5, #12]
 800ed9c:	0598      	lsls	r0, r3, #22
 800ed9e:	d4ed      	bmi.n	800ed7c <_vfiprintf_r+0x4c>
 800eda0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eda2:	f7ff fe84 	bl	800eaae <__retarget_lock_release_recursive>
 800eda6:	e7e9      	b.n	800ed7c <_vfiprintf_r+0x4c>
 800eda8:	2300      	movs	r3, #0
 800edaa:	9309      	str	r3, [sp, #36]	; 0x24
 800edac:	2320      	movs	r3, #32
 800edae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800edb2:	f8cd 800c 	str.w	r8, [sp, #12]
 800edb6:	2330      	movs	r3, #48	; 0x30
 800edb8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ef7c <_vfiprintf_r+0x24c>
 800edbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800edc0:	f04f 0901 	mov.w	r9, #1
 800edc4:	4623      	mov	r3, r4
 800edc6:	469a      	mov	sl, r3
 800edc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800edcc:	b10a      	cbz	r2, 800edd2 <_vfiprintf_r+0xa2>
 800edce:	2a25      	cmp	r2, #37	; 0x25
 800edd0:	d1f9      	bne.n	800edc6 <_vfiprintf_r+0x96>
 800edd2:	ebba 0b04 	subs.w	fp, sl, r4
 800edd6:	d00b      	beq.n	800edf0 <_vfiprintf_r+0xc0>
 800edd8:	465b      	mov	r3, fp
 800edda:	4622      	mov	r2, r4
 800eddc:	4629      	mov	r1, r5
 800edde:	4630      	mov	r0, r6
 800ede0:	f7ff ff93 	bl	800ed0a <__sfputs_r>
 800ede4:	3001      	adds	r0, #1
 800ede6:	f000 80aa 	beq.w	800ef3e <_vfiprintf_r+0x20e>
 800edea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800edec:	445a      	add	r2, fp
 800edee:	9209      	str	r2, [sp, #36]	; 0x24
 800edf0:	f89a 3000 	ldrb.w	r3, [sl]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	f000 80a2 	beq.w	800ef3e <_vfiprintf_r+0x20e>
 800edfa:	2300      	movs	r3, #0
 800edfc:	f04f 32ff 	mov.w	r2, #4294967295
 800ee00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee04:	f10a 0a01 	add.w	sl, sl, #1
 800ee08:	9304      	str	r3, [sp, #16]
 800ee0a:	9307      	str	r3, [sp, #28]
 800ee0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ee10:	931a      	str	r3, [sp, #104]	; 0x68
 800ee12:	4654      	mov	r4, sl
 800ee14:	2205      	movs	r2, #5
 800ee16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee1a:	4858      	ldr	r0, [pc, #352]	; (800ef7c <_vfiprintf_r+0x24c>)
 800ee1c:	f7f1 f9f8 	bl	8000210 <memchr>
 800ee20:	9a04      	ldr	r2, [sp, #16]
 800ee22:	b9d8      	cbnz	r0, 800ee5c <_vfiprintf_r+0x12c>
 800ee24:	06d1      	lsls	r1, r2, #27
 800ee26:	bf44      	itt	mi
 800ee28:	2320      	movmi	r3, #32
 800ee2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee2e:	0713      	lsls	r3, r2, #28
 800ee30:	bf44      	itt	mi
 800ee32:	232b      	movmi	r3, #43	; 0x2b
 800ee34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee38:	f89a 3000 	ldrb.w	r3, [sl]
 800ee3c:	2b2a      	cmp	r3, #42	; 0x2a
 800ee3e:	d015      	beq.n	800ee6c <_vfiprintf_r+0x13c>
 800ee40:	9a07      	ldr	r2, [sp, #28]
 800ee42:	4654      	mov	r4, sl
 800ee44:	2000      	movs	r0, #0
 800ee46:	f04f 0c0a 	mov.w	ip, #10
 800ee4a:	4621      	mov	r1, r4
 800ee4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee50:	3b30      	subs	r3, #48	; 0x30
 800ee52:	2b09      	cmp	r3, #9
 800ee54:	d94e      	bls.n	800eef4 <_vfiprintf_r+0x1c4>
 800ee56:	b1b0      	cbz	r0, 800ee86 <_vfiprintf_r+0x156>
 800ee58:	9207      	str	r2, [sp, #28]
 800ee5a:	e014      	b.n	800ee86 <_vfiprintf_r+0x156>
 800ee5c:	eba0 0308 	sub.w	r3, r0, r8
 800ee60:	fa09 f303 	lsl.w	r3, r9, r3
 800ee64:	4313      	orrs	r3, r2
 800ee66:	9304      	str	r3, [sp, #16]
 800ee68:	46a2      	mov	sl, r4
 800ee6a:	e7d2      	b.n	800ee12 <_vfiprintf_r+0xe2>
 800ee6c:	9b03      	ldr	r3, [sp, #12]
 800ee6e:	1d19      	adds	r1, r3, #4
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	9103      	str	r1, [sp, #12]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	bfbb      	ittet	lt
 800ee78:	425b      	neglt	r3, r3
 800ee7a:	f042 0202 	orrlt.w	r2, r2, #2
 800ee7e:	9307      	strge	r3, [sp, #28]
 800ee80:	9307      	strlt	r3, [sp, #28]
 800ee82:	bfb8      	it	lt
 800ee84:	9204      	strlt	r2, [sp, #16]
 800ee86:	7823      	ldrb	r3, [r4, #0]
 800ee88:	2b2e      	cmp	r3, #46	; 0x2e
 800ee8a:	d10c      	bne.n	800eea6 <_vfiprintf_r+0x176>
 800ee8c:	7863      	ldrb	r3, [r4, #1]
 800ee8e:	2b2a      	cmp	r3, #42	; 0x2a
 800ee90:	d135      	bne.n	800eefe <_vfiprintf_r+0x1ce>
 800ee92:	9b03      	ldr	r3, [sp, #12]
 800ee94:	1d1a      	adds	r2, r3, #4
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	9203      	str	r2, [sp, #12]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	bfb8      	it	lt
 800ee9e:	f04f 33ff 	movlt.w	r3, #4294967295
 800eea2:	3402      	adds	r4, #2
 800eea4:	9305      	str	r3, [sp, #20]
 800eea6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ef8c <_vfiprintf_r+0x25c>
 800eeaa:	7821      	ldrb	r1, [r4, #0]
 800eeac:	2203      	movs	r2, #3
 800eeae:	4650      	mov	r0, sl
 800eeb0:	f7f1 f9ae 	bl	8000210 <memchr>
 800eeb4:	b140      	cbz	r0, 800eec8 <_vfiprintf_r+0x198>
 800eeb6:	2340      	movs	r3, #64	; 0x40
 800eeb8:	eba0 000a 	sub.w	r0, r0, sl
 800eebc:	fa03 f000 	lsl.w	r0, r3, r0
 800eec0:	9b04      	ldr	r3, [sp, #16]
 800eec2:	4303      	orrs	r3, r0
 800eec4:	3401      	adds	r4, #1
 800eec6:	9304      	str	r3, [sp, #16]
 800eec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eecc:	482c      	ldr	r0, [pc, #176]	; (800ef80 <_vfiprintf_r+0x250>)
 800eece:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eed2:	2206      	movs	r2, #6
 800eed4:	f7f1 f99c 	bl	8000210 <memchr>
 800eed8:	2800      	cmp	r0, #0
 800eeda:	d03f      	beq.n	800ef5c <_vfiprintf_r+0x22c>
 800eedc:	4b29      	ldr	r3, [pc, #164]	; (800ef84 <_vfiprintf_r+0x254>)
 800eede:	bb1b      	cbnz	r3, 800ef28 <_vfiprintf_r+0x1f8>
 800eee0:	9b03      	ldr	r3, [sp, #12]
 800eee2:	3307      	adds	r3, #7
 800eee4:	f023 0307 	bic.w	r3, r3, #7
 800eee8:	3308      	adds	r3, #8
 800eeea:	9303      	str	r3, [sp, #12]
 800eeec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eeee:	443b      	add	r3, r7
 800eef0:	9309      	str	r3, [sp, #36]	; 0x24
 800eef2:	e767      	b.n	800edc4 <_vfiprintf_r+0x94>
 800eef4:	fb0c 3202 	mla	r2, ip, r2, r3
 800eef8:	460c      	mov	r4, r1
 800eefa:	2001      	movs	r0, #1
 800eefc:	e7a5      	b.n	800ee4a <_vfiprintf_r+0x11a>
 800eefe:	2300      	movs	r3, #0
 800ef00:	3401      	adds	r4, #1
 800ef02:	9305      	str	r3, [sp, #20]
 800ef04:	4619      	mov	r1, r3
 800ef06:	f04f 0c0a 	mov.w	ip, #10
 800ef0a:	4620      	mov	r0, r4
 800ef0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef10:	3a30      	subs	r2, #48	; 0x30
 800ef12:	2a09      	cmp	r2, #9
 800ef14:	d903      	bls.n	800ef1e <_vfiprintf_r+0x1ee>
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d0c5      	beq.n	800eea6 <_vfiprintf_r+0x176>
 800ef1a:	9105      	str	r1, [sp, #20]
 800ef1c:	e7c3      	b.n	800eea6 <_vfiprintf_r+0x176>
 800ef1e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef22:	4604      	mov	r4, r0
 800ef24:	2301      	movs	r3, #1
 800ef26:	e7f0      	b.n	800ef0a <_vfiprintf_r+0x1da>
 800ef28:	ab03      	add	r3, sp, #12
 800ef2a:	9300      	str	r3, [sp, #0]
 800ef2c:	462a      	mov	r2, r5
 800ef2e:	4b16      	ldr	r3, [pc, #88]	; (800ef88 <_vfiprintf_r+0x258>)
 800ef30:	a904      	add	r1, sp, #16
 800ef32:	4630      	mov	r0, r6
 800ef34:	f3af 8000 	nop.w
 800ef38:	4607      	mov	r7, r0
 800ef3a:	1c78      	adds	r0, r7, #1
 800ef3c:	d1d6      	bne.n	800eeec <_vfiprintf_r+0x1bc>
 800ef3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ef40:	07d9      	lsls	r1, r3, #31
 800ef42:	d405      	bmi.n	800ef50 <_vfiprintf_r+0x220>
 800ef44:	89ab      	ldrh	r3, [r5, #12]
 800ef46:	059a      	lsls	r2, r3, #22
 800ef48:	d402      	bmi.n	800ef50 <_vfiprintf_r+0x220>
 800ef4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef4c:	f7ff fdaf 	bl	800eaae <__retarget_lock_release_recursive>
 800ef50:	89ab      	ldrh	r3, [r5, #12]
 800ef52:	065b      	lsls	r3, r3, #25
 800ef54:	f53f af12 	bmi.w	800ed7c <_vfiprintf_r+0x4c>
 800ef58:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef5a:	e711      	b.n	800ed80 <_vfiprintf_r+0x50>
 800ef5c:	ab03      	add	r3, sp, #12
 800ef5e:	9300      	str	r3, [sp, #0]
 800ef60:	462a      	mov	r2, r5
 800ef62:	4b09      	ldr	r3, [pc, #36]	; (800ef88 <_vfiprintf_r+0x258>)
 800ef64:	a904      	add	r1, sp, #16
 800ef66:	4630      	mov	r0, r6
 800ef68:	f000 f880 	bl	800f06c <_printf_i>
 800ef6c:	e7e4      	b.n	800ef38 <_vfiprintf_r+0x208>
 800ef6e:	bf00      	nop
 800ef70:	080168a8 	.word	0x080168a8
 800ef74:	080168c8 	.word	0x080168c8
 800ef78:	08016888 	.word	0x08016888
 800ef7c:	080168e8 	.word	0x080168e8
 800ef80:	080168f2 	.word	0x080168f2
 800ef84:	00000000 	.word	0x00000000
 800ef88:	0800ed0b 	.word	0x0800ed0b
 800ef8c:	080168ee 	.word	0x080168ee

0800ef90 <_printf_common>:
 800ef90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef94:	4616      	mov	r6, r2
 800ef96:	4699      	mov	r9, r3
 800ef98:	688a      	ldr	r2, [r1, #8]
 800ef9a:	690b      	ldr	r3, [r1, #16]
 800ef9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800efa0:	4293      	cmp	r3, r2
 800efa2:	bfb8      	it	lt
 800efa4:	4613      	movlt	r3, r2
 800efa6:	6033      	str	r3, [r6, #0]
 800efa8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800efac:	4607      	mov	r7, r0
 800efae:	460c      	mov	r4, r1
 800efb0:	b10a      	cbz	r2, 800efb6 <_printf_common+0x26>
 800efb2:	3301      	adds	r3, #1
 800efb4:	6033      	str	r3, [r6, #0]
 800efb6:	6823      	ldr	r3, [r4, #0]
 800efb8:	0699      	lsls	r1, r3, #26
 800efba:	bf42      	ittt	mi
 800efbc:	6833      	ldrmi	r3, [r6, #0]
 800efbe:	3302      	addmi	r3, #2
 800efc0:	6033      	strmi	r3, [r6, #0]
 800efc2:	6825      	ldr	r5, [r4, #0]
 800efc4:	f015 0506 	ands.w	r5, r5, #6
 800efc8:	d106      	bne.n	800efd8 <_printf_common+0x48>
 800efca:	f104 0a19 	add.w	sl, r4, #25
 800efce:	68e3      	ldr	r3, [r4, #12]
 800efd0:	6832      	ldr	r2, [r6, #0]
 800efd2:	1a9b      	subs	r3, r3, r2
 800efd4:	42ab      	cmp	r3, r5
 800efd6:	dc26      	bgt.n	800f026 <_printf_common+0x96>
 800efd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800efdc:	1e13      	subs	r3, r2, #0
 800efde:	6822      	ldr	r2, [r4, #0]
 800efe0:	bf18      	it	ne
 800efe2:	2301      	movne	r3, #1
 800efe4:	0692      	lsls	r2, r2, #26
 800efe6:	d42b      	bmi.n	800f040 <_printf_common+0xb0>
 800efe8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800efec:	4649      	mov	r1, r9
 800efee:	4638      	mov	r0, r7
 800eff0:	47c0      	blx	r8
 800eff2:	3001      	adds	r0, #1
 800eff4:	d01e      	beq.n	800f034 <_printf_common+0xa4>
 800eff6:	6823      	ldr	r3, [r4, #0]
 800eff8:	68e5      	ldr	r5, [r4, #12]
 800effa:	6832      	ldr	r2, [r6, #0]
 800effc:	f003 0306 	and.w	r3, r3, #6
 800f000:	2b04      	cmp	r3, #4
 800f002:	bf08      	it	eq
 800f004:	1aad      	subeq	r5, r5, r2
 800f006:	68a3      	ldr	r3, [r4, #8]
 800f008:	6922      	ldr	r2, [r4, #16]
 800f00a:	bf0c      	ite	eq
 800f00c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f010:	2500      	movne	r5, #0
 800f012:	4293      	cmp	r3, r2
 800f014:	bfc4      	itt	gt
 800f016:	1a9b      	subgt	r3, r3, r2
 800f018:	18ed      	addgt	r5, r5, r3
 800f01a:	2600      	movs	r6, #0
 800f01c:	341a      	adds	r4, #26
 800f01e:	42b5      	cmp	r5, r6
 800f020:	d11a      	bne.n	800f058 <_printf_common+0xc8>
 800f022:	2000      	movs	r0, #0
 800f024:	e008      	b.n	800f038 <_printf_common+0xa8>
 800f026:	2301      	movs	r3, #1
 800f028:	4652      	mov	r2, sl
 800f02a:	4649      	mov	r1, r9
 800f02c:	4638      	mov	r0, r7
 800f02e:	47c0      	blx	r8
 800f030:	3001      	adds	r0, #1
 800f032:	d103      	bne.n	800f03c <_printf_common+0xac>
 800f034:	f04f 30ff 	mov.w	r0, #4294967295
 800f038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f03c:	3501      	adds	r5, #1
 800f03e:	e7c6      	b.n	800efce <_printf_common+0x3e>
 800f040:	18e1      	adds	r1, r4, r3
 800f042:	1c5a      	adds	r2, r3, #1
 800f044:	2030      	movs	r0, #48	; 0x30
 800f046:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f04a:	4422      	add	r2, r4
 800f04c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f050:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f054:	3302      	adds	r3, #2
 800f056:	e7c7      	b.n	800efe8 <_printf_common+0x58>
 800f058:	2301      	movs	r3, #1
 800f05a:	4622      	mov	r2, r4
 800f05c:	4649      	mov	r1, r9
 800f05e:	4638      	mov	r0, r7
 800f060:	47c0      	blx	r8
 800f062:	3001      	adds	r0, #1
 800f064:	d0e6      	beq.n	800f034 <_printf_common+0xa4>
 800f066:	3601      	adds	r6, #1
 800f068:	e7d9      	b.n	800f01e <_printf_common+0x8e>
	...

0800f06c <_printf_i>:
 800f06c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f070:	460c      	mov	r4, r1
 800f072:	4691      	mov	r9, r2
 800f074:	7e27      	ldrb	r7, [r4, #24]
 800f076:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f078:	2f78      	cmp	r7, #120	; 0x78
 800f07a:	4680      	mov	r8, r0
 800f07c:	469a      	mov	sl, r3
 800f07e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f082:	d807      	bhi.n	800f094 <_printf_i+0x28>
 800f084:	2f62      	cmp	r7, #98	; 0x62
 800f086:	d80a      	bhi.n	800f09e <_printf_i+0x32>
 800f088:	2f00      	cmp	r7, #0
 800f08a:	f000 80d8 	beq.w	800f23e <_printf_i+0x1d2>
 800f08e:	2f58      	cmp	r7, #88	; 0x58
 800f090:	f000 80a3 	beq.w	800f1da <_printf_i+0x16e>
 800f094:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f098:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f09c:	e03a      	b.n	800f114 <_printf_i+0xa8>
 800f09e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f0a2:	2b15      	cmp	r3, #21
 800f0a4:	d8f6      	bhi.n	800f094 <_printf_i+0x28>
 800f0a6:	a001      	add	r0, pc, #4	; (adr r0, 800f0ac <_printf_i+0x40>)
 800f0a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f0ac:	0800f105 	.word	0x0800f105
 800f0b0:	0800f119 	.word	0x0800f119
 800f0b4:	0800f095 	.word	0x0800f095
 800f0b8:	0800f095 	.word	0x0800f095
 800f0bc:	0800f095 	.word	0x0800f095
 800f0c0:	0800f095 	.word	0x0800f095
 800f0c4:	0800f119 	.word	0x0800f119
 800f0c8:	0800f095 	.word	0x0800f095
 800f0cc:	0800f095 	.word	0x0800f095
 800f0d0:	0800f095 	.word	0x0800f095
 800f0d4:	0800f095 	.word	0x0800f095
 800f0d8:	0800f225 	.word	0x0800f225
 800f0dc:	0800f149 	.word	0x0800f149
 800f0e0:	0800f207 	.word	0x0800f207
 800f0e4:	0800f095 	.word	0x0800f095
 800f0e8:	0800f095 	.word	0x0800f095
 800f0ec:	0800f247 	.word	0x0800f247
 800f0f0:	0800f095 	.word	0x0800f095
 800f0f4:	0800f149 	.word	0x0800f149
 800f0f8:	0800f095 	.word	0x0800f095
 800f0fc:	0800f095 	.word	0x0800f095
 800f100:	0800f20f 	.word	0x0800f20f
 800f104:	680b      	ldr	r3, [r1, #0]
 800f106:	1d1a      	adds	r2, r3, #4
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	600a      	str	r2, [r1, #0]
 800f10c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f110:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f114:	2301      	movs	r3, #1
 800f116:	e0a3      	b.n	800f260 <_printf_i+0x1f4>
 800f118:	6825      	ldr	r5, [r4, #0]
 800f11a:	6808      	ldr	r0, [r1, #0]
 800f11c:	062e      	lsls	r6, r5, #24
 800f11e:	f100 0304 	add.w	r3, r0, #4
 800f122:	d50a      	bpl.n	800f13a <_printf_i+0xce>
 800f124:	6805      	ldr	r5, [r0, #0]
 800f126:	600b      	str	r3, [r1, #0]
 800f128:	2d00      	cmp	r5, #0
 800f12a:	da03      	bge.n	800f134 <_printf_i+0xc8>
 800f12c:	232d      	movs	r3, #45	; 0x2d
 800f12e:	426d      	negs	r5, r5
 800f130:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f134:	485e      	ldr	r0, [pc, #376]	; (800f2b0 <_printf_i+0x244>)
 800f136:	230a      	movs	r3, #10
 800f138:	e019      	b.n	800f16e <_printf_i+0x102>
 800f13a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f13e:	6805      	ldr	r5, [r0, #0]
 800f140:	600b      	str	r3, [r1, #0]
 800f142:	bf18      	it	ne
 800f144:	b22d      	sxthne	r5, r5
 800f146:	e7ef      	b.n	800f128 <_printf_i+0xbc>
 800f148:	680b      	ldr	r3, [r1, #0]
 800f14a:	6825      	ldr	r5, [r4, #0]
 800f14c:	1d18      	adds	r0, r3, #4
 800f14e:	6008      	str	r0, [r1, #0]
 800f150:	0628      	lsls	r0, r5, #24
 800f152:	d501      	bpl.n	800f158 <_printf_i+0xec>
 800f154:	681d      	ldr	r5, [r3, #0]
 800f156:	e002      	b.n	800f15e <_printf_i+0xf2>
 800f158:	0669      	lsls	r1, r5, #25
 800f15a:	d5fb      	bpl.n	800f154 <_printf_i+0xe8>
 800f15c:	881d      	ldrh	r5, [r3, #0]
 800f15e:	4854      	ldr	r0, [pc, #336]	; (800f2b0 <_printf_i+0x244>)
 800f160:	2f6f      	cmp	r7, #111	; 0x6f
 800f162:	bf0c      	ite	eq
 800f164:	2308      	moveq	r3, #8
 800f166:	230a      	movne	r3, #10
 800f168:	2100      	movs	r1, #0
 800f16a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f16e:	6866      	ldr	r6, [r4, #4]
 800f170:	60a6      	str	r6, [r4, #8]
 800f172:	2e00      	cmp	r6, #0
 800f174:	bfa2      	ittt	ge
 800f176:	6821      	ldrge	r1, [r4, #0]
 800f178:	f021 0104 	bicge.w	r1, r1, #4
 800f17c:	6021      	strge	r1, [r4, #0]
 800f17e:	b90d      	cbnz	r5, 800f184 <_printf_i+0x118>
 800f180:	2e00      	cmp	r6, #0
 800f182:	d04d      	beq.n	800f220 <_printf_i+0x1b4>
 800f184:	4616      	mov	r6, r2
 800f186:	fbb5 f1f3 	udiv	r1, r5, r3
 800f18a:	fb03 5711 	mls	r7, r3, r1, r5
 800f18e:	5dc7      	ldrb	r7, [r0, r7]
 800f190:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f194:	462f      	mov	r7, r5
 800f196:	42bb      	cmp	r3, r7
 800f198:	460d      	mov	r5, r1
 800f19a:	d9f4      	bls.n	800f186 <_printf_i+0x11a>
 800f19c:	2b08      	cmp	r3, #8
 800f19e:	d10b      	bne.n	800f1b8 <_printf_i+0x14c>
 800f1a0:	6823      	ldr	r3, [r4, #0]
 800f1a2:	07df      	lsls	r7, r3, #31
 800f1a4:	d508      	bpl.n	800f1b8 <_printf_i+0x14c>
 800f1a6:	6923      	ldr	r3, [r4, #16]
 800f1a8:	6861      	ldr	r1, [r4, #4]
 800f1aa:	4299      	cmp	r1, r3
 800f1ac:	bfde      	ittt	le
 800f1ae:	2330      	movle	r3, #48	; 0x30
 800f1b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f1b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f1b8:	1b92      	subs	r2, r2, r6
 800f1ba:	6122      	str	r2, [r4, #16]
 800f1bc:	f8cd a000 	str.w	sl, [sp]
 800f1c0:	464b      	mov	r3, r9
 800f1c2:	aa03      	add	r2, sp, #12
 800f1c4:	4621      	mov	r1, r4
 800f1c6:	4640      	mov	r0, r8
 800f1c8:	f7ff fee2 	bl	800ef90 <_printf_common>
 800f1cc:	3001      	adds	r0, #1
 800f1ce:	d14c      	bne.n	800f26a <_printf_i+0x1fe>
 800f1d0:	f04f 30ff 	mov.w	r0, #4294967295
 800f1d4:	b004      	add	sp, #16
 800f1d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1da:	4835      	ldr	r0, [pc, #212]	; (800f2b0 <_printf_i+0x244>)
 800f1dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f1e0:	6823      	ldr	r3, [r4, #0]
 800f1e2:	680e      	ldr	r6, [r1, #0]
 800f1e4:	061f      	lsls	r7, r3, #24
 800f1e6:	f856 5b04 	ldr.w	r5, [r6], #4
 800f1ea:	600e      	str	r6, [r1, #0]
 800f1ec:	d514      	bpl.n	800f218 <_printf_i+0x1ac>
 800f1ee:	07d9      	lsls	r1, r3, #31
 800f1f0:	bf44      	itt	mi
 800f1f2:	f043 0320 	orrmi.w	r3, r3, #32
 800f1f6:	6023      	strmi	r3, [r4, #0]
 800f1f8:	b91d      	cbnz	r5, 800f202 <_printf_i+0x196>
 800f1fa:	6823      	ldr	r3, [r4, #0]
 800f1fc:	f023 0320 	bic.w	r3, r3, #32
 800f200:	6023      	str	r3, [r4, #0]
 800f202:	2310      	movs	r3, #16
 800f204:	e7b0      	b.n	800f168 <_printf_i+0xfc>
 800f206:	6823      	ldr	r3, [r4, #0]
 800f208:	f043 0320 	orr.w	r3, r3, #32
 800f20c:	6023      	str	r3, [r4, #0]
 800f20e:	2378      	movs	r3, #120	; 0x78
 800f210:	4828      	ldr	r0, [pc, #160]	; (800f2b4 <_printf_i+0x248>)
 800f212:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f216:	e7e3      	b.n	800f1e0 <_printf_i+0x174>
 800f218:	065e      	lsls	r6, r3, #25
 800f21a:	bf48      	it	mi
 800f21c:	b2ad      	uxthmi	r5, r5
 800f21e:	e7e6      	b.n	800f1ee <_printf_i+0x182>
 800f220:	4616      	mov	r6, r2
 800f222:	e7bb      	b.n	800f19c <_printf_i+0x130>
 800f224:	680b      	ldr	r3, [r1, #0]
 800f226:	6826      	ldr	r6, [r4, #0]
 800f228:	6960      	ldr	r0, [r4, #20]
 800f22a:	1d1d      	adds	r5, r3, #4
 800f22c:	600d      	str	r5, [r1, #0]
 800f22e:	0635      	lsls	r5, r6, #24
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	d501      	bpl.n	800f238 <_printf_i+0x1cc>
 800f234:	6018      	str	r0, [r3, #0]
 800f236:	e002      	b.n	800f23e <_printf_i+0x1d2>
 800f238:	0671      	lsls	r1, r6, #25
 800f23a:	d5fb      	bpl.n	800f234 <_printf_i+0x1c8>
 800f23c:	8018      	strh	r0, [r3, #0]
 800f23e:	2300      	movs	r3, #0
 800f240:	6123      	str	r3, [r4, #16]
 800f242:	4616      	mov	r6, r2
 800f244:	e7ba      	b.n	800f1bc <_printf_i+0x150>
 800f246:	680b      	ldr	r3, [r1, #0]
 800f248:	1d1a      	adds	r2, r3, #4
 800f24a:	600a      	str	r2, [r1, #0]
 800f24c:	681e      	ldr	r6, [r3, #0]
 800f24e:	6862      	ldr	r2, [r4, #4]
 800f250:	2100      	movs	r1, #0
 800f252:	4630      	mov	r0, r6
 800f254:	f7f0 ffdc 	bl	8000210 <memchr>
 800f258:	b108      	cbz	r0, 800f25e <_printf_i+0x1f2>
 800f25a:	1b80      	subs	r0, r0, r6
 800f25c:	6060      	str	r0, [r4, #4]
 800f25e:	6863      	ldr	r3, [r4, #4]
 800f260:	6123      	str	r3, [r4, #16]
 800f262:	2300      	movs	r3, #0
 800f264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f268:	e7a8      	b.n	800f1bc <_printf_i+0x150>
 800f26a:	6923      	ldr	r3, [r4, #16]
 800f26c:	4632      	mov	r2, r6
 800f26e:	4649      	mov	r1, r9
 800f270:	4640      	mov	r0, r8
 800f272:	47d0      	blx	sl
 800f274:	3001      	adds	r0, #1
 800f276:	d0ab      	beq.n	800f1d0 <_printf_i+0x164>
 800f278:	6823      	ldr	r3, [r4, #0]
 800f27a:	079b      	lsls	r3, r3, #30
 800f27c:	d413      	bmi.n	800f2a6 <_printf_i+0x23a>
 800f27e:	68e0      	ldr	r0, [r4, #12]
 800f280:	9b03      	ldr	r3, [sp, #12]
 800f282:	4298      	cmp	r0, r3
 800f284:	bfb8      	it	lt
 800f286:	4618      	movlt	r0, r3
 800f288:	e7a4      	b.n	800f1d4 <_printf_i+0x168>
 800f28a:	2301      	movs	r3, #1
 800f28c:	4632      	mov	r2, r6
 800f28e:	4649      	mov	r1, r9
 800f290:	4640      	mov	r0, r8
 800f292:	47d0      	blx	sl
 800f294:	3001      	adds	r0, #1
 800f296:	d09b      	beq.n	800f1d0 <_printf_i+0x164>
 800f298:	3501      	adds	r5, #1
 800f29a:	68e3      	ldr	r3, [r4, #12]
 800f29c:	9903      	ldr	r1, [sp, #12]
 800f29e:	1a5b      	subs	r3, r3, r1
 800f2a0:	42ab      	cmp	r3, r5
 800f2a2:	dcf2      	bgt.n	800f28a <_printf_i+0x21e>
 800f2a4:	e7eb      	b.n	800f27e <_printf_i+0x212>
 800f2a6:	2500      	movs	r5, #0
 800f2a8:	f104 0619 	add.w	r6, r4, #25
 800f2ac:	e7f5      	b.n	800f29a <_printf_i+0x22e>
 800f2ae:	bf00      	nop
 800f2b0:	080168f9 	.word	0x080168f9
 800f2b4:	0801690a 	.word	0x0801690a

0800f2b8 <_sbrk_r>:
 800f2b8:	b538      	push	{r3, r4, r5, lr}
 800f2ba:	4d06      	ldr	r5, [pc, #24]	; (800f2d4 <_sbrk_r+0x1c>)
 800f2bc:	2300      	movs	r3, #0
 800f2be:	4604      	mov	r4, r0
 800f2c0:	4608      	mov	r0, r1
 800f2c2:	602b      	str	r3, [r5, #0]
 800f2c4:	f7f1 f99a 	bl	80005fc <_sbrk>
 800f2c8:	1c43      	adds	r3, r0, #1
 800f2ca:	d102      	bne.n	800f2d2 <_sbrk_r+0x1a>
 800f2cc:	682b      	ldr	r3, [r5, #0]
 800f2ce:	b103      	cbz	r3, 800f2d2 <_sbrk_r+0x1a>
 800f2d0:	6023      	str	r3, [r4, #0]
 800f2d2:	bd38      	pop	{r3, r4, r5, pc}
 800f2d4:	20010d70 	.word	0x20010d70

0800f2d8 <__sread>:
 800f2d8:	b510      	push	{r4, lr}
 800f2da:	460c      	mov	r4, r1
 800f2dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2e0:	f000 f8a8 	bl	800f434 <_read_r>
 800f2e4:	2800      	cmp	r0, #0
 800f2e6:	bfab      	itete	ge
 800f2e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f2ea:	89a3      	ldrhlt	r3, [r4, #12]
 800f2ec:	181b      	addge	r3, r3, r0
 800f2ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f2f2:	bfac      	ite	ge
 800f2f4:	6563      	strge	r3, [r4, #84]	; 0x54
 800f2f6:	81a3      	strhlt	r3, [r4, #12]
 800f2f8:	bd10      	pop	{r4, pc}

0800f2fa <__swrite>:
 800f2fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2fe:	461f      	mov	r7, r3
 800f300:	898b      	ldrh	r3, [r1, #12]
 800f302:	05db      	lsls	r3, r3, #23
 800f304:	4605      	mov	r5, r0
 800f306:	460c      	mov	r4, r1
 800f308:	4616      	mov	r6, r2
 800f30a:	d505      	bpl.n	800f318 <__swrite+0x1e>
 800f30c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f310:	2302      	movs	r3, #2
 800f312:	2200      	movs	r2, #0
 800f314:	f000 f870 	bl	800f3f8 <_lseek_r>
 800f318:	89a3      	ldrh	r3, [r4, #12]
 800f31a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f31e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f322:	81a3      	strh	r3, [r4, #12]
 800f324:	4632      	mov	r2, r6
 800f326:	463b      	mov	r3, r7
 800f328:	4628      	mov	r0, r5
 800f32a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f32e:	f000 b817 	b.w	800f360 <_write_r>

0800f332 <__sseek>:
 800f332:	b510      	push	{r4, lr}
 800f334:	460c      	mov	r4, r1
 800f336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f33a:	f000 f85d 	bl	800f3f8 <_lseek_r>
 800f33e:	1c43      	adds	r3, r0, #1
 800f340:	89a3      	ldrh	r3, [r4, #12]
 800f342:	bf15      	itete	ne
 800f344:	6560      	strne	r0, [r4, #84]	; 0x54
 800f346:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f34a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f34e:	81a3      	strheq	r3, [r4, #12]
 800f350:	bf18      	it	ne
 800f352:	81a3      	strhne	r3, [r4, #12]
 800f354:	bd10      	pop	{r4, pc}

0800f356 <__sclose>:
 800f356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f35a:	f000 b81b 	b.w	800f394 <_close_r>
	...

0800f360 <_write_r>:
 800f360:	b538      	push	{r3, r4, r5, lr}
 800f362:	4d07      	ldr	r5, [pc, #28]	; (800f380 <_write_r+0x20>)
 800f364:	4604      	mov	r4, r0
 800f366:	4608      	mov	r0, r1
 800f368:	4611      	mov	r1, r2
 800f36a:	2200      	movs	r2, #0
 800f36c:	602a      	str	r2, [r5, #0]
 800f36e:	461a      	mov	r2, r3
 800f370:	f7f1 f974 	bl	800065c <_write>
 800f374:	1c43      	adds	r3, r0, #1
 800f376:	d102      	bne.n	800f37e <_write_r+0x1e>
 800f378:	682b      	ldr	r3, [r5, #0]
 800f37a:	b103      	cbz	r3, 800f37e <_write_r+0x1e>
 800f37c:	6023      	str	r3, [r4, #0]
 800f37e:	bd38      	pop	{r3, r4, r5, pc}
 800f380:	20010d70 	.word	0x20010d70

0800f384 <abort>:
 800f384:	b508      	push	{r3, lr}
 800f386:	2006      	movs	r0, #6
 800f388:	f000 f88e 	bl	800f4a8 <raise>
 800f38c:	2001      	movs	r0, #1
 800f38e:	f7f1 f95f 	bl	8000650 <_exit>
	...

0800f394 <_close_r>:
 800f394:	b538      	push	{r3, r4, r5, lr}
 800f396:	4d06      	ldr	r5, [pc, #24]	; (800f3b0 <_close_r+0x1c>)
 800f398:	2300      	movs	r3, #0
 800f39a:	4604      	mov	r4, r0
 800f39c:	4608      	mov	r0, r1
 800f39e:	602b      	str	r3, [r5, #0]
 800f3a0:	f7f1 f969 	bl	8000676 <_close>
 800f3a4:	1c43      	adds	r3, r0, #1
 800f3a6:	d102      	bne.n	800f3ae <_close_r+0x1a>
 800f3a8:	682b      	ldr	r3, [r5, #0]
 800f3aa:	b103      	cbz	r3, 800f3ae <_close_r+0x1a>
 800f3ac:	6023      	str	r3, [r4, #0]
 800f3ae:	bd38      	pop	{r3, r4, r5, pc}
 800f3b0:	20010d70 	.word	0x20010d70

0800f3b4 <_fstat_r>:
 800f3b4:	b538      	push	{r3, r4, r5, lr}
 800f3b6:	4d07      	ldr	r5, [pc, #28]	; (800f3d4 <_fstat_r+0x20>)
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	4604      	mov	r4, r0
 800f3bc:	4608      	mov	r0, r1
 800f3be:	4611      	mov	r1, r2
 800f3c0:	602b      	str	r3, [r5, #0]
 800f3c2:	f7f1 f95b 	bl	800067c <_fstat>
 800f3c6:	1c43      	adds	r3, r0, #1
 800f3c8:	d102      	bne.n	800f3d0 <_fstat_r+0x1c>
 800f3ca:	682b      	ldr	r3, [r5, #0]
 800f3cc:	b103      	cbz	r3, 800f3d0 <_fstat_r+0x1c>
 800f3ce:	6023      	str	r3, [r4, #0]
 800f3d0:	bd38      	pop	{r3, r4, r5, pc}
 800f3d2:	bf00      	nop
 800f3d4:	20010d70 	.word	0x20010d70

0800f3d8 <_isatty_r>:
 800f3d8:	b538      	push	{r3, r4, r5, lr}
 800f3da:	4d06      	ldr	r5, [pc, #24]	; (800f3f4 <_isatty_r+0x1c>)
 800f3dc:	2300      	movs	r3, #0
 800f3de:	4604      	mov	r4, r0
 800f3e0:	4608      	mov	r0, r1
 800f3e2:	602b      	str	r3, [r5, #0]
 800f3e4:	f7f1 f94f 	bl	8000686 <_isatty>
 800f3e8:	1c43      	adds	r3, r0, #1
 800f3ea:	d102      	bne.n	800f3f2 <_isatty_r+0x1a>
 800f3ec:	682b      	ldr	r3, [r5, #0]
 800f3ee:	b103      	cbz	r3, 800f3f2 <_isatty_r+0x1a>
 800f3f0:	6023      	str	r3, [r4, #0]
 800f3f2:	bd38      	pop	{r3, r4, r5, pc}
 800f3f4:	20010d70 	.word	0x20010d70

0800f3f8 <_lseek_r>:
 800f3f8:	b538      	push	{r3, r4, r5, lr}
 800f3fa:	4d07      	ldr	r5, [pc, #28]	; (800f418 <_lseek_r+0x20>)
 800f3fc:	4604      	mov	r4, r0
 800f3fe:	4608      	mov	r0, r1
 800f400:	4611      	mov	r1, r2
 800f402:	2200      	movs	r2, #0
 800f404:	602a      	str	r2, [r5, #0]
 800f406:	461a      	mov	r2, r3
 800f408:	f7f1 f93f 	bl	800068a <_lseek>
 800f40c:	1c43      	adds	r3, r0, #1
 800f40e:	d102      	bne.n	800f416 <_lseek_r+0x1e>
 800f410:	682b      	ldr	r3, [r5, #0]
 800f412:	b103      	cbz	r3, 800f416 <_lseek_r+0x1e>
 800f414:	6023      	str	r3, [r4, #0]
 800f416:	bd38      	pop	{r3, r4, r5, pc}
 800f418:	20010d70 	.word	0x20010d70

0800f41c <__malloc_lock>:
 800f41c:	4801      	ldr	r0, [pc, #4]	; (800f424 <__malloc_lock+0x8>)
 800f41e:	f7ff bb45 	b.w	800eaac <__retarget_lock_acquire_recursive>
 800f422:	bf00      	nop
 800f424:	20010d7c 	.word	0x20010d7c

0800f428 <__malloc_unlock>:
 800f428:	4801      	ldr	r0, [pc, #4]	; (800f430 <__malloc_unlock+0x8>)
 800f42a:	f7ff bb40 	b.w	800eaae <__retarget_lock_release_recursive>
 800f42e:	bf00      	nop
 800f430:	20010d7c 	.word	0x20010d7c

0800f434 <_read_r>:
 800f434:	b538      	push	{r3, r4, r5, lr}
 800f436:	4d07      	ldr	r5, [pc, #28]	; (800f454 <_read_r+0x20>)
 800f438:	4604      	mov	r4, r0
 800f43a:	4608      	mov	r0, r1
 800f43c:	4611      	mov	r1, r2
 800f43e:	2200      	movs	r2, #0
 800f440:	602a      	str	r2, [r5, #0]
 800f442:	461a      	mov	r2, r3
 800f444:	f7f1 f923 	bl	800068e <_read>
 800f448:	1c43      	adds	r3, r0, #1
 800f44a:	d102      	bne.n	800f452 <_read_r+0x1e>
 800f44c:	682b      	ldr	r3, [r5, #0]
 800f44e:	b103      	cbz	r3, 800f452 <_read_r+0x1e>
 800f450:	6023      	str	r3, [r4, #0]
 800f452:	bd38      	pop	{r3, r4, r5, pc}
 800f454:	20010d70 	.word	0x20010d70

0800f458 <_raise_r>:
 800f458:	291f      	cmp	r1, #31
 800f45a:	b538      	push	{r3, r4, r5, lr}
 800f45c:	4604      	mov	r4, r0
 800f45e:	460d      	mov	r5, r1
 800f460:	d904      	bls.n	800f46c <_raise_r+0x14>
 800f462:	2316      	movs	r3, #22
 800f464:	6003      	str	r3, [r0, #0]
 800f466:	f04f 30ff 	mov.w	r0, #4294967295
 800f46a:	bd38      	pop	{r3, r4, r5, pc}
 800f46c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f46e:	b112      	cbz	r2, 800f476 <_raise_r+0x1e>
 800f470:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f474:	b94b      	cbnz	r3, 800f48a <_raise_r+0x32>
 800f476:	4620      	mov	r0, r4
 800f478:	f000 f830 	bl	800f4dc <_getpid_r>
 800f47c:	462a      	mov	r2, r5
 800f47e:	4601      	mov	r1, r0
 800f480:	4620      	mov	r0, r4
 800f482:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f486:	f000 b817 	b.w	800f4b8 <_kill_r>
 800f48a:	2b01      	cmp	r3, #1
 800f48c:	d00a      	beq.n	800f4a4 <_raise_r+0x4c>
 800f48e:	1c59      	adds	r1, r3, #1
 800f490:	d103      	bne.n	800f49a <_raise_r+0x42>
 800f492:	2316      	movs	r3, #22
 800f494:	6003      	str	r3, [r0, #0]
 800f496:	2001      	movs	r0, #1
 800f498:	e7e7      	b.n	800f46a <_raise_r+0x12>
 800f49a:	2400      	movs	r4, #0
 800f49c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f4a0:	4628      	mov	r0, r5
 800f4a2:	4798      	blx	r3
 800f4a4:	2000      	movs	r0, #0
 800f4a6:	e7e0      	b.n	800f46a <_raise_r+0x12>

0800f4a8 <raise>:
 800f4a8:	4b02      	ldr	r3, [pc, #8]	; (800f4b4 <raise+0xc>)
 800f4aa:	4601      	mov	r1, r0
 800f4ac:	6818      	ldr	r0, [r3, #0]
 800f4ae:	f7ff bfd3 	b.w	800f458 <_raise_r>
 800f4b2:	bf00      	nop
 800f4b4:	20000048 	.word	0x20000048

0800f4b8 <_kill_r>:
 800f4b8:	b538      	push	{r3, r4, r5, lr}
 800f4ba:	4d07      	ldr	r5, [pc, #28]	; (800f4d8 <_kill_r+0x20>)
 800f4bc:	2300      	movs	r3, #0
 800f4be:	4604      	mov	r4, r0
 800f4c0:	4608      	mov	r0, r1
 800f4c2:	4611      	mov	r1, r2
 800f4c4:	602b      	str	r3, [r5, #0]
 800f4c6:	f7f1 f8bb 	bl	8000640 <_kill>
 800f4ca:	1c43      	adds	r3, r0, #1
 800f4cc:	d102      	bne.n	800f4d4 <_kill_r+0x1c>
 800f4ce:	682b      	ldr	r3, [r5, #0]
 800f4d0:	b103      	cbz	r3, 800f4d4 <_kill_r+0x1c>
 800f4d2:	6023      	str	r3, [r4, #0]
 800f4d4:	bd38      	pop	{r3, r4, r5, pc}
 800f4d6:	bf00      	nop
 800f4d8:	20010d70 	.word	0x20010d70

0800f4dc <_getpid_r>:
 800f4dc:	f7f1 b8ae 	b.w	800063c <_getpid>

0800f4e0 <_init>:
 800f4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4e2:	bf00      	nop
 800f4e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4e6:	bc08      	pop	{r3}
 800f4e8:	469e      	mov	lr, r3
 800f4ea:	4770      	bx	lr

0800f4ec <_fini>:
 800f4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4ee:	bf00      	nop
 800f4f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4f2:	bc08      	pop	{r3}
 800f4f4:	469e      	mov	lr, r3
 800f4f6:	4770      	bx	lr
